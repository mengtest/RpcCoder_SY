// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LobbyServerRpc.proto

#ifndef PROTOBUF_LobbyServerRpc_2eproto__INCLUDED
#define PROTOBUF_LobbyServerRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LobbyServerRpc_2eproto();
void protobuf_AssignDesc_LobbyServerRpc_2eproto();
void protobuf_ShutdownFile_LobbyServerRpc_2eproto();

class LobbyServerRpcGetServerListAsk;
class LobbyServerRpcGetServerListReply;

// ===================================================================

class LobbyServerRpcGetServerListAsk : public ::google::protobuf::Message {
 public:
  LobbyServerRpcGetServerListAsk();
  virtual ~LobbyServerRpcGetServerListAsk();

  LobbyServerRpcGetServerListAsk(const LobbyServerRpcGetServerListAsk& from);

  inline LobbyServerRpcGetServerListAsk& operator=(const LobbyServerRpcGetServerListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyServerRpcGetServerListAsk& default_instance();

  void Swap(LobbyServerRpcGetServerListAsk* other);

  // implements Message ----------------------------------------------

  LobbyServerRpcGetServerListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyServerRpcGetServerListAsk& from);
  void MergeFrom(const LobbyServerRpcGetServerListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Sdk_user_id = 1;
  inline bool has_sdk_user_id() const;
  inline void clear_sdk_user_id();
  static const int kSdkUserIdFieldNumber = 1;
  inline const ::std::string& sdk_user_id() const;
  inline void set_sdk_user_id(const ::std::string& value);
  inline void set_sdk_user_id(const char* value);
  inline void set_sdk_user_id(const char* value, size_t size);
  inline ::std::string* mutable_sdk_user_id();
  inline ::std::string* release_sdk_user_id();
  inline void set_allocated_sdk_user_id(::std::string* sdk_user_id);

  // @@protoc_insertion_point(class_scope:LobbyServerRpcGetServerListAsk)
 private:
  inline void set_has_sdk_user_id();
  inline void clear_has_sdk_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sdk_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LobbyServerRpc_2eproto();
  friend void protobuf_AssignDesc_LobbyServerRpc_2eproto();
  friend void protobuf_ShutdownFile_LobbyServerRpc_2eproto();

  void InitAsDefaultInstance();
  static LobbyServerRpcGetServerListAsk* default_instance_;
};
// -------------------------------------------------------------------

class LobbyServerRpcGetServerListReply : public ::google::protobuf::Message {
 public:
  LobbyServerRpcGetServerListReply();
  virtual ~LobbyServerRpcGetServerListReply();

  LobbyServerRpcGetServerListReply(const LobbyServerRpcGetServerListReply& from);

  inline LobbyServerRpcGetServerListReply& operator=(const LobbyServerRpcGetServerListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LobbyServerRpcGetServerListReply& default_instance();

  void Swap(LobbyServerRpcGetServerListReply* other);

  // implements Message ----------------------------------------------

  LobbyServerRpcGetServerListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LobbyServerRpcGetServerListReply& from);
  void MergeFrom(const LobbyServerRpcGetServerListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ServerInfo Server_list = 2;
  inline int server_list_size() const;
  inline void clear_server_list();
  static const int kServerListFieldNumber = 2;
  inline const ::ServerInfo& server_list(int index) const;
  inline ::ServerInfo* mutable_server_list(int index);
  inline ::ServerInfo* add_server_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerInfo >&
      server_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerInfo >*
      mutable_server_list();

  // @@protoc_insertion_point(class_scope:LobbyServerRpcGetServerListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ServerInfo > server_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LobbyServerRpc_2eproto();
  friend void protobuf_AssignDesc_LobbyServerRpc_2eproto();
  friend void protobuf_ShutdownFile_LobbyServerRpc_2eproto();

  void InitAsDefaultInstance();
  static LobbyServerRpcGetServerListReply* default_instance_;
};
// ===================================================================


// ===================================================================

// LobbyServerRpcGetServerListAsk

// optional string Sdk_user_id = 1;
inline bool LobbyServerRpcGetServerListAsk::has_sdk_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyServerRpcGetServerListAsk::set_has_sdk_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyServerRpcGetServerListAsk::clear_has_sdk_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyServerRpcGetServerListAsk::clear_sdk_user_id() {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_->clear();
  }
  clear_has_sdk_user_id();
}
inline const ::std::string& LobbyServerRpcGetServerListAsk::sdk_user_id() const {
  return *sdk_user_id_;
}
inline void LobbyServerRpcGetServerListAsk::set_sdk_user_id(const ::std::string& value) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(value);
}
inline void LobbyServerRpcGetServerListAsk::set_sdk_user_id(const char* value) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(value);
}
inline void LobbyServerRpcGetServerListAsk::set_sdk_user_id(const char* value, size_t size) {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  sdk_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LobbyServerRpcGetServerListAsk::mutable_sdk_user_id() {
  set_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    sdk_user_id_ = new ::std::string;
  }
  return sdk_user_id_;
}
inline ::std::string* LobbyServerRpcGetServerListAsk::release_sdk_user_id() {
  clear_has_sdk_user_id();
  if (sdk_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdk_user_id_;
    sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LobbyServerRpcGetServerListAsk::set_allocated_sdk_user_id(::std::string* sdk_user_id) {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (sdk_user_id) {
    set_has_sdk_user_id();
    sdk_user_id_ = sdk_user_id;
  } else {
    clear_has_sdk_user_id();
    sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LobbyServerRpcGetServerListReply

// optional int32 Result = 1 [default = -1];
inline bool LobbyServerRpcGetServerListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LobbyServerRpcGetServerListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LobbyServerRpcGetServerListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LobbyServerRpcGetServerListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 LobbyServerRpcGetServerListReply::result() const {
  return result_;
}
inline void LobbyServerRpcGetServerListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .ServerInfo Server_list = 2;
inline int LobbyServerRpcGetServerListReply::server_list_size() const {
  return server_list_.size();
}
inline void LobbyServerRpcGetServerListReply::clear_server_list() {
  server_list_.Clear();
}
inline const ::ServerInfo& LobbyServerRpcGetServerListReply::server_list(int index) const {
  return server_list_.Get(index);
}
inline ::ServerInfo* LobbyServerRpcGetServerListReply::mutable_server_list(int index) {
  return server_list_.Mutable(index);
}
inline ::ServerInfo* LobbyServerRpcGetServerListReply::add_server_list() {
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerInfo >&
LobbyServerRpcGetServerListReply::server_list() const {
  return server_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerInfo >*
LobbyServerRpcGetServerListReply::mutable_server_list() {
  return &server_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LobbyServerRpc_2eproto__INCLUDED
