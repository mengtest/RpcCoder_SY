// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LobbyServerRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LobbyServerRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LobbyServerRpcGetServerListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyServerRpcGetServerListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyServerRpcGetServerListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyServerRpcGetServerListReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LobbyServerRpc_2eproto() {
  protobuf_AddDesc_LobbyServerRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LobbyServerRpc.proto");
  GOOGLE_CHECK(file != NULL);
  LobbyServerRpcGetServerListAsk_descriptor_ = file->message_type(0);
  static const int LobbyServerRpcGetServerListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListAsk, sdk_user_id_),
  };
  LobbyServerRpcGetServerListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyServerRpcGetServerListAsk_descriptor_,
      LobbyServerRpcGetServerListAsk::default_instance_,
      LobbyServerRpcGetServerListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyServerRpcGetServerListAsk));
  LobbyServerRpcGetServerListReply_descriptor_ = file->message_type(1);
  static const int LobbyServerRpcGetServerListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListReply, server_list_),
  };
  LobbyServerRpcGetServerListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyServerRpcGetServerListReply_descriptor_,
      LobbyServerRpcGetServerListReply::default_instance_,
      LobbyServerRpcGetServerListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyServerRpcGetServerListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyServerRpcGetServerListReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LobbyServerRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyServerRpcGetServerListAsk_descriptor_, &LobbyServerRpcGetServerListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyServerRpcGetServerListReply_descriptor_, &LobbyServerRpcGetServerListReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LobbyServerRpc_2eproto() {
  delete LobbyServerRpcGetServerListAsk::default_instance_;
  delete LobbyServerRpcGetServerListAsk_reflection_;
  delete LobbyServerRpcGetServerListReply::default_instance_;
  delete LobbyServerRpcGetServerListReply_reflection_;
}

void protobuf_AddDesc_LobbyServerRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024LobbyServerRpc.proto\032\022PublicStruct.pro"
    "to\"5\n\036LobbyServerRpcGetServerListAsk\022\023\n\013"
    "Sdk_user_id\030\001 \001(\t\"X\n LobbyServerRpcGetSe"
    "rverListReply\022\022\n\006Result\030\001 \001(\005:\002-1\022 \n\013Ser"
    "ver_list\030\002 \003(\0132\013.ServerInfo", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LobbyServerRpc.proto", &protobuf_RegisterTypes);
  LobbyServerRpcGetServerListAsk::default_instance_ = new LobbyServerRpcGetServerListAsk();
  LobbyServerRpcGetServerListReply::default_instance_ = new LobbyServerRpcGetServerListReply();
  LobbyServerRpcGetServerListAsk::default_instance_->InitAsDefaultInstance();
  LobbyServerRpcGetServerListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LobbyServerRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LobbyServerRpc_2eproto {
  StaticDescriptorInitializer_LobbyServerRpc_2eproto() {
    protobuf_AddDesc_LobbyServerRpc_2eproto();
  }
} static_descriptor_initializer_LobbyServerRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LobbyServerRpcGetServerListAsk::kSdkUserIdFieldNumber;
#endif  // !_MSC_VER

LobbyServerRpcGetServerListAsk::LobbyServerRpcGetServerListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyServerRpcGetServerListAsk::InitAsDefaultInstance() {
}

LobbyServerRpcGetServerListAsk::LobbyServerRpcGetServerListAsk(const LobbyServerRpcGetServerListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyServerRpcGetServerListAsk::SharedCtor() {
  _cached_size_ = 0;
  sdk_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyServerRpcGetServerListAsk::~LobbyServerRpcGetServerListAsk() {
  SharedDtor();
}

void LobbyServerRpcGetServerListAsk::SharedDtor() {
  if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sdk_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LobbyServerRpcGetServerListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyServerRpcGetServerListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyServerRpcGetServerListAsk_descriptor_;
}

const LobbyServerRpcGetServerListAsk& LobbyServerRpcGetServerListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LobbyServerRpc_2eproto();
  return *default_instance_;
}

LobbyServerRpcGetServerListAsk* LobbyServerRpcGetServerListAsk::default_instance_ = NULL;

LobbyServerRpcGetServerListAsk* LobbyServerRpcGetServerListAsk::New() const {
  return new LobbyServerRpcGetServerListAsk;
}

void LobbyServerRpcGetServerListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sdk_user_id()) {
      if (sdk_user_id_ != &::google::protobuf::internal::kEmptyString) {
        sdk_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyServerRpcGetServerListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Sdk_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdk_user_id().data(), this->sdk_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyServerRpcGetServerListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Sdk_user_id = 1;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sdk_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyServerRpcGetServerListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Sdk_user_id = 1;
  if (has_sdk_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdk_user_id().data(), this->sdk_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sdk_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyServerRpcGetServerListAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Sdk_user_id = 1;
    if (has_sdk_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyServerRpcGetServerListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyServerRpcGetServerListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyServerRpcGetServerListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyServerRpcGetServerListAsk::MergeFrom(const LobbyServerRpcGetServerListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sdk_user_id()) {
      set_sdk_user_id(from.sdk_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyServerRpcGetServerListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyServerRpcGetServerListAsk::CopyFrom(const LobbyServerRpcGetServerListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyServerRpcGetServerListAsk::IsInitialized() const {

  return true;
}

void LobbyServerRpcGetServerListAsk::Swap(LobbyServerRpcGetServerListAsk* other) {
  if (other != this) {
    std::swap(sdk_user_id_, other->sdk_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyServerRpcGetServerListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyServerRpcGetServerListAsk_descriptor_;
  metadata.reflection = LobbyServerRpcGetServerListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LobbyServerRpcGetServerListReply::kResultFieldNumber;
const int LobbyServerRpcGetServerListReply::kServerListFieldNumber;
#endif  // !_MSC_VER

LobbyServerRpcGetServerListReply::LobbyServerRpcGetServerListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyServerRpcGetServerListReply::InitAsDefaultInstance() {
}

LobbyServerRpcGetServerListReply::LobbyServerRpcGetServerListReply(const LobbyServerRpcGetServerListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyServerRpcGetServerListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyServerRpcGetServerListReply::~LobbyServerRpcGetServerListReply() {
  SharedDtor();
}

void LobbyServerRpcGetServerListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LobbyServerRpcGetServerListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyServerRpcGetServerListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyServerRpcGetServerListReply_descriptor_;
}

const LobbyServerRpcGetServerListReply& LobbyServerRpcGetServerListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LobbyServerRpc_2eproto();
  return *default_instance_;
}

LobbyServerRpcGetServerListReply* LobbyServerRpcGetServerListReply::default_instance_ = NULL;

LobbyServerRpcGetServerListReply* LobbyServerRpcGetServerListReply::New() const {
  return new LobbyServerRpcGetServerListReply;
}

void LobbyServerRpcGetServerListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyServerRpcGetServerListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Server_list;
        break;
      }

      // repeated .ServerInfo Server_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyServerRpcGetServerListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ServerInfo Server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyServerRpcGetServerListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ServerInfo Server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyServerRpcGetServerListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ServerInfo Server_list = 2;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyServerRpcGetServerListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyServerRpcGetServerListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyServerRpcGetServerListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyServerRpcGetServerListReply::MergeFrom(const LobbyServerRpcGetServerListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyServerRpcGetServerListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyServerRpcGetServerListReply::CopyFrom(const LobbyServerRpcGetServerListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyServerRpcGetServerListReply::IsInitialized() const {

  return true;
}

void LobbyServerRpcGetServerListReply::Swap(LobbyServerRpcGetServerListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyServerRpcGetServerListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyServerRpcGetServerListReply_descriptor_;
  metadata.reflection = LobbyServerRpcGetServerListReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
