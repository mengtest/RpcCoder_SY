// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemOperationRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemOperationRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveSettingSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemResolveSettingSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveSettingSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemResolveSettingSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemResolveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemResolveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcChangeSettingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcChangeSettingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcChangeSettingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcChangeSettingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcBatchResolveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcBatchResolveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcBatchResolveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcBatchResolveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcItemCompoundAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemCompoundAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemOperationRpcItemCompoundReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemOperationRpcItemCompoundReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemOperationRpc_2eproto() {
  protobuf_AddDesc_ItemOperationRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemOperationRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ItemOperationRpcItemResolveSettingSyncAsk_descriptor_ = file->message_type(0);
  static const int ItemOperationRpcItemResolveSettingSyncAsk_offsets_[1] = {
  };
  ItemOperationRpcItemResolveSettingSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemResolveSettingSyncAsk_descriptor_,
      ItemOperationRpcItemResolveSettingSyncAsk::default_instance_,
      ItemOperationRpcItemResolveSettingSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemResolveSettingSyncAsk));
  ItemOperationRpcItemResolveSettingSyncReply_descriptor_ = file->message_type(1);
  static const int ItemOperationRpcItemResolveSettingSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncReply, setting_),
  };
  ItemOperationRpcItemResolveSettingSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemResolveSettingSyncReply_descriptor_,
      ItemOperationRpcItemResolveSettingSyncReply::default_instance_,
      ItemOperationRpcItemResolveSettingSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveSettingSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemResolveSettingSyncReply));
  ItemOperationRpcItemResolveAsk_descriptor_ = file->message_type(2);
  static const int ItemOperationRpcItemResolveAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveAsk, itempos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveAsk, count_),
  };
  ItemOperationRpcItemResolveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemResolveAsk_descriptor_,
      ItemOperationRpcItemResolveAsk::default_instance_,
      ItemOperationRpcItemResolveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemResolveAsk));
  ItemOperationRpcItemResolveReply_descriptor_ = file->message_type(3);
  static const int ItemOperationRpcItemResolveReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveReply, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveReply, itemsimpledatalist_),
  };
  ItemOperationRpcItemResolveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemResolveReply_descriptor_,
      ItemOperationRpcItemResolveReply::default_instance_,
      ItemOperationRpcItemResolveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemResolveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemResolveReply));
  ItemOperationRpcChangeSettingAsk_descriptor_ = file->message_type(4);
  static const int ItemOperationRpcChangeSettingAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingAsk, settinglist_),
  };
  ItemOperationRpcChangeSettingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcChangeSettingAsk_descriptor_,
      ItemOperationRpcChangeSettingAsk::default_instance_,
      ItemOperationRpcChangeSettingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcChangeSettingAsk));
  ItemOperationRpcChangeSettingReply_descriptor_ = file->message_type(5);
  static const int ItemOperationRpcChangeSettingReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingReply, result_),
  };
  ItemOperationRpcChangeSettingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcChangeSettingReply_descriptor_,
      ItemOperationRpcChangeSettingReply::default_instance_,
      ItemOperationRpcChangeSettingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcChangeSettingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcChangeSettingReply));
  ItemOperationRpcBatchResolveAsk_descriptor_ = file->message_type(6);
  static const int ItemOperationRpcBatchResolveAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveAsk, qulity_),
  };
  ItemOperationRpcBatchResolveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcBatchResolveAsk_descriptor_,
      ItemOperationRpcBatchResolveAsk::default_instance_,
      ItemOperationRpcBatchResolveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcBatchResolveAsk));
  ItemOperationRpcBatchResolveReply_descriptor_ = file->message_type(7);
  static const int ItemOperationRpcBatchResolveReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveReply, result_),
  };
  ItemOperationRpcBatchResolveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcBatchResolveReply_descriptor_,
      ItemOperationRpcBatchResolveReply::default_instance_,
      ItemOperationRpcBatchResolveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcBatchResolveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcBatchResolveReply));
  ItemOperationRpcItemCompoundAsk_descriptor_ = file->message_type(8);
  static const int ItemOperationRpcItemCompoundAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundAsk, itemconfid_),
  };
  ItemOperationRpcItemCompoundAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemCompoundAsk_descriptor_,
      ItemOperationRpcItemCompoundAsk::default_instance_,
      ItemOperationRpcItemCompoundAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemCompoundAsk));
  ItemOperationRpcItemCompoundReply_descriptor_ = file->message_type(9);
  static const int ItemOperationRpcItemCompoundReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundReply, itemconfid_),
  };
  ItemOperationRpcItemCompoundReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemOperationRpcItemCompoundReply_descriptor_,
      ItemOperationRpcItemCompoundReply::default_instance_,
      ItemOperationRpcItemCompoundReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemOperationRpcItemCompoundReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemOperationRpcItemCompoundReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemOperationRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemResolveSettingSyncAsk_descriptor_, &ItemOperationRpcItemResolveSettingSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemResolveSettingSyncReply_descriptor_, &ItemOperationRpcItemResolveSettingSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemResolveAsk_descriptor_, &ItemOperationRpcItemResolveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemResolveReply_descriptor_, &ItemOperationRpcItemResolveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcChangeSettingAsk_descriptor_, &ItemOperationRpcChangeSettingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcChangeSettingReply_descriptor_, &ItemOperationRpcChangeSettingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcBatchResolveAsk_descriptor_, &ItemOperationRpcBatchResolveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcBatchResolveReply_descriptor_, &ItemOperationRpcBatchResolveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemCompoundAsk_descriptor_, &ItemOperationRpcItemCompoundAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemOperationRpcItemCompoundReply_descriptor_, &ItemOperationRpcItemCompoundReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemOperationRpc_2eproto() {
  delete ItemOperationRpcItemResolveSettingSyncAsk::default_instance_;
  delete ItemOperationRpcItemResolveSettingSyncAsk_reflection_;
  delete ItemOperationRpcItemResolveSettingSyncReply::default_instance_;
  delete ItemOperationRpcItemResolveSettingSyncReply_reflection_;
  delete ItemOperationRpcItemResolveAsk::default_instance_;
  delete ItemOperationRpcItemResolveAsk_reflection_;
  delete ItemOperationRpcItemResolveReply::default_instance_;
  delete ItemOperationRpcItemResolveReply_reflection_;
  delete ItemOperationRpcChangeSettingAsk::default_instance_;
  delete ItemOperationRpcChangeSettingAsk_reflection_;
  delete ItemOperationRpcChangeSettingReply::default_instance_;
  delete ItemOperationRpcChangeSettingReply_reflection_;
  delete ItemOperationRpcBatchResolveAsk::default_instance_;
  delete ItemOperationRpcBatchResolveAsk_reflection_;
  delete ItemOperationRpcBatchResolveReply::default_instance_;
  delete ItemOperationRpcBatchResolveReply_reflection_;
  delete ItemOperationRpcItemCompoundAsk::default_instance_;
  delete ItemOperationRpcItemCompoundAsk_reflection_;
  delete ItemOperationRpcItemCompoundReply::default_instance_;
  delete ItemOperationRpcItemCompoundReply_reflection_;
}

void protobuf_AddDesc_ItemOperationRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ItemOperationRpc.proto\032\022PublicStruct.p"
    "roto\"+\n)ItemOperationRpcItemResolveSetti"
    "ngSyncAsk\"g\n+ItemOperationRpcItemResolve"
    "SettingSyncReply\022\025\n\006Result\030\001 \001(\005:\005-9999\022"
    "!\n\007Setting\030\002 \003(\0132\020.ItemResolveData\"H\n\036It"
    "emOperationRpcItemResolveAsk\022\023\n\007ItemPos\030"
    "\001 \001(\005:\002-1\022\021\n\005Count\030\002 \001(\005:\002-1\"z\n ItemOper"
    "ationRpcItemResolveReply\022\025\n\006Result\030\001 \001(\005"
    ":\005-9999\022\022\n\006ItemID\030\002 \001(\005:\002-1\022+\n\022ItemSimpl"
    "eDataList\030\003 \003(\0132\017.ItemSimpleData\"I\n Item"
    "OperationRpcChangeSettingAsk\022%\n\013SettingL"
    "ist\030\001 \003(\0132\020.ItemResolveData\";\n\"ItemOpera"
    "tionRpcChangeSettingReply\022\025\n\006Result\030\001 \001("
    "\005:\005-9999\"5\n\037ItemOperationRpcBatchResolve"
    "Ask\022\022\n\006Qulity\030\001 \001(\005:\002-1\":\n!ItemOperation"
    "RpcBatchResolveReply\022\025\n\006Result\030\001 \001(\005:\005-9"
    "999\"9\n\037ItemOperationRpcItemCompoundAsk\022\026"
    "\n\nItemConfID\030\001 \001(\005:\002-1\"R\n!ItemOperationR"
    "pcItemCompoundReply\022\025\n\006Result\030\001 \001(\005:\005-99"
    "99\022\026\n\nItemConfID\030\002 \001(\005:\002-1", 786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemOperationRpc.proto", &protobuf_RegisterTypes);
  ItemOperationRpcItemResolveSettingSyncAsk::default_instance_ = new ItemOperationRpcItemResolveSettingSyncAsk();
  ItemOperationRpcItemResolveSettingSyncReply::default_instance_ = new ItemOperationRpcItemResolveSettingSyncReply();
  ItemOperationRpcItemResolveAsk::default_instance_ = new ItemOperationRpcItemResolveAsk();
  ItemOperationRpcItemResolveReply::default_instance_ = new ItemOperationRpcItemResolveReply();
  ItemOperationRpcChangeSettingAsk::default_instance_ = new ItemOperationRpcChangeSettingAsk();
  ItemOperationRpcChangeSettingReply::default_instance_ = new ItemOperationRpcChangeSettingReply();
  ItemOperationRpcBatchResolveAsk::default_instance_ = new ItemOperationRpcBatchResolveAsk();
  ItemOperationRpcBatchResolveReply::default_instance_ = new ItemOperationRpcBatchResolveReply();
  ItemOperationRpcItemCompoundAsk::default_instance_ = new ItemOperationRpcItemCompoundAsk();
  ItemOperationRpcItemCompoundReply::default_instance_ = new ItemOperationRpcItemCompoundReply();
  ItemOperationRpcItemResolveSettingSyncAsk::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcItemResolveSettingSyncReply::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcItemResolveAsk::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcItemResolveReply::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcChangeSettingAsk::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcChangeSettingReply::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcBatchResolveAsk::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcBatchResolveReply::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcItemCompoundAsk::default_instance_->InitAsDefaultInstance();
  ItemOperationRpcItemCompoundReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemOperationRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemOperationRpc_2eproto {
  StaticDescriptorInitializer_ItemOperationRpc_2eproto() {
    protobuf_AddDesc_ItemOperationRpc_2eproto();
  }
} static_descriptor_initializer_ItemOperationRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ItemOperationRpcItemResolveSettingSyncAsk::ItemOperationRpcItemResolveSettingSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemResolveSettingSyncAsk::InitAsDefaultInstance() {
}

ItemOperationRpcItemResolveSettingSyncAsk::ItemOperationRpcItemResolveSettingSyncAsk(const ItemOperationRpcItemResolveSettingSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveSettingSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemResolveSettingSyncAsk::~ItemOperationRpcItemResolveSettingSyncAsk() {
  SharedDtor();
}

void ItemOperationRpcItemResolveSettingSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemResolveSettingSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveSettingSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemResolveSettingSyncAsk_descriptor_;
}

const ItemOperationRpcItemResolveSettingSyncAsk& ItemOperationRpcItemResolveSettingSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemResolveSettingSyncAsk* ItemOperationRpcItemResolveSettingSyncAsk::default_instance_ = NULL;

ItemOperationRpcItemResolveSettingSyncAsk* ItemOperationRpcItemResolveSettingSyncAsk::New() const {
  return new ItemOperationRpcItemResolveSettingSyncAsk;
}

void ItemOperationRpcItemResolveSettingSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemResolveSettingSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemResolveSettingSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemResolveSettingSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemResolveSettingSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemResolveSettingSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemResolveSettingSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemResolveSettingSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemResolveSettingSyncAsk::MergeFrom(const ItemOperationRpcItemResolveSettingSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemResolveSettingSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveSettingSyncAsk::CopyFrom(const ItemOperationRpcItemResolveSettingSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemResolveSettingSyncAsk::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemResolveSettingSyncAsk::Swap(ItemOperationRpcItemResolveSettingSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemResolveSettingSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemResolveSettingSyncAsk_descriptor_;
  metadata.reflection = ItemOperationRpcItemResolveSettingSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcItemResolveSettingSyncReply::kResultFieldNumber;
const int ItemOperationRpcItemResolveSettingSyncReply::kSettingFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcItemResolveSettingSyncReply::ItemOperationRpcItemResolveSettingSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemResolveSettingSyncReply::InitAsDefaultInstance() {
}

ItemOperationRpcItemResolveSettingSyncReply::ItemOperationRpcItemResolveSettingSyncReply(const ItemOperationRpcItemResolveSettingSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveSettingSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemResolveSettingSyncReply::~ItemOperationRpcItemResolveSettingSyncReply() {
  SharedDtor();
}

void ItemOperationRpcItemResolveSettingSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemResolveSettingSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveSettingSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemResolveSettingSyncReply_descriptor_;
}

const ItemOperationRpcItemResolveSettingSyncReply& ItemOperationRpcItemResolveSettingSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemResolveSettingSyncReply* ItemOperationRpcItemResolveSettingSyncReply::default_instance_ = NULL;

ItemOperationRpcItemResolveSettingSyncReply* ItemOperationRpcItemResolveSettingSyncReply::New() const {
  return new ItemOperationRpcItemResolveSettingSyncReply;
}

void ItemOperationRpcItemResolveSettingSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  setting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemResolveSettingSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Setting;
        break;
      }

      // repeated .ItemResolveData Setting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Setting;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemResolveSettingSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ItemResolveData Setting = 2;
  for (int i = 0; i < this->setting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemResolveSettingSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ItemResolveData Setting = 2;
  for (int i = 0; i < this->setting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemResolveSettingSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ItemResolveData Setting = 2;
  total_size += 1 * this->setting_size();
  for (int i = 0; i < this->setting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->setting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemResolveSettingSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemResolveSettingSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemResolveSettingSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemResolveSettingSyncReply::MergeFrom(const ItemOperationRpcItemResolveSettingSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  setting_.MergeFrom(from.setting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemResolveSettingSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveSettingSyncReply::CopyFrom(const ItemOperationRpcItemResolveSettingSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemResolveSettingSyncReply::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemResolveSettingSyncReply::Swap(ItemOperationRpcItemResolveSettingSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    setting_.Swap(&other->setting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemResolveSettingSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemResolveSettingSyncReply_descriptor_;
  metadata.reflection = ItemOperationRpcItemResolveSettingSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcItemResolveAsk::kItemPosFieldNumber;
const int ItemOperationRpcItemResolveAsk::kCountFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcItemResolveAsk::ItemOperationRpcItemResolveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemResolveAsk::InitAsDefaultInstance() {
}

ItemOperationRpcItemResolveAsk::ItemOperationRpcItemResolveAsk(const ItemOperationRpcItemResolveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveAsk::SharedCtor() {
  _cached_size_ = 0;
  itempos_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemResolveAsk::~ItemOperationRpcItemResolveAsk() {
  SharedDtor();
}

void ItemOperationRpcItemResolveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemResolveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemResolveAsk_descriptor_;
}

const ItemOperationRpcItemResolveAsk& ItemOperationRpcItemResolveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemResolveAsk* ItemOperationRpcItemResolveAsk::default_instance_ = NULL;

ItemOperationRpcItemResolveAsk* ItemOperationRpcItemResolveAsk::New() const {
  return new ItemOperationRpcItemResolveAsk;
}

void ItemOperationRpcItemResolveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itempos_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemResolveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemPos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itempos_)));
          set_has_itempos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemResolveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemPos = 1 [default = -1];
  if (has_itempos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itempos(), output);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemResolveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemPos = 1 [default = -1];
  if (has_itempos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itempos(), target);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemResolveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemPos = 1 [default = -1];
    if (has_itempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itempos());
    }

    // optional int32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemResolveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemResolveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemResolveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemResolveAsk::MergeFrom(const ItemOperationRpcItemResolveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itempos()) {
      set_itempos(from.itempos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemResolveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveAsk::CopyFrom(const ItemOperationRpcItemResolveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemResolveAsk::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemResolveAsk::Swap(ItemOperationRpcItemResolveAsk* other) {
  if (other != this) {
    std::swap(itempos_, other->itempos_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemResolveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemResolveAsk_descriptor_;
  metadata.reflection = ItemOperationRpcItemResolveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcItemResolveReply::kResultFieldNumber;
const int ItemOperationRpcItemResolveReply::kItemIDFieldNumber;
const int ItemOperationRpcItemResolveReply::kItemSimpleDataListFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcItemResolveReply::ItemOperationRpcItemResolveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemResolveReply::InitAsDefaultInstance() {
}

ItemOperationRpcItemResolveReply::ItemOperationRpcItemResolveReply(const ItemOperationRpcItemResolveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  itemid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemResolveReply::~ItemOperationRpcItemResolveReply() {
  SharedDtor();
}

void ItemOperationRpcItemResolveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemResolveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemResolveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemResolveReply_descriptor_;
}

const ItemOperationRpcItemResolveReply& ItemOperationRpcItemResolveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemResolveReply* ItemOperationRpcItemResolveReply::default_instance_ = NULL;

ItemOperationRpcItemResolveReply* ItemOperationRpcItemResolveReply::New() const {
  return new ItemOperationRpcItemResolveReply;
}

void ItemOperationRpcItemResolveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    itemid_ = -1;
  }
  itemsimpledatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemResolveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // optional int32 ItemID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemSimpleDataList;
        break;
      }

      // repeated .ItemSimpleData ItemSimpleDataList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemSimpleDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemsimpledatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemSimpleDataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemResolveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 ItemID = 2 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // repeated .ItemSimpleData ItemSimpleDataList = 3;
  for (int i = 0; i < this->itemsimpledatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemsimpledatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemResolveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 ItemID = 2 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // repeated .ItemSimpleData ItemSimpleDataList = 3;
  for (int i = 0; i < this->itemsimpledatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemsimpledatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemResolveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 ItemID = 2 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  // repeated .ItemSimpleData ItemSimpleDataList = 3;
  total_size += 1 * this->itemsimpledatalist_size();
  for (int i = 0; i < this->itemsimpledatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemsimpledatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemResolveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemResolveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemResolveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemResolveReply::MergeFrom(const ItemOperationRpcItemResolveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemsimpledatalist_.MergeFrom(from.itemsimpledatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemResolveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemResolveReply::CopyFrom(const ItemOperationRpcItemResolveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemResolveReply::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemResolveReply::Swap(ItemOperationRpcItemResolveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    itemsimpledatalist_.Swap(&other->itemsimpledatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemResolveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemResolveReply_descriptor_;
  metadata.reflection = ItemOperationRpcItemResolveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcChangeSettingAsk::kSettingListFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcChangeSettingAsk::ItemOperationRpcChangeSettingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcChangeSettingAsk::InitAsDefaultInstance() {
}

ItemOperationRpcChangeSettingAsk::ItemOperationRpcChangeSettingAsk(const ItemOperationRpcChangeSettingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcChangeSettingAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcChangeSettingAsk::~ItemOperationRpcChangeSettingAsk() {
  SharedDtor();
}

void ItemOperationRpcChangeSettingAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcChangeSettingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcChangeSettingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcChangeSettingAsk_descriptor_;
}

const ItemOperationRpcChangeSettingAsk& ItemOperationRpcChangeSettingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcChangeSettingAsk* ItemOperationRpcChangeSettingAsk::default_instance_ = NULL;

ItemOperationRpcChangeSettingAsk* ItemOperationRpcChangeSettingAsk::New() const {
  return new ItemOperationRpcChangeSettingAsk;
}

void ItemOperationRpcChangeSettingAsk::Clear() {
  settinglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcChangeSettingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemResolveData SettingList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SettingList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settinglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SettingList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcChangeSettingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemResolveData SettingList = 1;
  for (int i = 0; i < this->settinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settinglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcChangeSettingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemResolveData SettingList = 1;
  for (int i = 0; i < this->settinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settinglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcChangeSettingAsk::ByteSize() const {
  int total_size = 0;

  // repeated .ItemResolveData SettingList = 1;
  total_size += 1 * this->settinglist_size();
  for (int i = 0; i < this->settinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settinglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcChangeSettingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcChangeSettingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcChangeSettingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcChangeSettingAsk::MergeFrom(const ItemOperationRpcChangeSettingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  settinglist_.MergeFrom(from.settinglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcChangeSettingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcChangeSettingAsk::CopyFrom(const ItemOperationRpcChangeSettingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcChangeSettingAsk::IsInitialized() const {

  return true;
}

void ItemOperationRpcChangeSettingAsk::Swap(ItemOperationRpcChangeSettingAsk* other) {
  if (other != this) {
    settinglist_.Swap(&other->settinglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcChangeSettingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcChangeSettingAsk_descriptor_;
  metadata.reflection = ItemOperationRpcChangeSettingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcChangeSettingReply::kResultFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcChangeSettingReply::ItemOperationRpcChangeSettingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcChangeSettingReply::InitAsDefaultInstance() {
}

ItemOperationRpcChangeSettingReply::ItemOperationRpcChangeSettingReply(const ItemOperationRpcChangeSettingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcChangeSettingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcChangeSettingReply::~ItemOperationRpcChangeSettingReply() {
  SharedDtor();
}

void ItemOperationRpcChangeSettingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcChangeSettingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcChangeSettingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcChangeSettingReply_descriptor_;
}

const ItemOperationRpcChangeSettingReply& ItemOperationRpcChangeSettingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcChangeSettingReply* ItemOperationRpcChangeSettingReply::default_instance_ = NULL;

ItemOperationRpcChangeSettingReply* ItemOperationRpcChangeSettingReply::New() const {
  return new ItemOperationRpcChangeSettingReply;
}

void ItemOperationRpcChangeSettingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcChangeSettingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcChangeSettingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcChangeSettingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcChangeSettingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcChangeSettingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcChangeSettingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcChangeSettingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcChangeSettingReply::MergeFrom(const ItemOperationRpcChangeSettingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcChangeSettingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcChangeSettingReply::CopyFrom(const ItemOperationRpcChangeSettingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcChangeSettingReply::IsInitialized() const {

  return true;
}

void ItemOperationRpcChangeSettingReply::Swap(ItemOperationRpcChangeSettingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcChangeSettingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcChangeSettingReply_descriptor_;
  metadata.reflection = ItemOperationRpcChangeSettingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcBatchResolveAsk::kQulityFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcBatchResolveAsk::ItemOperationRpcBatchResolveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcBatchResolveAsk::InitAsDefaultInstance() {
}

ItemOperationRpcBatchResolveAsk::ItemOperationRpcBatchResolveAsk(const ItemOperationRpcBatchResolveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcBatchResolveAsk::SharedCtor() {
  _cached_size_ = 0;
  qulity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcBatchResolveAsk::~ItemOperationRpcBatchResolveAsk() {
  SharedDtor();
}

void ItemOperationRpcBatchResolveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcBatchResolveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcBatchResolveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcBatchResolveAsk_descriptor_;
}

const ItemOperationRpcBatchResolveAsk& ItemOperationRpcBatchResolveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcBatchResolveAsk* ItemOperationRpcBatchResolveAsk::default_instance_ = NULL;

ItemOperationRpcBatchResolveAsk* ItemOperationRpcBatchResolveAsk::New() const {
  return new ItemOperationRpcBatchResolveAsk;
}

void ItemOperationRpcBatchResolveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qulity_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcBatchResolveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Qulity = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qulity_)));
          set_has_qulity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcBatchResolveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Qulity = 1 [default = -1];
  if (has_qulity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->qulity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcBatchResolveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Qulity = 1 [default = -1];
  if (has_qulity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->qulity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcBatchResolveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Qulity = 1 [default = -1];
    if (has_qulity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qulity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcBatchResolveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcBatchResolveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcBatchResolveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcBatchResolveAsk::MergeFrom(const ItemOperationRpcBatchResolveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qulity()) {
      set_qulity(from.qulity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcBatchResolveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcBatchResolveAsk::CopyFrom(const ItemOperationRpcBatchResolveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcBatchResolveAsk::IsInitialized() const {

  return true;
}

void ItemOperationRpcBatchResolveAsk::Swap(ItemOperationRpcBatchResolveAsk* other) {
  if (other != this) {
    std::swap(qulity_, other->qulity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcBatchResolveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcBatchResolveAsk_descriptor_;
  metadata.reflection = ItemOperationRpcBatchResolveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcBatchResolveReply::kResultFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcBatchResolveReply::ItemOperationRpcBatchResolveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcBatchResolveReply::InitAsDefaultInstance() {
}

ItemOperationRpcBatchResolveReply::ItemOperationRpcBatchResolveReply(const ItemOperationRpcBatchResolveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcBatchResolveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcBatchResolveReply::~ItemOperationRpcBatchResolveReply() {
  SharedDtor();
}

void ItemOperationRpcBatchResolveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcBatchResolveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcBatchResolveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcBatchResolveReply_descriptor_;
}

const ItemOperationRpcBatchResolveReply& ItemOperationRpcBatchResolveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcBatchResolveReply* ItemOperationRpcBatchResolveReply::default_instance_ = NULL;

ItemOperationRpcBatchResolveReply* ItemOperationRpcBatchResolveReply::New() const {
  return new ItemOperationRpcBatchResolveReply;
}

void ItemOperationRpcBatchResolveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcBatchResolveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcBatchResolveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcBatchResolveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcBatchResolveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcBatchResolveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcBatchResolveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcBatchResolveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcBatchResolveReply::MergeFrom(const ItemOperationRpcBatchResolveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcBatchResolveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcBatchResolveReply::CopyFrom(const ItemOperationRpcBatchResolveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcBatchResolveReply::IsInitialized() const {

  return true;
}

void ItemOperationRpcBatchResolveReply::Swap(ItemOperationRpcBatchResolveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcBatchResolveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcBatchResolveReply_descriptor_;
  metadata.reflection = ItemOperationRpcBatchResolveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcItemCompoundAsk::kItemConfIDFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcItemCompoundAsk::ItemOperationRpcItemCompoundAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemCompoundAsk::InitAsDefaultInstance() {
}

ItemOperationRpcItemCompoundAsk::ItemOperationRpcItemCompoundAsk(const ItemOperationRpcItemCompoundAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemCompoundAsk::SharedCtor() {
  _cached_size_ = 0;
  itemconfid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemCompoundAsk::~ItemOperationRpcItemCompoundAsk() {
  SharedDtor();
}

void ItemOperationRpcItemCompoundAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemCompoundAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemCompoundAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemCompoundAsk_descriptor_;
}

const ItemOperationRpcItemCompoundAsk& ItemOperationRpcItemCompoundAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemCompoundAsk* ItemOperationRpcItemCompoundAsk::default_instance_ = NULL;

ItemOperationRpcItemCompoundAsk* ItemOperationRpcItemCompoundAsk::New() const {
  return new ItemOperationRpcItemCompoundAsk;
}

void ItemOperationRpcItemCompoundAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemconfid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemCompoundAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemConfID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemconfid_)));
          set_has_itemconfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemCompoundAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemConfID = 1 [default = -1];
  if (has_itemconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemconfid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemCompoundAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemConfID = 1 [default = -1];
  if (has_itemconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemconfid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemCompoundAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemConfID = 1 [default = -1];
    if (has_itemconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemconfid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemCompoundAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemCompoundAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemCompoundAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemCompoundAsk::MergeFrom(const ItemOperationRpcItemCompoundAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemconfid()) {
      set_itemconfid(from.itemconfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemCompoundAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemCompoundAsk::CopyFrom(const ItemOperationRpcItemCompoundAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemCompoundAsk::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemCompoundAsk::Swap(ItemOperationRpcItemCompoundAsk* other) {
  if (other != this) {
    std::swap(itemconfid_, other->itemconfid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemCompoundAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemCompoundAsk_descriptor_;
  metadata.reflection = ItemOperationRpcItemCompoundAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemOperationRpcItemCompoundReply::kResultFieldNumber;
const int ItemOperationRpcItemCompoundReply::kItemConfIDFieldNumber;
#endif  // !_MSC_VER

ItemOperationRpcItemCompoundReply::ItemOperationRpcItemCompoundReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemOperationRpcItemCompoundReply::InitAsDefaultInstance() {
}

ItemOperationRpcItemCompoundReply::ItemOperationRpcItemCompoundReply(const ItemOperationRpcItemCompoundReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemOperationRpcItemCompoundReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  itemconfid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemOperationRpcItemCompoundReply::~ItemOperationRpcItemCompoundReply() {
  SharedDtor();
}

void ItemOperationRpcItemCompoundReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemOperationRpcItemCompoundReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemOperationRpcItemCompoundReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemOperationRpcItemCompoundReply_descriptor_;
}

const ItemOperationRpcItemCompoundReply& ItemOperationRpcItemCompoundReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemOperationRpc_2eproto();
  return *default_instance_;
}

ItemOperationRpcItemCompoundReply* ItemOperationRpcItemCompoundReply::default_instance_ = NULL;

ItemOperationRpcItemCompoundReply* ItemOperationRpcItemCompoundReply::New() const {
  return new ItemOperationRpcItemCompoundReply;
}

void ItemOperationRpcItemCompoundReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    itemconfid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemOperationRpcItemCompoundReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemConfID;
        break;
      }

      // optional int32 ItemConfID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemConfID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemconfid_)));
          set_has_itemconfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemOperationRpcItemCompoundReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 ItemConfID = 2 [default = -1];
  if (has_itemconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemconfid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemOperationRpcItemCompoundReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 ItemConfID = 2 [default = -1];
  if (has_itemconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemconfid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemOperationRpcItemCompoundReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 ItemConfID = 2 [default = -1];
    if (has_itemconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemconfid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemOperationRpcItemCompoundReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemOperationRpcItemCompoundReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemOperationRpcItemCompoundReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemOperationRpcItemCompoundReply::MergeFrom(const ItemOperationRpcItemCompoundReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemconfid()) {
      set_itemconfid(from.itemconfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemOperationRpcItemCompoundReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemOperationRpcItemCompoundReply::CopyFrom(const ItemOperationRpcItemCompoundReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOperationRpcItemCompoundReply::IsInitialized() const {

  return true;
}

void ItemOperationRpcItemCompoundReply::Swap(ItemOperationRpcItemCompoundReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemconfid_, other->itemconfid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemOperationRpcItemCompoundReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemOperationRpcItemCompoundReply_descriptor_;
  metadata.reflection = ItemOperationRpcItemCompoundReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
