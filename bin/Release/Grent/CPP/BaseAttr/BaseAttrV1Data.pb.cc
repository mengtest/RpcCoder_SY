// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseAttrV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BaseAttrV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BaseAttrUserDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseAttrUserDataV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseAttrObjDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseAttrObjDataV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BaseAttrV1Data_2eproto() {
  protobuf_AddDesc_BaseAttrV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BaseAttrV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  BaseAttrUserDataV1_descriptor_ = file->message_type(0);
  static const int BaseAttrUserDataV1_offsets_[102] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, intellectual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, endurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, physicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, physicdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, magicdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, miss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, missrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticalrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, tenacityrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, penet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, penetrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, dodg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, dodgrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticaladdition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticaladditionrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticalimmune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticalimmunerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, misslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, criticallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, dodglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, dizzystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, godstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, cantmovestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, physicaddition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, magicaddition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, physicoppose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, magicoppose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, accumulateskienergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, ownerobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, silvermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, goldmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, diamondmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, bindingdiamondmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, honormoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, resourcepoolhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, attackadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, injuryadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, frozenstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, silentstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildcontributehistorymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasurehair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasurehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasurebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasureweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasurewing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, treasureriding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, vechicleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, animationstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixdmgrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixdmgvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixhurtrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixhurtvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixhealrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixhealvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixcuredrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, refixcuredvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, pvpmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, createroletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, updateroletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, fightstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, attackskilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, isallowselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, gohomestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, canfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, doubleexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, friendpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hismaxhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hurtstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hurtflystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hurtdownstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, hurtrepelstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, todayhornor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, curprofession_),
  };
  BaseAttrUserDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseAttrUserDataV1_descriptor_,
      BaseAttrUserDataV1::default_instance_,
      BaseAttrUserDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrUserDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseAttrUserDataV1));
  BaseAttrObjDataV1_descriptor_ = file->message_type(1);
  static const int BaseAttrObjDataV1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, ownerobjid_),
  };
  BaseAttrObjDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseAttrObjDataV1_descriptor_,
      BaseAttrObjDataV1::default_instance_,
      BaseAttrObjDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseAttrObjDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseAttrObjDataV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BaseAttrV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseAttrUserDataV1_descriptor_, &BaseAttrUserDataV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseAttrObjDataV1_descriptor_, &BaseAttrObjDataV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BaseAttrV1Data_2eproto() {
  delete BaseAttrUserDataV1::default_instance_;
  delete BaseAttrUserDataV1_reflection_;
  delete BaseAttrObjDataV1::default_instance_;
  delete BaseAttrObjDataV1_reflection_;
}

void protobuf_AddDesc_BaseAttrV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024BaseAttrV1Data.proto\032\022PublicStruct.pro"
    "to\"\274\023\n\022BaseAttrUserDataV1\022\016\n\003Exp\030\001 \001(\005:\001"
    "0\022\020\n\005Level\030\003 \001(\005:\0010\022\026\n\nServerTime\030\004 \001(\003:"
    "\002-1\022\021\n\006RoleId\030\005 \001(\004:\0010\022\023\n\010Strength\030\007 \001(\005"
    ":\0010\022\022\n\007Agility\030\010 \001(\005:\0010\022\027\n\014Intellectual\030"
    "\t \001(\005:\0010\022\024\n\tEndurance\030\n \001(\005:\0010\022\021\n\006Spirit"
    "\030\013 \001(\005:\0010\022\r\n\002Hp\030\014 \001(\005:\0010\022\020\n\005MaxHp\030\016 \001(\005:"
    "\0010\022\027\n\014PhysicAttack\030\017 \001(\005:\0010\022\030\n\rPhysicDef"
    "ense\030\020 \001(\005:\0010\022\026\n\013MagicAttack\030\023 \001(\005:\0010\022\027\n"
    "\014MagicDefense\030\024 \001(\005:\0010\022\016\n\003Hit\030\025 \001(\005:\0010\022\022"
    "\n\007HitRate\030\026 \001(\002:\0010\022\017\n\004Miss\030\027 \001(\005:\0010\022\023\n\010M"
    "issRate\030\030 \001(\002:\0010\022\023\n\010Critical\030\031 \001(\005:\0010\022\027\n"
    "\014CriticalRate\030\032 \001(\002:\0010\022\023\n\010Tenacity\030\033 \001(\005"
    ":\0010\022\027\n\014TenacityRate\030\034 \001(\002:\0010\022\020\n\005Penet\030\035 "
    "\001(\005:\0010\022\024\n\tPenetRate\030\036 \001(\002:\0010\022\017\n\004Dodg\030\037 \001"
    "(\005:\0010\022\023\n\010DodgRate\030  \001(\002:\0010\022\033\n\020CriticalAd"
    "dition\030! \001(\005:\0010\022\037\n\024CriticalAdditionRate\030"
    "\" \001(\002:\0010\022\031\n\016CriticalImmune\030# \001(\005:\0010\022\035\n\022C"
    "riticalImmuneRate\030$ \001(\002:\0010\022\024\n\tMissLevel\030"
    "% \001(\005:\0010\022\030\n\rCriticalLevel\030& \001(\005:\0010\022\024\n\tDo"
    "dgLevel\030\' \001(\005:\0010\022\024\n\tMoveSpeed\030( \001(\002:\0010\022\025"
    "\n\nDizzyState\030) \001(\005:\0010\022\027\n\010GodState\030* \001(\010:"
    "\005false\022\030\n\rCantMoveState\030+ \001(\005:\0010\022\031\n\016Phys"
    "icAddition\030- \001(\002:\0010\022\030\n\rMagicAddition\030. \001"
    "(\002:\0010\022\027\n\014PhysicOppose\030/ \001(\002:\0010\022\026\n\013MagicO"
    "ppose\0300 \001(\002:\0010\022\036\n\023AccumulateSkiEnergy\0302 "
    "\001(\002:\0010\022\020\n\010NickName\0303 \001(\t\022\024\n\010ConfigId\0304 \001"
    "(\005:\002-1\022\023\n\007ObjType\0305 \001(\005:\002-1\022\021\n\005State\0306 \001"
    "(\005:\002-1\022\026\n\nOwnerObjId\0307 \001(\005:\002-1\022\020\n\004Camp\0308"
    " \001(\005:\002-1\022\026\n\013SilverMoney\0309 \001(\003:\0010\022\024\n\tGold"
    "Money\030: \001(\003:\0010\022\027\n\014DiamondMoney\030; \001(\003:\0010\022"
    "\036\n\023BindingDiamondMoney\030< \001(\003:\0010\022\027\n\013Battl"
    "eScore\030= \001(\005:\002-1\022\022\n\006Energy\030> \001(\003:\002-1\022\026\n\n"
    "GuildMoney\030\? \001(\003:\002-1\022\021\n\tSkillList\030@ \003(\005\022"
    "\026\n\nHonorMoney\030A \001(\003:\002-1\022\032\n\016ResourcePoolH"
    "p\030B \001(\003:\002-1\022\024\n\tAttackAdd\030C \001(\005:\0010\022\024\n\tInj"
    "uryAdd\030D \001(\005:\0010\022\027\n\013FrozenState\030E \001(\005:\002-1"
    "\022\027\n\013SilentState\030F \001(\005:\002-1\022%\n\031GuildContri"
    "buteHistoryMax\030H \001(\003:\002-1\022\021\n\006TeamId\030J \001(\004"
    ":\0010\022\030\n\014TreasureHair\030K \001(\005:\002-1\022\030\n\014Treasur"
    "eHead\030L \001(\005:\002-1\022\030\n\014TreasureBody\030M \001(\005:\002-"
    "1\022\032\n\016TreasureWeapon\030N \001(\005:\002-1\022\030\n\014Treasur"
    "eWing\030O \001(\005:\002-1\022\024\n\tGuildGuid\030P \001(\004:\0010\022\032\n"
    "\016TreasureRiding\030Q \001(\005:\002-1\022\026\n\nVechicleId\030"
    "R \001(\005:\002-1\022\035\n\016AnimationState\030S \001(\010:\005false"
    "\022\027\n\014RefixDmgRate\030T \001(\002:\0010\022\030\n\rRefixDmgVal"
    "ue\030U \001(\005:\0010\022\030\n\rRefixHurtRate\030V \001(\002:\0010\022\031\n"
    "\016RefixHurtValue\030W \001(\005:\0010\022\030\n\rRefixHealRat"
    "e\030X \001(\002:\0010\022\031\n\016RefixHealValue\030Y \001(\005:\0010\022\031\n"
    "\016RefixCuredRate\030Z \001(\002:\0010\022\032\n\017RefixCuredVa"
    "lue\030[ \001(\005:\0010\022\033\n\017GuildContribute\030\\ \001(\003:\002-"
    "1\022\024\n\010PvpMoney\030] \001(\003:\002-1\022\031\n\rGuildResource"
    "\030^ \001(\003:\002-1\022\031\n\016CreateRoleTime\030_ \001(\005:\0010\022\031\n"
    "\016UpdateRoleTime\030` \001(\005:\0010\022\031\n\nFightState\030a"
    " \001(\010:\005false\022\027\n\017AttackSkillList\030b \003(\005\022\021\n\t"
    "GuildName\030c \001(\t\022\033\n\rIsAllowSelect\030d \001(\010:\004"
    "true\022\032\n\013GoHomeState\030e \001(\010:\005false\022\026\n\010CanF"
    "ight\030f \001(\010:\004true\022\025\n\tDoubleExp\030g \001(\003:\002-1\022"
    "\027\n\013FriendPoint\030h \001(\003:\002-1\022\027\n\013HisMaxHonor\030"
    "i \001(\003:\002-1\022\030\n\tHurtState\030j \001(\010:\005false\022\033\n\014H"
    "urtFlyState\030k \001(\010:\005false\022\034\n\rHurtDownStat"
    "e\030l \001(\010:\005false\022\035\n\016HurtRepelState\030m \001(\010:\005"
    "false\022\027\n\013TodayHornor\030o \001(\003:\002-1\022\031\n\rCurPro"
    "fession\030q \001(\005:\002-1\"i\n\021BaseAttrObjDataV1\022\023"
    "\n\007ObjType\030\001 \001(\005:\002-1\022\024\n\010ConfigId\030\002 \001(\005:\002-"
    "1\022\021\n\005State\030\003 \001(\005:\002-1\022\026\n\nOwnerObjId\030\004 \001(\005"
    ":\002-1", 2644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseAttrV1Data.proto", &protobuf_RegisterTypes);
  BaseAttrUserDataV1::default_instance_ = new BaseAttrUserDataV1();
  BaseAttrObjDataV1::default_instance_ = new BaseAttrObjDataV1();
  BaseAttrUserDataV1::default_instance_->InitAsDefaultInstance();
  BaseAttrObjDataV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BaseAttrV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BaseAttrV1Data_2eproto {
  StaticDescriptorInitializer_BaseAttrV1Data_2eproto() {
    protobuf_AddDesc_BaseAttrV1Data_2eproto();
  }
} static_descriptor_initializer_BaseAttrV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BaseAttrUserDataV1::kExpFieldNumber;
const int BaseAttrUserDataV1::kLevelFieldNumber;
const int BaseAttrUserDataV1::kServerTimeFieldNumber;
const int BaseAttrUserDataV1::kRoleIdFieldNumber;
const int BaseAttrUserDataV1::kStrengthFieldNumber;
const int BaseAttrUserDataV1::kAgilityFieldNumber;
const int BaseAttrUserDataV1::kIntellectualFieldNumber;
const int BaseAttrUserDataV1::kEnduranceFieldNumber;
const int BaseAttrUserDataV1::kSpiritFieldNumber;
const int BaseAttrUserDataV1::kHpFieldNumber;
const int BaseAttrUserDataV1::kMaxHpFieldNumber;
const int BaseAttrUserDataV1::kPhysicAttackFieldNumber;
const int BaseAttrUserDataV1::kPhysicDefenseFieldNumber;
const int BaseAttrUserDataV1::kMagicAttackFieldNumber;
const int BaseAttrUserDataV1::kMagicDefenseFieldNumber;
const int BaseAttrUserDataV1::kHitFieldNumber;
const int BaseAttrUserDataV1::kHitRateFieldNumber;
const int BaseAttrUserDataV1::kMissFieldNumber;
const int BaseAttrUserDataV1::kMissRateFieldNumber;
const int BaseAttrUserDataV1::kCriticalFieldNumber;
const int BaseAttrUserDataV1::kCriticalRateFieldNumber;
const int BaseAttrUserDataV1::kTenacityFieldNumber;
const int BaseAttrUserDataV1::kTenacityRateFieldNumber;
const int BaseAttrUserDataV1::kPenetFieldNumber;
const int BaseAttrUserDataV1::kPenetRateFieldNumber;
const int BaseAttrUserDataV1::kDodgFieldNumber;
const int BaseAttrUserDataV1::kDodgRateFieldNumber;
const int BaseAttrUserDataV1::kCriticalAdditionFieldNumber;
const int BaseAttrUserDataV1::kCriticalAdditionRateFieldNumber;
const int BaseAttrUserDataV1::kCriticalImmuneFieldNumber;
const int BaseAttrUserDataV1::kCriticalImmuneRateFieldNumber;
const int BaseAttrUserDataV1::kMissLevelFieldNumber;
const int BaseAttrUserDataV1::kCriticalLevelFieldNumber;
const int BaseAttrUserDataV1::kDodgLevelFieldNumber;
const int BaseAttrUserDataV1::kMoveSpeedFieldNumber;
const int BaseAttrUserDataV1::kDizzyStateFieldNumber;
const int BaseAttrUserDataV1::kGodStateFieldNumber;
const int BaseAttrUserDataV1::kCantMoveStateFieldNumber;
const int BaseAttrUserDataV1::kPhysicAdditionFieldNumber;
const int BaseAttrUserDataV1::kMagicAdditionFieldNumber;
const int BaseAttrUserDataV1::kPhysicOpposeFieldNumber;
const int BaseAttrUserDataV1::kMagicOpposeFieldNumber;
const int BaseAttrUserDataV1::kAccumulateSkiEnergyFieldNumber;
const int BaseAttrUserDataV1::kNickNameFieldNumber;
const int BaseAttrUserDataV1::kConfigIdFieldNumber;
const int BaseAttrUserDataV1::kObjTypeFieldNumber;
const int BaseAttrUserDataV1::kStateFieldNumber;
const int BaseAttrUserDataV1::kOwnerObjIdFieldNumber;
const int BaseAttrUserDataV1::kCampFieldNumber;
const int BaseAttrUserDataV1::kSilverMoneyFieldNumber;
const int BaseAttrUserDataV1::kGoldMoneyFieldNumber;
const int BaseAttrUserDataV1::kDiamondMoneyFieldNumber;
const int BaseAttrUserDataV1::kBindingDiamondMoneyFieldNumber;
const int BaseAttrUserDataV1::kBattleScoreFieldNumber;
const int BaseAttrUserDataV1::kEnergyFieldNumber;
const int BaseAttrUserDataV1::kGuildMoneyFieldNumber;
const int BaseAttrUserDataV1::kSkillListFieldNumber;
const int BaseAttrUserDataV1::kHonorMoneyFieldNumber;
const int BaseAttrUserDataV1::kResourcePoolHpFieldNumber;
const int BaseAttrUserDataV1::kAttackAddFieldNumber;
const int BaseAttrUserDataV1::kInjuryAddFieldNumber;
const int BaseAttrUserDataV1::kFrozenStateFieldNumber;
const int BaseAttrUserDataV1::kSilentStateFieldNumber;
const int BaseAttrUserDataV1::kGuildContributeHistoryMaxFieldNumber;
const int BaseAttrUserDataV1::kTeamIdFieldNumber;
const int BaseAttrUserDataV1::kTreasureHairFieldNumber;
const int BaseAttrUserDataV1::kTreasureHeadFieldNumber;
const int BaseAttrUserDataV1::kTreasureBodyFieldNumber;
const int BaseAttrUserDataV1::kTreasureWeaponFieldNumber;
const int BaseAttrUserDataV1::kTreasureWingFieldNumber;
const int BaseAttrUserDataV1::kGuildGuidFieldNumber;
const int BaseAttrUserDataV1::kTreasureRidingFieldNumber;
const int BaseAttrUserDataV1::kVechicleIdFieldNumber;
const int BaseAttrUserDataV1::kAnimationStateFieldNumber;
const int BaseAttrUserDataV1::kRefixDmgRateFieldNumber;
const int BaseAttrUserDataV1::kRefixDmgValueFieldNumber;
const int BaseAttrUserDataV1::kRefixHurtRateFieldNumber;
const int BaseAttrUserDataV1::kRefixHurtValueFieldNumber;
const int BaseAttrUserDataV1::kRefixHealRateFieldNumber;
const int BaseAttrUserDataV1::kRefixHealValueFieldNumber;
const int BaseAttrUserDataV1::kRefixCuredRateFieldNumber;
const int BaseAttrUserDataV1::kRefixCuredValueFieldNumber;
const int BaseAttrUserDataV1::kGuildContributeFieldNumber;
const int BaseAttrUserDataV1::kPvpMoneyFieldNumber;
const int BaseAttrUserDataV1::kGuildResourceFieldNumber;
const int BaseAttrUserDataV1::kCreateRoleTimeFieldNumber;
const int BaseAttrUserDataV1::kUpdateRoleTimeFieldNumber;
const int BaseAttrUserDataV1::kFightStateFieldNumber;
const int BaseAttrUserDataV1::kAttackSkillListFieldNumber;
const int BaseAttrUserDataV1::kGuildNameFieldNumber;
const int BaseAttrUserDataV1::kIsAllowSelectFieldNumber;
const int BaseAttrUserDataV1::kGoHomeStateFieldNumber;
const int BaseAttrUserDataV1::kCanFightFieldNumber;
const int BaseAttrUserDataV1::kDoubleExpFieldNumber;
const int BaseAttrUserDataV1::kFriendPointFieldNumber;
const int BaseAttrUserDataV1::kHisMaxHonorFieldNumber;
const int BaseAttrUserDataV1::kHurtStateFieldNumber;
const int BaseAttrUserDataV1::kHurtFlyStateFieldNumber;
const int BaseAttrUserDataV1::kHurtDownStateFieldNumber;
const int BaseAttrUserDataV1::kHurtRepelStateFieldNumber;
const int BaseAttrUserDataV1::kTodayHornorFieldNumber;
const int BaseAttrUserDataV1::kCurProfessionFieldNumber;
#endif  // !_MSC_VER

BaseAttrUserDataV1::BaseAttrUserDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseAttrUserDataV1::InitAsDefaultInstance() {
}

BaseAttrUserDataV1::BaseAttrUserDataV1(const BaseAttrUserDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseAttrUserDataV1::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  level_ = 0;
  servertime_ = GOOGLE_LONGLONG(-1);
  roleid_ = GOOGLE_ULONGLONG(0);
  strength_ = 0;
  agility_ = 0;
  intellectual_ = 0;
  endurance_ = 0;
  spirit_ = 0;
  hp_ = 0;
  maxhp_ = 0;
  physicattack_ = 0;
  physicdefense_ = 0;
  magicattack_ = 0;
  magicdefense_ = 0;
  hit_ = 0;
  hitrate_ = 0;
  miss_ = 0;
  missrate_ = 0;
  critical_ = 0;
  criticalrate_ = 0;
  tenacity_ = 0;
  tenacityrate_ = 0;
  penet_ = 0;
  penetrate_ = 0;
  dodg_ = 0;
  dodgrate_ = 0;
  criticaladdition_ = 0;
  criticaladditionrate_ = 0;
  criticalimmune_ = 0;
  criticalimmunerate_ = 0;
  misslevel_ = 0;
  criticallevel_ = 0;
  dodglevel_ = 0;
  movespeed_ = 0;
  dizzystate_ = 0;
  godstate_ = false;
  cantmovestate_ = 0;
  physicaddition_ = 0;
  magicaddition_ = 0;
  physicoppose_ = 0;
  magicoppose_ = 0;
  accumulateskienergy_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  objtype_ = -1;
  state_ = -1;
  ownerobjid_ = -1;
  camp_ = -1;
  silvermoney_ = GOOGLE_LONGLONG(0);
  goldmoney_ = GOOGLE_LONGLONG(0);
  diamondmoney_ = GOOGLE_LONGLONG(0);
  bindingdiamondmoney_ = GOOGLE_LONGLONG(0);
  battlescore_ = -1;
  energy_ = GOOGLE_LONGLONG(-1);
  guildmoney_ = GOOGLE_LONGLONG(-1);
  honormoney_ = GOOGLE_LONGLONG(-1);
  resourcepoolhp_ = GOOGLE_LONGLONG(-1);
  attackadd_ = 0;
  injuryadd_ = 0;
  frozenstate_ = -1;
  silentstate_ = -1;
  guildcontributehistorymax_ = GOOGLE_LONGLONG(-1);
  teamid_ = GOOGLE_ULONGLONG(0);
  treasurehair_ = -1;
  treasurehead_ = -1;
  treasurebody_ = -1;
  treasureweapon_ = -1;
  treasurewing_ = -1;
  guildguid_ = GOOGLE_ULONGLONG(0);
  treasureriding_ = -1;
  vechicleid_ = -1;
  animationstate_ = false;
  refixdmgrate_ = 0;
  refixdmgvalue_ = 0;
  refixhurtrate_ = 0;
  refixhurtvalue_ = 0;
  refixhealrate_ = 0;
  refixhealvalue_ = 0;
  refixcuredrate_ = 0;
  refixcuredvalue_ = 0;
  guildcontribute_ = GOOGLE_LONGLONG(-1);
  pvpmoney_ = GOOGLE_LONGLONG(-1);
  guildresource_ = GOOGLE_LONGLONG(-1);
  createroletime_ = 0;
  updateroletime_ = 0;
  fightstate_ = false;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isallowselect_ = true;
  gohomestate_ = false;
  canfight_ = true;
  doubleexp_ = GOOGLE_LONGLONG(-1);
  friendpoint_ = GOOGLE_LONGLONG(-1);
  hismaxhonor_ = GOOGLE_LONGLONG(-1);
  hurtstate_ = false;
  hurtflystate_ = false;
  hurtdownstate_ = false;
  hurtrepelstate_ = false;
  todayhornor_ = GOOGLE_LONGLONG(-1);
  curprofession_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseAttrUserDataV1::~BaseAttrUserDataV1() {
  SharedDtor();
}

void BaseAttrUserDataV1::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void BaseAttrUserDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseAttrUserDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrUserDataV1_descriptor_;
}

const BaseAttrUserDataV1& BaseAttrUserDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseAttrV1Data_2eproto();
  return *default_instance_;
}

BaseAttrUserDataV1* BaseAttrUserDataV1::default_instance_ = NULL;

BaseAttrUserDataV1* BaseAttrUserDataV1::New() const {
  return new BaseAttrUserDataV1;
}

void BaseAttrUserDataV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    level_ = 0;
    servertime_ = GOOGLE_LONGLONG(-1);
    roleid_ = GOOGLE_ULONGLONG(0);
    strength_ = 0;
    agility_ = 0;
    intellectual_ = 0;
    endurance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    spirit_ = 0;
    hp_ = 0;
    maxhp_ = 0;
    physicattack_ = 0;
    physicdefense_ = 0;
    magicattack_ = 0;
    magicdefense_ = 0;
    hit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hitrate_ = 0;
    miss_ = 0;
    missrate_ = 0;
    critical_ = 0;
    criticalrate_ = 0;
    tenacity_ = 0;
    tenacityrate_ = 0;
    penet_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    penetrate_ = 0;
    dodg_ = 0;
    dodgrate_ = 0;
    criticaladdition_ = 0;
    criticaladditionrate_ = 0;
    criticalimmune_ = 0;
    criticalimmunerate_ = 0;
    misslevel_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    criticallevel_ = 0;
    dodglevel_ = 0;
    movespeed_ = 0;
    dizzystate_ = 0;
    godstate_ = false;
    cantmovestate_ = 0;
    physicaddition_ = 0;
    magicaddition_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    physicoppose_ = 0;
    magicoppose_ = 0;
    accumulateskienergy_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    configid_ = -1;
    objtype_ = -1;
    state_ = -1;
    ownerobjid_ = -1;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    camp_ = -1;
    silvermoney_ = GOOGLE_LONGLONG(0);
    goldmoney_ = GOOGLE_LONGLONG(0);
    diamondmoney_ = GOOGLE_LONGLONG(0);
    bindingdiamondmoney_ = GOOGLE_LONGLONG(0);
    battlescore_ = -1;
    energy_ = GOOGLE_LONGLONG(-1);
    guildmoney_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    honormoney_ = GOOGLE_LONGLONG(-1);
    resourcepoolhp_ = GOOGLE_LONGLONG(-1);
    attackadd_ = 0;
    injuryadd_ = 0;
    frozenstate_ = -1;
    silentstate_ = -1;
    guildcontributehistorymax_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    treasurehair_ = -1;
    treasurehead_ = -1;
    treasurebody_ = -1;
    treasureweapon_ = -1;
    treasurewing_ = -1;
    guildguid_ = GOOGLE_ULONGLONG(0);
    treasureriding_ = -1;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    vechicleid_ = -1;
    animationstate_ = false;
    refixdmgrate_ = 0;
    refixdmgvalue_ = 0;
    refixhurtrate_ = 0;
    refixhurtvalue_ = 0;
    refixhealrate_ = 0;
    refixhealvalue_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    refixcuredrate_ = 0;
    refixcuredvalue_ = 0;
    guildcontribute_ = GOOGLE_LONGLONG(-1);
    pvpmoney_ = GOOGLE_LONGLONG(-1);
    guildresource_ = GOOGLE_LONGLONG(-1);
    createroletime_ = 0;
    updateroletime_ = 0;
    fightstate_ = false;
  }
  if (_has_bits_[89 / 32] & (0xffu << (89 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    isallowselect_ = true;
    gohomestate_ = false;
    canfight_ = true;
    doubleexp_ = GOOGLE_LONGLONG(-1);
    friendpoint_ = GOOGLE_LONGLONG(-1);
    hismaxhonor_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    hurtstate_ = false;
    hurtflystate_ = false;
    hurtdownstate_ = false;
    hurtrepelstate_ = false;
    todayhornor_ = GOOGLE_LONGLONG(-1);
    curprofession_ = -1;
  }
  skilllist_.Clear();
  attackskilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseAttrUserDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Exp = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ServerTime;
        break;
      }

      // optional int64 ServerTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Strength;
        break;
      }

      // optional int32 Strength = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Agility;
        break;
      }

      // optional int32 Agility = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Intellectual;
        break;
      }

      // optional int32 Intellectual = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Intellectual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intellectual_)));
          set_has_intellectual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Endurance;
        break;
      }

      // optional int32 Endurance = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Spirit;
        break;
      }

      // optional int32 Spirit = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Hp;
        break;
      }

      // optional int32 Hp = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_MaxHp;
        break;
      }

      // optional int32 MaxHp = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_PhysicAttack;
        break;
      }

      // optional int32 PhysicAttack = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhysicAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicattack_)));
          set_has_physicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PhysicDefense;
        break;
      }

      // optional int32 PhysicDefense = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhysicDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicdefense_)));
          set_has_physicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_MagicAttack;
        break;
      }

      // optional int32 MagicAttack = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MagicAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_MagicDefense;
        break;
      }

      // optional int32 MagicDefense = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MagicDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefense_)));
          set_has_magicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Hit;
        break;
      }

      // optional int32 Hit = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_HitRate;
        break;
      }

      // optional float HitRate = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_Miss;
        break;
      }

      // optional int32 Miss = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Miss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miss_)));
          set_has_miss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_MissRate;
        break;
      }

      // optional float MissRate = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MissRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &missrate_)));
          set_has_missrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_Critical;
        break;
      }

      // optional int32 Critical = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_CriticalRate;
        break;
      }

      // optional float CriticalRate = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CriticalRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &criticalrate_)));
          set_has_criticalrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_Tenacity;
        break;
      }

      // optional int32 Tenacity = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_TenacityRate;
        break;
      }

      // optional float TenacityRate = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TenacityRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tenacityrate_)));
          set_has_tenacityrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_Penet;
        break;
      }

      // optional int32 Penet = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Penet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penet_)));
          set_has_penet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_PenetRate;
        break;
      }

      // optional float PenetRate = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PenetRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penetrate_)));
          set_has_penetrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_Dodg;
        break;
      }

      // optional int32 Dodg = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dodg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodg_)));
          set_has_dodg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_DodgRate;
        break;
      }

      // optional float DodgRate = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DodgRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dodgrate_)));
          set_has_dodgrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CriticalAddition;
        break;
      }

      // optional int32 CriticalAddition = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CriticalAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &criticaladdition_)));
          set_has_criticaladdition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_CriticalAdditionRate;
        break;
      }

      // optional float CriticalAdditionRate = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CriticalAdditionRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &criticaladditionrate_)));
          set_has_criticaladditionrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CriticalImmune;
        break;
      }

      // optional int32 CriticalImmune = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CriticalImmune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &criticalimmune_)));
          set_has_criticalimmune();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_CriticalImmuneRate;
        break;
      }

      // optional float CriticalImmuneRate = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CriticalImmuneRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &criticalimmunerate_)));
          set_has_criticalimmunerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_MissLevel;
        break;
      }

      // optional int32 MissLevel = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MissLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &misslevel_)));
          set_has_misslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_CriticalLevel;
        break;
      }

      // optional int32 CriticalLevel = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CriticalLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &criticallevel_)));
          set_has_criticallevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_DodgLevel;
        break;
      }

      // optional int32 DodgLevel = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DodgLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodglevel_)));
          set_has_dodglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_MoveSpeed;
        break;
      }

      // optional float MoveSpeed = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_DizzyState;
        break;
      }

      // optional int32 DizzyState = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DizzyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dizzystate_)));
          set_has_dizzystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_GodState;
        break;
      }

      // optional bool GodState = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GodState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &godstate_)));
          set_has_godstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_CantMoveState;
        break;
      }

      // optional int32 CantMoveState = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CantMoveState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cantmovestate_)));
          set_has_cantmovestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_PhysicAddition;
        break;
      }

      // optional float PhysicAddition = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PhysicAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physicaddition_)));
          set_has_physicaddition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_MagicAddition;
        break;
      }

      // optional float MagicAddition = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MagicAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magicaddition_)));
          set_has_magicaddition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_PhysicOppose;
        break;
      }

      // optional float PhysicOppose = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_PhysicOppose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physicoppose_)));
          set_has_physicoppose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_MagicOppose;
        break;
      }

      // optional float MagicOppose = 48 [default = 0];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MagicOppose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magicoppose_)));
          set_has_magicoppose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_AccumulateSkiEnergy;
        break;
      }

      // optional float AccumulateSkiEnergy = 50 [default = 0];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AccumulateSkiEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accumulateskienergy_)));
          set_has_accumulateskienergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_NickName;
        break;
      }

      // optional string NickName = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 52 [default = -1];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_ObjType;
        break;
      }

      // optional int32 ObjType = 53 [default = -1];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_State;
        break;
      }

      // optional int32 State = 54 [default = -1];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_OwnerObjId;
        break;
      }

      // optional int32 OwnerObjId = 55 [default = -1];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerobjid_)));
          set_has_ownerobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_Camp;
        break;
      }

      // optional int32 Camp = 56 [default = -1];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_SilverMoney;
        break;
      }

      // optional int64 SilverMoney = 57 [default = 0];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SilverMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &silvermoney_)));
          set_has_silvermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_GoldMoney;
        break;
      }

      // optional int64 GoldMoney = 58 [default = 0];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldmoney_)));
          set_has_goldmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_DiamondMoney;
        break;
      }

      // optional int64 DiamondMoney = 59 [default = 0];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DiamondMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamondmoney_)));
          set_has_diamondmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_BindingDiamondMoney;
        break;
      }

      // optional int64 BindingDiamondMoney = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindingDiamondMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bindingdiamondmoney_)));
          set_has_bindingdiamondmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 61 [default = -1];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_Energy;
        break;
      }

      // optional int64 Energy = 62 [default = -1];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_GuildMoney;
        break;
      }

      // optional int64 GuildMoney = 63 [default = -1];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_SkillList;
        break;
      }

      // repeated int32 SkillList = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 512, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_SkillList;
        if (input->ExpectTag(520)) goto parse_HonorMoney;
        break;
      }

      // optional int64 HonorMoney = 65 [default = -1];
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HonorMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &honormoney_)));
          set_has_honormoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_ResourcePoolHp;
        break;
      }

      // optional int64 ResourcePoolHp = 66 [default = -1];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResourcePoolHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resourcepoolhp_)));
          set_has_resourcepoolhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_AttackAdd;
        break;
      }

      // optional int32 AttackAdd = 67 [default = 0];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackadd_)));
          set_has_attackadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_InjuryAdd;
        break;
      }

      // optional int32 InjuryAdd = 68 [default = 0];
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InjuryAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &injuryadd_)));
          set_has_injuryadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_FrozenState;
        break;
      }

      // optional int32 FrozenState = 69 [default = -1];
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrozenState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozenstate_)));
          set_has_frozenstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_SilentState;
        break;
      }

      // optional int32 SilentState = 70 [default = -1];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SilentState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silentstate_)));
          set_has_silentstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_GuildContributeHistoryMax;
        break;
      }

      // optional int64 GuildContributeHistoryMax = 72 [default = -1];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildContributeHistoryMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildcontributehistorymax_)));
          set_has_guildcontributehistorymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 74 [default = 0];
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_TreasureHair;
        break;
      }

      // optional int32 TreasureHair = 75 [default = -1];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehair_)));
          set_has_treasurehair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_TreasureHead;
        break;
      }

      // optional int32 TreasureHead = 76 [default = -1];
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehead_)));
          set_has_treasurehead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_TreasureBody;
        break;
      }

      // optional int32 TreasureBody = 77 [default = -1];
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurebody_)));
          set_has_treasurebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_TreasureWeapon;
        break;
      }

      // optional int32 TreasureWeapon = 78 [default = -1];
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureweapon_)));
          set_has_treasureweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_TreasureWing;
        break;
      }

      // optional int32 TreasureWing = 79 [default = -1];
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurewing_)));
          set_has_treasurewing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_GuildGuid;
        break;
      }

      // optional uint64 GuildGuid = 80 [default = 0];
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildguid_)));
          set_has_guildguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_TreasureRiding;
        break;
      }

      // optional int32 TreasureRiding = 81 [default = -1];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureRiding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureriding_)));
          set_has_treasureriding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_VechicleId;
        break;
      }

      // optional int32 VechicleId = 82 [default = -1];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VechicleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vechicleid_)));
          set_has_vechicleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_AnimationState;
        break;
      }

      // optional bool AnimationState = 83 [default = false];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimationState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animationstate_)));
          set_has_animationstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(677)) goto parse_RefixDmgRate;
        break;
      }

      // optional float RefixDmgRate = 84 [default = 0];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RefixDmgRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refixdmgrate_)));
          set_has_refixdmgrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_RefixDmgValue;
        break;
      }

      // optional int32 RefixDmgValue = 85 [default = 0];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefixDmgValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refixdmgvalue_)));
          set_has_refixdmgvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(693)) goto parse_RefixHurtRate;
        break;
      }

      // optional float RefixHurtRate = 86 [default = 0];
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RefixHurtRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refixhurtrate_)));
          set_has_refixhurtrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_RefixHurtValue;
        break;
      }

      // optional int32 RefixHurtValue = 87 [default = 0];
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefixHurtValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refixhurtvalue_)));
          set_has_refixhurtvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(709)) goto parse_RefixHealRate;
        break;
      }

      // optional float RefixHealRate = 88 [default = 0];
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RefixHealRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refixhealrate_)));
          set_has_refixhealrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_RefixHealValue;
        break;
      }

      // optional int32 RefixHealValue = 89 [default = 0];
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefixHealValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refixhealvalue_)));
          set_has_refixhealvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(725)) goto parse_RefixCuredRate;
        break;
      }

      // optional float RefixCuredRate = 90 [default = 0];
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RefixCuredRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refixcuredrate_)));
          set_has_refixcuredrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_RefixCuredValue;
        break;
      }

      // optional int32 RefixCuredValue = 91 [default = 0];
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefixCuredValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refixcuredvalue_)));
          set_has_refixcuredvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_GuildContribute;
        break;
      }

      // optional int64 GuildContribute = 92 [default = -1];
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildcontribute_)));
          set_has_guildcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_PvpMoney;
        break;
      }

      // optional int64 PvpMoney = 93 [default = -1];
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PvpMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pvpmoney_)));
          set_has_pvpmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_GuildResource;
        break;
      }

      // optional int64 GuildResource = 94 [default = -1];
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildResource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildresource_)));
          set_has_guildresource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_CreateRoleTime;
        break;
      }

      // optional int32 CreateRoleTime = 95 [default = 0];
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateRoleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createroletime_)));
          set_has_createroletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(768)) goto parse_UpdateRoleTime;
        break;
      }

      // optional int32 UpdateRoleTime = 96 [default = 0];
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateRoleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateroletime_)));
          set_has_updateroletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_FightState;
        break;
      }

      // optional bool FightState = 97 [default = false];
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fightstate_)));
          set_has_fightstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(784)) goto parse_AttackSkillList;
        break;
      }

      // repeated int32 AttackSkillList = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackSkillList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 784, input, this->mutable_attackskilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attackskilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(784)) goto parse_AttackSkillList;
        if (input->ExpectTag(794)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_IsAllowSelect;
        break;
      }

      // optional bool IsAllowSelect = 100 [default = true];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAllowSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallowselect_)));
          set_has_isallowselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_GoHomeState;
        break;
      }

      // optional bool GoHomeState = 101 [default = false];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoHomeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gohomestate_)));
          set_has_gohomestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_CanFight;
        break;
      }

      // optional bool CanFight = 102 [default = true];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canfight_)));
          set_has_canfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_DoubleExp;
        break;
      }

      // optional int64 DoubleExp = 103 [default = -1];
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoubleExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doubleexp_)));
          set_has_doubleexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_FriendPoint;
        break;
      }

      // optional int64 FriendPoint = 104 [default = -1];
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &friendpoint_)));
          set_has_friendpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_HisMaxHonor;
        break;
      }

      // optional int64 HisMaxHonor = 105 [default = -1];
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HisMaxHonor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hismaxhonor_)));
          set_has_hismaxhonor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_HurtState;
        break;
      }

      // optional bool HurtState = 106 [default = false];
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurtstate_)));
          set_has_hurtstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_HurtFlyState;
        break;
      }

      // optional bool HurtFlyState = 107 [default = false];
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtFlyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurtflystate_)));
          set_has_hurtflystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_HurtDownState;
        break;
      }

      // optional bool HurtDownState = 108 [default = false];
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtDownState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurtdownstate_)));
          set_has_hurtdownstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(872)) goto parse_HurtRepelState;
        break;
      }

      // optional bool HurtRepelState = 109 [default = false];
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtRepelState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurtrepelstate_)));
          set_has_hurtrepelstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(888)) goto parse_TodayHornor;
        break;
      }

      // optional int64 TodayHornor = 111 [default = -1];
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayHornor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &todayhornor_)));
          set_has_todayhornor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_CurProfession;
        break;
      }

      // optional int32 CurProfession = 113 [default = -1];
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curprofession_)));
          set_has_curprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseAttrUserDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Exp = 1 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 Level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int64 ServerTime = 4 [default = -1];
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->servertime(), output);
  }

  // optional uint64 RoleId = 5 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roleid(), output);
  }

  // optional int32 Strength = 7 [default = 0];
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength(), output);
  }

  // optional int32 Agility = 8 [default = 0];
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agility(), output);
  }

  // optional int32 Intellectual = 9 [default = 0];
  if (has_intellectual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->intellectual(), output);
  }

  // optional int32 Endurance = 10 [default = 0];
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->endurance(), output);
  }

  // optional int32 Spirit = 11 [default = 0];
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->spirit(), output);
  }

  // optional int32 Hp = 12 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hp(), output);
  }

  // optional int32 MaxHp = 14 [default = 0];
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxhp(), output);
  }

  // optional int32 PhysicAttack = 15 [default = 0];
  if (has_physicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->physicattack(), output);
  }

  // optional int32 PhysicDefense = 16 [default = 0];
  if (has_physicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->physicdefense(), output);
  }

  // optional int32 MagicAttack = 19 [default = 0];
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicattack(), output);
  }

  // optional int32 MagicDefense = 20 [default = 0];
  if (has_magicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicdefense(), output);
  }

  // optional int32 Hit = 21 [default = 0];
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->hit(), output);
  }

  // optional float HitRate = 22 [default = 0];
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->hitrate(), output);
  }

  // optional int32 Miss = 23 [default = 0];
  if (has_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->miss(), output);
  }

  // optional float MissRate = 24 [default = 0];
  if (has_missrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->missrate(), output);
  }

  // optional int32 Critical = 25 [default = 0];
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->critical(), output);
  }

  // optional float CriticalRate = 26 [default = 0];
  if (has_criticalrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->criticalrate(), output);
  }

  // optional int32 Tenacity = 27 [default = 0];
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tenacity(), output);
  }

  // optional float TenacityRate = 28 [default = 0];
  if (has_tenacityrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->tenacityrate(), output);
  }

  // optional int32 Penet = 29 [default = 0];
  if (has_penet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->penet(), output);
  }

  // optional float PenetRate = 30 [default = 0];
  if (has_penetrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->penetrate(), output);
  }

  // optional int32 Dodg = 31 [default = 0];
  if (has_dodg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->dodg(), output);
  }

  // optional float DodgRate = 32 [default = 0];
  if (has_dodgrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->dodgrate(), output);
  }

  // optional int32 CriticalAddition = 33 [default = 0];
  if (has_criticaladdition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->criticaladdition(), output);
  }

  // optional float CriticalAdditionRate = 34 [default = 0];
  if (has_criticaladditionrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->criticaladditionrate(), output);
  }

  // optional int32 CriticalImmune = 35 [default = 0];
  if (has_criticalimmune()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->criticalimmune(), output);
  }

  // optional float CriticalImmuneRate = 36 [default = 0];
  if (has_criticalimmunerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->criticalimmunerate(), output);
  }

  // optional int32 MissLevel = 37 [default = 0];
  if (has_misslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->misslevel(), output);
  }

  // optional int32 CriticalLevel = 38 [default = 0];
  if (has_criticallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->criticallevel(), output);
  }

  // optional int32 DodgLevel = 39 [default = 0];
  if (has_dodglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->dodglevel(), output);
  }

  // optional float MoveSpeed = 40 [default = 0];
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->movespeed(), output);
  }

  // optional int32 DizzyState = 41 [default = 0];
  if (has_dizzystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->dizzystate(), output);
  }

  // optional bool GodState = 42 [default = false];
  if (has_godstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->godstate(), output);
  }

  // optional int32 CantMoveState = 43 [default = 0];
  if (has_cantmovestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->cantmovestate(), output);
  }

  // optional float PhysicAddition = 45 [default = 0];
  if (has_physicaddition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->physicaddition(), output);
  }

  // optional float MagicAddition = 46 [default = 0];
  if (has_magicaddition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->magicaddition(), output);
  }

  // optional float PhysicOppose = 47 [default = 0];
  if (has_physicoppose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->physicoppose(), output);
  }

  // optional float MagicOppose = 48 [default = 0];
  if (has_magicoppose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->magicoppose(), output);
  }

  // optional float AccumulateSkiEnergy = 50 [default = 0];
  if (has_accumulateskienergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->accumulateskienergy(), output);
  }

  // optional string NickName = 51;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->nickname(), output);
  }

  // optional int32 ConfigId = 52 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->configid(), output);
  }

  // optional int32 ObjType = 53 [default = -1];
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->objtype(), output);
  }

  // optional int32 State = 54 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->state(), output);
  }

  // optional int32 OwnerObjId = 55 [default = -1];
  if (has_ownerobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->ownerobjid(), output);
  }

  // optional int32 Camp = 56 [default = -1];
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->camp(), output);
  }

  // optional int64 SilverMoney = 57 [default = 0];
  if (has_silvermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->silvermoney(), output);
  }

  // optional int64 GoldMoney = 58 [default = 0];
  if (has_goldmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(58, this->goldmoney(), output);
  }

  // optional int64 DiamondMoney = 59 [default = 0];
  if (has_diamondmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->diamondmoney(), output);
  }

  // optional int64 BindingDiamondMoney = 60 [default = 0];
  if (has_bindingdiamondmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->bindingdiamondmoney(), output);
  }

  // optional int32 BattleScore = 61 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->battlescore(), output);
  }

  // optional int64 Energy = 62 [default = -1];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->energy(), output);
  }

  // optional int64 GuildMoney = 63 [default = -1];
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->guildmoney(), output);
  }

  // repeated int32 SkillList = 64;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      64, this->skilllist(i), output);
  }

  // optional int64 HonorMoney = 65 [default = -1];
  if (has_honormoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(65, this->honormoney(), output);
  }

  // optional int64 ResourcePoolHp = 66 [default = -1];
  if (has_resourcepoolhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(66, this->resourcepoolhp(), output);
  }

  // optional int32 AttackAdd = 67 [default = 0];
  if (has_attackadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->attackadd(), output);
  }

  // optional int32 InjuryAdd = 68 [default = 0];
  if (has_injuryadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->injuryadd(), output);
  }

  // optional int32 FrozenState = 69 [default = -1];
  if (has_frozenstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->frozenstate(), output);
  }

  // optional int32 SilentState = 70 [default = -1];
  if (has_silentstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->silentstate(), output);
  }

  // optional int64 GuildContributeHistoryMax = 72 [default = -1];
  if (has_guildcontributehistorymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->guildcontributehistorymax(), output);
  }

  // optional uint64 TeamId = 74 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(74, this->teamid(), output);
  }

  // optional int32 TreasureHair = 75 [default = -1];
  if (has_treasurehair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->treasurehair(), output);
  }

  // optional int32 TreasureHead = 76 [default = -1];
  if (has_treasurehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->treasurehead(), output);
  }

  // optional int32 TreasureBody = 77 [default = -1];
  if (has_treasurebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->treasurebody(), output);
  }

  // optional int32 TreasureWeapon = 78 [default = -1];
  if (has_treasureweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->treasureweapon(), output);
  }

  // optional int32 TreasureWing = 79 [default = -1];
  if (has_treasurewing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->treasurewing(), output);
  }

  // optional uint64 GuildGuid = 80 [default = 0];
  if (has_guildguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(80, this->guildguid(), output);
  }

  // optional int32 TreasureRiding = 81 [default = -1];
  if (has_treasureriding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->treasureriding(), output);
  }

  // optional int32 VechicleId = 82 [default = -1];
  if (has_vechicleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->vechicleid(), output);
  }

  // optional bool AnimationState = 83 [default = false];
  if (has_animationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->animationstate(), output);
  }

  // optional float RefixDmgRate = 84 [default = 0];
  if (has_refixdmgrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(84, this->refixdmgrate(), output);
  }

  // optional int32 RefixDmgValue = 85 [default = 0];
  if (has_refixdmgvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->refixdmgvalue(), output);
  }

  // optional float RefixHurtRate = 86 [default = 0];
  if (has_refixhurtrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(86, this->refixhurtrate(), output);
  }

  // optional int32 RefixHurtValue = 87 [default = 0];
  if (has_refixhurtvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->refixhurtvalue(), output);
  }

  // optional float RefixHealRate = 88 [default = 0];
  if (has_refixhealrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(88, this->refixhealrate(), output);
  }

  // optional int32 RefixHealValue = 89 [default = 0];
  if (has_refixhealvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(89, this->refixhealvalue(), output);
  }

  // optional float RefixCuredRate = 90 [default = 0];
  if (has_refixcuredrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->refixcuredrate(), output);
  }

  // optional int32 RefixCuredValue = 91 [default = 0];
  if (has_refixcuredvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->refixcuredvalue(), output);
  }

  // optional int64 GuildContribute = 92 [default = -1];
  if (has_guildcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(92, this->guildcontribute(), output);
  }

  // optional int64 PvpMoney = 93 [default = -1];
  if (has_pvpmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(93, this->pvpmoney(), output);
  }

  // optional int64 GuildResource = 94 [default = -1];
  if (has_guildresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(94, this->guildresource(), output);
  }

  // optional int32 CreateRoleTime = 95 [default = 0];
  if (has_createroletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(95, this->createroletime(), output);
  }

  // optional int32 UpdateRoleTime = 96 [default = 0];
  if (has_updateroletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(96, this->updateroletime(), output);
  }

  // optional bool FightState = 97 [default = false];
  if (has_fightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->fightstate(), output);
  }

  // repeated int32 AttackSkillList = 98;
  for (int i = 0; i < this->attackskilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      98, this->attackskilllist(i), output);
  }

  // optional string GuildName = 99;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      99, this->guildname(), output);
  }

  // optional bool IsAllowSelect = 100 [default = true];
  if (has_isallowselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->isallowselect(), output);
  }

  // optional bool GoHomeState = 101 [default = false];
  if (has_gohomestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->gohomestate(), output);
  }

  // optional bool CanFight = 102 [default = true];
  if (has_canfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->canfight(), output);
  }

  // optional int64 DoubleExp = 103 [default = -1];
  if (has_doubleexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(103, this->doubleexp(), output);
  }

  // optional int64 FriendPoint = 104 [default = -1];
  if (has_friendpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(104, this->friendpoint(), output);
  }

  // optional int64 HisMaxHonor = 105 [default = -1];
  if (has_hismaxhonor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(105, this->hismaxhonor(), output);
  }

  // optional bool HurtState = 106 [default = false];
  if (has_hurtstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->hurtstate(), output);
  }

  // optional bool HurtFlyState = 107 [default = false];
  if (has_hurtflystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->hurtflystate(), output);
  }

  // optional bool HurtDownState = 108 [default = false];
  if (has_hurtdownstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->hurtdownstate(), output);
  }

  // optional bool HurtRepelState = 109 [default = false];
  if (has_hurtrepelstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(109, this->hurtrepelstate(), output);
  }

  // optional int64 TodayHornor = 111 [default = -1];
  if (has_todayhornor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(111, this->todayhornor(), output);
  }

  // optional int32 CurProfession = 113 [default = -1];
  if (has_curprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->curprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseAttrUserDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Exp = 1 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 Level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int64 ServerTime = 4 [default = -1];
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->servertime(), target);
  }

  // optional uint64 RoleId = 5 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->roleid(), target);
  }

  // optional int32 Strength = 7 [default = 0];
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength(), target);
  }

  // optional int32 Agility = 8 [default = 0];
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agility(), target);
  }

  // optional int32 Intellectual = 9 [default = 0];
  if (has_intellectual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->intellectual(), target);
  }

  // optional int32 Endurance = 10 [default = 0];
  if (has_endurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->endurance(), target);
  }

  // optional int32 Spirit = 11 [default = 0];
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->spirit(), target);
  }

  // optional int32 Hp = 12 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hp(), target);
  }

  // optional int32 MaxHp = 14 [default = 0];
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxhp(), target);
  }

  // optional int32 PhysicAttack = 15 [default = 0];
  if (has_physicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->physicattack(), target);
  }

  // optional int32 PhysicDefense = 16 [default = 0];
  if (has_physicdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->physicdefense(), target);
  }

  // optional int32 MagicAttack = 19 [default = 0];
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicattack(), target);
  }

  // optional int32 MagicDefense = 20 [default = 0];
  if (has_magicdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicdefense(), target);
  }

  // optional int32 Hit = 21 [default = 0];
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->hit(), target);
  }

  // optional float HitRate = 22 [default = 0];
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->hitrate(), target);
  }

  // optional int32 Miss = 23 [default = 0];
  if (has_miss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->miss(), target);
  }

  // optional float MissRate = 24 [default = 0];
  if (has_missrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->missrate(), target);
  }

  // optional int32 Critical = 25 [default = 0];
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->critical(), target);
  }

  // optional float CriticalRate = 26 [default = 0];
  if (has_criticalrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->criticalrate(), target);
  }

  // optional int32 Tenacity = 27 [default = 0];
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->tenacity(), target);
  }

  // optional float TenacityRate = 28 [default = 0];
  if (has_tenacityrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->tenacityrate(), target);
  }

  // optional int32 Penet = 29 [default = 0];
  if (has_penet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->penet(), target);
  }

  // optional float PenetRate = 30 [default = 0];
  if (has_penetrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->penetrate(), target);
  }

  // optional int32 Dodg = 31 [default = 0];
  if (has_dodg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->dodg(), target);
  }

  // optional float DodgRate = 32 [default = 0];
  if (has_dodgrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->dodgrate(), target);
  }

  // optional int32 CriticalAddition = 33 [default = 0];
  if (has_criticaladdition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->criticaladdition(), target);
  }

  // optional float CriticalAdditionRate = 34 [default = 0];
  if (has_criticaladditionrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->criticaladditionrate(), target);
  }

  // optional int32 CriticalImmune = 35 [default = 0];
  if (has_criticalimmune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->criticalimmune(), target);
  }

  // optional float CriticalImmuneRate = 36 [default = 0];
  if (has_criticalimmunerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->criticalimmunerate(), target);
  }

  // optional int32 MissLevel = 37 [default = 0];
  if (has_misslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->misslevel(), target);
  }

  // optional int32 CriticalLevel = 38 [default = 0];
  if (has_criticallevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->criticallevel(), target);
  }

  // optional int32 DodgLevel = 39 [default = 0];
  if (has_dodglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->dodglevel(), target);
  }

  // optional float MoveSpeed = 40 [default = 0];
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->movespeed(), target);
  }

  // optional int32 DizzyState = 41 [default = 0];
  if (has_dizzystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->dizzystate(), target);
  }

  // optional bool GodState = 42 [default = false];
  if (has_godstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->godstate(), target);
  }

  // optional int32 CantMoveState = 43 [default = 0];
  if (has_cantmovestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->cantmovestate(), target);
  }

  // optional float PhysicAddition = 45 [default = 0];
  if (has_physicaddition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->physicaddition(), target);
  }

  // optional float MagicAddition = 46 [default = 0];
  if (has_magicaddition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->magicaddition(), target);
  }

  // optional float PhysicOppose = 47 [default = 0];
  if (has_physicoppose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->physicoppose(), target);
  }

  // optional float MagicOppose = 48 [default = 0];
  if (has_magicoppose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->magicoppose(), target);
  }

  // optional float AccumulateSkiEnergy = 50 [default = 0];
  if (has_accumulateskienergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->accumulateskienergy(), target);
  }

  // optional string NickName = 51;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->nickname(), target);
  }

  // optional int32 ConfigId = 52 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->configid(), target);
  }

  // optional int32 ObjType = 53 [default = -1];
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->objtype(), target);
  }

  // optional int32 State = 54 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->state(), target);
  }

  // optional int32 OwnerObjId = 55 [default = -1];
  if (has_ownerobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->ownerobjid(), target);
  }

  // optional int32 Camp = 56 [default = -1];
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->camp(), target);
  }

  // optional int64 SilverMoney = 57 [default = 0];
  if (has_silvermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(57, this->silvermoney(), target);
  }

  // optional int64 GoldMoney = 58 [default = 0];
  if (has_goldmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(58, this->goldmoney(), target);
  }

  // optional int64 DiamondMoney = 59 [default = 0];
  if (has_diamondmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->diamondmoney(), target);
  }

  // optional int64 BindingDiamondMoney = 60 [default = 0];
  if (has_bindingdiamondmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->bindingdiamondmoney(), target);
  }

  // optional int32 BattleScore = 61 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->battlescore(), target);
  }

  // optional int64 Energy = 62 [default = -1];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->energy(), target);
  }

  // optional int64 GuildMoney = 63 [default = -1];
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->guildmoney(), target);
  }

  // repeated int32 SkillList = 64;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(64, this->skilllist(i), target);
  }

  // optional int64 HonorMoney = 65 [default = -1];
  if (has_honormoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(65, this->honormoney(), target);
  }

  // optional int64 ResourcePoolHp = 66 [default = -1];
  if (has_resourcepoolhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(66, this->resourcepoolhp(), target);
  }

  // optional int32 AttackAdd = 67 [default = 0];
  if (has_attackadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->attackadd(), target);
  }

  // optional int32 InjuryAdd = 68 [default = 0];
  if (has_injuryadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->injuryadd(), target);
  }

  // optional int32 FrozenState = 69 [default = -1];
  if (has_frozenstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->frozenstate(), target);
  }

  // optional int32 SilentState = 70 [default = -1];
  if (has_silentstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->silentstate(), target);
  }

  // optional int64 GuildContributeHistoryMax = 72 [default = -1];
  if (has_guildcontributehistorymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->guildcontributehistorymax(), target);
  }

  // optional uint64 TeamId = 74 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(74, this->teamid(), target);
  }

  // optional int32 TreasureHair = 75 [default = -1];
  if (has_treasurehair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->treasurehair(), target);
  }

  // optional int32 TreasureHead = 76 [default = -1];
  if (has_treasurehead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->treasurehead(), target);
  }

  // optional int32 TreasureBody = 77 [default = -1];
  if (has_treasurebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->treasurebody(), target);
  }

  // optional int32 TreasureWeapon = 78 [default = -1];
  if (has_treasureweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->treasureweapon(), target);
  }

  // optional int32 TreasureWing = 79 [default = -1];
  if (has_treasurewing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->treasurewing(), target);
  }

  // optional uint64 GuildGuid = 80 [default = 0];
  if (has_guildguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(80, this->guildguid(), target);
  }

  // optional int32 TreasureRiding = 81 [default = -1];
  if (has_treasureriding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(81, this->treasureriding(), target);
  }

  // optional int32 VechicleId = 82 [default = -1];
  if (has_vechicleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->vechicleid(), target);
  }

  // optional bool AnimationState = 83 [default = false];
  if (has_animationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->animationstate(), target);
  }

  // optional float RefixDmgRate = 84 [default = 0];
  if (has_refixdmgrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(84, this->refixdmgrate(), target);
  }

  // optional int32 RefixDmgValue = 85 [default = 0];
  if (has_refixdmgvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->refixdmgvalue(), target);
  }

  // optional float RefixHurtRate = 86 [default = 0];
  if (has_refixhurtrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(86, this->refixhurtrate(), target);
  }

  // optional int32 RefixHurtValue = 87 [default = 0];
  if (has_refixhurtvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->refixhurtvalue(), target);
  }

  // optional float RefixHealRate = 88 [default = 0];
  if (has_refixhealrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(88, this->refixhealrate(), target);
  }

  // optional int32 RefixHealValue = 89 [default = 0];
  if (has_refixhealvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(89, this->refixhealvalue(), target);
  }

  // optional float RefixCuredRate = 90 [default = 0];
  if (has_refixcuredrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->refixcuredrate(), target);
  }

  // optional int32 RefixCuredValue = 91 [default = 0];
  if (has_refixcuredvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->refixcuredvalue(), target);
  }

  // optional int64 GuildContribute = 92 [default = -1];
  if (has_guildcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(92, this->guildcontribute(), target);
  }

  // optional int64 PvpMoney = 93 [default = -1];
  if (has_pvpmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(93, this->pvpmoney(), target);
  }

  // optional int64 GuildResource = 94 [default = -1];
  if (has_guildresource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(94, this->guildresource(), target);
  }

  // optional int32 CreateRoleTime = 95 [default = 0];
  if (has_createroletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(95, this->createroletime(), target);
  }

  // optional int32 UpdateRoleTime = 96 [default = 0];
  if (has_updateroletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(96, this->updateroletime(), target);
  }

  // optional bool FightState = 97 [default = false];
  if (has_fightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->fightstate(), target);
  }

  // repeated int32 AttackSkillList = 98;
  for (int i = 0; i < this->attackskilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(98, this->attackskilllist(i), target);
  }

  // optional string GuildName = 99;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->guildname(), target);
  }

  // optional bool IsAllowSelect = 100 [default = true];
  if (has_isallowselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->isallowselect(), target);
  }

  // optional bool GoHomeState = 101 [default = false];
  if (has_gohomestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->gohomestate(), target);
  }

  // optional bool CanFight = 102 [default = true];
  if (has_canfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->canfight(), target);
  }

  // optional int64 DoubleExp = 103 [default = -1];
  if (has_doubleexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(103, this->doubleexp(), target);
  }

  // optional int64 FriendPoint = 104 [default = -1];
  if (has_friendpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(104, this->friendpoint(), target);
  }

  // optional int64 HisMaxHonor = 105 [default = -1];
  if (has_hismaxhonor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(105, this->hismaxhonor(), target);
  }

  // optional bool HurtState = 106 [default = false];
  if (has_hurtstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->hurtstate(), target);
  }

  // optional bool HurtFlyState = 107 [default = false];
  if (has_hurtflystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->hurtflystate(), target);
  }

  // optional bool HurtDownState = 108 [default = false];
  if (has_hurtdownstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->hurtdownstate(), target);
  }

  // optional bool HurtRepelState = 109 [default = false];
  if (has_hurtrepelstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(109, this->hurtrepelstate(), target);
  }

  // optional int64 TodayHornor = 111 [default = -1];
  if (has_todayhornor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(111, this->todayhornor(), target);
  }

  // optional int32 CurProfession = 113 [default = -1];
  if (has_curprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->curprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseAttrUserDataV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Exp = 1 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 Level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 ServerTime = 4 [default = -1];
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

    // optional uint64 RoleId = 5 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Strength = 7 [default = 0];
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 Agility = 8 [default = 0];
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 Intellectual = 9 [default = 0];
    if (has_intellectual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intellectual());
    }

    // optional int32 Endurance = 10 [default = 0];
    if (has_endurance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endurance());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Spirit = 11 [default = 0];
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spirit());
    }

    // optional int32 Hp = 12 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 MaxHp = 14 [default = 0];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 PhysicAttack = 15 [default = 0];
    if (has_physicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicattack());
    }

    // optional int32 PhysicDefense = 16 [default = 0];
    if (has_physicdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicdefense());
    }

    // optional int32 MagicAttack = 19 [default = 0];
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // optional int32 MagicDefense = 20 [default = 0];
    if (has_magicdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefense());
    }

    // optional int32 Hit = 21 [default = 0];
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float HitRate = 22 [default = 0];
    if (has_hitrate()) {
      total_size += 2 + 4;
    }

    // optional int32 Miss = 23 [default = 0];
    if (has_miss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->miss());
    }

    // optional float MissRate = 24 [default = 0];
    if (has_missrate()) {
      total_size += 2 + 4;
    }

    // optional int32 Critical = 25 [default = 0];
    if (has_critical()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critical());
    }

    // optional float CriticalRate = 26 [default = 0];
    if (has_criticalrate()) {
      total_size += 2 + 4;
    }

    // optional int32 Tenacity = 27 [default = 0];
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacity());
    }

    // optional float TenacityRate = 28 [default = 0];
    if (has_tenacityrate()) {
      total_size += 2 + 4;
    }

    // optional int32 Penet = 29 [default = 0];
    if (has_penet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penet());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float PenetRate = 30 [default = 0];
    if (has_penetrate()) {
      total_size += 2 + 4;
    }

    // optional int32 Dodg = 31 [default = 0];
    if (has_dodg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodg());
    }

    // optional float DodgRate = 32 [default = 0];
    if (has_dodgrate()) {
      total_size += 2 + 4;
    }

    // optional int32 CriticalAddition = 33 [default = 0];
    if (has_criticaladdition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->criticaladdition());
    }

    // optional float CriticalAdditionRate = 34 [default = 0];
    if (has_criticaladditionrate()) {
      total_size += 2 + 4;
    }

    // optional int32 CriticalImmune = 35 [default = 0];
    if (has_criticalimmune()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->criticalimmune());
    }

    // optional float CriticalImmuneRate = 36 [default = 0];
    if (has_criticalimmunerate()) {
      total_size += 2 + 4;
    }

    // optional int32 MissLevel = 37 [default = 0];
    if (has_misslevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->misslevel());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 CriticalLevel = 38 [default = 0];
    if (has_criticallevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->criticallevel());
    }

    // optional int32 DodgLevel = 39 [default = 0];
    if (has_dodglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodglevel());
    }

    // optional float MoveSpeed = 40 [default = 0];
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // optional int32 DizzyState = 41 [default = 0];
    if (has_dizzystate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dizzystate());
    }

    // optional bool GodState = 42 [default = false];
    if (has_godstate()) {
      total_size += 2 + 1;
    }

    // optional int32 CantMoveState = 43 [default = 0];
    if (has_cantmovestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cantmovestate());
    }

    // optional float PhysicAddition = 45 [default = 0];
    if (has_physicaddition()) {
      total_size += 2 + 4;
    }

    // optional float MagicAddition = 46 [default = 0];
    if (has_magicaddition()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float PhysicOppose = 47 [default = 0];
    if (has_physicoppose()) {
      total_size += 2 + 4;
    }

    // optional float MagicOppose = 48 [default = 0];
    if (has_magicoppose()) {
      total_size += 2 + 4;
    }

    // optional float AccumulateSkiEnergy = 50 [default = 0];
    if (has_accumulateskienergy()) {
      total_size += 2 + 4;
    }

    // optional string NickName = 51;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 ConfigId = 52 [default = -1];
    if (has_configid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 ObjType = 53 [default = -1];
    if (has_objtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional int32 State = 54 [default = -1];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 OwnerObjId = 55 [default = -1];
    if (has_ownerobjid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerobjid());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 Camp = 56 [default = -1];
    if (has_camp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int64 SilverMoney = 57 [default = 0];
    if (has_silvermoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->silvermoney());
    }

    // optional int64 GoldMoney = 58 [default = 0];
    if (has_goldmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldmoney());
    }

    // optional int64 DiamondMoney = 59 [default = 0];
    if (has_diamondmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamondmoney());
    }

    // optional int64 BindingDiamondMoney = 60 [default = 0];
    if (has_bindingdiamondmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bindingdiamondmoney());
    }

    // optional int32 BattleScore = 61 [default = -1];
    if (has_battlescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional int64 Energy = 62 [default = -1];
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->energy());
    }

    // optional int64 GuildMoney = 63 [default = -1];
    if (has_guildmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildmoney());
    }

  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    // optional int64 HonorMoney = 65 [default = -1];
    if (has_honormoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->honormoney());
    }

    // optional int64 ResourcePoolHp = 66 [default = -1];
    if (has_resourcepoolhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resourcepoolhp());
    }

    // optional int32 AttackAdd = 67 [default = 0];
    if (has_attackadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackadd());
    }

    // optional int32 InjuryAdd = 68 [default = 0];
    if (has_injuryadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->injuryadd());
    }

    // optional int32 FrozenState = 69 [default = -1];
    if (has_frozenstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frozenstate());
    }

    // optional int32 SilentState = 70 [default = -1];
    if (has_silentstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silentstate());
    }

    // optional int64 GuildContributeHistoryMax = 72 [default = -1];
    if (has_guildcontributehistorymax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildcontributehistorymax());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint64 TeamId = 74 [default = 0];
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional int32 TreasureHair = 75 [default = -1];
    if (has_treasurehair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehair());
    }

    // optional int32 TreasureHead = 76 [default = -1];
    if (has_treasurehead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehead());
    }

    // optional int32 TreasureBody = 77 [default = -1];
    if (has_treasurebody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurebody());
    }

    // optional int32 TreasureWeapon = 78 [default = -1];
    if (has_treasureweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureweapon());
    }

    // optional int32 TreasureWing = 79 [default = -1];
    if (has_treasurewing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurewing());
    }

    // optional uint64 GuildGuid = 80 [default = 0];
    if (has_guildguid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildguid());
    }

    // optional int32 TreasureRiding = 81 [default = -1];
    if (has_treasureriding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureriding());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 VechicleId = 82 [default = -1];
    if (has_vechicleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vechicleid());
    }

    // optional bool AnimationState = 83 [default = false];
    if (has_animationstate()) {
      total_size += 2 + 1;
    }

    // optional float RefixDmgRate = 84 [default = 0];
    if (has_refixdmgrate()) {
      total_size += 2 + 4;
    }

    // optional int32 RefixDmgValue = 85 [default = 0];
    if (has_refixdmgvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refixdmgvalue());
    }

    // optional float RefixHurtRate = 86 [default = 0];
    if (has_refixhurtrate()) {
      total_size += 2 + 4;
    }

    // optional int32 RefixHurtValue = 87 [default = 0];
    if (has_refixhurtvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refixhurtvalue());
    }

    // optional float RefixHealRate = 88 [default = 0];
    if (has_refixhealrate()) {
      total_size += 2 + 4;
    }

    // optional int32 RefixHealValue = 89 [default = 0];
    if (has_refixhealvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refixhealvalue());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional float RefixCuredRate = 90 [default = 0];
    if (has_refixcuredrate()) {
      total_size += 2 + 4;
    }

    // optional int32 RefixCuredValue = 91 [default = 0];
    if (has_refixcuredvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refixcuredvalue());
    }

    // optional int64 GuildContribute = 92 [default = -1];
    if (has_guildcontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildcontribute());
    }

    // optional int64 PvpMoney = 93 [default = -1];
    if (has_pvpmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pvpmoney());
    }

    // optional int64 GuildResource = 94 [default = -1];
    if (has_guildresource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildresource());
    }

    // optional int32 CreateRoleTime = 95 [default = 0];
    if (has_createroletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createroletime());
    }

    // optional int32 UpdateRoleTime = 96 [default = 0];
    if (has_updateroletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateroletime());
    }

    // optional bool FightState = 97 [default = false];
    if (has_fightstate()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[89 / 32] & (0xffu << (89 % 32))) {
    // optional string GuildName = 99;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional bool IsAllowSelect = 100 [default = true];
    if (has_isallowselect()) {
      total_size += 2 + 1;
    }

    // optional bool GoHomeState = 101 [default = false];
    if (has_gohomestate()) {
      total_size += 2 + 1;
    }

    // optional bool CanFight = 102 [default = true];
    if (has_canfight()) {
      total_size += 2 + 1;
    }

    // optional int64 DoubleExp = 103 [default = -1];
    if (has_doubleexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->doubleexp());
    }

    // optional int64 FriendPoint = 104 [default = -1];
    if (has_friendpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friendpoint());
    }

    // optional int64 HisMaxHonor = 105 [default = -1];
    if (has_hismaxhonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hismaxhonor());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional bool HurtState = 106 [default = false];
    if (has_hurtstate()) {
      total_size += 2 + 1;
    }

    // optional bool HurtFlyState = 107 [default = false];
    if (has_hurtflystate()) {
      total_size += 2 + 1;
    }

    // optional bool HurtDownState = 108 [default = false];
    if (has_hurtdownstate()) {
      total_size += 2 + 1;
    }

    // optional bool HurtRepelState = 109 [default = false];
    if (has_hurtrepelstate()) {
      total_size += 2 + 1;
    }

    // optional int64 TodayHornor = 111 [default = -1];
    if (has_todayhornor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->todayhornor());
    }

    // optional int32 CurProfession = 113 [default = -1];
    if (has_curprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curprofession());
    }

  }
  // repeated int32 SkillList = 64;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilllist(i));
    }
    total_size += 2 * this->skilllist_size() + data_size;
  }

  // repeated int32 AttackSkillList = 98;
  {
    int data_size = 0;
    for (int i = 0; i < this->attackskilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attackskilllist(i));
    }
    total_size += 2 * this->attackskilllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseAttrUserDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseAttrUserDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseAttrUserDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseAttrUserDataV1::MergeFrom(const BaseAttrUserDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  attackskilllist_.MergeFrom(from.attackskilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_intellectual()) {
      set_intellectual(from.intellectual());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_physicattack()) {
      set_physicattack(from.physicattack());
    }
    if (from.has_physicdefense()) {
      set_physicdefense(from.physicdefense());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicdefense()) {
      set_magicdefense(from.magicdefense());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_miss()) {
      set_miss(from.miss());
    }
    if (from.has_missrate()) {
      set_missrate(from.missrate());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_criticalrate()) {
      set_criticalrate(from.criticalrate());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_tenacityrate()) {
      set_tenacityrate(from.tenacityrate());
    }
    if (from.has_penet()) {
      set_penet(from.penet());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_penetrate()) {
      set_penetrate(from.penetrate());
    }
    if (from.has_dodg()) {
      set_dodg(from.dodg());
    }
    if (from.has_dodgrate()) {
      set_dodgrate(from.dodgrate());
    }
    if (from.has_criticaladdition()) {
      set_criticaladdition(from.criticaladdition());
    }
    if (from.has_criticaladditionrate()) {
      set_criticaladditionrate(from.criticaladditionrate());
    }
    if (from.has_criticalimmune()) {
      set_criticalimmune(from.criticalimmune());
    }
    if (from.has_criticalimmunerate()) {
      set_criticalimmunerate(from.criticalimmunerate());
    }
    if (from.has_misslevel()) {
      set_misslevel(from.misslevel());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_criticallevel()) {
      set_criticallevel(from.criticallevel());
    }
    if (from.has_dodglevel()) {
      set_dodglevel(from.dodglevel());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_dizzystate()) {
      set_dizzystate(from.dizzystate());
    }
    if (from.has_godstate()) {
      set_godstate(from.godstate());
    }
    if (from.has_cantmovestate()) {
      set_cantmovestate(from.cantmovestate());
    }
    if (from.has_physicaddition()) {
      set_physicaddition(from.physicaddition());
    }
    if (from.has_magicaddition()) {
      set_magicaddition(from.magicaddition());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_physicoppose()) {
      set_physicoppose(from.physicoppose());
    }
    if (from.has_magicoppose()) {
      set_magicoppose(from.magicoppose());
    }
    if (from.has_accumulateskienergy()) {
      set_accumulateskienergy(from.accumulateskienergy());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ownerobjid()) {
      set_ownerobjid(from.ownerobjid());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_silvermoney()) {
      set_silvermoney(from.silvermoney());
    }
    if (from.has_goldmoney()) {
      set_goldmoney(from.goldmoney());
    }
    if (from.has_diamondmoney()) {
      set_diamondmoney(from.diamondmoney());
    }
    if (from.has_bindingdiamondmoney()) {
      set_bindingdiamondmoney(from.bindingdiamondmoney());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
  }
  if (from._has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    if (from.has_honormoney()) {
      set_honormoney(from.honormoney());
    }
    if (from.has_resourcepoolhp()) {
      set_resourcepoolhp(from.resourcepoolhp());
    }
    if (from.has_attackadd()) {
      set_attackadd(from.attackadd());
    }
    if (from.has_injuryadd()) {
      set_injuryadd(from.injuryadd());
    }
    if (from.has_frozenstate()) {
      set_frozenstate(from.frozenstate());
    }
    if (from.has_silentstate()) {
      set_silentstate(from.silentstate());
    }
    if (from.has_guildcontributehistorymax()) {
      set_guildcontributehistorymax(from.guildcontributehistorymax());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_treasurehair()) {
      set_treasurehair(from.treasurehair());
    }
    if (from.has_treasurehead()) {
      set_treasurehead(from.treasurehead());
    }
    if (from.has_treasurebody()) {
      set_treasurebody(from.treasurebody());
    }
    if (from.has_treasureweapon()) {
      set_treasureweapon(from.treasureweapon());
    }
    if (from.has_treasurewing()) {
      set_treasurewing(from.treasurewing());
    }
    if (from.has_guildguid()) {
      set_guildguid(from.guildguid());
    }
    if (from.has_treasureriding()) {
      set_treasureriding(from.treasureriding());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_vechicleid()) {
      set_vechicleid(from.vechicleid());
    }
    if (from.has_animationstate()) {
      set_animationstate(from.animationstate());
    }
    if (from.has_refixdmgrate()) {
      set_refixdmgrate(from.refixdmgrate());
    }
    if (from.has_refixdmgvalue()) {
      set_refixdmgvalue(from.refixdmgvalue());
    }
    if (from.has_refixhurtrate()) {
      set_refixhurtrate(from.refixhurtrate());
    }
    if (from.has_refixhurtvalue()) {
      set_refixhurtvalue(from.refixhurtvalue());
    }
    if (from.has_refixhealrate()) {
      set_refixhealrate(from.refixhealrate());
    }
    if (from.has_refixhealvalue()) {
      set_refixhealvalue(from.refixhealvalue());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_refixcuredrate()) {
      set_refixcuredrate(from.refixcuredrate());
    }
    if (from.has_refixcuredvalue()) {
      set_refixcuredvalue(from.refixcuredvalue());
    }
    if (from.has_guildcontribute()) {
      set_guildcontribute(from.guildcontribute());
    }
    if (from.has_pvpmoney()) {
      set_pvpmoney(from.pvpmoney());
    }
    if (from.has_guildresource()) {
      set_guildresource(from.guildresource());
    }
    if (from.has_createroletime()) {
      set_createroletime(from.createroletime());
    }
    if (from.has_updateroletime()) {
      set_updateroletime(from.updateroletime());
    }
    if (from.has_fightstate()) {
      set_fightstate(from.fightstate());
    }
  }
  if (from._has_bits_[89 / 32] & (0xffu << (89 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_isallowselect()) {
      set_isallowselect(from.isallowselect());
    }
    if (from.has_gohomestate()) {
      set_gohomestate(from.gohomestate());
    }
    if (from.has_canfight()) {
      set_canfight(from.canfight());
    }
    if (from.has_doubleexp()) {
      set_doubleexp(from.doubleexp());
    }
    if (from.has_friendpoint()) {
      set_friendpoint(from.friendpoint());
    }
    if (from.has_hismaxhonor()) {
      set_hismaxhonor(from.hismaxhonor());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_hurtstate()) {
      set_hurtstate(from.hurtstate());
    }
    if (from.has_hurtflystate()) {
      set_hurtflystate(from.hurtflystate());
    }
    if (from.has_hurtdownstate()) {
      set_hurtdownstate(from.hurtdownstate());
    }
    if (from.has_hurtrepelstate()) {
      set_hurtrepelstate(from.hurtrepelstate());
    }
    if (from.has_todayhornor()) {
      set_todayhornor(from.todayhornor());
    }
    if (from.has_curprofession()) {
      set_curprofession(from.curprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseAttrUserDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAttrUserDataV1::CopyFrom(const BaseAttrUserDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAttrUserDataV1::IsInitialized() const {

  return true;
}

void BaseAttrUserDataV1::Swap(BaseAttrUserDataV1* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(servertime_, other->servertime_);
    std::swap(roleid_, other->roleid_);
    std::swap(strength_, other->strength_);
    std::swap(agility_, other->agility_);
    std::swap(intellectual_, other->intellectual_);
    std::swap(endurance_, other->endurance_);
    std::swap(spirit_, other->spirit_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(physicattack_, other->physicattack_);
    std::swap(physicdefense_, other->physicdefense_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicdefense_, other->magicdefense_);
    std::swap(hit_, other->hit_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(miss_, other->miss_);
    std::swap(missrate_, other->missrate_);
    std::swap(critical_, other->critical_);
    std::swap(criticalrate_, other->criticalrate_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(tenacityrate_, other->tenacityrate_);
    std::swap(penet_, other->penet_);
    std::swap(penetrate_, other->penetrate_);
    std::swap(dodg_, other->dodg_);
    std::swap(dodgrate_, other->dodgrate_);
    std::swap(criticaladdition_, other->criticaladdition_);
    std::swap(criticaladditionrate_, other->criticaladditionrate_);
    std::swap(criticalimmune_, other->criticalimmune_);
    std::swap(criticalimmunerate_, other->criticalimmunerate_);
    std::swap(misslevel_, other->misslevel_);
    std::swap(criticallevel_, other->criticallevel_);
    std::swap(dodglevel_, other->dodglevel_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(dizzystate_, other->dizzystate_);
    std::swap(godstate_, other->godstate_);
    std::swap(cantmovestate_, other->cantmovestate_);
    std::swap(physicaddition_, other->physicaddition_);
    std::swap(magicaddition_, other->magicaddition_);
    std::swap(physicoppose_, other->physicoppose_);
    std::swap(magicoppose_, other->magicoppose_);
    std::swap(accumulateskienergy_, other->accumulateskienergy_);
    std::swap(nickname_, other->nickname_);
    std::swap(configid_, other->configid_);
    std::swap(objtype_, other->objtype_);
    std::swap(state_, other->state_);
    std::swap(ownerobjid_, other->ownerobjid_);
    std::swap(camp_, other->camp_);
    std::swap(silvermoney_, other->silvermoney_);
    std::swap(goldmoney_, other->goldmoney_);
    std::swap(diamondmoney_, other->diamondmoney_);
    std::swap(bindingdiamondmoney_, other->bindingdiamondmoney_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(energy_, other->energy_);
    std::swap(guildmoney_, other->guildmoney_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(honormoney_, other->honormoney_);
    std::swap(resourcepoolhp_, other->resourcepoolhp_);
    std::swap(attackadd_, other->attackadd_);
    std::swap(injuryadd_, other->injuryadd_);
    std::swap(frozenstate_, other->frozenstate_);
    std::swap(silentstate_, other->silentstate_);
    std::swap(guildcontributehistorymax_, other->guildcontributehistorymax_);
    std::swap(teamid_, other->teamid_);
    std::swap(treasurehair_, other->treasurehair_);
    std::swap(treasurehead_, other->treasurehead_);
    std::swap(treasurebody_, other->treasurebody_);
    std::swap(treasureweapon_, other->treasureweapon_);
    std::swap(treasurewing_, other->treasurewing_);
    std::swap(guildguid_, other->guildguid_);
    std::swap(treasureriding_, other->treasureriding_);
    std::swap(vechicleid_, other->vechicleid_);
    std::swap(animationstate_, other->animationstate_);
    std::swap(refixdmgrate_, other->refixdmgrate_);
    std::swap(refixdmgvalue_, other->refixdmgvalue_);
    std::swap(refixhurtrate_, other->refixhurtrate_);
    std::swap(refixhurtvalue_, other->refixhurtvalue_);
    std::swap(refixhealrate_, other->refixhealrate_);
    std::swap(refixhealvalue_, other->refixhealvalue_);
    std::swap(refixcuredrate_, other->refixcuredrate_);
    std::swap(refixcuredvalue_, other->refixcuredvalue_);
    std::swap(guildcontribute_, other->guildcontribute_);
    std::swap(pvpmoney_, other->pvpmoney_);
    std::swap(guildresource_, other->guildresource_);
    std::swap(createroletime_, other->createroletime_);
    std::swap(updateroletime_, other->updateroletime_);
    std::swap(fightstate_, other->fightstate_);
    attackskilllist_.Swap(&other->attackskilllist_);
    std::swap(guildname_, other->guildname_);
    std::swap(isallowselect_, other->isallowselect_);
    std::swap(gohomestate_, other->gohomestate_);
    std::swap(canfight_, other->canfight_);
    std::swap(doubleexp_, other->doubleexp_);
    std::swap(friendpoint_, other->friendpoint_);
    std::swap(hismaxhonor_, other->hismaxhonor_);
    std::swap(hurtstate_, other->hurtstate_);
    std::swap(hurtflystate_, other->hurtflystate_);
    std::swap(hurtdownstate_, other->hurtdownstate_);
    std::swap(hurtrepelstate_, other->hurtrepelstate_);
    std::swap(todayhornor_, other->todayhornor_);
    std::swap(curprofession_, other->curprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseAttrUserDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseAttrUserDataV1_descriptor_;
  metadata.reflection = BaseAttrUserDataV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseAttrObjDataV1::kObjTypeFieldNumber;
const int BaseAttrObjDataV1::kConfigIdFieldNumber;
const int BaseAttrObjDataV1::kStateFieldNumber;
const int BaseAttrObjDataV1::kOwnerObjIdFieldNumber;
#endif  // !_MSC_VER

BaseAttrObjDataV1::BaseAttrObjDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseAttrObjDataV1::InitAsDefaultInstance() {
}

BaseAttrObjDataV1::BaseAttrObjDataV1(const BaseAttrObjDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseAttrObjDataV1::SharedCtor() {
  _cached_size_ = 0;
  objtype_ = -1;
  configid_ = -1;
  state_ = -1;
  ownerobjid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseAttrObjDataV1::~BaseAttrObjDataV1() {
  SharedDtor();
}

void BaseAttrObjDataV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseAttrObjDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseAttrObjDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseAttrObjDataV1_descriptor_;
}

const BaseAttrObjDataV1& BaseAttrObjDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseAttrV1Data_2eproto();
  return *default_instance_;
}

BaseAttrObjDataV1* BaseAttrObjDataV1::default_instance_ = NULL;

BaseAttrObjDataV1* BaseAttrObjDataV1::New() const {
  return new BaseAttrObjDataV1;
}

void BaseAttrObjDataV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objtype_ = -1;
    configid_ = -1;
    state_ = -1;
    ownerobjid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseAttrObjDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional int32 State = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OwnerObjId;
        break;
      }

      // optional int32 OwnerObjId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OwnerObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerobjid_)));
          set_has_ownerobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseAttrObjDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjType = 1 [default = -1];
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objtype(), output);
  }

  // optional int32 ConfigId = 2 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->configid(), output);
  }

  // optional int32 State = 3 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 OwnerObjId = 4 [default = -1];
  if (has_ownerobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ownerobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseAttrObjDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjType = 1 [default = -1];
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objtype(), target);
  }

  // optional int32 ConfigId = 2 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->configid(), target);
  }

  // optional int32 State = 3 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 OwnerObjId = 4 [default = -1];
  if (has_ownerobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ownerobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseAttrObjDataV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjType = 1 [default = -1];
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional int32 ConfigId = 2 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 State = 3 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 OwnerObjId = 4 [default = -1];
    if (has_ownerobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseAttrObjDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseAttrObjDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseAttrObjDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseAttrObjDataV1::MergeFrom(const BaseAttrObjDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ownerobjid()) {
      set_ownerobjid(from.ownerobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseAttrObjDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAttrObjDataV1::CopyFrom(const BaseAttrObjDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAttrObjDataV1::IsInitialized() const {

  return true;
}

void BaseAttrObjDataV1::Swap(BaseAttrObjDataV1* other) {
  if (other != this) {
    std::swap(objtype_, other->objtype_);
    std::swap(configid_, other->configid_);
    std::swap(state_, other->state_);
    std::swap(ownerobjid_, other->ownerobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseAttrObjDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseAttrObjDataV1_descriptor_;
  metadata.reflection = BaseAttrObjDataV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
