// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseAttrV1Data.proto

#ifndef PROTOBUF_BaseAttrV1Data_2eproto__INCLUDED
#define PROTOBUF_BaseAttrV1Data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BaseAttrV1Data_2eproto();
void protobuf_AssignDesc_BaseAttrV1Data_2eproto();
void protobuf_ShutdownFile_BaseAttrV1Data_2eproto();

class BaseAttrUserDataV1;
class BaseAttrObjDataV1;

// ===================================================================

class BaseAttrUserDataV1 : public ::google::protobuf::Message {
 public:
  BaseAttrUserDataV1();
  virtual ~BaseAttrUserDataV1();

  BaseAttrUserDataV1(const BaseAttrUserDataV1& from);

  inline BaseAttrUserDataV1& operator=(const BaseAttrUserDataV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseAttrUserDataV1& default_instance();

  void Swap(BaseAttrUserDataV1* other);

  // implements Message ----------------------------------------------

  BaseAttrUserDataV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseAttrUserDataV1& from);
  void MergeFrom(const BaseAttrUserDataV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Exp = 1 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 Level = 3 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 ServerTime = 4 [default = -1];
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 4;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // optional uint64 RoleId = 5 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 Strength = 7 [default = 0];
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 7;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // optional int32 Agility = 8 [default = 0];
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 8;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // optional int32 Intellectual = 9 [default = 0];
  inline bool has_intellectual() const;
  inline void clear_intellectual();
  static const int kIntellectualFieldNumber = 9;
  inline ::google::protobuf::int32 intellectual() const;
  inline void set_intellectual(::google::protobuf::int32 value);

  // optional int32 Endurance = 10 [default = 0];
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 10;
  inline ::google::protobuf::int32 endurance() const;
  inline void set_endurance(::google::protobuf::int32 value);

  // optional int32 Spirit = 11 [default = 0];
  inline bool has_spirit() const;
  inline void clear_spirit();
  static const int kSpiritFieldNumber = 11;
  inline ::google::protobuf::int32 spirit() const;
  inline void set_spirit(::google::protobuf::int32 value);

  // optional int32 Hp = 12 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 12;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 MaxHp = 14 [default = 0];
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 14;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional int32 PhysicAttack = 15 [default = 0];
  inline bool has_physicattack() const;
  inline void clear_physicattack();
  static const int kPhysicAttackFieldNumber = 15;
  inline ::google::protobuf::int32 physicattack() const;
  inline void set_physicattack(::google::protobuf::int32 value);

  // optional int32 PhysicDefense = 16 [default = 0];
  inline bool has_physicdefense() const;
  inline void clear_physicdefense();
  static const int kPhysicDefenseFieldNumber = 16;
  inline ::google::protobuf::int32 physicdefense() const;
  inline void set_physicdefense(::google::protobuf::int32 value);

  // optional int32 MagicAttack = 19 [default = 0];
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicAttackFieldNumber = 19;
  inline ::google::protobuf::int32 magicattack() const;
  inline void set_magicattack(::google::protobuf::int32 value);

  // optional int32 MagicDefense = 20 [default = 0];
  inline bool has_magicdefense() const;
  inline void clear_magicdefense();
  static const int kMagicDefenseFieldNumber = 20;
  inline ::google::protobuf::int32 magicdefense() const;
  inline void set_magicdefense(::google::protobuf::int32 value);

  // optional int32 Hit = 21 [default = 0];
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 21;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // optional float HitRate = 22 [default = 0];
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitRateFieldNumber = 22;
  inline float hitrate() const;
  inline void set_hitrate(float value);

  // optional int32 Miss = 23 [default = 0];
  inline bool has_miss() const;
  inline void clear_miss();
  static const int kMissFieldNumber = 23;
  inline ::google::protobuf::int32 miss() const;
  inline void set_miss(::google::protobuf::int32 value);

  // optional float MissRate = 24 [default = 0];
  inline bool has_missrate() const;
  inline void clear_missrate();
  static const int kMissRateFieldNumber = 24;
  inline float missrate() const;
  inline void set_missrate(float value);

  // optional int32 Critical = 25 [default = 0];
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 25;
  inline ::google::protobuf::int32 critical() const;
  inline void set_critical(::google::protobuf::int32 value);

  // optional float CriticalRate = 26 [default = 0];
  inline bool has_criticalrate() const;
  inline void clear_criticalrate();
  static const int kCriticalRateFieldNumber = 26;
  inline float criticalrate() const;
  inline void set_criticalrate(float value);

  // optional int32 Tenacity = 27 [default = 0];
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 27;
  inline ::google::protobuf::int32 tenacity() const;
  inline void set_tenacity(::google::protobuf::int32 value);

  // optional float TenacityRate = 28 [default = 0];
  inline bool has_tenacityrate() const;
  inline void clear_tenacityrate();
  static const int kTenacityRateFieldNumber = 28;
  inline float tenacityrate() const;
  inline void set_tenacityrate(float value);

  // optional int32 Penet = 29 [default = 0];
  inline bool has_penet() const;
  inline void clear_penet();
  static const int kPenetFieldNumber = 29;
  inline ::google::protobuf::int32 penet() const;
  inline void set_penet(::google::protobuf::int32 value);

  // optional float PenetRate = 30 [default = 0];
  inline bool has_penetrate() const;
  inline void clear_penetrate();
  static const int kPenetRateFieldNumber = 30;
  inline float penetrate() const;
  inline void set_penetrate(float value);

  // optional int32 Dodg = 31 [default = 0];
  inline bool has_dodg() const;
  inline void clear_dodg();
  static const int kDodgFieldNumber = 31;
  inline ::google::protobuf::int32 dodg() const;
  inline void set_dodg(::google::protobuf::int32 value);

  // optional float DodgRate = 32 [default = 0];
  inline bool has_dodgrate() const;
  inline void clear_dodgrate();
  static const int kDodgRateFieldNumber = 32;
  inline float dodgrate() const;
  inline void set_dodgrate(float value);

  // optional int32 CriticalAddition = 33 [default = 0];
  inline bool has_criticaladdition() const;
  inline void clear_criticaladdition();
  static const int kCriticalAdditionFieldNumber = 33;
  inline ::google::protobuf::int32 criticaladdition() const;
  inline void set_criticaladdition(::google::protobuf::int32 value);

  // optional float CriticalAdditionRate = 34 [default = 0];
  inline bool has_criticaladditionrate() const;
  inline void clear_criticaladditionrate();
  static const int kCriticalAdditionRateFieldNumber = 34;
  inline float criticaladditionrate() const;
  inline void set_criticaladditionrate(float value);

  // optional int32 CriticalImmune = 35 [default = 0];
  inline bool has_criticalimmune() const;
  inline void clear_criticalimmune();
  static const int kCriticalImmuneFieldNumber = 35;
  inline ::google::protobuf::int32 criticalimmune() const;
  inline void set_criticalimmune(::google::protobuf::int32 value);

  // optional float CriticalImmuneRate = 36 [default = 0];
  inline bool has_criticalimmunerate() const;
  inline void clear_criticalimmunerate();
  static const int kCriticalImmuneRateFieldNumber = 36;
  inline float criticalimmunerate() const;
  inline void set_criticalimmunerate(float value);

  // optional int32 MissLevel = 37 [default = 0];
  inline bool has_misslevel() const;
  inline void clear_misslevel();
  static const int kMissLevelFieldNumber = 37;
  inline ::google::protobuf::int32 misslevel() const;
  inline void set_misslevel(::google::protobuf::int32 value);

  // optional int32 CriticalLevel = 38 [default = 0];
  inline bool has_criticallevel() const;
  inline void clear_criticallevel();
  static const int kCriticalLevelFieldNumber = 38;
  inline ::google::protobuf::int32 criticallevel() const;
  inline void set_criticallevel(::google::protobuf::int32 value);

  // optional int32 DodgLevel = 39 [default = 0];
  inline bool has_dodglevel() const;
  inline void clear_dodglevel();
  static const int kDodgLevelFieldNumber = 39;
  inline ::google::protobuf::int32 dodglevel() const;
  inline void set_dodglevel(::google::protobuf::int32 value);

  // optional float MoveSpeed = 40 [default = 0];
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 40;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // optional int32 DizzyState = 41 [default = 0];
  inline bool has_dizzystate() const;
  inline void clear_dizzystate();
  static const int kDizzyStateFieldNumber = 41;
  inline ::google::protobuf::int32 dizzystate() const;
  inline void set_dizzystate(::google::protobuf::int32 value);

  // optional bool GodState = 42 [default = false];
  inline bool has_godstate() const;
  inline void clear_godstate();
  static const int kGodStateFieldNumber = 42;
  inline bool godstate() const;
  inline void set_godstate(bool value);

  // optional int32 CantMoveState = 43 [default = 0];
  inline bool has_cantmovestate() const;
  inline void clear_cantmovestate();
  static const int kCantMoveStateFieldNumber = 43;
  inline ::google::protobuf::int32 cantmovestate() const;
  inline void set_cantmovestate(::google::protobuf::int32 value);

  // optional float PhysicAddition = 45 [default = 0];
  inline bool has_physicaddition() const;
  inline void clear_physicaddition();
  static const int kPhysicAdditionFieldNumber = 45;
  inline float physicaddition() const;
  inline void set_physicaddition(float value);

  // optional float MagicAddition = 46 [default = 0];
  inline bool has_magicaddition() const;
  inline void clear_magicaddition();
  static const int kMagicAdditionFieldNumber = 46;
  inline float magicaddition() const;
  inline void set_magicaddition(float value);

  // optional float PhysicOppose = 47 [default = 0];
  inline bool has_physicoppose() const;
  inline void clear_physicoppose();
  static const int kPhysicOpposeFieldNumber = 47;
  inline float physicoppose() const;
  inline void set_physicoppose(float value);

  // optional float MagicOppose = 48 [default = 0];
  inline bool has_magicoppose() const;
  inline void clear_magicoppose();
  static const int kMagicOpposeFieldNumber = 48;
  inline float magicoppose() const;
  inline void set_magicoppose(float value);

  // optional float AccumulateSkiEnergy = 50 [default = 0];
  inline bool has_accumulateskienergy() const;
  inline void clear_accumulateskienergy();
  static const int kAccumulateSkiEnergyFieldNumber = 50;
  inline float accumulateskienergy() const;
  inline void set_accumulateskienergy(float value);

  // optional string NickName = 51;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 51;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 ConfigId = 52 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 52;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 ObjType = 53 [default = -1];
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 53;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // optional int32 State = 54 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 54;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 OwnerObjId = 55 [default = -1];
  inline bool has_ownerobjid() const;
  inline void clear_ownerobjid();
  static const int kOwnerObjIdFieldNumber = 55;
  inline ::google::protobuf::int32 ownerobjid() const;
  inline void set_ownerobjid(::google::protobuf::int32 value);

  // optional int32 Camp = 56 [default = -1];
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 56;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int64 SilverMoney = 57 [default = 0];
  inline bool has_silvermoney() const;
  inline void clear_silvermoney();
  static const int kSilverMoneyFieldNumber = 57;
  inline ::google::protobuf::int64 silvermoney() const;
  inline void set_silvermoney(::google::protobuf::int64 value);

  // optional int64 GoldMoney = 58 [default = 0];
  inline bool has_goldmoney() const;
  inline void clear_goldmoney();
  static const int kGoldMoneyFieldNumber = 58;
  inline ::google::protobuf::int64 goldmoney() const;
  inline void set_goldmoney(::google::protobuf::int64 value);

  // optional int64 DiamondMoney = 59 [default = 0];
  inline bool has_diamondmoney() const;
  inline void clear_diamondmoney();
  static const int kDiamondMoneyFieldNumber = 59;
  inline ::google::protobuf::int64 diamondmoney() const;
  inline void set_diamondmoney(::google::protobuf::int64 value);

  // optional int64 BindingDiamondMoney = 60 [default = 0];
  inline bool has_bindingdiamondmoney() const;
  inline void clear_bindingdiamondmoney();
  static const int kBindingDiamondMoneyFieldNumber = 60;
  inline ::google::protobuf::int64 bindingdiamondmoney() const;
  inline void set_bindingdiamondmoney(::google::protobuf::int64 value);

  // optional int32 BattleScore = 61 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 61;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // optional int64 Energy = 62 [default = -1];
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 62;
  inline ::google::protobuf::int64 energy() const;
  inline void set_energy(::google::protobuf::int64 value);

  // optional int64 GuildMoney = 63 [default = -1];
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildMoneyFieldNumber = 63;
  inline ::google::protobuf::int64 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int64 value);

  // repeated int32 SkillList = 64;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 64;
  inline ::google::protobuf::int32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::int32 value);
  inline void add_skilllist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skilllist();

  // optional int64 HonorMoney = 65 [default = -1];
  inline bool has_honormoney() const;
  inline void clear_honormoney();
  static const int kHonorMoneyFieldNumber = 65;
  inline ::google::protobuf::int64 honormoney() const;
  inline void set_honormoney(::google::protobuf::int64 value);

  // optional int64 ResourcePoolHp = 66 [default = -1];
  inline bool has_resourcepoolhp() const;
  inline void clear_resourcepoolhp();
  static const int kResourcePoolHpFieldNumber = 66;
  inline ::google::protobuf::int64 resourcepoolhp() const;
  inline void set_resourcepoolhp(::google::protobuf::int64 value);

  // optional int32 AttackAdd = 67 [default = 0];
  inline bool has_attackadd() const;
  inline void clear_attackadd();
  static const int kAttackAddFieldNumber = 67;
  inline ::google::protobuf::int32 attackadd() const;
  inline void set_attackadd(::google::protobuf::int32 value);

  // optional int32 InjuryAdd = 68 [default = 0];
  inline bool has_injuryadd() const;
  inline void clear_injuryadd();
  static const int kInjuryAddFieldNumber = 68;
  inline ::google::protobuf::int32 injuryadd() const;
  inline void set_injuryadd(::google::protobuf::int32 value);

  // optional int32 FrozenState = 69 [default = -1];
  inline bool has_frozenstate() const;
  inline void clear_frozenstate();
  static const int kFrozenStateFieldNumber = 69;
  inline ::google::protobuf::int32 frozenstate() const;
  inline void set_frozenstate(::google::protobuf::int32 value);

  // optional int32 SilentState = 70 [default = -1];
  inline bool has_silentstate() const;
  inline void clear_silentstate();
  static const int kSilentStateFieldNumber = 70;
  inline ::google::protobuf::int32 silentstate() const;
  inline void set_silentstate(::google::protobuf::int32 value);

  // optional int64 GuildContributeHistoryMax = 72 [default = -1];
  inline bool has_guildcontributehistorymax() const;
  inline void clear_guildcontributehistorymax();
  static const int kGuildContributeHistoryMaxFieldNumber = 72;
  inline ::google::protobuf::int64 guildcontributehistorymax() const;
  inline void set_guildcontributehistorymax(::google::protobuf::int64 value);

  // optional uint64 TeamId = 74 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 74;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional int32 TreasureHair = 75 [default = -1];
  inline bool has_treasurehair() const;
  inline void clear_treasurehair();
  static const int kTreasureHairFieldNumber = 75;
  inline ::google::protobuf::int32 treasurehair() const;
  inline void set_treasurehair(::google::protobuf::int32 value);

  // optional int32 TreasureHead = 76 [default = -1];
  inline bool has_treasurehead() const;
  inline void clear_treasurehead();
  static const int kTreasureHeadFieldNumber = 76;
  inline ::google::protobuf::int32 treasurehead() const;
  inline void set_treasurehead(::google::protobuf::int32 value);

  // optional int32 TreasureBody = 77 [default = -1];
  inline bool has_treasurebody() const;
  inline void clear_treasurebody();
  static const int kTreasureBodyFieldNumber = 77;
  inline ::google::protobuf::int32 treasurebody() const;
  inline void set_treasurebody(::google::protobuf::int32 value);

  // optional int32 TreasureWeapon = 78 [default = -1];
  inline bool has_treasureweapon() const;
  inline void clear_treasureweapon();
  static const int kTreasureWeaponFieldNumber = 78;
  inline ::google::protobuf::int32 treasureweapon() const;
  inline void set_treasureweapon(::google::protobuf::int32 value);

  // optional int32 TreasureWing = 79 [default = -1];
  inline bool has_treasurewing() const;
  inline void clear_treasurewing();
  static const int kTreasureWingFieldNumber = 79;
  inline ::google::protobuf::int32 treasurewing() const;
  inline void set_treasurewing(::google::protobuf::int32 value);

  // optional uint64 GuildGuid = 80 [default = 0];
  inline bool has_guildguid() const;
  inline void clear_guildguid();
  static const int kGuildGuidFieldNumber = 80;
  inline ::google::protobuf::uint64 guildguid() const;
  inline void set_guildguid(::google::protobuf::uint64 value);

  // optional int32 TreasureRiding = 81 [default = -1];
  inline bool has_treasureriding() const;
  inline void clear_treasureriding();
  static const int kTreasureRidingFieldNumber = 81;
  inline ::google::protobuf::int32 treasureriding() const;
  inline void set_treasureriding(::google::protobuf::int32 value);

  // optional int32 VechicleId = 82 [default = -1];
  inline bool has_vechicleid() const;
  inline void clear_vechicleid();
  static const int kVechicleIdFieldNumber = 82;
  inline ::google::protobuf::int32 vechicleid() const;
  inline void set_vechicleid(::google::protobuf::int32 value);

  // optional bool AnimationState = 83 [default = false];
  inline bool has_animationstate() const;
  inline void clear_animationstate();
  static const int kAnimationStateFieldNumber = 83;
  inline bool animationstate() const;
  inline void set_animationstate(bool value);

  // optional float RefixDmgRate = 84 [default = 0];
  inline bool has_refixdmgrate() const;
  inline void clear_refixdmgrate();
  static const int kRefixDmgRateFieldNumber = 84;
  inline float refixdmgrate() const;
  inline void set_refixdmgrate(float value);

  // optional int32 RefixDmgValue = 85 [default = 0];
  inline bool has_refixdmgvalue() const;
  inline void clear_refixdmgvalue();
  static const int kRefixDmgValueFieldNumber = 85;
  inline ::google::protobuf::int32 refixdmgvalue() const;
  inline void set_refixdmgvalue(::google::protobuf::int32 value);

  // optional float RefixHurtRate = 86 [default = 0];
  inline bool has_refixhurtrate() const;
  inline void clear_refixhurtrate();
  static const int kRefixHurtRateFieldNumber = 86;
  inline float refixhurtrate() const;
  inline void set_refixhurtrate(float value);

  // optional int32 RefixHurtValue = 87 [default = 0];
  inline bool has_refixhurtvalue() const;
  inline void clear_refixhurtvalue();
  static const int kRefixHurtValueFieldNumber = 87;
  inline ::google::protobuf::int32 refixhurtvalue() const;
  inline void set_refixhurtvalue(::google::protobuf::int32 value);

  // optional float RefixHealRate = 88 [default = 0];
  inline bool has_refixhealrate() const;
  inline void clear_refixhealrate();
  static const int kRefixHealRateFieldNumber = 88;
  inline float refixhealrate() const;
  inline void set_refixhealrate(float value);

  // optional int32 RefixHealValue = 89 [default = 0];
  inline bool has_refixhealvalue() const;
  inline void clear_refixhealvalue();
  static const int kRefixHealValueFieldNumber = 89;
  inline ::google::protobuf::int32 refixhealvalue() const;
  inline void set_refixhealvalue(::google::protobuf::int32 value);

  // optional float RefixCuredRate = 90 [default = 0];
  inline bool has_refixcuredrate() const;
  inline void clear_refixcuredrate();
  static const int kRefixCuredRateFieldNumber = 90;
  inline float refixcuredrate() const;
  inline void set_refixcuredrate(float value);

  // optional int32 RefixCuredValue = 91 [default = 0];
  inline bool has_refixcuredvalue() const;
  inline void clear_refixcuredvalue();
  static const int kRefixCuredValueFieldNumber = 91;
  inline ::google::protobuf::int32 refixcuredvalue() const;
  inline void set_refixcuredvalue(::google::protobuf::int32 value);

  // optional int64 GuildContribute = 92 [default = -1];
  inline bool has_guildcontribute() const;
  inline void clear_guildcontribute();
  static const int kGuildContributeFieldNumber = 92;
  inline ::google::protobuf::int64 guildcontribute() const;
  inline void set_guildcontribute(::google::protobuf::int64 value);

  // optional int64 PvpMoney = 93 [default = -1];
  inline bool has_pvpmoney() const;
  inline void clear_pvpmoney();
  static const int kPvpMoneyFieldNumber = 93;
  inline ::google::protobuf::int64 pvpmoney() const;
  inline void set_pvpmoney(::google::protobuf::int64 value);

  // optional int64 GuildResource = 94 [default = -1];
  inline bool has_guildresource() const;
  inline void clear_guildresource();
  static const int kGuildResourceFieldNumber = 94;
  inline ::google::protobuf::int64 guildresource() const;
  inline void set_guildresource(::google::protobuf::int64 value);

  // optional int32 CreateRoleTime = 95 [default = 0];
  inline bool has_createroletime() const;
  inline void clear_createroletime();
  static const int kCreateRoleTimeFieldNumber = 95;
  inline ::google::protobuf::int32 createroletime() const;
  inline void set_createroletime(::google::protobuf::int32 value);

  // optional int32 UpdateRoleTime = 96 [default = 0];
  inline bool has_updateroletime() const;
  inline void clear_updateroletime();
  static const int kUpdateRoleTimeFieldNumber = 96;
  inline ::google::protobuf::int32 updateroletime() const;
  inline void set_updateroletime(::google::protobuf::int32 value);

  // optional bool FightState = 97 [default = false];
  inline bool has_fightstate() const;
  inline void clear_fightstate();
  static const int kFightStateFieldNumber = 97;
  inline bool fightstate() const;
  inline void set_fightstate(bool value);

  // repeated int32 AttackSkillList = 98;
  inline int attackskilllist_size() const;
  inline void clear_attackskilllist();
  static const int kAttackSkillListFieldNumber = 98;
  inline ::google::protobuf::int32 attackskilllist(int index) const;
  inline void set_attackskilllist(int index, ::google::protobuf::int32 value);
  inline void add_attackskilllist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attackskilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attackskilllist();

  // optional string GuildName = 99;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 99;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional bool IsAllowSelect = 100 [default = true];
  inline bool has_isallowselect() const;
  inline void clear_isallowselect();
  static const int kIsAllowSelectFieldNumber = 100;
  inline bool isallowselect() const;
  inline void set_isallowselect(bool value);

  // optional bool GoHomeState = 101 [default = false];
  inline bool has_gohomestate() const;
  inline void clear_gohomestate();
  static const int kGoHomeStateFieldNumber = 101;
  inline bool gohomestate() const;
  inline void set_gohomestate(bool value);

  // optional bool CanFight = 102 [default = true];
  inline bool has_canfight() const;
  inline void clear_canfight();
  static const int kCanFightFieldNumber = 102;
  inline bool canfight() const;
  inline void set_canfight(bool value);

  // optional int64 DoubleExp = 103 [default = -1];
  inline bool has_doubleexp() const;
  inline void clear_doubleexp();
  static const int kDoubleExpFieldNumber = 103;
  inline ::google::protobuf::int64 doubleexp() const;
  inline void set_doubleexp(::google::protobuf::int64 value);

  // optional int64 FriendPoint = 104 [default = -1];
  inline bool has_friendpoint() const;
  inline void clear_friendpoint();
  static const int kFriendPointFieldNumber = 104;
  inline ::google::protobuf::int64 friendpoint() const;
  inline void set_friendpoint(::google::protobuf::int64 value);

  // optional int64 HisMaxHonor = 105 [default = -1];
  inline bool has_hismaxhonor() const;
  inline void clear_hismaxhonor();
  static const int kHisMaxHonorFieldNumber = 105;
  inline ::google::protobuf::int64 hismaxhonor() const;
  inline void set_hismaxhonor(::google::protobuf::int64 value);

  // optional bool HurtState = 106 [default = false];
  inline bool has_hurtstate() const;
  inline void clear_hurtstate();
  static const int kHurtStateFieldNumber = 106;
  inline bool hurtstate() const;
  inline void set_hurtstate(bool value);

  // optional bool HurtFlyState = 107 [default = false];
  inline bool has_hurtflystate() const;
  inline void clear_hurtflystate();
  static const int kHurtFlyStateFieldNumber = 107;
  inline bool hurtflystate() const;
  inline void set_hurtflystate(bool value);

  // optional bool HurtDownState = 108 [default = false];
  inline bool has_hurtdownstate() const;
  inline void clear_hurtdownstate();
  static const int kHurtDownStateFieldNumber = 108;
  inline bool hurtdownstate() const;
  inline void set_hurtdownstate(bool value);

  // optional bool HurtRepelState = 109 [default = false];
  inline bool has_hurtrepelstate() const;
  inline void clear_hurtrepelstate();
  static const int kHurtRepelStateFieldNumber = 109;
  inline bool hurtrepelstate() const;
  inline void set_hurtrepelstate(bool value);

  // optional int64 TodayHornor = 111 [default = -1];
  inline bool has_todayhornor() const;
  inline void clear_todayhornor();
  static const int kTodayHornorFieldNumber = 111;
  inline ::google::protobuf::int64 todayhornor() const;
  inline void set_todayhornor(::google::protobuf::int64 value);

  // optional int32 CurProfession = 113 [default = -1];
  inline bool has_curprofession() const;
  inline void clear_curprofession();
  static const int kCurProfessionFieldNumber = 113;
  inline ::google::protobuf::int32 curprofession() const;
  inline void set_curprofession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BaseAttrUserDataV1)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_intellectual();
  inline void clear_has_intellectual();
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_spirit();
  inline void clear_has_spirit();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_physicattack();
  inline void clear_has_physicattack();
  inline void set_has_physicdefense();
  inline void clear_has_physicdefense();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_magicdefense();
  inline void clear_has_magicdefense();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_miss();
  inline void clear_has_miss();
  inline void set_has_missrate();
  inline void clear_has_missrate();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_criticalrate();
  inline void clear_has_criticalrate();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_tenacityrate();
  inline void clear_has_tenacityrate();
  inline void set_has_penet();
  inline void clear_has_penet();
  inline void set_has_penetrate();
  inline void clear_has_penetrate();
  inline void set_has_dodg();
  inline void clear_has_dodg();
  inline void set_has_dodgrate();
  inline void clear_has_dodgrate();
  inline void set_has_criticaladdition();
  inline void clear_has_criticaladdition();
  inline void set_has_criticaladditionrate();
  inline void clear_has_criticaladditionrate();
  inline void set_has_criticalimmune();
  inline void clear_has_criticalimmune();
  inline void set_has_criticalimmunerate();
  inline void clear_has_criticalimmunerate();
  inline void set_has_misslevel();
  inline void clear_has_misslevel();
  inline void set_has_criticallevel();
  inline void clear_has_criticallevel();
  inline void set_has_dodglevel();
  inline void clear_has_dodglevel();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_dizzystate();
  inline void clear_has_dizzystate();
  inline void set_has_godstate();
  inline void clear_has_godstate();
  inline void set_has_cantmovestate();
  inline void clear_has_cantmovestate();
  inline void set_has_physicaddition();
  inline void clear_has_physicaddition();
  inline void set_has_magicaddition();
  inline void clear_has_magicaddition();
  inline void set_has_physicoppose();
  inline void clear_has_physicoppose();
  inline void set_has_magicoppose();
  inline void clear_has_magicoppose();
  inline void set_has_accumulateskienergy();
  inline void clear_has_accumulateskienergy();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_ownerobjid();
  inline void clear_has_ownerobjid();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_silvermoney();
  inline void clear_has_silvermoney();
  inline void set_has_goldmoney();
  inline void clear_has_goldmoney();
  inline void set_has_diamondmoney();
  inline void clear_has_diamondmoney();
  inline void set_has_bindingdiamondmoney();
  inline void clear_has_bindingdiamondmoney();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_honormoney();
  inline void clear_has_honormoney();
  inline void set_has_resourcepoolhp();
  inline void clear_has_resourcepoolhp();
  inline void set_has_attackadd();
  inline void clear_has_attackadd();
  inline void set_has_injuryadd();
  inline void clear_has_injuryadd();
  inline void set_has_frozenstate();
  inline void clear_has_frozenstate();
  inline void set_has_silentstate();
  inline void clear_has_silentstate();
  inline void set_has_guildcontributehistorymax();
  inline void clear_has_guildcontributehistorymax();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_treasurehair();
  inline void clear_has_treasurehair();
  inline void set_has_treasurehead();
  inline void clear_has_treasurehead();
  inline void set_has_treasurebody();
  inline void clear_has_treasurebody();
  inline void set_has_treasureweapon();
  inline void clear_has_treasureweapon();
  inline void set_has_treasurewing();
  inline void clear_has_treasurewing();
  inline void set_has_guildguid();
  inline void clear_has_guildguid();
  inline void set_has_treasureriding();
  inline void clear_has_treasureriding();
  inline void set_has_vechicleid();
  inline void clear_has_vechicleid();
  inline void set_has_animationstate();
  inline void clear_has_animationstate();
  inline void set_has_refixdmgrate();
  inline void clear_has_refixdmgrate();
  inline void set_has_refixdmgvalue();
  inline void clear_has_refixdmgvalue();
  inline void set_has_refixhurtrate();
  inline void clear_has_refixhurtrate();
  inline void set_has_refixhurtvalue();
  inline void clear_has_refixhurtvalue();
  inline void set_has_refixhealrate();
  inline void clear_has_refixhealrate();
  inline void set_has_refixhealvalue();
  inline void clear_has_refixhealvalue();
  inline void set_has_refixcuredrate();
  inline void clear_has_refixcuredrate();
  inline void set_has_refixcuredvalue();
  inline void clear_has_refixcuredvalue();
  inline void set_has_guildcontribute();
  inline void clear_has_guildcontribute();
  inline void set_has_pvpmoney();
  inline void clear_has_pvpmoney();
  inline void set_has_guildresource();
  inline void clear_has_guildresource();
  inline void set_has_createroletime();
  inline void clear_has_createroletime();
  inline void set_has_updateroletime();
  inline void clear_has_updateroletime();
  inline void set_has_fightstate();
  inline void clear_has_fightstate();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_isallowselect();
  inline void clear_has_isallowselect();
  inline void set_has_gohomestate();
  inline void clear_has_gohomestate();
  inline void set_has_canfight();
  inline void clear_has_canfight();
  inline void set_has_doubleexp();
  inline void clear_has_doubleexp();
  inline void set_has_friendpoint();
  inline void clear_has_friendpoint();
  inline void set_has_hismaxhonor();
  inline void clear_has_hismaxhonor();
  inline void set_has_hurtstate();
  inline void clear_has_hurtstate();
  inline void set_has_hurtflystate();
  inline void clear_has_hurtflystate();
  inline void set_has_hurtdownstate();
  inline void clear_has_hurtdownstate();
  inline void set_has_hurtrepelstate();
  inline void clear_has_hurtrepelstate();
  inline void set_has_todayhornor();
  inline void clear_has_todayhornor();
  inline void set_has_curprofession();
  inline void clear_has_curprofession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 servertime_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 intellectual_;
  ::google::protobuf::int32 endurance_;
  ::google::protobuf::int32 spirit_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 physicattack_;
  ::google::protobuf::int32 physicdefense_;
  ::google::protobuf::int32 magicattack_;
  ::google::protobuf::int32 magicdefense_;
  ::google::protobuf::int32 hit_;
  float hitrate_;
  ::google::protobuf::int32 miss_;
  float missrate_;
  ::google::protobuf::int32 critical_;
  float criticalrate_;
  ::google::protobuf::int32 tenacity_;
  float tenacityrate_;
  ::google::protobuf::int32 penet_;
  float penetrate_;
  ::google::protobuf::int32 dodg_;
  float dodgrate_;
  ::google::protobuf::int32 criticaladdition_;
  float criticaladditionrate_;
  ::google::protobuf::int32 criticalimmune_;
  float criticalimmunerate_;
  ::google::protobuf::int32 misslevel_;
  ::google::protobuf::int32 criticallevel_;
  ::google::protobuf::int32 dodglevel_;
  float movespeed_;
  ::google::protobuf::int32 dizzystate_;
  ::google::protobuf::int32 cantmovestate_;
  float physicaddition_;
  float magicaddition_;
  float physicoppose_;
  float magicoppose_;
  float accumulateskienergy_;
  ::std::string* nickname_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 ownerobjid_;
  ::google::protobuf::int64 silvermoney_;
  ::google::protobuf::int64 goldmoney_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::int64 diamondmoney_;
  ::google::protobuf::int64 bindingdiamondmoney_;
  ::google::protobuf::int64 energy_;
  ::google::protobuf::int64 guildmoney_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skilllist_;
  ::google::protobuf::int64 honormoney_;
  ::google::protobuf::int64 resourcepoolhp_;
  ::google::protobuf::int32 attackadd_;
  ::google::protobuf::int32 injuryadd_;
  ::google::protobuf::int32 frozenstate_;
  ::google::protobuf::int32 silentstate_;
  ::google::protobuf::int64 guildcontributehistorymax_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::int32 treasurehair_;
  ::google::protobuf::int32 treasurehead_;
  ::google::protobuf::int32 treasurebody_;
  ::google::protobuf::int32 treasureweapon_;
  ::google::protobuf::uint64 guildguid_;
  ::google::protobuf::int32 treasurewing_;
  ::google::protobuf::int32 treasureriding_;
  bool godstate_;
  bool animationstate_;
  bool fightstate_;
  bool isallowselect_;
  ::google::protobuf::int32 vechicleid_;
  float refixdmgrate_;
  ::google::protobuf::int32 refixdmgvalue_;
  float refixhurtrate_;
  ::google::protobuf::int32 refixhurtvalue_;
  float refixhealrate_;
  ::google::protobuf::int32 refixhealvalue_;
  float refixcuredrate_;
  ::google::protobuf::int32 refixcuredvalue_;
  ::google::protobuf::int64 guildcontribute_;
  ::google::protobuf::int64 pvpmoney_;
  ::google::protobuf::int64 guildresource_;
  ::google::protobuf::int32 createroletime_;
  ::google::protobuf::int32 updateroletime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attackskilllist_;
  ::std::string* guildname_;
  ::google::protobuf::int64 doubleexp_;
  ::google::protobuf::int64 friendpoint_;
  ::google::protobuf::int64 hismaxhonor_;
  bool gohomestate_;
  bool canfight_;
  bool hurtstate_;
  bool hurtflystate_;
  bool hurtdownstate_;
  bool hurtrepelstate_;
  ::google::protobuf::int64 todayhornor_;
  ::google::protobuf::int32 curprofession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(102 + 31) / 32];

  friend void  protobuf_AddDesc_BaseAttrV1Data_2eproto();
  friend void protobuf_AssignDesc_BaseAttrV1Data_2eproto();
  friend void protobuf_ShutdownFile_BaseAttrV1Data_2eproto();

  void InitAsDefaultInstance();
  static BaseAttrUserDataV1* default_instance_;
};
// -------------------------------------------------------------------

class BaseAttrObjDataV1 : public ::google::protobuf::Message {
 public:
  BaseAttrObjDataV1();
  virtual ~BaseAttrObjDataV1();

  BaseAttrObjDataV1(const BaseAttrObjDataV1& from);

  inline BaseAttrObjDataV1& operator=(const BaseAttrObjDataV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseAttrObjDataV1& default_instance();

  void Swap(BaseAttrObjDataV1* other);

  // implements Message ----------------------------------------------

  BaseAttrObjDataV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseAttrObjDataV1& from);
  void MergeFrom(const BaseAttrObjDataV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ObjType = 1 [default = -1];
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 1;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // optional int32 ConfigId = 2 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 State = 3 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 OwnerObjId = 4 [default = -1];
  inline bool has_ownerobjid() const;
  inline void clear_ownerobjid();
  static const int kOwnerObjIdFieldNumber = 4;
  inline ::google::protobuf::int32 ownerobjid() const;
  inline void set_ownerobjid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BaseAttrObjDataV1)
 private:
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_ownerobjid();
  inline void clear_has_ownerobjid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 ownerobjid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BaseAttrV1Data_2eproto();
  friend void protobuf_AssignDesc_BaseAttrV1Data_2eproto();
  friend void protobuf_ShutdownFile_BaseAttrV1Data_2eproto();

  void InitAsDefaultInstance();
  static BaseAttrObjDataV1* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseAttrUserDataV1

// optional int32 Exp = 1 [default = 0];
inline bool BaseAttrUserDataV1::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseAttrUserDataV1::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseAttrUserDataV1::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseAttrUserDataV1::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::exp() const {
  return exp_;
}
inline void BaseAttrUserDataV1::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 Level = 3 [default = 0];
inline bool BaseAttrUserDataV1::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseAttrUserDataV1::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseAttrUserDataV1::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseAttrUserDataV1::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::level() const {
  return level_;
}
inline void BaseAttrUserDataV1::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 ServerTime = 4 [default = -1];
inline bool BaseAttrUserDataV1::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseAttrUserDataV1::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseAttrUserDataV1::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseAttrUserDataV1::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(-1);
  clear_has_servertime();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::servertime() const {
  return servertime_;
}
inline void BaseAttrUserDataV1::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional uint64 RoleId = 5 [default = 0];
inline bool BaseAttrUserDataV1::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseAttrUserDataV1::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseAttrUserDataV1::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseAttrUserDataV1::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 BaseAttrUserDataV1::roleid() const {
  return roleid_;
}
inline void BaseAttrUserDataV1::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 Strength = 7 [default = 0];
inline bool BaseAttrUserDataV1::has_strength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseAttrUserDataV1::set_has_strength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseAttrUserDataV1::clear_has_strength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseAttrUserDataV1::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::strength() const {
  return strength_;
}
inline void BaseAttrUserDataV1::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// optional int32 Agility = 8 [default = 0];
inline bool BaseAttrUserDataV1::has_agility() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseAttrUserDataV1::set_has_agility() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseAttrUserDataV1::clear_has_agility() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseAttrUserDataV1::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::agility() const {
  return agility_;
}
inline void BaseAttrUserDataV1::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// optional int32 Intellectual = 9 [default = 0];
inline bool BaseAttrUserDataV1::has_intellectual() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseAttrUserDataV1::set_has_intellectual() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseAttrUserDataV1::clear_has_intellectual() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseAttrUserDataV1::clear_intellectual() {
  intellectual_ = 0;
  clear_has_intellectual();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::intellectual() const {
  return intellectual_;
}
inline void BaseAttrUserDataV1::set_intellectual(::google::protobuf::int32 value) {
  set_has_intellectual();
  intellectual_ = value;
}

// optional int32 Endurance = 10 [default = 0];
inline bool BaseAttrUserDataV1::has_endurance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseAttrUserDataV1::set_has_endurance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseAttrUserDataV1::clear_has_endurance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseAttrUserDataV1::clear_endurance() {
  endurance_ = 0;
  clear_has_endurance();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::endurance() const {
  return endurance_;
}
inline void BaseAttrUserDataV1::set_endurance(::google::protobuf::int32 value) {
  set_has_endurance();
  endurance_ = value;
}

// optional int32 Spirit = 11 [default = 0];
inline bool BaseAttrUserDataV1::has_spirit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseAttrUserDataV1::set_has_spirit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseAttrUserDataV1::clear_has_spirit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseAttrUserDataV1::clear_spirit() {
  spirit_ = 0;
  clear_has_spirit();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::spirit() const {
  return spirit_;
}
inline void BaseAttrUserDataV1::set_spirit(::google::protobuf::int32 value) {
  set_has_spirit();
  spirit_ = value;
}

// optional int32 Hp = 12 [default = 0];
inline bool BaseAttrUserDataV1::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseAttrUserDataV1::clear_has_hp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseAttrUserDataV1::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::hp() const {
  return hp_;
}
inline void BaseAttrUserDataV1::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 MaxHp = 14 [default = 0];
inline bool BaseAttrUserDataV1::has_maxhp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseAttrUserDataV1::set_has_maxhp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseAttrUserDataV1::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseAttrUserDataV1::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::maxhp() const {
  return maxhp_;
}
inline void BaseAttrUserDataV1::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional int32 PhysicAttack = 15 [default = 0];
inline bool BaseAttrUserDataV1::has_physicattack() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseAttrUserDataV1::set_has_physicattack() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseAttrUserDataV1::clear_has_physicattack() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseAttrUserDataV1::clear_physicattack() {
  physicattack_ = 0;
  clear_has_physicattack();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::physicattack() const {
  return physicattack_;
}
inline void BaseAttrUserDataV1::set_physicattack(::google::protobuf::int32 value) {
  set_has_physicattack();
  physicattack_ = value;
}

// optional int32 PhysicDefense = 16 [default = 0];
inline bool BaseAttrUserDataV1::has_physicdefense() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_physicdefense() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BaseAttrUserDataV1::clear_has_physicdefense() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BaseAttrUserDataV1::clear_physicdefense() {
  physicdefense_ = 0;
  clear_has_physicdefense();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::physicdefense() const {
  return physicdefense_;
}
inline void BaseAttrUserDataV1::set_physicdefense(::google::protobuf::int32 value) {
  set_has_physicdefense();
  physicdefense_ = value;
}

// optional int32 MagicAttack = 19 [default = 0];
inline bool BaseAttrUserDataV1::has_magicattack() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_magicattack() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BaseAttrUserDataV1::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BaseAttrUserDataV1::clear_magicattack() {
  magicattack_ = 0;
  clear_has_magicattack();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::magicattack() const {
  return magicattack_;
}
inline void BaseAttrUserDataV1::set_magicattack(::google::protobuf::int32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// optional int32 MagicDefense = 20 [default = 0];
inline bool BaseAttrUserDataV1::has_magicdefense() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_magicdefense() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BaseAttrUserDataV1::clear_has_magicdefense() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BaseAttrUserDataV1::clear_magicdefense() {
  magicdefense_ = 0;
  clear_has_magicdefense();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::magicdefense() const {
  return magicdefense_;
}
inline void BaseAttrUserDataV1::set_magicdefense(::google::protobuf::int32 value) {
  set_has_magicdefense();
  magicdefense_ = value;
}

// optional int32 Hit = 21 [default = 0];
inline bool BaseAttrUserDataV1::has_hit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BaseAttrUserDataV1::clear_has_hit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BaseAttrUserDataV1::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::hit() const {
  return hit_;
}
inline void BaseAttrUserDataV1::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional float HitRate = 22 [default = 0];
inline bool BaseAttrUserDataV1::has_hitrate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hitrate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BaseAttrUserDataV1::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BaseAttrUserDataV1::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline float BaseAttrUserDataV1::hitrate() const {
  return hitrate_;
}
inline void BaseAttrUserDataV1::set_hitrate(float value) {
  set_has_hitrate();
  hitrate_ = value;
}

// optional int32 Miss = 23 [default = 0];
inline bool BaseAttrUserDataV1::has_miss() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_miss() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BaseAttrUserDataV1::clear_has_miss() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BaseAttrUserDataV1::clear_miss() {
  miss_ = 0;
  clear_has_miss();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::miss() const {
  return miss_;
}
inline void BaseAttrUserDataV1::set_miss(::google::protobuf::int32 value) {
  set_has_miss();
  miss_ = value;
}

// optional float MissRate = 24 [default = 0];
inline bool BaseAttrUserDataV1::has_missrate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_missrate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BaseAttrUserDataV1::clear_has_missrate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BaseAttrUserDataV1::clear_missrate() {
  missrate_ = 0;
  clear_has_missrate();
}
inline float BaseAttrUserDataV1::missrate() const {
  return missrate_;
}
inline void BaseAttrUserDataV1::set_missrate(float value) {
  set_has_missrate();
  missrate_ = value;
}

// optional int32 Critical = 25 [default = 0];
inline bool BaseAttrUserDataV1::has_critical() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_critical() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BaseAttrUserDataV1::clear_has_critical() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BaseAttrUserDataV1::clear_critical() {
  critical_ = 0;
  clear_has_critical();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::critical() const {
  return critical_;
}
inline void BaseAttrUserDataV1::set_critical(::google::protobuf::int32 value) {
  set_has_critical();
  critical_ = value;
}

// optional float CriticalRate = 26 [default = 0];
inline bool BaseAttrUserDataV1::has_criticalrate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticalrate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BaseAttrUserDataV1::clear_has_criticalrate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BaseAttrUserDataV1::clear_criticalrate() {
  criticalrate_ = 0;
  clear_has_criticalrate();
}
inline float BaseAttrUserDataV1::criticalrate() const {
  return criticalrate_;
}
inline void BaseAttrUserDataV1::set_criticalrate(float value) {
  set_has_criticalrate();
  criticalrate_ = value;
}

// optional int32 Tenacity = 27 [default = 0];
inline bool BaseAttrUserDataV1::has_tenacity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_tenacity() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BaseAttrUserDataV1::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BaseAttrUserDataV1::clear_tenacity() {
  tenacity_ = 0;
  clear_has_tenacity();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::tenacity() const {
  return tenacity_;
}
inline void BaseAttrUserDataV1::set_tenacity(::google::protobuf::int32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// optional float TenacityRate = 28 [default = 0];
inline bool BaseAttrUserDataV1::has_tenacityrate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_tenacityrate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BaseAttrUserDataV1::clear_has_tenacityrate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BaseAttrUserDataV1::clear_tenacityrate() {
  tenacityrate_ = 0;
  clear_has_tenacityrate();
}
inline float BaseAttrUserDataV1::tenacityrate() const {
  return tenacityrate_;
}
inline void BaseAttrUserDataV1::set_tenacityrate(float value) {
  set_has_tenacityrate();
  tenacityrate_ = value;
}

// optional int32 Penet = 29 [default = 0];
inline bool BaseAttrUserDataV1::has_penet() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_penet() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BaseAttrUserDataV1::clear_has_penet() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BaseAttrUserDataV1::clear_penet() {
  penet_ = 0;
  clear_has_penet();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::penet() const {
  return penet_;
}
inline void BaseAttrUserDataV1::set_penet(::google::protobuf::int32 value) {
  set_has_penet();
  penet_ = value;
}

// optional float PenetRate = 30 [default = 0];
inline bool BaseAttrUserDataV1::has_penetrate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_penetrate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BaseAttrUserDataV1::clear_has_penetrate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BaseAttrUserDataV1::clear_penetrate() {
  penetrate_ = 0;
  clear_has_penetrate();
}
inline float BaseAttrUserDataV1::penetrate() const {
  return penetrate_;
}
inline void BaseAttrUserDataV1::set_penetrate(float value) {
  set_has_penetrate();
  penetrate_ = value;
}

// optional int32 Dodg = 31 [default = 0];
inline bool BaseAttrUserDataV1::has_dodg() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_dodg() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BaseAttrUserDataV1::clear_has_dodg() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BaseAttrUserDataV1::clear_dodg() {
  dodg_ = 0;
  clear_has_dodg();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::dodg() const {
  return dodg_;
}
inline void BaseAttrUserDataV1::set_dodg(::google::protobuf::int32 value) {
  set_has_dodg();
  dodg_ = value;
}

// optional float DodgRate = 32 [default = 0];
inline bool BaseAttrUserDataV1::has_dodgrate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_dodgrate() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BaseAttrUserDataV1::clear_has_dodgrate() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BaseAttrUserDataV1::clear_dodgrate() {
  dodgrate_ = 0;
  clear_has_dodgrate();
}
inline float BaseAttrUserDataV1::dodgrate() const {
  return dodgrate_;
}
inline void BaseAttrUserDataV1::set_dodgrate(float value) {
  set_has_dodgrate();
  dodgrate_ = value;
}

// optional int32 CriticalAddition = 33 [default = 0];
inline bool BaseAttrUserDataV1::has_criticaladdition() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticaladdition() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BaseAttrUserDataV1::clear_has_criticaladdition() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BaseAttrUserDataV1::clear_criticaladdition() {
  criticaladdition_ = 0;
  clear_has_criticaladdition();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::criticaladdition() const {
  return criticaladdition_;
}
inline void BaseAttrUserDataV1::set_criticaladdition(::google::protobuf::int32 value) {
  set_has_criticaladdition();
  criticaladdition_ = value;
}

// optional float CriticalAdditionRate = 34 [default = 0];
inline bool BaseAttrUserDataV1::has_criticaladditionrate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticaladditionrate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BaseAttrUserDataV1::clear_has_criticaladditionrate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BaseAttrUserDataV1::clear_criticaladditionrate() {
  criticaladditionrate_ = 0;
  clear_has_criticaladditionrate();
}
inline float BaseAttrUserDataV1::criticaladditionrate() const {
  return criticaladditionrate_;
}
inline void BaseAttrUserDataV1::set_criticaladditionrate(float value) {
  set_has_criticaladditionrate();
  criticaladditionrate_ = value;
}

// optional int32 CriticalImmune = 35 [default = 0];
inline bool BaseAttrUserDataV1::has_criticalimmune() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticalimmune() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BaseAttrUserDataV1::clear_has_criticalimmune() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BaseAttrUserDataV1::clear_criticalimmune() {
  criticalimmune_ = 0;
  clear_has_criticalimmune();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::criticalimmune() const {
  return criticalimmune_;
}
inline void BaseAttrUserDataV1::set_criticalimmune(::google::protobuf::int32 value) {
  set_has_criticalimmune();
  criticalimmune_ = value;
}

// optional float CriticalImmuneRate = 36 [default = 0];
inline bool BaseAttrUserDataV1::has_criticalimmunerate() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticalimmunerate() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BaseAttrUserDataV1::clear_has_criticalimmunerate() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BaseAttrUserDataV1::clear_criticalimmunerate() {
  criticalimmunerate_ = 0;
  clear_has_criticalimmunerate();
}
inline float BaseAttrUserDataV1::criticalimmunerate() const {
  return criticalimmunerate_;
}
inline void BaseAttrUserDataV1::set_criticalimmunerate(float value) {
  set_has_criticalimmunerate();
  criticalimmunerate_ = value;
}

// optional int32 MissLevel = 37 [default = 0];
inline bool BaseAttrUserDataV1::has_misslevel() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_misslevel() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BaseAttrUserDataV1::clear_has_misslevel() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BaseAttrUserDataV1::clear_misslevel() {
  misslevel_ = 0;
  clear_has_misslevel();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::misslevel() const {
  return misslevel_;
}
inline void BaseAttrUserDataV1::set_misslevel(::google::protobuf::int32 value) {
  set_has_misslevel();
  misslevel_ = value;
}

// optional int32 CriticalLevel = 38 [default = 0];
inline bool BaseAttrUserDataV1::has_criticallevel() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BaseAttrUserDataV1::set_has_criticallevel() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BaseAttrUserDataV1::clear_has_criticallevel() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BaseAttrUserDataV1::clear_criticallevel() {
  criticallevel_ = 0;
  clear_has_criticallevel();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::criticallevel() const {
  return criticallevel_;
}
inline void BaseAttrUserDataV1::set_criticallevel(::google::protobuf::int32 value) {
  set_has_criticallevel();
  criticallevel_ = value;
}

// optional int32 DodgLevel = 39 [default = 0];
inline bool BaseAttrUserDataV1::has_dodglevel() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BaseAttrUserDataV1::set_has_dodglevel() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BaseAttrUserDataV1::clear_has_dodglevel() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BaseAttrUserDataV1::clear_dodglevel() {
  dodglevel_ = 0;
  clear_has_dodglevel();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::dodglevel() const {
  return dodglevel_;
}
inline void BaseAttrUserDataV1::set_dodglevel(::google::protobuf::int32 value) {
  set_has_dodglevel();
  dodglevel_ = value;
}

// optional float MoveSpeed = 40 [default = 0];
inline bool BaseAttrUserDataV1::has_movespeed() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BaseAttrUserDataV1::set_has_movespeed() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BaseAttrUserDataV1::clear_has_movespeed() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BaseAttrUserDataV1::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline float BaseAttrUserDataV1::movespeed() const {
  return movespeed_;
}
inline void BaseAttrUserDataV1::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
}

// optional int32 DizzyState = 41 [default = 0];
inline bool BaseAttrUserDataV1::has_dizzystate() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BaseAttrUserDataV1::set_has_dizzystate() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BaseAttrUserDataV1::clear_has_dizzystate() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BaseAttrUserDataV1::clear_dizzystate() {
  dizzystate_ = 0;
  clear_has_dizzystate();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::dizzystate() const {
  return dizzystate_;
}
inline void BaseAttrUserDataV1::set_dizzystate(::google::protobuf::int32 value) {
  set_has_dizzystate();
  dizzystate_ = value;
}

// optional bool GodState = 42 [default = false];
inline bool BaseAttrUserDataV1::has_godstate() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BaseAttrUserDataV1::set_has_godstate() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BaseAttrUserDataV1::clear_has_godstate() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BaseAttrUserDataV1::clear_godstate() {
  godstate_ = false;
  clear_has_godstate();
}
inline bool BaseAttrUserDataV1::godstate() const {
  return godstate_;
}
inline void BaseAttrUserDataV1::set_godstate(bool value) {
  set_has_godstate();
  godstate_ = value;
}

// optional int32 CantMoveState = 43 [default = 0];
inline bool BaseAttrUserDataV1::has_cantmovestate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BaseAttrUserDataV1::set_has_cantmovestate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BaseAttrUserDataV1::clear_has_cantmovestate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BaseAttrUserDataV1::clear_cantmovestate() {
  cantmovestate_ = 0;
  clear_has_cantmovestate();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::cantmovestate() const {
  return cantmovestate_;
}
inline void BaseAttrUserDataV1::set_cantmovestate(::google::protobuf::int32 value) {
  set_has_cantmovestate();
  cantmovestate_ = value;
}

// optional float PhysicAddition = 45 [default = 0];
inline bool BaseAttrUserDataV1::has_physicaddition() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BaseAttrUserDataV1::set_has_physicaddition() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BaseAttrUserDataV1::clear_has_physicaddition() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BaseAttrUserDataV1::clear_physicaddition() {
  physicaddition_ = 0;
  clear_has_physicaddition();
}
inline float BaseAttrUserDataV1::physicaddition() const {
  return physicaddition_;
}
inline void BaseAttrUserDataV1::set_physicaddition(float value) {
  set_has_physicaddition();
  physicaddition_ = value;
}

// optional float MagicAddition = 46 [default = 0];
inline bool BaseAttrUserDataV1::has_magicaddition() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BaseAttrUserDataV1::set_has_magicaddition() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BaseAttrUserDataV1::clear_has_magicaddition() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BaseAttrUserDataV1::clear_magicaddition() {
  magicaddition_ = 0;
  clear_has_magicaddition();
}
inline float BaseAttrUserDataV1::magicaddition() const {
  return magicaddition_;
}
inline void BaseAttrUserDataV1::set_magicaddition(float value) {
  set_has_magicaddition();
  magicaddition_ = value;
}

// optional float PhysicOppose = 47 [default = 0];
inline bool BaseAttrUserDataV1::has_physicoppose() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BaseAttrUserDataV1::set_has_physicoppose() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BaseAttrUserDataV1::clear_has_physicoppose() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BaseAttrUserDataV1::clear_physicoppose() {
  physicoppose_ = 0;
  clear_has_physicoppose();
}
inline float BaseAttrUserDataV1::physicoppose() const {
  return physicoppose_;
}
inline void BaseAttrUserDataV1::set_physicoppose(float value) {
  set_has_physicoppose();
  physicoppose_ = value;
}

// optional float MagicOppose = 48 [default = 0];
inline bool BaseAttrUserDataV1::has_magicoppose() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BaseAttrUserDataV1::set_has_magicoppose() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BaseAttrUserDataV1::clear_has_magicoppose() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BaseAttrUserDataV1::clear_magicoppose() {
  magicoppose_ = 0;
  clear_has_magicoppose();
}
inline float BaseAttrUserDataV1::magicoppose() const {
  return magicoppose_;
}
inline void BaseAttrUserDataV1::set_magicoppose(float value) {
  set_has_magicoppose();
  magicoppose_ = value;
}

// optional float AccumulateSkiEnergy = 50 [default = 0];
inline bool BaseAttrUserDataV1::has_accumulateskienergy() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BaseAttrUserDataV1::set_has_accumulateskienergy() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BaseAttrUserDataV1::clear_has_accumulateskienergy() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BaseAttrUserDataV1::clear_accumulateskienergy() {
  accumulateskienergy_ = 0;
  clear_has_accumulateskienergy();
}
inline float BaseAttrUserDataV1::accumulateskienergy() const {
  return accumulateskienergy_;
}
inline void BaseAttrUserDataV1::set_accumulateskienergy(float value) {
  set_has_accumulateskienergy();
  accumulateskienergy_ = value;
}

// optional string NickName = 51;
inline bool BaseAttrUserDataV1::has_nickname() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BaseAttrUserDataV1::set_has_nickname() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BaseAttrUserDataV1::clear_has_nickname() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BaseAttrUserDataV1::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& BaseAttrUserDataV1::nickname() const {
  return *nickname_;
}
inline void BaseAttrUserDataV1::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void BaseAttrUserDataV1::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void BaseAttrUserDataV1::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseAttrUserDataV1::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* BaseAttrUserDataV1::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseAttrUserDataV1::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigId = 52 [default = -1];
inline bool BaseAttrUserDataV1::has_configid() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_configid() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BaseAttrUserDataV1::clear_has_configid() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BaseAttrUserDataV1::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::configid() const {
  return configid_;
}
inline void BaseAttrUserDataV1::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 ObjType = 53 [default = -1];
inline bool BaseAttrUserDataV1::has_objtype() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_objtype() {
  _has_bits_[1] |= 0x00002000u;
}
inline void BaseAttrUserDataV1::clear_has_objtype() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void BaseAttrUserDataV1::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::objtype() const {
  return objtype_;
}
inline void BaseAttrUserDataV1::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// optional int32 State = 54 [default = -1];
inline bool BaseAttrUserDataV1::has_state() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_state() {
  _has_bits_[1] |= 0x00004000u;
}
inline void BaseAttrUserDataV1::clear_has_state() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void BaseAttrUserDataV1::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::state() const {
  return state_;
}
inline void BaseAttrUserDataV1::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 OwnerObjId = 55 [default = -1];
inline bool BaseAttrUserDataV1::has_ownerobjid() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_ownerobjid() {
  _has_bits_[1] |= 0x00008000u;
}
inline void BaseAttrUserDataV1::clear_has_ownerobjid() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void BaseAttrUserDataV1::clear_ownerobjid() {
  ownerobjid_ = -1;
  clear_has_ownerobjid();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::ownerobjid() const {
  return ownerobjid_;
}
inline void BaseAttrUserDataV1::set_ownerobjid(::google::protobuf::int32 value) {
  set_has_ownerobjid();
  ownerobjid_ = value;
}

// optional int32 Camp = 56 [default = -1];
inline bool BaseAttrUserDataV1::has_camp() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_camp() {
  _has_bits_[1] |= 0x00010000u;
}
inline void BaseAttrUserDataV1::clear_has_camp() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void BaseAttrUserDataV1::clear_camp() {
  camp_ = -1;
  clear_has_camp();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::camp() const {
  return camp_;
}
inline void BaseAttrUserDataV1::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int64 SilverMoney = 57 [default = 0];
inline bool BaseAttrUserDataV1::has_silvermoney() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_silvermoney() {
  _has_bits_[1] |= 0x00020000u;
}
inline void BaseAttrUserDataV1::clear_has_silvermoney() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void BaseAttrUserDataV1::clear_silvermoney() {
  silvermoney_ = GOOGLE_LONGLONG(0);
  clear_has_silvermoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::silvermoney() const {
  return silvermoney_;
}
inline void BaseAttrUserDataV1::set_silvermoney(::google::protobuf::int64 value) {
  set_has_silvermoney();
  silvermoney_ = value;
}

// optional int64 GoldMoney = 58 [default = 0];
inline bool BaseAttrUserDataV1::has_goldmoney() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_goldmoney() {
  _has_bits_[1] |= 0x00040000u;
}
inline void BaseAttrUserDataV1::clear_has_goldmoney() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void BaseAttrUserDataV1::clear_goldmoney() {
  goldmoney_ = GOOGLE_LONGLONG(0);
  clear_has_goldmoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::goldmoney() const {
  return goldmoney_;
}
inline void BaseAttrUserDataV1::set_goldmoney(::google::protobuf::int64 value) {
  set_has_goldmoney();
  goldmoney_ = value;
}

// optional int64 DiamondMoney = 59 [default = 0];
inline bool BaseAttrUserDataV1::has_diamondmoney() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_diamondmoney() {
  _has_bits_[1] |= 0x00080000u;
}
inline void BaseAttrUserDataV1::clear_has_diamondmoney() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void BaseAttrUserDataV1::clear_diamondmoney() {
  diamondmoney_ = GOOGLE_LONGLONG(0);
  clear_has_diamondmoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::diamondmoney() const {
  return diamondmoney_;
}
inline void BaseAttrUserDataV1::set_diamondmoney(::google::protobuf::int64 value) {
  set_has_diamondmoney();
  diamondmoney_ = value;
}

// optional int64 BindingDiamondMoney = 60 [default = 0];
inline bool BaseAttrUserDataV1::has_bindingdiamondmoney() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_bindingdiamondmoney() {
  _has_bits_[1] |= 0x00100000u;
}
inline void BaseAttrUserDataV1::clear_has_bindingdiamondmoney() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void BaseAttrUserDataV1::clear_bindingdiamondmoney() {
  bindingdiamondmoney_ = GOOGLE_LONGLONG(0);
  clear_has_bindingdiamondmoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::bindingdiamondmoney() const {
  return bindingdiamondmoney_;
}
inline void BaseAttrUserDataV1::set_bindingdiamondmoney(::google::protobuf::int64 value) {
  set_has_bindingdiamondmoney();
  bindingdiamondmoney_ = value;
}

// optional int32 BattleScore = 61 [default = -1];
inline bool BaseAttrUserDataV1::has_battlescore() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_battlescore() {
  _has_bits_[1] |= 0x00200000u;
}
inline void BaseAttrUserDataV1::clear_has_battlescore() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void BaseAttrUserDataV1::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::battlescore() const {
  return battlescore_;
}
inline void BaseAttrUserDataV1::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// optional int64 Energy = 62 [default = -1];
inline bool BaseAttrUserDataV1::has_energy() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_energy() {
  _has_bits_[1] |= 0x00400000u;
}
inline void BaseAttrUserDataV1::clear_has_energy() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void BaseAttrUserDataV1::clear_energy() {
  energy_ = GOOGLE_LONGLONG(-1);
  clear_has_energy();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::energy() const {
  return energy_;
}
inline void BaseAttrUserDataV1::set_energy(::google::protobuf::int64 value) {
  set_has_energy();
  energy_ = value;
}

// optional int64 GuildMoney = 63 [default = -1];
inline bool BaseAttrUserDataV1::has_guildmoney() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildmoney() {
  _has_bits_[1] |= 0x00800000u;
}
inline void BaseAttrUserDataV1::clear_has_guildmoney() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void BaseAttrUserDataV1::clear_guildmoney() {
  guildmoney_ = GOOGLE_LONGLONG(-1);
  clear_has_guildmoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::guildmoney() const {
  return guildmoney_;
}
inline void BaseAttrUserDataV1::set_guildmoney(::google::protobuf::int64 value) {
  set_has_guildmoney();
  guildmoney_ = value;
}

// repeated int32 SkillList = 64;
inline int BaseAttrUserDataV1::skilllist_size() const {
  return skilllist_.size();
}
inline void BaseAttrUserDataV1::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void BaseAttrUserDataV1::set_skilllist(int index, ::google::protobuf::int32 value) {
  skilllist_.Set(index, value);
}
inline void BaseAttrUserDataV1::add_skilllist(::google::protobuf::int32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseAttrUserDataV1::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseAttrUserDataV1::mutable_skilllist() {
  return &skilllist_;
}

// optional int64 HonorMoney = 65 [default = -1];
inline bool BaseAttrUserDataV1::has_honormoney() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_honormoney() {
  _has_bits_[1] |= 0x02000000u;
}
inline void BaseAttrUserDataV1::clear_has_honormoney() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void BaseAttrUserDataV1::clear_honormoney() {
  honormoney_ = GOOGLE_LONGLONG(-1);
  clear_has_honormoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::honormoney() const {
  return honormoney_;
}
inline void BaseAttrUserDataV1::set_honormoney(::google::protobuf::int64 value) {
  set_has_honormoney();
  honormoney_ = value;
}

// optional int64 ResourcePoolHp = 66 [default = -1];
inline bool BaseAttrUserDataV1::has_resourcepoolhp() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_resourcepoolhp() {
  _has_bits_[1] |= 0x04000000u;
}
inline void BaseAttrUserDataV1::clear_has_resourcepoolhp() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void BaseAttrUserDataV1::clear_resourcepoolhp() {
  resourcepoolhp_ = GOOGLE_LONGLONG(-1);
  clear_has_resourcepoolhp();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::resourcepoolhp() const {
  return resourcepoolhp_;
}
inline void BaseAttrUserDataV1::set_resourcepoolhp(::google::protobuf::int64 value) {
  set_has_resourcepoolhp();
  resourcepoolhp_ = value;
}

// optional int32 AttackAdd = 67 [default = 0];
inline bool BaseAttrUserDataV1::has_attackadd() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_attackadd() {
  _has_bits_[1] |= 0x08000000u;
}
inline void BaseAttrUserDataV1::clear_has_attackadd() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void BaseAttrUserDataV1::clear_attackadd() {
  attackadd_ = 0;
  clear_has_attackadd();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::attackadd() const {
  return attackadd_;
}
inline void BaseAttrUserDataV1::set_attackadd(::google::protobuf::int32 value) {
  set_has_attackadd();
  attackadd_ = value;
}

// optional int32 InjuryAdd = 68 [default = 0];
inline bool BaseAttrUserDataV1::has_injuryadd() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_injuryadd() {
  _has_bits_[1] |= 0x10000000u;
}
inline void BaseAttrUserDataV1::clear_has_injuryadd() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void BaseAttrUserDataV1::clear_injuryadd() {
  injuryadd_ = 0;
  clear_has_injuryadd();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::injuryadd() const {
  return injuryadd_;
}
inline void BaseAttrUserDataV1::set_injuryadd(::google::protobuf::int32 value) {
  set_has_injuryadd();
  injuryadd_ = value;
}

// optional int32 FrozenState = 69 [default = -1];
inline bool BaseAttrUserDataV1::has_frozenstate() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_frozenstate() {
  _has_bits_[1] |= 0x20000000u;
}
inline void BaseAttrUserDataV1::clear_has_frozenstate() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void BaseAttrUserDataV1::clear_frozenstate() {
  frozenstate_ = -1;
  clear_has_frozenstate();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::frozenstate() const {
  return frozenstate_;
}
inline void BaseAttrUserDataV1::set_frozenstate(::google::protobuf::int32 value) {
  set_has_frozenstate();
  frozenstate_ = value;
}

// optional int32 SilentState = 70 [default = -1];
inline bool BaseAttrUserDataV1::has_silentstate() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_silentstate() {
  _has_bits_[1] |= 0x40000000u;
}
inline void BaseAttrUserDataV1::clear_has_silentstate() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void BaseAttrUserDataV1::clear_silentstate() {
  silentstate_ = -1;
  clear_has_silentstate();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::silentstate() const {
  return silentstate_;
}
inline void BaseAttrUserDataV1::set_silentstate(::google::protobuf::int32 value) {
  set_has_silentstate();
  silentstate_ = value;
}

// optional int64 GuildContributeHistoryMax = 72 [default = -1];
inline bool BaseAttrUserDataV1::has_guildcontributehistorymax() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildcontributehistorymax() {
  _has_bits_[1] |= 0x80000000u;
}
inline void BaseAttrUserDataV1::clear_has_guildcontributehistorymax() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void BaseAttrUserDataV1::clear_guildcontributehistorymax() {
  guildcontributehistorymax_ = GOOGLE_LONGLONG(-1);
  clear_has_guildcontributehistorymax();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::guildcontributehistorymax() const {
  return guildcontributehistorymax_;
}
inline void BaseAttrUserDataV1::set_guildcontributehistorymax(::google::protobuf::int64 value) {
  set_has_guildcontributehistorymax();
  guildcontributehistorymax_ = value;
}

// optional uint64 TeamId = 74 [default = 0];
inline bool BaseAttrUserDataV1::has_teamid() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void BaseAttrUserDataV1::set_has_teamid() {
  _has_bits_[2] |= 0x00000001u;
}
inline void BaseAttrUserDataV1::clear_has_teamid() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void BaseAttrUserDataV1::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 BaseAttrUserDataV1::teamid() const {
  return teamid_;
}
inline void BaseAttrUserDataV1::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 TreasureHair = 75 [default = -1];
inline bool BaseAttrUserDataV1::has_treasurehair() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasurehair() {
  _has_bits_[2] |= 0x00000002u;
}
inline void BaseAttrUserDataV1::clear_has_treasurehair() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void BaseAttrUserDataV1::clear_treasurehair() {
  treasurehair_ = -1;
  clear_has_treasurehair();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasurehair() const {
  return treasurehair_;
}
inline void BaseAttrUserDataV1::set_treasurehair(::google::protobuf::int32 value) {
  set_has_treasurehair();
  treasurehair_ = value;
}

// optional int32 TreasureHead = 76 [default = -1];
inline bool BaseAttrUserDataV1::has_treasurehead() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasurehead() {
  _has_bits_[2] |= 0x00000004u;
}
inline void BaseAttrUserDataV1::clear_has_treasurehead() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void BaseAttrUserDataV1::clear_treasurehead() {
  treasurehead_ = -1;
  clear_has_treasurehead();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasurehead() const {
  return treasurehead_;
}
inline void BaseAttrUserDataV1::set_treasurehead(::google::protobuf::int32 value) {
  set_has_treasurehead();
  treasurehead_ = value;
}

// optional int32 TreasureBody = 77 [default = -1];
inline bool BaseAttrUserDataV1::has_treasurebody() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasurebody() {
  _has_bits_[2] |= 0x00000008u;
}
inline void BaseAttrUserDataV1::clear_has_treasurebody() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void BaseAttrUserDataV1::clear_treasurebody() {
  treasurebody_ = -1;
  clear_has_treasurebody();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasurebody() const {
  return treasurebody_;
}
inline void BaseAttrUserDataV1::set_treasurebody(::google::protobuf::int32 value) {
  set_has_treasurebody();
  treasurebody_ = value;
}

// optional int32 TreasureWeapon = 78 [default = -1];
inline bool BaseAttrUserDataV1::has_treasureweapon() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasureweapon() {
  _has_bits_[2] |= 0x00000010u;
}
inline void BaseAttrUserDataV1::clear_has_treasureweapon() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void BaseAttrUserDataV1::clear_treasureweapon() {
  treasureweapon_ = -1;
  clear_has_treasureweapon();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasureweapon() const {
  return treasureweapon_;
}
inline void BaseAttrUserDataV1::set_treasureweapon(::google::protobuf::int32 value) {
  set_has_treasureweapon();
  treasureweapon_ = value;
}

// optional int32 TreasureWing = 79 [default = -1];
inline bool BaseAttrUserDataV1::has_treasurewing() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasurewing() {
  _has_bits_[2] |= 0x00000020u;
}
inline void BaseAttrUserDataV1::clear_has_treasurewing() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void BaseAttrUserDataV1::clear_treasurewing() {
  treasurewing_ = -1;
  clear_has_treasurewing();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasurewing() const {
  return treasurewing_;
}
inline void BaseAttrUserDataV1::set_treasurewing(::google::protobuf::int32 value) {
  set_has_treasurewing();
  treasurewing_ = value;
}

// optional uint64 GuildGuid = 80 [default = 0];
inline bool BaseAttrUserDataV1::has_guildguid() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildguid() {
  _has_bits_[2] |= 0x00000040u;
}
inline void BaseAttrUserDataV1::clear_has_guildguid() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void BaseAttrUserDataV1::clear_guildguid() {
  guildguid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildguid();
}
inline ::google::protobuf::uint64 BaseAttrUserDataV1::guildguid() const {
  return guildguid_;
}
inline void BaseAttrUserDataV1::set_guildguid(::google::protobuf::uint64 value) {
  set_has_guildguid();
  guildguid_ = value;
}

// optional int32 TreasureRiding = 81 [default = -1];
inline bool BaseAttrUserDataV1::has_treasureriding() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void BaseAttrUserDataV1::set_has_treasureriding() {
  _has_bits_[2] |= 0x00000080u;
}
inline void BaseAttrUserDataV1::clear_has_treasureriding() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void BaseAttrUserDataV1::clear_treasureriding() {
  treasureriding_ = -1;
  clear_has_treasureriding();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::treasureriding() const {
  return treasureriding_;
}
inline void BaseAttrUserDataV1::set_treasureriding(::google::protobuf::int32 value) {
  set_has_treasureriding();
  treasureriding_ = value;
}

// optional int32 VechicleId = 82 [default = -1];
inline bool BaseAttrUserDataV1::has_vechicleid() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void BaseAttrUserDataV1::set_has_vechicleid() {
  _has_bits_[2] |= 0x00000100u;
}
inline void BaseAttrUserDataV1::clear_has_vechicleid() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void BaseAttrUserDataV1::clear_vechicleid() {
  vechicleid_ = -1;
  clear_has_vechicleid();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::vechicleid() const {
  return vechicleid_;
}
inline void BaseAttrUserDataV1::set_vechicleid(::google::protobuf::int32 value) {
  set_has_vechicleid();
  vechicleid_ = value;
}

// optional bool AnimationState = 83 [default = false];
inline bool BaseAttrUserDataV1::has_animationstate() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void BaseAttrUserDataV1::set_has_animationstate() {
  _has_bits_[2] |= 0x00000200u;
}
inline void BaseAttrUserDataV1::clear_has_animationstate() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void BaseAttrUserDataV1::clear_animationstate() {
  animationstate_ = false;
  clear_has_animationstate();
}
inline bool BaseAttrUserDataV1::animationstate() const {
  return animationstate_;
}
inline void BaseAttrUserDataV1::set_animationstate(bool value) {
  set_has_animationstate();
  animationstate_ = value;
}

// optional float RefixDmgRate = 84 [default = 0];
inline bool BaseAttrUserDataV1::has_refixdmgrate() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixdmgrate() {
  _has_bits_[2] |= 0x00000400u;
}
inline void BaseAttrUserDataV1::clear_has_refixdmgrate() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void BaseAttrUserDataV1::clear_refixdmgrate() {
  refixdmgrate_ = 0;
  clear_has_refixdmgrate();
}
inline float BaseAttrUserDataV1::refixdmgrate() const {
  return refixdmgrate_;
}
inline void BaseAttrUserDataV1::set_refixdmgrate(float value) {
  set_has_refixdmgrate();
  refixdmgrate_ = value;
}

// optional int32 RefixDmgValue = 85 [default = 0];
inline bool BaseAttrUserDataV1::has_refixdmgvalue() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixdmgvalue() {
  _has_bits_[2] |= 0x00000800u;
}
inline void BaseAttrUserDataV1::clear_has_refixdmgvalue() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void BaseAttrUserDataV1::clear_refixdmgvalue() {
  refixdmgvalue_ = 0;
  clear_has_refixdmgvalue();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::refixdmgvalue() const {
  return refixdmgvalue_;
}
inline void BaseAttrUserDataV1::set_refixdmgvalue(::google::protobuf::int32 value) {
  set_has_refixdmgvalue();
  refixdmgvalue_ = value;
}

// optional float RefixHurtRate = 86 [default = 0];
inline bool BaseAttrUserDataV1::has_refixhurtrate() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixhurtrate() {
  _has_bits_[2] |= 0x00001000u;
}
inline void BaseAttrUserDataV1::clear_has_refixhurtrate() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void BaseAttrUserDataV1::clear_refixhurtrate() {
  refixhurtrate_ = 0;
  clear_has_refixhurtrate();
}
inline float BaseAttrUserDataV1::refixhurtrate() const {
  return refixhurtrate_;
}
inline void BaseAttrUserDataV1::set_refixhurtrate(float value) {
  set_has_refixhurtrate();
  refixhurtrate_ = value;
}

// optional int32 RefixHurtValue = 87 [default = 0];
inline bool BaseAttrUserDataV1::has_refixhurtvalue() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixhurtvalue() {
  _has_bits_[2] |= 0x00002000u;
}
inline void BaseAttrUserDataV1::clear_has_refixhurtvalue() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void BaseAttrUserDataV1::clear_refixhurtvalue() {
  refixhurtvalue_ = 0;
  clear_has_refixhurtvalue();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::refixhurtvalue() const {
  return refixhurtvalue_;
}
inline void BaseAttrUserDataV1::set_refixhurtvalue(::google::protobuf::int32 value) {
  set_has_refixhurtvalue();
  refixhurtvalue_ = value;
}

// optional float RefixHealRate = 88 [default = 0];
inline bool BaseAttrUserDataV1::has_refixhealrate() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixhealrate() {
  _has_bits_[2] |= 0x00004000u;
}
inline void BaseAttrUserDataV1::clear_has_refixhealrate() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void BaseAttrUserDataV1::clear_refixhealrate() {
  refixhealrate_ = 0;
  clear_has_refixhealrate();
}
inline float BaseAttrUserDataV1::refixhealrate() const {
  return refixhealrate_;
}
inline void BaseAttrUserDataV1::set_refixhealrate(float value) {
  set_has_refixhealrate();
  refixhealrate_ = value;
}

// optional int32 RefixHealValue = 89 [default = 0];
inline bool BaseAttrUserDataV1::has_refixhealvalue() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixhealvalue() {
  _has_bits_[2] |= 0x00008000u;
}
inline void BaseAttrUserDataV1::clear_has_refixhealvalue() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void BaseAttrUserDataV1::clear_refixhealvalue() {
  refixhealvalue_ = 0;
  clear_has_refixhealvalue();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::refixhealvalue() const {
  return refixhealvalue_;
}
inline void BaseAttrUserDataV1::set_refixhealvalue(::google::protobuf::int32 value) {
  set_has_refixhealvalue();
  refixhealvalue_ = value;
}

// optional float RefixCuredRate = 90 [default = 0];
inline bool BaseAttrUserDataV1::has_refixcuredrate() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixcuredrate() {
  _has_bits_[2] |= 0x00010000u;
}
inline void BaseAttrUserDataV1::clear_has_refixcuredrate() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void BaseAttrUserDataV1::clear_refixcuredrate() {
  refixcuredrate_ = 0;
  clear_has_refixcuredrate();
}
inline float BaseAttrUserDataV1::refixcuredrate() const {
  return refixcuredrate_;
}
inline void BaseAttrUserDataV1::set_refixcuredrate(float value) {
  set_has_refixcuredrate();
  refixcuredrate_ = value;
}

// optional int32 RefixCuredValue = 91 [default = 0];
inline bool BaseAttrUserDataV1::has_refixcuredvalue() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_refixcuredvalue() {
  _has_bits_[2] |= 0x00020000u;
}
inline void BaseAttrUserDataV1::clear_has_refixcuredvalue() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void BaseAttrUserDataV1::clear_refixcuredvalue() {
  refixcuredvalue_ = 0;
  clear_has_refixcuredvalue();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::refixcuredvalue() const {
  return refixcuredvalue_;
}
inline void BaseAttrUserDataV1::set_refixcuredvalue(::google::protobuf::int32 value) {
  set_has_refixcuredvalue();
  refixcuredvalue_ = value;
}

// optional int64 GuildContribute = 92 [default = -1];
inline bool BaseAttrUserDataV1::has_guildcontribute() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildcontribute() {
  _has_bits_[2] |= 0x00040000u;
}
inline void BaseAttrUserDataV1::clear_has_guildcontribute() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void BaseAttrUserDataV1::clear_guildcontribute() {
  guildcontribute_ = GOOGLE_LONGLONG(-1);
  clear_has_guildcontribute();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::guildcontribute() const {
  return guildcontribute_;
}
inline void BaseAttrUserDataV1::set_guildcontribute(::google::protobuf::int64 value) {
  set_has_guildcontribute();
  guildcontribute_ = value;
}

// optional int64 PvpMoney = 93 [default = -1];
inline bool BaseAttrUserDataV1::has_pvpmoney() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_pvpmoney() {
  _has_bits_[2] |= 0x00080000u;
}
inline void BaseAttrUserDataV1::clear_has_pvpmoney() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void BaseAttrUserDataV1::clear_pvpmoney() {
  pvpmoney_ = GOOGLE_LONGLONG(-1);
  clear_has_pvpmoney();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::pvpmoney() const {
  return pvpmoney_;
}
inline void BaseAttrUserDataV1::set_pvpmoney(::google::protobuf::int64 value) {
  set_has_pvpmoney();
  pvpmoney_ = value;
}

// optional int64 GuildResource = 94 [default = -1];
inline bool BaseAttrUserDataV1::has_guildresource() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildresource() {
  _has_bits_[2] |= 0x00100000u;
}
inline void BaseAttrUserDataV1::clear_has_guildresource() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void BaseAttrUserDataV1::clear_guildresource() {
  guildresource_ = GOOGLE_LONGLONG(-1);
  clear_has_guildresource();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::guildresource() const {
  return guildresource_;
}
inline void BaseAttrUserDataV1::set_guildresource(::google::protobuf::int64 value) {
  set_has_guildresource();
  guildresource_ = value;
}

// optional int32 CreateRoleTime = 95 [default = 0];
inline bool BaseAttrUserDataV1::has_createroletime() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_createroletime() {
  _has_bits_[2] |= 0x00200000u;
}
inline void BaseAttrUserDataV1::clear_has_createroletime() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void BaseAttrUserDataV1::clear_createroletime() {
  createroletime_ = 0;
  clear_has_createroletime();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::createroletime() const {
  return createroletime_;
}
inline void BaseAttrUserDataV1::set_createroletime(::google::protobuf::int32 value) {
  set_has_createroletime();
  createroletime_ = value;
}

// optional int32 UpdateRoleTime = 96 [default = 0];
inline bool BaseAttrUserDataV1::has_updateroletime() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_updateroletime() {
  _has_bits_[2] |= 0x00400000u;
}
inline void BaseAttrUserDataV1::clear_has_updateroletime() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void BaseAttrUserDataV1::clear_updateroletime() {
  updateroletime_ = 0;
  clear_has_updateroletime();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::updateroletime() const {
  return updateroletime_;
}
inline void BaseAttrUserDataV1::set_updateroletime(::google::protobuf::int32 value) {
  set_has_updateroletime();
  updateroletime_ = value;
}

// optional bool FightState = 97 [default = false];
inline bool BaseAttrUserDataV1::has_fightstate() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_fightstate() {
  _has_bits_[2] |= 0x00800000u;
}
inline void BaseAttrUserDataV1::clear_has_fightstate() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void BaseAttrUserDataV1::clear_fightstate() {
  fightstate_ = false;
  clear_has_fightstate();
}
inline bool BaseAttrUserDataV1::fightstate() const {
  return fightstate_;
}
inline void BaseAttrUserDataV1::set_fightstate(bool value) {
  set_has_fightstate();
  fightstate_ = value;
}

// repeated int32 AttackSkillList = 98;
inline int BaseAttrUserDataV1::attackskilllist_size() const {
  return attackskilllist_.size();
}
inline void BaseAttrUserDataV1::clear_attackskilllist() {
  attackskilllist_.Clear();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::attackskilllist(int index) const {
  return attackskilllist_.Get(index);
}
inline void BaseAttrUserDataV1::set_attackskilllist(int index, ::google::protobuf::int32 value) {
  attackskilllist_.Set(index, value);
}
inline void BaseAttrUserDataV1::add_attackskilllist(::google::protobuf::int32 value) {
  attackskilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseAttrUserDataV1::attackskilllist() const {
  return attackskilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseAttrUserDataV1::mutable_attackskilllist() {
  return &attackskilllist_;
}

// optional string GuildName = 99;
inline bool BaseAttrUserDataV1::has_guildname() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_guildname() {
  _has_bits_[2] |= 0x02000000u;
}
inline void BaseAttrUserDataV1::clear_has_guildname() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void BaseAttrUserDataV1::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BaseAttrUserDataV1::guildname() const {
  return *guildname_;
}
inline void BaseAttrUserDataV1::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BaseAttrUserDataV1::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BaseAttrUserDataV1::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseAttrUserDataV1::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* BaseAttrUserDataV1::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseAttrUserDataV1::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool IsAllowSelect = 100 [default = true];
inline bool BaseAttrUserDataV1::has_isallowselect() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_isallowselect() {
  _has_bits_[2] |= 0x04000000u;
}
inline void BaseAttrUserDataV1::clear_has_isallowselect() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void BaseAttrUserDataV1::clear_isallowselect() {
  isallowselect_ = true;
  clear_has_isallowselect();
}
inline bool BaseAttrUserDataV1::isallowselect() const {
  return isallowselect_;
}
inline void BaseAttrUserDataV1::set_isallowselect(bool value) {
  set_has_isallowselect();
  isallowselect_ = value;
}

// optional bool GoHomeState = 101 [default = false];
inline bool BaseAttrUserDataV1::has_gohomestate() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_gohomestate() {
  _has_bits_[2] |= 0x08000000u;
}
inline void BaseAttrUserDataV1::clear_has_gohomestate() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void BaseAttrUserDataV1::clear_gohomestate() {
  gohomestate_ = false;
  clear_has_gohomestate();
}
inline bool BaseAttrUserDataV1::gohomestate() const {
  return gohomestate_;
}
inline void BaseAttrUserDataV1::set_gohomestate(bool value) {
  set_has_gohomestate();
  gohomestate_ = value;
}

// optional bool CanFight = 102 [default = true];
inline bool BaseAttrUserDataV1::has_canfight() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_canfight() {
  _has_bits_[2] |= 0x10000000u;
}
inline void BaseAttrUserDataV1::clear_has_canfight() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void BaseAttrUserDataV1::clear_canfight() {
  canfight_ = true;
  clear_has_canfight();
}
inline bool BaseAttrUserDataV1::canfight() const {
  return canfight_;
}
inline void BaseAttrUserDataV1::set_canfight(bool value) {
  set_has_canfight();
  canfight_ = value;
}

// optional int64 DoubleExp = 103 [default = -1];
inline bool BaseAttrUserDataV1::has_doubleexp() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_doubleexp() {
  _has_bits_[2] |= 0x20000000u;
}
inline void BaseAttrUserDataV1::clear_has_doubleexp() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void BaseAttrUserDataV1::clear_doubleexp() {
  doubleexp_ = GOOGLE_LONGLONG(-1);
  clear_has_doubleexp();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::doubleexp() const {
  return doubleexp_;
}
inline void BaseAttrUserDataV1::set_doubleexp(::google::protobuf::int64 value) {
  set_has_doubleexp();
  doubleexp_ = value;
}

// optional int64 FriendPoint = 104 [default = -1];
inline bool BaseAttrUserDataV1::has_friendpoint() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_friendpoint() {
  _has_bits_[2] |= 0x40000000u;
}
inline void BaseAttrUserDataV1::clear_has_friendpoint() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void BaseAttrUserDataV1::clear_friendpoint() {
  friendpoint_ = GOOGLE_LONGLONG(-1);
  clear_has_friendpoint();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::friendpoint() const {
  return friendpoint_;
}
inline void BaseAttrUserDataV1::set_friendpoint(::google::protobuf::int64 value) {
  set_has_friendpoint();
  friendpoint_ = value;
}

// optional int64 HisMaxHonor = 105 [default = -1];
inline bool BaseAttrUserDataV1::has_hismaxhonor() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hismaxhonor() {
  _has_bits_[2] |= 0x80000000u;
}
inline void BaseAttrUserDataV1::clear_has_hismaxhonor() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void BaseAttrUserDataV1::clear_hismaxhonor() {
  hismaxhonor_ = GOOGLE_LONGLONG(-1);
  clear_has_hismaxhonor();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::hismaxhonor() const {
  return hismaxhonor_;
}
inline void BaseAttrUserDataV1::set_hismaxhonor(::google::protobuf::int64 value) {
  set_has_hismaxhonor();
  hismaxhonor_ = value;
}

// optional bool HurtState = 106 [default = false];
inline bool BaseAttrUserDataV1::has_hurtstate() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hurtstate() {
  _has_bits_[3] |= 0x00000001u;
}
inline void BaseAttrUserDataV1::clear_has_hurtstate() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void BaseAttrUserDataV1::clear_hurtstate() {
  hurtstate_ = false;
  clear_has_hurtstate();
}
inline bool BaseAttrUserDataV1::hurtstate() const {
  return hurtstate_;
}
inline void BaseAttrUserDataV1::set_hurtstate(bool value) {
  set_has_hurtstate();
  hurtstate_ = value;
}

// optional bool HurtFlyState = 107 [default = false];
inline bool BaseAttrUserDataV1::has_hurtflystate() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hurtflystate() {
  _has_bits_[3] |= 0x00000002u;
}
inline void BaseAttrUserDataV1::clear_has_hurtflystate() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void BaseAttrUserDataV1::clear_hurtflystate() {
  hurtflystate_ = false;
  clear_has_hurtflystate();
}
inline bool BaseAttrUserDataV1::hurtflystate() const {
  return hurtflystate_;
}
inline void BaseAttrUserDataV1::set_hurtflystate(bool value) {
  set_has_hurtflystate();
  hurtflystate_ = value;
}

// optional bool HurtDownState = 108 [default = false];
inline bool BaseAttrUserDataV1::has_hurtdownstate() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hurtdownstate() {
  _has_bits_[3] |= 0x00000004u;
}
inline void BaseAttrUserDataV1::clear_has_hurtdownstate() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void BaseAttrUserDataV1::clear_hurtdownstate() {
  hurtdownstate_ = false;
  clear_has_hurtdownstate();
}
inline bool BaseAttrUserDataV1::hurtdownstate() const {
  return hurtdownstate_;
}
inline void BaseAttrUserDataV1::set_hurtdownstate(bool value) {
  set_has_hurtdownstate();
  hurtdownstate_ = value;
}

// optional bool HurtRepelState = 109 [default = false];
inline bool BaseAttrUserDataV1::has_hurtrepelstate() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void BaseAttrUserDataV1::set_has_hurtrepelstate() {
  _has_bits_[3] |= 0x00000008u;
}
inline void BaseAttrUserDataV1::clear_has_hurtrepelstate() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void BaseAttrUserDataV1::clear_hurtrepelstate() {
  hurtrepelstate_ = false;
  clear_has_hurtrepelstate();
}
inline bool BaseAttrUserDataV1::hurtrepelstate() const {
  return hurtrepelstate_;
}
inline void BaseAttrUserDataV1::set_hurtrepelstate(bool value) {
  set_has_hurtrepelstate();
  hurtrepelstate_ = value;
}

// optional int64 TodayHornor = 111 [default = -1];
inline bool BaseAttrUserDataV1::has_todayhornor() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void BaseAttrUserDataV1::set_has_todayhornor() {
  _has_bits_[3] |= 0x00000010u;
}
inline void BaseAttrUserDataV1::clear_has_todayhornor() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void BaseAttrUserDataV1::clear_todayhornor() {
  todayhornor_ = GOOGLE_LONGLONG(-1);
  clear_has_todayhornor();
}
inline ::google::protobuf::int64 BaseAttrUserDataV1::todayhornor() const {
  return todayhornor_;
}
inline void BaseAttrUserDataV1::set_todayhornor(::google::protobuf::int64 value) {
  set_has_todayhornor();
  todayhornor_ = value;
}

// optional int32 CurProfession = 113 [default = -1];
inline bool BaseAttrUserDataV1::has_curprofession() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void BaseAttrUserDataV1::set_has_curprofession() {
  _has_bits_[3] |= 0x00000020u;
}
inline void BaseAttrUserDataV1::clear_has_curprofession() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void BaseAttrUserDataV1::clear_curprofession() {
  curprofession_ = -1;
  clear_has_curprofession();
}
inline ::google::protobuf::int32 BaseAttrUserDataV1::curprofession() const {
  return curprofession_;
}
inline void BaseAttrUserDataV1::set_curprofession(::google::protobuf::int32 value) {
  set_has_curprofession();
  curprofession_ = value;
}

// -------------------------------------------------------------------

// BaseAttrObjDataV1

// optional int32 ObjType = 1 [default = -1];
inline bool BaseAttrObjDataV1::has_objtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseAttrObjDataV1::set_has_objtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseAttrObjDataV1::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseAttrObjDataV1::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
inline ::google::protobuf::int32 BaseAttrObjDataV1::objtype() const {
  return objtype_;
}
inline void BaseAttrObjDataV1::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// optional int32 ConfigId = 2 [default = -1];
inline bool BaseAttrObjDataV1::has_configid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseAttrObjDataV1::set_has_configid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseAttrObjDataV1::clear_has_configid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseAttrObjDataV1::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 BaseAttrObjDataV1::configid() const {
  return configid_;
}
inline void BaseAttrObjDataV1::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 State = 3 [default = -1];
inline bool BaseAttrObjDataV1::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseAttrObjDataV1::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseAttrObjDataV1::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseAttrObjDataV1::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 BaseAttrObjDataV1::state() const {
  return state_;
}
inline void BaseAttrObjDataV1::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 OwnerObjId = 4 [default = -1];
inline bool BaseAttrObjDataV1::has_ownerobjid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseAttrObjDataV1::set_has_ownerobjid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseAttrObjDataV1::clear_has_ownerobjid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseAttrObjDataV1::clear_ownerobjid() {
  ownerobjid_ = -1;
  clear_has_ownerobjid();
}
inline ::google::protobuf::int32 BaseAttrObjDataV1::ownerobjid() const {
  return ownerobjid_;
}
inline void BaseAttrObjDataV1::set_ownerobjid(::google::protobuf::int32 value) {
  set_has_ownerobjid();
  ownerobjid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseAttrV1Data_2eproto__INCLUDED
