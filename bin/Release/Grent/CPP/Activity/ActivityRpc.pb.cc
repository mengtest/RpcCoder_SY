// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActivityRpcEliteMonsterInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcEliteMonsterInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcCreateObjAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcCreateObjAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcCreateObjReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcCreateObjReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcOpenActivityNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcOpenActivityNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcXingyaoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcXingyaoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcXingyaoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcXingyaoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcActivityTimeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcActivityTimeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcReqActivityTimeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcReqActivityTimeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcReqActivityTimeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcReqActivityTimeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcXingyaoNPCAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcXingyaoNPCAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcXingyaoNPCReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcXingyaoNPCReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcXingyaoRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcXingyaoRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRpcOperationTimeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRpcOperationTimeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityRpc_2eproto() {
  protobuf_AddDesc_ActivityRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityRpcEliteMonsterInfoNotify_descriptor_ = file->message_type(0);
  static const int ActivityRpcEliteMonsterInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcEliteMonsterInfoNotify, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcEliteMonsterInfoNotify, info_),
  };
  ActivityRpcEliteMonsterInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcEliteMonsterInfoNotify_descriptor_,
      ActivityRpcEliteMonsterInfoNotify::default_instance_,
      ActivityRpcEliteMonsterInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcEliteMonsterInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcEliteMonsterInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcEliteMonsterInfoNotify));
  ActivityRpcCreateObjAsk_descriptor_ = file->message_type(1);
  static const int ActivityRpcCreateObjAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjAsk, commonid_),
  };
  ActivityRpcCreateObjAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcCreateObjAsk_descriptor_,
      ActivityRpcCreateObjAsk::default_instance_,
      ActivityRpcCreateObjAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcCreateObjAsk));
  ActivityRpcCreateObjReply_descriptor_ = file->message_type(2);
  static const int ActivityRpcCreateObjReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjReply, result_),
  };
  ActivityRpcCreateObjReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcCreateObjReply_descriptor_,
      ActivityRpcCreateObjReply::default_instance_,
      ActivityRpcCreateObjReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcCreateObjReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcCreateObjReply));
  ActivityRpcOpenActivityNotify_descriptor_ = file->message_type(3);
  static const int ActivityRpcOpenActivityNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, difftm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, pos_),
  };
  ActivityRpcOpenActivityNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcOpenActivityNotify_descriptor_,
      ActivityRpcOpenActivityNotify::default_instance_,
      ActivityRpcOpenActivityNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOpenActivityNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcOpenActivityNotify));
  ActivityRpcXingyaoAsk_descriptor_ = file->message_type(4);
  static const int ActivityRpcXingyaoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoAsk, npcid_),
  };
  ActivityRpcXingyaoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcXingyaoAsk_descriptor_,
      ActivityRpcXingyaoAsk::default_instance_,
      ActivityRpcXingyaoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcXingyaoAsk));
  ActivityRpcXingyaoReply_descriptor_ = file->message_type(5);
  static const int ActivityRpcXingyaoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoReply, result_),
  };
  ActivityRpcXingyaoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcXingyaoReply_descriptor_,
      ActivityRpcXingyaoReply::default_instance_,
      ActivityRpcXingyaoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcXingyaoReply));
  ActivityRpcActivityTimeNotify_descriptor_ = file->message_type(6);
  static const int ActivityRpcActivityTimeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcActivityTimeNotify, acttimelist_),
  };
  ActivityRpcActivityTimeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcActivityTimeNotify_descriptor_,
      ActivityRpcActivityTimeNotify::default_instance_,
      ActivityRpcActivityTimeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcActivityTimeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcActivityTimeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcActivityTimeNotify));
  ActivityRpcReqActivityTimeAsk_descriptor_ = file->message_type(7);
  static const int ActivityRpcReqActivityTimeAsk_offsets_[1] = {
  };
  ActivityRpcReqActivityTimeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcReqActivityTimeAsk_descriptor_,
      ActivityRpcReqActivityTimeAsk::default_instance_,
      ActivityRpcReqActivityTimeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcReqActivityTimeAsk));
  ActivityRpcReqActivityTimeReply_descriptor_ = file->message_type(8);
  static const int ActivityRpcReqActivityTimeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeReply, acttimelist_),
  };
  ActivityRpcReqActivityTimeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcReqActivityTimeReply_descriptor_,
      ActivityRpcReqActivityTimeReply::default_instance_,
      ActivityRpcReqActivityTimeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcReqActivityTimeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcReqActivityTimeReply));
  ActivityRpcXingyaoNPCAsk_descriptor_ = file->message_type(9);
  static const int ActivityRpcXingyaoNPCAsk_offsets_[1] = {
  };
  ActivityRpcXingyaoNPCAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcXingyaoNPCAsk_descriptor_,
      ActivityRpcXingyaoNPCAsk::default_instance_,
      ActivityRpcXingyaoNPCAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcXingyaoNPCAsk));
  ActivityRpcXingyaoNPCReply_descriptor_ = file->message_type(10);
  static const int ActivityRpcXingyaoNPCReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCReply, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCReply, waypoinid_),
  };
  ActivityRpcXingyaoNPCReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcXingyaoNPCReply_descriptor_,
      ActivityRpcXingyaoNPCReply::default_instance_,
      ActivityRpcXingyaoNPCReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoNPCReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcXingyaoNPCReply));
  ActivityRpcXingyaoRewardNotify_descriptor_ = file->message_type(11);
  static const int ActivityRpcXingyaoRewardNotify_offsets_[1] = {
  };
  ActivityRpcXingyaoRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcXingyaoRewardNotify_descriptor_,
      ActivityRpcXingyaoRewardNotify::default_instance_,
      ActivityRpcXingyaoRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcXingyaoRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcXingyaoRewardNotify));
  ActivityRpcOperationTimeNotify_descriptor_ = file->message_type(12);
  static const int ActivityRpcOperationTimeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOperationTimeNotify, acttimelist_),
  };
  ActivityRpcOperationTimeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRpcOperationTimeNotify_descriptor_,
      ActivityRpcOperationTimeNotify::default_instance_,
      ActivityRpcOperationTimeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOperationTimeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRpcOperationTimeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRpcOperationTimeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcEliteMonsterInfoNotify_descriptor_, &ActivityRpcEliteMonsterInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcCreateObjAsk_descriptor_, &ActivityRpcCreateObjAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcCreateObjReply_descriptor_, &ActivityRpcCreateObjReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcOpenActivityNotify_descriptor_, &ActivityRpcOpenActivityNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcXingyaoAsk_descriptor_, &ActivityRpcXingyaoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcXingyaoReply_descriptor_, &ActivityRpcXingyaoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcActivityTimeNotify_descriptor_, &ActivityRpcActivityTimeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcReqActivityTimeAsk_descriptor_, &ActivityRpcReqActivityTimeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcReqActivityTimeReply_descriptor_, &ActivityRpcReqActivityTimeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcXingyaoNPCAsk_descriptor_, &ActivityRpcXingyaoNPCAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcXingyaoNPCReply_descriptor_, &ActivityRpcXingyaoNPCReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcXingyaoRewardNotify_descriptor_, &ActivityRpcXingyaoRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRpcOperationTimeNotify_descriptor_, &ActivityRpcOperationTimeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityRpc_2eproto() {
  delete ActivityRpcEliteMonsterInfoNotify::default_instance_;
  delete ActivityRpcEliteMonsterInfoNotify_reflection_;
  delete ActivityRpcCreateObjAsk::default_instance_;
  delete ActivityRpcCreateObjAsk_reflection_;
  delete ActivityRpcCreateObjReply::default_instance_;
  delete ActivityRpcCreateObjReply_reflection_;
  delete ActivityRpcOpenActivityNotify::default_instance_;
  delete ActivityRpcOpenActivityNotify_reflection_;
  delete ActivityRpcXingyaoAsk::default_instance_;
  delete ActivityRpcXingyaoAsk_reflection_;
  delete ActivityRpcXingyaoReply::default_instance_;
  delete ActivityRpcXingyaoReply_reflection_;
  delete ActivityRpcActivityTimeNotify::default_instance_;
  delete ActivityRpcActivityTimeNotify_reflection_;
  delete ActivityRpcReqActivityTimeAsk::default_instance_;
  delete ActivityRpcReqActivityTimeAsk_reflection_;
  delete ActivityRpcReqActivityTimeReply::default_instance_;
  delete ActivityRpcReqActivityTimeReply_reflection_;
  delete ActivityRpcXingyaoNPCAsk::default_instance_;
  delete ActivityRpcXingyaoNPCAsk_reflection_;
  delete ActivityRpcXingyaoNPCReply::default_instance_;
  delete ActivityRpcXingyaoNPCReply_reflection_;
  delete ActivityRpcXingyaoRewardNotify::default_instance_;
  delete ActivityRpcXingyaoRewardNotify_reflection_;
  delete ActivityRpcOperationTimeNotify::default_instance_;
  delete ActivityRpcOperationTimeNotify_reflection_;
}

void protobuf_AddDesc_ActivityRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ActivityRpc.proto\032\022PublicStruct.proto\""
    "W\n!ActivityRpcEliteMonsterInfoNotify\022\021\n\005"
    "State\030\002 \001(\005:\002-1\022\037\n\004Info\030\003 \001(\0132\021.EliteMon"
    "sterInfo\"/\n\027ActivityRpcCreateObjAsk\022\024\n\010C"
    "ommonId\030\001 \001(\005:\002-1\"/\n\031ActivityRpcCreateOb"
    "jReply\022\022\n\006Result\030\001 \001(\005:\002-1\"r\n\035ActivityRp"
    "cOpenActivityNotify\022\021\n\005ActId\030\001 \001(\005:\002-1\022\022"
    "\n\006DiffTm\030\002 \001(\005:\002-1\022\023\n\007SceneId\030\003 \001(\005:\002-1\022"
    "\025\n\003Pos\030\004 \001(\0132\010.Vector3\"*\n\025ActivityRpcXin"
    "gyaoAsk\022\021\n\005NPCid\030\001 \001(\005:\002-1\"-\n\027ActivityRp"
    "cXingyaoReply\022\022\n\006Result\030\001 \001(\005:\002-1\"C\n\035Act"
    "ivityRpcActivityTimeNotify\022\"\n\013ActTimeLis"
    "t\030\001 \003(\0132\r.ActivityTime\"\037\n\035ActivityRpcReq"
    "ActivityTimeAsk\"Y\n\037ActivityRpcReqActivit"
    "yTimeReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\"\n\013ActTim"
    "eList\030\002 \003(\0132\r.ActivityTime\"\032\n\030ActivityRp"
    "cXingyaoNPCAsk\"\\\n\032ActivityRpcXingyaoNPCR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\022\023\n\007Sceneid\030\002 \001("
    "\005:\002-1\022\025\n\tWaypoinid\030\003 \001(\005:\002-1\" \n\036Activity"
    "RpcXingyaoRewardNotify\"D\n\036ActivityRpcOpe"
    "rationTimeNotify\022\"\n\013ActTimeList\030\001 \003(\0132\r."
    "ActivityTime", 852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityRpc.proto", &protobuf_RegisterTypes);
  ActivityRpcEliteMonsterInfoNotify::default_instance_ = new ActivityRpcEliteMonsterInfoNotify();
  ActivityRpcCreateObjAsk::default_instance_ = new ActivityRpcCreateObjAsk();
  ActivityRpcCreateObjReply::default_instance_ = new ActivityRpcCreateObjReply();
  ActivityRpcOpenActivityNotify::default_instance_ = new ActivityRpcOpenActivityNotify();
  ActivityRpcXingyaoAsk::default_instance_ = new ActivityRpcXingyaoAsk();
  ActivityRpcXingyaoReply::default_instance_ = new ActivityRpcXingyaoReply();
  ActivityRpcActivityTimeNotify::default_instance_ = new ActivityRpcActivityTimeNotify();
  ActivityRpcReqActivityTimeAsk::default_instance_ = new ActivityRpcReqActivityTimeAsk();
  ActivityRpcReqActivityTimeReply::default_instance_ = new ActivityRpcReqActivityTimeReply();
  ActivityRpcXingyaoNPCAsk::default_instance_ = new ActivityRpcXingyaoNPCAsk();
  ActivityRpcXingyaoNPCReply::default_instance_ = new ActivityRpcXingyaoNPCReply();
  ActivityRpcXingyaoRewardNotify::default_instance_ = new ActivityRpcXingyaoRewardNotify();
  ActivityRpcOperationTimeNotify::default_instance_ = new ActivityRpcOperationTimeNotify();
  ActivityRpcEliteMonsterInfoNotify::default_instance_->InitAsDefaultInstance();
  ActivityRpcCreateObjAsk::default_instance_->InitAsDefaultInstance();
  ActivityRpcCreateObjReply::default_instance_->InitAsDefaultInstance();
  ActivityRpcOpenActivityNotify::default_instance_->InitAsDefaultInstance();
  ActivityRpcXingyaoAsk::default_instance_->InitAsDefaultInstance();
  ActivityRpcXingyaoReply::default_instance_->InitAsDefaultInstance();
  ActivityRpcActivityTimeNotify::default_instance_->InitAsDefaultInstance();
  ActivityRpcReqActivityTimeAsk::default_instance_->InitAsDefaultInstance();
  ActivityRpcReqActivityTimeReply::default_instance_->InitAsDefaultInstance();
  ActivityRpcXingyaoNPCAsk::default_instance_->InitAsDefaultInstance();
  ActivityRpcXingyaoNPCReply::default_instance_->InitAsDefaultInstance();
  ActivityRpcXingyaoRewardNotify::default_instance_->InitAsDefaultInstance();
  ActivityRpcOperationTimeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityRpc_2eproto {
  StaticDescriptorInitializer_ActivityRpc_2eproto() {
    protobuf_AddDesc_ActivityRpc_2eproto();
  }
} static_descriptor_initializer_ActivityRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcEliteMonsterInfoNotify::kStateFieldNumber;
const int ActivityRpcEliteMonsterInfoNotify::kInfoFieldNumber;
#endif  // !_MSC_VER

ActivityRpcEliteMonsterInfoNotify::ActivityRpcEliteMonsterInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcEliteMonsterInfoNotify::InitAsDefaultInstance() {
  info_ = const_cast< ::EliteMonsterInfo*>(&::EliteMonsterInfo::default_instance());
}

ActivityRpcEliteMonsterInfoNotify::ActivityRpcEliteMonsterInfoNotify(const ActivityRpcEliteMonsterInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcEliteMonsterInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  state_ = -1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcEliteMonsterInfoNotify::~ActivityRpcEliteMonsterInfoNotify() {
  SharedDtor();
}

void ActivityRpcEliteMonsterInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ActivityRpcEliteMonsterInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcEliteMonsterInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcEliteMonsterInfoNotify_descriptor_;
}

const ActivityRpcEliteMonsterInfoNotify& ActivityRpcEliteMonsterInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcEliteMonsterInfoNotify* ActivityRpcEliteMonsterInfoNotify::default_instance_ = NULL;

ActivityRpcEliteMonsterInfoNotify* ActivityRpcEliteMonsterInfoNotify::New() const {
  return new ActivityRpcEliteMonsterInfoNotify;
}

void ActivityRpcEliteMonsterInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = -1;
    if (has_info()) {
      if (info_ != NULL) info_->::EliteMonsterInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcEliteMonsterInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 State = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Info;
        break;
      }

      // optional .EliteMonsterInfo Info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcEliteMonsterInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 State = 2 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional .EliteMonsterInfo Info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcEliteMonsterInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 State = 2 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional .EliteMonsterInfo Info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcEliteMonsterInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 State = 2 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .EliteMonsterInfo Info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcEliteMonsterInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcEliteMonsterInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcEliteMonsterInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcEliteMonsterInfoNotify::MergeFrom(const ActivityRpcEliteMonsterInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_info()) {
      mutable_info()->::EliteMonsterInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcEliteMonsterInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcEliteMonsterInfoNotify::CopyFrom(const ActivityRpcEliteMonsterInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcEliteMonsterInfoNotify::IsInitialized() const {

  return true;
}

void ActivityRpcEliteMonsterInfoNotify::Swap(ActivityRpcEliteMonsterInfoNotify* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcEliteMonsterInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcEliteMonsterInfoNotify_descriptor_;
  metadata.reflection = ActivityRpcEliteMonsterInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcCreateObjAsk::kCommonIdFieldNumber;
#endif  // !_MSC_VER

ActivityRpcCreateObjAsk::ActivityRpcCreateObjAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcCreateObjAsk::InitAsDefaultInstance() {
}

ActivityRpcCreateObjAsk::ActivityRpcCreateObjAsk(const ActivityRpcCreateObjAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcCreateObjAsk::SharedCtor() {
  _cached_size_ = 0;
  commonid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcCreateObjAsk::~ActivityRpcCreateObjAsk() {
  SharedDtor();
}

void ActivityRpcCreateObjAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcCreateObjAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcCreateObjAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcCreateObjAsk_descriptor_;
}

const ActivityRpcCreateObjAsk& ActivityRpcCreateObjAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcCreateObjAsk* ActivityRpcCreateObjAsk::default_instance_ = NULL;

ActivityRpcCreateObjAsk* ActivityRpcCreateObjAsk::New() const {
  return new ActivityRpcCreateObjAsk;
}

void ActivityRpcCreateObjAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commonid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcCreateObjAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CommonId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commonid_)));
          set_has_commonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcCreateObjAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CommonId = 1 [default = -1];
  if (has_commonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->commonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcCreateObjAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CommonId = 1 [default = -1];
  if (has_commonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->commonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcCreateObjAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CommonId = 1 [default = -1];
    if (has_commonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcCreateObjAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcCreateObjAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcCreateObjAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcCreateObjAsk::MergeFrom(const ActivityRpcCreateObjAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commonid()) {
      set_commonid(from.commonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcCreateObjAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcCreateObjAsk::CopyFrom(const ActivityRpcCreateObjAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcCreateObjAsk::IsInitialized() const {

  return true;
}

void ActivityRpcCreateObjAsk::Swap(ActivityRpcCreateObjAsk* other) {
  if (other != this) {
    std::swap(commonid_, other->commonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcCreateObjAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcCreateObjAsk_descriptor_;
  metadata.reflection = ActivityRpcCreateObjAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcCreateObjReply::kResultFieldNumber;
#endif  // !_MSC_VER

ActivityRpcCreateObjReply::ActivityRpcCreateObjReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcCreateObjReply::InitAsDefaultInstance() {
}

ActivityRpcCreateObjReply::ActivityRpcCreateObjReply(const ActivityRpcCreateObjReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcCreateObjReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcCreateObjReply::~ActivityRpcCreateObjReply() {
  SharedDtor();
}

void ActivityRpcCreateObjReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcCreateObjReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcCreateObjReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcCreateObjReply_descriptor_;
}

const ActivityRpcCreateObjReply& ActivityRpcCreateObjReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcCreateObjReply* ActivityRpcCreateObjReply::default_instance_ = NULL;

ActivityRpcCreateObjReply* ActivityRpcCreateObjReply::New() const {
  return new ActivityRpcCreateObjReply;
}

void ActivityRpcCreateObjReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcCreateObjReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcCreateObjReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcCreateObjReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcCreateObjReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcCreateObjReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcCreateObjReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcCreateObjReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcCreateObjReply::MergeFrom(const ActivityRpcCreateObjReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcCreateObjReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcCreateObjReply::CopyFrom(const ActivityRpcCreateObjReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcCreateObjReply::IsInitialized() const {

  return true;
}

void ActivityRpcCreateObjReply::Swap(ActivityRpcCreateObjReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcCreateObjReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcCreateObjReply_descriptor_;
  metadata.reflection = ActivityRpcCreateObjReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcOpenActivityNotify::kActIdFieldNumber;
const int ActivityRpcOpenActivityNotify::kDiffTmFieldNumber;
const int ActivityRpcOpenActivityNotify::kSceneIdFieldNumber;
const int ActivityRpcOpenActivityNotify::kPosFieldNumber;
#endif  // !_MSC_VER

ActivityRpcOpenActivityNotify::ActivityRpcOpenActivityNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcOpenActivityNotify::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

ActivityRpcOpenActivityNotify::ActivityRpcOpenActivityNotify(const ActivityRpcOpenActivityNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcOpenActivityNotify::SharedCtor() {
  _cached_size_ = 0;
  actid_ = -1;
  difftm_ = -1;
  sceneid_ = -1;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcOpenActivityNotify::~ActivityRpcOpenActivityNotify() {
  SharedDtor();
}

void ActivityRpcOpenActivityNotify::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ActivityRpcOpenActivityNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcOpenActivityNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcOpenActivityNotify_descriptor_;
}

const ActivityRpcOpenActivityNotify& ActivityRpcOpenActivityNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcOpenActivityNotify* ActivityRpcOpenActivityNotify::default_instance_ = NULL;

ActivityRpcOpenActivityNotify* ActivityRpcOpenActivityNotify::New() const {
  return new ActivityRpcOpenActivityNotify;
}

void ActivityRpcOpenActivityNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = -1;
    difftm_ = -1;
    sceneid_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcOpenActivityNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ActId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DiffTm;
        break;
      }

      // optional int32 DiffTm = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DiffTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difftm_)));
          set_has_difftm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcOpenActivityNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ActId = 1 [default = -1];
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // optional int32 DiffTm = 2 [default = -1];
  if (has_difftm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->difftm(), output);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // optional .Vector3 Pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcOpenActivityNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ActId = 1 [default = -1];
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // optional int32 DiffTm = 2 [default = -1];
  if (has_difftm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->difftm(), target);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // optional .Vector3 Pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcOpenActivityNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ActId = 1 [default = -1];
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional int32 DiffTm = 2 [default = -1];
    if (has_difftm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difftm());
    }

    // optional int32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional .Vector3 Pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcOpenActivityNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcOpenActivityNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcOpenActivityNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcOpenActivityNotify::MergeFrom(const ActivityRpcOpenActivityNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_difftm()) {
      set_difftm(from.difftm());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcOpenActivityNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcOpenActivityNotify::CopyFrom(const ActivityRpcOpenActivityNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcOpenActivityNotify::IsInitialized() const {

  return true;
}

void ActivityRpcOpenActivityNotify::Swap(ActivityRpcOpenActivityNotify* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(difftm_, other->difftm_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcOpenActivityNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcOpenActivityNotify_descriptor_;
  metadata.reflection = ActivityRpcOpenActivityNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcXingyaoAsk::kNPCidFieldNumber;
#endif  // !_MSC_VER

ActivityRpcXingyaoAsk::ActivityRpcXingyaoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcXingyaoAsk::InitAsDefaultInstance() {
}

ActivityRpcXingyaoAsk::ActivityRpcXingyaoAsk(const ActivityRpcXingyaoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcXingyaoAsk::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcXingyaoAsk::~ActivityRpcXingyaoAsk() {
  SharedDtor();
}

void ActivityRpcXingyaoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcXingyaoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcXingyaoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcXingyaoAsk_descriptor_;
}

const ActivityRpcXingyaoAsk& ActivityRpcXingyaoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcXingyaoAsk* ActivityRpcXingyaoAsk::default_instance_ = NULL;

ActivityRpcXingyaoAsk* ActivityRpcXingyaoAsk::New() const {
  return new ActivityRpcXingyaoAsk;
}

void ActivityRpcXingyaoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcXingyaoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NPCid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcXingyaoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 NPCid = 1 [default = -1];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcXingyaoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 NPCid = 1 [default = -1];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcXingyaoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NPCid = 1 [default = -1];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcXingyaoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcXingyaoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcXingyaoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcXingyaoAsk::MergeFrom(const ActivityRpcXingyaoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcXingyaoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcXingyaoAsk::CopyFrom(const ActivityRpcXingyaoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcXingyaoAsk::IsInitialized() const {

  return true;
}

void ActivityRpcXingyaoAsk::Swap(ActivityRpcXingyaoAsk* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcXingyaoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcXingyaoAsk_descriptor_;
  metadata.reflection = ActivityRpcXingyaoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcXingyaoReply::kResultFieldNumber;
#endif  // !_MSC_VER

ActivityRpcXingyaoReply::ActivityRpcXingyaoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcXingyaoReply::InitAsDefaultInstance() {
}

ActivityRpcXingyaoReply::ActivityRpcXingyaoReply(const ActivityRpcXingyaoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcXingyaoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcXingyaoReply::~ActivityRpcXingyaoReply() {
  SharedDtor();
}

void ActivityRpcXingyaoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcXingyaoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcXingyaoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcXingyaoReply_descriptor_;
}

const ActivityRpcXingyaoReply& ActivityRpcXingyaoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcXingyaoReply* ActivityRpcXingyaoReply::default_instance_ = NULL;

ActivityRpcXingyaoReply* ActivityRpcXingyaoReply::New() const {
  return new ActivityRpcXingyaoReply;
}

void ActivityRpcXingyaoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcXingyaoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcXingyaoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcXingyaoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcXingyaoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcXingyaoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcXingyaoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcXingyaoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcXingyaoReply::MergeFrom(const ActivityRpcXingyaoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcXingyaoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcXingyaoReply::CopyFrom(const ActivityRpcXingyaoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcXingyaoReply::IsInitialized() const {

  return true;
}

void ActivityRpcXingyaoReply::Swap(ActivityRpcXingyaoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcXingyaoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcXingyaoReply_descriptor_;
  metadata.reflection = ActivityRpcXingyaoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcActivityTimeNotify::kActTimeListFieldNumber;
#endif  // !_MSC_VER

ActivityRpcActivityTimeNotify::ActivityRpcActivityTimeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcActivityTimeNotify::InitAsDefaultInstance() {
}

ActivityRpcActivityTimeNotify::ActivityRpcActivityTimeNotify(const ActivityRpcActivityTimeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcActivityTimeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcActivityTimeNotify::~ActivityRpcActivityTimeNotify() {
  SharedDtor();
}

void ActivityRpcActivityTimeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcActivityTimeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcActivityTimeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcActivityTimeNotify_descriptor_;
}

const ActivityRpcActivityTimeNotify& ActivityRpcActivityTimeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcActivityTimeNotify* ActivityRpcActivityTimeNotify::default_instance_ = NULL;

ActivityRpcActivityTimeNotify* ActivityRpcActivityTimeNotify::New() const {
  return new ActivityRpcActivityTimeNotify;
}

void ActivityRpcActivityTimeNotify::Clear() {
  acttimelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcActivityTimeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityTime ActTimeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acttimelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ActTimeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcActivityTimeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ActivityTime ActTimeList = 1;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acttimelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcActivityTimeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ActivityTime ActTimeList = 1;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acttimelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcActivityTimeNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityTime ActTimeList = 1;
  total_size += 1 * this->acttimelist_size();
  for (int i = 0; i < this->acttimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acttimelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcActivityTimeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcActivityTimeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcActivityTimeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcActivityTimeNotify::MergeFrom(const ActivityRpcActivityTimeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  acttimelist_.MergeFrom(from.acttimelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcActivityTimeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcActivityTimeNotify::CopyFrom(const ActivityRpcActivityTimeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcActivityTimeNotify::IsInitialized() const {

  return true;
}

void ActivityRpcActivityTimeNotify::Swap(ActivityRpcActivityTimeNotify* other) {
  if (other != this) {
    acttimelist_.Swap(&other->acttimelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcActivityTimeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcActivityTimeNotify_descriptor_;
  metadata.reflection = ActivityRpcActivityTimeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActivityRpcReqActivityTimeAsk::ActivityRpcReqActivityTimeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcReqActivityTimeAsk::InitAsDefaultInstance() {
}

ActivityRpcReqActivityTimeAsk::ActivityRpcReqActivityTimeAsk(const ActivityRpcReqActivityTimeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcReqActivityTimeAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcReqActivityTimeAsk::~ActivityRpcReqActivityTimeAsk() {
  SharedDtor();
}

void ActivityRpcReqActivityTimeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcReqActivityTimeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcReqActivityTimeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcReqActivityTimeAsk_descriptor_;
}

const ActivityRpcReqActivityTimeAsk& ActivityRpcReqActivityTimeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcReqActivityTimeAsk* ActivityRpcReqActivityTimeAsk::default_instance_ = NULL;

ActivityRpcReqActivityTimeAsk* ActivityRpcReqActivityTimeAsk::New() const {
  return new ActivityRpcReqActivityTimeAsk;
}

void ActivityRpcReqActivityTimeAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcReqActivityTimeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActivityRpcReqActivityTimeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcReqActivityTimeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcReqActivityTimeAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcReqActivityTimeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcReqActivityTimeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcReqActivityTimeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcReqActivityTimeAsk::MergeFrom(const ActivityRpcReqActivityTimeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcReqActivityTimeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcReqActivityTimeAsk::CopyFrom(const ActivityRpcReqActivityTimeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcReqActivityTimeAsk::IsInitialized() const {

  return true;
}

void ActivityRpcReqActivityTimeAsk::Swap(ActivityRpcReqActivityTimeAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcReqActivityTimeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcReqActivityTimeAsk_descriptor_;
  metadata.reflection = ActivityRpcReqActivityTimeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcReqActivityTimeReply::kResultFieldNumber;
const int ActivityRpcReqActivityTimeReply::kActTimeListFieldNumber;
#endif  // !_MSC_VER

ActivityRpcReqActivityTimeReply::ActivityRpcReqActivityTimeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcReqActivityTimeReply::InitAsDefaultInstance() {
}

ActivityRpcReqActivityTimeReply::ActivityRpcReqActivityTimeReply(const ActivityRpcReqActivityTimeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcReqActivityTimeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcReqActivityTimeReply::~ActivityRpcReqActivityTimeReply() {
  SharedDtor();
}

void ActivityRpcReqActivityTimeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcReqActivityTimeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcReqActivityTimeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcReqActivityTimeReply_descriptor_;
}

const ActivityRpcReqActivityTimeReply& ActivityRpcReqActivityTimeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcReqActivityTimeReply* ActivityRpcReqActivityTimeReply::default_instance_ = NULL;

ActivityRpcReqActivityTimeReply* ActivityRpcReqActivityTimeReply::New() const {
  return new ActivityRpcReqActivityTimeReply;
}

void ActivityRpcReqActivityTimeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  acttimelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcReqActivityTimeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActTimeList;
        break;
      }

      // repeated .ActivityTime ActTimeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acttimelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActTimeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcReqActivityTimeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ActivityTime ActTimeList = 2;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acttimelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcReqActivityTimeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ActivityTime ActTimeList = 2;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acttimelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcReqActivityTimeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ActivityTime ActTimeList = 2;
  total_size += 1 * this->acttimelist_size();
  for (int i = 0; i < this->acttimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acttimelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcReqActivityTimeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcReqActivityTimeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcReqActivityTimeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcReqActivityTimeReply::MergeFrom(const ActivityRpcReqActivityTimeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  acttimelist_.MergeFrom(from.acttimelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcReqActivityTimeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcReqActivityTimeReply::CopyFrom(const ActivityRpcReqActivityTimeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcReqActivityTimeReply::IsInitialized() const {

  return true;
}

void ActivityRpcReqActivityTimeReply::Swap(ActivityRpcReqActivityTimeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    acttimelist_.Swap(&other->acttimelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcReqActivityTimeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcReqActivityTimeReply_descriptor_;
  metadata.reflection = ActivityRpcReqActivityTimeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActivityRpcXingyaoNPCAsk::ActivityRpcXingyaoNPCAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcXingyaoNPCAsk::InitAsDefaultInstance() {
}

ActivityRpcXingyaoNPCAsk::ActivityRpcXingyaoNPCAsk(const ActivityRpcXingyaoNPCAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcXingyaoNPCAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcXingyaoNPCAsk::~ActivityRpcXingyaoNPCAsk() {
  SharedDtor();
}

void ActivityRpcXingyaoNPCAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcXingyaoNPCAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcXingyaoNPCAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcXingyaoNPCAsk_descriptor_;
}

const ActivityRpcXingyaoNPCAsk& ActivityRpcXingyaoNPCAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcXingyaoNPCAsk* ActivityRpcXingyaoNPCAsk::default_instance_ = NULL;

ActivityRpcXingyaoNPCAsk* ActivityRpcXingyaoNPCAsk::New() const {
  return new ActivityRpcXingyaoNPCAsk;
}

void ActivityRpcXingyaoNPCAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcXingyaoNPCAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActivityRpcXingyaoNPCAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcXingyaoNPCAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcXingyaoNPCAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcXingyaoNPCAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcXingyaoNPCAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcXingyaoNPCAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcXingyaoNPCAsk::MergeFrom(const ActivityRpcXingyaoNPCAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcXingyaoNPCAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcXingyaoNPCAsk::CopyFrom(const ActivityRpcXingyaoNPCAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcXingyaoNPCAsk::IsInitialized() const {

  return true;
}

void ActivityRpcXingyaoNPCAsk::Swap(ActivityRpcXingyaoNPCAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcXingyaoNPCAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcXingyaoNPCAsk_descriptor_;
  metadata.reflection = ActivityRpcXingyaoNPCAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcXingyaoNPCReply::kResultFieldNumber;
const int ActivityRpcXingyaoNPCReply::kSceneidFieldNumber;
const int ActivityRpcXingyaoNPCReply::kWaypoinidFieldNumber;
#endif  // !_MSC_VER

ActivityRpcXingyaoNPCReply::ActivityRpcXingyaoNPCReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcXingyaoNPCReply::InitAsDefaultInstance() {
}

ActivityRpcXingyaoNPCReply::ActivityRpcXingyaoNPCReply(const ActivityRpcXingyaoNPCReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcXingyaoNPCReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  sceneid_ = -1;
  waypoinid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcXingyaoNPCReply::~ActivityRpcXingyaoNPCReply() {
  SharedDtor();
}

void ActivityRpcXingyaoNPCReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcXingyaoNPCReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcXingyaoNPCReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcXingyaoNPCReply_descriptor_;
}

const ActivityRpcXingyaoNPCReply& ActivityRpcXingyaoNPCReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcXingyaoNPCReply* ActivityRpcXingyaoNPCReply::default_instance_ = NULL;

ActivityRpcXingyaoNPCReply* ActivityRpcXingyaoNPCReply::New() const {
  return new ActivityRpcXingyaoNPCReply;
}

void ActivityRpcXingyaoNPCReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    sceneid_ = -1;
    waypoinid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcXingyaoNPCReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Sceneid;
        break;
      }

      // optional int32 Sceneid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Waypoinid;
        break;
      }

      // optional int32 Waypoinid = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Waypoinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waypoinid_)));
          set_has_waypoinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcXingyaoNPCReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Sceneid = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  // optional int32 Waypoinid = 3 [default = -1];
  if (has_waypoinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->waypoinid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcXingyaoNPCReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Sceneid = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  // optional int32 Waypoinid = 3 [default = -1];
  if (has_waypoinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->waypoinid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcXingyaoNPCReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Sceneid = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 Waypoinid = 3 [default = -1];
    if (has_waypoinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waypoinid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcXingyaoNPCReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcXingyaoNPCReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcXingyaoNPCReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcXingyaoNPCReply::MergeFrom(const ActivityRpcXingyaoNPCReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_waypoinid()) {
      set_waypoinid(from.waypoinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcXingyaoNPCReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcXingyaoNPCReply::CopyFrom(const ActivityRpcXingyaoNPCReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcXingyaoNPCReply::IsInitialized() const {

  return true;
}

void ActivityRpcXingyaoNPCReply::Swap(ActivityRpcXingyaoNPCReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(waypoinid_, other->waypoinid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcXingyaoNPCReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcXingyaoNPCReply_descriptor_;
  metadata.reflection = ActivityRpcXingyaoNPCReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActivityRpcXingyaoRewardNotify::ActivityRpcXingyaoRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcXingyaoRewardNotify::InitAsDefaultInstance() {
}

ActivityRpcXingyaoRewardNotify::ActivityRpcXingyaoRewardNotify(const ActivityRpcXingyaoRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcXingyaoRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcXingyaoRewardNotify::~ActivityRpcXingyaoRewardNotify() {
  SharedDtor();
}

void ActivityRpcXingyaoRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcXingyaoRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcXingyaoRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcXingyaoRewardNotify_descriptor_;
}

const ActivityRpcXingyaoRewardNotify& ActivityRpcXingyaoRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcXingyaoRewardNotify* ActivityRpcXingyaoRewardNotify::default_instance_ = NULL;

ActivityRpcXingyaoRewardNotify* ActivityRpcXingyaoRewardNotify::New() const {
  return new ActivityRpcXingyaoRewardNotify;
}

void ActivityRpcXingyaoRewardNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcXingyaoRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActivityRpcXingyaoRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcXingyaoRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcXingyaoRewardNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcXingyaoRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcXingyaoRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcXingyaoRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcXingyaoRewardNotify::MergeFrom(const ActivityRpcXingyaoRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcXingyaoRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcXingyaoRewardNotify::CopyFrom(const ActivityRpcXingyaoRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcXingyaoRewardNotify::IsInitialized() const {

  return true;
}

void ActivityRpcXingyaoRewardNotify::Swap(ActivityRpcXingyaoRewardNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcXingyaoRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcXingyaoRewardNotify_descriptor_;
  metadata.reflection = ActivityRpcXingyaoRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRpcOperationTimeNotify::kActTimeListFieldNumber;
#endif  // !_MSC_VER

ActivityRpcOperationTimeNotify::ActivityRpcOperationTimeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRpcOperationTimeNotify::InitAsDefaultInstance() {
}

ActivityRpcOperationTimeNotify::ActivityRpcOperationTimeNotify(const ActivityRpcOperationTimeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRpcOperationTimeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRpcOperationTimeNotify::~ActivityRpcOperationTimeNotify() {
  SharedDtor();
}

void ActivityRpcOperationTimeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRpcOperationTimeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRpcOperationTimeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRpcOperationTimeNotify_descriptor_;
}

const ActivityRpcOperationTimeNotify& ActivityRpcOperationTimeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRpc_2eproto();
  return *default_instance_;
}

ActivityRpcOperationTimeNotify* ActivityRpcOperationTimeNotify::default_instance_ = NULL;

ActivityRpcOperationTimeNotify* ActivityRpcOperationTimeNotify::New() const {
  return new ActivityRpcOperationTimeNotify;
}

void ActivityRpcOperationTimeNotify::Clear() {
  acttimelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRpcOperationTimeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityTime ActTimeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acttimelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ActTimeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRpcOperationTimeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ActivityTime ActTimeList = 1;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acttimelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRpcOperationTimeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ActivityTime ActTimeList = 1;
  for (int i = 0; i < this->acttimelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acttimelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRpcOperationTimeNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityTime ActTimeList = 1;
  total_size += 1 * this->acttimelist_size();
  for (int i = 0; i < this->acttimelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acttimelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRpcOperationTimeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRpcOperationTimeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRpcOperationTimeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRpcOperationTimeNotify::MergeFrom(const ActivityRpcOperationTimeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  acttimelist_.MergeFrom(from.acttimelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRpcOperationTimeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRpcOperationTimeNotify::CopyFrom(const ActivityRpcOperationTimeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRpcOperationTimeNotify::IsInitialized() const {

  return true;
}

void ActivityRpcOperationTimeNotify::Swap(ActivityRpcOperationTimeNotify* other) {
  if (other != this) {
    acttimelist_.Swap(&other->acttimelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRpcOperationTimeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRpcOperationTimeNotify_descriptor_;
  metadata.reflection = ActivityRpcOperationTimeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
