// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MedicamentRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MedicamentRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MedicamentRpcFillHpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcFillHpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcFillHpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcFillHpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcOneStepFillHpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcOneStepFillHpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcOneStepFillHpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcOneStepFillHpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcClientRefreshMedicamentAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcClientRefreshMedicamentAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcClientRefreshMedicamentReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcClientRefreshMedicamentReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcServerRefreshMedicamentNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcServerRefreshMedicamentNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcSyncMedicamentDataAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcSyncMedicamentDataAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcSyncMedicamentDataReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcSyncMedicamentDataReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcMedicamentCDAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcMedicamentCDReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicamentRpcMedicamentCDNotifyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MedicamentRpc_2eproto() {
  protobuf_AddDesc_MedicamentRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MedicamentRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MedicamentRpcFillHpAsk_descriptor_ = file->message_type(0);
  static const int MedicamentRpcFillHpAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpAsk, itemdata_),
  };
  MedicamentRpcFillHpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcFillHpAsk_descriptor_,
      MedicamentRpcFillHpAsk::default_instance_,
      MedicamentRpcFillHpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcFillHpAsk));
  MedicamentRpcFillHpReply_descriptor_ = file->message_type(1);
  static const int MedicamentRpcFillHpReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpReply, result_),
  };
  MedicamentRpcFillHpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcFillHpReply_descriptor_,
      MedicamentRpcFillHpReply::default_instance_,
      MedicamentRpcFillHpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcFillHpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcFillHpReply));
  MedicamentRpcOneStepFillHpAsk_descriptor_ = file->message_type(2);
  static const int MedicamentRpcOneStepFillHpAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpAsk, itemdata_),
  };
  MedicamentRpcOneStepFillHpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcOneStepFillHpAsk_descriptor_,
      MedicamentRpcOneStepFillHpAsk::default_instance_,
      MedicamentRpcOneStepFillHpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcOneStepFillHpAsk));
  MedicamentRpcOneStepFillHpReply_descriptor_ = file->message_type(3);
  static const int MedicamentRpcOneStepFillHpReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpReply, result_),
  };
  MedicamentRpcOneStepFillHpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcOneStepFillHpReply_descriptor_,
      MedicamentRpcOneStepFillHpReply::default_instance_,
      MedicamentRpcOneStepFillHpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcOneStepFillHpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcOneStepFillHpReply));
  MedicamentRpcClientRefreshMedicamentAsk_descriptor_ = file->message_type(4);
  static const int MedicamentRpcClientRefreshMedicamentAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentAsk, medicament_),
  };
  MedicamentRpcClientRefreshMedicamentAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcClientRefreshMedicamentAsk_descriptor_,
      MedicamentRpcClientRefreshMedicamentAsk::default_instance_,
      MedicamentRpcClientRefreshMedicamentAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcClientRefreshMedicamentAsk));
  MedicamentRpcClientRefreshMedicamentReply_descriptor_ = file->message_type(5);
  static const int MedicamentRpcClientRefreshMedicamentReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentReply, medicament_),
  };
  MedicamentRpcClientRefreshMedicamentReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcClientRefreshMedicamentReply_descriptor_,
      MedicamentRpcClientRefreshMedicamentReply::default_instance_,
      MedicamentRpcClientRefreshMedicamentReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcClientRefreshMedicamentReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcClientRefreshMedicamentReply));
  MedicamentRpcServerRefreshMedicamentNotify_descriptor_ = file->message_type(6);
  static const int MedicamentRpcServerRefreshMedicamentNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcServerRefreshMedicamentNotify, medicament_),
  };
  MedicamentRpcServerRefreshMedicamentNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcServerRefreshMedicamentNotify_descriptor_,
      MedicamentRpcServerRefreshMedicamentNotify::default_instance_,
      MedicamentRpcServerRefreshMedicamentNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcServerRefreshMedicamentNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcServerRefreshMedicamentNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcServerRefreshMedicamentNotify));
  MedicamentRpcSyncMedicamentDataAsk_descriptor_ = file->message_type(7);
  static const int MedicamentRpcSyncMedicamentDataAsk_offsets_[1] = {
  };
  MedicamentRpcSyncMedicamentDataAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcSyncMedicamentDataAsk_descriptor_,
      MedicamentRpcSyncMedicamentDataAsk::default_instance_,
      MedicamentRpcSyncMedicamentDataAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcSyncMedicamentDataAsk));
  MedicamentRpcSyncMedicamentDataReply_descriptor_ = file->message_type(8);
  static const int MedicamentRpcSyncMedicamentDataReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataReply, medicament_),
  };
  MedicamentRpcSyncMedicamentDataReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcSyncMedicamentDataReply_descriptor_,
      MedicamentRpcSyncMedicamentDataReply::default_instance_,
      MedicamentRpcSyncMedicamentDataReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcSyncMedicamentDataReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcSyncMedicamentDataReply));
  MedicamentRpcMedicamentCDAsk_descriptor_ = file->message_type(9);
  static const int MedicamentRpcMedicamentCDAsk_offsets_[1] = {
  };
  MedicamentRpcMedicamentCDAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcMedicamentCDAsk_descriptor_,
      MedicamentRpcMedicamentCDAsk::default_instance_,
      MedicamentRpcMedicamentCDAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcMedicamentCDAsk));
  MedicamentRpcMedicamentCDReply_descriptor_ = file->message_type(10);
  static const int MedicamentRpcMedicamentCDReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDReply, lefttime_),
  };
  MedicamentRpcMedicamentCDReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcMedicamentCDReply_descriptor_,
      MedicamentRpcMedicamentCDReply::default_instance_,
      MedicamentRpcMedicamentCDReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcMedicamentCDReply));
  MedicamentRpcMedicamentCDNotifyNotify_descriptor_ = file->message_type(11);
  static const int MedicamentRpcMedicamentCDNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDNotifyNotify, lefttime_),
  };
  MedicamentRpcMedicamentCDNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicamentRpcMedicamentCDNotifyNotify_descriptor_,
      MedicamentRpcMedicamentCDNotifyNotify::default_instance_,
      MedicamentRpcMedicamentCDNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicamentRpcMedicamentCDNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicamentRpcMedicamentCDNotifyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MedicamentRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcFillHpAsk_descriptor_, &MedicamentRpcFillHpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcFillHpReply_descriptor_, &MedicamentRpcFillHpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcOneStepFillHpAsk_descriptor_, &MedicamentRpcOneStepFillHpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcOneStepFillHpReply_descriptor_, &MedicamentRpcOneStepFillHpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcClientRefreshMedicamentAsk_descriptor_, &MedicamentRpcClientRefreshMedicamentAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcClientRefreshMedicamentReply_descriptor_, &MedicamentRpcClientRefreshMedicamentReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcServerRefreshMedicamentNotify_descriptor_, &MedicamentRpcServerRefreshMedicamentNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcSyncMedicamentDataAsk_descriptor_, &MedicamentRpcSyncMedicamentDataAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcSyncMedicamentDataReply_descriptor_, &MedicamentRpcSyncMedicamentDataReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcMedicamentCDAsk_descriptor_, &MedicamentRpcMedicamentCDAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcMedicamentCDReply_descriptor_, &MedicamentRpcMedicamentCDReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicamentRpcMedicamentCDNotifyNotify_descriptor_, &MedicamentRpcMedicamentCDNotifyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MedicamentRpc_2eproto() {
  delete MedicamentRpcFillHpAsk::default_instance_;
  delete MedicamentRpcFillHpAsk_reflection_;
  delete MedicamentRpcFillHpReply::default_instance_;
  delete MedicamentRpcFillHpReply_reflection_;
  delete MedicamentRpcOneStepFillHpAsk::default_instance_;
  delete MedicamentRpcOneStepFillHpAsk_reflection_;
  delete MedicamentRpcOneStepFillHpReply::default_instance_;
  delete MedicamentRpcOneStepFillHpReply_reflection_;
  delete MedicamentRpcClientRefreshMedicamentAsk::default_instance_;
  delete MedicamentRpcClientRefreshMedicamentAsk_reflection_;
  delete MedicamentRpcClientRefreshMedicamentReply::default_instance_;
  delete MedicamentRpcClientRefreshMedicamentReply_reflection_;
  delete MedicamentRpcServerRefreshMedicamentNotify::default_instance_;
  delete MedicamentRpcServerRefreshMedicamentNotify_reflection_;
  delete MedicamentRpcSyncMedicamentDataAsk::default_instance_;
  delete MedicamentRpcSyncMedicamentDataAsk_reflection_;
  delete MedicamentRpcSyncMedicamentDataReply::default_instance_;
  delete MedicamentRpcSyncMedicamentDataReply_reflection_;
  delete MedicamentRpcMedicamentCDAsk::default_instance_;
  delete MedicamentRpcMedicamentCDAsk_reflection_;
  delete MedicamentRpcMedicamentCDReply::default_instance_;
  delete MedicamentRpcMedicamentCDReply_reflection_;
  delete MedicamentRpcMedicamentCDNotifyNotify::default_instance_;
  delete MedicamentRpcMedicamentCDNotifyNotify_reflection_;
}

void protobuf_AddDesc_MedicamentRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MedicamentRpc.proto\032\022PublicStruct.prot"
    "o\";\n\026MedicamentRpcFillHpAsk\022!\n\010ItemData\030"
    "\001 \001(\0132\017.ItemSimpleData\".\n\030MedicamentRpcF"
    "illHpReply\022\022\n\006Result\030\001 \001(\005:\002-1\"B\n\035Medica"
    "mentRpcOneStepFillHpAsk\022!\n\010ItemData\030\003 \003("
    "\0132\017.ItemSimpleData\"5\n\037MedicamentRpcOneSt"
    "epFillHpReply\022\022\n\006Result\030\001 \001(\005:\002-1\"Q\n\'Med"
    "icamentRpcClientRefreshMedicamentAsk\022&\n\n"
    "Medicament\030\001 \001(\0132\022.RecoverMedicament\"g\n)"
    "MedicamentRpcClientRefreshMedicamentRepl"
    "y\022\022\n\006Result\030\001 \001(\005:\002-1\022&\n\nMedicament\030\002 \001("
    "\0132\022.RecoverMedicament\"T\n*MedicamentRpcSe"
    "rverRefreshMedicamentNotify\022&\n\nMedicamen"
    "t\030\001 \001(\0132\022.RecoverMedicament\"$\n\"Medicamen"
    "tRpcSyncMedicamentDataAsk\"b\n$MedicamentR"
    "pcSyncMedicamentDataReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1\022&\n\nMedicament\030\002 \001(\0132\022.RecoverMedic"
    "ament\"\036\n\034MedicamentRpcMedicamentCDAsk\"J\n"
    "\036MedicamentRpcMedicamentCDReply\022\022\n\006Resul"
    "t\030\001 \001(\005:\002-1\022\024\n\010LeftTime\030\002 \001(\005:\002-1\"=\n%Med"
    "icamentRpcMedicamentCDNotifyNotify\022\024\n\010Le"
    "ftTime\030\001 \001(\005:\002-1", 856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MedicamentRpc.proto", &protobuf_RegisterTypes);
  MedicamentRpcFillHpAsk::default_instance_ = new MedicamentRpcFillHpAsk();
  MedicamentRpcFillHpReply::default_instance_ = new MedicamentRpcFillHpReply();
  MedicamentRpcOneStepFillHpAsk::default_instance_ = new MedicamentRpcOneStepFillHpAsk();
  MedicamentRpcOneStepFillHpReply::default_instance_ = new MedicamentRpcOneStepFillHpReply();
  MedicamentRpcClientRefreshMedicamentAsk::default_instance_ = new MedicamentRpcClientRefreshMedicamentAsk();
  MedicamentRpcClientRefreshMedicamentReply::default_instance_ = new MedicamentRpcClientRefreshMedicamentReply();
  MedicamentRpcServerRefreshMedicamentNotify::default_instance_ = new MedicamentRpcServerRefreshMedicamentNotify();
  MedicamentRpcSyncMedicamentDataAsk::default_instance_ = new MedicamentRpcSyncMedicamentDataAsk();
  MedicamentRpcSyncMedicamentDataReply::default_instance_ = new MedicamentRpcSyncMedicamentDataReply();
  MedicamentRpcMedicamentCDAsk::default_instance_ = new MedicamentRpcMedicamentCDAsk();
  MedicamentRpcMedicamentCDReply::default_instance_ = new MedicamentRpcMedicamentCDReply();
  MedicamentRpcMedicamentCDNotifyNotify::default_instance_ = new MedicamentRpcMedicamentCDNotifyNotify();
  MedicamentRpcFillHpAsk::default_instance_->InitAsDefaultInstance();
  MedicamentRpcFillHpReply::default_instance_->InitAsDefaultInstance();
  MedicamentRpcOneStepFillHpAsk::default_instance_->InitAsDefaultInstance();
  MedicamentRpcOneStepFillHpReply::default_instance_->InitAsDefaultInstance();
  MedicamentRpcClientRefreshMedicamentAsk::default_instance_->InitAsDefaultInstance();
  MedicamentRpcClientRefreshMedicamentReply::default_instance_->InitAsDefaultInstance();
  MedicamentRpcServerRefreshMedicamentNotify::default_instance_->InitAsDefaultInstance();
  MedicamentRpcSyncMedicamentDataAsk::default_instance_->InitAsDefaultInstance();
  MedicamentRpcSyncMedicamentDataReply::default_instance_->InitAsDefaultInstance();
  MedicamentRpcMedicamentCDAsk::default_instance_->InitAsDefaultInstance();
  MedicamentRpcMedicamentCDReply::default_instance_->InitAsDefaultInstance();
  MedicamentRpcMedicamentCDNotifyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MedicamentRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MedicamentRpc_2eproto {
  StaticDescriptorInitializer_MedicamentRpc_2eproto() {
    protobuf_AddDesc_MedicamentRpc_2eproto();
  }
} static_descriptor_initializer_MedicamentRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcFillHpAsk::kItemDataFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcFillHpAsk::MedicamentRpcFillHpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcFillHpAsk::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::ItemSimpleData*>(&::ItemSimpleData::default_instance());
}

MedicamentRpcFillHpAsk::MedicamentRpcFillHpAsk(const MedicamentRpcFillHpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcFillHpAsk::SharedCtor() {
  _cached_size_ = 0;
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcFillHpAsk::~MedicamentRpcFillHpAsk() {
  SharedDtor();
}

void MedicamentRpcFillHpAsk::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void MedicamentRpcFillHpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcFillHpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcFillHpAsk_descriptor_;
}

const MedicamentRpcFillHpAsk& MedicamentRpcFillHpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcFillHpAsk* MedicamentRpcFillHpAsk::default_instance_ = NULL;

MedicamentRpcFillHpAsk* MedicamentRpcFillHpAsk::New() const {
  return new MedicamentRpcFillHpAsk;
}

void MedicamentRpcFillHpAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::ItemSimpleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcFillHpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemSimpleData ItemData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcFillHpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemSimpleData ItemData = 1;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcFillHpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ItemSimpleData ItemData = 1;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcFillHpAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemSimpleData ItemData = 1;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcFillHpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcFillHpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcFillHpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcFillHpAsk::MergeFrom(const MedicamentRpcFillHpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemdata()) {
      mutable_itemdata()->::ItemSimpleData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcFillHpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcFillHpAsk::CopyFrom(const MedicamentRpcFillHpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcFillHpAsk::IsInitialized() const {

  return true;
}

void MedicamentRpcFillHpAsk::Swap(MedicamentRpcFillHpAsk* other) {
  if (other != this) {
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcFillHpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcFillHpAsk_descriptor_;
  metadata.reflection = MedicamentRpcFillHpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcFillHpReply::kResultFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcFillHpReply::MedicamentRpcFillHpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcFillHpReply::InitAsDefaultInstance() {
}

MedicamentRpcFillHpReply::MedicamentRpcFillHpReply(const MedicamentRpcFillHpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcFillHpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcFillHpReply::~MedicamentRpcFillHpReply() {
  SharedDtor();
}

void MedicamentRpcFillHpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcFillHpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcFillHpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcFillHpReply_descriptor_;
}

const MedicamentRpcFillHpReply& MedicamentRpcFillHpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcFillHpReply* MedicamentRpcFillHpReply::default_instance_ = NULL;

MedicamentRpcFillHpReply* MedicamentRpcFillHpReply::New() const {
  return new MedicamentRpcFillHpReply;
}

void MedicamentRpcFillHpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcFillHpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcFillHpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcFillHpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcFillHpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcFillHpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcFillHpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcFillHpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcFillHpReply::MergeFrom(const MedicamentRpcFillHpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcFillHpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcFillHpReply::CopyFrom(const MedicamentRpcFillHpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcFillHpReply::IsInitialized() const {

  return true;
}

void MedicamentRpcFillHpReply::Swap(MedicamentRpcFillHpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcFillHpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcFillHpReply_descriptor_;
  metadata.reflection = MedicamentRpcFillHpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcOneStepFillHpAsk::kItemDataFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcOneStepFillHpAsk::MedicamentRpcOneStepFillHpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcOneStepFillHpAsk::InitAsDefaultInstance() {
}

MedicamentRpcOneStepFillHpAsk::MedicamentRpcOneStepFillHpAsk(const MedicamentRpcOneStepFillHpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcOneStepFillHpAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcOneStepFillHpAsk::~MedicamentRpcOneStepFillHpAsk() {
  SharedDtor();
}

void MedicamentRpcOneStepFillHpAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcOneStepFillHpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcOneStepFillHpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcOneStepFillHpAsk_descriptor_;
}

const MedicamentRpcOneStepFillHpAsk& MedicamentRpcOneStepFillHpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcOneStepFillHpAsk* MedicamentRpcOneStepFillHpAsk::default_instance_ = NULL;

MedicamentRpcOneStepFillHpAsk* MedicamentRpcOneStepFillHpAsk::New() const {
  return new MedicamentRpcOneStepFillHpAsk;
}

void MedicamentRpcOneStepFillHpAsk::Clear() {
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcOneStepFillHpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemSimpleData ItemData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcOneStepFillHpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemSimpleData ItemData = 3;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcOneStepFillHpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemSimpleData ItemData = 3;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcOneStepFillHpAsk::ByteSize() const {
  int total_size = 0;

  // repeated .ItemSimpleData ItemData = 3;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcOneStepFillHpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcOneStepFillHpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcOneStepFillHpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcOneStepFillHpAsk::MergeFrom(const MedicamentRpcOneStepFillHpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcOneStepFillHpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcOneStepFillHpAsk::CopyFrom(const MedicamentRpcOneStepFillHpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcOneStepFillHpAsk::IsInitialized() const {

  return true;
}

void MedicamentRpcOneStepFillHpAsk::Swap(MedicamentRpcOneStepFillHpAsk* other) {
  if (other != this) {
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcOneStepFillHpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcOneStepFillHpAsk_descriptor_;
  metadata.reflection = MedicamentRpcOneStepFillHpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcOneStepFillHpReply::kResultFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcOneStepFillHpReply::MedicamentRpcOneStepFillHpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcOneStepFillHpReply::InitAsDefaultInstance() {
}

MedicamentRpcOneStepFillHpReply::MedicamentRpcOneStepFillHpReply(const MedicamentRpcOneStepFillHpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcOneStepFillHpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcOneStepFillHpReply::~MedicamentRpcOneStepFillHpReply() {
  SharedDtor();
}

void MedicamentRpcOneStepFillHpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcOneStepFillHpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcOneStepFillHpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcOneStepFillHpReply_descriptor_;
}

const MedicamentRpcOneStepFillHpReply& MedicamentRpcOneStepFillHpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcOneStepFillHpReply* MedicamentRpcOneStepFillHpReply::default_instance_ = NULL;

MedicamentRpcOneStepFillHpReply* MedicamentRpcOneStepFillHpReply::New() const {
  return new MedicamentRpcOneStepFillHpReply;
}

void MedicamentRpcOneStepFillHpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcOneStepFillHpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcOneStepFillHpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcOneStepFillHpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcOneStepFillHpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcOneStepFillHpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcOneStepFillHpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcOneStepFillHpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcOneStepFillHpReply::MergeFrom(const MedicamentRpcOneStepFillHpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcOneStepFillHpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcOneStepFillHpReply::CopyFrom(const MedicamentRpcOneStepFillHpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcOneStepFillHpReply::IsInitialized() const {

  return true;
}

void MedicamentRpcOneStepFillHpReply::Swap(MedicamentRpcOneStepFillHpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcOneStepFillHpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcOneStepFillHpReply_descriptor_;
  metadata.reflection = MedicamentRpcOneStepFillHpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcClientRefreshMedicamentAsk::kMedicamentFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcClientRefreshMedicamentAsk::MedicamentRpcClientRefreshMedicamentAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcClientRefreshMedicamentAsk::InitAsDefaultInstance() {
  medicament_ = const_cast< ::RecoverMedicament*>(&::RecoverMedicament::default_instance());
}

MedicamentRpcClientRefreshMedicamentAsk::MedicamentRpcClientRefreshMedicamentAsk(const MedicamentRpcClientRefreshMedicamentAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcClientRefreshMedicamentAsk::SharedCtor() {
  _cached_size_ = 0;
  medicament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcClientRefreshMedicamentAsk::~MedicamentRpcClientRefreshMedicamentAsk() {
  SharedDtor();
}

void MedicamentRpcClientRefreshMedicamentAsk::SharedDtor() {
  if (this != default_instance_) {
    delete medicament_;
  }
}

void MedicamentRpcClientRefreshMedicamentAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcClientRefreshMedicamentAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcClientRefreshMedicamentAsk_descriptor_;
}

const MedicamentRpcClientRefreshMedicamentAsk& MedicamentRpcClientRefreshMedicamentAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcClientRefreshMedicamentAsk* MedicamentRpcClientRefreshMedicamentAsk::default_instance_ = NULL;

MedicamentRpcClientRefreshMedicamentAsk* MedicamentRpcClientRefreshMedicamentAsk::New() const {
  return new MedicamentRpcClientRefreshMedicamentAsk;
}

void MedicamentRpcClientRefreshMedicamentAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_medicament()) {
      if (medicament_ != NULL) medicament_->::RecoverMedicament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcClientRefreshMedicamentAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RecoverMedicament Medicament = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medicament()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcClientRefreshMedicamentAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RecoverMedicament Medicament = 1;
  if (has_medicament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->medicament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcClientRefreshMedicamentAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RecoverMedicament Medicament = 1;
  if (has_medicament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->medicament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcClientRefreshMedicamentAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RecoverMedicament Medicament = 1;
    if (has_medicament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medicament());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcClientRefreshMedicamentAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcClientRefreshMedicamentAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcClientRefreshMedicamentAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcClientRefreshMedicamentAsk::MergeFrom(const MedicamentRpcClientRefreshMedicamentAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_medicament()) {
      mutable_medicament()->::RecoverMedicament::MergeFrom(from.medicament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcClientRefreshMedicamentAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcClientRefreshMedicamentAsk::CopyFrom(const MedicamentRpcClientRefreshMedicamentAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcClientRefreshMedicamentAsk::IsInitialized() const {

  return true;
}

void MedicamentRpcClientRefreshMedicamentAsk::Swap(MedicamentRpcClientRefreshMedicamentAsk* other) {
  if (other != this) {
    std::swap(medicament_, other->medicament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcClientRefreshMedicamentAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcClientRefreshMedicamentAsk_descriptor_;
  metadata.reflection = MedicamentRpcClientRefreshMedicamentAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcClientRefreshMedicamentReply::kResultFieldNumber;
const int MedicamentRpcClientRefreshMedicamentReply::kMedicamentFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcClientRefreshMedicamentReply::MedicamentRpcClientRefreshMedicamentReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcClientRefreshMedicamentReply::InitAsDefaultInstance() {
  medicament_ = const_cast< ::RecoverMedicament*>(&::RecoverMedicament::default_instance());
}

MedicamentRpcClientRefreshMedicamentReply::MedicamentRpcClientRefreshMedicamentReply(const MedicamentRpcClientRefreshMedicamentReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcClientRefreshMedicamentReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  medicament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcClientRefreshMedicamentReply::~MedicamentRpcClientRefreshMedicamentReply() {
  SharedDtor();
}

void MedicamentRpcClientRefreshMedicamentReply::SharedDtor() {
  if (this != default_instance_) {
    delete medicament_;
  }
}

void MedicamentRpcClientRefreshMedicamentReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcClientRefreshMedicamentReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcClientRefreshMedicamentReply_descriptor_;
}

const MedicamentRpcClientRefreshMedicamentReply& MedicamentRpcClientRefreshMedicamentReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcClientRefreshMedicamentReply* MedicamentRpcClientRefreshMedicamentReply::default_instance_ = NULL;

MedicamentRpcClientRefreshMedicamentReply* MedicamentRpcClientRefreshMedicamentReply::New() const {
  return new MedicamentRpcClientRefreshMedicamentReply;
}

void MedicamentRpcClientRefreshMedicamentReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_medicament()) {
      if (medicament_ != NULL) medicament_->::RecoverMedicament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcClientRefreshMedicamentReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Medicament;
        break;
      }

      // optional .RecoverMedicament Medicament = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Medicament:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medicament()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcClientRefreshMedicamentReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .RecoverMedicament Medicament = 2;
  if (has_medicament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->medicament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcClientRefreshMedicamentReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .RecoverMedicament Medicament = 2;
  if (has_medicament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->medicament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcClientRefreshMedicamentReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .RecoverMedicament Medicament = 2;
    if (has_medicament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medicament());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcClientRefreshMedicamentReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcClientRefreshMedicamentReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcClientRefreshMedicamentReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcClientRefreshMedicamentReply::MergeFrom(const MedicamentRpcClientRefreshMedicamentReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_medicament()) {
      mutable_medicament()->::RecoverMedicament::MergeFrom(from.medicament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcClientRefreshMedicamentReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcClientRefreshMedicamentReply::CopyFrom(const MedicamentRpcClientRefreshMedicamentReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcClientRefreshMedicamentReply::IsInitialized() const {

  return true;
}

void MedicamentRpcClientRefreshMedicamentReply::Swap(MedicamentRpcClientRefreshMedicamentReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(medicament_, other->medicament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcClientRefreshMedicamentReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcClientRefreshMedicamentReply_descriptor_;
  metadata.reflection = MedicamentRpcClientRefreshMedicamentReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcServerRefreshMedicamentNotify::kMedicamentFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcServerRefreshMedicamentNotify::MedicamentRpcServerRefreshMedicamentNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcServerRefreshMedicamentNotify::InitAsDefaultInstance() {
  medicament_ = const_cast< ::RecoverMedicament*>(&::RecoverMedicament::default_instance());
}

MedicamentRpcServerRefreshMedicamentNotify::MedicamentRpcServerRefreshMedicamentNotify(const MedicamentRpcServerRefreshMedicamentNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcServerRefreshMedicamentNotify::SharedCtor() {
  _cached_size_ = 0;
  medicament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcServerRefreshMedicamentNotify::~MedicamentRpcServerRefreshMedicamentNotify() {
  SharedDtor();
}

void MedicamentRpcServerRefreshMedicamentNotify::SharedDtor() {
  if (this != default_instance_) {
    delete medicament_;
  }
}

void MedicamentRpcServerRefreshMedicamentNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcServerRefreshMedicamentNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcServerRefreshMedicamentNotify_descriptor_;
}

const MedicamentRpcServerRefreshMedicamentNotify& MedicamentRpcServerRefreshMedicamentNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcServerRefreshMedicamentNotify* MedicamentRpcServerRefreshMedicamentNotify::default_instance_ = NULL;

MedicamentRpcServerRefreshMedicamentNotify* MedicamentRpcServerRefreshMedicamentNotify::New() const {
  return new MedicamentRpcServerRefreshMedicamentNotify;
}

void MedicamentRpcServerRefreshMedicamentNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_medicament()) {
      if (medicament_ != NULL) medicament_->::RecoverMedicament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcServerRefreshMedicamentNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RecoverMedicament Medicament = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medicament()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcServerRefreshMedicamentNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RecoverMedicament Medicament = 1;
  if (has_medicament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->medicament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcServerRefreshMedicamentNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RecoverMedicament Medicament = 1;
  if (has_medicament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->medicament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcServerRefreshMedicamentNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RecoverMedicament Medicament = 1;
    if (has_medicament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medicament());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcServerRefreshMedicamentNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcServerRefreshMedicamentNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcServerRefreshMedicamentNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcServerRefreshMedicamentNotify::MergeFrom(const MedicamentRpcServerRefreshMedicamentNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_medicament()) {
      mutable_medicament()->::RecoverMedicament::MergeFrom(from.medicament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcServerRefreshMedicamentNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcServerRefreshMedicamentNotify::CopyFrom(const MedicamentRpcServerRefreshMedicamentNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcServerRefreshMedicamentNotify::IsInitialized() const {

  return true;
}

void MedicamentRpcServerRefreshMedicamentNotify::Swap(MedicamentRpcServerRefreshMedicamentNotify* other) {
  if (other != this) {
    std::swap(medicament_, other->medicament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcServerRefreshMedicamentNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcServerRefreshMedicamentNotify_descriptor_;
  metadata.reflection = MedicamentRpcServerRefreshMedicamentNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MedicamentRpcSyncMedicamentDataAsk::MedicamentRpcSyncMedicamentDataAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcSyncMedicamentDataAsk::InitAsDefaultInstance() {
}

MedicamentRpcSyncMedicamentDataAsk::MedicamentRpcSyncMedicamentDataAsk(const MedicamentRpcSyncMedicamentDataAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcSyncMedicamentDataAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcSyncMedicamentDataAsk::~MedicamentRpcSyncMedicamentDataAsk() {
  SharedDtor();
}

void MedicamentRpcSyncMedicamentDataAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcSyncMedicamentDataAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcSyncMedicamentDataAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcSyncMedicamentDataAsk_descriptor_;
}

const MedicamentRpcSyncMedicamentDataAsk& MedicamentRpcSyncMedicamentDataAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcSyncMedicamentDataAsk* MedicamentRpcSyncMedicamentDataAsk::default_instance_ = NULL;

MedicamentRpcSyncMedicamentDataAsk* MedicamentRpcSyncMedicamentDataAsk::New() const {
  return new MedicamentRpcSyncMedicamentDataAsk;
}

void MedicamentRpcSyncMedicamentDataAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcSyncMedicamentDataAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MedicamentRpcSyncMedicamentDataAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcSyncMedicamentDataAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcSyncMedicamentDataAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcSyncMedicamentDataAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcSyncMedicamentDataAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcSyncMedicamentDataAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcSyncMedicamentDataAsk::MergeFrom(const MedicamentRpcSyncMedicamentDataAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcSyncMedicamentDataAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcSyncMedicamentDataAsk::CopyFrom(const MedicamentRpcSyncMedicamentDataAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcSyncMedicamentDataAsk::IsInitialized() const {

  return true;
}

void MedicamentRpcSyncMedicamentDataAsk::Swap(MedicamentRpcSyncMedicamentDataAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcSyncMedicamentDataAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcSyncMedicamentDataAsk_descriptor_;
  metadata.reflection = MedicamentRpcSyncMedicamentDataAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcSyncMedicamentDataReply::kResultFieldNumber;
const int MedicamentRpcSyncMedicamentDataReply::kMedicamentFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcSyncMedicamentDataReply::MedicamentRpcSyncMedicamentDataReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcSyncMedicamentDataReply::InitAsDefaultInstance() {
  medicament_ = const_cast< ::RecoverMedicament*>(&::RecoverMedicament::default_instance());
}

MedicamentRpcSyncMedicamentDataReply::MedicamentRpcSyncMedicamentDataReply(const MedicamentRpcSyncMedicamentDataReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcSyncMedicamentDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  medicament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcSyncMedicamentDataReply::~MedicamentRpcSyncMedicamentDataReply() {
  SharedDtor();
}

void MedicamentRpcSyncMedicamentDataReply::SharedDtor() {
  if (this != default_instance_) {
    delete medicament_;
  }
}

void MedicamentRpcSyncMedicamentDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcSyncMedicamentDataReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcSyncMedicamentDataReply_descriptor_;
}

const MedicamentRpcSyncMedicamentDataReply& MedicamentRpcSyncMedicamentDataReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcSyncMedicamentDataReply* MedicamentRpcSyncMedicamentDataReply::default_instance_ = NULL;

MedicamentRpcSyncMedicamentDataReply* MedicamentRpcSyncMedicamentDataReply::New() const {
  return new MedicamentRpcSyncMedicamentDataReply;
}

void MedicamentRpcSyncMedicamentDataReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_medicament()) {
      if (medicament_ != NULL) medicament_->::RecoverMedicament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcSyncMedicamentDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Medicament;
        break;
      }

      // optional .RecoverMedicament Medicament = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Medicament:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medicament()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcSyncMedicamentDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .RecoverMedicament Medicament = 2;
  if (has_medicament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->medicament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcSyncMedicamentDataReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .RecoverMedicament Medicament = 2;
  if (has_medicament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->medicament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcSyncMedicamentDataReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .RecoverMedicament Medicament = 2;
    if (has_medicament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medicament());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcSyncMedicamentDataReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcSyncMedicamentDataReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcSyncMedicamentDataReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcSyncMedicamentDataReply::MergeFrom(const MedicamentRpcSyncMedicamentDataReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_medicament()) {
      mutable_medicament()->::RecoverMedicament::MergeFrom(from.medicament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcSyncMedicamentDataReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcSyncMedicamentDataReply::CopyFrom(const MedicamentRpcSyncMedicamentDataReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcSyncMedicamentDataReply::IsInitialized() const {

  return true;
}

void MedicamentRpcSyncMedicamentDataReply::Swap(MedicamentRpcSyncMedicamentDataReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(medicament_, other->medicament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcSyncMedicamentDataReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcSyncMedicamentDataReply_descriptor_;
  metadata.reflection = MedicamentRpcSyncMedicamentDataReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MedicamentRpcMedicamentCDAsk::MedicamentRpcMedicamentCDAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcMedicamentCDAsk::InitAsDefaultInstance() {
}

MedicamentRpcMedicamentCDAsk::MedicamentRpcMedicamentCDAsk(const MedicamentRpcMedicamentCDAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcMedicamentCDAsk::~MedicamentRpcMedicamentCDAsk() {
  SharedDtor();
}

void MedicamentRpcMedicamentCDAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcMedicamentCDAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcMedicamentCDAsk_descriptor_;
}

const MedicamentRpcMedicamentCDAsk& MedicamentRpcMedicamentCDAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcMedicamentCDAsk* MedicamentRpcMedicamentCDAsk::default_instance_ = NULL;

MedicamentRpcMedicamentCDAsk* MedicamentRpcMedicamentCDAsk::New() const {
  return new MedicamentRpcMedicamentCDAsk;
}

void MedicamentRpcMedicamentCDAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcMedicamentCDAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MedicamentRpcMedicamentCDAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcMedicamentCDAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcMedicamentCDAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcMedicamentCDAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcMedicamentCDAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcMedicamentCDAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcMedicamentCDAsk::MergeFrom(const MedicamentRpcMedicamentCDAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcMedicamentCDAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDAsk::CopyFrom(const MedicamentRpcMedicamentCDAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcMedicamentCDAsk::IsInitialized() const {

  return true;
}

void MedicamentRpcMedicamentCDAsk::Swap(MedicamentRpcMedicamentCDAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcMedicamentCDAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcMedicamentCDAsk_descriptor_;
  metadata.reflection = MedicamentRpcMedicamentCDAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcMedicamentCDReply::kResultFieldNumber;
const int MedicamentRpcMedicamentCDReply::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcMedicamentCDReply::MedicamentRpcMedicamentCDReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcMedicamentCDReply::InitAsDefaultInstance() {
}

MedicamentRpcMedicamentCDReply::MedicamentRpcMedicamentCDReply(const MedicamentRpcMedicamentCDReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  lefttime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcMedicamentCDReply::~MedicamentRpcMedicamentCDReply() {
  SharedDtor();
}

void MedicamentRpcMedicamentCDReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcMedicamentCDReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcMedicamentCDReply_descriptor_;
}

const MedicamentRpcMedicamentCDReply& MedicamentRpcMedicamentCDReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcMedicamentCDReply* MedicamentRpcMedicamentCDReply::default_instance_ = NULL;

MedicamentRpcMedicamentCDReply* MedicamentRpcMedicamentCDReply::New() const {
  return new MedicamentRpcMedicamentCDReply;
}

void MedicamentRpcMedicamentCDReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    lefttime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcMedicamentCDReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftTime;
        break;
      }

      // optional int32 LeftTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcMedicamentCDReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 LeftTime = 2 [default = -1];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcMedicamentCDReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 LeftTime = 2 [default = -1];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcMedicamentCDReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 LeftTime = 2 [default = -1];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcMedicamentCDReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcMedicamentCDReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcMedicamentCDReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcMedicamentCDReply::MergeFrom(const MedicamentRpcMedicamentCDReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcMedicamentCDReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDReply::CopyFrom(const MedicamentRpcMedicamentCDReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcMedicamentCDReply::IsInitialized() const {

  return true;
}

void MedicamentRpcMedicamentCDReply::Swap(MedicamentRpcMedicamentCDReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcMedicamentCDReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcMedicamentCDReply_descriptor_;
  metadata.reflection = MedicamentRpcMedicamentCDReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicamentRpcMedicamentCDNotifyNotify::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

MedicamentRpcMedicamentCDNotifyNotify::MedicamentRpcMedicamentCDNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedicamentRpcMedicamentCDNotifyNotify::InitAsDefaultInstance() {
}

MedicamentRpcMedicamentCDNotifyNotify::MedicamentRpcMedicamentCDNotifyNotify(const MedicamentRpcMedicamentCDNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  lefttime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicamentRpcMedicamentCDNotifyNotify::~MedicamentRpcMedicamentCDNotifyNotify() {
  SharedDtor();
}

void MedicamentRpcMedicamentCDNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedicamentRpcMedicamentCDNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedicamentRpcMedicamentCDNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicamentRpcMedicamentCDNotifyNotify_descriptor_;
}

const MedicamentRpcMedicamentCDNotifyNotify& MedicamentRpcMedicamentCDNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MedicamentRpc_2eproto();
  return *default_instance_;
}

MedicamentRpcMedicamentCDNotifyNotify* MedicamentRpcMedicamentCDNotifyNotify::default_instance_ = NULL;

MedicamentRpcMedicamentCDNotifyNotify* MedicamentRpcMedicamentCDNotifyNotify::New() const {
  return new MedicamentRpcMedicamentCDNotifyNotify;
}

void MedicamentRpcMedicamentCDNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lefttime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicamentRpcMedicamentCDNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LeftTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicamentRpcMedicamentCDNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LeftTime = 1 [default = -1];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicamentRpcMedicamentCDNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LeftTime = 1 [default = -1];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicamentRpcMedicamentCDNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LeftTime = 1 [default = -1];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedicamentRpcMedicamentCDNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicamentRpcMedicamentCDNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicamentRpcMedicamentCDNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicamentRpcMedicamentCDNotifyNotify::MergeFrom(const MedicamentRpcMedicamentCDNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicamentRpcMedicamentCDNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicamentRpcMedicamentCDNotifyNotify::CopyFrom(const MedicamentRpcMedicamentCDNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicamentRpcMedicamentCDNotifyNotify::IsInitialized() const {

  return true;
}

void MedicamentRpcMedicamentCDNotifyNotify::Swap(MedicamentRpcMedicamentCDNotifyNotify* other) {
  if (other != this) {
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicamentRpcMedicamentCDNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicamentRpcMedicamentCDNotifyNotify_descriptor_;
  metadata.reflection = MedicamentRpcMedicamentCDNotifyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
