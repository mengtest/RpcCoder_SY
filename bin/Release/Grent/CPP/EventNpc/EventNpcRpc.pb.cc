// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventNpcRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventNpcRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EventNpcRpcBeginEventAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNpcRpcBeginEventAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventNpcRpcBeginEventReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNpcRpcBeginEventReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventNpcRpcEndEventAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNpcRpcEndEventAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventNpcRpcEndEventReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNpcRpcEndEventReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventNpcRpcActivityBeginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventNpcRpcActivityBeginNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EventNpcRpc_2eproto() {
  protobuf_AddDesc_EventNpcRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EventNpcRpc.proto");
  GOOGLE_CHECK(file != NULL);
  EventNpcRpcBeginEventAsk_descriptor_ = file->message_type(0);
  static const int EventNpcRpcBeginEventAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventAsk, eventindex_),
  };
  EventNpcRpcBeginEventAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNpcRpcBeginEventAsk_descriptor_,
      EventNpcRpcBeginEventAsk::default_instance_,
      EventNpcRpcBeginEventAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNpcRpcBeginEventAsk));
  EventNpcRpcBeginEventReply_descriptor_ = file->message_type(1);
  static const int EventNpcRpcBeginEventReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventReply, result_),
  };
  EventNpcRpcBeginEventReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNpcRpcBeginEventReply_descriptor_,
      EventNpcRpcBeginEventReply::default_instance_,
      EventNpcRpcBeginEventReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcBeginEventReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNpcRpcBeginEventReply));
  EventNpcRpcEndEventAsk_descriptor_ = file->message_type(2);
  static const int EventNpcRpcEndEventAsk_offsets_[1] = {
  };
  EventNpcRpcEndEventAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNpcRpcEndEventAsk_descriptor_,
      EventNpcRpcEndEventAsk::default_instance_,
      EventNpcRpcEndEventAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcEndEventAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcEndEventAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNpcRpcEndEventAsk));
  EventNpcRpcEndEventReply_descriptor_ = file->message_type(3);
  static const int EventNpcRpcEndEventReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcEndEventReply, result_),
  };
  EventNpcRpcEndEventReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNpcRpcEndEventReply_descriptor_,
      EventNpcRpcEndEventReply::default_instance_,
      EventNpcRpcEndEventReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcEndEventReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcEndEventReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNpcRpcEndEventReply));
  EventNpcRpcActivityBeginNotify_descriptor_ = file->message_type(4);
  static const int EventNpcRpcActivityBeginNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcActivityBeginNotify, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcActivityBeginNotify, waypoint_),
  };
  EventNpcRpcActivityBeginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventNpcRpcActivityBeginNotify_descriptor_,
      EventNpcRpcActivityBeginNotify::default_instance_,
      EventNpcRpcActivityBeginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcActivityBeginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNpcRpcActivityBeginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventNpcRpcActivityBeginNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EventNpcRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNpcRpcBeginEventAsk_descriptor_, &EventNpcRpcBeginEventAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNpcRpcBeginEventReply_descriptor_, &EventNpcRpcBeginEventReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNpcRpcEndEventAsk_descriptor_, &EventNpcRpcEndEventAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNpcRpcEndEventReply_descriptor_, &EventNpcRpcEndEventReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventNpcRpcActivityBeginNotify_descriptor_, &EventNpcRpcActivityBeginNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EventNpcRpc_2eproto() {
  delete EventNpcRpcBeginEventAsk::default_instance_;
  delete EventNpcRpcBeginEventAsk_reflection_;
  delete EventNpcRpcBeginEventReply::default_instance_;
  delete EventNpcRpcBeginEventReply_reflection_;
  delete EventNpcRpcEndEventAsk::default_instance_;
  delete EventNpcRpcEndEventAsk_reflection_;
  delete EventNpcRpcEndEventReply::default_instance_;
  delete EventNpcRpcEndEventReply_reflection_;
  delete EventNpcRpcActivityBeginNotify::default_instance_;
  delete EventNpcRpcActivityBeginNotify_reflection_;
}

void protobuf_AddDesc_EventNpcRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021EventNpcRpc.proto\032\022PublicStruct.proto\""
    "2\n\030EventNpcRpcBeginEventAsk\022\026\n\nEventInde"
    "x\030\001 \001(\005:\002-1\"0\n\032EventNpcRpcBeginEventRepl"
    "y\022\022\n\006Result\030\001 \001(\005:\002-1\"\030\n\026EventNpcRpcEndE"
    "ventAsk\".\n\030EventNpcRpcEndEventReply\022\022\n\006R"
    "esult\030\001 \001(\005:\002-1\"M\n\036EventNpcRpcActivityBe"
    "ginNotify\022\025\n\tStartTime\030\001 \001(\005:\002-1\022\024\n\010WayP"
    "oint\030\004 \001(\005:\002-1", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EventNpcRpc.proto", &protobuf_RegisterTypes);
  EventNpcRpcBeginEventAsk::default_instance_ = new EventNpcRpcBeginEventAsk();
  EventNpcRpcBeginEventReply::default_instance_ = new EventNpcRpcBeginEventReply();
  EventNpcRpcEndEventAsk::default_instance_ = new EventNpcRpcEndEventAsk();
  EventNpcRpcEndEventReply::default_instance_ = new EventNpcRpcEndEventReply();
  EventNpcRpcActivityBeginNotify::default_instance_ = new EventNpcRpcActivityBeginNotify();
  EventNpcRpcBeginEventAsk::default_instance_->InitAsDefaultInstance();
  EventNpcRpcBeginEventReply::default_instance_->InitAsDefaultInstance();
  EventNpcRpcEndEventAsk::default_instance_->InitAsDefaultInstance();
  EventNpcRpcEndEventReply::default_instance_->InitAsDefaultInstance();
  EventNpcRpcActivityBeginNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EventNpcRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EventNpcRpc_2eproto {
  StaticDescriptorInitializer_EventNpcRpc_2eproto() {
    protobuf_AddDesc_EventNpcRpc_2eproto();
  }
} static_descriptor_initializer_EventNpcRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EventNpcRpcBeginEventAsk::kEventIndexFieldNumber;
#endif  // !_MSC_VER

EventNpcRpcBeginEventAsk::EventNpcRpcBeginEventAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNpcRpcBeginEventAsk::InitAsDefaultInstance() {
}

EventNpcRpcBeginEventAsk::EventNpcRpcBeginEventAsk(const EventNpcRpcBeginEventAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNpcRpcBeginEventAsk::SharedCtor() {
  _cached_size_ = 0;
  eventindex_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNpcRpcBeginEventAsk::~EventNpcRpcBeginEventAsk() {
  SharedDtor();
}

void EventNpcRpcBeginEventAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNpcRpcBeginEventAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNpcRpcBeginEventAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNpcRpcBeginEventAsk_descriptor_;
}

const EventNpcRpcBeginEventAsk& EventNpcRpcBeginEventAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventNpcRpc_2eproto();
  return *default_instance_;
}

EventNpcRpcBeginEventAsk* EventNpcRpcBeginEventAsk::default_instance_ = NULL;

EventNpcRpcBeginEventAsk* EventNpcRpcBeginEventAsk::New() const {
  return new EventNpcRpcBeginEventAsk;
}

void EventNpcRpcBeginEventAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventindex_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNpcRpcBeginEventAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EventIndex = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventindex_)));
          set_has_eventindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventNpcRpcBeginEventAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EventIndex = 1 [default = -1];
  if (has_eventindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNpcRpcBeginEventAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EventIndex = 1 [default = -1];
  if (has_eventindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNpcRpcBeginEventAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EventIndex = 1 [default = -1];
    if (has_eventindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNpcRpcBeginEventAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNpcRpcBeginEventAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNpcRpcBeginEventAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNpcRpcBeginEventAsk::MergeFrom(const EventNpcRpcBeginEventAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventindex()) {
      set_eventindex(from.eventindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNpcRpcBeginEventAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNpcRpcBeginEventAsk::CopyFrom(const EventNpcRpcBeginEventAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNpcRpcBeginEventAsk::IsInitialized() const {

  return true;
}

void EventNpcRpcBeginEventAsk::Swap(EventNpcRpcBeginEventAsk* other) {
  if (other != this) {
    std::swap(eventindex_, other->eventindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNpcRpcBeginEventAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNpcRpcBeginEventAsk_descriptor_;
  metadata.reflection = EventNpcRpcBeginEventAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventNpcRpcBeginEventReply::kResultFieldNumber;
#endif  // !_MSC_VER

EventNpcRpcBeginEventReply::EventNpcRpcBeginEventReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNpcRpcBeginEventReply::InitAsDefaultInstance() {
}

EventNpcRpcBeginEventReply::EventNpcRpcBeginEventReply(const EventNpcRpcBeginEventReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNpcRpcBeginEventReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNpcRpcBeginEventReply::~EventNpcRpcBeginEventReply() {
  SharedDtor();
}

void EventNpcRpcBeginEventReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNpcRpcBeginEventReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNpcRpcBeginEventReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNpcRpcBeginEventReply_descriptor_;
}

const EventNpcRpcBeginEventReply& EventNpcRpcBeginEventReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventNpcRpc_2eproto();
  return *default_instance_;
}

EventNpcRpcBeginEventReply* EventNpcRpcBeginEventReply::default_instance_ = NULL;

EventNpcRpcBeginEventReply* EventNpcRpcBeginEventReply::New() const {
  return new EventNpcRpcBeginEventReply;
}

void EventNpcRpcBeginEventReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNpcRpcBeginEventReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventNpcRpcBeginEventReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNpcRpcBeginEventReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNpcRpcBeginEventReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNpcRpcBeginEventReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNpcRpcBeginEventReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNpcRpcBeginEventReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNpcRpcBeginEventReply::MergeFrom(const EventNpcRpcBeginEventReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNpcRpcBeginEventReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNpcRpcBeginEventReply::CopyFrom(const EventNpcRpcBeginEventReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNpcRpcBeginEventReply::IsInitialized() const {

  return true;
}

void EventNpcRpcBeginEventReply::Swap(EventNpcRpcBeginEventReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNpcRpcBeginEventReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNpcRpcBeginEventReply_descriptor_;
  metadata.reflection = EventNpcRpcBeginEventReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EventNpcRpcEndEventAsk::EventNpcRpcEndEventAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNpcRpcEndEventAsk::InitAsDefaultInstance() {
}

EventNpcRpcEndEventAsk::EventNpcRpcEndEventAsk(const EventNpcRpcEndEventAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNpcRpcEndEventAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNpcRpcEndEventAsk::~EventNpcRpcEndEventAsk() {
  SharedDtor();
}

void EventNpcRpcEndEventAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNpcRpcEndEventAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNpcRpcEndEventAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNpcRpcEndEventAsk_descriptor_;
}

const EventNpcRpcEndEventAsk& EventNpcRpcEndEventAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventNpcRpc_2eproto();
  return *default_instance_;
}

EventNpcRpcEndEventAsk* EventNpcRpcEndEventAsk::default_instance_ = NULL;

EventNpcRpcEndEventAsk* EventNpcRpcEndEventAsk::New() const {
  return new EventNpcRpcEndEventAsk;
}

void EventNpcRpcEndEventAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNpcRpcEndEventAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EventNpcRpcEndEventAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNpcRpcEndEventAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNpcRpcEndEventAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNpcRpcEndEventAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNpcRpcEndEventAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNpcRpcEndEventAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNpcRpcEndEventAsk::MergeFrom(const EventNpcRpcEndEventAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNpcRpcEndEventAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNpcRpcEndEventAsk::CopyFrom(const EventNpcRpcEndEventAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNpcRpcEndEventAsk::IsInitialized() const {

  return true;
}

void EventNpcRpcEndEventAsk::Swap(EventNpcRpcEndEventAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNpcRpcEndEventAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNpcRpcEndEventAsk_descriptor_;
  metadata.reflection = EventNpcRpcEndEventAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventNpcRpcEndEventReply::kResultFieldNumber;
#endif  // !_MSC_VER

EventNpcRpcEndEventReply::EventNpcRpcEndEventReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNpcRpcEndEventReply::InitAsDefaultInstance() {
}

EventNpcRpcEndEventReply::EventNpcRpcEndEventReply(const EventNpcRpcEndEventReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNpcRpcEndEventReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNpcRpcEndEventReply::~EventNpcRpcEndEventReply() {
  SharedDtor();
}

void EventNpcRpcEndEventReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNpcRpcEndEventReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNpcRpcEndEventReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNpcRpcEndEventReply_descriptor_;
}

const EventNpcRpcEndEventReply& EventNpcRpcEndEventReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventNpcRpc_2eproto();
  return *default_instance_;
}

EventNpcRpcEndEventReply* EventNpcRpcEndEventReply::default_instance_ = NULL;

EventNpcRpcEndEventReply* EventNpcRpcEndEventReply::New() const {
  return new EventNpcRpcEndEventReply;
}

void EventNpcRpcEndEventReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNpcRpcEndEventReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventNpcRpcEndEventReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNpcRpcEndEventReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNpcRpcEndEventReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNpcRpcEndEventReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNpcRpcEndEventReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNpcRpcEndEventReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNpcRpcEndEventReply::MergeFrom(const EventNpcRpcEndEventReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNpcRpcEndEventReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNpcRpcEndEventReply::CopyFrom(const EventNpcRpcEndEventReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNpcRpcEndEventReply::IsInitialized() const {

  return true;
}

void EventNpcRpcEndEventReply::Swap(EventNpcRpcEndEventReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNpcRpcEndEventReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNpcRpcEndEventReply_descriptor_;
  metadata.reflection = EventNpcRpcEndEventReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventNpcRpcActivityBeginNotify::kStartTimeFieldNumber;
const int EventNpcRpcActivityBeginNotify::kWayPointFieldNumber;
#endif  // !_MSC_VER

EventNpcRpcActivityBeginNotify::EventNpcRpcActivityBeginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventNpcRpcActivityBeginNotify::InitAsDefaultInstance() {
}

EventNpcRpcActivityBeginNotify::EventNpcRpcActivityBeginNotify(const EventNpcRpcActivityBeginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventNpcRpcActivityBeginNotify::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = -1;
  waypoint_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventNpcRpcActivityBeginNotify::~EventNpcRpcActivityBeginNotify() {
  SharedDtor();
}

void EventNpcRpcActivityBeginNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventNpcRpcActivityBeginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNpcRpcActivityBeginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventNpcRpcActivityBeginNotify_descriptor_;
}

const EventNpcRpcActivityBeginNotify& EventNpcRpcActivityBeginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventNpcRpc_2eproto();
  return *default_instance_;
}

EventNpcRpcActivityBeginNotify* EventNpcRpcActivityBeginNotify::default_instance_ = NULL;

EventNpcRpcActivityBeginNotify* EventNpcRpcActivityBeginNotify::New() const {
  return new EventNpcRpcActivityBeginNotify;
}

void EventNpcRpcActivityBeginNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = -1;
    waypoint_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventNpcRpcActivityBeginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 StartTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WayPoint;
        break;
      }

      // optional int32 WayPoint = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WayPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waypoint_)));
          set_has_waypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventNpcRpcActivityBeginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 StartTime = 1 [default = -1];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->waypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventNpcRpcActivityBeginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 StartTime = 1 [default = -1];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->waypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventNpcRpcActivityBeginNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 StartTime = 1 [default = -1];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 WayPoint = 4 [default = -1];
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waypoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNpcRpcActivityBeginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventNpcRpcActivityBeginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventNpcRpcActivityBeginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventNpcRpcActivityBeginNotify::MergeFrom(const EventNpcRpcActivityBeginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_waypoint()) {
      set_waypoint(from.waypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventNpcRpcActivityBeginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNpcRpcActivityBeginNotify::CopyFrom(const EventNpcRpcActivityBeginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNpcRpcActivityBeginNotify::IsInitialized() const {

  return true;
}

void EventNpcRpcActivityBeginNotify::Swap(EventNpcRpcActivityBeginNotify* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(waypoint_, other->waypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventNpcRpcActivityBeginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventNpcRpcActivityBeginNotify_descriptor_;
  metadata.reflection = EventNpcRpcActivityBeginNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
