// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WelfareRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WelfareRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WelfareRpcAccumulateSignInAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcAccumulateSignInAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcAccumulateSignInReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcAccumulateSignInReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcAccumulateGetRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcAccumulateGetRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcAccumulateGetRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcAccumulateGetRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcOnlineBonusAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcOnlineBonusAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcOnlineBonusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcOnlineBonusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcOnlineGetRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcOnlineGetRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcOnlineGetRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcOnlineGetRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcLevelBonusAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcLevelBonusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcLevelBonusRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcLevelBonusRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInBonusAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcMonthSignInBonusAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInBonusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcMonthSignInBonusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcMonthSignInRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcMonthSignInRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcTodaySignInNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcTodaySignInNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcSpecLoginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcSpecLoginRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareRpcSpecLoginRewardReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WelfareRpc_2eproto() {
  protobuf_AddDesc_WelfareRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WelfareRpc.proto");
  GOOGLE_CHECK(file != NULL);
  WelfareRpcAccumulateSignInAsk_descriptor_ = file->message_type(0);
  static const int WelfareRpcAccumulateSignInAsk_offsets_[1] = {
  };
  WelfareRpcAccumulateSignInAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcAccumulateSignInAsk_descriptor_,
      WelfareRpcAccumulateSignInAsk::default_instance_,
      WelfareRpcAccumulateSignInAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcAccumulateSignInAsk));
  WelfareRpcAccumulateSignInReply_descriptor_ = file->message_type(1);
  static const int WelfareRpcAccumulateSignInReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInReply, accumulatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInReply, accumulatedays_),
  };
  WelfareRpcAccumulateSignInReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcAccumulateSignInReply_descriptor_,
      WelfareRpcAccumulateSignInReply::default_instance_,
      WelfareRpcAccumulateSignInReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateSignInReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcAccumulateSignInReply));
  WelfareRpcAccumulateGetRewardAsk_descriptor_ = file->message_type(2);
  static const int WelfareRpcAccumulateGetRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardAsk, id_),
  };
  WelfareRpcAccumulateGetRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcAccumulateGetRewardAsk_descriptor_,
      WelfareRpcAccumulateGetRewardAsk::default_instance_,
      WelfareRpcAccumulateGetRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcAccumulateGetRewardAsk));
  WelfareRpcAccumulateGetRewardReply_descriptor_ = file->message_type(3);
  static const int WelfareRpcAccumulateGetRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardReply, rewardid_),
  };
  WelfareRpcAccumulateGetRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcAccumulateGetRewardReply_descriptor_,
      WelfareRpcAccumulateGetRewardReply::default_instance_,
      WelfareRpcAccumulateGetRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcAccumulateGetRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcAccumulateGetRewardReply));
  WelfareRpcOnlineBonusAsk_descriptor_ = file->message_type(4);
  static const int WelfareRpcOnlineBonusAsk_offsets_[1] = {
  };
  WelfareRpcOnlineBonusAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcOnlineBonusAsk_descriptor_,
      WelfareRpcOnlineBonusAsk::default_instance_,
      WelfareRpcOnlineBonusAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcOnlineBonusAsk));
  WelfareRpcOnlineBonusReply_descriptor_ = file->message_type(5);
  static const int WelfareRpcOnlineBonusReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusReply, onlinebonuslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusReply, todayonlinetime_),
  };
  WelfareRpcOnlineBonusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcOnlineBonusReply_descriptor_,
      WelfareRpcOnlineBonusReply::default_instance_,
      WelfareRpcOnlineBonusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineBonusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcOnlineBonusReply));
  WelfareRpcOnlineGetRewardAsk_descriptor_ = file->message_type(6);
  static const int WelfareRpcOnlineGetRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardAsk, id_),
  };
  WelfareRpcOnlineGetRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcOnlineGetRewardAsk_descriptor_,
      WelfareRpcOnlineGetRewardAsk::default_instance_,
      WelfareRpcOnlineGetRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcOnlineGetRewardAsk));
  WelfareRpcOnlineGetRewardReply_descriptor_ = file->message_type(7);
  static const int WelfareRpcOnlineGetRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardReply, rewardid_),
  };
  WelfareRpcOnlineGetRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcOnlineGetRewardReply_descriptor_,
      WelfareRpcOnlineGetRewardReply::default_instance_,
      WelfareRpcOnlineGetRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcOnlineGetRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcOnlineGetRewardReply));
  WelfareRpcLevelBonusAsk_descriptor_ = file->message_type(8);
  static const int WelfareRpcLevelBonusAsk_offsets_[1] = {
  };
  WelfareRpcLevelBonusAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcLevelBonusAsk_descriptor_,
      WelfareRpcLevelBonusAsk::default_instance_,
      WelfareRpcLevelBonusAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcLevelBonusAsk));
  WelfareRpcLevelBonusReply_descriptor_ = file->message_type(9);
  static const int WelfareRpcLevelBonusReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusReply, levelbonuslist_),
  };
  WelfareRpcLevelBonusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcLevelBonusReply_descriptor_,
      WelfareRpcLevelBonusReply::default_instance_,
      WelfareRpcLevelBonusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcLevelBonusReply));
  WelfareRpcLevelBonusRewardAsk_descriptor_ = file->message_type(10);
  static const int WelfareRpcLevelBonusRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardAsk, id_),
  };
  WelfareRpcLevelBonusRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcLevelBonusRewardAsk_descriptor_,
      WelfareRpcLevelBonusRewardAsk::default_instance_,
      WelfareRpcLevelBonusRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcLevelBonusRewardAsk));
  WelfareRpcLevelBonusRewardReply_descriptor_ = file->message_type(11);
  static const int WelfareRpcLevelBonusRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardReply, rewardid_),
  };
  WelfareRpcLevelBonusRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcLevelBonusRewardReply_descriptor_,
      WelfareRpcLevelBonusRewardReply::default_instance_,
      WelfareRpcLevelBonusRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcLevelBonusRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcLevelBonusRewardReply));
  WelfareRpcMonthSignInBonusAsk_descriptor_ = file->message_type(12);
  static const int WelfareRpcMonthSignInBonusAsk_offsets_[1] = {
  };
  WelfareRpcMonthSignInBonusAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcMonthSignInBonusAsk_descriptor_,
      WelfareRpcMonthSignInBonusAsk::default_instance_,
      WelfareRpcMonthSignInBonusAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcMonthSignInBonusAsk));
  WelfareRpcMonthSignInBonusReply_descriptor_ = file->message_type(13);
  static const int WelfareRpcMonthSignInBonusReply_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, fixsignintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, monthsigninlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, todaysignin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, fixsignindays_),
  };
  WelfareRpcMonthSignInBonusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcMonthSignInBonusReply_descriptor_,
      WelfareRpcMonthSignInBonusReply::default_instance_,
      WelfareRpcMonthSignInBonusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInBonusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcMonthSignInBonusReply));
  WelfareRpcMonthSignInRewardAsk_descriptor_ = file->message_type(14);
  static const int WelfareRpcMonthSignInRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardAsk, id_),
  };
  WelfareRpcMonthSignInRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcMonthSignInRewardAsk_descriptor_,
      WelfareRpcMonthSignInRewardAsk::default_instance_,
      WelfareRpcMonthSignInRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcMonthSignInRewardAsk));
  WelfareRpcMonthSignInRewardReply_descriptor_ = file->message_type(15);
  static const int WelfareRpcMonthSignInRewardReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardReply, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardReply, fixsignintimes_),
  };
  WelfareRpcMonthSignInRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcMonthSignInRewardReply_descriptor_,
      WelfareRpcMonthSignInRewardReply::default_instance_,
      WelfareRpcMonthSignInRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcMonthSignInRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcMonthSignInRewardReply));
  WelfareRpcTodaySignInNotify_descriptor_ = file->message_type(16);
  static const int WelfareRpcTodaySignInNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcTodaySignInNotify, todaysignin_),
  };
  WelfareRpcTodaySignInNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcTodaySignInNotify_descriptor_,
      WelfareRpcTodaySignInNotify::default_instance_,
      WelfareRpcTodaySignInNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcTodaySignInNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcTodaySignInNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcTodaySignInNotify));
  WelfareRpcSpecLoginNotify_descriptor_ = file->message_type(17);
  static const int WelfareRpcSpecLoginNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginNotify, speclogin_),
  };
  WelfareRpcSpecLoginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcSpecLoginNotify_descriptor_,
      WelfareRpcSpecLoginNotify::default_instance_,
      WelfareRpcSpecLoginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcSpecLoginNotify));
  WelfareRpcSpecLoginRewardAsk_descriptor_ = file->message_type(18);
  static const int WelfareRpcSpecLoginRewardAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardAsk, index_),
  };
  WelfareRpcSpecLoginRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcSpecLoginRewardAsk_descriptor_,
      WelfareRpcSpecLoginRewardAsk::default_instance_,
      WelfareRpcSpecLoginRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcSpecLoginRewardAsk));
  WelfareRpcSpecLoginRewardReply_descriptor_ = file->message_type(19);
  static const int WelfareRpcSpecLoginRewardReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardReply, result_),
  };
  WelfareRpcSpecLoginRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareRpcSpecLoginRewardReply_descriptor_,
      WelfareRpcSpecLoginRewardReply::default_instance_,
      WelfareRpcSpecLoginRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareRpcSpecLoginRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareRpcSpecLoginRewardReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WelfareRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcAccumulateSignInAsk_descriptor_, &WelfareRpcAccumulateSignInAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcAccumulateSignInReply_descriptor_, &WelfareRpcAccumulateSignInReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcAccumulateGetRewardAsk_descriptor_, &WelfareRpcAccumulateGetRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcAccumulateGetRewardReply_descriptor_, &WelfareRpcAccumulateGetRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcOnlineBonusAsk_descriptor_, &WelfareRpcOnlineBonusAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcOnlineBonusReply_descriptor_, &WelfareRpcOnlineBonusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcOnlineGetRewardAsk_descriptor_, &WelfareRpcOnlineGetRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcOnlineGetRewardReply_descriptor_, &WelfareRpcOnlineGetRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcLevelBonusAsk_descriptor_, &WelfareRpcLevelBonusAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcLevelBonusReply_descriptor_, &WelfareRpcLevelBonusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcLevelBonusRewardAsk_descriptor_, &WelfareRpcLevelBonusRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcLevelBonusRewardReply_descriptor_, &WelfareRpcLevelBonusRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcMonthSignInBonusAsk_descriptor_, &WelfareRpcMonthSignInBonusAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcMonthSignInBonusReply_descriptor_, &WelfareRpcMonthSignInBonusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcMonthSignInRewardAsk_descriptor_, &WelfareRpcMonthSignInRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcMonthSignInRewardReply_descriptor_, &WelfareRpcMonthSignInRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcTodaySignInNotify_descriptor_, &WelfareRpcTodaySignInNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcSpecLoginNotify_descriptor_, &WelfareRpcSpecLoginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcSpecLoginRewardAsk_descriptor_, &WelfareRpcSpecLoginRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareRpcSpecLoginRewardReply_descriptor_, &WelfareRpcSpecLoginRewardReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WelfareRpc_2eproto() {
  delete WelfareRpcAccumulateSignInAsk::default_instance_;
  delete WelfareRpcAccumulateSignInAsk_reflection_;
  delete WelfareRpcAccumulateSignInReply::default_instance_;
  delete WelfareRpcAccumulateSignInReply_reflection_;
  delete WelfareRpcAccumulateGetRewardAsk::default_instance_;
  delete WelfareRpcAccumulateGetRewardAsk_reflection_;
  delete WelfareRpcAccumulateGetRewardReply::default_instance_;
  delete WelfareRpcAccumulateGetRewardReply_reflection_;
  delete WelfareRpcOnlineBonusAsk::default_instance_;
  delete WelfareRpcOnlineBonusAsk_reflection_;
  delete WelfareRpcOnlineBonusReply::default_instance_;
  delete WelfareRpcOnlineBonusReply_reflection_;
  delete WelfareRpcOnlineGetRewardAsk::default_instance_;
  delete WelfareRpcOnlineGetRewardAsk_reflection_;
  delete WelfareRpcOnlineGetRewardReply::default_instance_;
  delete WelfareRpcOnlineGetRewardReply_reflection_;
  delete WelfareRpcLevelBonusAsk::default_instance_;
  delete WelfareRpcLevelBonusAsk_reflection_;
  delete WelfareRpcLevelBonusReply::default_instance_;
  delete WelfareRpcLevelBonusReply_reflection_;
  delete WelfareRpcLevelBonusRewardAsk::default_instance_;
  delete WelfareRpcLevelBonusRewardAsk_reflection_;
  delete WelfareRpcLevelBonusRewardReply::default_instance_;
  delete WelfareRpcLevelBonusRewardReply_reflection_;
  delete WelfareRpcMonthSignInBonusAsk::default_instance_;
  delete WelfareRpcMonthSignInBonusAsk_reflection_;
  delete WelfareRpcMonthSignInBonusReply::default_instance_;
  delete WelfareRpcMonthSignInBonusReply_reflection_;
  delete WelfareRpcMonthSignInRewardAsk::default_instance_;
  delete WelfareRpcMonthSignInRewardAsk_reflection_;
  delete WelfareRpcMonthSignInRewardReply::default_instance_;
  delete WelfareRpcMonthSignInRewardReply_reflection_;
  delete WelfareRpcTodaySignInNotify::default_instance_;
  delete WelfareRpcTodaySignInNotify_reflection_;
  delete WelfareRpcSpecLoginNotify::default_instance_;
  delete WelfareRpcSpecLoginNotify_reflection_;
  delete WelfareRpcSpecLoginRewardAsk::default_instance_;
  delete WelfareRpcSpecLoginRewardAsk_reflection_;
  delete WelfareRpcSpecLoginRewardReply::default_instance_;
  delete WelfareRpcSpecLoginRewardReply_reflection_;
}

void protobuf_AddDesc_WelfareRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020WelfareRpc.proto\032\022PublicStruct.proto\"\037"
    "\n\035WelfareRpcAccumulateSignInAsk\"~\n\037Welfa"
    "reRpcAccumulateSignInReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\022+\n\016AccumulateList\030\002 \003(\0132\023.Accumul"
    "ateSignInfo\022\032\n\016AccumulateDays\030\003 \001(\005:\002-1\""
    "2\n WelfareRpcAccumulateGetRewardAsk\022\016\n\002I"
    "D\030\001 \001(\005:\002-1\"N\n\"WelfareRpcAccumulateGetRe"
    "wardReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\024\n\010RewardI"
    "D\030\002 \001(\005:\002-1\"\032\n\030WelfareRpcOnlineBonusAsk\""
    "s\n\032WelfareRpcOnlineBonusReply\022\022\n\006Result\030"
    "\001 \001(\005:\002-1\022$\n\017OnlineBonusList\030\002 \003(\0132\013.Onl"
    "ineInfo\022\033\n\017TodayOnlineTime\030\003 \001(\005:\002-1\".\n\034"
    "WelfareRpcOnlineGetRewardAsk\022\016\n\002ID\030\001 \001(\005"
    ":\002-1\"J\n\036WelfareRpcOnlineGetRewardReply\022\022"
    "\n\006Result\030\001 \001(\005:\002-1\022\024\n\010RewardID\030\003 \001(\005:\002-1"
    "\"\031\n\027WelfareRpcLevelBonusAsk\"S\n\031WelfareRp"
    "cLevelBonusReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\"\n\016"
    "LevelBonusList\030\002 \003(\0132\n.LevelInfo\"/\n\035Welf"
    "areRpcLevelBonusRewardAsk\022\016\n\002ID\030\001 \001(\005:\002-"
    "1\"K\n\037WelfareRpcLevelBonusRewardReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\024\n\010RewardID\030\002 \001(\005:\002-1\"\037"
    "\n\035WelfareRpcMonthSignInBonusAsk\"\373\001\n\037Welf"
    "areRpcMonthSignInBonusReply\022\022\n\006Result\030\001 "
    "\001(\005:\002-1\022\020\n\004Year\030\002 \001(\005:\002-1\022\021\n\005Month\030\003 \001(\005"
    ":\002-1\022\020\n\004Date\030\004 \001(\005:\002-1\022\032\n\016FixSignInTimes"
    "\030\005 \001(\005:\002-1\022)\n\017MonthSignInList\030\006 \003(\0132\020.Mo"
    "nthSignInInfo\022\017\n\003Day\030\007 \001(\005:\002-1\022\032\n\013TodayS"
    "ignIn\030\010 \001(\010:\005false\022\031\n\rFixSignInDays\030\t \001("
    "\005:\002-1\"0\n\036WelfareRpcMonthSignInRewardAsk\022"
    "\016\n\002ID\030\001 \001(\005:\002-1\"h\n WelfareRpcMonthSignIn"
    "RewardReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\024\n\010Rewar"
    "dID\030\002 \001(\005:\002-1\022\032\n\016FixSignInTimes\030\003 \001(\005:\002-"
    "1\"9\n\033WelfareRpcTodaySignInNotify\022\032\n\013Toda"
    "ySignIn\030\002 \001(\010:\005false\">\n\031WelfareRpcSpecLo"
    "ginNotify\022!\n\tSpecLogin\030\001 \003(\0132\016.SpecLogin"
    "Info\"A\n\034WelfareRpcSpecLoginRewardAsk\022\016\n\002"
    "Id\030\001 \001(\005:\002-1\022\021\n\005Index\030\003 \001(\005:\002-1\"4\n\036Welfa"
    "reRpcSpecLoginRewardReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1", 1525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WelfareRpc.proto", &protobuf_RegisterTypes);
  WelfareRpcAccumulateSignInAsk::default_instance_ = new WelfareRpcAccumulateSignInAsk();
  WelfareRpcAccumulateSignInReply::default_instance_ = new WelfareRpcAccumulateSignInReply();
  WelfareRpcAccumulateGetRewardAsk::default_instance_ = new WelfareRpcAccumulateGetRewardAsk();
  WelfareRpcAccumulateGetRewardReply::default_instance_ = new WelfareRpcAccumulateGetRewardReply();
  WelfareRpcOnlineBonusAsk::default_instance_ = new WelfareRpcOnlineBonusAsk();
  WelfareRpcOnlineBonusReply::default_instance_ = new WelfareRpcOnlineBonusReply();
  WelfareRpcOnlineGetRewardAsk::default_instance_ = new WelfareRpcOnlineGetRewardAsk();
  WelfareRpcOnlineGetRewardReply::default_instance_ = new WelfareRpcOnlineGetRewardReply();
  WelfareRpcLevelBonusAsk::default_instance_ = new WelfareRpcLevelBonusAsk();
  WelfareRpcLevelBonusReply::default_instance_ = new WelfareRpcLevelBonusReply();
  WelfareRpcLevelBonusRewardAsk::default_instance_ = new WelfareRpcLevelBonusRewardAsk();
  WelfareRpcLevelBonusRewardReply::default_instance_ = new WelfareRpcLevelBonusRewardReply();
  WelfareRpcMonthSignInBonusAsk::default_instance_ = new WelfareRpcMonthSignInBonusAsk();
  WelfareRpcMonthSignInBonusReply::default_instance_ = new WelfareRpcMonthSignInBonusReply();
  WelfareRpcMonthSignInRewardAsk::default_instance_ = new WelfareRpcMonthSignInRewardAsk();
  WelfareRpcMonthSignInRewardReply::default_instance_ = new WelfareRpcMonthSignInRewardReply();
  WelfareRpcTodaySignInNotify::default_instance_ = new WelfareRpcTodaySignInNotify();
  WelfareRpcSpecLoginNotify::default_instance_ = new WelfareRpcSpecLoginNotify();
  WelfareRpcSpecLoginRewardAsk::default_instance_ = new WelfareRpcSpecLoginRewardAsk();
  WelfareRpcSpecLoginRewardReply::default_instance_ = new WelfareRpcSpecLoginRewardReply();
  WelfareRpcAccumulateSignInAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcAccumulateSignInReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcAccumulateGetRewardAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcAccumulateGetRewardReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcOnlineBonusAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcOnlineBonusReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcOnlineGetRewardAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcOnlineGetRewardReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcLevelBonusAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcLevelBonusReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcLevelBonusRewardAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcLevelBonusRewardReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcMonthSignInBonusAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcMonthSignInBonusReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcMonthSignInRewardAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcMonthSignInRewardReply::default_instance_->InitAsDefaultInstance();
  WelfareRpcTodaySignInNotify::default_instance_->InitAsDefaultInstance();
  WelfareRpcSpecLoginNotify::default_instance_->InitAsDefaultInstance();
  WelfareRpcSpecLoginRewardAsk::default_instance_->InitAsDefaultInstance();
  WelfareRpcSpecLoginRewardReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WelfareRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WelfareRpc_2eproto {
  StaticDescriptorInitializer_WelfareRpc_2eproto() {
    protobuf_AddDesc_WelfareRpc_2eproto();
  }
} static_descriptor_initializer_WelfareRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WelfareRpcAccumulateSignInAsk::WelfareRpcAccumulateSignInAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcAccumulateSignInAsk::InitAsDefaultInstance() {
}

WelfareRpcAccumulateSignInAsk::WelfareRpcAccumulateSignInAsk(const WelfareRpcAccumulateSignInAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcAccumulateSignInAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcAccumulateSignInAsk::~WelfareRpcAccumulateSignInAsk() {
  SharedDtor();
}

void WelfareRpcAccumulateSignInAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcAccumulateSignInAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcAccumulateSignInAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcAccumulateSignInAsk_descriptor_;
}

const WelfareRpcAccumulateSignInAsk& WelfareRpcAccumulateSignInAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcAccumulateSignInAsk* WelfareRpcAccumulateSignInAsk::default_instance_ = NULL;

WelfareRpcAccumulateSignInAsk* WelfareRpcAccumulateSignInAsk::New() const {
  return new WelfareRpcAccumulateSignInAsk;
}

void WelfareRpcAccumulateSignInAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcAccumulateSignInAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WelfareRpcAccumulateSignInAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcAccumulateSignInAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcAccumulateSignInAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcAccumulateSignInAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcAccumulateSignInAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcAccumulateSignInAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcAccumulateSignInAsk::MergeFrom(const WelfareRpcAccumulateSignInAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcAccumulateSignInAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcAccumulateSignInAsk::CopyFrom(const WelfareRpcAccumulateSignInAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcAccumulateSignInAsk::IsInitialized() const {

  return true;
}

void WelfareRpcAccumulateSignInAsk::Swap(WelfareRpcAccumulateSignInAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcAccumulateSignInAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcAccumulateSignInAsk_descriptor_;
  metadata.reflection = WelfareRpcAccumulateSignInAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcAccumulateSignInReply::kResultFieldNumber;
const int WelfareRpcAccumulateSignInReply::kAccumulateListFieldNumber;
const int WelfareRpcAccumulateSignInReply::kAccumulateDaysFieldNumber;
#endif  // !_MSC_VER

WelfareRpcAccumulateSignInReply::WelfareRpcAccumulateSignInReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcAccumulateSignInReply::InitAsDefaultInstance() {
}

WelfareRpcAccumulateSignInReply::WelfareRpcAccumulateSignInReply(const WelfareRpcAccumulateSignInReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcAccumulateSignInReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  accumulatedays_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcAccumulateSignInReply::~WelfareRpcAccumulateSignInReply() {
  SharedDtor();
}

void WelfareRpcAccumulateSignInReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcAccumulateSignInReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcAccumulateSignInReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcAccumulateSignInReply_descriptor_;
}

const WelfareRpcAccumulateSignInReply& WelfareRpcAccumulateSignInReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcAccumulateSignInReply* WelfareRpcAccumulateSignInReply::default_instance_ = NULL;

WelfareRpcAccumulateSignInReply* WelfareRpcAccumulateSignInReply::New() const {
  return new WelfareRpcAccumulateSignInReply;
}

void WelfareRpcAccumulateSignInReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    accumulatedays_ = -1;
  }
  accumulatelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcAccumulateSignInReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccumulateList;
        break;
      }

      // repeated .AccumulateSignInfo AccumulateList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccumulateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accumulatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccumulateList;
        if (input->ExpectTag(24)) goto parse_AccumulateDays;
        break;
      }

      // optional int32 AccumulateDays = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccumulateDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumulatedays_)));
          set_has_accumulatedays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcAccumulateSignInReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .AccumulateSignInfo AccumulateList = 2;
  for (int i = 0; i < this->accumulatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accumulatelist(i), output);
  }

  // optional int32 AccumulateDays = 3 [default = -1];
  if (has_accumulatedays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accumulatedays(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcAccumulateSignInReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .AccumulateSignInfo AccumulateList = 2;
  for (int i = 0; i < this->accumulatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accumulatelist(i), target);
  }

  // optional int32 AccumulateDays = 3 [default = -1];
  if (has_accumulatedays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accumulatedays(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcAccumulateSignInReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 AccumulateDays = 3 [default = -1];
    if (has_accumulatedays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accumulatedays());
    }

  }
  // repeated .AccumulateSignInfo AccumulateList = 2;
  total_size += 1 * this->accumulatelist_size();
  for (int i = 0; i < this->accumulatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accumulatelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcAccumulateSignInReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcAccumulateSignInReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcAccumulateSignInReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcAccumulateSignInReply::MergeFrom(const WelfareRpcAccumulateSignInReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  accumulatelist_.MergeFrom(from.accumulatelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_accumulatedays()) {
      set_accumulatedays(from.accumulatedays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcAccumulateSignInReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcAccumulateSignInReply::CopyFrom(const WelfareRpcAccumulateSignInReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcAccumulateSignInReply::IsInitialized() const {

  return true;
}

void WelfareRpcAccumulateSignInReply::Swap(WelfareRpcAccumulateSignInReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    accumulatelist_.Swap(&other->accumulatelist_);
    std::swap(accumulatedays_, other->accumulatedays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcAccumulateSignInReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcAccumulateSignInReply_descriptor_;
  metadata.reflection = WelfareRpcAccumulateSignInReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcAccumulateGetRewardAsk::kIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcAccumulateGetRewardAsk::WelfareRpcAccumulateGetRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcAccumulateGetRewardAsk::InitAsDefaultInstance() {
}

WelfareRpcAccumulateGetRewardAsk::WelfareRpcAccumulateGetRewardAsk(const WelfareRpcAccumulateGetRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcAccumulateGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcAccumulateGetRewardAsk::~WelfareRpcAccumulateGetRewardAsk() {
  SharedDtor();
}

void WelfareRpcAccumulateGetRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcAccumulateGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcAccumulateGetRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcAccumulateGetRewardAsk_descriptor_;
}

const WelfareRpcAccumulateGetRewardAsk& WelfareRpcAccumulateGetRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcAccumulateGetRewardAsk* WelfareRpcAccumulateGetRewardAsk::default_instance_ = NULL;

WelfareRpcAccumulateGetRewardAsk* WelfareRpcAccumulateGetRewardAsk::New() const {
  return new WelfareRpcAccumulateGetRewardAsk;
}

void WelfareRpcAccumulateGetRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcAccumulateGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcAccumulateGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcAccumulateGetRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcAccumulateGetRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcAccumulateGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcAccumulateGetRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcAccumulateGetRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcAccumulateGetRewardAsk::MergeFrom(const WelfareRpcAccumulateGetRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcAccumulateGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcAccumulateGetRewardAsk::CopyFrom(const WelfareRpcAccumulateGetRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcAccumulateGetRewardAsk::IsInitialized() const {

  return true;
}

void WelfareRpcAccumulateGetRewardAsk::Swap(WelfareRpcAccumulateGetRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcAccumulateGetRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcAccumulateGetRewardAsk_descriptor_;
  metadata.reflection = WelfareRpcAccumulateGetRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcAccumulateGetRewardReply::kResultFieldNumber;
const int WelfareRpcAccumulateGetRewardReply::kRewardIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcAccumulateGetRewardReply::WelfareRpcAccumulateGetRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcAccumulateGetRewardReply::InitAsDefaultInstance() {
}

WelfareRpcAccumulateGetRewardReply::WelfareRpcAccumulateGetRewardReply(const WelfareRpcAccumulateGetRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcAccumulateGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rewardid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcAccumulateGetRewardReply::~WelfareRpcAccumulateGetRewardReply() {
  SharedDtor();
}

void WelfareRpcAccumulateGetRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcAccumulateGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcAccumulateGetRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcAccumulateGetRewardReply_descriptor_;
}

const WelfareRpcAccumulateGetRewardReply& WelfareRpcAccumulateGetRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcAccumulateGetRewardReply* WelfareRpcAccumulateGetRewardReply::default_instance_ = NULL;

WelfareRpcAccumulateGetRewardReply* WelfareRpcAccumulateGetRewardReply::New() const {
  return new WelfareRpcAccumulateGetRewardReply;
}

void WelfareRpcAccumulateGetRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rewardid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcAccumulateGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardID;
        break;
      }

      // optional int32 RewardID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcAccumulateGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcAccumulateGetRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcAccumulateGetRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 RewardID = 2 [default = -1];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcAccumulateGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcAccumulateGetRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcAccumulateGetRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcAccumulateGetRewardReply::MergeFrom(const WelfareRpcAccumulateGetRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcAccumulateGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcAccumulateGetRewardReply::CopyFrom(const WelfareRpcAccumulateGetRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcAccumulateGetRewardReply::IsInitialized() const {

  return true;
}

void WelfareRpcAccumulateGetRewardReply::Swap(WelfareRpcAccumulateGetRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcAccumulateGetRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcAccumulateGetRewardReply_descriptor_;
  metadata.reflection = WelfareRpcAccumulateGetRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WelfareRpcOnlineBonusAsk::WelfareRpcOnlineBonusAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcOnlineBonusAsk::InitAsDefaultInstance() {
}

WelfareRpcOnlineBonusAsk::WelfareRpcOnlineBonusAsk(const WelfareRpcOnlineBonusAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcOnlineBonusAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcOnlineBonusAsk::~WelfareRpcOnlineBonusAsk() {
  SharedDtor();
}

void WelfareRpcOnlineBonusAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcOnlineBonusAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcOnlineBonusAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcOnlineBonusAsk_descriptor_;
}

const WelfareRpcOnlineBonusAsk& WelfareRpcOnlineBonusAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcOnlineBonusAsk* WelfareRpcOnlineBonusAsk::default_instance_ = NULL;

WelfareRpcOnlineBonusAsk* WelfareRpcOnlineBonusAsk::New() const {
  return new WelfareRpcOnlineBonusAsk;
}

void WelfareRpcOnlineBonusAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcOnlineBonusAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WelfareRpcOnlineBonusAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcOnlineBonusAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcOnlineBonusAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcOnlineBonusAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcOnlineBonusAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcOnlineBonusAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcOnlineBonusAsk::MergeFrom(const WelfareRpcOnlineBonusAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcOnlineBonusAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcOnlineBonusAsk::CopyFrom(const WelfareRpcOnlineBonusAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcOnlineBonusAsk::IsInitialized() const {

  return true;
}

void WelfareRpcOnlineBonusAsk::Swap(WelfareRpcOnlineBonusAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcOnlineBonusAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcOnlineBonusAsk_descriptor_;
  metadata.reflection = WelfareRpcOnlineBonusAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcOnlineBonusReply::kResultFieldNumber;
const int WelfareRpcOnlineBonusReply::kOnlineBonusListFieldNumber;
const int WelfareRpcOnlineBonusReply::kTodayOnlineTimeFieldNumber;
#endif  // !_MSC_VER

WelfareRpcOnlineBonusReply::WelfareRpcOnlineBonusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcOnlineBonusReply::InitAsDefaultInstance() {
}

WelfareRpcOnlineBonusReply::WelfareRpcOnlineBonusReply(const WelfareRpcOnlineBonusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcOnlineBonusReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  todayonlinetime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcOnlineBonusReply::~WelfareRpcOnlineBonusReply() {
  SharedDtor();
}

void WelfareRpcOnlineBonusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcOnlineBonusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcOnlineBonusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcOnlineBonusReply_descriptor_;
}

const WelfareRpcOnlineBonusReply& WelfareRpcOnlineBonusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcOnlineBonusReply* WelfareRpcOnlineBonusReply::default_instance_ = NULL;

WelfareRpcOnlineBonusReply* WelfareRpcOnlineBonusReply::New() const {
  return new WelfareRpcOnlineBonusReply;
}

void WelfareRpcOnlineBonusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    todayonlinetime_ = -1;
  }
  onlinebonuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcOnlineBonusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OnlineBonusList;
        break;
      }

      // repeated .OnlineInfo OnlineBonusList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnlineBonusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlinebonuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OnlineBonusList;
        if (input->ExpectTag(24)) goto parse_TodayOnlineTime;
        break;
      }

      // optional int32 TodayOnlineTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayonlinetime_)));
          set_has_todayonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcOnlineBonusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .OnlineInfo OnlineBonusList = 2;
  for (int i = 0; i < this->onlinebonuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onlinebonuslist(i), output);
  }

  // optional int32 TodayOnlineTime = 3 [default = -1];
  if (has_todayonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->todayonlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcOnlineBonusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .OnlineInfo OnlineBonusList = 2;
  for (int i = 0; i < this->onlinebonuslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onlinebonuslist(i), target);
  }

  // optional int32 TodayOnlineTime = 3 [default = -1];
  if (has_todayonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->todayonlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcOnlineBonusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 TodayOnlineTime = 3 [default = -1];
    if (has_todayonlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayonlinetime());
    }

  }
  // repeated .OnlineInfo OnlineBonusList = 2;
  total_size += 1 * this->onlinebonuslist_size();
  for (int i = 0; i < this->onlinebonuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlinebonuslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcOnlineBonusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcOnlineBonusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcOnlineBonusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcOnlineBonusReply::MergeFrom(const WelfareRpcOnlineBonusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinebonuslist_.MergeFrom(from.onlinebonuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_todayonlinetime()) {
      set_todayonlinetime(from.todayonlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcOnlineBonusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcOnlineBonusReply::CopyFrom(const WelfareRpcOnlineBonusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcOnlineBonusReply::IsInitialized() const {

  return true;
}

void WelfareRpcOnlineBonusReply::Swap(WelfareRpcOnlineBonusReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    onlinebonuslist_.Swap(&other->onlinebonuslist_);
    std::swap(todayonlinetime_, other->todayonlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcOnlineBonusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcOnlineBonusReply_descriptor_;
  metadata.reflection = WelfareRpcOnlineBonusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcOnlineGetRewardAsk::kIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcOnlineGetRewardAsk::WelfareRpcOnlineGetRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcOnlineGetRewardAsk::InitAsDefaultInstance() {
}

WelfareRpcOnlineGetRewardAsk::WelfareRpcOnlineGetRewardAsk(const WelfareRpcOnlineGetRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcOnlineGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcOnlineGetRewardAsk::~WelfareRpcOnlineGetRewardAsk() {
  SharedDtor();
}

void WelfareRpcOnlineGetRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcOnlineGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcOnlineGetRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcOnlineGetRewardAsk_descriptor_;
}

const WelfareRpcOnlineGetRewardAsk& WelfareRpcOnlineGetRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcOnlineGetRewardAsk* WelfareRpcOnlineGetRewardAsk::default_instance_ = NULL;

WelfareRpcOnlineGetRewardAsk* WelfareRpcOnlineGetRewardAsk::New() const {
  return new WelfareRpcOnlineGetRewardAsk;
}

void WelfareRpcOnlineGetRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcOnlineGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcOnlineGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcOnlineGetRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcOnlineGetRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcOnlineGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcOnlineGetRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcOnlineGetRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcOnlineGetRewardAsk::MergeFrom(const WelfareRpcOnlineGetRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcOnlineGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcOnlineGetRewardAsk::CopyFrom(const WelfareRpcOnlineGetRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcOnlineGetRewardAsk::IsInitialized() const {

  return true;
}

void WelfareRpcOnlineGetRewardAsk::Swap(WelfareRpcOnlineGetRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcOnlineGetRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcOnlineGetRewardAsk_descriptor_;
  metadata.reflection = WelfareRpcOnlineGetRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcOnlineGetRewardReply::kResultFieldNumber;
const int WelfareRpcOnlineGetRewardReply::kRewardIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcOnlineGetRewardReply::WelfareRpcOnlineGetRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcOnlineGetRewardReply::InitAsDefaultInstance() {
}

WelfareRpcOnlineGetRewardReply::WelfareRpcOnlineGetRewardReply(const WelfareRpcOnlineGetRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcOnlineGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rewardid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcOnlineGetRewardReply::~WelfareRpcOnlineGetRewardReply() {
  SharedDtor();
}

void WelfareRpcOnlineGetRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcOnlineGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcOnlineGetRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcOnlineGetRewardReply_descriptor_;
}

const WelfareRpcOnlineGetRewardReply& WelfareRpcOnlineGetRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcOnlineGetRewardReply* WelfareRpcOnlineGetRewardReply::default_instance_ = NULL;

WelfareRpcOnlineGetRewardReply* WelfareRpcOnlineGetRewardReply::New() const {
  return new WelfareRpcOnlineGetRewardReply;
}

void WelfareRpcOnlineGetRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rewardid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcOnlineGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RewardID;
        break;
      }

      // optional int32 RewardID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcOnlineGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 RewardID = 3 [default = -1];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcOnlineGetRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 RewardID = 3 [default = -1];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcOnlineGetRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 RewardID = 3 [default = -1];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcOnlineGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcOnlineGetRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcOnlineGetRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcOnlineGetRewardReply::MergeFrom(const WelfareRpcOnlineGetRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcOnlineGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcOnlineGetRewardReply::CopyFrom(const WelfareRpcOnlineGetRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcOnlineGetRewardReply::IsInitialized() const {

  return true;
}

void WelfareRpcOnlineGetRewardReply::Swap(WelfareRpcOnlineGetRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcOnlineGetRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcOnlineGetRewardReply_descriptor_;
  metadata.reflection = WelfareRpcOnlineGetRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WelfareRpcLevelBonusAsk::WelfareRpcLevelBonusAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcLevelBonusAsk::InitAsDefaultInstance() {
}

WelfareRpcLevelBonusAsk::WelfareRpcLevelBonusAsk(const WelfareRpcLevelBonusAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcLevelBonusAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcLevelBonusAsk::~WelfareRpcLevelBonusAsk() {
  SharedDtor();
}

void WelfareRpcLevelBonusAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcLevelBonusAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcLevelBonusAsk_descriptor_;
}

const WelfareRpcLevelBonusAsk& WelfareRpcLevelBonusAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcLevelBonusAsk* WelfareRpcLevelBonusAsk::default_instance_ = NULL;

WelfareRpcLevelBonusAsk* WelfareRpcLevelBonusAsk::New() const {
  return new WelfareRpcLevelBonusAsk;
}

void WelfareRpcLevelBonusAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcLevelBonusAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WelfareRpcLevelBonusAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcLevelBonusAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcLevelBonusAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcLevelBonusAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcLevelBonusAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcLevelBonusAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcLevelBonusAsk::MergeFrom(const WelfareRpcLevelBonusAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcLevelBonusAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcLevelBonusAsk::CopyFrom(const WelfareRpcLevelBonusAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcLevelBonusAsk::IsInitialized() const {

  return true;
}

void WelfareRpcLevelBonusAsk::Swap(WelfareRpcLevelBonusAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcLevelBonusAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcLevelBonusAsk_descriptor_;
  metadata.reflection = WelfareRpcLevelBonusAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcLevelBonusReply::kResultFieldNumber;
const int WelfareRpcLevelBonusReply::kLevelBonusListFieldNumber;
#endif  // !_MSC_VER

WelfareRpcLevelBonusReply::WelfareRpcLevelBonusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcLevelBonusReply::InitAsDefaultInstance() {
}

WelfareRpcLevelBonusReply::WelfareRpcLevelBonusReply(const WelfareRpcLevelBonusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcLevelBonusReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcLevelBonusReply::~WelfareRpcLevelBonusReply() {
  SharedDtor();
}

void WelfareRpcLevelBonusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcLevelBonusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcLevelBonusReply_descriptor_;
}

const WelfareRpcLevelBonusReply& WelfareRpcLevelBonusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcLevelBonusReply* WelfareRpcLevelBonusReply::default_instance_ = NULL;

WelfareRpcLevelBonusReply* WelfareRpcLevelBonusReply::New() const {
  return new WelfareRpcLevelBonusReply;
}

void WelfareRpcLevelBonusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  levelbonuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcLevelBonusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LevelBonusList;
        break;
      }

      // repeated .LevelInfo LevelBonusList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LevelBonusList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelbonuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LevelBonusList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcLevelBonusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .LevelInfo LevelBonusList = 2;
  for (int i = 0; i < this->levelbonuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelbonuslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcLevelBonusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .LevelInfo LevelBonusList = 2;
  for (int i = 0; i < this->levelbonuslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelbonuslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcLevelBonusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .LevelInfo LevelBonusList = 2;
  total_size += 1 * this->levelbonuslist_size();
  for (int i = 0; i < this->levelbonuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelbonuslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcLevelBonusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcLevelBonusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcLevelBonusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcLevelBonusReply::MergeFrom(const WelfareRpcLevelBonusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelbonuslist_.MergeFrom(from.levelbonuslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcLevelBonusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcLevelBonusReply::CopyFrom(const WelfareRpcLevelBonusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcLevelBonusReply::IsInitialized() const {

  return true;
}

void WelfareRpcLevelBonusReply::Swap(WelfareRpcLevelBonusReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    levelbonuslist_.Swap(&other->levelbonuslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcLevelBonusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcLevelBonusReply_descriptor_;
  metadata.reflection = WelfareRpcLevelBonusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcLevelBonusRewardAsk::kIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcLevelBonusRewardAsk::WelfareRpcLevelBonusRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcLevelBonusRewardAsk::InitAsDefaultInstance() {
}

WelfareRpcLevelBonusRewardAsk::WelfareRpcLevelBonusRewardAsk(const WelfareRpcLevelBonusRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcLevelBonusRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcLevelBonusRewardAsk::~WelfareRpcLevelBonusRewardAsk() {
  SharedDtor();
}

void WelfareRpcLevelBonusRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcLevelBonusRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcLevelBonusRewardAsk_descriptor_;
}

const WelfareRpcLevelBonusRewardAsk& WelfareRpcLevelBonusRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcLevelBonusRewardAsk* WelfareRpcLevelBonusRewardAsk::default_instance_ = NULL;

WelfareRpcLevelBonusRewardAsk* WelfareRpcLevelBonusRewardAsk::New() const {
  return new WelfareRpcLevelBonusRewardAsk;
}

void WelfareRpcLevelBonusRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcLevelBonusRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcLevelBonusRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcLevelBonusRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcLevelBonusRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcLevelBonusRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcLevelBonusRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcLevelBonusRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcLevelBonusRewardAsk::MergeFrom(const WelfareRpcLevelBonusRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcLevelBonusRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcLevelBonusRewardAsk::CopyFrom(const WelfareRpcLevelBonusRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcLevelBonusRewardAsk::IsInitialized() const {

  return true;
}

void WelfareRpcLevelBonusRewardAsk::Swap(WelfareRpcLevelBonusRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcLevelBonusRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcLevelBonusRewardAsk_descriptor_;
  metadata.reflection = WelfareRpcLevelBonusRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcLevelBonusRewardReply::kResultFieldNumber;
const int WelfareRpcLevelBonusRewardReply::kRewardIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcLevelBonusRewardReply::WelfareRpcLevelBonusRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcLevelBonusRewardReply::InitAsDefaultInstance() {
}

WelfareRpcLevelBonusRewardReply::WelfareRpcLevelBonusRewardReply(const WelfareRpcLevelBonusRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcLevelBonusRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rewardid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcLevelBonusRewardReply::~WelfareRpcLevelBonusRewardReply() {
  SharedDtor();
}

void WelfareRpcLevelBonusRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcLevelBonusRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcLevelBonusRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcLevelBonusRewardReply_descriptor_;
}

const WelfareRpcLevelBonusRewardReply& WelfareRpcLevelBonusRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcLevelBonusRewardReply* WelfareRpcLevelBonusRewardReply::default_instance_ = NULL;

WelfareRpcLevelBonusRewardReply* WelfareRpcLevelBonusRewardReply::New() const {
  return new WelfareRpcLevelBonusRewardReply;
}

void WelfareRpcLevelBonusRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rewardid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcLevelBonusRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardID;
        break;
      }

      // optional int32 RewardID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcLevelBonusRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcLevelBonusRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcLevelBonusRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 RewardID = 2 [default = -1];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcLevelBonusRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcLevelBonusRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcLevelBonusRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcLevelBonusRewardReply::MergeFrom(const WelfareRpcLevelBonusRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcLevelBonusRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcLevelBonusRewardReply::CopyFrom(const WelfareRpcLevelBonusRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcLevelBonusRewardReply::IsInitialized() const {

  return true;
}

void WelfareRpcLevelBonusRewardReply::Swap(WelfareRpcLevelBonusRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcLevelBonusRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcLevelBonusRewardReply_descriptor_;
  metadata.reflection = WelfareRpcLevelBonusRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WelfareRpcMonthSignInBonusAsk::WelfareRpcMonthSignInBonusAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcMonthSignInBonusAsk::InitAsDefaultInstance() {
}

WelfareRpcMonthSignInBonusAsk::WelfareRpcMonthSignInBonusAsk(const WelfareRpcMonthSignInBonusAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcMonthSignInBonusAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcMonthSignInBonusAsk::~WelfareRpcMonthSignInBonusAsk() {
  SharedDtor();
}

void WelfareRpcMonthSignInBonusAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcMonthSignInBonusAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInBonusAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcMonthSignInBonusAsk_descriptor_;
}

const WelfareRpcMonthSignInBonusAsk& WelfareRpcMonthSignInBonusAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcMonthSignInBonusAsk* WelfareRpcMonthSignInBonusAsk::default_instance_ = NULL;

WelfareRpcMonthSignInBonusAsk* WelfareRpcMonthSignInBonusAsk::New() const {
  return new WelfareRpcMonthSignInBonusAsk;
}

void WelfareRpcMonthSignInBonusAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcMonthSignInBonusAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WelfareRpcMonthSignInBonusAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcMonthSignInBonusAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcMonthSignInBonusAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcMonthSignInBonusAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcMonthSignInBonusAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcMonthSignInBonusAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcMonthSignInBonusAsk::MergeFrom(const WelfareRpcMonthSignInBonusAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcMonthSignInBonusAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcMonthSignInBonusAsk::CopyFrom(const WelfareRpcMonthSignInBonusAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcMonthSignInBonusAsk::IsInitialized() const {

  return true;
}

void WelfareRpcMonthSignInBonusAsk::Swap(WelfareRpcMonthSignInBonusAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcMonthSignInBonusAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcMonthSignInBonusAsk_descriptor_;
  metadata.reflection = WelfareRpcMonthSignInBonusAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcMonthSignInBonusReply::kResultFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kYearFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kMonthFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kDateFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kFixSignInTimesFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kMonthSignInListFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kDayFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kTodaySignInFieldNumber;
const int WelfareRpcMonthSignInBonusReply::kFixSignInDaysFieldNumber;
#endif  // !_MSC_VER

WelfareRpcMonthSignInBonusReply::WelfareRpcMonthSignInBonusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcMonthSignInBonusReply::InitAsDefaultInstance() {
}

WelfareRpcMonthSignInBonusReply::WelfareRpcMonthSignInBonusReply(const WelfareRpcMonthSignInBonusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcMonthSignInBonusReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  year_ = -1;
  month_ = -1;
  date_ = -1;
  fixsignintimes_ = -1;
  day_ = -1;
  todaysignin_ = false;
  fixsignindays_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcMonthSignInBonusReply::~WelfareRpcMonthSignInBonusReply() {
  SharedDtor();
}

void WelfareRpcMonthSignInBonusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcMonthSignInBonusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInBonusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcMonthSignInBonusReply_descriptor_;
}

const WelfareRpcMonthSignInBonusReply& WelfareRpcMonthSignInBonusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcMonthSignInBonusReply* WelfareRpcMonthSignInBonusReply::default_instance_ = NULL;

WelfareRpcMonthSignInBonusReply* WelfareRpcMonthSignInBonusReply::New() const {
  return new WelfareRpcMonthSignInBonusReply;
}

void WelfareRpcMonthSignInBonusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    year_ = -1;
    month_ = -1;
    date_ = -1;
    fixsignintimes_ = -1;
    day_ = -1;
    todaysignin_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fixsignindays_ = -1;
  }
  monthsigninlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcMonthSignInBonusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Year;
        break;
      }

      // optional int32 Year = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Month;
        break;
      }

      // optional int32 Month = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Date;
        break;
      }

      // optional int32 Date = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FixSignInTimes;
        break;
      }

      // optional int32 FixSignInTimes = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FixSignInTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixsignintimes_)));
          set_has_fixsignintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MonthSignInList;
        break;
      }

      // repeated .MonthSignInInfo MonthSignInList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonthSignInList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monthsigninlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MonthSignInList;
        if (input->ExpectTag(56)) goto parse_Day;
        break;
      }

      // optional int32 Day = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TodaySignIn;
        break;
      }

      // optional bool TodaySignIn = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodaySignIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &todaysignin_)));
          set_has_todaysignin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FixSignInDays;
        break;
      }

      // optional int32 FixSignInDays = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FixSignInDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixsignindays_)));
          set_has_fixsignindays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcMonthSignInBonusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Year = 2 [default = -1];
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->year(), output);
  }

  // optional int32 Month = 3 [default = -1];
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->month(), output);
  }

  // optional int32 Date = 4 [default = -1];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->date(), output);
  }

  // optional int32 FixSignInTimes = 5 [default = -1];
  if (has_fixsignintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fixsignintimes(), output);
  }

  // repeated .MonthSignInInfo MonthSignInList = 6;
  for (int i = 0; i < this->monthsigninlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->monthsigninlist(i), output);
  }

  // optional int32 Day = 7 [default = -1];
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->day(), output);
  }

  // optional bool TodaySignIn = 8 [default = false];
  if (has_todaysignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->todaysignin(), output);
  }

  // optional int32 FixSignInDays = 9 [default = -1];
  if (has_fixsignindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fixsignindays(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcMonthSignInBonusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Year = 2 [default = -1];
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->year(), target);
  }

  // optional int32 Month = 3 [default = -1];
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->month(), target);
  }

  // optional int32 Date = 4 [default = -1];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->date(), target);
  }

  // optional int32 FixSignInTimes = 5 [default = -1];
  if (has_fixsignintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fixsignintimes(), target);
  }

  // repeated .MonthSignInInfo MonthSignInList = 6;
  for (int i = 0; i < this->monthsigninlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->monthsigninlist(i), target);
  }

  // optional int32 Day = 7 [default = -1];
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->day(), target);
  }

  // optional bool TodaySignIn = 8 [default = false];
  if (has_todaysignin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->todaysignin(), target);
  }

  // optional int32 FixSignInDays = 9 [default = -1];
  if (has_fixsignindays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fixsignindays(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcMonthSignInBonusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Year = 2 [default = -1];
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 Month = 3 [default = -1];
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 Date = 4 [default = -1];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 FixSignInTimes = 5 [default = -1];
    if (has_fixsignintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixsignintimes());
    }

    // optional int32 Day = 7 [default = -1];
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional bool TodaySignIn = 8 [default = false];
    if (has_todaysignin()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 FixSignInDays = 9 [default = -1];
    if (has_fixsignindays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixsignindays());
    }

  }
  // repeated .MonthSignInInfo MonthSignInList = 6;
  total_size += 1 * this->monthsigninlist_size();
  for (int i = 0; i < this->monthsigninlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monthsigninlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcMonthSignInBonusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcMonthSignInBonusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcMonthSignInBonusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcMonthSignInBonusReply::MergeFrom(const WelfareRpcMonthSignInBonusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  monthsigninlist_.MergeFrom(from.monthsigninlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_fixsignintimes()) {
      set_fixsignintimes(from.fixsignintimes());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_todaysignin()) {
      set_todaysignin(from.todaysignin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fixsignindays()) {
      set_fixsignindays(from.fixsignindays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcMonthSignInBonusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcMonthSignInBonusReply::CopyFrom(const WelfareRpcMonthSignInBonusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcMonthSignInBonusReply::IsInitialized() const {

  return true;
}

void WelfareRpcMonthSignInBonusReply::Swap(WelfareRpcMonthSignInBonusReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(date_, other->date_);
    std::swap(fixsignintimes_, other->fixsignintimes_);
    monthsigninlist_.Swap(&other->monthsigninlist_);
    std::swap(day_, other->day_);
    std::swap(todaysignin_, other->todaysignin_);
    std::swap(fixsignindays_, other->fixsignindays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcMonthSignInBonusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcMonthSignInBonusReply_descriptor_;
  metadata.reflection = WelfareRpcMonthSignInBonusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcMonthSignInRewardAsk::kIDFieldNumber;
#endif  // !_MSC_VER

WelfareRpcMonthSignInRewardAsk::WelfareRpcMonthSignInRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcMonthSignInRewardAsk::InitAsDefaultInstance() {
}

WelfareRpcMonthSignInRewardAsk::WelfareRpcMonthSignInRewardAsk(const WelfareRpcMonthSignInRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcMonthSignInRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcMonthSignInRewardAsk::~WelfareRpcMonthSignInRewardAsk() {
  SharedDtor();
}

void WelfareRpcMonthSignInRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcMonthSignInRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcMonthSignInRewardAsk_descriptor_;
}

const WelfareRpcMonthSignInRewardAsk& WelfareRpcMonthSignInRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcMonthSignInRewardAsk* WelfareRpcMonthSignInRewardAsk::default_instance_ = NULL;

WelfareRpcMonthSignInRewardAsk* WelfareRpcMonthSignInRewardAsk::New() const {
  return new WelfareRpcMonthSignInRewardAsk;
}

void WelfareRpcMonthSignInRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcMonthSignInRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcMonthSignInRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcMonthSignInRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcMonthSignInRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcMonthSignInRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcMonthSignInRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcMonthSignInRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcMonthSignInRewardAsk::MergeFrom(const WelfareRpcMonthSignInRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcMonthSignInRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcMonthSignInRewardAsk::CopyFrom(const WelfareRpcMonthSignInRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcMonthSignInRewardAsk::IsInitialized() const {

  return true;
}

void WelfareRpcMonthSignInRewardAsk::Swap(WelfareRpcMonthSignInRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcMonthSignInRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcMonthSignInRewardAsk_descriptor_;
  metadata.reflection = WelfareRpcMonthSignInRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcMonthSignInRewardReply::kResultFieldNumber;
const int WelfareRpcMonthSignInRewardReply::kRewardIDFieldNumber;
const int WelfareRpcMonthSignInRewardReply::kFixSignInTimesFieldNumber;
#endif  // !_MSC_VER

WelfareRpcMonthSignInRewardReply::WelfareRpcMonthSignInRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcMonthSignInRewardReply::InitAsDefaultInstance() {
}

WelfareRpcMonthSignInRewardReply::WelfareRpcMonthSignInRewardReply(const WelfareRpcMonthSignInRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcMonthSignInRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rewardid_ = -1;
  fixsignintimes_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcMonthSignInRewardReply::~WelfareRpcMonthSignInRewardReply() {
  SharedDtor();
}

void WelfareRpcMonthSignInRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcMonthSignInRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcMonthSignInRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcMonthSignInRewardReply_descriptor_;
}

const WelfareRpcMonthSignInRewardReply& WelfareRpcMonthSignInRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcMonthSignInRewardReply* WelfareRpcMonthSignInRewardReply::default_instance_ = NULL;

WelfareRpcMonthSignInRewardReply* WelfareRpcMonthSignInRewardReply::New() const {
  return new WelfareRpcMonthSignInRewardReply;
}

void WelfareRpcMonthSignInRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rewardid_ = -1;
    fixsignintimes_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcMonthSignInRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardID;
        break;
      }

      // optional int32 RewardID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FixSignInTimes;
        break;
      }

      // optional int32 FixSignInTimes = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FixSignInTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixsignintimes_)));
          set_has_fixsignintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcMonthSignInRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardid(), output);
  }

  // optional int32 FixSignInTimes = 3 [default = -1];
  if (has_fixsignintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixsignintimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcMonthSignInRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 RewardID = 2 [default = -1];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardid(), target);
  }

  // optional int32 FixSignInTimes = 3 [default = -1];
  if (has_fixsignintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixsignintimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcMonthSignInRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 RewardID = 2 [default = -1];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

    // optional int32 FixSignInTimes = 3 [default = -1];
    if (has_fixsignintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixsignintimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcMonthSignInRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcMonthSignInRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcMonthSignInRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcMonthSignInRewardReply::MergeFrom(const WelfareRpcMonthSignInRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_fixsignintimes()) {
      set_fixsignintimes(from.fixsignintimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcMonthSignInRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcMonthSignInRewardReply::CopyFrom(const WelfareRpcMonthSignInRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcMonthSignInRewardReply::IsInitialized() const {

  return true;
}

void WelfareRpcMonthSignInRewardReply::Swap(WelfareRpcMonthSignInRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(fixsignintimes_, other->fixsignintimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcMonthSignInRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcMonthSignInRewardReply_descriptor_;
  metadata.reflection = WelfareRpcMonthSignInRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcTodaySignInNotify::kTodaySignInFieldNumber;
#endif  // !_MSC_VER

WelfareRpcTodaySignInNotify::WelfareRpcTodaySignInNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcTodaySignInNotify::InitAsDefaultInstance() {
}

WelfareRpcTodaySignInNotify::WelfareRpcTodaySignInNotify(const WelfareRpcTodaySignInNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcTodaySignInNotify::SharedCtor() {
  _cached_size_ = 0;
  todaysignin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcTodaySignInNotify::~WelfareRpcTodaySignInNotify() {
  SharedDtor();
}

void WelfareRpcTodaySignInNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcTodaySignInNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcTodaySignInNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcTodaySignInNotify_descriptor_;
}

const WelfareRpcTodaySignInNotify& WelfareRpcTodaySignInNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcTodaySignInNotify* WelfareRpcTodaySignInNotify::default_instance_ = NULL;

WelfareRpcTodaySignInNotify* WelfareRpcTodaySignInNotify::New() const {
  return new WelfareRpcTodaySignInNotify;
}

void WelfareRpcTodaySignInNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaysignin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcTodaySignInNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool TodaySignIn = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &todaysignin_)));
          set_has_todaysignin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcTodaySignInNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool TodaySignIn = 2 [default = false];
  if (has_todaysignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->todaysignin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcTodaySignInNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool TodaySignIn = 2 [default = false];
  if (has_todaysignin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->todaysignin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcTodaySignInNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool TodaySignIn = 2 [default = false];
    if (has_todaysignin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcTodaySignInNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcTodaySignInNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcTodaySignInNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcTodaySignInNotify::MergeFrom(const WelfareRpcTodaySignInNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todaysignin()) {
      set_todaysignin(from.todaysignin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcTodaySignInNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcTodaySignInNotify::CopyFrom(const WelfareRpcTodaySignInNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcTodaySignInNotify::IsInitialized() const {

  return true;
}

void WelfareRpcTodaySignInNotify::Swap(WelfareRpcTodaySignInNotify* other) {
  if (other != this) {
    std::swap(todaysignin_, other->todaysignin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcTodaySignInNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcTodaySignInNotify_descriptor_;
  metadata.reflection = WelfareRpcTodaySignInNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcSpecLoginNotify::kSpecLoginFieldNumber;
#endif  // !_MSC_VER

WelfareRpcSpecLoginNotify::WelfareRpcSpecLoginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcSpecLoginNotify::InitAsDefaultInstance() {
}

WelfareRpcSpecLoginNotify::WelfareRpcSpecLoginNotify(const WelfareRpcSpecLoginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcSpecLoginNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcSpecLoginNotify::~WelfareRpcSpecLoginNotify() {
  SharedDtor();
}

void WelfareRpcSpecLoginNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcSpecLoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcSpecLoginNotify_descriptor_;
}

const WelfareRpcSpecLoginNotify& WelfareRpcSpecLoginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcSpecLoginNotify* WelfareRpcSpecLoginNotify::default_instance_ = NULL;

WelfareRpcSpecLoginNotify* WelfareRpcSpecLoginNotify::New() const {
  return new WelfareRpcSpecLoginNotify;
}

void WelfareRpcSpecLoginNotify::Clear() {
  speclogin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcSpecLoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SpecLoginInfo SpecLogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpecLogin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speclogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SpecLogin;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcSpecLoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SpecLoginInfo SpecLogin = 1;
  for (int i = 0; i < this->speclogin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->speclogin(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcSpecLoginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SpecLoginInfo SpecLogin = 1;
  for (int i = 0; i < this->speclogin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->speclogin(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcSpecLoginNotify::ByteSize() const {
  int total_size = 0;

  // repeated .SpecLoginInfo SpecLogin = 1;
  total_size += 1 * this->speclogin_size();
  for (int i = 0; i < this->speclogin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speclogin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcSpecLoginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcSpecLoginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcSpecLoginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcSpecLoginNotify::MergeFrom(const WelfareRpcSpecLoginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  speclogin_.MergeFrom(from.speclogin_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcSpecLoginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcSpecLoginNotify::CopyFrom(const WelfareRpcSpecLoginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcSpecLoginNotify::IsInitialized() const {

  return true;
}

void WelfareRpcSpecLoginNotify::Swap(WelfareRpcSpecLoginNotify* other) {
  if (other != this) {
    speclogin_.Swap(&other->speclogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcSpecLoginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcSpecLoginNotify_descriptor_;
  metadata.reflection = WelfareRpcSpecLoginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcSpecLoginRewardAsk::kIdFieldNumber;
const int WelfareRpcSpecLoginRewardAsk::kIndexFieldNumber;
#endif  // !_MSC_VER

WelfareRpcSpecLoginRewardAsk::WelfareRpcSpecLoginRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcSpecLoginRewardAsk::InitAsDefaultInstance() {
}

WelfareRpcSpecLoginRewardAsk::WelfareRpcSpecLoginRewardAsk(const WelfareRpcSpecLoginRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcSpecLoginRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  index_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcSpecLoginRewardAsk::~WelfareRpcSpecLoginRewardAsk() {
  SharedDtor();
}

void WelfareRpcSpecLoginRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcSpecLoginRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcSpecLoginRewardAsk_descriptor_;
}

const WelfareRpcSpecLoginRewardAsk& WelfareRpcSpecLoginRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcSpecLoginRewardAsk* WelfareRpcSpecLoginRewardAsk::default_instance_ = NULL;

WelfareRpcSpecLoginRewardAsk* WelfareRpcSpecLoginRewardAsk::New() const {
  return new WelfareRpcSpecLoginRewardAsk;
}

void WelfareRpcSpecLoginRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    index_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcSpecLoginRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }

      // optional int32 Index = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcSpecLoginRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Index = 3 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcSpecLoginRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Index = 3 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcSpecLoginRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Index = 3 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcSpecLoginRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcSpecLoginRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcSpecLoginRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcSpecLoginRewardAsk::MergeFrom(const WelfareRpcSpecLoginRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcSpecLoginRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcSpecLoginRewardAsk::CopyFrom(const WelfareRpcSpecLoginRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcSpecLoginRewardAsk::IsInitialized() const {

  return true;
}

void WelfareRpcSpecLoginRewardAsk::Swap(WelfareRpcSpecLoginRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcSpecLoginRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcSpecLoginRewardAsk_descriptor_;
  metadata.reflection = WelfareRpcSpecLoginRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareRpcSpecLoginRewardReply::kResultFieldNumber;
#endif  // !_MSC_VER

WelfareRpcSpecLoginRewardReply::WelfareRpcSpecLoginRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareRpcSpecLoginRewardReply::InitAsDefaultInstance() {
}

WelfareRpcSpecLoginRewardReply::WelfareRpcSpecLoginRewardReply(const WelfareRpcSpecLoginRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareRpcSpecLoginRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareRpcSpecLoginRewardReply::~WelfareRpcSpecLoginRewardReply() {
  SharedDtor();
}

void WelfareRpcSpecLoginRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareRpcSpecLoginRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareRpcSpecLoginRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareRpcSpecLoginRewardReply_descriptor_;
}

const WelfareRpcSpecLoginRewardReply& WelfareRpcSpecLoginRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WelfareRpc_2eproto();
  return *default_instance_;
}

WelfareRpcSpecLoginRewardReply* WelfareRpcSpecLoginRewardReply::default_instance_ = NULL;

WelfareRpcSpecLoginRewardReply* WelfareRpcSpecLoginRewardReply::New() const {
  return new WelfareRpcSpecLoginRewardReply;
}

void WelfareRpcSpecLoginRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareRpcSpecLoginRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareRpcSpecLoginRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareRpcSpecLoginRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareRpcSpecLoginRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareRpcSpecLoginRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareRpcSpecLoginRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareRpcSpecLoginRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareRpcSpecLoginRewardReply::MergeFrom(const WelfareRpcSpecLoginRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareRpcSpecLoginRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareRpcSpecLoginRewardReply::CopyFrom(const WelfareRpcSpecLoginRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareRpcSpecLoginRewardReply::IsInitialized() const {

  return true;
}

void WelfareRpcSpecLoginRewardReply::Swap(WelfareRpcSpecLoginRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareRpcSpecLoginRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareRpcSpecLoginRewardReply_descriptor_;
  metadata.reflection = WelfareRpcSpecLoginRewardReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
