// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CurrencyRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CurrencyRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CurrencyRpcTransfromAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyRpcTransfromAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyRpcTransfromReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyRpcTransfromReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyRpcShowAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyRpcShowAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyRpcShowReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyRpcShowReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CurrencyRpc_2eproto() {
  protobuf_AddDesc_CurrencyRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CurrencyRpc.proto");
  GOOGLE_CHECK(file != NULL);
  CurrencyRpcTransfromAsk_descriptor_ = file->message_type(0);
  static const int CurrencyRpcTransfromAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, to_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, from_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, from_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, diamond_bind_num_),
  };
  CurrencyRpcTransfromAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyRpcTransfromAsk_descriptor_,
      CurrencyRpcTransfromAsk::default_instance_,
      CurrencyRpcTransfromAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyRpcTransfromAsk));
  CurrencyRpcTransfromReply_descriptor_ = file->message_type(1);
  static const int CurrencyRpcTransfromReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromReply, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromReply, reward_num_),
  };
  CurrencyRpcTransfromReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyRpcTransfromReply_descriptor_,
      CurrencyRpcTransfromReply::default_instance_,
      CurrencyRpcTransfromReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcTransfromReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyRpcTransfromReply));
  CurrencyRpcShowAsk_descriptor_ = file->message_type(2);
  static const int CurrencyRpcShowAsk_offsets_[1] = {
  };
  CurrencyRpcShowAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyRpcShowAsk_descriptor_,
      CurrencyRpcShowAsk::default_instance_,
      CurrencyRpcShowAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyRpcShowAsk));
  CurrencyRpcShowReply_descriptor_ = file->message_type(3);
  static const int CurrencyRpcShowReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowReply, showresources_),
  };
  CurrencyRpcShowReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyRpcShowReply_descriptor_,
      CurrencyRpcShowReply::default_instance_,
      CurrencyRpcShowReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRpcShowReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyRpcShowReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CurrencyRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyRpcTransfromAsk_descriptor_, &CurrencyRpcTransfromAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyRpcTransfromReply_descriptor_, &CurrencyRpcTransfromReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyRpcShowAsk_descriptor_, &CurrencyRpcShowAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyRpcShowReply_descriptor_, &CurrencyRpcShowReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CurrencyRpc_2eproto() {
  delete CurrencyRpcTransfromAsk::default_instance_;
  delete CurrencyRpcTransfromAsk_reflection_;
  delete CurrencyRpcTransfromReply::default_instance_;
  delete CurrencyRpcTransfromReply_reflection_;
  delete CurrencyRpcShowAsk::default_instance_;
  delete CurrencyRpcShowAsk_reflection_;
  delete CurrencyRpcShowReply::default_instance_;
  delete CurrencyRpcShowReply_reflection_;
}

void protobuf_AddDesc_CurrencyRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CurrencyRpc.proto\032\022PublicStruct.proto\""
    "w\n\027CurrencyRpcTransfromAsk\022\023\n\007To_type\030\001 "
    "\001(\005:\002-1\022\025\n\tFrom_type\030\002 \001(\005:\002-1\022\023\n\010From_n"
    "um\030\003 \001(\003:\0010\022\033\n\020Diamond_bind_num\030\004 \001(\003:\0010"
    "\"b\n\031CurrencyRpcTransfromReply\022\025\n\006Result\030"
    "\001 \001(\005:\005-9999\022\027\n\013Reward_type\030\002 \001(\005:\002-1\022\025\n"
    "\nReward_num\030\003 \001(\003:\0010\"\024\n\022CurrencyRpcShowA"
    "sk\"L\n\024CurrencyRpcShowReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\022 \n\rShowResources\030\002 \003(\0132\t.Resource", 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CurrencyRpc.proto", &protobuf_RegisterTypes);
  CurrencyRpcTransfromAsk::default_instance_ = new CurrencyRpcTransfromAsk();
  CurrencyRpcTransfromReply::default_instance_ = new CurrencyRpcTransfromReply();
  CurrencyRpcShowAsk::default_instance_ = new CurrencyRpcShowAsk();
  CurrencyRpcShowReply::default_instance_ = new CurrencyRpcShowReply();
  CurrencyRpcTransfromAsk::default_instance_->InitAsDefaultInstance();
  CurrencyRpcTransfromReply::default_instance_->InitAsDefaultInstance();
  CurrencyRpcShowAsk::default_instance_->InitAsDefaultInstance();
  CurrencyRpcShowReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CurrencyRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CurrencyRpc_2eproto {
  StaticDescriptorInitializer_CurrencyRpc_2eproto() {
    protobuf_AddDesc_CurrencyRpc_2eproto();
  }
} static_descriptor_initializer_CurrencyRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CurrencyRpcTransfromAsk::kToTypeFieldNumber;
const int CurrencyRpcTransfromAsk::kFromTypeFieldNumber;
const int CurrencyRpcTransfromAsk::kFromNumFieldNumber;
const int CurrencyRpcTransfromAsk::kDiamondBindNumFieldNumber;
#endif  // !_MSC_VER

CurrencyRpcTransfromAsk::CurrencyRpcTransfromAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyRpcTransfromAsk::InitAsDefaultInstance() {
}

CurrencyRpcTransfromAsk::CurrencyRpcTransfromAsk(const CurrencyRpcTransfromAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyRpcTransfromAsk::SharedCtor() {
  _cached_size_ = 0;
  to_type_ = -1;
  from_type_ = -1;
  from_num_ = GOOGLE_LONGLONG(0);
  diamond_bind_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyRpcTransfromAsk::~CurrencyRpcTransfromAsk() {
  SharedDtor();
}

void CurrencyRpcTransfromAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyRpcTransfromAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRpcTransfromAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyRpcTransfromAsk_descriptor_;
}

const CurrencyRpcTransfromAsk& CurrencyRpcTransfromAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurrencyRpc_2eproto();
  return *default_instance_;
}

CurrencyRpcTransfromAsk* CurrencyRpcTransfromAsk::default_instance_ = NULL;

CurrencyRpcTransfromAsk* CurrencyRpcTransfromAsk::New() const {
  return new CurrencyRpcTransfromAsk;
}

void CurrencyRpcTransfromAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_type_ = -1;
    from_type_ = -1;
    from_num_ = GOOGLE_LONGLONG(0);
    diamond_bind_num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyRpcTransfromAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 To_type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_type_)));
          set_has_to_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_From_type;
        break;
      }

      // optional int32 From_type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_From_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_type_)));
          set_has_from_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_From_num;
        break;
      }

      // optional int64 From_num = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_From_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_num_)));
          set_has_from_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Diamond_bind_num;
        break;
      }

      // optional int64 Diamond_bind_num = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Diamond_bind_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_bind_num_)));
          set_has_diamond_bind_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencyRpcTransfromAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 To_type = 1 [default = -1];
  if (has_to_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->to_type(), output);
  }

  // optional int32 From_type = 2 [default = -1];
  if (has_from_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_type(), output);
  }

  // optional int64 From_num = 3 [default = 0];
  if (has_from_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->from_num(), output);
  }

  // optional int64 Diamond_bind_num = 4 [default = 0];
  if (has_diamond_bind_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->diamond_bind_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyRpcTransfromAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 To_type = 1 [default = -1];
  if (has_to_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->to_type(), target);
  }

  // optional int32 From_type = 2 [default = -1];
  if (has_from_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_type(), target);
  }

  // optional int64 From_num = 3 [default = 0];
  if (has_from_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->from_num(), target);
  }

  // optional int64 Diamond_bind_num = 4 [default = 0];
  if (has_diamond_bind_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->diamond_bind_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyRpcTransfromAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 To_type = 1 [default = -1];
    if (has_to_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_type());
    }

    // optional int32 From_type = 2 [default = -1];
    if (has_from_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_type());
    }

    // optional int64 From_num = 3 [default = 0];
    if (has_from_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_num());
    }

    // optional int64 Diamond_bind_num = 4 [default = 0];
    if (has_diamond_bind_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond_bind_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRpcTransfromAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyRpcTransfromAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyRpcTransfromAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyRpcTransfromAsk::MergeFrom(const CurrencyRpcTransfromAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_type()) {
      set_to_type(from.to_type());
    }
    if (from.has_from_type()) {
      set_from_type(from.from_type());
    }
    if (from.has_from_num()) {
      set_from_num(from.from_num());
    }
    if (from.has_diamond_bind_num()) {
      set_diamond_bind_num(from.diamond_bind_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyRpcTransfromAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRpcTransfromAsk::CopyFrom(const CurrencyRpcTransfromAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRpcTransfromAsk::IsInitialized() const {

  return true;
}

void CurrencyRpcTransfromAsk::Swap(CurrencyRpcTransfromAsk* other) {
  if (other != this) {
    std::swap(to_type_, other->to_type_);
    std::swap(from_type_, other->from_type_);
    std::swap(from_num_, other->from_num_);
    std::swap(diamond_bind_num_, other->diamond_bind_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyRpcTransfromAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyRpcTransfromAsk_descriptor_;
  metadata.reflection = CurrencyRpcTransfromAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrencyRpcTransfromReply::kResultFieldNumber;
const int CurrencyRpcTransfromReply::kRewardTypeFieldNumber;
const int CurrencyRpcTransfromReply::kRewardNumFieldNumber;
#endif  // !_MSC_VER

CurrencyRpcTransfromReply::CurrencyRpcTransfromReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyRpcTransfromReply::InitAsDefaultInstance() {
}

CurrencyRpcTransfromReply::CurrencyRpcTransfromReply(const CurrencyRpcTransfromReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyRpcTransfromReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  reward_type_ = -1;
  reward_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyRpcTransfromReply::~CurrencyRpcTransfromReply() {
  SharedDtor();
}

void CurrencyRpcTransfromReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyRpcTransfromReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRpcTransfromReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyRpcTransfromReply_descriptor_;
}

const CurrencyRpcTransfromReply& CurrencyRpcTransfromReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurrencyRpc_2eproto();
  return *default_instance_;
}

CurrencyRpcTransfromReply* CurrencyRpcTransfromReply::default_instance_ = NULL;

CurrencyRpcTransfromReply* CurrencyRpcTransfromReply::New() const {
  return new CurrencyRpcTransfromReply;
}

void CurrencyRpcTransfromReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    reward_type_ = -1;
    reward_num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyRpcTransfromReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reward_type;
        break;
      }

      // optional int32 Reward_type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Reward_num;
        break;
      }

      // optional int64 Reward_num = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_num_)));
          set_has_reward_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencyRpcTransfromReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Reward_type = 2 [default = -1];
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_type(), output);
  }

  // optional int64 Reward_num = 3 [default = 0];
  if (has_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyRpcTransfromReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Reward_type = 2 [default = -1];
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_type(), target);
  }

  // optional int64 Reward_num = 3 [default = 0];
  if (has_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyRpcTransfromReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Reward_type = 2 [default = -1];
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_type());
    }

    // optional int64 Reward_num = 3 [default = 0];
    if (has_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRpcTransfromReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyRpcTransfromReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyRpcTransfromReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyRpcTransfromReply::MergeFrom(const CurrencyRpcTransfromReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_reward_num()) {
      set_reward_num(from.reward_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyRpcTransfromReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRpcTransfromReply::CopyFrom(const CurrencyRpcTransfromReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRpcTransfromReply::IsInitialized() const {

  return true;
}

void CurrencyRpcTransfromReply::Swap(CurrencyRpcTransfromReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(reward_num_, other->reward_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyRpcTransfromReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyRpcTransfromReply_descriptor_;
  metadata.reflection = CurrencyRpcTransfromReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CurrencyRpcShowAsk::CurrencyRpcShowAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyRpcShowAsk::InitAsDefaultInstance() {
}

CurrencyRpcShowAsk::CurrencyRpcShowAsk(const CurrencyRpcShowAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyRpcShowAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyRpcShowAsk::~CurrencyRpcShowAsk() {
  SharedDtor();
}

void CurrencyRpcShowAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyRpcShowAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRpcShowAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyRpcShowAsk_descriptor_;
}

const CurrencyRpcShowAsk& CurrencyRpcShowAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurrencyRpc_2eproto();
  return *default_instance_;
}

CurrencyRpcShowAsk* CurrencyRpcShowAsk::default_instance_ = NULL;

CurrencyRpcShowAsk* CurrencyRpcShowAsk::New() const {
  return new CurrencyRpcShowAsk;
}

void CurrencyRpcShowAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyRpcShowAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CurrencyRpcShowAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyRpcShowAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyRpcShowAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRpcShowAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyRpcShowAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyRpcShowAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyRpcShowAsk::MergeFrom(const CurrencyRpcShowAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyRpcShowAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRpcShowAsk::CopyFrom(const CurrencyRpcShowAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRpcShowAsk::IsInitialized() const {

  return true;
}

void CurrencyRpcShowAsk::Swap(CurrencyRpcShowAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyRpcShowAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyRpcShowAsk_descriptor_;
  metadata.reflection = CurrencyRpcShowAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrencyRpcShowReply::kResultFieldNumber;
const int CurrencyRpcShowReply::kShowResourcesFieldNumber;
#endif  // !_MSC_VER

CurrencyRpcShowReply::CurrencyRpcShowReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyRpcShowReply::InitAsDefaultInstance() {
}

CurrencyRpcShowReply::CurrencyRpcShowReply(const CurrencyRpcShowReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyRpcShowReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyRpcShowReply::~CurrencyRpcShowReply() {
  SharedDtor();
}

void CurrencyRpcShowReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyRpcShowReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRpcShowReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyRpcShowReply_descriptor_;
}

const CurrencyRpcShowReply& CurrencyRpcShowReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurrencyRpc_2eproto();
  return *default_instance_;
}

CurrencyRpcShowReply* CurrencyRpcShowReply::default_instance_ = NULL;

CurrencyRpcShowReply* CurrencyRpcShowReply::New() const {
  return new CurrencyRpcShowReply;
}

void CurrencyRpcShowReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  showresources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyRpcShowReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ShowResources;
        break;
      }

      // repeated .Resource ShowResources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showresources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ShowResources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencyRpcShowReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .Resource ShowResources = 2;
  for (int i = 0; i < this->showresources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->showresources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyRpcShowReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .Resource ShowResources = 2;
  for (int i = 0; i < this->showresources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->showresources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyRpcShowReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .Resource ShowResources = 2;
  total_size += 1 * this->showresources_size();
  for (int i = 0; i < this->showresources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showresources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRpcShowReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyRpcShowReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyRpcShowReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyRpcShowReply::MergeFrom(const CurrencyRpcShowReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  showresources_.MergeFrom(from.showresources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyRpcShowReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRpcShowReply::CopyFrom(const CurrencyRpcShowReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRpcShowReply::IsInitialized() const {

  return true;
}

void CurrencyRpcShowReply::Swap(CurrencyRpcShowReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    showresources_.Swap(&other->showresources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyRpcShowReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyRpcShowReply_descriptor_;
  metadata.reflection = CurrencyRpcShowReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
