// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MailRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MailRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MailRpcInitMailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcInitMailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcInitMailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcInitMailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcReadMailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcReadMailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcReadMailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcReadMailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcDeleteMailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcDeleteMailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcDeleteMailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcDeleteMailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcGetMailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcGetMailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcGetMailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcGetMailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRpcSyncMailInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRpcSyncMailInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MailRpc_2eproto() {
  protobuf_AddDesc_MailRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MailRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MailRpcInitMailAsk_descriptor_ = file->message_type(0);
  static const int MailRpcInitMailAsk_offsets_[1] = {
  };
  MailRpcInitMailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcInitMailAsk_descriptor_,
      MailRpcInitMailAsk::default_instance_,
      MailRpcInitMailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcInitMailAsk));
  MailRpcInitMailReply_descriptor_ = file->message_type(1);
  static const int MailRpcInitMailReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailReply, infolist_),
  };
  MailRpcInitMailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcInitMailReply_descriptor_,
      MailRpcInitMailReply::default_instance_,
      MailRpcInitMailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcInitMailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcInitMailReply));
  MailRpcReadMailAsk_descriptor_ = file->message_type(2);
  static const int MailRpcReadMailAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailAsk, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailAsk, mail_id_),
  };
  MailRpcReadMailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcReadMailAsk_descriptor_,
      MailRpcReadMailAsk::default_instance_,
      MailRpcReadMailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcReadMailAsk));
  MailRpcReadMailReply_descriptor_ = file->message_type(3);
  static const int MailRpcReadMailReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailReply, system_mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailReply, private_mail_ids_),
  };
  MailRpcReadMailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcReadMailReply_descriptor_,
      MailRpcReadMailReply::default_instance_,
      MailRpcReadMailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcReadMailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcReadMailReply));
  MailRpcDeleteMailAsk_descriptor_ = file->message_type(4);
  static const int MailRpcDeleteMailAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailAsk, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailAsk, mail_id_),
  };
  MailRpcDeleteMailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcDeleteMailAsk_descriptor_,
      MailRpcDeleteMailAsk::default_instance_,
      MailRpcDeleteMailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcDeleteMailAsk));
  MailRpcDeleteMailReply_descriptor_ = file->message_type(5);
  static const int MailRpcDeleteMailReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailReply, system_mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailReply, private_mail_ids_),
  };
  MailRpcDeleteMailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcDeleteMailReply_descriptor_,
      MailRpcDeleteMailReply::default_instance_,
      MailRpcDeleteMailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDeleteMailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcDeleteMailReply));
  MailRpcGetMailAsk_descriptor_ = file->message_type(6);
  static const int MailRpcGetMailAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailAsk, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailAsk, mail_id_),
  };
  MailRpcGetMailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcGetMailAsk_descriptor_,
      MailRpcGetMailAsk::default_instance_,
      MailRpcGetMailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcGetMailAsk));
  MailRpcGetMailReply_descriptor_ = file->message_type(7);
  static const int MailRpcGetMailReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailReply, system_mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailReply, private_mail_ids_),
  };
  MailRpcGetMailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcGetMailReply_descriptor_,
      MailRpcGetMailReply::default_instance_,
      MailRpcGetMailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetMailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcGetMailReply));
  MailRpcSyncMailInfoNotify_descriptor_ = file->message_type(8);
  static const int MailRpcSyncMailInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcSyncMailInfoNotify, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcSyncMailInfoNotify, guidlist_),
  };
  MailRpcSyncMailInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRpcSyncMailInfoNotify_descriptor_,
      MailRpcSyncMailInfoNotify::default_instance_,
      MailRpcSyncMailInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcSyncMailInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcSyncMailInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRpcSyncMailInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MailRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcInitMailAsk_descriptor_, &MailRpcInitMailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcInitMailReply_descriptor_, &MailRpcInitMailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcReadMailAsk_descriptor_, &MailRpcReadMailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcReadMailReply_descriptor_, &MailRpcReadMailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcDeleteMailAsk_descriptor_, &MailRpcDeleteMailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcDeleteMailReply_descriptor_, &MailRpcDeleteMailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcGetMailAsk_descriptor_, &MailRpcGetMailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcGetMailReply_descriptor_, &MailRpcGetMailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRpcSyncMailInfoNotify_descriptor_, &MailRpcSyncMailInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MailRpc_2eproto() {
  delete MailRpcInitMailAsk::default_instance_;
  delete MailRpcInitMailAsk_reflection_;
  delete MailRpcInitMailReply::default_instance_;
  delete MailRpcInitMailReply_reflection_;
  delete MailRpcReadMailAsk::default_instance_;
  delete MailRpcReadMailAsk_reflection_;
  delete MailRpcReadMailReply::default_instance_;
  delete MailRpcReadMailReply_reflection_;
  delete MailRpcDeleteMailAsk::default_instance_;
  delete MailRpcDeleteMailAsk_reflection_;
  delete MailRpcDeleteMailReply::default_instance_;
  delete MailRpcDeleteMailReply_reflection_;
  delete MailRpcGetMailAsk::default_instance_;
  delete MailRpcGetMailAsk_reflection_;
  delete MailRpcGetMailReply::default_instance_;
  delete MailRpcGetMailReply_reflection_;
  delete MailRpcSyncMailInfoNotify::default_instance_;
  delete MailRpcSyncMailInfoNotify_reflection_;
}

void protobuf_AddDesc_MailRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMailRpc.proto\032\022PublicStruct.proto\"\024\n\022M"
    "ailRpcInitMailAsk\"G\n\024MailRpcInitMailRepl"
    "y\022\022\n\006Result\030\001 \001(\005:\002-1\022\033\n\010InfoList\030\002 \003(\0132"
    "\t.MailInfo\"@\n\022MailRpcReadMailAsk\022\025\n\tMail"
    "_type\030\001 \001(\005:\002-1\022\023\n\007Mail_id\030\002 \001(\005:\002-1\"]\n\024"
    "MailRpcReadMailReply\022\022\n\006Result\030\001 \001(\005:\002-1"
    "\022\027\n\017System_mail_ids\030\002 \003(\005\022\030\n\020Private_mai"
    "l_ids\030\003 \003(\005\"B\n\024MailRpcDeleteMailAsk\022\025\n\tM"
    "ail_type\030\003 \001(\005:\002-1\022\023\n\007Mail_id\030\004 \001(\005:\002-1\""
    "_\n\026MailRpcDeleteMailReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1\022\027\n\017System_mail_ids\030\004 \003(\005\022\030\n\020Privat"
    "e_mail_ids\030\005 \003(\005\"\?\n\021MailRpcGetMailAsk\022\025\n"
    "\tMail_type\030\002 \001(\005:\002-1\022\023\n\007Mail_id\030\003 \001(\005:\002-"
    "1\"\\\n\023MailRpcGetMailReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\022\027\n\017System_mail_ids\030\004 \003(\005\022\030\n\020Private"
    "_mail_ids\030\005 \003(\005\"J\n\031MailRpcSyncMailInfoNo"
    "tify\022\033\n\010InfoList\030\001 \003(\0132\t.MailInfo\022\020\n\010Gui"
    "dList\030\002 \003(\004", 691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MailRpc.proto", &protobuf_RegisterTypes);
  MailRpcInitMailAsk::default_instance_ = new MailRpcInitMailAsk();
  MailRpcInitMailReply::default_instance_ = new MailRpcInitMailReply();
  MailRpcReadMailAsk::default_instance_ = new MailRpcReadMailAsk();
  MailRpcReadMailReply::default_instance_ = new MailRpcReadMailReply();
  MailRpcDeleteMailAsk::default_instance_ = new MailRpcDeleteMailAsk();
  MailRpcDeleteMailReply::default_instance_ = new MailRpcDeleteMailReply();
  MailRpcGetMailAsk::default_instance_ = new MailRpcGetMailAsk();
  MailRpcGetMailReply::default_instance_ = new MailRpcGetMailReply();
  MailRpcSyncMailInfoNotify::default_instance_ = new MailRpcSyncMailInfoNotify();
  MailRpcInitMailAsk::default_instance_->InitAsDefaultInstance();
  MailRpcInitMailReply::default_instance_->InitAsDefaultInstance();
  MailRpcReadMailAsk::default_instance_->InitAsDefaultInstance();
  MailRpcReadMailReply::default_instance_->InitAsDefaultInstance();
  MailRpcDeleteMailAsk::default_instance_->InitAsDefaultInstance();
  MailRpcDeleteMailReply::default_instance_->InitAsDefaultInstance();
  MailRpcGetMailAsk::default_instance_->InitAsDefaultInstance();
  MailRpcGetMailReply::default_instance_->InitAsDefaultInstance();
  MailRpcSyncMailInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MailRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MailRpc_2eproto {
  StaticDescriptorInitializer_MailRpc_2eproto() {
    protobuf_AddDesc_MailRpc_2eproto();
  }
} static_descriptor_initializer_MailRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MailRpcInitMailAsk::MailRpcInitMailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcInitMailAsk::InitAsDefaultInstance() {
}

MailRpcInitMailAsk::MailRpcInitMailAsk(const MailRpcInitMailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcInitMailAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcInitMailAsk::~MailRpcInitMailAsk() {
  SharedDtor();
}

void MailRpcInitMailAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcInitMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcInitMailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcInitMailAsk_descriptor_;
}

const MailRpcInitMailAsk& MailRpcInitMailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcInitMailAsk* MailRpcInitMailAsk::default_instance_ = NULL;

MailRpcInitMailAsk* MailRpcInitMailAsk::New() const {
  return new MailRpcInitMailAsk;
}

void MailRpcInitMailAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcInitMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MailRpcInitMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcInitMailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcInitMailAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcInitMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcInitMailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcInitMailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcInitMailAsk::MergeFrom(const MailRpcInitMailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcInitMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcInitMailAsk::CopyFrom(const MailRpcInitMailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcInitMailAsk::IsInitialized() const {

  return true;
}

void MailRpcInitMailAsk::Swap(MailRpcInitMailAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcInitMailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcInitMailAsk_descriptor_;
  metadata.reflection = MailRpcInitMailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcInitMailReply::kResultFieldNumber;
const int MailRpcInitMailReply::kInfoListFieldNumber;
#endif  // !_MSC_VER

MailRpcInitMailReply::MailRpcInitMailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcInitMailReply::InitAsDefaultInstance() {
}

MailRpcInitMailReply::MailRpcInitMailReply(const MailRpcInitMailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcInitMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcInitMailReply::~MailRpcInitMailReply() {
  SharedDtor();
}

void MailRpcInitMailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcInitMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcInitMailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcInitMailReply_descriptor_;
}

const MailRpcInitMailReply& MailRpcInitMailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcInitMailReply* MailRpcInitMailReply::default_instance_ = NULL;

MailRpcInitMailReply* MailRpcInitMailReply::New() const {
  return new MailRpcInitMailReply;
}

void MailRpcInitMailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcInitMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        break;
      }

      // repeated .MailInfo InfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcInitMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .MailInfo InfoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcInitMailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .MailInfo InfoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcInitMailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .MailInfo InfoList = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcInitMailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcInitMailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcInitMailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcInitMailReply::MergeFrom(const MailRpcInitMailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcInitMailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcInitMailReply::CopyFrom(const MailRpcInitMailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcInitMailReply::IsInitialized() const {

  return true;
}

void MailRpcInitMailReply::Swap(MailRpcInitMailReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcInitMailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcInitMailReply_descriptor_;
  metadata.reflection = MailRpcInitMailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcReadMailAsk::kMailTypeFieldNumber;
const int MailRpcReadMailAsk::kMailIdFieldNumber;
#endif  // !_MSC_VER

MailRpcReadMailAsk::MailRpcReadMailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcReadMailAsk::InitAsDefaultInstance() {
}

MailRpcReadMailAsk::MailRpcReadMailAsk(const MailRpcReadMailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcReadMailAsk::SharedCtor() {
  _cached_size_ = 0;
  mail_type_ = -1;
  mail_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcReadMailAsk::~MailRpcReadMailAsk() {
  SharedDtor();
}

void MailRpcReadMailAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcReadMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcReadMailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcReadMailAsk_descriptor_;
}

const MailRpcReadMailAsk& MailRpcReadMailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcReadMailAsk* MailRpcReadMailAsk::default_instance_ = NULL;

MailRpcReadMailAsk* MailRpcReadMailAsk::New() const {
  return new MailRpcReadMailAsk;
}

void MailRpcReadMailAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_type_ = -1;
    mail_id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcReadMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Mail_type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Mail_id;
        break;
      }

      // optional int32 Mail_id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcReadMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Mail_type = 1 [default = -1];
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_type(), output);
  }

  // optional int32 Mail_id = 2 [default = -1];
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcReadMailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Mail_type = 1 [default = -1];
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_type(), target);
  }

  // optional int32 Mail_id = 2 [default = -1];
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcReadMailAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Mail_type = 1 [default = -1];
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 Mail_id = 2 [default = -1];
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcReadMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcReadMailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcReadMailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcReadMailAsk::MergeFrom(const MailRpcReadMailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcReadMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcReadMailAsk::CopyFrom(const MailRpcReadMailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcReadMailAsk::IsInitialized() const {

  return true;
}

void MailRpcReadMailAsk::Swap(MailRpcReadMailAsk* other) {
  if (other != this) {
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcReadMailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcReadMailAsk_descriptor_;
  metadata.reflection = MailRpcReadMailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcReadMailReply::kResultFieldNumber;
const int MailRpcReadMailReply::kSystemMailIdsFieldNumber;
const int MailRpcReadMailReply::kPrivateMailIdsFieldNumber;
#endif  // !_MSC_VER

MailRpcReadMailReply::MailRpcReadMailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcReadMailReply::InitAsDefaultInstance() {
}

MailRpcReadMailReply::MailRpcReadMailReply(const MailRpcReadMailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcReadMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcReadMailReply::~MailRpcReadMailReply() {
  SharedDtor();
}

void MailRpcReadMailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcReadMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcReadMailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcReadMailReply_descriptor_;
}

const MailRpcReadMailReply& MailRpcReadMailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcReadMailReply* MailRpcReadMailReply::default_instance_ = NULL;

MailRpcReadMailReply* MailRpcReadMailReply::New() const {
  return new MailRpcReadMailReply;
}

void MailRpcReadMailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  system_mail_ids_.Clear();
  private_mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcReadMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_System_mail_ids;
        break;
      }

      // repeated int32 System_mail_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_System_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_system_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_system_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_System_mail_ids;
        if (input->ExpectTag(24)) goto parse_Private_mail_ids;
        break;
      }

      // repeated int32 Private_mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Private_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_private_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_private_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Private_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcReadMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 System_mail_ids = 2;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->system_mail_ids(i), output);
  }

  // repeated int32 Private_mail_ids = 3;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->private_mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcReadMailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 System_mail_ids = 2;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->system_mail_ids(i), target);
  }

  // repeated int32 Private_mail_ids = 3;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->private_mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcReadMailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 System_mail_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->system_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->system_mail_ids(i));
    }
    total_size += 1 * this->system_mail_ids_size() + data_size;
  }

  // repeated int32 Private_mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->private_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->private_mail_ids(i));
    }
    total_size += 1 * this->private_mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcReadMailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcReadMailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcReadMailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcReadMailReply::MergeFrom(const MailRpcReadMailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  system_mail_ids_.MergeFrom(from.system_mail_ids_);
  private_mail_ids_.MergeFrom(from.private_mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcReadMailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcReadMailReply::CopyFrom(const MailRpcReadMailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcReadMailReply::IsInitialized() const {

  return true;
}

void MailRpcReadMailReply::Swap(MailRpcReadMailReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    system_mail_ids_.Swap(&other->system_mail_ids_);
    private_mail_ids_.Swap(&other->private_mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcReadMailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcReadMailReply_descriptor_;
  metadata.reflection = MailRpcReadMailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcDeleteMailAsk::kMailTypeFieldNumber;
const int MailRpcDeleteMailAsk::kMailIdFieldNumber;
#endif  // !_MSC_VER

MailRpcDeleteMailAsk::MailRpcDeleteMailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcDeleteMailAsk::InitAsDefaultInstance() {
}

MailRpcDeleteMailAsk::MailRpcDeleteMailAsk(const MailRpcDeleteMailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcDeleteMailAsk::SharedCtor() {
  _cached_size_ = 0;
  mail_type_ = -1;
  mail_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcDeleteMailAsk::~MailRpcDeleteMailAsk() {
  SharedDtor();
}

void MailRpcDeleteMailAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcDeleteMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcDeleteMailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcDeleteMailAsk_descriptor_;
}

const MailRpcDeleteMailAsk& MailRpcDeleteMailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcDeleteMailAsk* MailRpcDeleteMailAsk::default_instance_ = NULL;

MailRpcDeleteMailAsk* MailRpcDeleteMailAsk::New() const {
  return new MailRpcDeleteMailAsk;
}

void MailRpcDeleteMailAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_type_ = -1;
    mail_id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcDeleteMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Mail_type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Mail_id;
        break;
      }

      // optional int32 Mail_id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcDeleteMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Mail_type = 3 [default = -1];
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mail_type(), output);
  }

  // optional int32 Mail_id = 4 [default = -1];
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcDeleteMailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Mail_type = 3 [default = -1];
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mail_type(), target);
  }

  // optional int32 Mail_id = 4 [default = -1];
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcDeleteMailAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Mail_type = 3 [default = -1];
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 Mail_id = 4 [default = -1];
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcDeleteMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcDeleteMailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcDeleteMailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcDeleteMailAsk::MergeFrom(const MailRpcDeleteMailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcDeleteMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcDeleteMailAsk::CopyFrom(const MailRpcDeleteMailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcDeleteMailAsk::IsInitialized() const {

  return true;
}

void MailRpcDeleteMailAsk::Swap(MailRpcDeleteMailAsk* other) {
  if (other != this) {
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcDeleteMailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcDeleteMailAsk_descriptor_;
  metadata.reflection = MailRpcDeleteMailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcDeleteMailReply::kResultFieldNumber;
const int MailRpcDeleteMailReply::kSystemMailIdsFieldNumber;
const int MailRpcDeleteMailReply::kPrivateMailIdsFieldNumber;
#endif  // !_MSC_VER

MailRpcDeleteMailReply::MailRpcDeleteMailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcDeleteMailReply::InitAsDefaultInstance() {
}

MailRpcDeleteMailReply::MailRpcDeleteMailReply(const MailRpcDeleteMailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcDeleteMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcDeleteMailReply::~MailRpcDeleteMailReply() {
  SharedDtor();
}

void MailRpcDeleteMailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcDeleteMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcDeleteMailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcDeleteMailReply_descriptor_;
}

const MailRpcDeleteMailReply& MailRpcDeleteMailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcDeleteMailReply* MailRpcDeleteMailReply::default_instance_ = NULL;

MailRpcDeleteMailReply* MailRpcDeleteMailReply::New() const {
  return new MailRpcDeleteMailReply;
}

void MailRpcDeleteMailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  system_mail_ids_.Clear();
  private_mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcDeleteMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_System_mail_ids;
        break;
      }

      // repeated int32 System_mail_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_System_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_system_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_system_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_System_mail_ids;
        if (input->ExpectTag(40)) goto parse_Private_mail_ids;
        break;
      }

      // repeated int32 Private_mail_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Private_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_private_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_private_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Private_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcDeleteMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 System_mail_ids = 4;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->system_mail_ids(i), output);
  }

  // repeated int32 Private_mail_ids = 5;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->private_mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcDeleteMailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 System_mail_ids = 4;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->system_mail_ids(i), target);
  }

  // repeated int32 Private_mail_ids = 5;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->private_mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcDeleteMailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 System_mail_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->system_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->system_mail_ids(i));
    }
    total_size += 1 * this->system_mail_ids_size() + data_size;
  }

  // repeated int32 Private_mail_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->private_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->private_mail_ids(i));
    }
    total_size += 1 * this->private_mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcDeleteMailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcDeleteMailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcDeleteMailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcDeleteMailReply::MergeFrom(const MailRpcDeleteMailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  system_mail_ids_.MergeFrom(from.system_mail_ids_);
  private_mail_ids_.MergeFrom(from.private_mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcDeleteMailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcDeleteMailReply::CopyFrom(const MailRpcDeleteMailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcDeleteMailReply::IsInitialized() const {

  return true;
}

void MailRpcDeleteMailReply::Swap(MailRpcDeleteMailReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    system_mail_ids_.Swap(&other->system_mail_ids_);
    private_mail_ids_.Swap(&other->private_mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcDeleteMailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcDeleteMailReply_descriptor_;
  metadata.reflection = MailRpcDeleteMailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcGetMailAsk::kMailTypeFieldNumber;
const int MailRpcGetMailAsk::kMailIdFieldNumber;
#endif  // !_MSC_VER

MailRpcGetMailAsk::MailRpcGetMailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcGetMailAsk::InitAsDefaultInstance() {
}

MailRpcGetMailAsk::MailRpcGetMailAsk(const MailRpcGetMailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcGetMailAsk::SharedCtor() {
  _cached_size_ = 0;
  mail_type_ = -1;
  mail_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcGetMailAsk::~MailRpcGetMailAsk() {
  SharedDtor();
}

void MailRpcGetMailAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcGetMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcGetMailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcGetMailAsk_descriptor_;
}

const MailRpcGetMailAsk& MailRpcGetMailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcGetMailAsk* MailRpcGetMailAsk::default_instance_ = NULL;

MailRpcGetMailAsk* MailRpcGetMailAsk::New() const {
  return new MailRpcGetMailAsk;
}

void MailRpcGetMailAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_type_ = -1;
    mail_id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcGetMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Mail_type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Mail_id;
        break;
      }

      // optional int32 Mail_id = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcGetMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Mail_type = 2 [default = -1];
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_type(), output);
  }

  // optional int32 Mail_id = 3 [default = -1];
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcGetMailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Mail_type = 2 [default = -1];
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_type(), target);
  }

  // optional int32 Mail_id = 3 [default = -1];
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcGetMailAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Mail_type = 2 [default = -1];
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 Mail_id = 3 [default = -1];
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcGetMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcGetMailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcGetMailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcGetMailAsk::MergeFrom(const MailRpcGetMailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcGetMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcGetMailAsk::CopyFrom(const MailRpcGetMailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcGetMailAsk::IsInitialized() const {

  return true;
}

void MailRpcGetMailAsk::Swap(MailRpcGetMailAsk* other) {
  if (other != this) {
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcGetMailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcGetMailAsk_descriptor_;
  metadata.reflection = MailRpcGetMailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcGetMailReply::kResultFieldNumber;
const int MailRpcGetMailReply::kSystemMailIdsFieldNumber;
const int MailRpcGetMailReply::kPrivateMailIdsFieldNumber;
#endif  // !_MSC_VER

MailRpcGetMailReply::MailRpcGetMailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcGetMailReply::InitAsDefaultInstance() {
}

MailRpcGetMailReply::MailRpcGetMailReply(const MailRpcGetMailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcGetMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcGetMailReply::~MailRpcGetMailReply() {
  SharedDtor();
}

void MailRpcGetMailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcGetMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcGetMailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcGetMailReply_descriptor_;
}

const MailRpcGetMailReply& MailRpcGetMailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcGetMailReply* MailRpcGetMailReply::default_instance_ = NULL;

MailRpcGetMailReply* MailRpcGetMailReply::New() const {
  return new MailRpcGetMailReply;
}

void MailRpcGetMailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  system_mail_ids_.Clear();
  private_mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcGetMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_System_mail_ids;
        break;
      }

      // repeated int32 System_mail_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_System_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_system_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_system_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_System_mail_ids;
        if (input->ExpectTag(40)) goto parse_Private_mail_ids;
        break;
      }

      // repeated int32 Private_mail_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Private_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_private_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_private_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Private_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcGetMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 System_mail_ids = 4;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->system_mail_ids(i), output);
  }

  // repeated int32 Private_mail_ids = 5;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->private_mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcGetMailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 System_mail_ids = 4;
  for (int i = 0; i < this->system_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->system_mail_ids(i), target);
  }

  // repeated int32 Private_mail_ids = 5;
  for (int i = 0; i < this->private_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->private_mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcGetMailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 System_mail_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->system_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->system_mail_ids(i));
    }
    total_size += 1 * this->system_mail_ids_size() + data_size;
  }

  // repeated int32 Private_mail_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->private_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->private_mail_ids(i));
    }
    total_size += 1 * this->private_mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcGetMailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcGetMailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcGetMailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcGetMailReply::MergeFrom(const MailRpcGetMailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  system_mail_ids_.MergeFrom(from.system_mail_ids_);
  private_mail_ids_.MergeFrom(from.private_mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcGetMailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcGetMailReply::CopyFrom(const MailRpcGetMailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcGetMailReply::IsInitialized() const {

  return true;
}

void MailRpcGetMailReply::Swap(MailRpcGetMailReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    system_mail_ids_.Swap(&other->system_mail_ids_);
    private_mail_ids_.Swap(&other->private_mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcGetMailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcGetMailReply_descriptor_;
  metadata.reflection = MailRpcGetMailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRpcSyncMailInfoNotify::kInfoListFieldNumber;
const int MailRpcSyncMailInfoNotify::kGuidListFieldNumber;
#endif  // !_MSC_VER

MailRpcSyncMailInfoNotify::MailRpcSyncMailInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailRpcSyncMailInfoNotify::InitAsDefaultInstance() {
}

MailRpcSyncMailInfoNotify::MailRpcSyncMailInfoNotify(const MailRpcSyncMailInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailRpcSyncMailInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRpcSyncMailInfoNotify::~MailRpcSyncMailInfoNotify() {
  SharedDtor();
}

void MailRpcSyncMailInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailRpcSyncMailInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcSyncMailInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRpcSyncMailInfoNotify_descriptor_;
}

const MailRpcSyncMailInfoNotify& MailRpcSyncMailInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailRpc_2eproto();
  return *default_instance_;
}

MailRpcSyncMailInfoNotify* MailRpcSyncMailInfoNotify::default_instance_ = NULL;

MailRpcSyncMailInfoNotify* MailRpcSyncMailInfoNotify::New() const {
  return new MailRpcSyncMailInfoNotify;
}

void MailRpcSyncMailInfoNotify::Clear() {
  infolist_.Clear();
  guidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRpcSyncMailInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailInfo InfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InfoList;
        if (input->ExpectTag(16)) goto parse_GuidList;
        break;
      }

      // repeated uint64 GuidList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuidList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_guidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GuidList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailRpcSyncMailInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MailInfo InfoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  // repeated uint64 GuidList = 2;
  for (int i = 0; i < this->guidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->guidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailRpcSyncMailInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MailInfo InfoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  // repeated uint64 GuidList = 2;
  for (int i = 0; i < this->guidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->guidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailRpcSyncMailInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .MailInfo InfoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  // repeated uint64 GuidList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guidlist(i));
    }
    total_size += 1 * this->guidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcSyncMailInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRpcSyncMailInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRpcSyncMailInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRpcSyncMailInfoNotify::MergeFrom(const MailRpcSyncMailInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  guidlist_.MergeFrom(from.guidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRpcSyncMailInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcSyncMailInfoNotify::CopyFrom(const MailRpcSyncMailInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcSyncMailInfoNotify::IsInitialized() const {

  return true;
}

void MailRpcSyncMailInfoNotify::Swap(MailRpcSyncMailInfoNotify* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    guidlist_.Swap(&other->guidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRpcSyncMailInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRpcSyncMailInfoNotify_descriptor_;
  metadata.reflection = MailRpcSyncMailInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
