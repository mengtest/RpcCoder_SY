// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpRpc.proto

#ifndef PROTOBUF_PvpRpc_2eproto__INCLUDED
#define PROTOBUF_PvpRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PvpRpc_2eproto();
void protobuf_AssignDesc_PvpRpc_2eproto();
void protobuf_ShutdownFile_PvpRpc_2eproto();

class PvpRpcRankAsk;
class PvpRpcRankReply;
class PvpRpcMatchAsk;
class PvpRpcMatchReply;
class PvpRpcMatchNotifyNotify;
class PvpRpcMatchCancleAsk;
class PvpRpcMatchCancleReply;
class PvpRpcMatchCancleNotifyNotify;
class PvpRpcPlayerReadyAsk;
class PvpRpcPlayerReadyReply;
class PvpRpcPlayerReadyNotifyNotify;
class PvpRpcReadyFaildNotify;
class PvpRpcPvpBattleStartNotify;
class PvpRpcPvpBattleEndNotify;
class PvpRpcMatchSucessNotify;
class PvpRpcRankChangeNotify;
class PvpRpcReturnLastSceneAsk;
class PvpRpcReturnLastSceneReply;
class PvpRpcArenaStartTimeNotify;
class PvpRpcUpdateKillCountNotify;
class PvpRpcArenaLeftTimeNotify;
class PvpRpcLastRankAsk;
class PvpRpcLastRankReply;
class PvpRpcNewSeasonNotify;
class PvpRpcGetSeasonRewardAsk;
class PvpRpcGetSeasonRewardReply;
class PvpRpcPvpBattleInfoSyncAsk;
class PvpRpcPvpBattleInfoSyncReply;
class PvpRpcReconnectNotify;
class PvpRpcGetRewardAsk;
class PvpRpcGetRewardReply;

// ===================================================================

class PvpRpcRankAsk : public ::google::protobuf::Message {
 public:
  PvpRpcRankAsk();
  virtual ~PvpRpcRankAsk();

  PvpRpcRankAsk(const PvpRpcRankAsk& from);

  inline PvpRpcRankAsk& operator=(const PvpRpcRankAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcRankAsk& default_instance();

  void Swap(PvpRpcRankAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcRankAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcRankAsk& from);
  void MergeFrom(const PvpRpcRankAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvpType = 1 [default = -1];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcRankAsk)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pvptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcRankAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcRankReply : public ::google::protobuf::Message {
 public:
  PvpRpcRankReply();
  virtual ~PvpRpcRankReply();

  PvpRpcRankReply(const PvpRpcRankReply& from);

  inline PvpRpcRankReply& operator=(const PvpRpcRankReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcRankReply& default_instance();

  void Swap(PvpRpcRankReply* other);

  // implements Message ----------------------------------------------

  PvpRpcRankReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcRankReply& from);
  void MergeFrom(const PvpRpcRankReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .PvpPlayerInfo RankList = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 2;
  inline const ::PvpPlayerInfo& ranklist(int index) const;
  inline ::PvpPlayerInfo* mutable_ranklist(int index);
  inline ::PvpPlayerInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:PvpRpcRankReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo > ranklist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcRankReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchAsk : public ::google::protobuf::Message {
 public:
  PvpRpcMatchAsk();
  virtual ~PvpRpcMatchAsk();

  PvpRpcMatchAsk(const PvpRpcMatchAsk& from);

  inline PvpRpcMatchAsk& operator=(const PvpRpcMatchAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchAsk& default_instance();

  void Swap(PvpRpcMatchAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchAsk& from);
  void MergeFrom(const PvpRpcMatchAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvpType = 1 [default = -1];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcMatchAsk)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pvptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchReply : public ::google::protobuf::Message {
 public:
  PvpRpcMatchReply();
  virtual ~PvpRpcMatchReply();

  PvpRpcMatchReply(const PvpRpcMatchReply& from);

  inline PvpRpcMatchReply& operator=(const PvpRpcMatchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchReply& default_instance();

  void Swap(PvpRpcMatchReply* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchReply& from);
  void MergeFrom(const PvpRpcMatchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcMatchReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchNotifyNotify : public ::google::protobuf::Message {
 public:
  PvpRpcMatchNotifyNotify();
  virtual ~PvpRpcMatchNotifyNotify();

  PvpRpcMatchNotifyNotify(const PvpRpcMatchNotifyNotify& from);

  inline PvpRpcMatchNotifyNotify& operator=(const PvpRpcMatchNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchNotifyNotify& default_instance();

  void Swap(PvpRpcMatchNotifyNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchNotifyNotify& from);
  void MergeFrom(const PvpRpcMatchNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PvpRpcMatchNotifyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchCancleAsk : public ::google::protobuf::Message {
 public:
  PvpRpcMatchCancleAsk();
  virtual ~PvpRpcMatchCancleAsk();

  PvpRpcMatchCancleAsk(const PvpRpcMatchCancleAsk& from);

  inline PvpRpcMatchCancleAsk& operator=(const PvpRpcMatchCancleAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchCancleAsk& default_instance();

  void Swap(PvpRpcMatchCancleAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchCancleAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchCancleAsk& from);
  void MergeFrom(const PvpRpcMatchCancleAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PvpRpcMatchCancleAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchCancleAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchCancleReply : public ::google::protobuf::Message {
 public:
  PvpRpcMatchCancleReply();
  virtual ~PvpRpcMatchCancleReply();

  PvpRpcMatchCancleReply(const PvpRpcMatchCancleReply& from);

  inline PvpRpcMatchCancleReply& operator=(const PvpRpcMatchCancleReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchCancleReply& default_instance();

  void Swap(PvpRpcMatchCancleReply* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchCancleReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchCancleReply& from);
  void MergeFrom(const PvpRpcMatchCancleReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcMatchCancleReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchCancleReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchCancleNotifyNotify : public ::google::protobuf::Message {
 public:
  PvpRpcMatchCancleNotifyNotify();
  virtual ~PvpRpcMatchCancleNotifyNotify();

  PvpRpcMatchCancleNotifyNotify(const PvpRpcMatchCancleNotifyNotify& from);

  inline PvpRpcMatchCancleNotifyNotify& operator=(const PvpRpcMatchCancleNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchCancleNotifyNotify& default_instance();

  void Swap(PvpRpcMatchCancleNotifyNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchCancleNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchCancleNotifyNotify& from);
  void MergeFrom(const PvpRpcMatchCancleNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Reason = 3 [default = -1];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcMatchCancleNotifyNotify)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchCancleNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPlayerReadyAsk : public ::google::protobuf::Message {
 public:
  PvpRpcPlayerReadyAsk();
  virtual ~PvpRpcPlayerReadyAsk();

  PvpRpcPlayerReadyAsk(const PvpRpcPlayerReadyAsk& from);

  inline PvpRpcPlayerReadyAsk& operator=(const PvpRpcPlayerReadyAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPlayerReadyAsk& default_instance();

  void Swap(PvpRpcPlayerReadyAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcPlayerReadyAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPlayerReadyAsk& from);
  void MergeFrom(const PvpRpcPlayerReadyAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OpreationType = 1 [default = -1];
  inline bool has_opreationtype() const;
  inline void clear_opreationtype();
  static const int kOpreationTypeFieldNumber = 1;
  inline ::google::protobuf::int32 opreationtype() const;
  inline void set_opreationtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcPlayerReadyAsk)
 private:
  inline void set_has_opreationtype();
  inline void clear_has_opreationtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opreationtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPlayerReadyAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPlayerReadyReply : public ::google::protobuf::Message {
 public:
  PvpRpcPlayerReadyReply();
  virtual ~PvpRpcPlayerReadyReply();

  PvpRpcPlayerReadyReply(const PvpRpcPlayerReadyReply& from);

  inline PvpRpcPlayerReadyReply& operator=(const PvpRpcPlayerReadyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPlayerReadyReply& default_instance();

  void Swap(PvpRpcPlayerReadyReply* other);

  // implements Message ----------------------------------------------

  PvpRpcPlayerReadyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPlayerReadyReply& from);
  void MergeFrom(const PvpRpcPlayerReadyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcPlayerReadyReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPlayerReadyReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPlayerReadyNotifyNotify : public ::google::protobuf::Message {
 public:
  PvpRpcPlayerReadyNotifyNotify();
  virtual ~PvpRpcPlayerReadyNotifyNotify();

  PvpRpcPlayerReadyNotifyNotify(const PvpRpcPlayerReadyNotifyNotify& from);

  inline PvpRpcPlayerReadyNotifyNotify& operator=(const PvpRpcPlayerReadyNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPlayerReadyNotifyNotify& default_instance();

  void Swap(PvpRpcPlayerReadyNotifyNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcPlayerReadyNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPlayerReadyNotifyNotify& from);
  void MergeFrom(const PvpRpcPlayerReadyNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 OpType = 2 [default = -1];
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 2;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcPlayerReadyNotifyNotify)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 optype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPlayerReadyNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcReadyFaildNotify : public ::google::protobuf::Message {
 public:
  PvpRpcReadyFaildNotify();
  virtual ~PvpRpcReadyFaildNotify();

  PvpRpcReadyFaildNotify(const PvpRpcReadyFaildNotify& from);

  inline PvpRpcReadyFaildNotify& operator=(const PvpRpcReadyFaildNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcReadyFaildNotify& default_instance();

  void Swap(PvpRpcReadyFaildNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcReadyFaildNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcReadyFaildNotify& from);
  void MergeFrom(const PvpRpcReadyFaildNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Reason = 1 [default = -1];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // optional uint64 RoleId = 2 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PvpRpcReadyFaildNotify)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcReadyFaildNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPvpBattleStartNotify : public ::google::protobuf::Message {
 public:
  PvpRpcPvpBattleStartNotify();
  virtual ~PvpRpcPvpBattleStartNotify();

  PvpRpcPvpBattleStartNotify(const PvpRpcPvpBattleStartNotify& from);

  inline PvpRpcPvpBattleStartNotify& operator=(const PvpRpcPvpBattleStartNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPvpBattleStartNotify& default_instance();

  void Swap(PvpRpcPvpBattleStartNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcPvpBattleStartNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPvpBattleStartNotify& from);
  void MergeFrom(const PvpRpcPvpBattleStartNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LeftKill = 2 [default = -1];
  inline bool has_leftkill() const;
  inline void clear_leftkill();
  static const int kLeftKillFieldNumber = 2;
  inline ::google::protobuf::int32 leftkill() const;
  inline void set_leftkill(::google::protobuf::int32 value);

  // optional int32 RightKill = 3 [default = -1];
  inline bool has_rightkill() const;
  inline void clear_rightkill();
  static const int kRightKillFieldNumber = 3;
  inline ::google::protobuf::int32 rightkill() const;
  inline void set_rightkill(::google::protobuf::int32 value);

  // optional int32 NeedKill = 4 [default = -1];
  inline bool has_needkill() const;
  inline void clear_needkill();
  static const int kNeedKillFieldNumber = 4;
  inline ::google::protobuf::int32 needkill() const;
  inline void set_needkill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcPvpBattleStartNotify)
 private:
  inline void set_has_leftkill();
  inline void clear_has_leftkill();
  inline void set_has_rightkill();
  inline void clear_has_rightkill();
  inline void set_has_needkill();
  inline void clear_has_needkill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 leftkill_;
  ::google::protobuf::int32 rightkill_;
  ::google::protobuf::int32 needkill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPvpBattleStartNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPvpBattleEndNotify : public ::google::protobuf::Message {
 public:
  PvpRpcPvpBattleEndNotify();
  virtual ~PvpRpcPvpBattleEndNotify();

  PvpRpcPvpBattleEndNotify(const PvpRpcPvpBattleEndNotify& from);

  inline PvpRpcPvpBattleEndNotify& operator=(const PvpRpcPvpBattleEndNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPvpBattleEndNotify& default_instance();

  void Swap(PvpRpcPvpBattleEndNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcPvpBattleEndNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPvpBattleEndNotify& from);
  void MergeFrom(const PvpRpcPvpBattleEndNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PvpBattleEndInfo BattleEndInfo = 4;
  inline bool has_battleendinfo() const;
  inline void clear_battleendinfo();
  static const int kBattleEndInfoFieldNumber = 4;
  inline const ::PvpBattleEndInfo& battleendinfo() const;
  inline ::PvpBattleEndInfo* mutable_battleendinfo();
  inline ::PvpBattleEndInfo* release_battleendinfo();
  inline void set_allocated_battleendinfo(::PvpBattleEndInfo* battleendinfo);

  // @@protoc_insertion_point(class_scope:PvpRpcPvpBattleEndNotify)
 private:
  inline void set_has_battleendinfo();
  inline void clear_has_battleendinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PvpBattleEndInfo* battleendinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPvpBattleEndNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcMatchSucessNotify : public ::google::protobuf::Message {
 public:
  PvpRpcMatchSucessNotify();
  virtual ~PvpRpcMatchSucessNotify();

  PvpRpcMatchSucessNotify(const PvpRpcMatchSucessNotify& from);

  inline PvpRpcMatchSucessNotify& operator=(const PvpRpcMatchSucessNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcMatchSucessNotify& default_instance();

  void Swap(PvpRpcMatchSucessNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcMatchSucessNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcMatchSucessNotify& from);
  void MergeFrom(const PvpRpcMatchSucessNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvpPlayerInfo LeftTeam = 1;
  inline int leftteam_size() const;
  inline void clear_leftteam();
  static const int kLeftTeamFieldNumber = 1;
  inline const ::PvpPlayerInfo& leftteam(int index) const;
  inline ::PvpPlayerInfo* mutable_leftteam(int index);
  inline ::PvpPlayerInfo* add_leftteam();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
      leftteam() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
      mutable_leftteam();

  // repeated .PvpPlayerInfo RightTeam = 2;
  inline int rightteam_size() const;
  inline void clear_rightteam();
  static const int kRightTeamFieldNumber = 2;
  inline const ::PvpPlayerInfo& rightteam(int index) const;
  inline ::PvpPlayerInfo* mutable_rightteam(int index);
  inline ::PvpPlayerInfo* add_rightteam();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
      rightteam() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
      mutable_rightteam();

  // optional int32 Time = 3 [default = -1];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcMatchSucessNotify)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo > leftteam_;
  ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo > rightteam_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcMatchSucessNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcRankChangeNotify : public ::google::protobuf::Message {
 public:
  PvpRpcRankChangeNotify();
  virtual ~PvpRpcRankChangeNotify();

  PvpRpcRankChangeNotify(const PvpRpcRankChangeNotify& from);

  inline PvpRpcRankChangeNotify& operator=(const PvpRpcRankChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcRankChangeNotify& default_instance();

  void Swap(PvpRpcRankChangeNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcRankChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcRankChangeNotify& from);
  void MergeFrom(const PvpRpcRankChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvpType = 1 [default = -1];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // optional int32 BeforeRank = 2 [default = -1];
  inline bool has_beforerank() const;
  inline void clear_beforerank();
  static const int kBeforeRankFieldNumber = 2;
  inline ::google::protobuf::int32 beforerank() const;
  inline void set_beforerank(::google::protobuf::int32 value);

  // optional int32 AfterRank = 3 [default = -1];
  inline bool has_afterrank() const;
  inline void clear_afterrank();
  static const int kAfterRankFieldNumber = 3;
  inline ::google::protobuf::int32 afterrank() const;
  inline void set_afterrank(::google::protobuf::int32 value);

  // optional int32 BeforeStar = 4 [default = -1];
  inline bool has_beforestar() const;
  inline void clear_beforestar();
  static const int kBeforeStarFieldNumber = 4;
  inline ::google::protobuf::int32 beforestar() const;
  inline void set_beforestar(::google::protobuf::int32 value);

  // optional int32 AfterStar = 5 [default = -1];
  inline bool has_afterstar() const;
  inline void clear_afterstar();
  static const int kAfterStarFieldNumber = 5;
  inline ::google::protobuf::int32 afterstar() const;
  inline void set_afterstar(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcRankChangeNotify)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();
  inline void set_has_beforerank();
  inline void clear_has_beforerank();
  inline void set_has_afterrank();
  inline void clear_has_afterrank();
  inline void set_has_beforestar();
  inline void clear_has_beforestar();
  inline void set_has_afterstar();
  inline void clear_has_afterstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pvptype_;
  ::google::protobuf::int32 beforerank_;
  ::google::protobuf::int32 afterrank_;
  ::google::protobuf::int32 beforestar_;
  ::google::protobuf::int32 afterstar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcRankChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcReturnLastSceneAsk : public ::google::protobuf::Message {
 public:
  PvpRpcReturnLastSceneAsk();
  virtual ~PvpRpcReturnLastSceneAsk();

  PvpRpcReturnLastSceneAsk(const PvpRpcReturnLastSceneAsk& from);

  inline PvpRpcReturnLastSceneAsk& operator=(const PvpRpcReturnLastSceneAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcReturnLastSceneAsk& default_instance();

  void Swap(PvpRpcReturnLastSceneAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcReturnLastSceneAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcReturnLastSceneAsk& from);
  void MergeFrom(const PvpRpcReturnLastSceneAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PvpRpcReturnLastSceneAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcReturnLastSceneAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcReturnLastSceneReply : public ::google::protobuf::Message {
 public:
  PvpRpcReturnLastSceneReply();
  virtual ~PvpRpcReturnLastSceneReply();

  PvpRpcReturnLastSceneReply(const PvpRpcReturnLastSceneReply& from);

  inline PvpRpcReturnLastSceneReply& operator=(const PvpRpcReturnLastSceneReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcReturnLastSceneReply& default_instance();

  void Swap(PvpRpcReturnLastSceneReply* other);

  // implements Message ----------------------------------------------

  PvpRpcReturnLastSceneReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcReturnLastSceneReply& from);
  void MergeFrom(const PvpRpcReturnLastSceneReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcReturnLastSceneReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcReturnLastSceneReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcArenaStartTimeNotify : public ::google::protobuf::Message {
 public:
  PvpRpcArenaStartTimeNotify();
  virtual ~PvpRpcArenaStartTimeNotify();

  PvpRpcArenaStartTimeNotify(const PvpRpcArenaStartTimeNotify& from);

  inline PvpRpcArenaStartTimeNotify& operator=(const PvpRpcArenaStartTimeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcArenaStartTimeNotify& default_instance();

  void Swap(PvpRpcArenaStartTimeNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcArenaStartTimeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcArenaStartTimeNotify& from);
  void MergeFrom(const PvpRpcArenaStartTimeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 NeedTime = 1 [default = -1];
  inline bool has_needtime() const;
  inline void clear_needtime();
  static const int kNeedTimeFieldNumber = 1;
  inline ::google::protobuf::int32 needtime() const;
  inline void set_needtime(::google::protobuf::int32 value);

  // optional int32 TimeStamp = 2 [default = -1];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcArenaStartTimeNotify)
 private:
  inline void set_has_needtime();
  inline void clear_has_needtime();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 needtime_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcArenaStartTimeNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcUpdateKillCountNotify : public ::google::protobuf::Message {
 public:
  PvpRpcUpdateKillCountNotify();
  virtual ~PvpRpcUpdateKillCountNotify();

  PvpRpcUpdateKillCountNotify(const PvpRpcUpdateKillCountNotify& from);

  inline PvpRpcUpdateKillCountNotify& operator=(const PvpRpcUpdateKillCountNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcUpdateKillCountNotify& default_instance();

  void Swap(PvpRpcUpdateKillCountNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcUpdateKillCountNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcUpdateKillCountNotify& from);
  void MergeFrom(const PvpRpcUpdateKillCountNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LeftTeamKill = 1 [default = -1];
  inline bool has_leftteamkill() const;
  inline void clear_leftteamkill();
  static const int kLeftTeamKillFieldNumber = 1;
  inline ::google::protobuf::int32 leftteamkill() const;
  inline void set_leftteamkill(::google::protobuf::int32 value);

  // optional int32 RightTeamKill = 2 [default = -1];
  inline bool has_rightteamkill() const;
  inline void clear_rightteamkill();
  static const int kRightTeamKillFieldNumber = 2;
  inline ::google::protobuf::int32 rightteamkill() const;
  inline void set_rightteamkill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcUpdateKillCountNotify)
 private:
  inline void set_has_leftteamkill();
  inline void clear_has_leftteamkill();
  inline void set_has_rightteamkill();
  inline void clear_has_rightteamkill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 leftteamkill_;
  ::google::protobuf::int32 rightteamkill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcUpdateKillCountNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcArenaLeftTimeNotify : public ::google::protobuf::Message {
 public:
  PvpRpcArenaLeftTimeNotify();
  virtual ~PvpRpcArenaLeftTimeNotify();

  PvpRpcArenaLeftTimeNotify(const PvpRpcArenaLeftTimeNotify& from);

  inline PvpRpcArenaLeftTimeNotify& operator=(const PvpRpcArenaLeftTimeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcArenaLeftTimeNotify& default_instance();

  void Swap(PvpRpcArenaLeftTimeNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcArenaLeftTimeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcArenaLeftTimeNotify& from);
  void MergeFrom(const PvpRpcArenaLeftTimeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LeftTime = 1 [default = -1];
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 1;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcArenaLeftTimeNotify)
 private:
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcArenaLeftTimeNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcLastRankAsk : public ::google::protobuf::Message {
 public:
  PvpRpcLastRankAsk();
  virtual ~PvpRpcLastRankAsk();

  PvpRpcLastRankAsk(const PvpRpcLastRankAsk& from);

  inline PvpRpcLastRankAsk& operator=(const PvpRpcLastRankAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcLastRankAsk& default_instance();

  void Swap(PvpRpcLastRankAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcLastRankAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcLastRankAsk& from);
  void MergeFrom(const PvpRpcLastRankAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvpType = 1 [default = -1];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcLastRankAsk)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pvptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcLastRankAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcLastRankReply : public ::google::protobuf::Message {
 public:
  PvpRpcLastRankReply();
  virtual ~PvpRpcLastRankReply();

  PvpRpcLastRankReply(const PvpRpcLastRankReply& from);

  inline PvpRpcLastRankReply& operator=(const PvpRpcLastRankReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcLastRankReply& default_instance();

  void Swap(PvpRpcLastRankReply* other);

  // implements Message ----------------------------------------------

  PvpRpcLastRankReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcLastRankReply& from);
  void MergeFrom(const PvpRpcLastRankReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .PvpPlayerInfo RankList = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 2;
  inline const ::PvpPlayerInfo& ranklist(int index) const;
  inline ::PvpPlayerInfo* mutable_ranklist(int index);
  inline ::PvpPlayerInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:PvpRpcLastRankReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo > ranklist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcLastRankReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcNewSeasonNotify : public ::google::protobuf::Message {
 public:
  PvpRpcNewSeasonNotify();
  virtual ~PvpRpcNewSeasonNotify();

  PvpRpcNewSeasonNotify(const PvpRpcNewSeasonNotify& from);

  inline PvpRpcNewSeasonNotify& operator=(const PvpRpcNewSeasonNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcNewSeasonNotify& default_instance();

  void Swap(PvpRpcNewSeasonNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcNewSeasonNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcNewSeasonNotify& from);
  void MergeFrom(const PvpRpcNewSeasonNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LastRank = 1 [default = -1];
  inline bool has_lastrank() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 1;
  inline ::google::protobuf::int32 lastrank() const;
  inline void set_lastrank(::google::protobuf::int32 value);

  // optional int32 LastStar = 2 [default = -1];
  inline bool has_laststar() const;
  inline void clear_laststar();
  static const int kLastStarFieldNumber = 2;
  inline ::google::protobuf::int32 laststar() const;
  inline void set_laststar(::google::protobuf::int32 value);

  // optional int32 LastRanking = 3 [default = -1];
  inline bool has_lastranking() const;
  inline void clear_lastranking();
  static const int kLastRankingFieldNumber = 3;
  inline ::google::protobuf::int32 lastranking() const;
  inline void set_lastranking(::google::protobuf::int32 value);

  // repeated .PvpBattleRewardInfo RewardList = 4;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 4;
  inline const ::PvpBattleRewardInfo& rewardlist(int index) const;
  inline ::PvpBattleRewardInfo* mutable_rewardlist(int index);
  inline ::PvpBattleRewardInfo* add_rewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >*
      mutable_rewardlist();

  // @@protoc_insertion_point(class_scope:PvpRpcNewSeasonNotify)
 private:
  inline void set_has_lastrank();
  inline void clear_has_lastrank();
  inline void set_has_laststar();
  inline void clear_has_laststar();
  inline void set_has_lastranking();
  inline void clear_has_lastranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lastrank_;
  ::google::protobuf::int32 laststar_;
  ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo > rewardlist_;
  ::google::protobuf::int32 lastranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcNewSeasonNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcGetSeasonRewardAsk : public ::google::protobuf::Message {
 public:
  PvpRpcGetSeasonRewardAsk();
  virtual ~PvpRpcGetSeasonRewardAsk();

  PvpRpcGetSeasonRewardAsk(const PvpRpcGetSeasonRewardAsk& from);

  inline PvpRpcGetSeasonRewardAsk& operator=(const PvpRpcGetSeasonRewardAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcGetSeasonRewardAsk& default_instance();

  void Swap(PvpRpcGetSeasonRewardAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcGetSeasonRewardAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcGetSeasonRewardAsk& from);
  void MergeFrom(const PvpRpcGetSeasonRewardAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PvpRpcGetSeasonRewardAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcGetSeasonRewardAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcGetSeasonRewardReply : public ::google::protobuf::Message {
 public:
  PvpRpcGetSeasonRewardReply();
  virtual ~PvpRpcGetSeasonRewardReply();

  PvpRpcGetSeasonRewardReply(const PvpRpcGetSeasonRewardReply& from);

  inline PvpRpcGetSeasonRewardReply& operator=(const PvpRpcGetSeasonRewardReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcGetSeasonRewardReply& default_instance();

  void Swap(PvpRpcGetSeasonRewardReply* other);

  // implements Message ----------------------------------------------

  PvpRpcGetSeasonRewardReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcGetSeasonRewardReply& from);
  void MergeFrom(const PvpRpcGetSeasonRewardReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcGetSeasonRewardReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcGetSeasonRewardReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPvpBattleInfoSyncAsk : public ::google::protobuf::Message {
 public:
  PvpRpcPvpBattleInfoSyncAsk();
  virtual ~PvpRpcPvpBattleInfoSyncAsk();

  PvpRpcPvpBattleInfoSyncAsk(const PvpRpcPvpBattleInfoSyncAsk& from);

  inline PvpRpcPvpBattleInfoSyncAsk& operator=(const PvpRpcPvpBattleInfoSyncAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPvpBattleInfoSyncAsk& default_instance();

  void Swap(PvpRpcPvpBattleInfoSyncAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcPvpBattleInfoSyncAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPvpBattleInfoSyncAsk& from);
  void MergeFrom(const PvpRpcPvpBattleInfoSyncAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PvpRpcPvpBattleInfoSyncAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPvpBattleInfoSyncAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcPvpBattleInfoSyncReply : public ::google::protobuf::Message {
 public:
  PvpRpcPvpBattleInfoSyncReply();
  virtual ~PvpRpcPvpBattleInfoSyncReply();

  PvpRpcPvpBattleInfoSyncReply(const PvpRpcPvpBattleInfoSyncReply& from);

  inline PvpRpcPvpBattleInfoSyncReply& operator=(const PvpRpcPvpBattleInfoSyncReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcPvpBattleInfoSyncReply& default_instance();

  void Swap(PvpRpcPvpBattleInfoSyncReply* other);

  // implements Message ----------------------------------------------

  PvpRpcPvpBattleInfoSyncReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcPvpBattleInfoSyncReply& from);
  void MergeFrom(const PvpRpcPvpBattleInfoSyncReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .PvpBattleInfo BattleInfo = 2;
  inline bool has_battleinfo() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 2;
  inline const ::PvpBattleInfo& battleinfo() const;
  inline ::PvpBattleInfo* mutable_battleinfo();
  inline ::PvpBattleInfo* release_battleinfo();
  inline void set_allocated_battleinfo(::PvpBattleInfo* battleinfo);

  // optional int32 Season = 3 [default = -1];
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 3;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // optional int32 RankIndex = 4 [default = -1];
  inline bool has_rankindex() const;
  inline void clear_rankindex();
  static const int kRankIndexFieldNumber = 4;
  inline ::google::protobuf::int32 rankindex() const;
  inline void set_rankindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcPvpBattleInfoSyncReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_battleinfo();
  inline void clear_has_battleinfo();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_rankindex();
  inline void clear_has_rankindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PvpBattleInfo* battleinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 rankindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcPvpBattleInfoSyncReply* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcReconnectNotify : public ::google::protobuf::Message {
 public:
  PvpRpcReconnectNotify();
  virtual ~PvpRpcReconnectNotify();

  PvpRpcReconnectNotify(const PvpRpcReconnectNotify& from);

  inline PvpRpcReconnectNotify& operator=(const PvpRpcReconnectNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcReconnectNotify& default_instance();

  void Swap(PvpRpcReconnectNotify* other);

  // implements Message ----------------------------------------------

  PvpRpcReconnectNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcReconnectNotify& from);
  void MergeFrom(const PvpRpcReconnectNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 NeedKill = 1 [default = -1];
  inline bool has_needkill() const;
  inline void clear_needkill();
  static const int kNeedKillFieldNumber = 1;
  inline ::google::protobuf::int32 needkill() const;
  inline void set_needkill(::google::protobuf::int32 value);

  // optional int32 ArenaState = 2 [default = -1];
  inline bool has_arenastate() const;
  inline void clear_arenastate();
  static const int kArenaStateFieldNumber = 2;
  inline ::google::protobuf::int32 arenastate() const;
  inline void set_arenastate(::google::protobuf::int32 value);

  // optional int32 LeftTime = 3 [default = -1];
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // optional int32 LeftKill = 5 [default = -1];
  inline bool has_leftkill() const;
  inline void clear_leftkill();
  static const int kLeftKillFieldNumber = 5;
  inline ::google::protobuf::int32 leftkill() const;
  inline void set_leftkill(::google::protobuf::int32 value);

  // optional int32 RightKill = 6 [default = -1];
  inline bool has_rightkill() const;
  inline void clear_rightkill();
  static const int kRightKillFieldNumber = 6;
  inline ::google::protobuf::int32 rightkill() const;
  inline void set_rightkill(::google::protobuf::int32 value);

  // optional int32 Camp = 7 [default = -1];
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 7;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int32 TimeStamp = 8 [default = -1];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 8;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcReconnectNotify)
 private:
  inline void set_has_needkill();
  inline void clear_has_needkill();
  inline void set_has_arenastate();
  inline void clear_has_arenastate();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_leftkill();
  inline void clear_has_leftkill();
  inline void set_has_rightkill();
  inline void clear_has_rightkill();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 needkill_;
  ::google::protobuf::int32 arenastate_;
  ::google::protobuf::int32 lefttime_;
  ::google::protobuf::int32 leftkill_;
  ::google::protobuf::int32 rightkill_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcReconnectNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcGetRewardAsk : public ::google::protobuf::Message {
 public:
  PvpRpcGetRewardAsk();
  virtual ~PvpRpcGetRewardAsk();

  PvpRpcGetRewardAsk(const PvpRpcGetRewardAsk& from);

  inline PvpRpcGetRewardAsk& operator=(const PvpRpcGetRewardAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcGetRewardAsk& default_instance();

  void Swap(PvpRpcGetRewardAsk* other);

  // implements Message ----------------------------------------------

  PvpRpcGetRewardAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcGetRewardAsk& from);
  void MergeFrom(const PvpRpcGetRewardAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PvPType = 1 [default = -1];
  inline bool has_pvptype() const;
  inline void clear_pvptype();
  static const int kPvPTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pvptype() const;
  inline void set_pvptype(::google::protobuf::int32 value);

  // optional int32 Rank = 2 [default = -1];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpRpcGetRewardAsk)
 private:
  inline void set_has_pvptype();
  inline void clear_has_pvptype();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pvptype_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcGetRewardAsk* default_instance_;
};
// -------------------------------------------------------------------

class PvpRpcGetRewardReply : public ::google::protobuf::Message {
 public:
  PvpRpcGetRewardReply();
  virtual ~PvpRpcGetRewardReply();

  PvpRpcGetRewardReply(const PvpRpcGetRewardReply& from);

  inline PvpRpcGetRewardReply& operator=(const PvpRpcGetRewardReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpRpcGetRewardReply& default_instance();

  void Swap(PvpRpcGetRewardReply* other);

  // implements Message ----------------------------------------------

  PvpRpcGetRewardReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpRpcGetRewardReply& from);
  void MergeFrom(const PvpRpcGetRewardReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int32 RewardList = 2;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 2;
  inline ::google::protobuf::int32 rewardlist(int index) const;
  inline void set_rewardlist(int index, ::google::protobuf::int32 value);
  inline void add_rewardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardlist();

  // @@protoc_insertion_point(class_scope:PvpRpcGetRewardReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PvpRpc_2eproto();
  friend void protobuf_AssignDesc_PvpRpc_2eproto();
  friend void protobuf_ShutdownFile_PvpRpc_2eproto();

  void InitAsDefaultInstance();
  static PvpRpcGetRewardReply* default_instance_;
};
// ===================================================================


// ===================================================================

// PvpRpcRankAsk

// optional int32 PvpType = 1 [default = -1];
inline bool PvpRpcRankAsk::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcRankAsk::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcRankAsk::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcRankAsk::clear_pvptype() {
  pvptype_ = -1;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 PvpRpcRankAsk::pvptype() const {
  return pvptype_;
}
inline void PvpRpcRankAsk::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// -------------------------------------------------------------------

// PvpRpcRankReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcRankReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcRankReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcRankReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcRankReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcRankReply::result() const {
  return result_;
}
inline void PvpRpcRankReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .PvpPlayerInfo RankList = 2;
inline int PvpRpcRankReply::ranklist_size() const {
  return ranklist_.size();
}
inline void PvpRpcRankReply::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::PvpPlayerInfo& PvpRpcRankReply::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::PvpPlayerInfo* PvpRpcRankReply::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::PvpPlayerInfo* PvpRpcRankReply::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
PvpRpcRankReply::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
PvpRpcRankReply::mutable_ranklist() {
  return &ranklist_;
}

// -------------------------------------------------------------------

// PvpRpcMatchAsk

// optional int32 PvpType = 1 [default = -1];
inline bool PvpRpcMatchAsk::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcMatchAsk::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcMatchAsk::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcMatchAsk::clear_pvptype() {
  pvptype_ = -1;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 PvpRpcMatchAsk::pvptype() const {
  return pvptype_;
}
inline void PvpRpcMatchAsk::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// -------------------------------------------------------------------

// PvpRpcMatchReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcMatchReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcMatchReply::result() const {
  return result_;
}
inline void PvpRpcMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PvpRpcMatchNotifyNotify

// -------------------------------------------------------------------

// PvpRpcMatchCancleAsk

// -------------------------------------------------------------------

// PvpRpcMatchCancleReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcMatchCancleReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcMatchCancleReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcMatchCancleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcMatchCancleReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcMatchCancleReply::result() const {
  return result_;
}
inline void PvpRpcMatchCancleReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PvpRpcMatchCancleNotifyNotify

// optional uint64 RoleId = 1 [default = 0];
inline bool PvpRpcMatchCancleNotifyNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcMatchCancleNotifyNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpRpcMatchCancleNotifyNotify::roleid() const {
  return roleid_;
}
inline void PvpRpcMatchCancleNotifyNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string Name = 2;
inline bool PvpRpcMatchCancleNotifyNotify::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcMatchCancleNotifyNotify::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvpRpcMatchCancleNotifyNotify::name() const {
  return *name_;
}
inline void PvpRpcMatchCancleNotifyNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvpRpcMatchCancleNotifyNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvpRpcMatchCancleNotifyNotify::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvpRpcMatchCancleNotifyNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PvpRpcMatchCancleNotifyNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvpRpcMatchCancleNotifyNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Reason = 3 [default = -1];
inline bool PvpRpcMatchCancleNotifyNotify::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcMatchCancleNotifyNotify::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcMatchCancleNotifyNotify::clear_reason() {
  reason_ = -1;
  clear_has_reason();
}
inline ::google::protobuf::int32 PvpRpcMatchCancleNotifyNotify::reason() const {
  return reason_;
}
inline void PvpRpcMatchCancleNotifyNotify::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPlayerReadyAsk

// optional int32 OpreationType = 1 [default = -1];
inline bool PvpRpcPlayerReadyAsk::has_opreationtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPlayerReadyAsk::set_has_opreationtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPlayerReadyAsk::clear_has_opreationtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPlayerReadyAsk::clear_opreationtype() {
  opreationtype_ = -1;
  clear_has_opreationtype();
}
inline ::google::protobuf::int32 PvpRpcPlayerReadyAsk::opreationtype() const {
  return opreationtype_;
}
inline void PvpRpcPlayerReadyAsk::set_opreationtype(::google::protobuf::int32 value) {
  set_has_opreationtype();
  opreationtype_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPlayerReadyReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcPlayerReadyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPlayerReadyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPlayerReadyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPlayerReadyReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcPlayerReadyReply::result() const {
  return result_;
}
inline void PvpRpcPlayerReadyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPlayerReadyNotifyNotify

// optional uint64 RoleId = 1 [default = 0];
inline bool PvpRpcPlayerReadyNotifyNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPlayerReadyNotifyNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPlayerReadyNotifyNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPlayerReadyNotifyNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpRpcPlayerReadyNotifyNotify::roleid() const {
  return roleid_;
}
inline void PvpRpcPlayerReadyNotifyNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 OpType = 2 [default = -1];
inline bool PvpRpcPlayerReadyNotifyNotify::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcPlayerReadyNotifyNotify::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcPlayerReadyNotifyNotify::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcPlayerReadyNotifyNotify::clear_optype() {
  optype_ = -1;
  clear_has_optype();
}
inline ::google::protobuf::int32 PvpRpcPlayerReadyNotifyNotify::optype() const {
  return optype_;
}
inline void PvpRpcPlayerReadyNotifyNotify::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// -------------------------------------------------------------------

// PvpRpcReadyFaildNotify

// optional int32 Reason = 1 [default = -1];
inline bool PvpRpcReadyFaildNotify::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcReadyFaildNotify::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcReadyFaildNotify::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcReadyFaildNotify::clear_reason() {
  reason_ = -1;
  clear_has_reason();
}
inline ::google::protobuf::int32 PvpRpcReadyFaildNotify::reason() const {
  return reason_;
}
inline void PvpRpcReadyFaildNotify::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// optional uint64 RoleId = 2 [default = 0];
inline bool PvpRpcReadyFaildNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcReadyFaildNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcReadyFaildNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcReadyFaildNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpRpcReadyFaildNotify::roleid() const {
  return roleid_;
}
inline void PvpRpcReadyFaildNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPvpBattleStartNotify

// optional int32 LeftKill = 2 [default = -1];
inline bool PvpRpcPvpBattleStartNotify::has_leftkill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPvpBattleStartNotify::set_has_leftkill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPvpBattleStartNotify::clear_has_leftkill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPvpBattleStartNotify::clear_leftkill() {
  leftkill_ = -1;
  clear_has_leftkill();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleStartNotify::leftkill() const {
  return leftkill_;
}
inline void PvpRpcPvpBattleStartNotify::set_leftkill(::google::protobuf::int32 value) {
  set_has_leftkill();
  leftkill_ = value;
}

// optional int32 RightKill = 3 [default = -1];
inline bool PvpRpcPvpBattleStartNotify::has_rightkill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcPvpBattleStartNotify::set_has_rightkill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcPvpBattleStartNotify::clear_has_rightkill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcPvpBattleStartNotify::clear_rightkill() {
  rightkill_ = -1;
  clear_has_rightkill();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleStartNotify::rightkill() const {
  return rightkill_;
}
inline void PvpRpcPvpBattleStartNotify::set_rightkill(::google::protobuf::int32 value) {
  set_has_rightkill();
  rightkill_ = value;
}

// optional int32 NeedKill = 4 [default = -1];
inline bool PvpRpcPvpBattleStartNotify::has_needkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcPvpBattleStartNotify::set_has_needkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcPvpBattleStartNotify::clear_has_needkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcPvpBattleStartNotify::clear_needkill() {
  needkill_ = -1;
  clear_has_needkill();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleStartNotify::needkill() const {
  return needkill_;
}
inline void PvpRpcPvpBattleStartNotify::set_needkill(::google::protobuf::int32 value) {
  set_has_needkill();
  needkill_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPvpBattleEndNotify

// optional .PvpBattleEndInfo BattleEndInfo = 4;
inline bool PvpRpcPvpBattleEndNotify::has_battleendinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPvpBattleEndNotify::set_has_battleendinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPvpBattleEndNotify::clear_has_battleendinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPvpBattleEndNotify::clear_battleendinfo() {
  if (battleendinfo_ != NULL) battleendinfo_->::PvpBattleEndInfo::Clear();
  clear_has_battleendinfo();
}
inline const ::PvpBattleEndInfo& PvpRpcPvpBattleEndNotify::battleendinfo() const {
  return battleendinfo_ != NULL ? *battleendinfo_ : *default_instance_->battleendinfo_;
}
inline ::PvpBattleEndInfo* PvpRpcPvpBattleEndNotify::mutable_battleendinfo() {
  set_has_battleendinfo();
  if (battleendinfo_ == NULL) battleendinfo_ = new ::PvpBattleEndInfo;
  return battleendinfo_;
}
inline ::PvpBattleEndInfo* PvpRpcPvpBattleEndNotify::release_battleendinfo() {
  clear_has_battleendinfo();
  ::PvpBattleEndInfo* temp = battleendinfo_;
  battleendinfo_ = NULL;
  return temp;
}
inline void PvpRpcPvpBattleEndNotify::set_allocated_battleendinfo(::PvpBattleEndInfo* battleendinfo) {
  delete battleendinfo_;
  battleendinfo_ = battleendinfo;
  if (battleendinfo) {
    set_has_battleendinfo();
  } else {
    clear_has_battleendinfo();
  }
}

// -------------------------------------------------------------------

// PvpRpcMatchSucessNotify

// repeated .PvpPlayerInfo LeftTeam = 1;
inline int PvpRpcMatchSucessNotify::leftteam_size() const {
  return leftteam_.size();
}
inline void PvpRpcMatchSucessNotify::clear_leftteam() {
  leftteam_.Clear();
}
inline const ::PvpPlayerInfo& PvpRpcMatchSucessNotify::leftteam(int index) const {
  return leftteam_.Get(index);
}
inline ::PvpPlayerInfo* PvpRpcMatchSucessNotify::mutable_leftteam(int index) {
  return leftteam_.Mutable(index);
}
inline ::PvpPlayerInfo* PvpRpcMatchSucessNotify::add_leftteam() {
  return leftteam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
PvpRpcMatchSucessNotify::leftteam() const {
  return leftteam_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
PvpRpcMatchSucessNotify::mutable_leftteam() {
  return &leftteam_;
}

// repeated .PvpPlayerInfo RightTeam = 2;
inline int PvpRpcMatchSucessNotify::rightteam_size() const {
  return rightteam_.size();
}
inline void PvpRpcMatchSucessNotify::clear_rightteam() {
  rightteam_.Clear();
}
inline const ::PvpPlayerInfo& PvpRpcMatchSucessNotify::rightteam(int index) const {
  return rightteam_.Get(index);
}
inline ::PvpPlayerInfo* PvpRpcMatchSucessNotify::mutable_rightteam(int index) {
  return rightteam_.Mutable(index);
}
inline ::PvpPlayerInfo* PvpRpcMatchSucessNotify::add_rightteam() {
  return rightteam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
PvpRpcMatchSucessNotify::rightteam() const {
  return rightteam_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
PvpRpcMatchSucessNotify::mutable_rightteam() {
  return &rightteam_;
}

// optional int32 Time = 3 [default = -1];
inline bool PvpRpcMatchSucessNotify::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcMatchSucessNotify::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcMatchSucessNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcMatchSucessNotify::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 PvpRpcMatchSucessNotify::time() const {
  return time_;
}
inline void PvpRpcMatchSucessNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// PvpRpcRankChangeNotify

// optional int32 PvpType = 1 [default = -1];
inline bool PvpRpcRankChangeNotify::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcRankChangeNotify::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcRankChangeNotify::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcRankChangeNotify::clear_pvptype() {
  pvptype_ = -1;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 PvpRpcRankChangeNotify::pvptype() const {
  return pvptype_;
}
inline void PvpRpcRankChangeNotify::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// optional int32 BeforeRank = 2 [default = -1];
inline bool PvpRpcRankChangeNotify::has_beforerank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcRankChangeNotify::set_has_beforerank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcRankChangeNotify::clear_has_beforerank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcRankChangeNotify::clear_beforerank() {
  beforerank_ = -1;
  clear_has_beforerank();
}
inline ::google::protobuf::int32 PvpRpcRankChangeNotify::beforerank() const {
  return beforerank_;
}
inline void PvpRpcRankChangeNotify::set_beforerank(::google::protobuf::int32 value) {
  set_has_beforerank();
  beforerank_ = value;
}

// optional int32 AfterRank = 3 [default = -1];
inline bool PvpRpcRankChangeNotify::has_afterrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcRankChangeNotify::set_has_afterrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcRankChangeNotify::clear_has_afterrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcRankChangeNotify::clear_afterrank() {
  afterrank_ = -1;
  clear_has_afterrank();
}
inline ::google::protobuf::int32 PvpRpcRankChangeNotify::afterrank() const {
  return afterrank_;
}
inline void PvpRpcRankChangeNotify::set_afterrank(::google::protobuf::int32 value) {
  set_has_afterrank();
  afterrank_ = value;
}

// optional int32 BeforeStar = 4 [default = -1];
inline bool PvpRpcRankChangeNotify::has_beforestar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpRpcRankChangeNotify::set_has_beforestar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpRpcRankChangeNotify::clear_has_beforestar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpRpcRankChangeNotify::clear_beforestar() {
  beforestar_ = -1;
  clear_has_beforestar();
}
inline ::google::protobuf::int32 PvpRpcRankChangeNotify::beforestar() const {
  return beforestar_;
}
inline void PvpRpcRankChangeNotify::set_beforestar(::google::protobuf::int32 value) {
  set_has_beforestar();
  beforestar_ = value;
}

// optional int32 AfterStar = 5 [default = -1];
inline bool PvpRpcRankChangeNotify::has_afterstar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpRpcRankChangeNotify::set_has_afterstar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpRpcRankChangeNotify::clear_has_afterstar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpRpcRankChangeNotify::clear_afterstar() {
  afterstar_ = -1;
  clear_has_afterstar();
}
inline ::google::protobuf::int32 PvpRpcRankChangeNotify::afterstar() const {
  return afterstar_;
}
inline void PvpRpcRankChangeNotify::set_afterstar(::google::protobuf::int32 value) {
  set_has_afterstar();
  afterstar_ = value;
}

// -------------------------------------------------------------------

// PvpRpcReturnLastSceneAsk

// -------------------------------------------------------------------

// PvpRpcReturnLastSceneReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcReturnLastSceneReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcReturnLastSceneReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcReturnLastSceneReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcReturnLastSceneReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcReturnLastSceneReply::result() const {
  return result_;
}
inline void PvpRpcReturnLastSceneReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PvpRpcArenaStartTimeNotify

// optional int32 NeedTime = 1 [default = -1];
inline bool PvpRpcArenaStartTimeNotify::has_needtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcArenaStartTimeNotify::set_has_needtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcArenaStartTimeNotify::clear_has_needtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcArenaStartTimeNotify::clear_needtime() {
  needtime_ = -1;
  clear_has_needtime();
}
inline ::google::protobuf::int32 PvpRpcArenaStartTimeNotify::needtime() const {
  return needtime_;
}
inline void PvpRpcArenaStartTimeNotify::set_needtime(::google::protobuf::int32 value) {
  set_has_needtime();
  needtime_ = value;
}

// optional int32 TimeStamp = 2 [default = -1];
inline bool PvpRpcArenaStartTimeNotify::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcArenaStartTimeNotify::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcArenaStartTimeNotify::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcArenaStartTimeNotify::clear_timestamp() {
  timestamp_ = -1;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 PvpRpcArenaStartTimeNotify::timestamp() const {
  return timestamp_;
}
inline void PvpRpcArenaStartTimeNotify::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// PvpRpcUpdateKillCountNotify

// optional int32 LeftTeamKill = 1 [default = -1];
inline bool PvpRpcUpdateKillCountNotify::has_leftteamkill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcUpdateKillCountNotify::set_has_leftteamkill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcUpdateKillCountNotify::clear_has_leftteamkill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcUpdateKillCountNotify::clear_leftteamkill() {
  leftteamkill_ = -1;
  clear_has_leftteamkill();
}
inline ::google::protobuf::int32 PvpRpcUpdateKillCountNotify::leftteamkill() const {
  return leftteamkill_;
}
inline void PvpRpcUpdateKillCountNotify::set_leftteamkill(::google::protobuf::int32 value) {
  set_has_leftteamkill();
  leftteamkill_ = value;
}

// optional int32 RightTeamKill = 2 [default = -1];
inline bool PvpRpcUpdateKillCountNotify::has_rightteamkill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcUpdateKillCountNotify::set_has_rightteamkill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcUpdateKillCountNotify::clear_has_rightteamkill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcUpdateKillCountNotify::clear_rightteamkill() {
  rightteamkill_ = -1;
  clear_has_rightteamkill();
}
inline ::google::protobuf::int32 PvpRpcUpdateKillCountNotify::rightteamkill() const {
  return rightteamkill_;
}
inline void PvpRpcUpdateKillCountNotify::set_rightteamkill(::google::protobuf::int32 value) {
  set_has_rightteamkill();
  rightteamkill_ = value;
}

// -------------------------------------------------------------------

// PvpRpcArenaLeftTimeNotify

// optional int32 LeftTime = 1 [default = -1];
inline bool PvpRpcArenaLeftTimeNotify::has_lefttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcArenaLeftTimeNotify::set_has_lefttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcArenaLeftTimeNotify::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcArenaLeftTimeNotify::clear_lefttime() {
  lefttime_ = -1;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 PvpRpcArenaLeftTimeNotify::lefttime() const {
  return lefttime_;
}
inline void PvpRpcArenaLeftTimeNotify::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// PvpRpcLastRankAsk

// optional int32 PvpType = 1 [default = -1];
inline bool PvpRpcLastRankAsk::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcLastRankAsk::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcLastRankAsk::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcLastRankAsk::clear_pvptype() {
  pvptype_ = -1;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 PvpRpcLastRankAsk::pvptype() const {
  return pvptype_;
}
inline void PvpRpcLastRankAsk::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// -------------------------------------------------------------------

// PvpRpcLastRankReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcLastRankReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcLastRankReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcLastRankReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcLastRankReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcLastRankReply::result() const {
  return result_;
}
inline void PvpRpcLastRankReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .PvpPlayerInfo RankList = 2;
inline int PvpRpcLastRankReply::ranklist_size() const {
  return ranklist_.size();
}
inline void PvpRpcLastRankReply::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::PvpPlayerInfo& PvpRpcLastRankReply::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::PvpPlayerInfo* PvpRpcLastRankReply::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::PvpPlayerInfo* PvpRpcLastRankReply::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >&
PvpRpcLastRankReply::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpPlayerInfo >*
PvpRpcLastRankReply::mutable_ranklist() {
  return &ranklist_;
}

// -------------------------------------------------------------------

// PvpRpcNewSeasonNotify

// optional int32 LastRank = 1 [default = -1];
inline bool PvpRpcNewSeasonNotify::has_lastrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcNewSeasonNotify::set_has_lastrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcNewSeasonNotify::clear_has_lastrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcNewSeasonNotify::clear_lastrank() {
  lastrank_ = -1;
  clear_has_lastrank();
}
inline ::google::protobuf::int32 PvpRpcNewSeasonNotify::lastrank() const {
  return lastrank_;
}
inline void PvpRpcNewSeasonNotify::set_lastrank(::google::protobuf::int32 value) {
  set_has_lastrank();
  lastrank_ = value;
}

// optional int32 LastStar = 2 [default = -1];
inline bool PvpRpcNewSeasonNotify::has_laststar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcNewSeasonNotify::set_has_laststar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcNewSeasonNotify::clear_has_laststar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcNewSeasonNotify::clear_laststar() {
  laststar_ = -1;
  clear_has_laststar();
}
inline ::google::protobuf::int32 PvpRpcNewSeasonNotify::laststar() const {
  return laststar_;
}
inline void PvpRpcNewSeasonNotify::set_laststar(::google::protobuf::int32 value) {
  set_has_laststar();
  laststar_ = value;
}

// optional int32 LastRanking = 3 [default = -1];
inline bool PvpRpcNewSeasonNotify::has_lastranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcNewSeasonNotify::set_has_lastranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcNewSeasonNotify::clear_has_lastranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcNewSeasonNotify::clear_lastranking() {
  lastranking_ = -1;
  clear_has_lastranking();
}
inline ::google::protobuf::int32 PvpRpcNewSeasonNotify::lastranking() const {
  return lastranking_;
}
inline void PvpRpcNewSeasonNotify::set_lastranking(::google::protobuf::int32 value) {
  set_has_lastranking();
  lastranking_ = value;
}

// repeated .PvpBattleRewardInfo RewardList = 4;
inline int PvpRpcNewSeasonNotify::rewardlist_size() const {
  return rewardlist_.size();
}
inline void PvpRpcNewSeasonNotify::clear_rewardlist() {
  rewardlist_.Clear();
}
inline const ::PvpBattleRewardInfo& PvpRpcNewSeasonNotify::rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline ::PvpBattleRewardInfo* PvpRpcNewSeasonNotify::mutable_rewardlist(int index) {
  return rewardlist_.Mutable(index);
}
inline ::PvpBattleRewardInfo* PvpRpcNewSeasonNotify::add_rewardlist() {
  return rewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >&
PvpRpcNewSeasonNotify::rewardlist() const {
  return rewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >*
PvpRpcNewSeasonNotify::mutable_rewardlist() {
  return &rewardlist_;
}

// -------------------------------------------------------------------

// PvpRpcGetSeasonRewardAsk

// -------------------------------------------------------------------

// PvpRpcGetSeasonRewardReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcGetSeasonRewardReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcGetSeasonRewardReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcGetSeasonRewardReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcGetSeasonRewardReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcGetSeasonRewardReply::result() const {
  return result_;
}
inline void PvpRpcGetSeasonRewardReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PvpRpcPvpBattleInfoSyncAsk

// -------------------------------------------------------------------

// PvpRpcPvpBattleInfoSyncReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcPvpBattleInfoSyncReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleInfoSyncReply::result() const {
  return result_;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .PvpBattleInfo BattleInfo = 2;
inline bool PvpRpcPvpBattleInfoSyncReply::has_battleinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_has_battleinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_has_battleinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_battleinfo() {
  if (battleinfo_ != NULL) battleinfo_->::PvpBattleInfo::Clear();
  clear_has_battleinfo();
}
inline const ::PvpBattleInfo& PvpRpcPvpBattleInfoSyncReply::battleinfo() const {
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance_->battleinfo_;
}
inline ::PvpBattleInfo* PvpRpcPvpBattleInfoSyncReply::mutable_battleinfo() {
  set_has_battleinfo();
  if (battleinfo_ == NULL) battleinfo_ = new ::PvpBattleInfo;
  return battleinfo_;
}
inline ::PvpBattleInfo* PvpRpcPvpBattleInfoSyncReply::release_battleinfo() {
  clear_has_battleinfo();
  ::PvpBattleInfo* temp = battleinfo_;
  battleinfo_ = NULL;
  return temp;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_allocated_battleinfo(::PvpBattleInfo* battleinfo) {
  delete battleinfo_;
  battleinfo_ = battleinfo;
  if (battleinfo) {
    set_has_battleinfo();
  } else {
    clear_has_battleinfo();
  }
}

// optional int32 Season = 3 [default = -1];
inline bool PvpRpcPvpBattleInfoSyncReply::has_season() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_has_season() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_has_season() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_season() {
  season_ = -1;
  clear_has_season();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleInfoSyncReply::season() const {
  return season_;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// optional int32 RankIndex = 4 [default = -1];
inline bool PvpRpcPvpBattleInfoSyncReply::has_rankindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_has_rankindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_has_rankindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpRpcPvpBattleInfoSyncReply::clear_rankindex() {
  rankindex_ = -1;
  clear_has_rankindex();
}
inline ::google::protobuf::int32 PvpRpcPvpBattleInfoSyncReply::rankindex() const {
  return rankindex_;
}
inline void PvpRpcPvpBattleInfoSyncReply::set_rankindex(::google::protobuf::int32 value) {
  set_has_rankindex();
  rankindex_ = value;
}

// -------------------------------------------------------------------

// PvpRpcReconnectNotify

// optional int32 NeedKill = 1 [default = -1];
inline bool PvpRpcReconnectNotify::has_needkill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_needkill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcReconnectNotify::clear_has_needkill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcReconnectNotify::clear_needkill() {
  needkill_ = -1;
  clear_has_needkill();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::needkill() const {
  return needkill_;
}
inline void PvpRpcReconnectNotify::set_needkill(::google::protobuf::int32 value) {
  set_has_needkill();
  needkill_ = value;
}

// optional int32 ArenaState = 2 [default = -1];
inline bool PvpRpcReconnectNotify::has_arenastate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_arenastate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcReconnectNotify::clear_has_arenastate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcReconnectNotify::clear_arenastate() {
  arenastate_ = -1;
  clear_has_arenastate();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::arenastate() const {
  return arenastate_;
}
inline void PvpRpcReconnectNotify::set_arenastate(::google::protobuf::int32 value) {
  set_has_arenastate();
  arenastate_ = value;
}

// optional int32 LeftTime = 3 [default = -1];
inline bool PvpRpcReconnectNotify::has_lefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_lefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpRpcReconnectNotify::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpRpcReconnectNotify::clear_lefttime() {
  lefttime_ = -1;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::lefttime() const {
  return lefttime_;
}
inline void PvpRpcReconnectNotify::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// optional int32 LeftKill = 5 [default = -1];
inline bool PvpRpcReconnectNotify::has_leftkill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_leftkill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpRpcReconnectNotify::clear_has_leftkill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpRpcReconnectNotify::clear_leftkill() {
  leftkill_ = -1;
  clear_has_leftkill();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::leftkill() const {
  return leftkill_;
}
inline void PvpRpcReconnectNotify::set_leftkill(::google::protobuf::int32 value) {
  set_has_leftkill();
  leftkill_ = value;
}

// optional int32 RightKill = 6 [default = -1];
inline bool PvpRpcReconnectNotify::has_rightkill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_rightkill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpRpcReconnectNotify::clear_has_rightkill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpRpcReconnectNotify::clear_rightkill() {
  rightkill_ = -1;
  clear_has_rightkill();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::rightkill() const {
  return rightkill_;
}
inline void PvpRpcReconnectNotify::set_rightkill(::google::protobuf::int32 value) {
  set_has_rightkill();
  rightkill_ = value;
}

// optional int32 Camp = 7 [default = -1];
inline bool PvpRpcReconnectNotify::has_camp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_camp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpRpcReconnectNotify::clear_has_camp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpRpcReconnectNotify::clear_camp() {
  camp_ = -1;
  clear_has_camp();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::camp() const {
  return camp_;
}
inline void PvpRpcReconnectNotify::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 TimeStamp = 8 [default = -1];
inline bool PvpRpcReconnectNotify::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpRpcReconnectNotify::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpRpcReconnectNotify::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpRpcReconnectNotify::clear_timestamp() {
  timestamp_ = -1;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 PvpRpcReconnectNotify::timestamp() const {
  return timestamp_;
}
inline void PvpRpcReconnectNotify::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// PvpRpcGetRewardAsk

// optional int32 PvPType = 1 [default = -1];
inline bool PvpRpcGetRewardAsk::has_pvptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcGetRewardAsk::set_has_pvptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcGetRewardAsk::clear_has_pvptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcGetRewardAsk::clear_pvptype() {
  pvptype_ = -1;
  clear_has_pvptype();
}
inline ::google::protobuf::int32 PvpRpcGetRewardAsk::pvptype() const {
  return pvptype_;
}
inline void PvpRpcGetRewardAsk::set_pvptype(::google::protobuf::int32 value) {
  set_has_pvptype();
  pvptype_ = value;
}

// optional int32 Rank = 2 [default = -1];
inline bool PvpRpcGetRewardAsk::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpRpcGetRewardAsk::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpRpcGetRewardAsk::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpRpcGetRewardAsk::clear_rank() {
  rank_ = -1;
  clear_has_rank();
}
inline ::google::protobuf::int32 PvpRpcGetRewardAsk::rank() const {
  return rank_;
}
inline void PvpRpcGetRewardAsk::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// PvpRpcGetRewardReply

// optional int32 Result = 1 [default = -1];
inline bool PvpRpcGetRewardReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpRpcGetRewardReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpRpcGetRewardReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpRpcGetRewardReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpRpcGetRewardReply::result() const {
  return result_;
}
inline void PvpRpcGetRewardReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated int32 RewardList = 2;
inline int PvpRpcGetRewardReply::rewardlist_size() const {
  return rewardlist_.size();
}
inline void PvpRpcGetRewardReply::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::google::protobuf::int32 PvpRpcGetRewardReply::rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline void PvpRpcGetRewardReply::set_rewardlist(int index, ::google::protobuf::int32 value) {
  rewardlist_.Set(index, value);
}
inline void PvpRpcGetRewardReply::add_rewardlist(::google::protobuf::int32 value) {
  rewardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvpRpcGetRewardReply::rewardlist() const {
  return rewardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvpRpcGetRewardReply::mutable_rewardlist() {
  return &rewardlist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PvpRpc_2eproto__INCLUDED
