// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PvpRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PvpRpcRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchCancleAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchCancleAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchCancleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchCancleReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchCancleNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchCancleNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPlayerReadyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPlayerReadyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPlayerReadyNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcReadyFaildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcReadyFaildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPvpBattleStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPvpBattleStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPvpBattleEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPvpBattleEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcMatchSucessNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcMatchSucessNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcRankChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcRankChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcReturnLastSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcReturnLastSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcReturnLastSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcReturnLastSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcArenaStartTimeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcArenaStartTimeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcUpdateKillCountNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcUpdateKillCountNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcArenaLeftTimeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcArenaLeftTimeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcLastRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcLastRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcLastRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcLastRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcNewSeasonNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcNewSeasonNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcGetSeasonRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcGetSeasonRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcGetSeasonRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcGetSeasonRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPvpBattleInfoSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPvpBattleInfoSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcPvpBattleInfoSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcPvpBattleInfoSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcReconnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcReconnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcGetRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcGetRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRpcGetRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRpcGetRewardReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PvpRpc_2eproto() {
  protobuf_AddDesc_PvpRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PvpRpc.proto");
  GOOGLE_CHECK(file != NULL);
  PvpRpcRankAsk_descriptor_ = file->message_type(0);
  static const int PvpRpcRankAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankAsk, pvptype_),
  };
  PvpRpcRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcRankAsk_descriptor_,
      PvpRpcRankAsk::default_instance_,
      PvpRpcRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcRankAsk));
  PvpRpcRankReply_descriptor_ = file->message_type(1);
  static const int PvpRpcRankReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankReply, ranklist_),
  };
  PvpRpcRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcRankReply_descriptor_,
      PvpRpcRankReply::default_instance_,
      PvpRpcRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcRankReply));
  PvpRpcMatchAsk_descriptor_ = file->message_type(2);
  static const int PvpRpcMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchAsk, pvptype_),
  };
  PvpRpcMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchAsk_descriptor_,
      PvpRpcMatchAsk::default_instance_,
      PvpRpcMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchAsk));
  PvpRpcMatchReply_descriptor_ = file->message_type(3);
  static const int PvpRpcMatchReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchReply, result_),
  };
  PvpRpcMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchReply_descriptor_,
      PvpRpcMatchReply::default_instance_,
      PvpRpcMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchReply));
  PvpRpcMatchNotifyNotify_descriptor_ = file->message_type(4);
  static const int PvpRpcMatchNotifyNotify_offsets_[1] = {
  };
  PvpRpcMatchNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchNotifyNotify_descriptor_,
      PvpRpcMatchNotifyNotify::default_instance_,
      PvpRpcMatchNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchNotifyNotify));
  PvpRpcMatchCancleAsk_descriptor_ = file->message_type(5);
  static const int PvpRpcMatchCancleAsk_offsets_[1] = {
  };
  PvpRpcMatchCancleAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchCancleAsk_descriptor_,
      PvpRpcMatchCancleAsk::default_instance_,
      PvpRpcMatchCancleAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchCancleAsk));
  PvpRpcMatchCancleReply_descriptor_ = file->message_type(6);
  static const int PvpRpcMatchCancleReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleReply, result_),
  };
  PvpRpcMatchCancleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchCancleReply_descriptor_,
      PvpRpcMatchCancleReply::default_instance_,
      PvpRpcMatchCancleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchCancleReply));
  PvpRpcMatchCancleNotifyNotify_descriptor_ = file->message_type(7);
  static const int PvpRpcMatchCancleNotifyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleNotifyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleNotifyNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleNotifyNotify, reason_),
  };
  PvpRpcMatchCancleNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchCancleNotifyNotify_descriptor_,
      PvpRpcMatchCancleNotifyNotify::default_instance_,
      PvpRpcMatchCancleNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchCancleNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchCancleNotifyNotify));
  PvpRpcPlayerReadyAsk_descriptor_ = file->message_type(8);
  static const int PvpRpcPlayerReadyAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyAsk, opreationtype_),
  };
  PvpRpcPlayerReadyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPlayerReadyAsk_descriptor_,
      PvpRpcPlayerReadyAsk::default_instance_,
      PvpRpcPlayerReadyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPlayerReadyAsk));
  PvpRpcPlayerReadyReply_descriptor_ = file->message_type(9);
  static const int PvpRpcPlayerReadyReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyReply, result_),
  };
  PvpRpcPlayerReadyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPlayerReadyReply_descriptor_,
      PvpRpcPlayerReadyReply::default_instance_,
      PvpRpcPlayerReadyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPlayerReadyReply));
  PvpRpcPlayerReadyNotifyNotify_descriptor_ = file->message_type(10);
  static const int PvpRpcPlayerReadyNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyNotifyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyNotifyNotify, optype_),
  };
  PvpRpcPlayerReadyNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPlayerReadyNotifyNotify_descriptor_,
      PvpRpcPlayerReadyNotifyNotify::default_instance_,
      PvpRpcPlayerReadyNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPlayerReadyNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPlayerReadyNotifyNotify));
  PvpRpcReadyFaildNotify_descriptor_ = file->message_type(11);
  static const int PvpRpcReadyFaildNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReadyFaildNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReadyFaildNotify, roleid_),
  };
  PvpRpcReadyFaildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcReadyFaildNotify_descriptor_,
      PvpRpcReadyFaildNotify::default_instance_,
      PvpRpcReadyFaildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReadyFaildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReadyFaildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcReadyFaildNotify));
  PvpRpcPvpBattleStartNotify_descriptor_ = file->message_type(12);
  static const int PvpRpcPvpBattleStartNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleStartNotify, leftkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleStartNotify, rightkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleStartNotify, needkill_),
  };
  PvpRpcPvpBattleStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPvpBattleStartNotify_descriptor_,
      PvpRpcPvpBattleStartNotify::default_instance_,
      PvpRpcPvpBattleStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPvpBattleStartNotify));
  PvpRpcPvpBattleEndNotify_descriptor_ = file->message_type(13);
  static const int PvpRpcPvpBattleEndNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleEndNotify, battleendinfo_),
  };
  PvpRpcPvpBattleEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPvpBattleEndNotify_descriptor_,
      PvpRpcPvpBattleEndNotify::default_instance_,
      PvpRpcPvpBattleEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPvpBattleEndNotify));
  PvpRpcMatchSucessNotify_descriptor_ = file->message_type(14);
  static const int PvpRpcMatchSucessNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchSucessNotify, leftteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchSucessNotify, rightteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchSucessNotify, time_),
  };
  PvpRpcMatchSucessNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcMatchSucessNotify_descriptor_,
      PvpRpcMatchSucessNotify::default_instance_,
      PvpRpcMatchSucessNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchSucessNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcMatchSucessNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcMatchSucessNotify));
  PvpRpcRankChangeNotify_descriptor_ = file->message_type(15);
  static const int PvpRpcRankChangeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, pvptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, beforerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, afterrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, beforestar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, afterstar_),
  };
  PvpRpcRankChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcRankChangeNotify_descriptor_,
      PvpRpcRankChangeNotify::default_instance_,
      PvpRpcRankChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcRankChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcRankChangeNotify));
  PvpRpcReturnLastSceneAsk_descriptor_ = file->message_type(16);
  static const int PvpRpcReturnLastSceneAsk_offsets_[1] = {
  };
  PvpRpcReturnLastSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcReturnLastSceneAsk_descriptor_,
      PvpRpcReturnLastSceneAsk::default_instance_,
      PvpRpcReturnLastSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReturnLastSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReturnLastSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcReturnLastSceneAsk));
  PvpRpcReturnLastSceneReply_descriptor_ = file->message_type(17);
  static const int PvpRpcReturnLastSceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReturnLastSceneReply, result_),
  };
  PvpRpcReturnLastSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcReturnLastSceneReply_descriptor_,
      PvpRpcReturnLastSceneReply::default_instance_,
      PvpRpcReturnLastSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReturnLastSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReturnLastSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcReturnLastSceneReply));
  PvpRpcArenaStartTimeNotify_descriptor_ = file->message_type(18);
  static const int PvpRpcArenaStartTimeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaStartTimeNotify, needtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaStartTimeNotify, timestamp_),
  };
  PvpRpcArenaStartTimeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcArenaStartTimeNotify_descriptor_,
      PvpRpcArenaStartTimeNotify::default_instance_,
      PvpRpcArenaStartTimeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaStartTimeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaStartTimeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcArenaStartTimeNotify));
  PvpRpcUpdateKillCountNotify_descriptor_ = file->message_type(19);
  static const int PvpRpcUpdateKillCountNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcUpdateKillCountNotify, leftteamkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcUpdateKillCountNotify, rightteamkill_),
  };
  PvpRpcUpdateKillCountNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcUpdateKillCountNotify_descriptor_,
      PvpRpcUpdateKillCountNotify::default_instance_,
      PvpRpcUpdateKillCountNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcUpdateKillCountNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcUpdateKillCountNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcUpdateKillCountNotify));
  PvpRpcArenaLeftTimeNotify_descriptor_ = file->message_type(20);
  static const int PvpRpcArenaLeftTimeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaLeftTimeNotify, lefttime_),
  };
  PvpRpcArenaLeftTimeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcArenaLeftTimeNotify_descriptor_,
      PvpRpcArenaLeftTimeNotify::default_instance_,
      PvpRpcArenaLeftTimeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaLeftTimeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcArenaLeftTimeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcArenaLeftTimeNotify));
  PvpRpcLastRankAsk_descriptor_ = file->message_type(21);
  static const int PvpRpcLastRankAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankAsk, pvptype_),
  };
  PvpRpcLastRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcLastRankAsk_descriptor_,
      PvpRpcLastRankAsk::default_instance_,
      PvpRpcLastRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcLastRankAsk));
  PvpRpcLastRankReply_descriptor_ = file->message_type(22);
  static const int PvpRpcLastRankReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankReply, ranklist_),
  };
  PvpRpcLastRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcLastRankReply_descriptor_,
      PvpRpcLastRankReply::default_instance_,
      PvpRpcLastRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcLastRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcLastRankReply));
  PvpRpcNewSeasonNotify_descriptor_ = file->message_type(23);
  static const int PvpRpcNewSeasonNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, laststar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, lastranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, rewardlist_),
  };
  PvpRpcNewSeasonNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcNewSeasonNotify_descriptor_,
      PvpRpcNewSeasonNotify::default_instance_,
      PvpRpcNewSeasonNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcNewSeasonNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcNewSeasonNotify));
  PvpRpcGetSeasonRewardAsk_descriptor_ = file->message_type(24);
  static const int PvpRpcGetSeasonRewardAsk_offsets_[1] = {
  };
  PvpRpcGetSeasonRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcGetSeasonRewardAsk_descriptor_,
      PvpRpcGetSeasonRewardAsk::default_instance_,
      PvpRpcGetSeasonRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetSeasonRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetSeasonRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcGetSeasonRewardAsk));
  PvpRpcGetSeasonRewardReply_descriptor_ = file->message_type(25);
  static const int PvpRpcGetSeasonRewardReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetSeasonRewardReply, result_),
  };
  PvpRpcGetSeasonRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcGetSeasonRewardReply_descriptor_,
      PvpRpcGetSeasonRewardReply::default_instance_,
      PvpRpcGetSeasonRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetSeasonRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetSeasonRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcGetSeasonRewardReply));
  PvpRpcPvpBattleInfoSyncAsk_descriptor_ = file->message_type(26);
  static const int PvpRpcPvpBattleInfoSyncAsk_offsets_[1] = {
  };
  PvpRpcPvpBattleInfoSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPvpBattleInfoSyncAsk_descriptor_,
      PvpRpcPvpBattleInfoSyncAsk::default_instance_,
      PvpRpcPvpBattleInfoSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPvpBattleInfoSyncAsk));
  PvpRpcPvpBattleInfoSyncReply_descriptor_ = file->message_type(27);
  static const int PvpRpcPvpBattleInfoSyncReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, rankindex_),
  };
  PvpRpcPvpBattleInfoSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcPvpBattleInfoSyncReply_descriptor_,
      PvpRpcPvpBattleInfoSyncReply::default_instance_,
      PvpRpcPvpBattleInfoSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcPvpBattleInfoSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcPvpBattleInfoSyncReply));
  PvpRpcReconnectNotify_descriptor_ = file->message_type(28);
  static const int PvpRpcReconnectNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, needkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, arenastate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, leftkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, rightkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, timestamp_),
  };
  PvpRpcReconnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcReconnectNotify_descriptor_,
      PvpRpcReconnectNotify::default_instance_,
      PvpRpcReconnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcReconnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcReconnectNotify));
  PvpRpcGetRewardAsk_descriptor_ = file->message_type(29);
  static const int PvpRpcGetRewardAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardAsk, pvptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardAsk, rank_),
  };
  PvpRpcGetRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcGetRewardAsk_descriptor_,
      PvpRpcGetRewardAsk::default_instance_,
      PvpRpcGetRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcGetRewardAsk));
  PvpRpcGetRewardReply_descriptor_ = file->message_type(30);
  static const int PvpRpcGetRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardReply, rewardlist_),
  };
  PvpRpcGetRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRpcGetRewardReply_descriptor_,
      PvpRpcGetRewardReply::default_instance_,
      PvpRpcGetRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRpcGetRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRpcGetRewardReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PvpRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcRankAsk_descriptor_, &PvpRpcRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcRankReply_descriptor_, &PvpRpcRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchAsk_descriptor_, &PvpRpcMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchReply_descriptor_, &PvpRpcMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchNotifyNotify_descriptor_, &PvpRpcMatchNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchCancleAsk_descriptor_, &PvpRpcMatchCancleAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchCancleReply_descriptor_, &PvpRpcMatchCancleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchCancleNotifyNotify_descriptor_, &PvpRpcMatchCancleNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPlayerReadyAsk_descriptor_, &PvpRpcPlayerReadyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPlayerReadyReply_descriptor_, &PvpRpcPlayerReadyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPlayerReadyNotifyNotify_descriptor_, &PvpRpcPlayerReadyNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcReadyFaildNotify_descriptor_, &PvpRpcReadyFaildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPvpBattleStartNotify_descriptor_, &PvpRpcPvpBattleStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPvpBattleEndNotify_descriptor_, &PvpRpcPvpBattleEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcMatchSucessNotify_descriptor_, &PvpRpcMatchSucessNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcRankChangeNotify_descriptor_, &PvpRpcRankChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcReturnLastSceneAsk_descriptor_, &PvpRpcReturnLastSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcReturnLastSceneReply_descriptor_, &PvpRpcReturnLastSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcArenaStartTimeNotify_descriptor_, &PvpRpcArenaStartTimeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcUpdateKillCountNotify_descriptor_, &PvpRpcUpdateKillCountNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcArenaLeftTimeNotify_descriptor_, &PvpRpcArenaLeftTimeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcLastRankAsk_descriptor_, &PvpRpcLastRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcLastRankReply_descriptor_, &PvpRpcLastRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcNewSeasonNotify_descriptor_, &PvpRpcNewSeasonNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcGetSeasonRewardAsk_descriptor_, &PvpRpcGetSeasonRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcGetSeasonRewardReply_descriptor_, &PvpRpcGetSeasonRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPvpBattleInfoSyncAsk_descriptor_, &PvpRpcPvpBattleInfoSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcPvpBattleInfoSyncReply_descriptor_, &PvpRpcPvpBattleInfoSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcReconnectNotify_descriptor_, &PvpRpcReconnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcGetRewardAsk_descriptor_, &PvpRpcGetRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRpcGetRewardReply_descriptor_, &PvpRpcGetRewardReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PvpRpc_2eproto() {
  delete PvpRpcRankAsk::default_instance_;
  delete PvpRpcRankAsk_reflection_;
  delete PvpRpcRankReply::default_instance_;
  delete PvpRpcRankReply_reflection_;
  delete PvpRpcMatchAsk::default_instance_;
  delete PvpRpcMatchAsk_reflection_;
  delete PvpRpcMatchReply::default_instance_;
  delete PvpRpcMatchReply_reflection_;
  delete PvpRpcMatchNotifyNotify::default_instance_;
  delete PvpRpcMatchNotifyNotify_reflection_;
  delete PvpRpcMatchCancleAsk::default_instance_;
  delete PvpRpcMatchCancleAsk_reflection_;
  delete PvpRpcMatchCancleReply::default_instance_;
  delete PvpRpcMatchCancleReply_reflection_;
  delete PvpRpcMatchCancleNotifyNotify::default_instance_;
  delete PvpRpcMatchCancleNotifyNotify_reflection_;
  delete PvpRpcPlayerReadyAsk::default_instance_;
  delete PvpRpcPlayerReadyAsk_reflection_;
  delete PvpRpcPlayerReadyReply::default_instance_;
  delete PvpRpcPlayerReadyReply_reflection_;
  delete PvpRpcPlayerReadyNotifyNotify::default_instance_;
  delete PvpRpcPlayerReadyNotifyNotify_reflection_;
  delete PvpRpcReadyFaildNotify::default_instance_;
  delete PvpRpcReadyFaildNotify_reflection_;
  delete PvpRpcPvpBattleStartNotify::default_instance_;
  delete PvpRpcPvpBattleStartNotify_reflection_;
  delete PvpRpcPvpBattleEndNotify::default_instance_;
  delete PvpRpcPvpBattleEndNotify_reflection_;
  delete PvpRpcMatchSucessNotify::default_instance_;
  delete PvpRpcMatchSucessNotify_reflection_;
  delete PvpRpcRankChangeNotify::default_instance_;
  delete PvpRpcRankChangeNotify_reflection_;
  delete PvpRpcReturnLastSceneAsk::default_instance_;
  delete PvpRpcReturnLastSceneAsk_reflection_;
  delete PvpRpcReturnLastSceneReply::default_instance_;
  delete PvpRpcReturnLastSceneReply_reflection_;
  delete PvpRpcArenaStartTimeNotify::default_instance_;
  delete PvpRpcArenaStartTimeNotify_reflection_;
  delete PvpRpcUpdateKillCountNotify::default_instance_;
  delete PvpRpcUpdateKillCountNotify_reflection_;
  delete PvpRpcArenaLeftTimeNotify::default_instance_;
  delete PvpRpcArenaLeftTimeNotify_reflection_;
  delete PvpRpcLastRankAsk::default_instance_;
  delete PvpRpcLastRankAsk_reflection_;
  delete PvpRpcLastRankReply::default_instance_;
  delete PvpRpcLastRankReply_reflection_;
  delete PvpRpcNewSeasonNotify::default_instance_;
  delete PvpRpcNewSeasonNotify_reflection_;
  delete PvpRpcGetSeasonRewardAsk::default_instance_;
  delete PvpRpcGetSeasonRewardAsk_reflection_;
  delete PvpRpcGetSeasonRewardReply::default_instance_;
  delete PvpRpcGetSeasonRewardReply_reflection_;
  delete PvpRpcPvpBattleInfoSyncAsk::default_instance_;
  delete PvpRpcPvpBattleInfoSyncAsk_reflection_;
  delete PvpRpcPvpBattleInfoSyncReply::default_instance_;
  delete PvpRpcPvpBattleInfoSyncReply_reflection_;
  delete PvpRpcReconnectNotify::default_instance_;
  delete PvpRpcReconnectNotify_reflection_;
  delete PvpRpcGetRewardAsk::default_instance_;
  delete PvpRpcGetRewardAsk_reflection_;
  delete PvpRpcGetRewardReply::default_instance_;
  delete PvpRpcGetRewardReply_reflection_;
}

void protobuf_AddDesc_PvpRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014PvpRpc.proto\032\022PublicStruct.proto\"$\n\rPv"
    "pRpcRankAsk\022\023\n\007PvpType\030\001 \001(\005:\002-1\"G\n\017PvpR"
    "pcRankReply\022\022\n\006Result\030\001 \001(\005:\002-1\022 \n\010RankL"
    "ist\030\002 \003(\0132\016.PvpPlayerInfo\"%\n\016PvpRpcMatch"
    "Ask\022\023\n\007PvpType\030\001 \001(\005:\002-1\"&\n\020PvpRpcMatchR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\"\031\n\027PvpRpcMatchN"
    "otifyNotify\"\026\n\024PvpRpcMatchCancleAsk\",\n\026P"
    "vpRpcMatchCancleReply\022\022\n\006Result\030\001 \001(\005:\002-"
    "1\"T\n\035PvpRpcMatchCancleNotifyNotify\022\021\n\006Ro"
    "leId\030\001 \001(\004:\0010\022\014\n\004Name\030\002 \001(\t\022\022\n\006Reason\030\003 "
    "\001(\005:\002-1\"1\n\024PvpRpcPlayerReadyAsk\022\031\n\rOprea"
    "tionType\030\001 \001(\005:\002-1\",\n\026PvpRpcPlayerReadyR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\"F\n\035PvpRpcPlayer"
    "ReadyNotifyNotify\022\021\n\006RoleId\030\001 \001(\004:\0010\022\022\n\006"
    "OpType\030\002 \001(\005:\002-1\"\?\n\026PvpRpcReadyFaildNoti"
    "fy\022\022\n\006Reason\030\001 \001(\005:\002-1\022\021\n\006RoleId\030\002 \001(\004:\001"
    "0\"_\n\032PvpRpcPvpBattleStartNotify\022\024\n\010LeftK"
    "ill\030\002 \001(\005:\002-1\022\025\n\tRightKill\030\003 \001(\005:\002-1\022\024\n\010"
    "NeedKill\030\004 \001(\005:\002-1\"D\n\030PvpRpcPvpBattleEnd"
    "Notify\022(\n\rBattleEndInfo\030\004 \001(\0132\021.PvpBattl"
    "eEndInfo\"p\n\027PvpRpcMatchSucessNotify\022 \n\010L"
    "eftTeam\030\001 \003(\0132\016.PvpPlayerInfo\022!\n\tRightTe"
    "am\030\002 \003(\0132\016.PvpPlayerInfo\022\020\n\004Time\030\003 \001(\005:\002"
    "-1\"\213\001\n\026PvpRpcRankChangeNotify\022\023\n\007PvpType"
    "\030\001 \001(\005:\002-1\022\026\n\nBeforeRank\030\002 \001(\005:\002-1\022\025\n\tAf"
    "terRank\030\003 \001(\005:\002-1\022\026\n\nBeforeStar\030\004 \001(\005:\002-"
    "1\022\025\n\tAfterStar\030\005 \001(\005:\002-1\"\032\n\030PvpRpcReturn"
    "LastSceneAsk\"0\n\032PvpRpcReturnLastSceneRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\"I\n\032PvpRpcArenaSta"
    "rtTimeNotify\022\024\n\010NeedTime\030\001 \001(\005:\002-1\022\025\n\tTi"
    "meStamp\030\002 \001(\005:\002-1\"R\n\033PvpRpcUpdateKillCou"
    "ntNotify\022\030\n\014LeftTeamKill\030\001 \001(\005:\002-1\022\031\n\rRi"
    "ghtTeamKill\030\002 \001(\005:\002-1\"1\n\031PvpRpcArenaLeft"
    "TimeNotify\022\024\n\010LeftTime\030\001 \001(\005:\002-1\"(\n\021PvpR"
    "pcLastRankAsk\022\023\n\007PvpType\030\001 \001(\005:\002-1\"K\n\023Pv"
    "pRpcLastRankReply\022\022\n\006Result\030\001 \001(\005:\002-1\022 \n"
    "\010RankList\030\002 \003(\0132\016.PvpPlayerInfo\"\206\001\n\025PvpR"
    "pcNewSeasonNotify\022\024\n\010LastRank\030\001 \001(\005:\002-1\022"
    "\024\n\010LastStar\030\002 \001(\005:\002-1\022\027\n\013LastRanking\030\003 \001"
    "(\005:\002-1\022(\n\nRewardList\030\004 \003(\0132\024.PvpBattleRe"
    "wardInfo\"\032\n\030PvpRpcGetSeasonRewardAsk\"0\n\032"
    "PvpRpcGetSeasonRewardReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\"\034\n\032PvpRpcPvpBattleInfoSyncAsk\"\201\001\n"
    "\034PvpRpcPvpBattleInfoSyncReply\022\022\n\006Result\030"
    "\001 \001(\005:\002-1\022\"\n\nBattleInfo\030\002 \001(\0132\016.PvpBattl"
    "eInfo\022\022\n\006Season\030\003 \001(\005:\002-1\022\025\n\tRankIndex\030\004"
    " \001(\005:\002-1\"\261\001\n\025PvpRpcReconnectNotify\022\024\n\010Ne"
    "edKill\030\001 \001(\005:\002-1\022\026\n\nArenaState\030\002 \001(\005:\002-1"
    "\022\024\n\010LeftTime\030\003 \001(\005:\002-1\022\024\n\010LeftKill\030\005 \001(\005"
    ":\002-1\022\025\n\tRightKill\030\006 \001(\005:\002-1\022\020\n\004Camp\030\007 \001("
    "\005:\002-1\022\025\n\tTimeStamp\030\010 \001(\005:\002-1\";\n\022PvpRpcGe"
    "tRewardAsk\022\023\n\007PvPType\030\001 \001(\005:\002-1\022\020\n\004Rank\030"
    "\002 \001(\005:\002-1\">\n\024PvpRpcGetRewardReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1\022\022\n\nRewardList\030\002 \003(\005", 2153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PvpRpc.proto", &protobuf_RegisterTypes);
  PvpRpcRankAsk::default_instance_ = new PvpRpcRankAsk();
  PvpRpcRankReply::default_instance_ = new PvpRpcRankReply();
  PvpRpcMatchAsk::default_instance_ = new PvpRpcMatchAsk();
  PvpRpcMatchReply::default_instance_ = new PvpRpcMatchReply();
  PvpRpcMatchNotifyNotify::default_instance_ = new PvpRpcMatchNotifyNotify();
  PvpRpcMatchCancleAsk::default_instance_ = new PvpRpcMatchCancleAsk();
  PvpRpcMatchCancleReply::default_instance_ = new PvpRpcMatchCancleReply();
  PvpRpcMatchCancleNotifyNotify::default_instance_ = new PvpRpcMatchCancleNotifyNotify();
  PvpRpcPlayerReadyAsk::default_instance_ = new PvpRpcPlayerReadyAsk();
  PvpRpcPlayerReadyReply::default_instance_ = new PvpRpcPlayerReadyReply();
  PvpRpcPlayerReadyNotifyNotify::default_instance_ = new PvpRpcPlayerReadyNotifyNotify();
  PvpRpcReadyFaildNotify::default_instance_ = new PvpRpcReadyFaildNotify();
  PvpRpcPvpBattleStartNotify::default_instance_ = new PvpRpcPvpBattleStartNotify();
  PvpRpcPvpBattleEndNotify::default_instance_ = new PvpRpcPvpBattleEndNotify();
  PvpRpcMatchSucessNotify::default_instance_ = new PvpRpcMatchSucessNotify();
  PvpRpcRankChangeNotify::default_instance_ = new PvpRpcRankChangeNotify();
  PvpRpcReturnLastSceneAsk::default_instance_ = new PvpRpcReturnLastSceneAsk();
  PvpRpcReturnLastSceneReply::default_instance_ = new PvpRpcReturnLastSceneReply();
  PvpRpcArenaStartTimeNotify::default_instance_ = new PvpRpcArenaStartTimeNotify();
  PvpRpcUpdateKillCountNotify::default_instance_ = new PvpRpcUpdateKillCountNotify();
  PvpRpcArenaLeftTimeNotify::default_instance_ = new PvpRpcArenaLeftTimeNotify();
  PvpRpcLastRankAsk::default_instance_ = new PvpRpcLastRankAsk();
  PvpRpcLastRankReply::default_instance_ = new PvpRpcLastRankReply();
  PvpRpcNewSeasonNotify::default_instance_ = new PvpRpcNewSeasonNotify();
  PvpRpcGetSeasonRewardAsk::default_instance_ = new PvpRpcGetSeasonRewardAsk();
  PvpRpcGetSeasonRewardReply::default_instance_ = new PvpRpcGetSeasonRewardReply();
  PvpRpcPvpBattleInfoSyncAsk::default_instance_ = new PvpRpcPvpBattleInfoSyncAsk();
  PvpRpcPvpBattleInfoSyncReply::default_instance_ = new PvpRpcPvpBattleInfoSyncReply();
  PvpRpcReconnectNotify::default_instance_ = new PvpRpcReconnectNotify();
  PvpRpcGetRewardAsk::default_instance_ = new PvpRpcGetRewardAsk();
  PvpRpcGetRewardReply::default_instance_ = new PvpRpcGetRewardReply();
  PvpRpcRankAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcRankReply::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchReply::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchNotifyNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchCancleAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchCancleReply::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchCancleNotifyNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcPlayerReadyAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcPlayerReadyReply::default_instance_->InitAsDefaultInstance();
  PvpRpcPlayerReadyNotifyNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcReadyFaildNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcPvpBattleStartNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcPvpBattleEndNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcMatchSucessNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcRankChangeNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcReturnLastSceneAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcReturnLastSceneReply::default_instance_->InitAsDefaultInstance();
  PvpRpcArenaStartTimeNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcUpdateKillCountNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcArenaLeftTimeNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcLastRankAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcLastRankReply::default_instance_->InitAsDefaultInstance();
  PvpRpcNewSeasonNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcGetSeasonRewardAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcGetSeasonRewardReply::default_instance_->InitAsDefaultInstance();
  PvpRpcPvpBattleInfoSyncAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcPvpBattleInfoSyncReply::default_instance_->InitAsDefaultInstance();
  PvpRpcReconnectNotify::default_instance_->InitAsDefaultInstance();
  PvpRpcGetRewardAsk::default_instance_->InitAsDefaultInstance();
  PvpRpcGetRewardReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PvpRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PvpRpc_2eproto {
  StaticDescriptorInitializer_PvpRpc_2eproto() {
    protobuf_AddDesc_PvpRpc_2eproto();
  }
} static_descriptor_initializer_PvpRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PvpRpcRankAsk::kPvpTypeFieldNumber;
#endif  // !_MSC_VER

PvpRpcRankAsk::PvpRpcRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcRankAsk::InitAsDefaultInstance() {
}

PvpRpcRankAsk::PvpRpcRankAsk(const PvpRpcRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcRankAsk::SharedCtor() {
  _cached_size_ = 0;
  pvptype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcRankAsk::~PvpRpcRankAsk() {
  SharedDtor();
}

void PvpRpcRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcRankAsk_descriptor_;
}

const PvpRpcRankAsk& PvpRpcRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcRankAsk* PvpRpcRankAsk::default_instance_ = NULL;

PvpRpcRankAsk* PvpRpcRankAsk::New() const {
  return new PvpRpcRankAsk;
}

void PvpRpcRankAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvptype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PvpType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptype_)));
          set_has_pvptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcRankAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PvpType = 1 [default = -1];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcRankAsk::MergeFrom(const PvpRpcRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcRankAsk::CopyFrom(const PvpRpcRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcRankAsk::IsInitialized() const {

  return true;
}

void PvpRpcRankAsk::Swap(PvpRpcRankAsk* other) {
  if (other != this) {
    std::swap(pvptype_, other->pvptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcRankAsk_descriptor_;
  metadata.reflection = PvpRpcRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcRankReply::kResultFieldNumber;
const int PvpRpcRankReply::kRankListFieldNumber;
#endif  // !_MSC_VER

PvpRpcRankReply::PvpRpcRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcRankReply::InitAsDefaultInstance() {
}

PvpRpcRankReply::PvpRpcRankReply(const PvpRpcRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcRankReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcRankReply::~PvpRpcRankReply() {
  SharedDtor();
}

void PvpRpcRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcRankReply_descriptor_;
}

const PvpRpcRankReply& PvpRpcRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcRankReply* PvpRpcRankReply::default_instance_ = NULL;

PvpRpcRankReply* PvpRpcRankReply::New() const {
  return new PvpRpcRankReply;
}

void PvpRpcRankReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankList;
        break;
      }

      // repeated .PvpPlayerInfo RankList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .PvpPlayerInfo RankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .PvpPlayerInfo RankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcRankReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .PvpPlayerInfo RankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcRankReply::MergeFrom(const PvpRpcRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcRankReply::CopyFrom(const PvpRpcRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcRankReply::IsInitialized() const {

  return true;
}

void PvpRpcRankReply::Swap(PvpRpcRankReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcRankReply_descriptor_;
  metadata.reflection = PvpRpcRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcMatchAsk::kPvpTypeFieldNumber;
#endif  // !_MSC_VER

PvpRpcMatchAsk::PvpRpcMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchAsk::InitAsDefaultInstance() {
}

PvpRpcMatchAsk::PvpRpcMatchAsk(const PvpRpcMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  pvptype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchAsk::~PvpRpcMatchAsk() {
  SharedDtor();
}

void PvpRpcMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchAsk_descriptor_;
}

const PvpRpcMatchAsk& PvpRpcMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchAsk* PvpRpcMatchAsk::default_instance_ = NULL;

PvpRpcMatchAsk* PvpRpcMatchAsk::New() const {
  return new PvpRpcMatchAsk;
}

void PvpRpcMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvptype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PvpType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptype_)));
          set_has_pvptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PvpType = 1 [default = -1];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchAsk::MergeFrom(const PvpRpcMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchAsk::CopyFrom(const PvpRpcMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchAsk::IsInitialized() const {

  return true;
}

void PvpRpcMatchAsk::Swap(PvpRpcMatchAsk* other) {
  if (other != this) {
    std::swap(pvptype_, other->pvptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchAsk_descriptor_;
  metadata.reflection = PvpRpcMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcMatchReply::kResultFieldNumber;
#endif  // !_MSC_VER

PvpRpcMatchReply::PvpRpcMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchReply::InitAsDefaultInstance() {
}

PvpRpcMatchReply::PvpRpcMatchReply(const PvpRpcMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchReply::~PvpRpcMatchReply() {
  SharedDtor();
}

void PvpRpcMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchReply_descriptor_;
}

const PvpRpcMatchReply& PvpRpcMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchReply* PvpRpcMatchReply::default_instance_ = NULL;

PvpRpcMatchReply* PvpRpcMatchReply::New() const {
  return new PvpRpcMatchReply;
}

void PvpRpcMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchReply::MergeFrom(const PvpRpcMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchReply::CopyFrom(const PvpRpcMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchReply::IsInitialized() const {

  return true;
}

void PvpRpcMatchReply::Swap(PvpRpcMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchReply_descriptor_;
  metadata.reflection = PvpRpcMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpRpcMatchNotifyNotify::PvpRpcMatchNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchNotifyNotify::InitAsDefaultInstance() {
}

PvpRpcMatchNotifyNotify::PvpRpcMatchNotifyNotify(const PvpRpcMatchNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchNotifyNotify::~PvpRpcMatchNotifyNotify() {
  SharedDtor();
}

void PvpRpcMatchNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchNotifyNotify_descriptor_;
}

const PvpRpcMatchNotifyNotify& PvpRpcMatchNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchNotifyNotify* PvpRpcMatchNotifyNotify::default_instance_ = NULL;

PvpRpcMatchNotifyNotify* PvpRpcMatchNotifyNotify::New() const {
  return new PvpRpcMatchNotifyNotify;
}

void PvpRpcMatchNotifyNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpRpcMatchNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchNotifyNotify::MergeFrom(const PvpRpcMatchNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchNotifyNotify::CopyFrom(const PvpRpcMatchNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchNotifyNotify::IsInitialized() const {

  return true;
}

void PvpRpcMatchNotifyNotify::Swap(PvpRpcMatchNotifyNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchNotifyNotify_descriptor_;
  metadata.reflection = PvpRpcMatchNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpRpcMatchCancleAsk::PvpRpcMatchCancleAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchCancleAsk::InitAsDefaultInstance() {
}

PvpRpcMatchCancleAsk::PvpRpcMatchCancleAsk(const PvpRpcMatchCancleAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchCancleAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchCancleAsk::~PvpRpcMatchCancleAsk() {
  SharedDtor();
}

void PvpRpcMatchCancleAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchCancleAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchCancleAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchCancleAsk_descriptor_;
}

const PvpRpcMatchCancleAsk& PvpRpcMatchCancleAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchCancleAsk* PvpRpcMatchCancleAsk::default_instance_ = NULL;

PvpRpcMatchCancleAsk* PvpRpcMatchCancleAsk::New() const {
  return new PvpRpcMatchCancleAsk;
}

void PvpRpcMatchCancleAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchCancleAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpRpcMatchCancleAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchCancleAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchCancleAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchCancleAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchCancleAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchCancleAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchCancleAsk::MergeFrom(const PvpRpcMatchCancleAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchCancleAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchCancleAsk::CopyFrom(const PvpRpcMatchCancleAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchCancleAsk::IsInitialized() const {

  return true;
}

void PvpRpcMatchCancleAsk::Swap(PvpRpcMatchCancleAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchCancleAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchCancleAsk_descriptor_;
  metadata.reflection = PvpRpcMatchCancleAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcMatchCancleReply::kResultFieldNumber;
#endif  // !_MSC_VER

PvpRpcMatchCancleReply::PvpRpcMatchCancleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchCancleReply::InitAsDefaultInstance() {
}

PvpRpcMatchCancleReply::PvpRpcMatchCancleReply(const PvpRpcMatchCancleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchCancleReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchCancleReply::~PvpRpcMatchCancleReply() {
  SharedDtor();
}

void PvpRpcMatchCancleReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchCancleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchCancleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchCancleReply_descriptor_;
}

const PvpRpcMatchCancleReply& PvpRpcMatchCancleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchCancleReply* PvpRpcMatchCancleReply::default_instance_ = NULL;

PvpRpcMatchCancleReply* PvpRpcMatchCancleReply::New() const {
  return new PvpRpcMatchCancleReply;
}

void PvpRpcMatchCancleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchCancleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcMatchCancleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchCancleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchCancleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchCancleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchCancleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchCancleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchCancleReply::MergeFrom(const PvpRpcMatchCancleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchCancleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchCancleReply::CopyFrom(const PvpRpcMatchCancleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchCancleReply::IsInitialized() const {

  return true;
}

void PvpRpcMatchCancleReply::Swap(PvpRpcMatchCancleReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchCancleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchCancleReply_descriptor_;
  metadata.reflection = PvpRpcMatchCancleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcMatchCancleNotifyNotify::kRoleIdFieldNumber;
const int PvpRpcMatchCancleNotifyNotify::kNameFieldNumber;
const int PvpRpcMatchCancleNotifyNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

PvpRpcMatchCancleNotifyNotify::PvpRpcMatchCancleNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchCancleNotifyNotify::InitAsDefaultInstance() {
}

PvpRpcMatchCancleNotifyNotify::PvpRpcMatchCancleNotifyNotify(const PvpRpcMatchCancleNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchCancleNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchCancleNotifyNotify::~PvpRpcMatchCancleNotifyNotify() {
  SharedDtor();
}

void PvpRpcMatchCancleNotifyNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PvpRpcMatchCancleNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchCancleNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchCancleNotifyNotify_descriptor_;
}

const PvpRpcMatchCancleNotifyNotify& PvpRpcMatchCancleNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchCancleNotifyNotify* PvpRpcMatchCancleNotifyNotify::default_instance_ = NULL;

PvpRpcMatchCancleNotifyNotify* PvpRpcMatchCancleNotifyNotify::New() const {
  return new PvpRpcMatchCancleNotifyNotify;
}

void PvpRpcMatchCancleNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    reason_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchCancleNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }

      // optional int32 Reason = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcMatchCancleNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 Reason = 3 [default = -1];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchCancleNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 Reason = 3 [default = -1];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchCancleNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Reason = 3 [default = -1];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchCancleNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchCancleNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchCancleNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchCancleNotifyNotify::MergeFrom(const PvpRpcMatchCancleNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchCancleNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchCancleNotifyNotify::CopyFrom(const PvpRpcMatchCancleNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchCancleNotifyNotify::IsInitialized() const {

  return true;
}

void PvpRpcMatchCancleNotifyNotify::Swap(PvpRpcMatchCancleNotifyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchCancleNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchCancleNotifyNotify_descriptor_;
  metadata.reflection = PvpRpcMatchCancleNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPlayerReadyAsk::kOpreationTypeFieldNumber;
#endif  // !_MSC_VER

PvpRpcPlayerReadyAsk::PvpRpcPlayerReadyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPlayerReadyAsk::InitAsDefaultInstance() {
}

PvpRpcPlayerReadyAsk::PvpRpcPlayerReadyAsk(const PvpRpcPlayerReadyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPlayerReadyAsk::SharedCtor() {
  _cached_size_ = 0;
  opreationtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPlayerReadyAsk::~PvpRpcPlayerReadyAsk() {
  SharedDtor();
}

void PvpRpcPlayerReadyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcPlayerReadyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPlayerReadyAsk_descriptor_;
}

const PvpRpcPlayerReadyAsk& PvpRpcPlayerReadyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPlayerReadyAsk* PvpRpcPlayerReadyAsk::default_instance_ = NULL;

PvpRpcPlayerReadyAsk* PvpRpcPlayerReadyAsk::New() const {
  return new PvpRpcPlayerReadyAsk;
}

void PvpRpcPlayerReadyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opreationtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPlayerReadyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OpreationType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opreationtype_)));
          set_has_opreationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPlayerReadyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OpreationType = 1 [default = -1];
  if (has_opreationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opreationtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPlayerReadyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OpreationType = 1 [default = -1];
  if (has_opreationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opreationtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPlayerReadyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OpreationType = 1 [default = -1];
    if (has_opreationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opreationtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPlayerReadyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPlayerReadyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPlayerReadyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPlayerReadyAsk::MergeFrom(const PvpRpcPlayerReadyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opreationtype()) {
      set_opreationtype(from.opreationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPlayerReadyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPlayerReadyAsk::CopyFrom(const PvpRpcPlayerReadyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPlayerReadyAsk::IsInitialized() const {

  return true;
}

void PvpRpcPlayerReadyAsk::Swap(PvpRpcPlayerReadyAsk* other) {
  if (other != this) {
    std::swap(opreationtype_, other->opreationtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPlayerReadyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPlayerReadyAsk_descriptor_;
  metadata.reflection = PvpRpcPlayerReadyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPlayerReadyReply::kResultFieldNumber;
#endif  // !_MSC_VER

PvpRpcPlayerReadyReply::PvpRpcPlayerReadyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPlayerReadyReply::InitAsDefaultInstance() {
}

PvpRpcPlayerReadyReply::PvpRpcPlayerReadyReply(const PvpRpcPlayerReadyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPlayerReadyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPlayerReadyReply::~PvpRpcPlayerReadyReply() {
  SharedDtor();
}

void PvpRpcPlayerReadyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcPlayerReadyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPlayerReadyReply_descriptor_;
}

const PvpRpcPlayerReadyReply& PvpRpcPlayerReadyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPlayerReadyReply* PvpRpcPlayerReadyReply::default_instance_ = NULL;

PvpRpcPlayerReadyReply* PvpRpcPlayerReadyReply::New() const {
  return new PvpRpcPlayerReadyReply;
}

void PvpRpcPlayerReadyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPlayerReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPlayerReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPlayerReadyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPlayerReadyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPlayerReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPlayerReadyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPlayerReadyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPlayerReadyReply::MergeFrom(const PvpRpcPlayerReadyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPlayerReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPlayerReadyReply::CopyFrom(const PvpRpcPlayerReadyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPlayerReadyReply::IsInitialized() const {

  return true;
}

void PvpRpcPlayerReadyReply::Swap(PvpRpcPlayerReadyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPlayerReadyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPlayerReadyReply_descriptor_;
  metadata.reflection = PvpRpcPlayerReadyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPlayerReadyNotifyNotify::kRoleIdFieldNumber;
const int PvpRpcPlayerReadyNotifyNotify::kOpTypeFieldNumber;
#endif  // !_MSC_VER

PvpRpcPlayerReadyNotifyNotify::PvpRpcPlayerReadyNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPlayerReadyNotifyNotify::InitAsDefaultInstance() {
}

PvpRpcPlayerReadyNotifyNotify::PvpRpcPlayerReadyNotifyNotify(const PvpRpcPlayerReadyNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPlayerReadyNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  optype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPlayerReadyNotifyNotify::~PvpRpcPlayerReadyNotifyNotify() {
  SharedDtor();
}

void PvpRpcPlayerReadyNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcPlayerReadyNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPlayerReadyNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPlayerReadyNotifyNotify_descriptor_;
}

const PvpRpcPlayerReadyNotifyNotify& PvpRpcPlayerReadyNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPlayerReadyNotifyNotify* PvpRpcPlayerReadyNotifyNotify::default_instance_ = NULL;

PvpRpcPlayerReadyNotifyNotify* PvpRpcPlayerReadyNotifyNotify::New() const {
  return new PvpRpcPlayerReadyNotifyNotify;
}

void PvpRpcPlayerReadyNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    optype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPlayerReadyNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPlayerReadyNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 OpType = 2 [default = -1];
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPlayerReadyNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 OpType = 2 [default = -1];
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPlayerReadyNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 OpType = 2 [default = -1];
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPlayerReadyNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPlayerReadyNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPlayerReadyNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPlayerReadyNotifyNotify::MergeFrom(const PvpRpcPlayerReadyNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPlayerReadyNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPlayerReadyNotifyNotify::CopyFrom(const PvpRpcPlayerReadyNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPlayerReadyNotifyNotify::IsInitialized() const {

  return true;
}

void PvpRpcPlayerReadyNotifyNotify::Swap(PvpRpcPlayerReadyNotifyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPlayerReadyNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPlayerReadyNotifyNotify_descriptor_;
  metadata.reflection = PvpRpcPlayerReadyNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcReadyFaildNotify::kReasonFieldNumber;
const int PvpRpcReadyFaildNotify::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PvpRpcReadyFaildNotify::PvpRpcReadyFaildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcReadyFaildNotify::InitAsDefaultInstance() {
}

PvpRpcReadyFaildNotify::PvpRpcReadyFaildNotify(const PvpRpcReadyFaildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcReadyFaildNotify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcReadyFaildNotify::~PvpRpcReadyFaildNotify() {
  SharedDtor();
}

void PvpRpcReadyFaildNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcReadyFaildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcReadyFaildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcReadyFaildNotify_descriptor_;
}

const PvpRpcReadyFaildNotify& PvpRpcReadyFaildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcReadyFaildNotify* PvpRpcReadyFaildNotify::default_instance_ = NULL;

PvpRpcReadyFaildNotify* PvpRpcReadyFaildNotify::New() const {
  return new PvpRpcReadyFaildNotify;
}

void PvpRpcReadyFaildNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcReadyFaildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Reason = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcReadyFaildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Reason = 1 [default = -1];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcReadyFaildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Reason = 1 [default = -1];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcReadyFaildNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Reason = 1 [default = -1];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcReadyFaildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcReadyFaildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcReadyFaildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcReadyFaildNotify::MergeFrom(const PvpRpcReadyFaildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcReadyFaildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcReadyFaildNotify::CopyFrom(const PvpRpcReadyFaildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcReadyFaildNotify::IsInitialized() const {

  return true;
}

void PvpRpcReadyFaildNotify::Swap(PvpRpcReadyFaildNotify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcReadyFaildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcReadyFaildNotify_descriptor_;
  metadata.reflection = PvpRpcReadyFaildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPvpBattleStartNotify::kLeftKillFieldNumber;
const int PvpRpcPvpBattleStartNotify::kRightKillFieldNumber;
const int PvpRpcPvpBattleStartNotify::kNeedKillFieldNumber;
#endif  // !_MSC_VER

PvpRpcPvpBattleStartNotify::PvpRpcPvpBattleStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPvpBattleStartNotify::InitAsDefaultInstance() {
}

PvpRpcPvpBattleStartNotify::PvpRpcPvpBattleStartNotify(const PvpRpcPvpBattleStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPvpBattleStartNotify::SharedCtor() {
  _cached_size_ = 0;
  leftkill_ = -1;
  rightkill_ = -1;
  needkill_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPvpBattleStartNotify::~PvpRpcPvpBattleStartNotify() {
  SharedDtor();
}

void PvpRpcPvpBattleStartNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcPvpBattleStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPvpBattleStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPvpBattleStartNotify_descriptor_;
}

const PvpRpcPvpBattleStartNotify& PvpRpcPvpBattleStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPvpBattleStartNotify* PvpRpcPvpBattleStartNotify::default_instance_ = NULL;

PvpRpcPvpBattleStartNotify* PvpRpcPvpBattleStartNotify::New() const {
  return new PvpRpcPvpBattleStartNotify;
}

void PvpRpcPvpBattleStartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftkill_ = -1;
    rightkill_ = -1;
    needkill_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPvpBattleStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LeftKill = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftkill_)));
          set_has_leftkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RightKill;
        break;
      }

      // optional int32 RightKill = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightkill_)));
          set_has_rightkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NeedKill;
        break;
      }

      // optional int32 NeedKill = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needkill_)));
          set_has_needkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPvpBattleStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LeftKill = 2 [default = -1];
  if (has_leftkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftkill(), output);
  }

  // optional int32 RightKill = 3 [default = -1];
  if (has_rightkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rightkill(), output);
  }

  // optional int32 NeedKill = 4 [default = -1];
  if (has_needkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needkill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPvpBattleStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LeftKill = 2 [default = -1];
  if (has_leftkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftkill(), target);
  }

  // optional int32 RightKill = 3 [default = -1];
  if (has_rightkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rightkill(), target);
  }

  // optional int32 NeedKill = 4 [default = -1];
  if (has_needkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needkill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPvpBattleStartNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LeftKill = 2 [default = -1];
    if (has_leftkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftkill());
    }

    // optional int32 RightKill = 3 [default = -1];
    if (has_rightkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightkill());
    }

    // optional int32 NeedKill = 4 [default = -1];
    if (has_needkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needkill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPvpBattleStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPvpBattleStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPvpBattleStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPvpBattleStartNotify::MergeFrom(const PvpRpcPvpBattleStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftkill()) {
      set_leftkill(from.leftkill());
    }
    if (from.has_rightkill()) {
      set_rightkill(from.rightkill());
    }
    if (from.has_needkill()) {
      set_needkill(from.needkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPvpBattleStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPvpBattleStartNotify::CopyFrom(const PvpRpcPvpBattleStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPvpBattleStartNotify::IsInitialized() const {

  return true;
}

void PvpRpcPvpBattleStartNotify::Swap(PvpRpcPvpBattleStartNotify* other) {
  if (other != this) {
    std::swap(leftkill_, other->leftkill_);
    std::swap(rightkill_, other->rightkill_);
    std::swap(needkill_, other->needkill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPvpBattleStartNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPvpBattleStartNotify_descriptor_;
  metadata.reflection = PvpRpcPvpBattleStartNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPvpBattleEndNotify::kBattleEndInfoFieldNumber;
#endif  // !_MSC_VER

PvpRpcPvpBattleEndNotify::PvpRpcPvpBattleEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPvpBattleEndNotify::InitAsDefaultInstance() {
  battleendinfo_ = const_cast< ::PvpBattleEndInfo*>(&::PvpBattleEndInfo::default_instance());
}

PvpRpcPvpBattleEndNotify::PvpRpcPvpBattleEndNotify(const PvpRpcPvpBattleEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPvpBattleEndNotify::SharedCtor() {
  _cached_size_ = 0;
  battleendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPvpBattleEndNotify::~PvpRpcPvpBattleEndNotify() {
  SharedDtor();
}

void PvpRpcPvpBattleEndNotify::SharedDtor() {
  if (this != default_instance_) {
    delete battleendinfo_;
  }
}

void PvpRpcPvpBattleEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPvpBattleEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPvpBattleEndNotify_descriptor_;
}

const PvpRpcPvpBattleEndNotify& PvpRpcPvpBattleEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPvpBattleEndNotify* PvpRpcPvpBattleEndNotify::default_instance_ = NULL;

PvpRpcPvpBattleEndNotify* PvpRpcPvpBattleEndNotify::New() const {
  return new PvpRpcPvpBattleEndNotify;
}

void PvpRpcPvpBattleEndNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleendinfo()) {
      if (battleendinfo_ != NULL) battleendinfo_->::PvpBattleEndInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPvpBattleEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PvpBattleEndInfo BattleEndInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPvpBattleEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PvpBattleEndInfo BattleEndInfo = 4;
  if (has_battleendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battleendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPvpBattleEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PvpBattleEndInfo BattleEndInfo = 4;
  if (has_battleendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battleendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPvpBattleEndNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PvpBattleEndInfo BattleEndInfo = 4;
    if (has_battleendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPvpBattleEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPvpBattleEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPvpBattleEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPvpBattleEndNotify::MergeFrom(const PvpRpcPvpBattleEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleendinfo()) {
      mutable_battleendinfo()->::PvpBattleEndInfo::MergeFrom(from.battleendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPvpBattleEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPvpBattleEndNotify::CopyFrom(const PvpRpcPvpBattleEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPvpBattleEndNotify::IsInitialized() const {

  return true;
}

void PvpRpcPvpBattleEndNotify::Swap(PvpRpcPvpBattleEndNotify* other) {
  if (other != this) {
    std::swap(battleendinfo_, other->battleendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPvpBattleEndNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPvpBattleEndNotify_descriptor_;
  metadata.reflection = PvpRpcPvpBattleEndNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcMatchSucessNotify::kLeftTeamFieldNumber;
const int PvpRpcMatchSucessNotify::kRightTeamFieldNumber;
const int PvpRpcMatchSucessNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

PvpRpcMatchSucessNotify::PvpRpcMatchSucessNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcMatchSucessNotify::InitAsDefaultInstance() {
}

PvpRpcMatchSucessNotify::PvpRpcMatchSucessNotify(const PvpRpcMatchSucessNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcMatchSucessNotify::SharedCtor() {
  _cached_size_ = 0;
  time_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcMatchSucessNotify::~PvpRpcMatchSucessNotify() {
  SharedDtor();
}

void PvpRpcMatchSucessNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcMatchSucessNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcMatchSucessNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcMatchSucessNotify_descriptor_;
}

const PvpRpcMatchSucessNotify& PvpRpcMatchSucessNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcMatchSucessNotify* PvpRpcMatchSucessNotify::default_instance_ = NULL;

PvpRpcMatchSucessNotify* PvpRpcMatchSucessNotify::New() const {
  return new PvpRpcMatchSucessNotify;
}

void PvpRpcMatchSucessNotify::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    time_ = -1;
  }
  leftteam_.Clear();
  rightteam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcMatchSucessNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvpPlayerInfo LeftTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LeftTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leftteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LeftTeam;
        if (input->ExpectTag(18)) goto parse_RightTeam;
        break;
      }

      // repeated .PvpPlayerInfo RightTeam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RightTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rightteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RightTeam;
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional int32 Time = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcMatchSucessNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvpPlayerInfo LeftTeam = 1;
  for (int i = 0; i < this->leftteam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leftteam(i), output);
  }

  // repeated .PvpPlayerInfo RightTeam = 2;
  for (int i = 0; i < this->rightteam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rightteam(i), output);
  }

  // optional int32 Time = 3 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcMatchSucessNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvpPlayerInfo LeftTeam = 1;
  for (int i = 0; i < this->leftteam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leftteam(i), target);
  }

  // repeated .PvpPlayerInfo RightTeam = 2;
  for (int i = 0; i < this->rightteam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rightteam(i), target);
  }

  // optional int32 Time = 3 [default = -1];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcMatchSucessNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 Time = 3 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated .PvpPlayerInfo LeftTeam = 1;
  total_size += 1 * this->leftteam_size();
  for (int i = 0; i < this->leftteam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leftteam(i));
  }

  // repeated .PvpPlayerInfo RightTeam = 2;
  total_size += 1 * this->rightteam_size();
  for (int i = 0; i < this->rightteam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rightteam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcMatchSucessNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcMatchSucessNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcMatchSucessNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcMatchSucessNotify::MergeFrom(const PvpRpcMatchSucessNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  leftteam_.MergeFrom(from.leftteam_);
  rightteam_.MergeFrom(from.rightteam_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcMatchSucessNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcMatchSucessNotify::CopyFrom(const PvpRpcMatchSucessNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcMatchSucessNotify::IsInitialized() const {

  return true;
}

void PvpRpcMatchSucessNotify::Swap(PvpRpcMatchSucessNotify* other) {
  if (other != this) {
    leftteam_.Swap(&other->leftteam_);
    rightteam_.Swap(&other->rightteam_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcMatchSucessNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcMatchSucessNotify_descriptor_;
  metadata.reflection = PvpRpcMatchSucessNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcRankChangeNotify::kPvpTypeFieldNumber;
const int PvpRpcRankChangeNotify::kBeforeRankFieldNumber;
const int PvpRpcRankChangeNotify::kAfterRankFieldNumber;
const int PvpRpcRankChangeNotify::kBeforeStarFieldNumber;
const int PvpRpcRankChangeNotify::kAfterStarFieldNumber;
#endif  // !_MSC_VER

PvpRpcRankChangeNotify::PvpRpcRankChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcRankChangeNotify::InitAsDefaultInstance() {
}

PvpRpcRankChangeNotify::PvpRpcRankChangeNotify(const PvpRpcRankChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcRankChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  pvptype_ = -1;
  beforerank_ = -1;
  afterrank_ = -1;
  beforestar_ = -1;
  afterstar_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcRankChangeNotify::~PvpRpcRankChangeNotify() {
  SharedDtor();
}

void PvpRpcRankChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcRankChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcRankChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcRankChangeNotify_descriptor_;
}

const PvpRpcRankChangeNotify& PvpRpcRankChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcRankChangeNotify* PvpRpcRankChangeNotify::default_instance_ = NULL;

PvpRpcRankChangeNotify* PvpRpcRankChangeNotify::New() const {
  return new PvpRpcRankChangeNotify;
}

void PvpRpcRankChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvptype_ = -1;
    beforerank_ = -1;
    afterrank_ = -1;
    beforestar_ = -1;
    afterstar_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcRankChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PvpType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptype_)));
          set_has_pvptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BeforeRank;
        break;
      }

      // optional int32 BeforeRank = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeforeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforerank_)));
          set_has_beforerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AfterRank;
        break;
      }

      // optional int32 AfterRank = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterrank_)));
          set_has_afterrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BeforeStar;
        break;
      }

      // optional int32 BeforeStar = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeforeStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforestar_)));
          set_has_beforestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AfterStar;
        break;
      }

      // optional int32 AfterStar = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterstar_)));
          set_has_afterstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcRankChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvptype(), output);
  }

  // optional int32 BeforeRank = 2 [default = -1];
  if (has_beforerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beforerank(), output);
  }

  // optional int32 AfterRank = 3 [default = -1];
  if (has_afterrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->afterrank(), output);
  }

  // optional int32 BeforeStar = 4 [default = -1];
  if (has_beforestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beforestar(), output);
  }

  // optional int32 AfterStar = 5 [default = -1];
  if (has_afterstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->afterstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcRankChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvptype(), target);
  }

  // optional int32 BeforeRank = 2 [default = -1];
  if (has_beforerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beforerank(), target);
  }

  // optional int32 AfterRank = 3 [default = -1];
  if (has_afterrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->afterrank(), target);
  }

  // optional int32 BeforeStar = 4 [default = -1];
  if (has_beforestar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->beforestar(), target);
  }

  // optional int32 AfterStar = 5 [default = -1];
  if (has_afterstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->afterstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcRankChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PvpType = 1 [default = -1];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptype());
    }

    // optional int32 BeforeRank = 2 [default = -1];
    if (has_beforerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforerank());
    }

    // optional int32 AfterRank = 3 [default = -1];
    if (has_afterrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterrank());
    }

    // optional int32 BeforeStar = 4 [default = -1];
    if (has_beforestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforestar());
    }

    // optional int32 AfterStar = 5 [default = -1];
    if (has_afterstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterstar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcRankChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcRankChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcRankChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcRankChangeNotify::MergeFrom(const PvpRpcRankChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
    if (from.has_beforerank()) {
      set_beforerank(from.beforerank());
    }
    if (from.has_afterrank()) {
      set_afterrank(from.afterrank());
    }
    if (from.has_beforestar()) {
      set_beforestar(from.beforestar());
    }
    if (from.has_afterstar()) {
      set_afterstar(from.afterstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcRankChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcRankChangeNotify::CopyFrom(const PvpRpcRankChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcRankChangeNotify::IsInitialized() const {

  return true;
}

void PvpRpcRankChangeNotify::Swap(PvpRpcRankChangeNotify* other) {
  if (other != this) {
    std::swap(pvptype_, other->pvptype_);
    std::swap(beforerank_, other->beforerank_);
    std::swap(afterrank_, other->afterrank_);
    std::swap(beforestar_, other->beforestar_);
    std::swap(afterstar_, other->afterstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcRankChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcRankChangeNotify_descriptor_;
  metadata.reflection = PvpRpcRankChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpRpcReturnLastSceneAsk::PvpRpcReturnLastSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcReturnLastSceneAsk::InitAsDefaultInstance() {
}

PvpRpcReturnLastSceneAsk::PvpRpcReturnLastSceneAsk(const PvpRpcReturnLastSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcReturnLastSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcReturnLastSceneAsk::~PvpRpcReturnLastSceneAsk() {
  SharedDtor();
}

void PvpRpcReturnLastSceneAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcReturnLastSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcReturnLastSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcReturnLastSceneAsk_descriptor_;
}

const PvpRpcReturnLastSceneAsk& PvpRpcReturnLastSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcReturnLastSceneAsk* PvpRpcReturnLastSceneAsk::default_instance_ = NULL;

PvpRpcReturnLastSceneAsk* PvpRpcReturnLastSceneAsk::New() const {
  return new PvpRpcReturnLastSceneAsk;
}

void PvpRpcReturnLastSceneAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcReturnLastSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpRpcReturnLastSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcReturnLastSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcReturnLastSceneAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcReturnLastSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcReturnLastSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcReturnLastSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcReturnLastSceneAsk::MergeFrom(const PvpRpcReturnLastSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcReturnLastSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcReturnLastSceneAsk::CopyFrom(const PvpRpcReturnLastSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcReturnLastSceneAsk::IsInitialized() const {

  return true;
}

void PvpRpcReturnLastSceneAsk::Swap(PvpRpcReturnLastSceneAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcReturnLastSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcReturnLastSceneAsk_descriptor_;
  metadata.reflection = PvpRpcReturnLastSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcReturnLastSceneReply::kResultFieldNumber;
#endif  // !_MSC_VER

PvpRpcReturnLastSceneReply::PvpRpcReturnLastSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcReturnLastSceneReply::InitAsDefaultInstance() {
}

PvpRpcReturnLastSceneReply::PvpRpcReturnLastSceneReply(const PvpRpcReturnLastSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcReturnLastSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcReturnLastSceneReply::~PvpRpcReturnLastSceneReply() {
  SharedDtor();
}

void PvpRpcReturnLastSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcReturnLastSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcReturnLastSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcReturnLastSceneReply_descriptor_;
}

const PvpRpcReturnLastSceneReply& PvpRpcReturnLastSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcReturnLastSceneReply* PvpRpcReturnLastSceneReply::default_instance_ = NULL;

PvpRpcReturnLastSceneReply* PvpRpcReturnLastSceneReply::New() const {
  return new PvpRpcReturnLastSceneReply;
}

void PvpRpcReturnLastSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcReturnLastSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcReturnLastSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcReturnLastSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcReturnLastSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcReturnLastSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcReturnLastSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcReturnLastSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcReturnLastSceneReply::MergeFrom(const PvpRpcReturnLastSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcReturnLastSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcReturnLastSceneReply::CopyFrom(const PvpRpcReturnLastSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcReturnLastSceneReply::IsInitialized() const {

  return true;
}

void PvpRpcReturnLastSceneReply::Swap(PvpRpcReturnLastSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcReturnLastSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcReturnLastSceneReply_descriptor_;
  metadata.reflection = PvpRpcReturnLastSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcArenaStartTimeNotify::kNeedTimeFieldNumber;
const int PvpRpcArenaStartTimeNotify::kTimeStampFieldNumber;
#endif  // !_MSC_VER

PvpRpcArenaStartTimeNotify::PvpRpcArenaStartTimeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcArenaStartTimeNotify::InitAsDefaultInstance() {
}

PvpRpcArenaStartTimeNotify::PvpRpcArenaStartTimeNotify(const PvpRpcArenaStartTimeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcArenaStartTimeNotify::SharedCtor() {
  _cached_size_ = 0;
  needtime_ = -1;
  timestamp_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcArenaStartTimeNotify::~PvpRpcArenaStartTimeNotify() {
  SharedDtor();
}

void PvpRpcArenaStartTimeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcArenaStartTimeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcArenaStartTimeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcArenaStartTimeNotify_descriptor_;
}

const PvpRpcArenaStartTimeNotify& PvpRpcArenaStartTimeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcArenaStartTimeNotify* PvpRpcArenaStartTimeNotify::default_instance_ = NULL;

PvpRpcArenaStartTimeNotify* PvpRpcArenaStartTimeNotify::New() const {
  return new PvpRpcArenaStartTimeNotify;
}

void PvpRpcArenaStartTimeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needtime_ = -1;
    timestamp_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcArenaStartTimeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NeedTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needtime_)));
          set_has_needtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeStamp;
        break;
      }

      // optional int32 TimeStamp = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcArenaStartTimeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 NeedTime = 1 [default = -1];
  if (has_needtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needtime(), output);
  }

  // optional int32 TimeStamp = 2 [default = -1];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcArenaStartTimeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 NeedTime = 1 [default = -1];
  if (has_needtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needtime(), target);
  }

  // optional int32 TimeStamp = 2 [default = -1];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcArenaStartTimeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NeedTime = 1 [default = -1];
    if (has_needtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needtime());
    }

    // optional int32 TimeStamp = 2 [default = -1];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcArenaStartTimeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcArenaStartTimeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcArenaStartTimeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcArenaStartTimeNotify::MergeFrom(const PvpRpcArenaStartTimeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needtime()) {
      set_needtime(from.needtime());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcArenaStartTimeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcArenaStartTimeNotify::CopyFrom(const PvpRpcArenaStartTimeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcArenaStartTimeNotify::IsInitialized() const {

  return true;
}

void PvpRpcArenaStartTimeNotify::Swap(PvpRpcArenaStartTimeNotify* other) {
  if (other != this) {
    std::swap(needtime_, other->needtime_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcArenaStartTimeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcArenaStartTimeNotify_descriptor_;
  metadata.reflection = PvpRpcArenaStartTimeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcUpdateKillCountNotify::kLeftTeamKillFieldNumber;
const int PvpRpcUpdateKillCountNotify::kRightTeamKillFieldNumber;
#endif  // !_MSC_VER

PvpRpcUpdateKillCountNotify::PvpRpcUpdateKillCountNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcUpdateKillCountNotify::InitAsDefaultInstance() {
}

PvpRpcUpdateKillCountNotify::PvpRpcUpdateKillCountNotify(const PvpRpcUpdateKillCountNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcUpdateKillCountNotify::SharedCtor() {
  _cached_size_ = 0;
  leftteamkill_ = -1;
  rightteamkill_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcUpdateKillCountNotify::~PvpRpcUpdateKillCountNotify() {
  SharedDtor();
}

void PvpRpcUpdateKillCountNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcUpdateKillCountNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcUpdateKillCountNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcUpdateKillCountNotify_descriptor_;
}

const PvpRpcUpdateKillCountNotify& PvpRpcUpdateKillCountNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcUpdateKillCountNotify* PvpRpcUpdateKillCountNotify::default_instance_ = NULL;

PvpRpcUpdateKillCountNotify* PvpRpcUpdateKillCountNotify::New() const {
  return new PvpRpcUpdateKillCountNotify;
}

void PvpRpcUpdateKillCountNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftteamkill_ = -1;
    rightteamkill_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcUpdateKillCountNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LeftTeamKill = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftteamkill_)));
          set_has_leftteamkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RightTeamKill;
        break;
      }

      // optional int32 RightTeamKill = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightTeamKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightteamkill_)));
          set_has_rightteamkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcUpdateKillCountNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LeftTeamKill = 1 [default = -1];
  if (has_leftteamkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftteamkill(), output);
  }

  // optional int32 RightTeamKill = 2 [default = -1];
  if (has_rightteamkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rightteamkill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcUpdateKillCountNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LeftTeamKill = 1 [default = -1];
  if (has_leftteamkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leftteamkill(), target);
  }

  // optional int32 RightTeamKill = 2 [default = -1];
  if (has_rightteamkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rightteamkill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcUpdateKillCountNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LeftTeamKill = 1 [default = -1];
    if (has_leftteamkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftteamkill());
    }

    // optional int32 RightTeamKill = 2 [default = -1];
    if (has_rightteamkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightteamkill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcUpdateKillCountNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcUpdateKillCountNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcUpdateKillCountNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcUpdateKillCountNotify::MergeFrom(const PvpRpcUpdateKillCountNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftteamkill()) {
      set_leftteamkill(from.leftteamkill());
    }
    if (from.has_rightteamkill()) {
      set_rightteamkill(from.rightteamkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcUpdateKillCountNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcUpdateKillCountNotify::CopyFrom(const PvpRpcUpdateKillCountNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcUpdateKillCountNotify::IsInitialized() const {

  return true;
}

void PvpRpcUpdateKillCountNotify::Swap(PvpRpcUpdateKillCountNotify* other) {
  if (other != this) {
    std::swap(leftteamkill_, other->leftteamkill_);
    std::swap(rightteamkill_, other->rightteamkill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcUpdateKillCountNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcUpdateKillCountNotify_descriptor_;
  metadata.reflection = PvpRpcUpdateKillCountNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcArenaLeftTimeNotify::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

PvpRpcArenaLeftTimeNotify::PvpRpcArenaLeftTimeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcArenaLeftTimeNotify::InitAsDefaultInstance() {
}

PvpRpcArenaLeftTimeNotify::PvpRpcArenaLeftTimeNotify(const PvpRpcArenaLeftTimeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcArenaLeftTimeNotify::SharedCtor() {
  _cached_size_ = 0;
  lefttime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcArenaLeftTimeNotify::~PvpRpcArenaLeftTimeNotify() {
  SharedDtor();
}

void PvpRpcArenaLeftTimeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcArenaLeftTimeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcArenaLeftTimeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcArenaLeftTimeNotify_descriptor_;
}

const PvpRpcArenaLeftTimeNotify& PvpRpcArenaLeftTimeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcArenaLeftTimeNotify* PvpRpcArenaLeftTimeNotify::default_instance_ = NULL;

PvpRpcArenaLeftTimeNotify* PvpRpcArenaLeftTimeNotify::New() const {
  return new PvpRpcArenaLeftTimeNotify;
}

void PvpRpcArenaLeftTimeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lefttime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcArenaLeftTimeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LeftTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcArenaLeftTimeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LeftTime = 1 [default = -1];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcArenaLeftTimeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LeftTime = 1 [default = -1];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcArenaLeftTimeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LeftTime = 1 [default = -1];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcArenaLeftTimeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcArenaLeftTimeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcArenaLeftTimeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcArenaLeftTimeNotify::MergeFrom(const PvpRpcArenaLeftTimeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcArenaLeftTimeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcArenaLeftTimeNotify::CopyFrom(const PvpRpcArenaLeftTimeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcArenaLeftTimeNotify::IsInitialized() const {

  return true;
}

void PvpRpcArenaLeftTimeNotify::Swap(PvpRpcArenaLeftTimeNotify* other) {
  if (other != this) {
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcArenaLeftTimeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcArenaLeftTimeNotify_descriptor_;
  metadata.reflection = PvpRpcArenaLeftTimeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcLastRankAsk::kPvpTypeFieldNumber;
#endif  // !_MSC_VER

PvpRpcLastRankAsk::PvpRpcLastRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcLastRankAsk::InitAsDefaultInstance() {
}

PvpRpcLastRankAsk::PvpRpcLastRankAsk(const PvpRpcLastRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcLastRankAsk::SharedCtor() {
  _cached_size_ = 0;
  pvptype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcLastRankAsk::~PvpRpcLastRankAsk() {
  SharedDtor();
}

void PvpRpcLastRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcLastRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcLastRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcLastRankAsk_descriptor_;
}

const PvpRpcLastRankAsk& PvpRpcLastRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcLastRankAsk* PvpRpcLastRankAsk::default_instance_ = NULL;

PvpRpcLastRankAsk* PvpRpcLastRankAsk::New() const {
  return new PvpRpcLastRankAsk;
}

void PvpRpcLastRankAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvptype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcLastRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PvpType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptype_)));
          set_has_pvptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcLastRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcLastRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PvpType = 1 [default = -1];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcLastRankAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PvpType = 1 [default = -1];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcLastRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcLastRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcLastRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcLastRankAsk::MergeFrom(const PvpRpcLastRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcLastRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcLastRankAsk::CopyFrom(const PvpRpcLastRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcLastRankAsk::IsInitialized() const {

  return true;
}

void PvpRpcLastRankAsk::Swap(PvpRpcLastRankAsk* other) {
  if (other != this) {
    std::swap(pvptype_, other->pvptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcLastRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcLastRankAsk_descriptor_;
  metadata.reflection = PvpRpcLastRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcLastRankReply::kResultFieldNumber;
const int PvpRpcLastRankReply::kRankListFieldNumber;
#endif  // !_MSC_VER

PvpRpcLastRankReply::PvpRpcLastRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcLastRankReply::InitAsDefaultInstance() {
}

PvpRpcLastRankReply::PvpRpcLastRankReply(const PvpRpcLastRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcLastRankReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcLastRankReply::~PvpRpcLastRankReply() {
  SharedDtor();
}

void PvpRpcLastRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcLastRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcLastRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcLastRankReply_descriptor_;
}

const PvpRpcLastRankReply& PvpRpcLastRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcLastRankReply* PvpRpcLastRankReply::default_instance_ = NULL;

PvpRpcLastRankReply* PvpRpcLastRankReply::New() const {
  return new PvpRpcLastRankReply;
}

void PvpRpcLastRankReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcLastRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankList;
        break;
      }

      // repeated .PvpPlayerInfo RankList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcLastRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .PvpPlayerInfo RankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcLastRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .PvpPlayerInfo RankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcLastRankReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .PvpPlayerInfo RankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcLastRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcLastRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcLastRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcLastRankReply::MergeFrom(const PvpRpcLastRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcLastRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcLastRankReply::CopyFrom(const PvpRpcLastRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcLastRankReply::IsInitialized() const {

  return true;
}

void PvpRpcLastRankReply::Swap(PvpRpcLastRankReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcLastRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcLastRankReply_descriptor_;
  metadata.reflection = PvpRpcLastRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcNewSeasonNotify::kLastRankFieldNumber;
const int PvpRpcNewSeasonNotify::kLastStarFieldNumber;
const int PvpRpcNewSeasonNotify::kLastRankingFieldNumber;
const int PvpRpcNewSeasonNotify::kRewardListFieldNumber;
#endif  // !_MSC_VER

PvpRpcNewSeasonNotify::PvpRpcNewSeasonNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcNewSeasonNotify::InitAsDefaultInstance() {
}

PvpRpcNewSeasonNotify::PvpRpcNewSeasonNotify(const PvpRpcNewSeasonNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcNewSeasonNotify::SharedCtor() {
  _cached_size_ = 0;
  lastrank_ = -1;
  laststar_ = -1;
  lastranking_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcNewSeasonNotify::~PvpRpcNewSeasonNotify() {
  SharedDtor();
}

void PvpRpcNewSeasonNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcNewSeasonNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcNewSeasonNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcNewSeasonNotify_descriptor_;
}

const PvpRpcNewSeasonNotify& PvpRpcNewSeasonNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcNewSeasonNotify* PvpRpcNewSeasonNotify::default_instance_ = NULL;

PvpRpcNewSeasonNotify* PvpRpcNewSeasonNotify::New() const {
  return new PvpRpcNewSeasonNotify;
}

void PvpRpcNewSeasonNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastrank_ = -1;
    laststar_ = -1;
    lastranking_ = -1;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcNewSeasonNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LastRank = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrank_)));
          set_has_lastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LastStar;
        break;
      }

      // optional int32 LastStar = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laststar_)));
          set_has_laststar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LastRanking;
        break;
      }

      // optional int32 LastRanking = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastRanking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastranking_)));
          set_has_lastranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardList;
        break;
      }

      // repeated .PvpBattleRewardInfo RewardList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcNewSeasonNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LastRank = 1 [default = -1];
  if (has_lastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastrank(), output);
  }

  // optional int32 LastStar = 2 [default = -1];
  if (has_laststar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->laststar(), output);
  }

  // optional int32 LastRanking = 3 [default = -1];
  if (has_lastranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastranking(), output);
  }

  // repeated .PvpBattleRewardInfo RewardList = 4;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcNewSeasonNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LastRank = 1 [default = -1];
  if (has_lastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lastrank(), target);
  }

  // optional int32 LastStar = 2 [default = -1];
  if (has_laststar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->laststar(), target);
  }

  // optional int32 LastRanking = 3 [default = -1];
  if (has_lastranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastranking(), target);
  }

  // repeated .PvpBattleRewardInfo RewardList = 4;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcNewSeasonNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LastRank = 1 [default = -1];
    if (has_lastrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrank());
    }

    // optional int32 LastStar = 2 [default = -1];
    if (has_laststar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laststar());
    }

    // optional int32 LastRanking = 3 [default = -1];
    if (has_lastranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastranking());
    }

  }
  // repeated .PvpBattleRewardInfo RewardList = 4;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcNewSeasonNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcNewSeasonNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcNewSeasonNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcNewSeasonNotify::MergeFrom(const PvpRpcNewSeasonNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastrank()) {
      set_lastrank(from.lastrank());
    }
    if (from.has_laststar()) {
      set_laststar(from.laststar());
    }
    if (from.has_lastranking()) {
      set_lastranking(from.lastranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcNewSeasonNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcNewSeasonNotify::CopyFrom(const PvpRpcNewSeasonNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcNewSeasonNotify::IsInitialized() const {

  return true;
}

void PvpRpcNewSeasonNotify::Swap(PvpRpcNewSeasonNotify* other) {
  if (other != this) {
    std::swap(lastrank_, other->lastrank_);
    std::swap(laststar_, other->laststar_);
    std::swap(lastranking_, other->lastranking_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcNewSeasonNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcNewSeasonNotify_descriptor_;
  metadata.reflection = PvpRpcNewSeasonNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpRpcGetSeasonRewardAsk::PvpRpcGetSeasonRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcGetSeasonRewardAsk::InitAsDefaultInstance() {
}

PvpRpcGetSeasonRewardAsk::PvpRpcGetSeasonRewardAsk(const PvpRpcGetSeasonRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcGetSeasonRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcGetSeasonRewardAsk::~PvpRpcGetSeasonRewardAsk() {
  SharedDtor();
}

void PvpRpcGetSeasonRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcGetSeasonRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcGetSeasonRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcGetSeasonRewardAsk_descriptor_;
}

const PvpRpcGetSeasonRewardAsk& PvpRpcGetSeasonRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcGetSeasonRewardAsk* PvpRpcGetSeasonRewardAsk::default_instance_ = NULL;

PvpRpcGetSeasonRewardAsk* PvpRpcGetSeasonRewardAsk::New() const {
  return new PvpRpcGetSeasonRewardAsk;
}

void PvpRpcGetSeasonRewardAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcGetSeasonRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpRpcGetSeasonRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcGetSeasonRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcGetSeasonRewardAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcGetSeasonRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcGetSeasonRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcGetSeasonRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcGetSeasonRewardAsk::MergeFrom(const PvpRpcGetSeasonRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcGetSeasonRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcGetSeasonRewardAsk::CopyFrom(const PvpRpcGetSeasonRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcGetSeasonRewardAsk::IsInitialized() const {

  return true;
}

void PvpRpcGetSeasonRewardAsk::Swap(PvpRpcGetSeasonRewardAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcGetSeasonRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcGetSeasonRewardAsk_descriptor_;
  metadata.reflection = PvpRpcGetSeasonRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcGetSeasonRewardReply::kResultFieldNumber;
#endif  // !_MSC_VER

PvpRpcGetSeasonRewardReply::PvpRpcGetSeasonRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcGetSeasonRewardReply::InitAsDefaultInstance() {
}

PvpRpcGetSeasonRewardReply::PvpRpcGetSeasonRewardReply(const PvpRpcGetSeasonRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcGetSeasonRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcGetSeasonRewardReply::~PvpRpcGetSeasonRewardReply() {
  SharedDtor();
}

void PvpRpcGetSeasonRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcGetSeasonRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcGetSeasonRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcGetSeasonRewardReply_descriptor_;
}

const PvpRpcGetSeasonRewardReply& PvpRpcGetSeasonRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcGetSeasonRewardReply* PvpRpcGetSeasonRewardReply::default_instance_ = NULL;

PvpRpcGetSeasonRewardReply* PvpRpcGetSeasonRewardReply::New() const {
  return new PvpRpcGetSeasonRewardReply;
}

void PvpRpcGetSeasonRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcGetSeasonRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcGetSeasonRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcGetSeasonRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcGetSeasonRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcGetSeasonRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcGetSeasonRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcGetSeasonRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcGetSeasonRewardReply::MergeFrom(const PvpRpcGetSeasonRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcGetSeasonRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcGetSeasonRewardReply::CopyFrom(const PvpRpcGetSeasonRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcGetSeasonRewardReply::IsInitialized() const {

  return true;
}

void PvpRpcGetSeasonRewardReply::Swap(PvpRpcGetSeasonRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcGetSeasonRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcGetSeasonRewardReply_descriptor_;
  metadata.reflection = PvpRpcGetSeasonRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpRpcPvpBattleInfoSyncAsk::PvpRpcPvpBattleInfoSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPvpBattleInfoSyncAsk::InitAsDefaultInstance() {
}

PvpRpcPvpBattleInfoSyncAsk::PvpRpcPvpBattleInfoSyncAsk(const PvpRpcPvpBattleInfoSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPvpBattleInfoSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPvpBattleInfoSyncAsk::~PvpRpcPvpBattleInfoSyncAsk() {
  SharedDtor();
}

void PvpRpcPvpBattleInfoSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcPvpBattleInfoSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPvpBattleInfoSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPvpBattleInfoSyncAsk_descriptor_;
}

const PvpRpcPvpBattleInfoSyncAsk& PvpRpcPvpBattleInfoSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPvpBattleInfoSyncAsk* PvpRpcPvpBattleInfoSyncAsk::default_instance_ = NULL;

PvpRpcPvpBattleInfoSyncAsk* PvpRpcPvpBattleInfoSyncAsk::New() const {
  return new PvpRpcPvpBattleInfoSyncAsk;
}

void PvpRpcPvpBattleInfoSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPvpBattleInfoSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PvpRpcPvpBattleInfoSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPvpBattleInfoSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPvpBattleInfoSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPvpBattleInfoSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPvpBattleInfoSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPvpBattleInfoSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPvpBattleInfoSyncAsk::MergeFrom(const PvpRpcPvpBattleInfoSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPvpBattleInfoSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPvpBattleInfoSyncAsk::CopyFrom(const PvpRpcPvpBattleInfoSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPvpBattleInfoSyncAsk::IsInitialized() const {

  return true;
}

void PvpRpcPvpBattleInfoSyncAsk::Swap(PvpRpcPvpBattleInfoSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPvpBattleInfoSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPvpBattleInfoSyncAsk_descriptor_;
  metadata.reflection = PvpRpcPvpBattleInfoSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcPvpBattleInfoSyncReply::kResultFieldNumber;
const int PvpRpcPvpBattleInfoSyncReply::kBattleInfoFieldNumber;
const int PvpRpcPvpBattleInfoSyncReply::kSeasonFieldNumber;
const int PvpRpcPvpBattleInfoSyncReply::kRankIndexFieldNumber;
#endif  // !_MSC_VER

PvpRpcPvpBattleInfoSyncReply::PvpRpcPvpBattleInfoSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcPvpBattleInfoSyncReply::InitAsDefaultInstance() {
  battleinfo_ = const_cast< ::PvpBattleInfo*>(&::PvpBattleInfo::default_instance());
}

PvpRpcPvpBattleInfoSyncReply::PvpRpcPvpBattleInfoSyncReply(const PvpRpcPvpBattleInfoSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcPvpBattleInfoSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  battleinfo_ = NULL;
  season_ = -1;
  rankindex_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcPvpBattleInfoSyncReply::~PvpRpcPvpBattleInfoSyncReply() {
  SharedDtor();
}

void PvpRpcPvpBattleInfoSyncReply::SharedDtor() {
  if (this != default_instance_) {
    delete battleinfo_;
  }
}

void PvpRpcPvpBattleInfoSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcPvpBattleInfoSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcPvpBattleInfoSyncReply_descriptor_;
}

const PvpRpcPvpBattleInfoSyncReply& PvpRpcPvpBattleInfoSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcPvpBattleInfoSyncReply* PvpRpcPvpBattleInfoSyncReply::default_instance_ = NULL;

PvpRpcPvpBattleInfoSyncReply* PvpRpcPvpBattleInfoSyncReply::New() const {
  return new PvpRpcPvpBattleInfoSyncReply;
}

void PvpRpcPvpBattleInfoSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_battleinfo()) {
      if (battleinfo_ != NULL) battleinfo_->::PvpBattleInfo::Clear();
    }
    season_ = -1;
    rankindex_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcPvpBattleInfoSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BattleInfo;
        break;
      }

      // optional .PvpBattleInfo BattleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BattleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Season;
        break;
      }

      // optional int32 Season = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RankIndex;
        break;
      }

      // optional int32 RankIndex = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankindex_)));
          set_has_rankindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcPvpBattleInfoSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .PvpBattleInfo BattleInfo = 2;
  if (has_battleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleinfo(), output);
  }

  // optional int32 Season = 3 [default = -1];
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->season(), output);
  }

  // optional int32 RankIndex = 4 [default = -1];
  if (has_rankindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcPvpBattleInfoSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .PvpBattleInfo BattleInfo = 2;
  if (has_battleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleinfo(), target);
  }

  // optional int32 Season = 3 [default = -1];
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->season(), target);
  }

  // optional int32 RankIndex = 4 [default = -1];
  if (has_rankindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcPvpBattleInfoSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .PvpBattleInfo BattleInfo = 2;
    if (has_battleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfo());
    }

    // optional int32 Season = 3 [default = -1];
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 RankIndex = 4 [default = -1];
    if (has_rankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcPvpBattleInfoSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcPvpBattleInfoSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcPvpBattleInfoSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcPvpBattleInfoSyncReply::MergeFrom(const PvpRpcPvpBattleInfoSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_battleinfo()) {
      mutable_battleinfo()->::PvpBattleInfo::MergeFrom(from.battleinfo());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_rankindex()) {
      set_rankindex(from.rankindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcPvpBattleInfoSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcPvpBattleInfoSyncReply::CopyFrom(const PvpRpcPvpBattleInfoSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcPvpBattleInfoSyncReply::IsInitialized() const {

  return true;
}

void PvpRpcPvpBattleInfoSyncReply::Swap(PvpRpcPvpBattleInfoSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(season_, other->season_);
    std::swap(rankindex_, other->rankindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcPvpBattleInfoSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcPvpBattleInfoSyncReply_descriptor_;
  metadata.reflection = PvpRpcPvpBattleInfoSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcReconnectNotify::kNeedKillFieldNumber;
const int PvpRpcReconnectNotify::kArenaStateFieldNumber;
const int PvpRpcReconnectNotify::kLeftTimeFieldNumber;
const int PvpRpcReconnectNotify::kLeftKillFieldNumber;
const int PvpRpcReconnectNotify::kRightKillFieldNumber;
const int PvpRpcReconnectNotify::kCampFieldNumber;
const int PvpRpcReconnectNotify::kTimeStampFieldNumber;
#endif  // !_MSC_VER

PvpRpcReconnectNotify::PvpRpcReconnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcReconnectNotify::InitAsDefaultInstance() {
}

PvpRpcReconnectNotify::PvpRpcReconnectNotify(const PvpRpcReconnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcReconnectNotify::SharedCtor() {
  _cached_size_ = 0;
  needkill_ = -1;
  arenastate_ = -1;
  lefttime_ = -1;
  leftkill_ = -1;
  rightkill_ = -1;
  camp_ = -1;
  timestamp_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcReconnectNotify::~PvpRpcReconnectNotify() {
  SharedDtor();
}

void PvpRpcReconnectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcReconnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcReconnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcReconnectNotify_descriptor_;
}

const PvpRpcReconnectNotify& PvpRpcReconnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcReconnectNotify* PvpRpcReconnectNotify::default_instance_ = NULL;

PvpRpcReconnectNotify* PvpRpcReconnectNotify::New() const {
  return new PvpRpcReconnectNotify;
}

void PvpRpcReconnectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needkill_ = -1;
    arenastate_ = -1;
    lefttime_ = -1;
    leftkill_ = -1;
    rightkill_ = -1;
    camp_ = -1;
    timestamp_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcReconnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NeedKill = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needkill_)));
          set_has_needkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ArenaState;
        break;
      }

      // optional int32 ArenaState = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenastate_)));
          set_has_arenastate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LeftTime;
        break;
      }

      // optional int32 LeftTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LeftKill;
        break;
      }

      // optional int32 LeftKill = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftkill_)));
          set_has_leftkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RightKill;
        break;
      }

      // optional int32 RightKill = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightkill_)));
          set_has_rightkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Camp;
        break;
      }

      // optional int32 Camp = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TimeStamp;
        break;
      }

      // optional int32 TimeStamp = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcReconnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 NeedKill = 1 [default = -1];
  if (has_needkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->needkill(), output);
  }

  // optional int32 ArenaState = 2 [default = -1];
  if (has_arenastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arenastate(), output);
  }

  // optional int32 LeftTime = 3 [default = -1];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefttime(), output);
  }

  // optional int32 LeftKill = 5 [default = -1];
  if (has_leftkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leftkill(), output);
  }

  // optional int32 RightKill = 6 [default = -1];
  if (has_rightkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rightkill(), output);
  }

  // optional int32 Camp = 7 [default = -1];
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->camp(), output);
  }

  // optional int32 TimeStamp = 8 [default = -1];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcReconnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 NeedKill = 1 [default = -1];
  if (has_needkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->needkill(), target);
  }

  // optional int32 ArenaState = 2 [default = -1];
  if (has_arenastate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arenastate(), target);
  }

  // optional int32 LeftTime = 3 [default = -1];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefttime(), target);
  }

  // optional int32 LeftKill = 5 [default = -1];
  if (has_leftkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leftkill(), target);
  }

  // optional int32 RightKill = 6 [default = -1];
  if (has_rightkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rightkill(), target);
  }

  // optional int32 Camp = 7 [default = -1];
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->camp(), target);
  }

  // optional int32 TimeStamp = 8 [default = -1];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcReconnectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NeedKill = 1 [default = -1];
    if (has_needkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needkill());
    }

    // optional int32 ArenaState = 2 [default = -1];
    if (has_arenastate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenastate());
    }

    // optional int32 LeftTime = 3 [default = -1];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // optional int32 LeftKill = 5 [default = -1];
    if (has_leftkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftkill());
    }

    // optional int32 RightKill = 6 [default = -1];
    if (has_rightkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightkill());
    }

    // optional int32 Camp = 7 [default = -1];
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 TimeStamp = 8 [default = -1];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcReconnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcReconnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcReconnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcReconnectNotify::MergeFrom(const PvpRpcReconnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needkill()) {
      set_needkill(from.needkill());
    }
    if (from.has_arenastate()) {
      set_arenastate(from.arenastate());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_leftkill()) {
      set_leftkill(from.leftkill());
    }
    if (from.has_rightkill()) {
      set_rightkill(from.rightkill());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcReconnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcReconnectNotify::CopyFrom(const PvpRpcReconnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcReconnectNotify::IsInitialized() const {

  return true;
}

void PvpRpcReconnectNotify::Swap(PvpRpcReconnectNotify* other) {
  if (other != this) {
    std::swap(needkill_, other->needkill_);
    std::swap(arenastate_, other->arenastate_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(leftkill_, other->leftkill_);
    std::swap(rightkill_, other->rightkill_);
    std::swap(camp_, other->camp_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcReconnectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcReconnectNotify_descriptor_;
  metadata.reflection = PvpRpcReconnectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcGetRewardAsk::kPvPTypeFieldNumber;
const int PvpRpcGetRewardAsk::kRankFieldNumber;
#endif  // !_MSC_VER

PvpRpcGetRewardAsk::PvpRpcGetRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcGetRewardAsk::InitAsDefaultInstance() {
}

PvpRpcGetRewardAsk::PvpRpcGetRewardAsk(const PvpRpcGetRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  pvptype_ = -1;
  rank_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcGetRewardAsk::~PvpRpcGetRewardAsk() {
  SharedDtor();
}

void PvpRpcGetRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcGetRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcGetRewardAsk_descriptor_;
}

const PvpRpcGetRewardAsk& PvpRpcGetRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcGetRewardAsk* PvpRpcGetRewardAsk::default_instance_ = NULL;

PvpRpcGetRewardAsk* PvpRpcGetRewardAsk::New() const {
  return new PvpRpcGetRewardAsk;
}

void PvpRpcGetRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvptype_ = -1;
    rank_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PvPType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptype_)));
          set_has_pvptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PvPType = 1 [default = -1];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvptype(), output);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcGetRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PvPType = 1 [default = -1];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvptype(), target);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcGetRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PvPType = 1 [default = -1];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptype());
    }

    // optional int32 Rank = 2 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcGetRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcGetRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcGetRewardAsk::MergeFrom(const PvpRpcGetRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcGetRewardAsk::CopyFrom(const PvpRpcGetRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcGetRewardAsk::IsInitialized() const {

  return true;
}

void PvpRpcGetRewardAsk::Swap(PvpRpcGetRewardAsk* other) {
  if (other != this) {
    std::swap(pvptype_, other->pvptype_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcGetRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcGetRewardAsk_descriptor_;
  metadata.reflection = PvpRpcGetRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRpcGetRewardReply::kResultFieldNumber;
const int PvpRpcGetRewardReply::kRewardListFieldNumber;
#endif  // !_MSC_VER

PvpRpcGetRewardReply::PvpRpcGetRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRpcGetRewardReply::InitAsDefaultInstance() {
}

PvpRpcGetRewardReply::PvpRpcGetRewardReply(const PvpRpcGetRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRpcGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRpcGetRewardReply::~PvpRpcGetRewardReply() {
  SharedDtor();
}

void PvpRpcGetRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRpcGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRpcGetRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRpcGetRewardReply_descriptor_;
}

const PvpRpcGetRewardReply& PvpRpcGetRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpRpc_2eproto();
  return *default_instance_;
}

PvpRpcGetRewardReply* PvpRpcGetRewardReply::default_instance_ = NULL;

PvpRpcGetRewardReply* PvpRpcGetRewardReply::New() const {
  return new PvpRpcGetRewardReply;
}

void PvpRpcGetRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRpcGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardList;
        break;
      }

      // repeated int32 RewardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRpcGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 RewardList = 2;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRpcGetRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 RewardList = 2;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRpcGetRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 RewardList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardlist(i));
    }
    total_size += 1 * this->rewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRpcGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRpcGetRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRpcGetRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRpcGetRewardReply::MergeFrom(const PvpRpcGetRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRpcGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRpcGetRewardReply::CopyFrom(const PvpRpcGetRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRpcGetRewardReply::IsInitialized() const {

  return true;
}

void PvpRpcGetRewardReply::Swap(PvpRpcGetRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRpcGetRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRpcGetRewardReply_descriptor_;
  metadata.reflection = PvpRpcGetRewardReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
