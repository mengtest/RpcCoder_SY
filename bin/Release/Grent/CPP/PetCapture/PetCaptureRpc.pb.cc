// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PetCaptureRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PetCaptureRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PetCaptureRpcCaptureAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcCaptureAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCaptureRpcCaptureReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcCaptureReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCaptureRpcCapturePetNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcCapturePetNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCaptureRpcLoginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcLoginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCaptureRpcPetLocationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcPetLocationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCaptureRpcPetLocationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCaptureRpcPetLocationReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PetCaptureRpc_2eproto() {
  protobuf_AddDesc_PetCaptureRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PetCaptureRpc.proto");
  GOOGLE_CHECK(file != NULL);
  PetCaptureRpcCaptureAsk_descriptor_ = file->message_type(0);
  static const int PetCaptureRpcCaptureAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureAsk, balltype_),
  };
  PetCaptureRpcCaptureAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcCaptureAsk_descriptor_,
      PetCaptureRpcCaptureAsk::default_instance_,
      PetCaptureRpcCaptureAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcCaptureAsk));
  PetCaptureRpcCaptureReply_descriptor_ = file->message_type(1);
  static const int PetCaptureRpcCaptureReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureReply, creatureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureReply, petid_),
  };
  PetCaptureRpcCaptureReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcCaptureReply_descriptor_,
      PetCaptureRpcCaptureReply::default_instance_,
      PetCaptureRpcCaptureReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCaptureReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcCaptureReply));
  PetCaptureRpcCapturePetNotify_descriptor_ = file->message_type(2);
  static const int PetCaptureRpcCapturePetNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, creatureid_),
  };
  PetCaptureRpcCapturePetNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcCapturePetNotify_descriptor_,
      PetCaptureRpcCapturePetNotify::default_instance_,
      PetCaptureRpcCapturePetNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcCapturePetNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcCapturePetNotify));
  PetCaptureRpcLoginNotify_descriptor_ = file->message_type(3);
  static const int PetCaptureRpcLoginNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcLoginNotify, waypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcLoginNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcLoginNotify, pos_),
  };
  PetCaptureRpcLoginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcLoginNotify_descriptor_,
      PetCaptureRpcLoginNotify::default_instance_,
      PetCaptureRpcLoginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcLoginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcLoginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcLoginNotify));
  PetCaptureRpcPetLocationAsk_descriptor_ = file->message_type(4);
  static const int PetCaptureRpcPetLocationAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationAsk, lineid_),
  };
  PetCaptureRpcPetLocationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcPetLocationAsk_descriptor_,
      PetCaptureRpcPetLocationAsk::default_instance_,
      PetCaptureRpcPetLocationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcPetLocationAsk));
  PetCaptureRpcPetLocationReply_descriptor_ = file->message_type(5);
  static const int PetCaptureRpcPetLocationReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, waypoint_),
  };
  PetCaptureRpcPetLocationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCaptureRpcPetLocationReply_descriptor_,
      PetCaptureRpcPetLocationReply::default_instance_,
      PetCaptureRpcPetLocationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCaptureRpcPetLocationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCaptureRpcPetLocationReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PetCaptureRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcCaptureAsk_descriptor_, &PetCaptureRpcCaptureAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcCaptureReply_descriptor_, &PetCaptureRpcCaptureReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcCapturePetNotify_descriptor_, &PetCaptureRpcCapturePetNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcLoginNotify_descriptor_, &PetCaptureRpcLoginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcPetLocationAsk_descriptor_, &PetCaptureRpcPetLocationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCaptureRpcPetLocationReply_descriptor_, &PetCaptureRpcPetLocationReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PetCaptureRpc_2eproto() {
  delete PetCaptureRpcCaptureAsk::default_instance_;
  delete PetCaptureRpcCaptureAsk_reflection_;
  delete PetCaptureRpcCaptureReply::default_instance_;
  delete PetCaptureRpcCaptureReply_reflection_;
  delete PetCaptureRpcCapturePetNotify::default_instance_;
  delete PetCaptureRpcCapturePetNotify_reflection_;
  delete PetCaptureRpcLoginNotify::default_instance_;
  delete PetCaptureRpcLoginNotify_reflection_;
  delete PetCaptureRpcPetLocationAsk::default_instance_;
  delete PetCaptureRpcPetLocationAsk_reflection_;
  delete PetCaptureRpcPetLocationReply::default_instance_;
  delete PetCaptureRpcPetLocationReply_reflection_;
}

void protobuf_AddDesc_PetCaptureRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PetCaptureRpc.proto\032\022PublicStruct.prot"
    "o\".\n\027PetCaptureRpcCaptureAsk\022\023\n\010BallType"
    "\030\001 \001(\005:\0011\"Z\n\031PetCaptureRpcCaptureReply\022\022"
    "\n\006Result\030\001 \001(\005:\002-1\022\026\n\nCreatureId\030\002 \001(\005:\002"
    "-1\022\021\n\005PetId\030\003 \001(\005:\002-1\"p\n\035PetCaptureRpcCa"
    "pturePetNotify\022\021\n\005PetId\030\001 \001(\005:\002-1\022\020\n\010Nic"
    "kName\030\002 \001(\t\022\022\n\006RoleId\030\004 \001(\005:\002-1\022\026\n\nCreat"
    "ureId\030\006 \001(\005:\002-1\"\\\n\030PetCaptureRpcLoginNot"
    "ify\022\024\n\010WayPoint\030\002 \001(\005:\002-1\022\023\n\007SceneId\030\003 \001"
    "(\005:\002-1\022\025\n\003Pos\030\004 \001(\0132\010.Vector3\"1\n\033PetCapt"
    "ureRpcPetLocationAsk\022\022\n\006LineId\030\001 \001(\005:\002-1"
    "\"u\n\035PetCaptureRpcPetLocationReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1\022\025\n\003Pos\030\002 \001(\0132\010.Vector3\022\023\n\007"
    "SceneId\030\003 \001(\005:\002-1\022\024\n\010WayPoint\030\004 \001(\005:\002-1", 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PetCaptureRpc.proto", &protobuf_RegisterTypes);
  PetCaptureRpcCaptureAsk::default_instance_ = new PetCaptureRpcCaptureAsk();
  PetCaptureRpcCaptureReply::default_instance_ = new PetCaptureRpcCaptureReply();
  PetCaptureRpcCapturePetNotify::default_instance_ = new PetCaptureRpcCapturePetNotify();
  PetCaptureRpcLoginNotify::default_instance_ = new PetCaptureRpcLoginNotify();
  PetCaptureRpcPetLocationAsk::default_instance_ = new PetCaptureRpcPetLocationAsk();
  PetCaptureRpcPetLocationReply::default_instance_ = new PetCaptureRpcPetLocationReply();
  PetCaptureRpcCaptureAsk::default_instance_->InitAsDefaultInstance();
  PetCaptureRpcCaptureReply::default_instance_->InitAsDefaultInstance();
  PetCaptureRpcCapturePetNotify::default_instance_->InitAsDefaultInstance();
  PetCaptureRpcLoginNotify::default_instance_->InitAsDefaultInstance();
  PetCaptureRpcPetLocationAsk::default_instance_->InitAsDefaultInstance();
  PetCaptureRpcPetLocationReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PetCaptureRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PetCaptureRpc_2eproto {
  StaticDescriptorInitializer_PetCaptureRpc_2eproto() {
    protobuf_AddDesc_PetCaptureRpc_2eproto();
  }
} static_descriptor_initializer_PetCaptureRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcCaptureAsk::kBallTypeFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcCaptureAsk::PetCaptureRpcCaptureAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcCaptureAsk::InitAsDefaultInstance() {
}

PetCaptureRpcCaptureAsk::PetCaptureRpcCaptureAsk(const PetCaptureRpcCaptureAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcCaptureAsk::SharedCtor() {
  _cached_size_ = 0;
  balltype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcCaptureAsk::~PetCaptureRpcCaptureAsk() {
  SharedDtor();
}

void PetCaptureRpcCaptureAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetCaptureRpcCaptureAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcCaptureAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcCaptureAsk_descriptor_;
}

const PetCaptureRpcCaptureAsk& PetCaptureRpcCaptureAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcCaptureAsk* PetCaptureRpcCaptureAsk::default_instance_ = NULL;

PetCaptureRpcCaptureAsk* PetCaptureRpcCaptureAsk::New() const {
  return new PetCaptureRpcCaptureAsk;
}

void PetCaptureRpcCaptureAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    balltype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcCaptureAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BallType = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balltype_)));
          set_has_balltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcCaptureAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BallType = 1 [default = 1];
  if (has_balltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->balltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcCaptureAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BallType = 1 [default = 1];
  if (has_balltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->balltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcCaptureAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BallType = 1 [default = 1];
    if (has_balltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcCaptureAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcCaptureAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcCaptureAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcCaptureAsk::MergeFrom(const PetCaptureRpcCaptureAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balltype()) {
      set_balltype(from.balltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcCaptureAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcCaptureAsk::CopyFrom(const PetCaptureRpcCaptureAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcCaptureAsk::IsInitialized() const {

  return true;
}

void PetCaptureRpcCaptureAsk::Swap(PetCaptureRpcCaptureAsk* other) {
  if (other != this) {
    std::swap(balltype_, other->balltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcCaptureAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcCaptureAsk_descriptor_;
  metadata.reflection = PetCaptureRpcCaptureAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcCaptureReply::kResultFieldNumber;
const int PetCaptureRpcCaptureReply::kCreatureIdFieldNumber;
const int PetCaptureRpcCaptureReply::kPetIdFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcCaptureReply::PetCaptureRpcCaptureReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcCaptureReply::InitAsDefaultInstance() {
}

PetCaptureRpcCaptureReply::PetCaptureRpcCaptureReply(const PetCaptureRpcCaptureReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcCaptureReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  creatureid_ = -1;
  petid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcCaptureReply::~PetCaptureRpcCaptureReply() {
  SharedDtor();
}

void PetCaptureRpcCaptureReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetCaptureRpcCaptureReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcCaptureReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcCaptureReply_descriptor_;
}

const PetCaptureRpcCaptureReply& PetCaptureRpcCaptureReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcCaptureReply* PetCaptureRpcCaptureReply::default_instance_ = NULL;

PetCaptureRpcCaptureReply* PetCaptureRpcCaptureReply::New() const {
  return new PetCaptureRpcCaptureReply;
}

void PetCaptureRpcCaptureReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    creatureid_ = -1;
    petid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcCaptureReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CreatureId;
        break;
      }

      // optional int32 CreatureId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatureid_)));
          set_has_creatureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PetId;
        break;
      }

      // optional int32 PetId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcCaptureReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 CreatureId = 2 [default = -1];
  if (has_creatureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creatureid(), output);
  }

  // optional int32 PetId = 3 [default = -1];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcCaptureReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 CreatureId = 2 [default = -1];
  if (has_creatureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creatureid(), target);
  }

  // optional int32 PetId = 3 [default = -1];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcCaptureReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 CreatureId = 2 [default = -1];
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatureid());
    }

    // optional int32 PetId = 3 [default = -1];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcCaptureReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcCaptureReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcCaptureReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcCaptureReply::MergeFrom(const PetCaptureRpcCaptureReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_creatureid()) {
      set_creatureid(from.creatureid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcCaptureReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcCaptureReply::CopyFrom(const PetCaptureRpcCaptureReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcCaptureReply::IsInitialized() const {

  return true;
}

void PetCaptureRpcCaptureReply::Swap(PetCaptureRpcCaptureReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(creatureid_, other->creatureid_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcCaptureReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcCaptureReply_descriptor_;
  metadata.reflection = PetCaptureRpcCaptureReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcCapturePetNotify::kPetIdFieldNumber;
const int PetCaptureRpcCapturePetNotify::kNickNameFieldNumber;
const int PetCaptureRpcCapturePetNotify::kRoleIdFieldNumber;
const int PetCaptureRpcCapturePetNotify::kCreatureIdFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcCapturePetNotify::PetCaptureRpcCapturePetNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcCapturePetNotify::InitAsDefaultInstance() {
}

PetCaptureRpcCapturePetNotify::PetCaptureRpcCapturePetNotify(const PetCaptureRpcCapturePetNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcCapturePetNotify::SharedCtor() {
  _cached_size_ = 0;
  petid_ = -1;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = -1;
  creatureid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcCapturePetNotify::~PetCaptureRpcCapturePetNotify() {
  SharedDtor();
}

void PetCaptureRpcCapturePetNotify::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void PetCaptureRpcCapturePetNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcCapturePetNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcCapturePetNotify_descriptor_;
}

const PetCaptureRpcCapturePetNotify& PetCaptureRpcCapturePetNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcCapturePetNotify* PetCaptureRpcCapturePetNotify::default_instance_ = NULL;

PetCaptureRpcCapturePetNotify* PetCaptureRpcCapturePetNotify::New() const {
  return new PetCaptureRpcCapturePetNotify;
}

void PetCaptureRpcCapturePetNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = -1;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    roleid_ = -1;
    creatureid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcCapturePetNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PetId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RoleId;
        break;
      }

      // optional int32 RoleId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreatureId;
        break;
      }

      // optional int32 CreatureId = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreatureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatureid_)));
          set_has_creatureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcCapturePetNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PetId = 1 [default = -1];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 RoleId = 4 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleid(), output);
  }

  // optional int32 CreatureId = 6 [default = -1];
  if (has_creatureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->creatureid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcCapturePetNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PetId = 1 [default = -1];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 RoleId = 4 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roleid(), target);
  }

  // optional int32 CreatureId = 6 [default = -1];
  if (has_creatureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->creatureid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcCapturePetNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PetId = 1 [default = -1];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 RoleId = 4 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 CreatureId = 6 [default = -1];
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatureid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcCapturePetNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcCapturePetNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcCapturePetNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcCapturePetNotify::MergeFrom(const PetCaptureRpcCapturePetNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_creatureid()) {
      set_creatureid(from.creatureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcCapturePetNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcCapturePetNotify::CopyFrom(const PetCaptureRpcCapturePetNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcCapturePetNotify::IsInitialized() const {

  return true;
}

void PetCaptureRpcCapturePetNotify::Swap(PetCaptureRpcCapturePetNotify* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(nickname_, other->nickname_);
    std::swap(roleid_, other->roleid_);
    std::swap(creatureid_, other->creatureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcCapturePetNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcCapturePetNotify_descriptor_;
  metadata.reflection = PetCaptureRpcCapturePetNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcLoginNotify::kWayPointFieldNumber;
const int PetCaptureRpcLoginNotify::kSceneIdFieldNumber;
const int PetCaptureRpcLoginNotify::kPosFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcLoginNotify::PetCaptureRpcLoginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcLoginNotify::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

PetCaptureRpcLoginNotify::PetCaptureRpcLoginNotify(const PetCaptureRpcLoginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcLoginNotify::SharedCtor() {
  _cached_size_ = 0;
  waypoint_ = -1;
  sceneid_ = -1;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcLoginNotify::~PetCaptureRpcLoginNotify() {
  SharedDtor();
}

void PetCaptureRpcLoginNotify::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PetCaptureRpcLoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcLoginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcLoginNotify_descriptor_;
}

const PetCaptureRpcLoginNotify& PetCaptureRpcLoginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcLoginNotify* PetCaptureRpcLoginNotify::default_instance_ = NULL;

PetCaptureRpcLoginNotify* PetCaptureRpcLoginNotify::New() const {
  return new PetCaptureRpcLoginNotify;
}

void PetCaptureRpcLoginNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    waypoint_ = -1;
    sceneid_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcLoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 WayPoint = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waypoint_)));
          set_has_waypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcLoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 WayPoint = 2 [default = -1];
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->waypoint(), output);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // optional .Vector3 Pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcLoginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 WayPoint = 2 [default = -1];
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->waypoint(), target);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // optional .Vector3 Pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcLoginNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 WayPoint = 2 [default = -1];
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waypoint());
    }

    // optional int32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional .Vector3 Pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcLoginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcLoginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcLoginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcLoginNotify::MergeFrom(const PetCaptureRpcLoginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_waypoint()) {
      set_waypoint(from.waypoint());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcLoginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcLoginNotify::CopyFrom(const PetCaptureRpcLoginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcLoginNotify::IsInitialized() const {

  return true;
}

void PetCaptureRpcLoginNotify::Swap(PetCaptureRpcLoginNotify* other) {
  if (other != this) {
    std::swap(waypoint_, other->waypoint_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcLoginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcLoginNotify_descriptor_;
  metadata.reflection = PetCaptureRpcLoginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcPetLocationAsk::kLineIdFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcPetLocationAsk::PetCaptureRpcPetLocationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcPetLocationAsk::InitAsDefaultInstance() {
}

PetCaptureRpcPetLocationAsk::PetCaptureRpcPetLocationAsk(const PetCaptureRpcPetLocationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcPetLocationAsk::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcPetLocationAsk::~PetCaptureRpcPetLocationAsk() {
  SharedDtor();
}

void PetCaptureRpcPetLocationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetCaptureRpcPetLocationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcPetLocationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcPetLocationAsk_descriptor_;
}

const PetCaptureRpcPetLocationAsk& PetCaptureRpcPetLocationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcPetLocationAsk* PetCaptureRpcPetLocationAsk::default_instance_ = NULL;

PetCaptureRpcPetLocationAsk* PetCaptureRpcPetLocationAsk::New() const {
  return new PetCaptureRpcPetLocationAsk;
}

void PetCaptureRpcPetLocationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcPetLocationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LineId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcPetLocationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LineId = 1 [default = -1];
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcPetLocationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LineId = 1 [default = -1];
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcPetLocationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LineId = 1 [default = -1];
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcPetLocationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcPetLocationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcPetLocationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcPetLocationAsk::MergeFrom(const PetCaptureRpcPetLocationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcPetLocationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcPetLocationAsk::CopyFrom(const PetCaptureRpcPetLocationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcPetLocationAsk::IsInitialized() const {

  return true;
}

void PetCaptureRpcPetLocationAsk::Swap(PetCaptureRpcPetLocationAsk* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcPetLocationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcPetLocationAsk_descriptor_;
  metadata.reflection = PetCaptureRpcPetLocationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCaptureRpcPetLocationReply::kResultFieldNumber;
const int PetCaptureRpcPetLocationReply::kPosFieldNumber;
const int PetCaptureRpcPetLocationReply::kSceneIdFieldNumber;
const int PetCaptureRpcPetLocationReply::kWayPointFieldNumber;
#endif  // !_MSC_VER

PetCaptureRpcPetLocationReply::PetCaptureRpcPetLocationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetCaptureRpcPetLocationReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

PetCaptureRpcPetLocationReply::PetCaptureRpcPetLocationReply(const PetCaptureRpcPetLocationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetCaptureRpcPetLocationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  pos_ = NULL;
  sceneid_ = -1;
  waypoint_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCaptureRpcPetLocationReply::~PetCaptureRpcPetLocationReply() {
  SharedDtor();
}

void PetCaptureRpcPetLocationReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PetCaptureRpcPetLocationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCaptureRpcPetLocationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCaptureRpcPetLocationReply_descriptor_;
}

const PetCaptureRpcPetLocationReply& PetCaptureRpcPetLocationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetCaptureRpc_2eproto();
  return *default_instance_;
}

PetCaptureRpcPetLocationReply* PetCaptureRpcPetLocationReply::default_instance_ = NULL;

PetCaptureRpcPetLocationReply* PetCaptureRpcPetLocationReply::New() const {
  return new PetCaptureRpcPetLocationReply;
}

void PetCaptureRpcPetLocationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
    sceneid_ = -1;
    waypoint_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCaptureRpcPetLocationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WayPoint;
        break;
      }

      // optional int32 WayPoint = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WayPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waypoint_)));
          set_has_waypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetCaptureRpcPetLocationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->waypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetCaptureRpcPetLocationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->waypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetCaptureRpcPetLocationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Vector3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 WayPoint = 4 [default = -1];
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waypoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCaptureRpcPetLocationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCaptureRpcPetLocationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCaptureRpcPetLocationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCaptureRpcPetLocationReply::MergeFrom(const PetCaptureRpcPetLocationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_waypoint()) {
      set_waypoint(from.waypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCaptureRpcPetLocationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCaptureRpcPetLocationReply::CopyFrom(const PetCaptureRpcPetLocationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCaptureRpcPetLocationReply::IsInitialized() const {

  return true;
}

void PetCaptureRpcPetLocationReply::Swap(PetCaptureRpcPetLocationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(waypoint_, other->waypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCaptureRpcPetLocationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCaptureRpcPetLocationReply_descriptor_;
  metadata.reflection = PetCaptureRpcPetLocationReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
