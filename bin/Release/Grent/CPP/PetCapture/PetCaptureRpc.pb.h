// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PetCaptureRpc.proto

#ifndef PROTOBUF_PetCaptureRpc_2eproto__INCLUDED
#define PROTOBUF_PetCaptureRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PetCaptureRpc_2eproto();
void protobuf_AssignDesc_PetCaptureRpc_2eproto();
void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

class PetCaptureRpcCaptureAsk;
class PetCaptureRpcCaptureReply;
class PetCaptureRpcCapturePetNotify;
class PetCaptureRpcLoginNotify;
class PetCaptureRpcPetLocationAsk;
class PetCaptureRpcPetLocationReply;

// ===================================================================

class PetCaptureRpcCaptureAsk : public ::google::protobuf::Message {
 public:
  PetCaptureRpcCaptureAsk();
  virtual ~PetCaptureRpcCaptureAsk();

  PetCaptureRpcCaptureAsk(const PetCaptureRpcCaptureAsk& from);

  inline PetCaptureRpcCaptureAsk& operator=(const PetCaptureRpcCaptureAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcCaptureAsk& default_instance();

  void Swap(PetCaptureRpcCaptureAsk* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcCaptureAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcCaptureAsk& from);
  void MergeFrom(const PetCaptureRpcCaptureAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BallType = 1 [default = 1];
  inline bool has_balltype() const;
  inline void clear_balltype();
  static const int kBallTypeFieldNumber = 1;
  inline ::google::protobuf::int32 balltype() const;
  inline void set_balltype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcCaptureAsk)
 private:
  inline void set_has_balltype();
  inline void clear_has_balltype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 balltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcCaptureAsk* default_instance_;
};
// -------------------------------------------------------------------

class PetCaptureRpcCaptureReply : public ::google::protobuf::Message {
 public:
  PetCaptureRpcCaptureReply();
  virtual ~PetCaptureRpcCaptureReply();

  PetCaptureRpcCaptureReply(const PetCaptureRpcCaptureReply& from);

  inline PetCaptureRpcCaptureReply& operator=(const PetCaptureRpcCaptureReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcCaptureReply& default_instance();

  void Swap(PetCaptureRpcCaptureReply* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcCaptureReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcCaptureReply& from);
  void MergeFrom(const PetCaptureRpcCaptureReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 CreatureId = 2 [default = -1];
  inline bool has_creatureid() const;
  inline void clear_creatureid();
  static const int kCreatureIdFieldNumber = 2;
  inline ::google::protobuf::int32 creatureid() const;
  inline void set_creatureid(::google::protobuf::int32 value);

  // optional int32 PetId = 3 [default = -1];
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcCaptureReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_creatureid();
  inline void clear_has_creatureid();
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 creatureid_;
  ::google::protobuf::int32 petid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcCaptureReply* default_instance_;
};
// -------------------------------------------------------------------

class PetCaptureRpcCapturePetNotify : public ::google::protobuf::Message {
 public:
  PetCaptureRpcCapturePetNotify();
  virtual ~PetCaptureRpcCapturePetNotify();

  PetCaptureRpcCapturePetNotify(const PetCaptureRpcCapturePetNotify& from);

  inline PetCaptureRpcCapturePetNotify& operator=(const PetCaptureRpcCapturePetNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcCapturePetNotify& default_instance();

  void Swap(PetCaptureRpcCapturePetNotify* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcCapturePetNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcCapturePetNotify& from);
  void MergeFrom(const PetCaptureRpcCapturePetNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PetId = 1 [default = -1];
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 RoleId = 4 [default = -1];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 CreatureId = 6 [default = -1];
  inline bool has_creatureid() const;
  inline void clear_creatureid();
  static const int kCreatureIdFieldNumber = 6;
  inline ::google::protobuf::int32 creatureid() const;
  inline void set_creatureid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcCapturePetNotify)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_creatureid();
  inline void clear_has_creatureid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 creatureid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcCapturePetNotify* default_instance_;
};
// -------------------------------------------------------------------

class PetCaptureRpcLoginNotify : public ::google::protobuf::Message {
 public:
  PetCaptureRpcLoginNotify();
  virtual ~PetCaptureRpcLoginNotify();

  PetCaptureRpcLoginNotify(const PetCaptureRpcLoginNotify& from);

  inline PetCaptureRpcLoginNotify& operator=(const PetCaptureRpcLoginNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcLoginNotify& default_instance();

  void Swap(PetCaptureRpcLoginNotify* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcLoginNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcLoginNotify& from);
  void MergeFrom(const PetCaptureRpcLoginNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 WayPoint = 2 [default = -1];
  inline bool has_waypoint() const;
  inline void clear_waypoint();
  static const int kWayPointFieldNumber = 2;
  inline ::google::protobuf::int32 waypoint() const;
  inline void set_waypoint(::google::protobuf::int32 value);

  // optional int32 SceneId = 3 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional .Vector3 Pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcLoginNotify)
 private:
  inline void set_has_waypoint();
  inline void clear_has_waypoint();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 waypoint_;
  ::google::protobuf::int32 sceneid_;
  ::Vector3* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcLoginNotify* default_instance_;
};
// -------------------------------------------------------------------

class PetCaptureRpcPetLocationAsk : public ::google::protobuf::Message {
 public:
  PetCaptureRpcPetLocationAsk();
  virtual ~PetCaptureRpcPetLocationAsk();

  PetCaptureRpcPetLocationAsk(const PetCaptureRpcPetLocationAsk& from);

  inline PetCaptureRpcPetLocationAsk& operator=(const PetCaptureRpcPetLocationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcPetLocationAsk& default_instance();

  void Swap(PetCaptureRpcPetLocationAsk* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcPetLocationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcPetLocationAsk& from);
  void MergeFrom(const PetCaptureRpcPetLocationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LineId = 1 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIdFieldNumber = 1;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcPetLocationAsk)
 private:
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcPetLocationAsk* default_instance_;
};
// -------------------------------------------------------------------

class PetCaptureRpcPetLocationReply : public ::google::protobuf::Message {
 public:
  PetCaptureRpcPetLocationReply();
  virtual ~PetCaptureRpcPetLocationReply();

  PetCaptureRpcPetLocationReply(const PetCaptureRpcPetLocationReply& from);

  inline PetCaptureRpcPetLocationReply& operator=(const PetCaptureRpcPetLocationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetCaptureRpcPetLocationReply& default_instance();

  void Swap(PetCaptureRpcPetLocationReply* other);

  // implements Message ----------------------------------------------

  PetCaptureRpcPetLocationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetCaptureRpcPetLocationReply& from);
  void MergeFrom(const PetCaptureRpcPetLocationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .Vector3 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // optional int32 SceneId = 3 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional int32 WayPoint = 4 [default = -1];
  inline bool has_waypoint() const;
  inline void clear_waypoint();
  static const int kWayPointFieldNumber = 4;
  inline ::google::protobuf::int32 waypoint() const;
  inline void set_waypoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetCaptureRpcPetLocationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_waypoint();
  inline void clear_has_waypoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Vector3* pos_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 waypoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PetCaptureRpc_2eproto();
  friend void protobuf_AssignDesc_PetCaptureRpc_2eproto();
  friend void protobuf_ShutdownFile_PetCaptureRpc_2eproto();

  void InitAsDefaultInstance();
  static PetCaptureRpcPetLocationReply* default_instance_;
};
// ===================================================================


// ===================================================================

// PetCaptureRpcCaptureAsk

// optional int32 BallType = 1 [default = 1];
inline bool PetCaptureRpcCaptureAsk::has_balltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcCaptureAsk::set_has_balltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcCaptureAsk::clear_has_balltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcCaptureAsk::clear_balltype() {
  balltype_ = 1;
  clear_has_balltype();
}
inline ::google::protobuf::int32 PetCaptureRpcCaptureAsk::balltype() const {
  return balltype_;
}
inline void PetCaptureRpcCaptureAsk::set_balltype(::google::protobuf::int32 value) {
  set_has_balltype();
  balltype_ = value;
}

// -------------------------------------------------------------------

// PetCaptureRpcCaptureReply

// optional int32 Result = 1 [default = -1];
inline bool PetCaptureRpcCaptureReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcCaptureReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcCaptureReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcCaptureReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PetCaptureRpcCaptureReply::result() const {
  return result_;
}
inline void PetCaptureRpcCaptureReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 CreatureId = 2 [default = -1];
inline bool PetCaptureRpcCaptureReply::has_creatureid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetCaptureRpcCaptureReply::set_has_creatureid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetCaptureRpcCaptureReply::clear_has_creatureid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetCaptureRpcCaptureReply::clear_creatureid() {
  creatureid_ = -1;
  clear_has_creatureid();
}
inline ::google::protobuf::int32 PetCaptureRpcCaptureReply::creatureid() const {
  return creatureid_;
}
inline void PetCaptureRpcCaptureReply::set_creatureid(::google::protobuf::int32 value) {
  set_has_creatureid();
  creatureid_ = value;
}

// optional int32 PetId = 3 [default = -1];
inline bool PetCaptureRpcCaptureReply::has_petid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetCaptureRpcCaptureReply::set_has_petid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetCaptureRpcCaptureReply::clear_has_petid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetCaptureRpcCaptureReply::clear_petid() {
  petid_ = -1;
  clear_has_petid();
}
inline ::google::protobuf::int32 PetCaptureRpcCaptureReply::petid() const {
  return petid_;
}
inline void PetCaptureRpcCaptureReply::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// PetCaptureRpcCapturePetNotify

// optional int32 PetId = 1 [default = -1];
inline bool PetCaptureRpcCapturePetNotify::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcCapturePetNotify::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcCapturePetNotify::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcCapturePetNotify::clear_petid() {
  petid_ = -1;
  clear_has_petid();
}
inline ::google::protobuf::int32 PetCaptureRpcCapturePetNotify::petid() const {
  return petid_;
}
inline void PetCaptureRpcCapturePetNotify::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional string NickName = 2;
inline bool PetCaptureRpcCapturePetNotify::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetCaptureRpcCapturePetNotify::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetCaptureRpcCapturePetNotify::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetCaptureRpcCapturePetNotify::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PetCaptureRpcCapturePetNotify::nickname() const {
  return *nickname_;
}
inline void PetCaptureRpcCapturePetNotify::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PetCaptureRpcCapturePetNotify::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void PetCaptureRpcCapturePetNotify::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetCaptureRpcCapturePetNotify::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* PetCaptureRpcCapturePetNotify::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetCaptureRpcCapturePetNotify::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 RoleId = 4 [default = -1];
inline bool PetCaptureRpcCapturePetNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetCaptureRpcCapturePetNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetCaptureRpcCapturePetNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetCaptureRpcCapturePetNotify::clear_roleid() {
  roleid_ = -1;
  clear_has_roleid();
}
inline ::google::protobuf::int32 PetCaptureRpcCapturePetNotify::roleid() const {
  return roleid_;
}
inline void PetCaptureRpcCapturePetNotify::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 CreatureId = 6 [default = -1];
inline bool PetCaptureRpcCapturePetNotify::has_creatureid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetCaptureRpcCapturePetNotify::set_has_creatureid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetCaptureRpcCapturePetNotify::clear_has_creatureid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetCaptureRpcCapturePetNotify::clear_creatureid() {
  creatureid_ = -1;
  clear_has_creatureid();
}
inline ::google::protobuf::int32 PetCaptureRpcCapturePetNotify::creatureid() const {
  return creatureid_;
}
inline void PetCaptureRpcCapturePetNotify::set_creatureid(::google::protobuf::int32 value) {
  set_has_creatureid();
  creatureid_ = value;
}

// -------------------------------------------------------------------

// PetCaptureRpcLoginNotify

// optional int32 WayPoint = 2 [default = -1];
inline bool PetCaptureRpcLoginNotify::has_waypoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcLoginNotify::set_has_waypoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcLoginNotify::clear_has_waypoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcLoginNotify::clear_waypoint() {
  waypoint_ = -1;
  clear_has_waypoint();
}
inline ::google::protobuf::int32 PetCaptureRpcLoginNotify::waypoint() const {
  return waypoint_;
}
inline void PetCaptureRpcLoginNotify::set_waypoint(::google::protobuf::int32 value) {
  set_has_waypoint();
  waypoint_ = value;
}

// optional int32 SceneId = 3 [default = -1];
inline bool PetCaptureRpcLoginNotify::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetCaptureRpcLoginNotify::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetCaptureRpcLoginNotify::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetCaptureRpcLoginNotify::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 PetCaptureRpcLoginNotify::sceneid() const {
  return sceneid_;
}
inline void PetCaptureRpcLoginNotify::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional .Vector3 Pos = 4;
inline bool PetCaptureRpcLoginNotify::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetCaptureRpcLoginNotify::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetCaptureRpcLoginNotify::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetCaptureRpcLoginNotify::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& PetCaptureRpcLoginNotify::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* PetCaptureRpcLoginNotify::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* PetCaptureRpcLoginNotify::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PetCaptureRpcLoginNotify::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// PetCaptureRpcPetLocationAsk

// optional int32 LineId = 1 [default = -1];
inline bool PetCaptureRpcPetLocationAsk::has_lineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcPetLocationAsk::set_has_lineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcPetLocationAsk::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcPetLocationAsk::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 PetCaptureRpcPetLocationAsk::lineid() const {
  return lineid_;
}
inline void PetCaptureRpcPetLocationAsk::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// -------------------------------------------------------------------

// PetCaptureRpcPetLocationReply

// optional int32 Result = 1 [default = -1];
inline bool PetCaptureRpcPetLocationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetCaptureRpcPetLocationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetCaptureRpcPetLocationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetCaptureRpcPetLocationReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 PetCaptureRpcPetLocationReply::result() const {
  return result_;
}
inline void PetCaptureRpcPetLocationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .Vector3 Pos = 2;
inline bool PetCaptureRpcPetLocationReply::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetCaptureRpcPetLocationReply::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetCaptureRpcPetLocationReply::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetCaptureRpcPetLocationReply::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& PetCaptureRpcPetLocationReply::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* PetCaptureRpcPetLocationReply::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* PetCaptureRpcPetLocationReply::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PetCaptureRpcPetLocationReply::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 SceneId = 3 [default = -1];
inline bool PetCaptureRpcPetLocationReply::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetCaptureRpcPetLocationReply::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetCaptureRpcPetLocationReply::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetCaptureRpcPetLocationReply::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 PetCaptureRpcPetLocationReply::sceneid() const {
  return sceneid_;
}
inline void PetCaptureRpcPetLocationReply::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional int32 WayPoint = 4 [default = -1];
inline bool PetCaptureRpcPetLocationReply::has_waypoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetCaptureRpcPetLocationReply::set_has_waypoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetCaptureRpcPetLocationReply::clear_has_waypoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetCaptureRpcPetLocationReply::clear_waypoint() {
  waypoint_ = -1;
  clear_has_waypoint();
}
inline ::google::protobuf::int32 PetCaptureRpcPetLocationReply::waypoint() const {
  return waypoint_;
}
inline void PetCaptureRpcPetLocationReply::set_waypoint(::google::protobuf::int32 value) {
  set_has_waypoint();
  waypoint_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PetCaptureRpc_2eproto__INCLUDED
