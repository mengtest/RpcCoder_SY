// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RankRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RankRpcRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRpcRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankRpcRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRpcRankReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RankRpc_2eproto() {
  protobuf_AddDesc_RankRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RankRpc.proto");
  GOOGLE_CHECK(file != NULL);
  RankRpcRankAsk_descriptor_ = file->message_type(0);
  static const int RankRpcRankAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankAsk, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankAsk, ranksubtype_),
  };
  RankRpcRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRpcRankAsk_descriptor_,
      RankRpcRankAsk::default_instance_,
      RankRpcRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRpcRankAsk));
  RankRpcRankReply_descriptor_ = file->message_type(1);
  static const int RankRpcRankReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, rankinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, rankindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, myvalue_),
  };
  RankRpcRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRpcRankReply_descriptor_,
      RankRpcRankReply::default_instance_,
      RankRpcRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRpcRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRpcRankReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RankRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRpcRankAsk_descriptor_, &RankRpcRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRpcRankReply_descriptor_, &RankRpcRankReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RankRpc_2eproto() {
  delete RankRpcRankAsk::default_instance_;
  delete RankRpcRankAsk_reflection_;
  delete RankRpcRankReply::default_instance_;
  delete RankRpcRankReply_reflection_;
}

void protobuf_AddDesc_RankRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rRankRpc.proto\032\022PublicStruct.proto\"\?\n\016R"
    "ankRpcRankAsk\022\024\n\010RankType\030\001 \001(\005:\002-1\022\027\n\013R"
    "ankSubType\030\002 \001(\005:\002-1\"s\n\020RankRpcRankReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\022\037\n\014RankInfoList\030\002 \003"
    "(\0132\t.RankInfo\022\025\n\tRankIndex\030\003 \001(\005:\002-1\022\023\n\007"
    "MyValue\030\004 \001(\003:\002-1", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RankRpc.proto", &protobuf_RegisterTypes);
  RankRpcRankAsk::default_instance_ = new RankRpcRankAsk();
  RankRpcRankReply::default_instance_ = new RankRpcRankReply();
  RankRpcRankAsk::default_instance_->InitAsDefaultInstance();
  RankRpcRankReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RankRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RankRpc_2eproto {
  StaticDescriptorInitializer_RankRpc_2eproto() {
    protobuf_AddDesc_RankRpc_2eproto();
  }
} static_descriptor_initializer_RankRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankRpcRankAsk::kRankTypeFieldNumber;
const int RankRpcRankAsk::kRankSubTypeFieldNumber;
#endif  // !_MSC_VER

RankRpcRankAsk::RankRpcRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankRpcRankAsk::InitAsDefaultInstance() {
}

RankRpcRankAsk::RankRpcRankAsk(const RankRpcRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankRpcRankAsk::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = -1;
  ranksubtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRpcRankAsk::~RankRpcRankAsk() {
  SharedDtor();
}

void RankRpcRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankRpcRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRpcRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRpcRankAsk_descriptor_;
}

const RankRpcRankAsk& RankRpcRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankRpc_2eproto();
  return *default_instance_;
}

RankRpcRankAsk* RankRpcRankAsk::default_instance_ = NULL;

RankRpcRankAsk* RankRpcRankAsk::New() const {
  return new RankRpcRankAsk;
}

void RankRpcRankAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = -1;
    ranksubtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRpcRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RankType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RankSubType;
        break;
      }

      // optional int32 RankSubType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranksubtype_)));
          set_has_ranksubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankRpcRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RankType = 1 [default = -1];
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktype(), output);
  }

  // optional int32 RankSubType = 2 [default = -1];
  if (has_ranksubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranksubtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankRpcRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RankType = 1 [default = -1];
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranktype(), target);
  }

  // optional int32 RankSubType = 2 [default = -1];
  if (has_ranksubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranksubtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankRpcRankAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RankType = 1 [default = -1];
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }

    // optional int32 RankSubType = 2 [default = -1];
    if (has_ranksubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranksubtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRpcRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRpcRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRpcRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRpcRankAsk::MergeFrom(const RankRpcRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_ranksubtype()) {
      set_ranksubtype(from.ranksubtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRpcRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRpcRankAsk::CopyFrom(const RankRpcRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRpcRankAsk::IsInitialized() const {

  return true;
}

void RankRpcRankAsk::Swap(RankRpcRankAsk* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(ranksubtype_, other->ranksubtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRpcRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRpcRankAsk_descriptor_;
  metadata.reflection = RankRpcRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankRpcRankReply::kResultFieldNumber;
const int RankRpcRankReply::kRankInfoListFieldNumber;
const int RankRpcRankReply::kRankIndexFieldNumber;
const int RankRpcRankReply::kMyValueFieldNumber;
#endif  // !_MSC_VER

RankRpcRankReply::RankRpcRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankRpcRankReply::InitAsDefaultInstance() {
}

RankRpcRankReply::RankRpcRankReply(const RankRpcRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankRpcRankReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rankindex_ = -1;
  myvalue_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRpcRankReply::~RankRpcRankReply() {
  SharedDtor();
}

void RankRpcRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankRpcRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRpcRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRpcRankReply_descriptor_;
}

const RankRpcRankReply& RankRpcRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankRpc_2eproto();
  return *default_instance_;
}

RankRpcRankReply* RankRpcRankReply::default_instance_ = NULL;

RankRpcRankReply* RankRpcRankReply::New() const {
  return new RankRpcRankReply;
}

void RankRpcRankReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rankindex_ = -1;
    myvalue_ = GOOGLE_LONGLONG(-1);
  }
  rankinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRpcRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankInfoList;
        break;
      }

      // repeated .RankInfo RankInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankInfoList;
        if (input->ExpectTag(24)) goto parse_RankIndex;
        break;
      }

      // optional int32 RankIndex = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankindex_)));
          set_has_rankindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MyValue;
        break;
      }

      // optional int64 MyValue = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myvalue_)));
          set_has_myvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankRpcRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .RankInfo RankInfoList = 2;
  for (int i = 0; i < this->rankinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankinfolist(i), output);
  }

  // optional int32 RankIndex = 3 [default = -1];
  if (has_rankindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankindex(), output);
  }

  // optional int64 MyValue = 4 [default = -1];
  if (has_myvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->myvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankRpcRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .RankInfo RankInfoList = 2;
  for (int i = 0; i < this->rankinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankinfolist(i), target);
  }

  // optional int32 RankIndex = 3 [default = -1];
  if (has_rankindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankindex(), target);
  }

  // optional int64 MyValue = 4 [default = -1];
  if (has_myvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->myvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankRpcRankReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 RankIndex = 3 [default = -1];
    if (has_rankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankindex());
    }

    // optional int64 MyValue = 4 [default = -1];
    if (has_myvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myvalue());
    }

  }
  // repeated .RankInfo RankInfoList = 2;
  total_size += 1 * this->rankinfolist_size();
  for (int i = 0; i < this->rankinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRpcRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRpcRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRpcRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRpcRankReply::MergeFrom(const RankRpcRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfolist_.MergeFrom(from.rankinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rankindex()) {
      set_rankindex(from.rankindex());
    }
    if (from.has_myvalue()) {
      set_myvalue(from.myvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRpcRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRpcRankReply::CopyFrom(const RankRpcRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRpcRankReply::IsInitialized() const {

  return true;
}

void RankRpcRankReply::Swap(RankRpcRankReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rankinfolist_.Swap(&other->rankinfolist_);
    std::swap(rankindex_, other->rankindex_);
    std::swap(myvalue_, other->myvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRpcRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRpcRankReply_descriptor_;
  metadata.reflection = RankRpcRankReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
