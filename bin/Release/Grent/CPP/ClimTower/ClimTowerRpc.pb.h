// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClimTowerRpc.proto

#ifndef PROTOBUF_ClimTowerRpc_2eproto__INCLUDED
#define PROTOBUF_ClimTowerRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClimTowerRpc_2eproto();
void protobuf_AssignDesc_ClimTowerRpc_2eproto();
void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

class ClimTowerRpcOpenRuleNotify;
class ClimTowerRpcChallengeAsk;
class ClimTowerRpcChallengeReply;
class ClimTowerRpcEnterAsk;
class ClimTowerRpcEnterReply;
class ClimTowerRpcRankAsk;
class ClimTowerRpcRankReply;
class ClimTowerRpcFirstVicRewardAsk;
class ClimTowerRpcFirstVicRewardReply;
class ClimTowerRpcNextLayerNotify;
class ClimTowerRpcChallengeEndNotify;
class ClimTowerRpcWaveRefreshNotify;

// ===================================================================

class ClimTowerRpcOpenRuleNotify : public ::google::protobuf::Message {
 public:
  ClimTowerRpcOpenRuleNotify();
  virtual ~ClimTowerRpcOpenRuleNotify();

  ClimTowerRpcOpenRuleNotify(const ClimTowerRpcOpenRuleNotify& from);

  inline ClimTowerRpcOpenRuleNotify& operator=(const ClimTowerRpcOpenRuleNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcOpenRuleNotify& default_instance();

  void Swap(ClimTowerRpcOpenRuleNotify* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcOpenRuleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcOpenRuleNotify& from);
  void MergeFrom(const ClimTowerRpcOpenRuleNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClimTowerRpcOpenRuleNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcOpenRuleNotify* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcChallengeAsk : public ::google::protobuf::Message {
 public:
  ClimTowerRpcChallengeAsk();
  virtual ~ClimTowerRpcChallengeAsk();

  ClimTowerRpcChallengeAsk(const ClimTowerRpcChallengeAsk& from);

  inline ClimTowerRpcChallengeAsk& operator=(const ClimTowerRpcChallengeAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcChallengeAsk& default_instance();

  void Swap(ClimTowerRpcChallengeAsk* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcChallengeAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcChallengeAsk& from);
  void MergeFrom(const ClimTowerRpcChallengeAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Layer = 1 [default = 1];
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcChallengeAsk)
 private:
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcChallengeAsk* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcChallengeReply : public ::google::protobuf::Message {
 public:
  ClimTowerRpcChallengeReply();
  virtual ~ClimTowerRpcChallengeReply();

  ClimTowerRpcChallengeReply(const ClimTowerRpcChallengeReply& from);

  inline ClimTowerRpcChallengeReply& operator=(const ClimTowerRpcChallengeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcChallengeReply& default_instance();

  void Swap(ClimTowerRpcChallengeReply* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcChallengeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcChallengeReply& from);
  void MergeFrom(const ClimTowerRpcChallengeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 DungeonId = 2 [default = -1];
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonIdFieldNumber = 2;
  inline ::google::protobuf::int32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::int32 value);

  // optional int32 SceneId = 3 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional int32 WayPoint = 4 [default = -1];
  inline bool has_waypoint() const;
  inline void clear_waypoint();
  static const int kWayPointFieldNumber = 4;
  inline ::google::protobuf::int32 waypoint() const;
  inline void set_waypoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcChallengeReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_waypoint();
  inline void clear_has_waypoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 waypoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcChallengeReply* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcEnterAsk : public ::google::protobuf::Message {
 public:
  ClimTowerRpcEnterAsk();
  virtual ~ClimTowerRpcEnterAsk();

  ClimTowerRpcEnterAsk(const ClimTowerRpcEnterAsk& from);

  inline ClimTowerRpcEnterAsk& operator=(const ClimTowerRpcEnterAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcEnterAsk& default_instance();

  void Swap(ClimTowerRpcEnterAsk* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcEnterAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcEnterAsk& from);
  void MergeFrom(const ClimTowerRpcEnterAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClimTowerRpcEnterAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcEnterAsk* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcEnterReply : public ::google::protobuf::Message {
 public:
  ClimTowerRpcEnterReply();
  virtual ~ClimTowerRpcEnterReply();

  ClimTowerRpcEnterReply(const ClimTowerRpcEnterReply& from);

  inline ClimTowerRpcEnterReply& operator=(const ClimTowerRpcEnterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcEnterReply& default_instance();

  void Swap(ClimTowerRpcEnterReply* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcEnterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcEnterReply& from);
  void MergeFrom(const ClimTowerRpcEnterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .ClimTowerInfo EnterInfo = 2;
  inline bool has_enterinfo() const;
  inline void clear_enterinfo();
  static const int kEnterInfoFieldNumber = 2;
  inline const ::ClimTowerInfo& enterinfo() const;
  inline ::ClimTowerInfo* mutable_enterinfo();
  inline ::ClimTowerInfo* release_enterinfo();
  inline void set_allocated_enterinfo(::ClimTowerInfo* enterinfo);

  // optional int32 RemainTimes = 3 [default = 0];
  inline bool has_remaintimes() const;
  inline void clear_remaintimes();
  static const int kRemainTimesFieldNumber = 3;
  inline ::google::protobuf::int32 remaintimes() const;
  inline void set_remaintimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcEnterReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_enterinfo();
  inline void clear_has_enterinfo();
  inline void set_has_remaintimes();
  inline void clear_has_remaintimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ClimTowerInfo* enterinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 remaintimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcEnterReply* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcRankAsk : public ::google::protobuf::Message {
 public:
  ClimTowerRpcRankAsk();
  virtual ~ClimTowerRpcRankAsk();

  ClimTowerRpcRankAsk(const ClimTowerRpcRankAsk& from);

  inline ClimTowerRpcRankAsk& operator=(const ClimTowerRpcRankAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcRankAsk& default_instance();

  void Swap(ClimTowerRpcRankAsk* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcRankAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcRankAsk& from);
  void MergeFrom(const ClimTowerRpcRankAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClimTowerRpcRankAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcRankAsk* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcRankReply : public ::google::protobuf::Message {
 public:
  ClimTowerRpcRankReply();
  virtual ~ClimTowerRpcRankReply();

  ClimTowerRpcRankReply(const ClimTowerRpcRankReply& from);

  inline ClimTowerRpcRankReply& operator=(const ClimTowerRpcRankReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcRankReply& default_instance();

  void Swap(ClimTowerRpcRankReply* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcRankReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcRankReply& from);
  void MergeFrom(const ClimTowerRpcRankReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcRankReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcRankReply* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcFirstVicRewardAsk : public ::google::protobuf::Message {
 public:
  ClimTowerRpcFirstVicRewardAsk();
  virtual ~ClimTowerRpcFirstVicRewardAsk();

  ClimTowerRpcFirstVicRewardAsk(const ClimTowerRpcFirstVicRewardAsk& from);

  inline ClimTowerRpcFirstVicRewardAsk& operator=(const ClimTowerRpcFirstVicRewardAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcFirstVicRewardAsk& default_instance();

  void Swap(ClimTowerRpcFirstVicRewardAsk* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcFirstVicRewardAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcFirstVicRewardAsk& from);
  void MergeFrom(const ClimTowerRpcFirstVicRewardAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Layer = 1 [default = -1];
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcFirstVicRewardAsk)
 private:
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcFirstVicRewardAsk* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcFirstVicRewardReply : public ::google::protobuf::Message {
 public:
  ClimTowerRpcFirstVicRewardReply();
  virtual ~ClimTowerRpcFirstVicRewardReply();

  ClimTowerRpcFirstVicRewardReply(const ClimTowerRpcFirstVicRewardReply& from);

  inline ClimTowerRpcFirstVicRewardReply& operator=(const ClimTowerRpcFirstVicRewardReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcFirstVicRewardReply& default_instance();

  void Swap(ClimTowerRpcFirstVicRewardReply* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcFirstVicRewardReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcFirstVicRewardReply& from);
  void MergeFrom(const ClimTowerRpcFirstVicRewardReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcFirstVicRewardReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcFirstVicRewardReply* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcNextLayerNotify : public ::google::protobuf::Message {
 public:
  ClimTowerRpcNextLayerNotify();
  virtual ~ClimTowerRpcNextLayerNotify();

  ClimTowerRpcNextLayerNotify(const ClimTowerRpcNextLayerNotify& from);

  inline ClimTowerRpcNextLayerNotify& operator=(const ClimTowerRpcNextLayerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcNextLayerNotify& default_instance();

  void Swap(ClimTowerRpcNextLayerNotify* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcNextLayerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcNextLayerNotify& from);
  void MergeFrom(const ClimTowerRpcNextLayerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CurLayer = 1 [default = -1];
  inline bool has_curlayer() const;
  inline void clear_curlayer();
  static const int kCurLayerFieldNumber = 1;
  inline ::google::protobuf::int32 curlayer() const;
  inline void set_curlayer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcNextLayerNotify)
 private:
  inline void set_has_curlayer();
  inline void clear_has_curlayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 curlayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcNextLayerNotify* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcChallengeEndNotify : public ::google::protobuf::Message {
 public:
  ClimTowerRpcChallengeEndNotify();
  virtual ~ClimTowerRpcChallengeEndNotify();

  ClimTowerRpcChallengeEndNotify(const ClimTowerRpcChallengeEndNotify& from);

  inline ClimTowerRpcChallengeEndNotify& operator=(const ClimTowerRpcChallengeEndNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcChallengeEndNotify& default_instance();

  void Swap(ClimTowerRpcChallengeEndNotify* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcChallengeEndNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcChallengeEndNotify& from);
  void MergeFrom(const ClimTowerRpcChallengeEndNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClimTowerRpcChallengeEndNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcChallengeEndNotify* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerRpcWaveRefreshNotify : public ::google::protobuf::Message {
 public:
  ClimTowerRpcWaveRefreshNotify();
  virtual ~ClimTowerRpcWaveRefreshNotify();

  ClimTowerRpcWaveRefreshNotify(const ClimTowerRpcWaveRefreshNotify& from);

  inline ClimTowerRpcWaveRefreshNotify& operator=(const ClimTowerRpcWaveRefreshNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerRpcWaveRefreshNotify& default_instance();

  void Swap(ClimTowerRpcWaveRefreshNotify* other);

  // implements Message ----------------------------------------------

  ClimTowerRpcWaveRefreshNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerRpcWaveRefreshNotify& from);
  void MergeFrom(const ClimTowerRpcWaveRefreshNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AllWaves = 1 [default = -1];
  inline bool has_allwaves() const;
  inline void clear_allwaves();
  static const int kAllWavesFieldNumber = 1;
  inline ::google::protobuf::int32 allwaves() const;
  inline void set_allwaves(::google::protobuf::int32 value);

  // optional int32 CurWave = 2 [default = -1];
  inline bool has_curwave() const;
  inline void clear_curwave();
  static const int kCurWaveFieldNumber = 2;
  inline ::google::protobuf::int32 curwave() const;
  inline void set_curwave(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClimTowerRpcWaveRefreshNotify)
 private:
  inline void set_has_allwaves();
  inline void clear_has_allwaves();
  inline void set_has_curwave();
  inline void clear_has_curwave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 allwaves_;
  ::google::protobuf::int32 curwave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClimTowerRpc_2eproto();
  friend void protobuf_AssignDesc_ClimTowerRpc_2eproto();
  friend void protobuf_ShutdownFile_ClimTowerRpc_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerRpcWaveRefreshNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// ClimTowerRpcOpenRuleNotify

// -------------------------------------------------------------------

// ClimTowerRpcChallengeAsk

// optional int32 Layer = 1 [default = 1];
inline bool ClimTowerRpcChallengeAsk::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcChallengeAsk::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcChallengeAsk::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcChallengeAsk::clear_layer() {
  layer_ = 1;
  clear_has_layer();
}
inline ::google::protobuf::int32 ClimTowerRpcChallengeAsk::layer() const {
  return layer_;
}
inline void ClimTowerRpcChallengeAsk::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcChallengeReply

// optional int32 Result = 1 [default = -1];
inline bool ClimTowerRpcChallengeReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcChallengeReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcChallengeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcChallengeReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ClimTowerRpcChallengeReply::result() const {
  return result_;
}
inline void ClimTowerRpcChallengeReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 DungeonId = 2 [default = -1];
inline bool ClimTowerRpcChallengeReply::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClimTowerRpcChallengeReply::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClimTowerRpcChallengeReply::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClimTowerRpcChallengeReply::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 ClimTowerRpcChallengeReply::dungeonid() const {
  return dungeonid_;
}
inline void ClimTowerRpcChallengeReply::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// optional int32 SceneId = 3 [default = -1];
inline bool ClimTowerRpcChallengeReply::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClimTowerRpcChallengeReply::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClimTowerRpcChallengeReply::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClimTowerRpcChallengeReply::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 ClimTowerRpcChallengeReply::sceneid() const {
  return sceneid_;
}
inline void ClimTowerRpcChallengeReply::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional int32 WayPoint = 4 [default = -1];
inline bool ClimTowerRpcChallengeReply::has_waypoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClimTowerRpcChallengeReply::set_has_waypoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClimTowerRpcChallengeReply::clear_has_waypoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClimTowerRpcChallengeReply::clear_waypoint() {
  waypoint_ = -1;
  clear_has_waypoint();
}
inline ::google::protobuf::int32 ClimTowerRpcChallengeReply::waypoint() const {
  return waypoint_;
}
inline void ClimTowerRpcChallengeReply::set_waypoint(::google::protobuf::int32 value) {
  set_has_waypoint();
  waypoint_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcEnterAsk

// -------------------------------------------------------------------

// ClimTowerRpcEnterReply

// optional int32 Result = 1 [default = -1];
inline bool ClimTowerRpcEnterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcEnterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcEnterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcEnterReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ClimTowerRpcEnterReply::result() const {
  return result_;
}
inline void ClimTowerRpcEnterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .ClimTowerInfo EnterInfo = 2;
inline bool ClimTowerRpcEnterReply::has_enterinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClimTowerRpcEnterReply::set_has_enterinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClimTowerRpcEnterReply::clear_has_enterinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClimTowerRpcEnterReply::clear_enterinfo() {
  if (enterinfo_ != NULL) enterinfo_->::ClimTowerInfo::Clear();
  clear_has_enterinfo();
}
inline const ::ClimTowerInfo& ClimTowerRpcEnterReply::enterinfo() const {
  return enterinfo_ != NULL ? *enterinfo_ : *default_instance_->enterinfo_;
}
inline ::ClimTowerInfo* ClimTowerRpcEnterReply::mutable_enterinfo() {
  set_has_enterinfo();
  if (enterinfo_ == NULL) enterinfo_ = new ::ClimTowerInfo;
  return enterinfo_;
}
inline ::ClimTowerInfo* ClimTowerRpcEnterReply::release_enterinfo() {
  clear_has_enterinfo();
  ::ClimTowerInfo* temp = enterinfo_;
  enterinfo_ = NULL;
  return temp;
}
inline void ClimTowerRpcEnterReply::set_allocated_enterinfo(::ClimTowerInfo* enterinfo) {
  delete enterinfo_;
  enterinfo_ = enterinfo;
  if (enterinfo) {
    set_has_enterinfo();
  } else {
    clear_has_enterinfo();
  }
}

// optional int32 RemainTimes = 3 [default = 0];
inline bool ClimTowerRpcEnterReply::has_remaintimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClimTowerRpcEnterReply::set_has_remaintimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClimTowerRpcEnterReply::clear_has_remaintimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClimTowerRpcEnterReply::clear_remaintimes() {
  remaintimes_ = 0;
  clear_has_remaintimes();
}
inline ::google::protobuf::int32 ClimTowerRpcEnterReply::remaintimes() const {
  return remaintimes_;
}
inline void ClimTowerRpcEnterReply::set_remaintimes(::google::protobuf::int32 value) {
  set_has_remaintimes();
  remaintimes_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcRankAsk

// -------------------------------------------------------------------

// ClimTowerRpcRankReply

// optional int32 Result = 1 [default = -1];
inline bool ClimTowerRpcRankReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcRankReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcRankReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcRankReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ClimTowerRpcRankReply::result() const {
  return result_;
}
inline void ClimTowerRpcRankReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcFirstVicRewardAsk

// optional int32 Layer = 1 [default = -1];
inline bool ClimTowerRpcFirstVicRewardAsk::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcFirstVicRewardAsk::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcFirstVicRewardAsk::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcFirstVicRewardAsk::clear_layer() {
  layer_ = -1;
  clear_has_layer();
}
inline ::google::protobuf::int32 ClimTowerRpcFirstVicRewardAsk::layer() const {
  return layer_;
}
inline void ClimTowerRpcFirstVicRewardAsk::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcFirstVicRewardReply

// optional int32 Result = 1 [default = -1];
inline bool ClimTowerRpcFirstVicRewardReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcFirstVicRewardReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcFirstVicRewardReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcFirstVicRewardReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 ClimTowerRpcFirstVicRewardReply::result() const {
  return result_;
}
inline void ClimTowerRpcFirstVicRewardReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcNextLayerNotify

// optional int32 CurLayer = 1 [default = -1];
inline bool ClimTowerRpcNextLayerNotify::has_curlayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcNextLayerNotify::set_has_curlayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcNextLayerNotify::clear_has_curlayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcNextLayerNotify::clear_curlayer() {
  curlayer_ = -1;
  clear_has_curlayer();
}
inline ::google::protobuf::int32 ClimTowerRpcNextLayerNotify::curlayer() const {
  return curlayer_;
}
inline void ClimTowerRpcNextLayerNotify::set_curlayer(::google::protobuf::int32 value) {
  set_has_curlayer();
  curlayer_ = value;
}

// -------------------------------------------------------------------

// ClimTowerRpcChallengeEndNotify

// -------------------------------------------------------------------

// ClimTowerRpcWaveRefreshNotify

// optional int32 AllWaves = 1 [default = -1];
inline bool ClimTowerRpcWaveRefreshNotify::has_allwaves() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerRpcWaveRefreshNotify::set_has_allwaves() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerRpcWaveRefreshNotify::clear_has_allwaves() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerRpcWaveRefreshNotify::clear_allwaves() {
  allwaves_ = -1;
  clear_has_allwaves();
}
inline ::google::protobuf::int32 ClimTowerRpcWaveRefreshNotify::allwaves() const {
  return allwaves_;
}
inline void ClimTowerRpcWaveRefreshNotify::set_allwaves(::google::protobuf::int32 value) {
  set_has_allwaves();
  allwaves_ = value;
}

// optional int32 CurWave = 2 [default = -1];
inline bool ClimTowerRpcWaveRefreshNotify::has_curwave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClimTowerRpcWaveRefreshNotify::set_has_curwave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClimTowerRpcWaveRefreshNotify::clear_has_curwave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClimTowerRpcWaveRefreshNotify::clear_curwave() {
  curwave_ = -1;
  clear_has_curwave();
}
inline ::google::protobuf::int32 ClimTowerRpcWaveRefreshNotify::curwave() const {
  return curwave_;
}
inline void ClimTowerRpcWaveRefreshNotify::set_curwave(::google::protobuf::int32 value) {
  set_has_curwave();
  curwave_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClimTowerRpc_2eproto__INCLUDED
