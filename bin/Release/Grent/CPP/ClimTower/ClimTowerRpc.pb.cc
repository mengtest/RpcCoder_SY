// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClimTowerRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClimTowerRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClimTowerRpcOpenRuleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcOpenRuleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcChallengeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcChallengeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcEnterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcEnterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcEnterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcEnterReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcFirstVicRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcFirstVicRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcFirstVicRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcFirstVicRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcNextLayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcNextLayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcChallengeEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerRpcWaveRefreshNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerRpcWaveRefreshNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClimTowerRpc_2eproto() {
  protobuf_AddDesc_ClimTowerRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClimTowerRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ClimTowerRpcOpenRuleNotify_descriptor_ = file->message_type(0);
  static const int ClimTowerRpcOpenRuleNotify_offsets_[1] = {
  };
  ClimTowerRpcOpenRuleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcOpenRuleNotify_descriptor_,
      ClimTowerRpcOpenRuleNotify::default_instance_,
      ClimTowerRpcOpenRuleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcOpenRuleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcOpenRuleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcOpenRuleNotify));
  ClimTowerRpcChallengeAsk_descriptor_ = file->message_type(1);
  static const int ClimTowerRpcChallengeAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeAsk, layer_),
  };
  ClimTowerRpcChallengeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcChallengeAsk_descriptor_,
      ClimTowerRpcChallengeAsk::default_instance_,
      ClimTowerRpcChallengeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcChallengeAsk));
  ClimTowerRpcChallengeReply_descriptor_ = file->message_type(2);
  static const int ClimTowerRpcChallengeReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, waypoint_),
  };
  ClimTowerRpcChallengeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcChallengeReply_descriptor_,
      ClimTowerRpcChallengeReply::default_instance_,
      ClimTowerRpcChallengeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcChallengeReply));
  ClimTowerRpcEnterAsk_descriptor_ = file->message_type(3);
  static const int ClimTowerRpcEnterAsk_offsets_[1] = {
  };
  ClimTowerRpcEnterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcEnterAsk_descriptor_,
      ClimTowerRpcEnterAsk::default_instance_,
      ClimTowerRpcEnterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcEnterAsk));
  ClimTowerRpcEnterReply_descriptor_ = file->message_type(4);
  static const int ClimTowerRpcEnterReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterReply, enterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterReply, remaintimes_),
  };
  ClimTowerRpcEnterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcEnterReply_descriptor_,
      ClimTowerRpcEnterReply::default_instance_,
      ClimTowerRpcEnterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcEnterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcEnterReply));
  ClimTowerRpcRankAsk_descriptor_ = file->message_type(5);
  static const int ClimTowerRpcRankAsk_offsets_[1] = {
  };
  ClimTowerRpcRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcRankAsk_descriptor_,
      ClimTowerRpcRankAsk::default_instance_,
      ClimTowerRpcRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcRankAsk));
  ClimTowerRpcRankReply_descriptor_ = file->message_type(6);
  static const int ClimTowerRpcRankReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcRankReply, result_),
  };
  ClimTowerRpcRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcRankReply_descriptor_,
      ClimTowerRpcRankReply::default_instance_,
      ClimTowerRpcRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcRankReply));
  ClimTowerRpcFirstVicRewardAsk_descriptor_ = file->message_type(7);
  static const int ClimTowerRpcFirstVicRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardAsk, layer_),
  };
  ClimTowerRpcFirstVicRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcFirstVicRewardAsk_descriptor_,
      ClimTowerRpcFirstVicRewardAsk::default_instance_,
      ClimTowerRpcFirstVicRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcFirstVicRewardAsk));
  ClimTowerRpcFirstVicRewardReply_descriptor_ = file->message_type(8);
  static const int ClimTowerRpcFirstVicRewardReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardReply, result_),
  };
  ClimTowerRpcFirstVicRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcFirstVicRewardReply_descriptor_,
      ClimTowerRpcFirstVicRewardReply::default_instance_,
      ClimTowerRpcFirstVicRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcFirstVicRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcFirstVicRewardReply));
  ClimTowerRpcNextLayerNotify_descriptor_ = file->message_type(9);
  static const int ClimTowerRpcNextLayerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcNextLayerNotify, curlayer_),
  };
  ClimTowerRpcNextLayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcNextLayerNotify_descriptor_,
      ClimTowerRpcNextLayerNotify::default_instance_,
      ClimTowerRpcNextLayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcNextLayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcNextLayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcNextLayerNotify));
  ClimTowerRpcChallengeEndNotify_descriptor_ = file->message_type(10);
  static const int ClimTowerRpcChallengeEndNotify_offsets_[1] = {
  };
  ClimTowerRpcChallengeEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcChallengeEndNotify_descriptor_,
      ClimTowerRpcChallengeEndNotify::default_instance_,
      ClimTowerRpcChallengeEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcChallengeEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcChallengeEndNotify));
  ClimTowerRpcWaveRefreshNotify_descriptor_ = file->message_type(11);
  static const int ClimTowerRpcWaveRefreshNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcWaveRefreshNotify, allwaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcWaveRefreshNotify, curwave_),
  };
  ClimTowerRpcWaveRefreshNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerRpcWaveRefreshNotify_descriptor_,
      ClimTowerRpcWaveRefreshNotify::default_instance_,
      ClimTowerRpcWaveRefreshNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcWaveRefreshNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerRpcWaveRefreshNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerRpcWaveRefreshNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClimTowerRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcOpenRuleNotify_descriptor_, &ClimTowerRpcOpenRuleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcChallengeAsk_descriptor_, &ClimTowerRpcChallengeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcChallengeReply_descriptor_, &ClimTowerRpcChallengeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcEnterAsk_descriptor_, &ClimTowerRpcEnterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcEnterReply_descriptor_, &ClimTowerRpcEnterReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcRankAsk_descriptor_, &ClimTowerRpcRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcRankReply_descriptor_, &ClimTowerRpcRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcFirstVicRewardAsk_descriptor_, &ClimTowerRpcFirstVicRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcFirstVicRewardReply_descriptor_, &ClimTowerRpcFirstVicRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcNextLayerNotify_descriptor_, &ClimTowerRpcNextLayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcChallengeEndNotify_descriptor_, &ClimTowerRpcChallengeEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerRpcWaveRefreshNotify_descriptor_, &ClimTowerRpcWaveRefreshNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClimTowerRpc_2eproto() {
  delete ClimTowerRpcOpenRuleNotify::default_instance_;
  delete ClimTowerRpcOpenRuleNotify_reflection_;
  delete ClimTowerRpcChallengeAsk::default_instance_;
  delete ClimTowerRpcChallengeAsk_reflection_;
  delete ClimTowerRpcChallengeReply::default_instance_;
  delete ClimTowerRpcChallengeReply_reflection_;
  delete ClimTowerRpcEnterAsk::default_instance_;
  delete ClimTowerRpcEnterAsk_reflection_;
  delete ClimTowerRpcEnterReply::default_instance_;
  delete ClimTowerRpcEnterReply_reflection_;
  delete ClimTowerRpcRankAsk::default_instance_;
  delete ClimTowerRpcRankAsk_reflection_;
  delete ClimTowerRpcRankReply::default_instance_;
  delete ClimTowerRpcRankReply_reflection_;
  delete ClimTowerRpcFirstVicRewardAsk::default_instance_;
  delete ClimTowerRpcFirstVicRewardAsk_reflection_;
  delete ClimTowerRpcFirstVicRewardReply::default_instance_;
  delete ClimTowerRpcFirstVicRewardReply_reflection_;
  delete ClimTowerRpcNextLayerNotify::default_instance_;
  delete ClimTowerRpcNextLayerNotify_reflection_;
  delete ClimTowerRpcChallengeEndNotify::default_instance_;
  delete ClimTowerRpcChallengeEndNotify_reflection_;
  delete ClimTowerRpcWaveRefreshNotify::default_instance_;
  delete ClimTowerRpcWaveRefreshNotify_reflection_;
}

void protobuf_AddDesc_ClimTowerRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ClimTowerRpc.proto\032\022PublicStruct.proto"
    "\"\034\n\032ClimTowerRpcOpenRuleNotify\",\n\030ClimTo"
    "werRpcChallengeAsk\022\020\n\005Layer\030\001 \001(\005:\0011\"r\n\032"
    "ClimTowerRpcChallengeReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\022\025\n\tDungeonId\030\002 \001(\005:\002-1\022\023\n\007SceneId"
    "\030\003 \001(\005:\002-1\022\024\n\010WayPoint\030\004 \001(\005:\002-1\"\026\n\024Clim"
    "TowerRpcEnterAsk\"g\n\026ClimTowerRpcEnterRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\tEnterInfo\030\002 \001("
    "\0132\016.ClimTowerInfo\022\026\n\013RemainTimes\030\003 \001(\005:\001"
    "0\"\025\n\023ClimTowerRpcRankAsk\"+\n\025ClimTowerRpc"
    "RankReply\022\022\n\006Result\030\001 \001(\005:\002-1\"2\n\035ClimTow"
    "erRpcFirstVicRewardAsk\022\021\n\005Layer\030\001 \001(\005:\002-"
    "1\"5\n\037ClimTowerRpcFirstVicRewardReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\"3\n\033ClimTowerRpcNextLaye"
    "rNotify\022\024\n\010CurLayer\030\001 \001(\005:\002-1\" \n\036ClimTow"
    "erRpcChallengeEndNotify\"J\n\035ClimTowerRpcW"
    "aveRefreshNotify\022\024\n\010AllWaves\030\001 \001(\005:\002-1\022\023"
    "\n\007CurWave\030\002 \001(\005:\002-1", 699);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClimTowerRpc.proto", &protobuf_RegisterTypes);
  ClimTowerRpcOpenRuleNotify::default_instance_ = new ClimTowerRpcOpenRuleNotify();
  ClimTowerRpcChallengeAsk::default_instance_ = new ClimTowerRpcChallengeAsk();
  ClimTowerRpcChallengeReply::default_instance_ = new ClimTowerRpcChallengeReply();
  ClimTowerRpcEnterAsk::default_instance_ = new ClimTowerRpcEnterAsk();
  ClimTowerRpcEnterReply::default_instance_ = new ClimTowerRpcEnterReply();
  ClimTowerRpcRankAsk::default_instance_ = new ClimTowerRpcRankAsk();
  ClimTowerRpcRankReply::default_instance_ = new ClimTowerRpcRankReply();
  ClimTowerRpcFirstVicRewardAsk::default_instance_ = new ClimTowerRpcFirstVicRewardAsk();
  ClimTowerRpcFirstVicRewardReply::default_instance_ = new ClimTowerRpcFirstVicRewardReply();
  ClimTowerRpcNextLayerNotify::default_instance_ = new ClimTowerRpcNextLayerNotify();
  ClimTowerRpcChallengeEndNotify::default_instance_ = new ClimTowerRpcChallengeEndNotify();
  ClimTowerRpcWaveRefreshNotify::default_instance_ = new ClimTowerRpcWaveRefreshNotify();
  ClimTowerRpcOpenRuleNotify::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcChallengeAsk::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcChallengeReply::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcEnterAsk::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcEnterReply::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcRankAsk::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcRankReply::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcFirstVicRewardAsk::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcFirstVicRewardReply::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcNextLayerNotify::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcChallengeEndNotify::default_instance_->InitAsDefaultInstance();
  ClimTowerRpcWaveRefreshNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClimTowerRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClimTowerRpc_2eproto {
  StaticDescriptorInitializer_ClimTowerRpc_2eproto() {
    protobuf_AddDesc_ClimTowerRpc_2eproto();
  }
} static_descriptor_initializer_ClimTowerRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClimTowerRpcOpenRuleNotify::ClimTowerRpcOpenRuleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcOpenRuleNotify::InitAsDefaultInstance() {
}

ClimTowerRpcOpenRuleNotify::ClimTowerRpcOpenRuleNotify(const ClimTowerRpcOpenRuleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcOpenRuleNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcOpenRuleNotify::~ClimTowerRpcOpenRuleNotify() {
  SharedDtor();
}

void ClimTowerRpcOpenRuleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcOpenRuleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcOpenRuleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcOpenRuleNotify_descriptor_;
}

const ClimTowerRpcOpenRuleNotify& ClimTowerRpcOpenRuleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcOpenRuleNotify* ClimTowerRpcOpenRuleNotify::default_instance_ = NULL;

ClimTowerRpcOpenRuleNotify* ClimTowerRpcOpenRuleNotify::New() const {
  return new ClimTowerRpcOpenRuleNotify;
}

void ClimTowerRpcOpenRuleNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcOpenRuleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClimTowerRpcOpenRuleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcOpenRuleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcOpenRuleNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcOpenRuleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcOpenRuleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcOpenRuleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcOpenRuleNotify::MergeFrom(const ClimTowerRpcOpenRuleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcOpenRuleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcOpenRuleNotify::CopyFrom(const ClimTowerRpcOpenRuleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcOpenRuleNotify::IsInitialized() const {

  return true;
}

void ClimTowerRpcOpenRuleNotify::Swap(ClimTowerRpcOpenRuleNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcOpenRuleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcOpenRuleNotify_descriptor_;
  metadata.reflection = ClimTowerRpcOpenRuleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcChallengeAsk::kLayerFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcChallengeAsk::ClimTowerRpcChallengeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcChallengeAsk::InitAsDefaultInstance() {
}

ClimTowerRpcChallengeAsk::ClimTowerRpcChallengeAsk(const ClimTowerRpcChallengeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcChallengeAsk::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcChallengeAsk::~ClimTowerRpcChallengeAsk() {
  SharedDtor();
}

void ClimTowerRpcChallengeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcChallengeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcChallengeAsk_descriptor_;
}

const ClimTowerRpcChallengeAsk& ClimTowerRpcChallengeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcChallengeAsk* ClimTowerRpcChallengeAsk::default_instance_ = NULL;

ClimTowerRpcChallengeAsk* ClimTowerRpcChallengeAsk::New() const {
  return new ClimTowerRpcChallengeAsk;
}

void ClimTowerRpcChallengeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcChallengeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Layer = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcChallengeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Layer = 1 [default = 1];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcChallengeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Layer = 1 [default = 1];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcChallengeAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Layer = 1 [default = 1];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcChallengeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcChallengeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcChallengeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcChallengeAsk::MergeFrom(const ClimTowerRpcChallengeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcChallengeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcChallengeAsk::CopyFrom(const ClimTowerRpcChallengeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcChallengeAsk::IsInitialized() const {

  return true;
}

void ClimTowerRpcChallengeAsk::Swap(ClimTowerRpcChallengeAsk* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcChallengeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcChallengeAsk_descriptor_;
  metadata.reflection = ClimTowerRpcChallengeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcChallengeReply::kResultFieldNumber;
const int ClimTowerRpcChallengeReply::kDungeonIdFieldNumber;
const int ClimTowerRpcChallengeReply::kSceneIdFieldNumber;
const int ClimTowerRpcChallengeReply::kWayPointFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcChallengeReply::ClimTowerRpcChallengeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcChallengeReply::InitAsDefaultInstance() {
}

ClimTowerRpcChallengeReply::ClimTowerRpcChallengeReply(const ClimTowerRpcChallengeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcChallengeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  dungeonid_ = -1;
  sceneid_ = -1;
  waypoint_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcChallengeReply::~ClimTowerRpcChallengeReply() {
  SharedDtor();
}

void ClimTowerRpcChallengeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcChallengeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcChallengeReply_descriptor_;
}

const ClimTowerRpcChallengeReply& ClimTowerRpcChallengeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcChallengeReply* ClimTowerRpcChallengeReply::default_instance_ = NULL;

ClimTowerRpcChallengeReply* ClimTowerRpcChallengeReply::New() const {
  return new ClimTowerRpcChallengeReply;
}

void ClimTowerRpcChallengeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    dungeonid_ = -1;
    sceneid_ = -1;
    waypoint_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcChallengeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonId;
        break;
      }

      // optional int32 DungeonId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WayPoint;
        break;
      }

      // optional int32 WayPoint = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WayPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waypoint_)));
          set_has_waypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcChallengeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 DungeonId = 2 [default = -1];
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeonid(), output);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->waypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcChallengeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 DungeonId = 2 [default = -1];
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeonid(), target);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // optional int32 WayPoint = 4 [default = -1];
  if (has_waypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->waypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcChallengeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 DungeonId = 2 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }

    // optional int32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 WayPoint = 4 [default = -1];
    if (has_waypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waypoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcChallengeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcChallengeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcChallengeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcChallengeReply::MergeFrom(const ClimTowerRpcChallengeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_waypoint()) {
      set_waypoint(from.waypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcChallengeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcChallengeReply::CopyFrom(const ClimTowerRpcChallengeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcChallengeReply::IsInitialized() const {

  return true;
}

void ClimTowerRpcChallengeReply::Swap(ClimTowerRpcChallengeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(waypoint_, other->waypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcChallengeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcChallengeReply_descriptor_;
  metadata.reflection = ClimTowerRpcChallengeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClimTowerRpcEnterAsk::ClimTowerRpcEnterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcEnterAsk::InitAsDefaultInstance() {
}

ClimTowerRpcEnterAsk::ClimTowerRpcEnterAsk(const ClimTowerRpcEnterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcEnterAsk::~ClimTowerRpcEnterAsk() {
  SharedDtor();
}

void ClimTowerRpcEnterAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcEnterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcEnterAsk_descriptor_;
}

const ClimTowerRpcEnterAsk& ClimTowerRpcEnterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcEnterAsk* ClimTowerRpcEnterAsk::default_instance_ = NULL;

ClimTowerRpcEnterAsk* ClimTowerRpcEnterAsk::New() const {
  return new ClimTowerRpcEnterAsk;
}

void ClimTowerRpcEnterAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClimTowerRpcEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcEnterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcEnterAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcEnterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcEnterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcEnterAsk::MergeFrom(const ClimTowerRpcEnterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcEnterAsk::CopyFrom(const ClimTowerRpcEnterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcEnterAsk::IsInitialized() const {

  return true;
}

void ClimTowerRpcEnterAsk::Swap(ClimTowerRpcEnterAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcEnterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcEnterAsk_descriptor_;
  metadata.reflection = ClimTowerRpcEnterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcEnterReply::kResultFieldNumber;
const int ClimTowerRpcEnterReply::kEnterInfoFieldNumber;
const int ClimTowerRpcEnterReply::kRemainTimesFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcEnterReply::ClimTowerRpcEnterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcEnterReply::InitAsDefaultInstance() {
  enterinfo_ = const_cast< ::ClimTowerInfo*>(&::ClimTowerInfo::default_instance());
}

ClimTowerRpcEnterReply::ClimTowerRpcEnterReply(const ClimTowerRpcEnterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcEnterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  enterinfo_ = NULL;
  remaintimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcEnterReply::~ClimTowerRpcEnterReply() {
  SharedDtor();
}

void ClimTowerRpcEnterReply::SharedDtor() {
  if (this != default_instance_) {
    delete enterinfo_;
  }
}

void ClimTowerRpcEnterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcEnterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcEnterReply_descriptor_;
}

const ClimTowerRpcEnterReply& ClimTowerRpcEnterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcEnterReply* ClimTowerRpcEnterReply::default_instance_ = NULL;

ClimTowerRpcEnterReply* ClimTowerRpcEnterReply::New() const {
  return new ClimTowerRpcEnterReply;
}

void ClimTowerRpcEnterReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_enterinfo()) {
      if (enterinfo_ != NULL) enterinfo_->::ClimTowerInfo::Clear();
    }
    remaintimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcEnterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EnterInfo;
        break;
      }

      // optional .ClimTowerInfo EnterInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EnterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RemainTimes;
        break;
      }

      // optional int32 RemainTimes = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintimes_)));
          set_has_remaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcEnterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ClimTowerInfo EnterInfo = 2;
  if (has_enterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enterinfo(), output);
  }

  // optional int32 RemainTimes = 3 [default = 0];
  if (has_remaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaintimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcEnterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ClimTowerInfo EnterInfo = 2;
  if (has_enterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enterinfo(), target);
  }

  // optional int32 RemainTimes = 3 [default = 0];
  if (has_remaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaintimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcEnterReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ClimTowerInfo EnterInfo = 2;
    if (has_enterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterinfo());
    }

    // optional int32 RemainTimes = 3 [default = 0];
    if (has_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcEnterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcEnterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcEnterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcEnterReply::MergeFrom(const ClimTowerRpcEnterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_enterinfo()) {
      mutable_enterinfo()->::ClimTowerInfo::MergeFrom(from.enterinfo());
    }
    if (from.has_remaintimes()) {
      set_remaintimes(from.remaintimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcEnterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcEnterReply::CopyFrom(const ClimTowerRpcEnterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcEnterReply::IsInitialized() const {

  return true;
}

void ClimTowerRpcEnterReply::Swap(ClimTowerRpcEnterReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(enterinfo_, other->enterinfo_);
    std::swap(remaintimes_, other->remaintimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcEnterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcEnterReply_descriptor_;
  metadata.reflection = ClimTowerRpcEnterReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClimTowerRpcRankAsk::ClimTowerRpcRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcRankAsk::InitAsDefaultInstance() {
}

ClimTowerRpcRankAsk::ClimTowerRpcRankAsk(const ClimTowerRpcRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcRankAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcRankAsk::~ClimTowerRpcRankAsk() {
  SharedDtor();
}

void ClimTowerRpcRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcRankAsk_descriptor_;
}

const ClimTowerRpcRankAsk& ClimTowerRpcRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcRankAsk* ClimTowerRpcRankAsk::default_instance_ = NULL;

ClimTowerRpcRankAsk* ClimTowerRpcRankAsk::New() const {
  return new ClimTowerRpcRankAsk;
}

void ClimTowerRpcRankAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClimTowerRpcRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcRankAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcRankAsk::MergeFrom(const ClimTowerRpcRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcRankAsk::CopyFrom(const ClimTowerRpcRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcRankAsk::IsInitialized() const {

  return true;
}

void ClimTowerRpcRankAsk::Swap(ClimTowerRpcRankAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcRankAsk_descriptor_;
  metadata.reflection = ClimTowerRpcRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcRankReply::kResultFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcRankReply::ClimTowerRpcRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcRankReply::InitAsDefaultInstance() {
}

ClimTowerRpcRankReply::ClimTowerRpcRankReply(const ClimTowerRpcRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcRankReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcRankReply::~ClimTowerRpcRankReply() {
  SharedDtor();
}

void ClimTowerRpcRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcRankReply_descriptor_;
}

const ClimTowerRpcRankReply& ClimTowerRpcRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcRankReply* ClimTowerRpcRankReply::default_instance_ = NULL;

ClimTowerRpcRankReply* ClimTowerRpcRankReply::New() const {
  return new ClimTowerRpcRankReply;
}

void ClimTowerRpcRankReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcRankReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcRankReply::MergeFrom(const ClimTowerRpcRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcRankReply::CopyFrom(const ClimTowerRpcRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcRankReply::IsInitialized() const {

  return true;
}

void ClimTowerRpcRankReply::Swap(ClimTowerRpcRankReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcRankReply_descriptor_;
  metadata.reflection = ClimTowerRpcRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcFirstVicRewardAsk::kLayerFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcFirstVicRewardAsk::ClimTowerRpcFirstVicRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcFirstVicRewardAsk::InitAsDefaultInstance() {
}

ClimTowerRpcFirstVicRewardAsk::ClimTowerRpcFirstVicRewardAsk(const ClimTowerRpcFirstVicRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcFirstVicRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  layer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcFirstVicRewardAsk::~ClimTowerRpcFirstVicRewardAsk() {
  SharedDtor();
}

void ClimTowerRpcFirstVicRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcFirstVicRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcFirstVicRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcFirstVicRewardAsk_descriptor_;
}

const ClimTowerRpcFirstVicRewardAsk& ClimTowerRpcFirstVicRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcFirstVicRewardAsk* ClimTowerRpcFirstVicRewardAsk::default_instance_ = NULL;

ClimTowerRpcFirstVicRewardAsk* ClimTowerRpcFirstVicRewardAsk::New() const {
  return new ClimTowerRpcFirstVicRewardAsk;
}

void ClimTowerRpcFirstVicRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcFirstVicRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Layer = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcFirstVicRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Layer = 1 [default = -1];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcFirstVicRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Layer = 1 [default = -1];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcFirstVicRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Layer = 1 [default = -1];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcFirstVicRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcFirstVicRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcFirstVicRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcFirstVicRewardAsk::MergeFrom(const ClimTowerRpcFirstVicRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcFirstVicRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcFirstVicRewardAsk::CopyFrom(const ClimTowerRpcFirstVicRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcFirstVicRewardAsk::IsInitialized() const {

  return true;
}

void ClimTowerRpcFirstVicRewardAsk::Swap(ClimTowerRpcFirstVicRewardAsk* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcFirstVicRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcFirstVicRewardAsk_descriptor_;
  metadata.reflection = ClimTowerRpcFirstVicRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcFirstVicRewardReply::kResultFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcFirstVicRewardReply::ClimTowerRpcFirstVicRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcFirstVicRewardReply::InitAsDefaultInstance() {
}

ClimTowerRpcFirstVicRewardReply::ClimTowerRpcFirstVicRewardReply(const ClimTowerRpcFirstVicRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcFirstVicRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcFirstVicRewardReply::~ClimTowerRpcFirstVicRewardReply() {
  SharedDtor();
}

void ClimTowerRpcFirstVicRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcFirstVicRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcFirstVicRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcFirstVicRewardReply_descriptor_;
}

const ClimTowerRpcFirstVicRewardReply& ClimTowerRpcFirstVicRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcFirstVicRewardReply* ClimTowerRpcFirstVicRewardReply::default_instance_ = NULL;

ClimTowerRpcFirstVicRewardReply* ClimTowerRpcFirstVicRewardReply::New() const {
  return new ClimTowerRpcFirstVicRewardReply;
}

void ClimTowerRpcFirstVicRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcFirstVicRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcFirstVicRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcFirstVicRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcFirstVicRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcFirstVicRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcFirstVicRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcFirstVicRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcFirstVicRewardReply::MergeFrom(const ClimTowerRpcFirstVicRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcFirstVicRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcFirstVicRewardReply::CopyFrom(const ClimTowerRpcFirstVicRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcFirstVicRewardReply::IsInitialized() const {

  return true;
}

void ClimTowerRpcFirstVicRewardReply::Swap(ClimTowerRpcFirstVicRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcFirstVicRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcFirstVicRewardReply_descriptor_;
  metadata.reflection = ClimTowerRpcFirstVicRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcNextLayerNotify::kCurLayerFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcNextLayerNotify::ClimTowerRpcNextLayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcNextLayerNotify::InitAsDefaultInstance() {
}

ClimTowerRpcNextLayerNotify::ClimTowerRpcNextLayerNotify(const ClimTowerRpcNextLayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcNextLayerNotify::SharedCtor() {
  _cached_size_ = 0;
  curlayer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcNextLayerNotify::~ClimTowerRpcNextLayerNotify() {
  SharedDtor();
}

void ClimTowerRpcNextLayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcNextLayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcNextLayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcNextLayerNotify_descriptor_;
}

const ClimTowerRpcNextLayerNotify& ClimTowerRpcNextLayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcNextLayerNotify* ClimTowerRpcNextLayerNotify::default_instance_ = NULL;

ClimTowerRpcNextLayerNotify* ClimTowerRpcNextLayerNotify::New() const {
  return new ClimTowerRpcNextLayerNotify;
}

void ClimTowerRpcNextLayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curlayer_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcNextLayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CurLayer = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlayer_)));
          set_has_curlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcNextLayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CurLayer = 1 [default = -1];
  if (has_curlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcNextLayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CurLayer = 1 [default = -1];
  if (has_curlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcNextLayerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CurLayer = 1 [default = -1];
    if (has_curlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcNextLayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcNextLayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcNextLayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcNextLayerNotify::MergeFrom(const ClimTowerRpcNextLayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curlayer()) {
      set_curlayer(from.curlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcNextLayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcNextLayerNotify::CopyFrom(const ClimTowerRpcNextLayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcNextLayerNotify::IsInitialized() const {

  return true;
}

void ClimTowerRpcNextLayerNotify::Swap(ClimTowerRpcNextLayerNotify* other) {
  if (other != this) {
    std::swap(curlayer_, other->curlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcNextLayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcNextLayerNotify_descriptor_;
  metadata.reflection = ClimTowerRpcNextLayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClimTowerRpcChallengeEndNotify::ClimTowerRpcChallengeEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcChallengeEndNotify::InitAsDefaultInstance() {
}

ClimTowerRpcChallengeEndNotify::ClimTowerRpcChallengeEndNotify(const ClimTowerRpcChallengeEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcChallengeEndNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcChallengeEndNotify::~ClimTowerRpcChallengeEndNotify() {
  SharedDtor();
}

void ClimTowerRpcChallengeEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcChallengeEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcChallengeEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcChallengeEndNotify_descriptor_;
}

const ClimTowerRpcChallengeEndNotify& ClimTowerRpcChallengeEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcChallengeEndNotify* ClimTowerRpcChallengeEndNotify::default_instance_ = NULL;

ClimTowerRpcChallengeEndNotify* ClimTowerRpcChallengeEndNotify::New() const {
  return new ClimTowerRpcChallengeEndNotify;
}

void ClimTowerRpcChallengeEndNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcChallengeEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClimTowerRpcChallengeEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcChallengeEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcChallengeEndNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcChallengeEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcChallengeEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcChallengeEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcChallengeEndNotify::MergeFrom(const ClimTowerRpcChallengeEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcChallengeEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcChallengeEndNotify::CopyFrom(const ClimTowerRpcChallengeEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcChallengeEndNotify::IsInitialized() const {

  return true;
}

void ClimTowerRpcChallengeEndNotify::Swap(ClimTowerRpcChallengeEndNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcChallengeEndNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcChallengeEndNotify_descriptor_;
  metadata.reflection = ClimTowerRpcChallengeEndNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerRpcWaveRefreshNotify::kAllWavesFieldNumber;
const int ClimTowerRpcWaveRefreshNotify::kCurWaveFieldNumber;
#endif  // !_MSC_VER

ClimTowerRpcWaveRefreshNotify::ClimTowerRpcWaveRefreshNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerRpcWaveRefreshNotify::InitAsDefaultInstance() {
}

ClimTowerRpcWaveRefreshNotify::ClimTowerRpcWaveRefreshNotify(const ClimTowerRpcWaveRefreshNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerRpcWaveRefreshNotify::SharedCtor() {
  _cached_size_ = 0;
  allwaves_ = -1;
  curwave_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerRpcWaveRefreshNotify::~ClimTowerRpcWaveRefreshNotify() {
  SharedDtor();
}

void ClimTowerRpcWaveRefreshNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerRpcWaveRefreshNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerRpcWaveRefreshNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerRpcWaveRefreshNotify_descriptor_;
}

const ClimTowerRpcWaveRefreshNotify& ClimTowerRpcWaveRefreshNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClimTowerRpc_2eproto();
  return *default_instance_;
}

ClimTowerRpcWaveRefreshNotify* ClimTowerRpcWaveRefreshNotify::default_instance_ = NULL;

ClimTowerRpcWaveRefreshNotify* ClimTowerRpcWaveRefreshNotify::New() const {
  return new ClimTowerRpcWaveRefreshNotify;
}

void ClimTowerRpcWaveRefreshNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allwaves_ = -1;
    curwave_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerRpcWaveRefreshNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AllWaves = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allwaves_)));
          set_has_allwaves();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurWave;
        break;
      }

      // optional int32 CurWave = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurWave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curwave_)));
          set_has_curwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerRpcWaveRefreshNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AllWaves = 1 [default = -1];
  if (has_allwaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allwaves(), output);
  }

  // optional int32 CurWave = 2 [default = -1];
  if (has_curwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curwave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerRpcWaveRefreshNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AllWaves = 1 [default = -1];
  if (has_allwaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allwaves(), target);
  }

  // optional int32 CurWave = 2 [default = -1];
  if (has_curwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curwave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerRpcWaveRefreshNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AllWaves = 1 [default = -1];
    if (has_allwaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allwaves());
    }

    // optional int32 CurWave = 2 [default = -1];
    if (has_curwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curwave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerRpcWaveRefreshNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerRpcWaveRefreshNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerRpcWaveRefreshNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerRpcWaveRefreshNotify::MergeFrom(const ClimTowerRpcWaveRefreshNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allwaves()) {
      set_allwaves(from.allwaves());
    }
    if (from.has_curwave()) {
      set_curwave(from.curwave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerRpcWaveRefreshNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerRpcWaveRefreshNotify::CopyFrom(const ClimTowerRpcWaveRefreshNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerRpcWaveRefreshNotify::IsInitialized() const {

  return true;
}

void ClimTowerRpcWaveRefreshNotify::Swap(ClimTowerRpcWaveRefreshNotify* other) {
  if (other != this) {
    std::swap(allwaves_, other->allwaves_);
    std::swap(curwave_, other->curwave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerRpcWaveRefreshNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerRpcWaveRefreshNotify_descriptor_;
  metadata.reflection = ClimTowerRpcWaveRefreshNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
