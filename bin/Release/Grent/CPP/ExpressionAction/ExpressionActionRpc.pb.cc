// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExpressionActionRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExpressionActionRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExpressionActionRpcSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcSetWheelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcSetWheelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcSetWheelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcSetWheelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcUseActionAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcUseActionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionRpcUseActionNotifyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExpressionActionRpc_2eproto() {
  protobuf_AddDesc_ExpressionActionRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExpressionActionRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ExpressionActionRpcSyncAsk_descriptor_ = file->message_type(0);
  static const int ExpressionActionRpcSyncAsk_offsets_[1] = {
  };
  ExpressionActionRpcSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcSyncAsk_descriptor_,
      ExpressionActionRpcSyncAsk::default_instance_,
      ExpressionActionRpcSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcSyncAsk));
  ExpressionActionRpcSyncReply_descriptor_ = file->message_type(1);
  static const int ExpressionActionRpcSyncReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncReply, expressionactionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncReply, expressionwheellist_),
  };
  ExpressionActionRpcSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcSyncReply_descriptor_,
      ExpressionActionRpcSyncReply::default_instance_,
      ExpressionActionRpcSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcSyncReply));
  ExpressionActionRpcSetWheelAsk_descriptor_ = file->message_type(2);
  static const int ExpressionActionRpcSetWheelAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelAsk, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelAsk, actionid_),
  };
  ExpressionActionRpcSetWheelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcSetWheelAsk_descriptor_,
      ExpressionActionRpcSetWheelAsk::default_instance_,
      ExpressionActionRpcSetWheelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcSetWheelAsk));
  ExpressionActionRpcSetWheelReply_descriptor_ = file->message_type(3);
  static const int ExpressionActionRpcSetWheelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelReply, wheellist_),
  };
  ExpressionActionRpcSetWheelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcSetWheelReply_descriptor_,
      ExpressionActionRpcSetWheelReply::default_instance_,
      ExpressionActionRpcSetWheelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcSetWheelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcSetWheelReply));
  ExpressionActionRpcUseActionAsk_descriptor_ = file->message_type(4);
  static const int ExpressionActionRpcUseActionAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionAsk, actionid_),
  };
  ExpressionActionRpcUseActionAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcUseActionAsk_descriptor_,
      ExpressionActionRpcUseActionAsk::default_instance_,
      ExpressionActionRpcUseActionAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcUseActionAsk));
  ExpressionActionRpcUseActionReply_descriptor_ = file->message_type(5);
  static const int ExpressionActionRpcUseActionReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionReply, result_),
  };
  ExpressionActionRpcUseActionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcUseActionReply_descriptor_,
      ExpressionActionRpcUseActionReply::default_instance_,
      ExpressionActionRpcUseActionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcUseActionReply));
  ExpressionActionRpcUseActionNotifyNotify_descriptor_ = file->message_type(6);
  static const int ExpressionActionRpcUseActionNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionNotifyNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionNotifyNotify, actionid_),
  };
  ExpressionActionRpcUseActionNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionRpcUseActionNotifyNotify_descriptor_,
      ExpressionActionRpcUseActionNotifyNotify::default_instance_,
      ExpressionActionRpcUseActionNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionRpcUseActionNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionRpcUseActionNotifyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExpressionActionRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcSyncAsk_descriptor_, &ExpressionActionRpcSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcSyncReply_descriptor_, &ExpressionActionRpcSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcSetWheelAsk_descriptor_, &ExpressionActionRpcSetWheelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcSetWheelReply_descriptor_, &ExpressionActionRpcSetWheelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcUseActionAsk_descriptor_, &ExpressionActionRpcUseActionAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcUseActionReply_descriptor_, &ExpressionActionRpcUseActionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionRpcUseActionNotifyNotify_descriptor_, &ExpressionActionRpcUseActionNotifyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExpressionActionRpc_2eproto() {
  delete ExpressionActionRpcSyncAsk::default_instance_;
  delete ExpressionActionRpcSyncAsk_reflection_;
  delete ExpressionActionRpcSyncReply::default_instance_;
  delete ExpressionActionRpcSyncReply_reflection_;
  delete ExpressionActionRpcSetWheelAsk::default_instance_;
  delete ExpressionActionRpcSetWheelAsk_reflection_;
  delete ExpressionActionRpcSetWheelReply::default_instance_;
  delete ExpressionActionRpcSetWheelReply_reflection_;
  delete ExpressionActionRpcUseActionAsk::default_instance_;
  delete ExpressionActionRpcUseActionAsk_reflection_;
  delete ExpressionActionRpcUseActionReply::default_instance_;
  delete ExpressionActionRpcUseActionReply_reflection_;
  delete ExpressionActionRpcUseActionNotifyNotify::default_instance_;
  delete ExpressionActionRpcUseActionNotifyNotify_reflection_;
}

void protobuf_AddDesc_ExpressionActionRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ExpressionActionRpc.proto\032\022PublicStruc"
    "t.proto\"\034\n\032ExpressionActionRpcSyncAsk\"\204\001"
    "\n\034ExpressionActionRpcSyncReply\022\022\n\006Result"
    "\030\001 \001(\005:\002-1\0223\n\024ExpressionActionList\030\002 \003(\013"
    "2\025.ExpressionActionInfo\022\033\n\023ExpressionWhe"
    "elList\030\003 \003(\005\"I\n\036ExpressionActionRpcSetWh"
    "eelAsk\022\021\n\005Index\030\001 \001(\005:\002-1\022\024\n\010ActionId\030\002 "
    "\001(\005:\002-1\"I\n ExpressionActionRpcSetWheelRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022\021\n\tWheelList\030\002 \003"
    "(\005\"7\n\037ExpressionActionRpcUseActionAsk\022\024\n"
    "\010ActionId\030\001 \001(\005:\002-1\"7\n!ExpressionActionR"
    "pcUseActionReply\022\022\n\006Result\030\001 \001(\005:\002-1\"S\n("
    "ExpressionActionRpcUseActionNotifyNotify"
    "\022\021\n\005ObjId\030\001 \001(\005:\002-1\022\024\n\010ActionId\030\002 \001(\005:\002-"
    "1", 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExpressionActionRpc.proto", &protobuf_RegisterTypes);
  ExpressionActionRpcSyncAsk::default_instance_ = new ExpressionActionRpcSyncAsk();
  ExpressionActionRpcSyncReply::default_instance_ = new ExpressionActionRpcSyncReply();
  ExpressionActionRpcSetWheelAsk::default_instance_ = new ExpressionActionRpcSetWheelAsk();
  ExpressionActionRpcSetWheelReply::default_instance_ = new ExpressionActionRpcSetWheelReply();
  ExpressionActionRpcUseActionAsk::default_instance_ = new ExpressionActionRpcUseActionAsk();
  ExpressionActionRpcUseActionReply::default_instance_ = new ExpressionActionRpcUseActionReply();
  ExpressionActionRpcUseActionNotifyNotify::default_instance_ = new ExpressionActionRpcUseActionNotifyNotify();
  ExpressionActionRpcSyncAsk::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcSyncReply::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcSetWheelAsk::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcSetWheelReply::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcUseActionAsk::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcUseActionReply::default_instance_->InitAsDefaultInstance();
  ExpressionActionRpcUseActionNotifyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExpressionActionRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExpressionActionRpc_2eproto {
  StaticDescriptorInitializer_ExpressionActionRpc_2eproto() {
    protobuf_AddDesc_ExpressionActionRpc_2eproto();
  }
} static_descriptor_initializer_ExpressionActionRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExpressionActionRpcSyncAsk::ExpressionActionRpcSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcSyncAsk::InitAsDefaultInstance() {
}

ExpressionActionRpcSyncAsk::ExpressionActionRpcSyncAsk(const ExpressionActionRpcSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcSyncAsk::~ExpressionActionRpcSyncAsk() {
  SharedDtor();
}

void ExpressionActionRpcSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcSyncAsk_descriptor_;
}

const ExpressionActionRpcSyncAsk& ExpressionActionRpcSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcSyncAsk* ExpressionActionRpcSyncAsk::default_instance_ = NULL;

ExpressionActionRpcSyncAsk* ExpressionActionRpcSyncAsk::New() const {
  return new ExpressionActionRpcSyncAsk;
}

void ExpressionActionRpcSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ExpressionActionRpcSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcSyncAsk::MergeFrom(const ExpressionActionRpcSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcSyncAsk::CopyFrom(const ExpressionActionRpcSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcSyncAsk::IsInitialized() const {

  return true;
}

void ExpressionActionRpcSyncAsk::Swap(ExpressionActionRpcSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcSyncAsk_descriptor_;
  metadata.reflection = ExpressionActionRpcSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcSyncReply::kResultFieldNumber;
const int ExpressionActionRpcSyncReply::kExpressionActionListFieldNumber;
const int ExpressionActionRpcSyncReply::kExpressionWheelListFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcSyncReply::ExpressionActionRpcSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcSyncReply::InitAsDefaultInstance() {
}

ExpressionActionRpcSyncReply::ExpressionActionRpcSyncReply(const ExpressionActionRpcSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcSyncReply::~ExpressionActionRpcSyncReply() {
  SharedDtor();
}

void ExpressionActionRpcSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcSyncReply_descriptor_;
}

const ExpressionActionRpcSyncReply& ExpressionActionRpcSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcSyncReply* ExpressionActionRpcSyncReply::default_instance_ = NULL;

ExpressionActionRpcSyncReply* ExpressionActionRpcSyncReply::New() const {
  return new ExpressionActionRpcSyncReply;
}

void ExpressionActionRpcSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  expressionactionlist_.Clear();
  expressionwheellist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExpressionActionList;
        break;
      }

      // repeated .ExpressionActionInfo ExpressionActionList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExpressionActionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expressionactionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExpressionActionList;
        if (input->ExpectTag(24)) goto parse_ExpressionWheelList;
        break;
      }

      // repeated int32 ExpressionWheelList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpressionWheelList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_expressionwheellist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_expressionwheellist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ExpressionWheelList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ExpressionActionInfo ExpressionActionList = 2;
  for (int i = 0; i < this->expressionactionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expressionactionlist(i), output);
  }

  // repeated int32 ExpressionWheelList = 3;
  for (int i = 0; i < this->expressionwheellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->expressionwheellist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ExpressionActionInfo ExpressionActionList = 2;
  for (int i = 0; i < this->expressionactionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expressionactionlist(i), target);
  }

  // repeated int32 ExpressionWheelList = 3;
  for (int i = 0; i < this->expressionwheellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->expressionwheellist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ExpressionActionInfo ExpressionActionList = 2;
  total_size += 1 * this->expressionactionlist_size();
  for (int i = 0; i < this->expressionactionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expressionactionlist(i));
  }

  // repeated int32 ExpressionWheelList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->expressionwheellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->expressionwheellist(i));
    }
    total_size += 1 * this->expressionwheellist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcSyncReply::MergeFrom(const ExpressionActionRpcSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  expressionactionlist_.MergeFrom(from.expressionactionlist_);
  expressionwheellist_.MergeFrom(from.expressionwheellist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcSyncReply::CopyFrom(const ExpressionActionRpcSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcSyncReply::IsInitialized() const {

  return true;
}

void ExpressionActionRpcSyncReply::Swap(ExpressionActionRpcSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    expressionactionlist_.Swap(&other->expressionactionlist_);
    expressionwheellist_.Swap(&other->expressionwheellist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcSyncReply_descriptor_;
  metadata.reflection = ExpressionActionRpcSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcSetWheelAsk::kIndexFieldNumber;
const int ExpressionActionRpcSetWheelAsk::kActionIdFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcSetWheelAsk::ExpressionActionRpcSetWheelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcSetWheelAsk::InitAsDefaultInstance() {
}

ExpressionActionRpcSetWheelAsk::ExpressionActionRpcSetWheelAsk(const ExpressionActionRpcSetWheelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcSetWheelAsk::SharedCtor() {
  _cached_size_ = 0;
  index_ = -1;
  actionid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcSetWheelAsk::~ExpressionActionRpcSetWheelAsk() {
  SharedDtor();
}

void ExpressionActionRpcSetWheelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcSetWheelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcSetWheelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcSetWheelAsk_descriptor_;
}

const ExpressionActionRpcSetWheelAsk& ExpressionActionRpcSetWheelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcSetWheelAsk* ExpressionActionRpcSetWheelAsk::default_instance_ = NULL;

ExpressionActionRpcSetWheelAsk* ExpressionActionRpcSetWheelAsk::New() const {
  return new ExpressionActionRpcSetWheelAsk;
}

void ExpressionActionRpcSetWheelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = -1;
    actionid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcSetWheelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActionId;
        break;
      }

      // optional int32 ActionId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcSetWheelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 ActionId = 2 [default = -1];
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcSetWheelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 ActionId = 2 [default = -1];
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcSetWheelAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 ActionId = 2 [default = -1];
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcSetWheelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcSetWheelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcSetWheelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcSetWheelAsk::MergeFrom(const ExpressionActionRpcSetWheelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcSetWheelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcSetWheelAsk::CopyFrom(const ExpressionActionRpcSetWheelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcSetWheelAsk::IsInitialized() const {

  return true;
}

void ExpressionActionRpcSetWheelAsk::Swap(ExpressionActionRpcSetWheelAsk* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(actionid_, other->actionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcSetWheelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcSetWheelAsk_descriptor_;
  metadata.reflection = ExpressionActionRpcSetWheelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcSetWheelReply::kResultFieldNumber;
const int ExpressionActionRpcSetWheelReply::kWheelListFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcSetWheelReply::ExpressionActionRpcSetWheelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcSetWheelReply::InitAsDefaultInstance() {
}

ExpressionActionRpcSetWheelReply::ExpressionActionRpcSetWheelReply(const ExpressionActionRpcSetWheelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcSetWheelReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcSetWheelReply::~ExpressionActionRpcSetWheelReply() {
  SharedDtor();
}

void ExpressionActionRpcSetWheelReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcSetWheelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcSetWheelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcSetWheelReply_descriptor_;
}

const ExpressionActionRpcSetWheelReply& ExpressionActionRpcSetWheelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcSetWheelReply* ExpressionActionRpcSetWheelReply::default_instance_ = NULL;

ExpressionActionRpcSetWheelReply* ExpressionActionRpcSetWheelReply::New() const {
  return new ExpressionActionRpcSetWheelReply;
}

void ExpressionActionRpcSetWheelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  wheellist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcSetWheelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WheelList;
        break;
      }

      // repeated int32 WheelList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WheelList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_wheellist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wheellist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WheelList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcSetWheelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 WheelList = 2;
  for (int i = 0; i < this->wheellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wheellist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcSetWheelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 WheelList = 2;
  for (int i = 0; i < this->wheellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wheellist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcSetWheelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 WheelList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wheellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wheellist(i));
    }
    total_size += 1 * this->wheellist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcSetWheelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcSetWheelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcSetWheelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcSetWheelReply::MergeFrom(const ExpressionActionRpcSetWheelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  wheellist_.MergeFrom(from.wheellist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcSetWheelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcSetWheelReply::CopyFrom(const ExpressionActionRpcSetWheelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcSetWheelReply::IsInitialized() const {

  return true;
}

void ExpressionActionRpcSetWheelReply::Swap(ExpressionActionRpcSetWheelReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    wheellist_.Swap(&other->wheellist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcSetWheelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcSetWheelReply_descriptor_;
  metadata.reflection = ExpressionActionRpcSetWheelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcUseActionAsk::kActionIdFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcUseActionAsk::ExpressionActionRpcUseActionAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcUseActionAsk::InitAsDefaultInstance() {
}

ExpressionActionRpcUseActionAsk::ExpressionActionRpcUseActionAsk(const ExpressionActionRpcUseActionAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionAsk::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcUseActionAsk::~ExpressionActionRpcUseActionAsk() {
  SharedDtor();
}

void ExpressionActionRpcUseActionAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcUseActionAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcUseActionAsk_descriptor_;
}

const ExpressionActionRpcUseActionAsk& ExpressionActionRpcUseActionAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcUseActionAsk* ExpressionActionRpcUseActionAsk::default_instance_ = NULL;

ExpressionActionRpcUseActionAsk* ExpressionActionRpcUseActionAsk::New() const {
  return new ExpressionActionRpcUseActionAsk;
}

void ExpressionActionRpcUseActionAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcUseActionAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ActionId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcUseActionAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ActionId = 1 [default = -1];
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcUseActionAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ActionId = 1 [default = -1];
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcUseActionAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ActionId = 1 [default = -1];
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcUseActionAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcUseActionAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcUseActionAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcUseActionAsk::MergeFrom(const ExpressionActionRpcUseActionAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcUseActionAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionAsk::CopyFrom(const ExpressionActionRpcUseActionAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcUseActionAsk::IsInitialized() const {

  return true;
}

void ExpressionActionRpcUseActionAsk::Swap(ExpressionActionRpcUseActionAsk* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcUseActionAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcUseActionAsk_descriptor_;
  metadata.reflection = ExpressionActionRpcUseActionAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcUseActionReply::kResultFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcUseActionReply::ExpressionActionRpcUseActionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcUseActionReply::InitAsDefaultInstance() {
}

ExpressionActionRpcUseActionReply::ExpressionActionRpcUseActionReply(const ExpressionActionRpcUseActionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcUseActionReply::~ExpressionActionRpcUseActionReply() {
  SharedDtor();
}

void ExpressionActionRpcUseActionReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcUseActionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcUseActionReply_descriptor_;
}

const ExpressionActionRpcUseActionReply& ExpressionActionRpcUseActionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcUseActionReply* ExpressionActionRpcUseActionReply::default_instance_ = NULL;

ExpressionActionRpcUseActionReply* ExpressionActionRpcUseActionReply::New() const {
  return new ExpressionActionRpcUseActionReply;
}

void ExpressionActionRpcUseActionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcUseActionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcUseActionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcUseActionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcUseActionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcUseActionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcUseActionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcUseActionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcUseActionReply::MergeFrom(const ExpressionActionRpcUseActionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcUseActionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionReply::CopyFrom(const ExpressionActionRpcUseActionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcUseActionReply::IsInitialized() const {

  return true;
}

void ExpressionActionRpcUseActionReply::Swap(ExpressionActionRpcUseActionReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcUseActionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcUseActionReply_descriptor_;
  metadata.reflection = ExpressionActionRpcUseActionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionRpcUseActionNotifyNotify::kObjIdFieldNumber;
const int ExpressionActionRpcUseActionNotifyNotify::kActionIdFieldNumber;
#endif  // !_MSC_VER

ExpressionActionRpcUseActionNotifyNotify::ExpressionActionRpcUseActionNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionRpcUseActionNotifyNotify::InitAsDefaultInstance() {
}

ExpressionActionRpcUseActionNotifyNotify::ExpressionActionRpcUseActionNotifyNotify(const ExpressionActionRpcUseActionNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  actionid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionRpcUseActionNotifyNotify::~ExpressionActionRpcUseActionNotifyNotify() {
  SharedDtor();
}

void ExpressionActionRpcUseActionNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionRpcUseActionNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionRpcUseActionNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionRpcUseActionNotifyNotify_descriptor_;
}

const ExpressionActionRpcUseActionNotifyNotify& ExpressionActionRpcUseActionNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpressionActionRpc_2eproto();
  return *default_instance_;
}

ExpressionActionRpcUseActionNotifyNotify* ExpressionActionRpcUseActionNotifyNotify::default_instance_ = NULL;

ExpressionActionRpcUseActionNotifyNotify* ExpressionActionRpcUseActionNotifyNotify::New() const {
  return new ExpressionActionRpcUseActionNotifyNotify;
}

void ExpressionActionRpcUseActionNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    actionid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionRpcUseActionNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActionId;
        break;
      }

      // optional int32 ActionId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionRpcUseActionNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional int32 ActionId = 2 [default = -1];
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionRpcUseActionNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional int32 ActionId = 2 [default = -1];
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionRpcUseActionNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 ActionId = 2 [default = -1];
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionRpcUseActionNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionRpcUseActionNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionRpcUseActionNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionRpcUseActionNotifyNotify::MergeFrom(const ExpressionActionRpcUseActionNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionRpcUseActionNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionRpcUseActionNotifyNotify::CopyFrom(const ExpressionActionRpcUseActionNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionRpcUseActionNotifyNotify::IsInitialized() const {

  return true;
}

void ExpressionActionRpcUseActionNotifyNotify::Swap(ExpressionActionRpcUseActionNotifyNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(actionid_, other->actionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionRpcUseActionNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionRpcUseActionNotifyNotify_descriptor_;
  metadata.reflection = ExpressionActionRpcUseActionNotifyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
