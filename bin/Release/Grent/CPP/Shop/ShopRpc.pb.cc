// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShopRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShopRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ShopRpcBuyItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopRpcBuyItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopRpcBuyItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopRpcBuyItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopRpcShopInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopRpcShopInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopRpcShopInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopRpcShopInfoReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShopRpc_2eproto() {
  protobuf_AddDesc_ShopRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShopRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ShopRpcBuyItemAsk_descriptor_ = file->message_type(0);
  static const int ShopRpcBuyItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemAsk, shopitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemAsk, itemnum_),
  };
  ShopRpcBuyItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopRpcBuyItemAsk_descriptor_,
      ShopRpcBuyItemAsk::default_instance_,
      ShopRpcBuyItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopRpcBuyItemAsk));
  ShopRpcBuyItemReply_descriptor_ = file->message_type(1);
  static const int ShopRpcBuyItemReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemReply, iteminfo_),
  };
  ShopRpcBuyItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopRpcBuyItemReply_descriptor_,
      ShopRpcBuyItemReply::default_instance_,
      ShopRpcBuyItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcBuyItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopRpcBuyItemReply));
  ShopRpcShopInfoAsk_descriptor_ = file->message_type(2);
  static const int ShopRpcShopInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoAsk, roleid_),
  };
  ShopRpcShopInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopRpcShopInfoAsk_descriptor_,
      ShopRpcShopInfoAsk::default_instance_,
      ShopRpcShopInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopRpcShopInfoAsk));
  ShopRpcShopInfoReply_descriptor_ = file->message_type(3);
  static const int ShopRpcShopInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoReply, iteminfo_),
  };
  ShopRpcShopInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopRpcShopInfoReply_descriptor_,
      ShopRpcShopInfoReply::default_instance_,
      ShopRpcShopInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopRpcShopInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopRpcShopInfoReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShopRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopRpcBuyItemAsk_descriptor_, &ShopRpcBuyItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopRpcBuyItemReply_descriptor_, &ShopRpcBuyItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopRpcShopInfoAsk_descriptor_, &ShopRpcShopInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopRpcShopInfoReply_descriptor_, &ShopRpcShopInfoReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShopRpc_2eproto() {
  delete ShopRpcBuyItemAsk::default_instance_;
  delete ShopRpcBuyItemAsk_reflection_;
  delete ShopRpcBuyItemReply::default_instance_;
  delete ShopRpcBuyItemReply_reflection_;
  delete ShopRpcShopInfoAsk::default_instance_;
  delete ShopRpcShopInfoAsk_reflection_;
  delete ShopRpcShopInfoReply::default_instance_;
  delete ShopRpcShopInfoReply_reflection_;
}

void protobuf_AddDesc_ShopRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rShopRpc.proto\032\022PublicStruct.proto\"@\n\021S"
    "hopRpcBuyItemAsk\022\026\n\nShopItemId\030\001 \001(\005:\002-1"
    "\022\023\n\007ItemNum\030\002 \001(\005:\002-1\"F\n\023ShopRpcBuyItemR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\022\033\n\010ItemInfo\030\002 \001"
    "(\0132\t.ShopItem\"(\n\022ShopRpcShopInfoAsk\022\022\n\006R"
    "oleID\030\001 \001(\005:\002-1\"G\n\024ShopRpcShopInfoReply\022"
    "\022\n\006Result\030\001 \001(\005:\002-1\022\033\n\010ItemInfo\030\002 \003(\0132\t."
    "ShopItem", 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShopRpc.proto", &protobuf_RegisterTypes);
  ShopRpcBuyItemAsk::default_instance_ = new ShopRpcBuyItemAsk();
  ShopRpcBuyItemReply::default_instance_ = new ShopRpcBuyItemReply();
  ShopRpcShopInfoAsk::default_instance_ = new ShopRpcShopInfoAsk();
  ShopRpcShopInfoReply::default_instance_ = new ShopRpcShopInfoReply();
  ShopRpcBuyItemAsk::default_instance_->InitAsDefaultInstance();
  ShopRpcBuyItemReply::default_instance_->InitAsDefaultInstance();
  ShopRpcShopInfoAsk::default_instance_->InitAsDefaultInstance();
  ShopRpcShopInfoReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShopRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShopRpc_2eproto {
  StaticDescriptorInitializer_ShopRpc_2eproto() {
    protobuf_AddDesc_ShopRpc_2eproto();
  }
} static_descriptor_initializer_ShopRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShopRpcBuyItemAsk::kShopItemIdFieldNumber;
const int ShopRpcBuyItemAsk::kItemNumFieldNumber;
#endif  // !_MSC_VER

ShopRpcBuyItemAsk::ShopRpcBuyItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopRpcBuyItemAsk::InitAsDefaultInstance() {
}

ShopRpcBuyItemAsk::ShopRpcBuyItemAsk(const ShopRpcBuyItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopRpcBuyItemAsk::SharedCtor() {
  _cached_size_ = 0;
  shopitemid_ = -1;
  itemnum_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopRpcBuyItemAsk::~ShopRpcBuyItemAsk() {
  SharedDtor();
}

void ShopRpcBuyItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopRpcBuyItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopRpcBuyItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopRpcBuyItemAsk_descriptor_;
}

const ShopRpcBuyItemAsk& ShopRpcBuyItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopRpc_2eproto();
  return *default_instance_;
}

ShopRpcBuyItemAsk* ShopRpcBuyItemAsk::default_instance_ = NULL;

ShopRpcBuyItemAsk* ShopRpcBuyItemAsk::New() const {
  return new ShopRpcBuyItemAsk;
}

void ShopRpcBuyItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopitemid_ = -1;
    itemnum_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopRpcBuyItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ShopItemId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopitemid_)));
          set_has_shopitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }

      // optional int32 ItemNum = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopRpcBuyItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ShopItemId = 1 [default = -1];
  if (has_shopitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopitemid(), output);
  }

  // optional int32 ItemNum = 2 [default = -1];
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopRpcBuyItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ShopItemId = 1 [default = -1];
  if (has_shopitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shopitemid(), target);
  }

  // optional int32 ItemNum = 2 [default = -1];
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopRpcBuyItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ShopItemId = 1 [default = -1];
    if (has_shopitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopitemid());
    }

    // optional int32 ItemNum = 2 [default = -1];
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopRpcBuyItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopRpcBuyItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopRpcBuyItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopRpcBuyItemAsk::MergeFrom(const ShopRpcBuyItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopitemid()) {
      set_shopitemid(from.shopitemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopRpcBuyItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopRpcBuyItemAsk::CopyFrom(const ShopRpcBuyItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopRpcBuyItemAsk::IsInitialized() const {

  return true;
}

void ShopRpcBuyItemAsk::Swap(ShopRpcBuyItemAsk* other) {
  if (other != this) {
    std::swap(shopitemid_, other->shopitemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopRpcBuyItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopRpcBuyItemAsk_descriptor_;
  metadata.reflection = ShopRpcBuyItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopRpcBuyItemReply::kResultFieldNumber;
const int ShopRpcBuyItemReply::kItemInfoFieldNumber;
#endif  // !_MSC_VER

ShopRpcBuyItemReply::ShopRpcBuyItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopRpcBuyItemReply::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ShopItem*>(&::ShopItem::default_instance());
}

ShopRpcBuyItemReply::ShopRpcBuyItemReply(const ShopRpcBuyItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopRpcBuyItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopRpcBuyItemReply::~ShopRpcBuyItemReply() {
  SharedDtor();
}

void ShopRpcBuyItemReply::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void ShopRpcBuyItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopRpcBuyItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopRpcBuyItemReply_descriptor_;
}

const ShopRpcBuyItemReply& ShopRpcBuyItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopRpc_2eproto();
  return *default_instance_;
}

ShopRpcBuyItemReply* ShopRpcBuyItemReply::default_instance_ = NULL;

ShopRpcBuyItemReply* ShopRpcBuyItemReply::New() const {
  return new ShopRpcBuyItemReply;
}

void ShopRpcBuyItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ShopItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopRpcBuyItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemInfo;
        break;
      }

      // optional .ShopItem ItemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopRpcBuyItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ShopItem ItemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopRpcBuyItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ShopItem ItemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopRpcBuyItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ShopItem ItemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopRpcBuyItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopRpcBuyItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopRpcBuyItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopRpcBuyItemReply::MergeFrom(const ShopRpcBuyItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ShopItem::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopRpcBuyItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopRpcBuyItemReply::CopyFrom(const ShopRpcBuyItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopRpcBuyItemReply::IsInitialized() const {

  return true;
}

void ShopRpcBuyItemReply::Swap(ShopRpcBuyItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopRpcBuyItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopRpcBuyItemReply_descriptor_;
  metadata.reflection = ShopRpcBuyItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopRpcShopInfoAsk::kRoleIDFieldNumber;
#endif  // !_MSC_VER

ShopRpcShopInfoAsk::ShopRpcShopInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopRpcShopInfoAsk::InitAsDefaultInstance() {
}

ShopRpcShopInfoAsk::ShopRpcShopInfoAsk(const ShopRpcShopInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopRpcShopInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopRpcShopInfoAsk::~ShopRpcShopInfoAsk() {
  SharedDtor();
}

void ShopRpcShopInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopRpcShopInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopRpcShopInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopRpcShopInfoAsk_descriptor_;
}

const ShopRpcShopInfoAsk& ShopRpcShopInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopRpc_2eproto();
  return *default_instance_;
}

ShopRpcShopInfoAsk* ShopRpcShopInfoAsk::default_instance_ = NULL;

ShopRpcShopInfoAsk* ShopRpcShopInfoAsk::New() const {
  return new ShopRpcShopInfoAsk;
}

void ShopRpcShopInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopRpcShopInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopRpcShopInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopRpcShopInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopRpcShopInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopRpcShopInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopRpcShopInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopRpcShopInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopRpcShopInfoAsk::MergeFrom(const ShopRpcShopInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopRpcShopInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopRpcShopInfoAsk::CopyFrom(const ShopRpcShopInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopRpcShopInfoAsk::IsInitialized() const {

  return true;
}

void ShopRpcShopInfoAsk::Swap(ShopRpcShopInfoAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopRpcShopInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopRpcShopInfoAsk_descriptor_;
  metadata.reflection = ShopRpcShopInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopRpcShopInfoReply::kResultFieldNumber;
const int ShopRpcShopInfoReply::kItemInfoFieldNumber;
#endif  // !_MSC_VER

ShopRpcShopInfoReply::ShopRpcShopInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopRpcShopInfoReply::InitAsDefaultInstance() {
}

ShopRpcShopInfoReply::ShopRpcShopInfoReply(const ShopRpcShopInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopRpcShopInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopRpcShopInfoReply::~ShopRpcShopInfoReply() {
  SharedDtor();
}

void ShopRpcShopInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopRpcShopInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopRpcShopInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopRpcShopInfoReply_descriptor_;
}

const ShopRpcShopInfoReply& ShopRpcShopInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopRpc_2eproto();
  return *default_instance_;
}

ShopRpcShopInfoReply* ShopRpcShopInfoReply::default_instance_ = NULL;

ShopRpcShopInfoReply* ShopRpcShopInfoReply::New() const {
  return new ShopRpcShopInfoReply;
}

void ShopRpcShopInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopRpcShopInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemInfo;
        break;
      }

      // repeated .ShopItem ItemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopRpcShopInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ShopItem ItemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopRpcShopInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ShopItem ItemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopRpcShopInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ShopItem ItemInfo = 2;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopRpcShopInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopRpcShopInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopRpcShopInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopRpcShopInfoReply::MergeFrom(const ShopRpcShopInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopRpcShopInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopRpcShopInfoReply::CopyFrom(const ShopRpcShopInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopRpcShopInfoReply::IsInitialized() const {

  return true;
}

void ShopRpcShopInfoReply::Swap(ShopRpcShopInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopRpcShopInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopRpcShopInfoReply_descriptor_;
  metadata.reflection = ShopRpcShopInfoReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
