// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBossRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBossRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldBossRpcWorldBossInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRpcWorldBossInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRpcWorldBossInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossRankInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRpcWorldBossRankInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossRankInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRpcWorldBossRankInfoReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldBossRpc_2eproto() {
  protobuf_AddDesc_WorldBossRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldBossRpc.proto");
  GOOGLE_CHECK(file != NULL);
  WorldBossRpcWorldBossInfoAsk_descriptor_ = file->message_type(0);
  static const int WorldBossRpcWorldBossInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoAsk, bossid_),
  };
  WorldBossRpcWorldBossInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRpcWorldBossInfoAsk_descriptor_,
      WorldBossRpcWorldBossInfoAsk::default_instance_,
      WorldBossRpcWorldBossInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRpcWorldBossInfoAsk));
  WorldBossRpcWorldBossInfoReply_descriptor_ = file->message_type(1);
  static const int WorldBossRpcWorldBossInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoReply, worldbossinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoReply, bossid_),
  };
  WorldBossRpcWorldBossInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRpcWorldBossInfoReply_descriptor_,
      WorldBossRpcWorldBossInfoReply::default_instance_,
      WorldBossRpcWorldBossInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRpcWorldBossInfoReply));
  WorldBossRpcWorldBossRankInfoAsk_descriptor_ = file->message_type(2);
  static const int WorldBossRpcWorldBossRankInfoAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoAsk, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoAsk, occupation_),
  };
  WorldBossRpcWorldBossRankInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRpcWorldBossRankInfoAsk_descriptor_,
      WorldBossRpcWorldBossRankInfoAsk::default_instance_,
      WorldBossRpcWorldBossRankInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRpcWorldBossRankInfoAsk));
  WorldBossRpcWorldBossRankInfoReply_descriptor_ = file->message_type(3);
  static const int WorldBossRpcWorldBossRankInfoReply_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, lastkillname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, maxdamagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, myoccupationrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, myscore_),
  };
  WorldBossRpcWorldBossRankInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRpcWorldBossRankInfoReply_descriptor_,
      WorldBossRpcWorldBossRankInfoReply::default_instance_,
      WorldBossRpcWorldBossRankInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRpcWorldBossRankInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRpcWorldBossRankInfoReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldBossRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRpcWorldBossInfoAsk_descriptor_, &WorldBossRpcWorldBossInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRpcWorldBossInfoReply_descriptor_, &WorldBossRpcWorldBossInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRpcWorldBossRankInfoAsk_descriptor_, &WorldBossRpcWorldBossRankInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRpcWorldBossRankInfoReply_descriptor_, &WorldBossRpcWorldBossRankInfoReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldBossRpc_2eproto() {
  delete WorldBossRpcWorldBossInfoAsk::default_instance_;
  delete WorldBossRpcWorldBossInfoAsk_reflection_;
  delete WorldBossRpcWorldBossInfoReply::default_instance_;
  delete WorldBossRpcWorldBossInfoReply_reflection_;
  delete WorldBossRpcWorldBossRankInfoAsk::default_instance_;
  delete WorldBossRpcWorldBossRankInfoAsk_reflection_;
  delete WorldBossRpcWorldBossRankInfoReply::default_instance_;
  delete WorldBossRpcWorldBossRankInfoReply_reflection_;
}

void protobuf_AddDesc_WorldBossRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022WorldBossRpc.proto\032\022PublicStruct.proto"
    "\"2\n\034WorldBossRpcWorldBossInfoAsk\022\022\n\006Boss"
    "ID\030\002 \001(\005:\002-1\"p\n\036WorldBossRpcWorldBossInf"
    "oReply\022\022\n\006Result\030\001 \001(\005:\002-1\022&\n\016WorldBossI"
    "nfos\030\002 \003(\0132\016.WorldBossInfo\022\022\n\006BossID\030\003 \001"
    "(\005:\002-1\"N\n WorldBossRpcWorldBossRankInfoA"
    "sk\022\022\n\006BossID\030\001 \001(\005:\002-1\022\026\n\nOccupation\030\002 \001"
    "(\005:\002-1\"\376\001\n\"WorldBossRpcWorldBossRankInfo"
    "Reply\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\010RankInfo\030\002 "
    "\003(\0132\022.WorldBossRankInfo\022\024\n\014LastKillName\030"
    "\003 \001(\t\022\025\n\rMaxDamageName\030\004 \001(\t\022\022\n\006MyRank\030\005"
    " \001(\005:\002-1\022\026\n\nOccupation\030\006 \001(\005:\002-1\022\022\n\006Boss"
    "ID\030\007 \001(\005:\002-1\022\034\n\020MyOccupationRank\030\010 \001(\005:\002"
    "-1\022\023\n\007MyScore\030\t \001(\005:\002-1", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldBossRpc.proto", &protobuf_RegisterTypes);
  WorldBossRpcWorldBossInfoAsk::default_instance_ = new WorldBossRpcWorldBossInfoAsk();
  WorldBossRpcWorldBossInfoReply::default_instance_ = new WorldBossRpcWorldBossInfoReply();
  WorldBossRpcWorldBossRankInfoAsk::default_instance_ = new WorldBossRpcWorldBossRankInfoAsk();
  WorldBossRpcWorldBossRankInfoReply::default_instance_ = new WorldBossRpcWorldBossRankInfoReply();
  WorldBossRpcWorldBossInfoAsk::default_instance_->InitAsDefaultInstance();
  WorldBossRpcWorldBossInfoReply::default_instance_->InitAsDefaultInstance();
  WorldBossRpcWorldBossRankInfoAsk::default_instance_->InitAsDefaultInstance();
  WorldBossRpcWorldBossRankInfoReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBossRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBossRpc_2eproto {
  StaticDescriptorInitializer_WorldBossRpc_2eproto() {
    protobuf_AddDesc_WorldBossRpc_2eproto();
  }
} static_descriptor_initializer_WorldBossRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldBossRpcWorldBossInfoAsk::kBossIDFieldNumber;
#endif  // !_MSC_VER

WorldBossRpcWorldBossInfoAsk::WorldBossRpcWorldBossInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRpcWorldBossInfoAsk::InitAsDefaultInstance() {
}

WorldBossRpcWorldBossInfoAsk::WorldBossRpcWorldBossInfoAsk(const WorldBossRpcWorldBossInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRpcWorldBossInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRpcWorldBossInfoAsk::~WorldBossRpcWorldBossInfoAsk() {
  SharedDtor();
}

void WorldBossRpcWorldBossInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossRpcWorldBossInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRpcWorldBossInfoAsk_descriptor_;
}

const WorldBossRpcWorldBossInfoAsk& WorldBossRpcWorldBossInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossRpc_2eproto();
  return *default_instance_;
}

WorldBossRpcWorldBossInfoAsk* WorldBossRpcWorldBossInfoAsk::default_instance_ = NULL;

WorldBossRpcWorldBossInfoAsk* WorldBossRpcWorldBossInfoAsk::New() const {
  return new WorldBossRpcWorldBossInfoAsk;
}

void WorldBossRpcWorldBossInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRpcWorldBossInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BossID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRpcWorldBossInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BossID = 2 [default = -1];
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRpcWorldBossInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BossID = 2 [default = -1];
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRpcWorldBossInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BossID = 2 [default = -1];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRpcWorldBossInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRpcWorldBossInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRpcWorldBossInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRpcWorldBossInfoAsk::MergeFrom(const WorldBossRpcWorldBossInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRpcWorldBossInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRpcWorldBossInfoAsk::CopyFrom(const WorldBossRpcWorldBossInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRpcWorldBossInfoAsk::IsInitialized() const {

  return true;
}

void WorldBossRpcWorldBossInfoAsk::Swap(WorldBossRpcWorldBossInfoAsk* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRpcWorldBossInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRpcWorldBossInfoAsk_descriptor_;
  metadata.reflection = WorldBossRpcWorldBossInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRpcWorldBossInfoReply::kResultFieldNumber;
const int WorldBossRpcWorldBossInfoReply::kWorldBossInfosFieldNumber;
const int WorldBossRpcWorldBossInfoReply::kBossIDFieldNumber;
#endif  // !_MSC_VER

WorldBossRpcWorldBossInfoReply::WorldBossRpcWorldBossInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRpcWorldBossInfoReply::InitAsDefaultInstance() {
}

WorldBossRpcWorldBossInfoReply::WorldBossRpcWorldBossInfoReply(const WorldBossRpcWorldBossInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRpcWorldBossInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  bossid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRpcWorldBossInfoReply::~WorldBossRpcWorldBossInfoReply() {
  SharedDtor();
}

void WorldBossRpcWorldBossInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossRpcWorldBossInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRpcWorldBossInfoReply_descriptor_;
}

const WorldBossRpcWorldBossInfoReply& WorldBossRpcWorldBossInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossRpc_2eproto();
  return *default_instance_;
}

WorldBossRpcWorldBossInfoReply* WorldBossRpcWorldBossInfoReply::default_instance_ = NULL;

WorldBossRpcWorldBossInfoReply* WorldBossRpcWorldBossInfoReply::New() const {
  return new WorldBossRpcWorldBossInfoReply;
}

void WorldBossRpcWorldBossInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    bossid_ = -1;
  }
  worldbossinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRpcWorldBossInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WorldBossInfos;
        break;
      }

      // repeated .WorldBossInfo WorldBossInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WorldBossInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldbossinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WorldBossInfos;
        if (input->ExpectTag(24)) goto parse_BossID;
        break;
      }

      // optional int32 BossID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRpcWorldBossInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .WorldBossInfo WorldBossInfos = 2;
  for (int i = 0; i < this->worldbossinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->worldbossinfos(i), output);
  }

  // optional int32 BossID = 3 [default = -1];
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRpcWorldBossInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .WorldBossInfo WorldBossInfos = 2;
  for (int i = 0; i < this->worldbossinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worldbossinfos(i), target);
  }

  // optional int32 BossID = 3 [default = -1];
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRpcWorldBossInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 BossID = 3 [default = -1];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  // repeated .WorldBossInfo WorldBossInfos = 2;
  total_size += 1 * this->worldbossinfos_size();
  for (int i = 0; i < this->worldbossinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldbossinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRpcWorldBossInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRpcWorldBossInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRpcWorldBossInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRpcWorldBossInfoReply::MergeFrom(const WorldBossRpcWorldBossInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldbossinfos_.MergeFrom(from.worldbossinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRpcWorldBossInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRpcWorldBossInfoReply::CopyFrom(const WorldBossRpcWorldBossInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRpcWorldBossInfoReply::IsInitialized() const {

  return true;
}

void WorldBossRpcWorldBossInfoReply::Swap(WorldBossRpcWorldBossInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    worldbossinfos_.Swap(&other->worldbossinfos_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRpcWorldBossInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRpcWorldBossInfoReply_descriptor_;
  metadata.reflection = WorldBossRpcWorldBossInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRpcWorldBossRankInfoAsk::kBossIDFieldNumber;
const int WorldBossRpcWorldBossRankInfoAsk::kOccupationFieldNumber;
#endif  // !_MSC_VER

WorldBossRpcWorldBossRankInfoAsk::WorldBossRpcWorldBossRankInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRpcWorldBossRankInfoAsk::InitAsDefaultInstance() {
}

WorldBossRpcWorldBossRankInfoAsk::WorldBossRpcWorldBossRankInfoAsk(const WorldBossRpcWorldBossRankInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRpcWorldBossRankInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = -1;
  occupation_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRpcWorldBossRankInfoAsk::~WorldBossRpcWorldBossRankInfoAsk() {
  SharedDtor();
}

void WorldBossRpcWorldBossRankInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossRpcWorldBossRankInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossRankInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRpcWorldBossRankInfoAsk_descriptor_;
}

const WorldBossRpcWorldBossRankInfoAsk& WorldBossRpcWorldBossRankInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossRpc_2eproto();
  return *default_instance_;
}

WorldBossRpcWorldBossRankInfoAsk* WorldBossRpcWorldBossRankInfoAsk::default_instance_ = NULL;

WorldBossRpcWorldBossRankInfoAsk* WorldBossRpcWorldBossRankInfoAsk::New() const {
  return new WorldBossRpcWorldBossRankInfoAsk;
}

void WorldBossRpcWorldBossRankInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = -1;
    occupation_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRpcWorldBossRankInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BossID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Occupation;
        break;
      }

      // optional int32 Occupation = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRpcWorldBossRankInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BossID = 1 [default = -1];
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->occupation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRpcWorldBossRankInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BossID = 1 [default = -1];
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->occupation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRpcWorldBossRankInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BossID = 1 [default = -1];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional int32 Occupation = 2 [default = -1];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRpcWorldBossRankInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRpcWorldBossRankInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRpcWorldBossRankInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRpcWorldBossRankInfoAsk::MergeFrom(const WorldBossRpcWorldBossRankInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRpcWorldBossRankInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRpcWorldBossRankInfoAsk::CopyFrom(const WorldBossRpcWorldBossRankInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRpcWorldBossRankInfoAsk::IsInitialized() const {

  return true;
}

void WorldBossRpcWorldBossRankInfoAsk::Swap(WorldBossRpcWorldBossRankInfoAsk* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(occupation_, other->occupation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRpcWorldBossRankInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRpcWorldBossRankInfoAsk_descriptor_;
  metadata.reflection = WorldBossRpcWorldBossRankInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRpcWorldBossRankInfoReply::kResultFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kRankInfoFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kLastKillNameFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kMaxDamageNameFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kMyRankFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kOccupationFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kBossIDFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kMyOccupationRankFieldNumber;
const int WorldBossRpcWorldBossRankInfoReply::kMyScoreFieldNumber;
#endif  // !_MSC_VER

WorldBossRpcWorldBossRankInfoReply::WorldBossRpcWorldBossRankInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRpcWorldBossRankInfoReply::InitAsDefaultInstance() {
}

WorldBossRpcWorldBossRankInfoReply::WorldBossRpcWorldBossRankInfoReply(const WorldBossRpcWorldBossRankInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRpcWorldBossRankInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  lastkillname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxdamagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myrank_ = -1;
  occupation_ = -1;
  bossid_ = -1;
  myoccupationrank_ = -1;
  myscore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRpcWorldBossRankInfoReply::~WorldBossRpcWorldBossRankInfoReply() {
  SharedDtor();
}

void WorldBossRpcWorldBossRankInfoReply::SharedDtor() {
  if (lastkillname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastkillname_;
  }
  if (maxdamagename_ != &::google::protobuf::internal::kEmptyString) {
    delete maxdamagename_;
  }
  if (this != default_instance_) {
  }
}

void WorldBossRpcWorldBossRankInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRpcWorldBossRankInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRpcWorldBossRankInfoReply_descriptor_;
}

const WorldBossRpcWorldBossRankInfoReply& WorldBossRpcWorldBossRankInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossRpc_2eproto();
  return *default_instance_;
}

WorldBossRpcWorldBossRankInfoReply* WorldBossRpcWorldBossRankInfoReply::default_instance_ = NULL;

WorldBossRpcWorldBossRankInfoReply* WorldBossRpcWorldBossRankInfoReply::New() const {
  return new WorldBossRpcWorldBossRankInfoReply;
}

void WorldBossRpcWorldBossRankInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_lastkillname()) {
      if (lastkillname_ != &::google::protobuf::internal::kEmptyString) {
        lastkillname_->clear();
      }
    }
    if (has_maxdamagename()) {
      if (maxdamagename_ != &::google::protobuf::internal::kEmptyString) {
        maxdamagename_->clear();
      }
    }
    myrank_ = -1;
    occupation_ = -1;
    bossid_ = -1;
    myoccupationrank_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    myscore_ = -1;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRpcWorldBossRankInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankInfo;
        break;
      }

      // repeated .WorldBossRankInfo RankInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankInfo;
        if (input->ExpectTag(26)) goto parse_LastKillName;
        break;
      }

      // optional string LastKillName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastKillName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastkillname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastkillname().data(), this->lastkillname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MaxDamageName;
        break;
      }

      // optional string MaxDamageName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaxDamageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxdamagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxdamagename().data(), this->maxdamagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Occupation;
        break;
      }

      // optional int32 Occupation = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BossID;
        break;
      }

      // optional int32 BossID = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MyOccupationRank;
        break;
      }

      // optional int32 MyOccupationRank = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyOccupationRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myoccupationrank_)));
          set_has_myoccupationrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MyScore;
        break;
      }

      // optional int32 MyScore = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myscore_)));
          set_has_myscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRpcWorldBossRankInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .WorldBossRankInfo RankInfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankinfo(i), output);
  }

  // optional string LastKillName = 3;
  if (has_lastkillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastkillname().data(), this->lastkillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastkillname(), output);
  }

  // optional string MaxDamageName = 4;
  if (has_maxdamagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxdamagename().data(), this->maxdamagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->maxdamagename(), output);
  }

  // optional int32 MyRank = 5 [default = -1];
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->myrank(), output);
  }

  // optional int32 Occupation = 6 [default = -1];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->occupation(), output);
  }

  // optional int32 BossID = 7 [default = -1];
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bossid(), output);
  }

  // optional int32 MyOccupationRank = 8 [default = -1];
  if (has_myoccupationrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->myoccupationrank(), output);
  }

  // optional int32 MyScore = 9 [default = -1];
  if (has_myscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->myscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRpcWorldBossRankInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .WorldBossRankInfo RankInfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankinfo(i), target);
  }

  // optional string LastKillName = 3;
  if (has_lastkillname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastkillname().data(), this->lastkillname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastkillname(), target);
  }

  // optional string MaxDamageName = 4;
  if (has_maxdamagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxdamagename().data(), this->maxdamagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->maxdamagename(), target);
  }

  // optional int32 MyRank = 5 [default = -1];
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->myrank(), target);
  }

  // optional int32 Occupation = 6 [default = -1];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->occupation(), target);
  }

  // optional int32 BossID = 7 [default = -1];
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bossid(), target);
  }

  // optional int32 MyOccupationRank = 8 [default = -1];
  if (has_myoccupationrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->myoccupationrank(), target);
  }

  // optional int32 MyScore = 9 [default = -1];
  if (has_myscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->myscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRpcWorldBossRankInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string LastKillName = 3;
    if (has_lastkillname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastkillname());
    }

    // optional string MaxDamageName = 4;
    if (has_maxdamagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxdamagename());
    }

    // optional int32 MyRank = 5 [default = -1];
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional int32 Occupation = 6 [default = -1];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // optional int32 BossID = 7 [default = -1];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional int32 MyOccupationRank = 8 [default = -1];
    if (has_myoccupationrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myoccupationrank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MyScore = 9 [default = -1];
    if (has_myscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myscore());
    }

  }
  // repeated .WorldBossRankInfo RankInfo = 2;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRpcWorldBossRankInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRpcWorldBossRankInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRpcWorldBossRankInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRpcWorldBossRankInfoReply::MergeFrom(const WorldBossRpcWorldBossRankInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lastkillname()) {
      set_lastkillname(from.lastkillname());
    }
    if (from.has_maxdamagename()) {
      set_maxdamagename(from.maxdamagename());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_myoccupationrank()) {
      set_myoccupationrank(from.myoccupationrank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_myscore()) {
      set_myscore(from.myscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRpcWorldBossRankInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRpcWorldBossRankInfoReply::CopyFrom(const WorldBossRpcWorldBossRankInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRpcWorldBossRankInfoReply::IsInitialized() const {

  return true;
}

void WorldBossRpcWorldBossRankInfoReply::Swap(WorldBossRpcWorldBossRankInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(lastkillname_, other->lastkillname_);
    std::swap(maxdamagename_, other->maxdamagename_);
    std::swap(myrank_, other->myrank_);
    std::swap(occupation_, other->occupation_);
    std::swap(bossid_, other->bossid_);
    std::swap(myoccupationrank_, other->myoccupationrank_);
    std::swap(myscore_, other->myscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRpcWorldBossRankInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRpcWorldBossRankInfoReply_descriptor_;
  metadata.reflection = WorldBossRpcWorldBossRankInfoReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
