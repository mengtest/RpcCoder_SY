// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JewelRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JewelRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* JewelRpcJewelSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcJewelSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcJewelSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcJewelSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcInsetJewelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcInsetJewelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcInsetJewelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcInsetJewelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcRemoveJewelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcRemoveJewelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcRemoveJewelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcRemoveJewelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcCompoundJewelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcCompoundJewelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcCompoundJewelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcCompoundJewelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcCompoundSetJewelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcCompoundSetJewelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcCompoundSetJewelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcCompoundSetJewelReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcUnlockJewelSlotAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcUnlockJewelSlotAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcUnlockJewelSlotReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcUnlockJewelSlotReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcQuickCompoundAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcQuickCompoundAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelRpcQuickCompoundReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelRpcQuickCompoundReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JewelRpc_2eproto() {
  protobuf_AddDesc_JewelRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JewelRpc.proto");
  GOOGLE_CHECK(file != NULL);
  JewelRpcJewelSyncAsk_descriptor_ = file->message_type(0);
  static const int JewelRpcJewelSyncAsk_offsets_[1] = {
  };
  JewelRpcJewelSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcJewelSyncAsk_descriptor_,
      JewelRpcJewelSyncAsk::default_instance_,
      JewelRpcJewelSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcJewelSyncAsk));
  JewelRpcJewelSyncReply_descriptor_ = file->message_type(1);
  static const int JewelRpcJewelSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncReply, jewelinfos_),
  };
  JewelRpcJewelSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcJewelSyncReply_descriptor_,
      JewelRpcJewelSyncReply::default_instance_,
      JewelRpcJewelSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcJewelSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcJewelSyncReply));
  JewelRpcInsetJewelAsk_descriptor_ = file->message_type(2);
  static const int JewelRpcInsetJewelAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelAsk, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelAsk, jewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelAsk, jewelslot_),
  };
  JewelRpcInsetJewelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcInsetJewelAsk_descriptor_,
      JewelRpcInsetJewelAsk::default_instance_,
      JewelRpcInsetJewelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcInsetJewelAsk));
  JewelRpcInsetJewelReply_descriptor_ = file->message_type(3);
  static const int JewelRpcInsetJewelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelReply, jewelinfo_),
  };
  JewelRpcInsetJewelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcInsetJewelReply_descriptor_,
      JewelRpcInsetJewelReply::default_instance_,
      JewelRpcInsetJewelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcInsetJewelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcInsetJewelReply));
  JewelRpcRemoveJewelAsk_descriptor_ = file->message_type(4);
  static const int JewelRpcRemoveJewelAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelAsk, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelAsk, jewelslot_),
  };
  JewelRpcRemoveJewelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcRemoveJewelAsk_descriptor_,
      JewelRpcRemoveJewelAsk::default_instance_,
      JewelRpcRemoveJewelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcRemoveJewelAsk));
  JewelRpcRemoveJewelReply_descriptor_ = file->message_type(5);
  static const int JewelRpcRemoveJewelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelReply, jewelinfo_),
  };
  JewelRpcRemoveJewelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcRemoveJewelReply_descriptor_,
      JewelRpcRemoveJewelReply::default_instance_,
      JewelRpcRemoveJewelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcRemoveJewelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcRemoveJewelReply));
  JewelRpcCompoundJewelAsk_descriptor_ = file->message_type(6);
  static const int JewelRpcCompoundJewelAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelAsk, jewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelAsk, usesafeitem_),
  };
  JewelRpcCompoundJewelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcCompoundJewelAsk_descriptor_,
      JewelRpcCompoundJewelAsk::default_instance_,
      JewelRpcCompoundJewelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcCompoundJewelAsk));
  JewelRpcCompoundJewelReply_descriptor_ = file->message_type(7);
  static const int JewelRpcCompoundJewelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelReply, jewelid_),
  };
  JewelRpcCompoundJewelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcCompoundJewelReply_descriptor_,
      JewelRpcCompoundJewelReply::default_instance_,
      JewelRpcCompoundJewelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundJewelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcCompoundJewelReply));
  JewelRpcCompoundSetJewelAsk_descriptor_ = file->message_type(8);
  static const int JewelRpcCompoundSetJewelAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelAsk, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelAsk, jewelslot_),
  };
  JewelRpcCompoundSetJewelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcCompoundSetJewelAsk_descriptor_,
      JewelRpcCompoundSetJewelAsk::default_instance_,
      JewelRpcCompoundSetJewelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcCompoundSetJewelAsk));
  JewelRpcCompoundSetJewelReply_descriptor_ = file->message_type(9);
  static const int JewelRpcCompoundSetJewelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelReply, jewelinfo_),
  };
  JewelRpcCompoundSetJewelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcCompoundSetJewelReply_descriptor_,
      JewelRpcCompoundSetJewelReply::default_instance_,
      JewelRpcCompoundSetJewelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcCompoundSetJewelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcCompoundSetJewelReply));
  JewelRpcUnlockJewelSlotAsk_descriptor_ = file->message_type(10);
  static const int JewelRpcUnlockJewelSlotAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotAsk, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotAsk, jewelslot_),
  };
  JewelRpcUnlockJewelSlotAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcUnlockJewelSlotAsk_descriptor_,
      JewelRpcUnlockJewelSlotAsk::default_instance_,
      JewelRpcUnlockJewelSlotAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcUnlockJewelSlotAsk));
  JewelRpcUnlockJewelSlotReply_descriptor_ = file->message_type(11);
  static const int JewelRpcUnlockJewelSlotReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotReply, jewelinfo_),
  };
  JewelRpcUnlockJewelSlotReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcUnlockJewelSlotReply_descriptor_,
      JewelRpcUnlockJewelSlotReply::default_instance_,
      JewelRpcUnlockJewelSlotReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcUnlockJewelSlotReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcUnlockJewelSlotReply));
  JewelRpcQuickCompoundAsk_descriptor_ = file->message_type(12);
  static const int JewelRpcQuickCompoundAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundAsk, jewelid_),
  };
  JewelRpcQuickCompoundAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcQuickCompoundAsk_descriptor_,
      JewelRpcQuickCompoundAsk::default_instance_,
      JewelRpcQuickCompoundAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcQuickCompoundAsk));
  JewelRpcQuickCompoundReply_descriptor_ = file->message_type(13);
  static const int JewelRpcQuickCompoundReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundReply, result_),
  };
  JewelRpcQuickCompoundReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelRpcQuickCompoundReply_descriptor_,
      JewelRpcQuickCompoundReply::default_instance_,
      JewelRpcQuickCompoundReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelRpcQuickCompoundReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelRpcQuickCompoundReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JewelRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcJewelSyncAsk_descriptor_, &JewelRpcJewelSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcJewelSyncReply_descriptor_, &JewelRpcJewelSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcInsetJewelAsk_descriptor_, &JewelRpcInsetJewelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcInsetJewelReply_descriptor_, &JewelRpcInsetJewelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcRemoveJewelAsk_descriptor_, &JewelRpcRemoveJewelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcRemoveJewelReply_descriptor_, &JewelRpcRemoveJewelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcCompoundJewelAsk_descriptor_, &JewelRpcCompoundJewelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcCompoundJewelReply_descriptor_, &JewelRpcCompoundJewelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcCompoundSetJewelAsk_descriptor_, &JewelRpcCompoundSetJewelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcCompoundSetJewelReply_descriptor_, &JewelRpcCompoundSetJewelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcUnlockJewelSlotAsk_descriptor_, &JewelRpcUnlockJewelSlotAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcUnlockJewelSlotReply_descriptor_, &JewelRpcUnlockJewelSlotReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcQuickCompoundAsk_descriptor_, &JewelRpcQuickCompoundAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelRpcQuickCompoundReply_descriptor_, &JewelRpcQuickCompoundReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JewelRpc_2eproto() {
  delete JewelRpcJewelSyncAsk::default_instance_;
  delete JewelRpcJewelSyncAsk_reflection_;
  delete JewelRpcJewelSyncReply::default_instance_;
  delete JewelRpcJewelSyncReply_reflection_;
  delete JewelRpcInsetJewelAsk::default_instance_;
  delete JewelRpcInsetJewelAsk_reflection_;
  delete JewelRpcInsetJewelReply::default_instance_;
  delete JewelRpcInsetJewelReply_reflection_;
  delete JewelRpcRemoveJewelAsk::default_instance_;
  delete JewelRpcRemoveJewelAsk_reflection_;
  delete JewelRpcRemoveJewelReply::default_instance_;
  delete JewelRpcRemoveJewelReply_reflection_;
  delete JewelRpcCompoundJewelAsk::default_instance_;
  delete JewelRpcCompoundJewelAsk_reflection_;
  delete JewelRpcCompoundJewelReply::default_instance_;
  delete JewelRpcCompoundJewelReply_reflection_;
  delete JewelRpcCompoundSetJewelAsk::default_instance_;
  delete JewelRpcCompoundSetJewelAsk_reflection_;
  delete JewelRpcCompoundSetJewelReply::default_instance_;
  delete JewelRpcCompoundSetJewelReply_reflection_;
  delete JewelRpcUnlockJewelSlotAsk::default_instance_;
  delete JewelRpcUnlockJewelSlotAsk_reflection_;
  delete JewelRpcUnlockJewelSlotReply::default_instance_;
  delete JewelRpcUnlockJewelSlotReply_reflection_;
  delete JewelRpcQuickCompoundAsk::default_instance_;
  delete JewelRpcQuickCompoundAsk_reflection_;
  delete JewelRpcQuickCompoundReply::default_instance_;
  delete JewelRpcQuickCompoundReply_reflection_;
}

void protobuf_AddDesc_JewelRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016JewelRpc.proto\032\022PublicStruct.proto\"\026\n\024"
    "JewelRpcJewelSyncAsk\"L\n\026JewelRpcJewelSyn"
    "cReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\036\n\nJewelInfos"
    "\030\002 \003(\0132\n.JewelInfo\"Z\n\025JewelRpcInsetJewel"
    "Ask\022\025\n\tEquipSlot\030\001 \001(\005:\002-1\022\023\n\007JewelId\030\002 "
    "\001(\005:\002-1\022\025\n\tJewelSlot\030\003 \001(\005:\002-1\"L\n\027JewelR"
    "pcInsetJewelReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\035\n"
    "\tJewelInfo\030\002 \001(\0132\n.JewelInfo\"F\n\026JewelRpc"
    "RemoveJewelAsk\022\025\n\tEquipSlot\030\001 \001(\005:\002-1\022\025\n"
    "\tJewelSlot\030\002 \001(\005:\002-1\"M\n\030JewelRpcRemoveJe"
    "welReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\035\n\tJewelInf"
    "o\030\002 \001(\0132\n.JewelInfo\"K\n\030JewelRpcCompoundJ"
    "ewelAsk\022\023\n\007JewelId\030\001 \001(\005:\002-1\022\032\n\013UseSafeI"
    "tem\030\002 \001(\010:\005false\"E\n\032JewelRpcCompoundJewe"
    "lReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\023\n\007JewelId\030\002 "
    "\001(\005:\002-1\"K\n\033JewelRpcCompoundSetJewelAsk\022\025"
    "\n\tEquipType\030\002 \001(\005:\002-1\022\025\n\tJewelSlot\030\003 \001(\005"
    ":\002-1\"R\n\035JewelRpcCompoundSetJewelReply\022\022\n"
    "\006Result\030\001 \001(\005:\002-1\022\035\n\tJewelInfo\030\003 \001(\0132\n.J"
    "ewelInfo\"J\n\032JewelRpcUnlockJewelSlotAsk\022\025"
    "\n\tEquipSlot\030\001 \001(\005:\002-1\022\025\n\tJewelSlot\030\002 \001(\005"
    ":\002-1\"Q\n\034JewelRpcUnlockJewelSlotReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\035\n\tJewelInfo\030\002 \001(\0132\n.Je"
    "welInfo\"/\n\030JewelRpcQuickCompoundAsk\022\023\n\007J"
    "ewelId\030\001 \001(\005:\002-1\"0\n\032JewelRpcQuickCompoun"
    "dReply\022\022\n\006Result\030\001 \001(\005:\002-1", 1026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JewelRpc.proto", &protobuf_RegisterTypes);
  JewelRpcJewelSyncAsk::default_instance_ = new JewelRpcJewelSyncAsk();
  JewelRpcJewelSyncReply::default_instance_ = new JewelRpcJewelSyncReply();
  JewelRpcInsetJewelAsk::default_instance_ = new JewelRpcInsetJewelAsk();
  JewelRpcInsetJewelReply::default_instance_ = new JewelRpcInsetJewelReply();
  JewelRpcRemoveJewelAsk::default_instance_ = new JewelRpcRemoveJewelAsk();
  JewelRpcRemoveJewelReply::default_instance_ = new JewelRpcRemoveJewelReply();
  JewelRpcCompoundJewelAsk::default_instance_ = new JewelRpcCompoundJewelAsk();
  JewelRpcCompoundJewelReply::default_instance_ = new JewelRpcCompoundJewelReply();
  JewelRpcCompoundSetJewelAsk::default_instance_ = new JewelRpcCompoundSetJewelAsk();
  JewelRpcCompoundSetJewelReply::default_instance_ = new JewelRpcCompoundSetJewelReply();
  JewelRpcUnlockJewelSlotAsk::default_instance_ = new JewelRpcUnlockJewelSlotAsk();
  JewelRpcUnlockJewelSlotReply::default_instance_ = new JewelRpcUnlockJewelSlotReply();
  JewelRpcQuickCompoundAsk::default_instance_ = new JewelRpcQuickCompoundAsk();
  JewelRpcQuickCompoundReply::default_instance_ = new JewelRpcQuickCompoundReply();
  JewelRpcJewelSyncAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcJewelSyncReply::default_instance_->InitAsDefaultInstance();
  JewelRpcInsetJewelAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcInsetJewelReply::default_instance_->InitAsDefaultInstance();
  JewelRpcRemoveJewelAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcRemoveJewelReply::default_instance_->InitAsDefaultInstance();
  JewelRpcCompoundJewelAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcCompoundJewelReply::default_instance_->InitAsDefaultInstance();
  JewelRpcCompoundSetJewelAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcCompoundSetJewelReply::default_instance_->InitAsDefaultInstance();
  JewelRpcUnlockJewelSlotAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcUnlockJewelSlotReply::default_instance_->InitAsDefaultInstance();
  JewelRpcQuickCompoundAsk::default_instance_->InitAsDefaultInstance();
  JewelRpcQuickCompoundReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JewelRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JewelRpc_2eproto {
  StaticDescriptorInitializer_JewelRpc_2eproto() {
    protobuf_AddDesc_JewelRpc_2eproto();
  }
} static_descriptor_initializer_JewelRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

JewelRpcJewelSyncAsk::JewelRpcJewelSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcJewelSyncAsk::InitAsDefaultInstance() {
}

JewelRpcJewelSyncAsk::JewelRpcJewelSyncAsk(const JewelRpcJewelSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcJewelSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcJewelSyncAsk::~JewelRpcJewelSyncAsk() {
  SharedDtor();
}

void JewelRpcJewelSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcJewelSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcJewelSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcJewelSyncAsk_descriptor_;
}

const JewelRpcJewelSyncAsk& JewelRpcJewelSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcJewelSyncAsk* JewelRpcJewelSyncAsk::default_instance_ = NULL;

JewelRpcJewelSyncAsk* JewelRpcJewelSyncAsk::New() const {
  return new JewelRpcJewelSyncAsk;
}

void JewelRpcJewelSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcJewelSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void JewelRpcJewelSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcJewelSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcJewelSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcJewelSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcJewelSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcJewelSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcJewelSyncAsk::MergeFrom(const JewelRpcJewelSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcJewelSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcJewelSyncAsk::CopyFrom(const JewelRpcJewelSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcJewelSyncAsk::IsInitialized() const {

  return true;
}

void JewelRpcJewelSyncAsk::Swap(JewelRpcJewelSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcJewelSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcJewelSyncAsk_descriptor_;
  metadata.reflection = JewelRpcJewelSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcJewelSyncReply::kResultFieldNumber;
const int JewelRpcJewelSyncReply::kJewelInfosFieldNumber;
#endif  // !_MSC_VER

JewelRpcJewelSyncReply::JewelRpcJewelSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcJewelSyncReply::InitAsDefaultInstance() {
}

JewelRpcJewelSyncReply::JewelRpcJewelSyncReply(const JewelRpcJewelSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcJewelSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcJewelSyncReply::~JewelRpcJewelSyncReply() {
  SharedDtor();
}

void JewelRpcJewelSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcJewelSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcJewelSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcJewelSyncReply_descriptor_;
}

const JewelRpcJewelSyncReply& JewelRpcJewelSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcJewelSyncReply* JewelRpcJewelSyncReply::default_instance_ = NULL;

JewelRpcJewelSyncReply* JewelRpcJewelSyncReply::New() const {
  return new JewelRpcJewelSyncReply;
}

void JewelRpcJewelSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  jewelinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcJewelSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelInfos;
        break;
      }

      // repeated .JewelInfo JewelInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jewelinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcJewelSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .JewelInfo JewelInfos = 2;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jewelinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcJewelSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .JewelInfo JewelInfos = 2;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jewelinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcJewelSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .JewelInfo JewelInfos = 2;
  total_size += 1 * this->jewelinfos_size();
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jewelinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcJewelSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcJewelSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcJewelSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcJewelSyncReply::MergeFrom(const JewelRpcJewelSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  jewelinfos_.MergeFrom(from.jewelinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcJewelSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcJewelSyncReply::CopyFrom(const JewelRpcJewelSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcJewelSyncReply::IsInitialized() const {

  return true;
}

void JewelRpcJewelSyncReply::Swap(JewelRpcJewelSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    jewelinfos_.Swap(&other->jewelinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcJewelSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcJewelSyncReply_descriptor_;
  metadata.reflection = JewelRpcJewelSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcInsetJewelAsk::kEquipSlotFieldNumber;
const int JewelRpcInsetJewelAsk::kJewelIdFieldNumber;
const int JewelRpcInsetJewelAsk::kJewelSlotFieldNumber;
#endif  // !_MSC_VER

JewelRpcInsetJewelAsk::JewelRpcInsetJewelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcInsetJewelAsk::InitAsDefaultInstance() {
}

JewelRpcInsetJewelAsk::JewelRpcInsetJewelAsk(const JewelRpcInsetJewelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcInsetJewelAsk::SharedCtor() {
  _cached_size_ = 0;
  equipslot_ = -1;
  jewelid_ = -1;
  jewelslot_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcInsetJewelAsk::~JewelRpcInsetJewelAsk() {
  SharedDtor();
}

void JewelRpcInsetJewelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcInsetJewelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcInsetJewelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcInsetJewelAsk_descriptor_;
}

const JewelRpcInsetJewelAsk& JewelRpcInsetJewelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcInsetJewelAsk* JewelRpcInsetJewelAsk::default_instance_ = NULL;

JewelRpcInsetJewelAsk* JewelRpcInsetJewelAsk::New() const {
  return new JewelRpcInsetJewelAsk;
}

void JewelRpcInsetJewelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipslot_ = -1;
    jewelid_ = -1;
    jewelslot_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcInsetJewelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipSlot = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JewelId;
        break;
      }

      // optional int32 JewelId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelid_)));
          set_has_jewelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JewelSlot;
        break;
      }

      // optional int32 JewelSlot = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelslot_)));
          set_has_jewelslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcInsetJewelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipslot(), output);
  }

  // optional int32 JewelId = 2 [default = -1];
  if (has_jewelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jewelid(), output);
  }

  // optional int32 JewelSlot = 3 [default = -1];
  if (has_jewelslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jewelslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcInsetJewelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipslot(), target);
  }

  // optional int32 JewelId = 2 [default = -1];
  if (has_jewelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jewelid(), target);
  }

  // optional int32 JewelSlot = 3 [default = -1];
  if (has_jewelslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jewelslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcInsetJewelAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipSlot = 1 [default = -1];
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipslot());
    }

    // optional int32 JewelId = 2 [default = -1];
    if (has_jewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelid());
    }

    // optional int32 JewelSlot = 3 [default = -1];
    if (has_jewelslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcInsetJewelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcInsetJewelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcInsetJewelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcInsetJewelAsk::MergeFrom(const JewelRpcInsetJewelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
    if (from.has_jewelid()) {
      set_jewelid(from.jewelid());
    }
    if (from.has_jewelslot()) {
      set_jewelslot(from.jewelslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcInsetJewelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcInsetJewelAsk::CopyFrom(const JewelRpcInsetJewelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcInsetJewelAsk::IsInitialized() const {

  return true;
}

void JewelRpcInsetJewelAsk::Swap(JewelRpcInsetJewelAsk* other) {
  if (other != this) {
    std::swap(equipslot_, other->equipslot_);
    std::swap(jewelid_, other->jewelid_);
    std::swap(jewelslot_, other->jewelslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcInsetJewelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcInsetJewelAsk_descriptor_;
  metadata.reflection = JewelRpcInsetJewelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcInsetJewelReply::kResultFieldNumber;
const int JewelRpcInsetJewelReply::kJewelInfoFieldNumber;
#endif  // !_MSC_VER

JewelRpcInsetJewelReply::JewelRpcInsetJewelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcInsetJewelReply::InitAsDefaultInstance() {
  jewelinfo_ = const_cast< ::JewelInfo*>(&::JewelInfo::default_instance());
}

JewelRpcInsetJewelReply::JewelRpcInsetJewelReply(const JewelRpcInsetJewelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcInsetJewelReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  jewelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcInsetJewelReply::~JewelRpcInsetJewelReply() {
  SharedDtor();
}

void JewelRpcInsetJewelReply::SharedDtor() {
  if (this != default_instance_) {
    delete jewelinfo_;
  }
}

void JewelRpcInsetJewelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcInsetJewelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcInsetJewelReply_descriptor_;
}

const JewelRpcInsetJewelReply& JewelRpcInsetJewelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcInsetJewelReply* JewelRpcInsetJewelReply::default_instance_ = NULL;

JewelRpcInsetJewelReply* JewelRpcInsetJewelReply::New() const {
  return new JewelRpcInsetJewelReply;
}

void JewelRpcInsetJewelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_jewelinfo()) {
      if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcInsetJewelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelInfo;
        break;
      }

      // optional .JewelInfo JewelInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jewelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcInsetJewelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jewelinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcInsetJewelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jewelinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcInsetJewelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .JewelInfo JewelInfo = 2;
    if (has_jewelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jewelinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcInsetJewelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcInsetJewelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcInsetJewelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcInsetJewelReply::MergeFrom(const JewelRpcInsetJewelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_jewelinfo()) {
      mutable_jewelinfo()->::JewelInfo::MergeFrom(from.jewelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcInsetJewelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcInsetJewelReply::CopyFrom(const JewelRpcInsetJewelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcInsetJewelReply::IsInitialized() const {

  return true;
}

void JewelRpcInsetJewelReply::Swap(JewelRpcInsetJewelReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(jewelinfo_, other->jewelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcInsetJewelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcInsetJewelReply_descriptor_;
  metadata.reflection = JewelRpcInsetJewelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcRemoveJewelAsk::kEquipSlotFieldNumber;
const int JewelRpcRemoveJewelAsk::kJewelSlotFieldNumber;
#endif  // !_MSC_VER

JewelRpcRemoveJewelAsk::JewelRpcRemoveJewelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcRemoveJewelAsk::InitAsDefaultInstance() {
}

JewelRpcRemoveJewelAsk::JewelRpcRemoveJewelAsk(const JewelRpcRemoveJewelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcRemoveJewelAsk::SharedCtor() {
  _cached_size_ = 0;
  equipslot_ = -1;
  jewelslot_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcRemoveJewelAsk::~JewelRpcRemoveJewelAsk() {
  SharedDtor();
}

void JewelRpcRemoveJewelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcRemoveJewelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcRemoveJewelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcRemoveJewelAsk_descriptor_;
}

const JewelRpcRemoveJewelAsk& JewelRpcRemoveJewelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcRemoveJewelAsk* JewelRpcRemoveJewelAsk::default_instance_ = NULL;

JewelRpcRemoveJewelAsk* JewelRpcRemoveJewelAsk::New() const {
  return new JewelRpcRemoveJewelAsk;
}

void JewelRpcRemoveJewelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipslot_ = -1;
    jewelslot_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcRemoveJewelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipSlot = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JewelSlot;
        break;
      }

      // optional int32 JewelSlot = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelslot_)));
          set_has_jewelslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcRemoveJewelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipslot(), output);
  }

  // optional int32 JewelSlot = 2 [default = -1];
  if (has_jewelslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jewelslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcRemoveJewelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipslot(), target);
  }

  // optional int32 JewelSlot = 2 [default = -1];
  if (has_jewelslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jewelslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcRemoveJewelAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipSlot = 1 [default = -1];
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipslot());
    }

    // optional int32 JewelSlot = 2 [default = -1];
    if (has_jewelslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcRemoveJewelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcRemoveJewelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcRemoveJewelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcRemoveJewelAsk::MergeFrom(const JewelRpcRemoveJewelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
    if (from.has_jewelslot()) {
      set_jewelslot(from.jewelslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcRemoveJewelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcRemoveJewelAsk::CopyFrom(const JewelRpcRemoveJewelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcRemoveJewelAsk::IsInitialized() const {

  return true;
}

void JewelRpcRemoveJewelAsk::Swap(JewelRpcRemoveJewelAsk* other) {
  if (other != this) {
    std::swap(equipslot_, other->equipslot_);
    std::swap(jewelslot_, other->jewelslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcRemoveJewelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcRemoveJewelAsk_descriptor_;
  metadata.reflection = JewelRpcRemoveJewelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcRemoveJewelReply::kResultFieldNumber;
const int JewelRpcRemoveJewelReply::kJewelInfoFieldNumber;
#endif  // !_MSC_VER

JewelRpcRemoveJewelReply::JewelRpcRemoveJewelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcRemoveJewelReply::InitAsDefaultInstance() {
  jewelinfo_ = const_cast< ::JewelInfo*>(&::JewelInfo::default_instance());
}

JewelRpcRemoveJewelReply::JewelRpcRemoveJewelReply(const JewelRpcRemoveJewelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcRemoveJewelReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  jewelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcRemoveJewelReply::~JewelRpcRemoveJewelReply() {
  SharedDtor();
}

void JewelRpcRemoveJewelReply::SharedDtor() {
  if (this != default_instance_) {
    delete jewelinfo_;
  }
}

void JewelRpcRemoveJewelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcRemoveJewelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcRemoveJewelReply_descriptor_;
}

const JewelRpcRemoveJewelReply& JewelRpcRemoveJewelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcRemoveJewelReply* JewelRpcRemoveJewelReply::default_instance_ = NULL;

JewelRpcRemoveJewelReply* JewelRpcRemoveJewelReply::New() const {
  return new JewelRpcRemoveJewelReply;
}

void JewelRpcRemoveJewelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_jewelinfo()) {
      if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcRemoveJewelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelInfo;
        break;
      }

      // optional .JewelInfo JewelInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jewelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcRemoveJewelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jewelinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcRemoveJewelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jewelinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcRemoveJewelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .JewelInfo JewelInfo = 2;
    if (has_jewelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jewelinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcRemoveJewelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcRemoveJewelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcRemoveJewelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcRemoveJewelReply::MergeFrom(const JewelRpcRemoveJewelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_jewelinfo()) {
      mutable_jewelinfo()->::JewelInfo::MergeFrom(from.jewelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcRemoveJewelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcRemoveJewelReply::CopyFrom(const JewelRpcRemoveJewelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcRemoveJewelReply::IsInitialized() const {

  return true;
}

void JewelRpcRemoveJewelReply::Swap(JewelRpcRemoveJewelReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(jewelinfo_, other->jewelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcRemoveJewelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcRemoveJewelReply_descriptor_;
  metadata.reflection = JewelRpcRemoveJewelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcCompoundJewelAsk::kJewelIdFieldNumber;
const int JewelRpcCompoundJewelAsk::kUseSafeItemFieldNumber;
#endif  // !_MSC_VER

JewelRpcCompoundJewelAsk::JewelRpcCompoundJewelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcCompoundJewelAsk::InitAsDefaultInstance() {
}

JewelRpcCompoundJewelAsk::JewelRpcCompoundJewelAsk(const JewelRpcCompoundJewelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcCompoundJewelAsk::SharedCtor() {
  _cached_size_ = 0;
  jewelid_ = -1;
  usesafeitem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcCompoundJewelAsk::~JewelRpcCompoundJewelAsk() {
  SharedDtor();
}

void JewelRpcCompoundJewelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcCompoundJewelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcCompoundJewelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcCompoundJewelAsk_descriptor_;
}

const JewelRpcCompoundJewelAsk& JewelRpcCompoundJewelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcCompoundJewelAsk* JewelRpcCompoundJewelAsk::default_instance_ = NULL;

JewelRpcCompoundJewelAsk* JewelRpcCompoundJewelAsk::New() const {
  return new JewelRpcCompoundJewelAsk;
}

void JewelRpcCompoundJewelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jewelid_ = -1;
    usesafeitem_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcCompoundJewelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 JewelId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelid_)));
          set_has_jewelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UseSafeItem;
        break;
      }

      // optional bool UseSafeItem = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseSafeItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usesafeitem_)));
          set_has_usesafeitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcCompoundJewelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 JewelId = 1 [default = -1];
  if (has_jewelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jewelid(), output);
  }

  // optional bool UseSafeItem = 2 [default = false];
  if (has_usesafeitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->usesafeitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcCompoundJewelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 JewelId = 1 [default = -1];
  if (has_jewelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jewelid(), target);
  }

  // optional bool UseSafeItem = 2 [default = false];
  if (has_usesafeitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->usesafeitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcCompoundJewelAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 JewelId = 1 [default = -1];
    if (has_jewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelid());
    }

    // optional bool UseSafeItem = 2 [default = false];
    if (has_usesafeitem()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcCompoundJewelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcCompoundJewelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcCompoundJewelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcCompoundJewelAsk::MergeFrom(const JewelRpcCompoundJewelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jewelid()) {
      set_jewelid(from.jewelid());
    }
    if (from.has_usesafeitem()) {
      set_usesafeitem(from.usesafeitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcCompoundJewelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcCompoundJewelAsk::CopyFrom(const JewelRpcCompoundJewelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcCompoundJewelAsk::IsInitialized() const {

  return true;
}

void JewelRpcCompoundJewelAsk::Swap(JewelRpcCompoundJewelAsk* other) {
  if (other != this) {
    std::swap(jewelid_, other->jewelid_);
    std::swap(usesafeitem_, other->usesafeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcCompoundJewelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcCompoundJewelAsk_descriptor_;
  metadata.reflection = JewelRpcCompoundJewelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcCompoundJewelReply::kResultFieldNumber;
const int JewelRpcCompoundJewelReply::kJewelIdFieldNumber;
#endif  // !_MSC_VER

JewelRpcCompoundJewelReply::JewelRpcCompoundJewelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcCompoundJewelReply::InitAsDefaultInstance() {
}

JewelRpcCompoundJewelReply::JewelRpcCompoundJewelReply(const JewelRpcCompoundJewelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcCompoundJewelReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  jewelid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcCompoundJewelReply::~JewelRpcCompoundJewelReply() {
  SharedDtor();
}

void JewelRpcCompoundJewelReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcCompoundJewelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcCompoundJewelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcCompoundJewelReply_descriptor_;
}

const JewelRpcCompoundJewelReply& JewelRpcCompoundJewelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcCompoundJewelReply* JewelRpcCompoundJewelReply::default_instance_ = NULL;

JewelRpcCompoundJewelReply* JewelRpcCompoundJewelReply::New() const {
  return new JewelRpcCompoundJewelReply;
}

void JewelRpcCompoundJewelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    jewelid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcCompoundJewelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JewelId;
        break;
      }

      // optional int32 JewelId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelid_)));
          set_has_jewelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcCompoundJewelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 JewelId = 2 [default = -1];
  if (has_jewelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jewelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcCompoundJewelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 JewelId = 2 [default = -1];
  if (has_jewelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jewelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcCompoundJewelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 JewelId = 2 [default = -1];
    if (has_jewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcCompoundJewelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcCompoundJewelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcCompoundJewelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcCompoundJewelReply::MergeFrom(const JewelRpcCompoundJewelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_jewelid()) {
      set_jewelid(from.jewelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcCompoundJewelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcCompoundJewelReply::CopyFrom(const JewelRpcCompoundJewelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcCompoundJewelReply::IsInitialized() const {

  return true;
}

void JewelRpcCompoundJewelReply::Swap(JewelRpcCompoundJewelReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(jewelid_, other->jewelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcCompoundJewelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcCompoundJewelReply_descriptor_;
  metadata.reflection = JewelRpcCompoundJewelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcCompoundSetJewelAsk::kEquipTypeFieldNumber;
const int JewelRpcCompoundSetJewelAsk::kJewelSlotFieldNumber;
#endif  // !_MSC_VER

JewelRpcCompoundSetJewelAsk::JewelRpcCompoundSetJewelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcCompoundSetJewelAsk::InitAsDefaultInstance() {
}

JewelRpcCompoundSetJewelAsk::JewelRpcCompoundSetJewelAsk(const JewelRpcCompoundSetJewelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcCompoundSetJewelAsk::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = -1;
  jewelslot_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcCompoundSetJewelAsk::~JewelRpcCompoundSetJewelAsk() {
  SharedDtor();
}

void JewelRpcCompoundSetJewelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcCompoundSetJewelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcCompoundSetJewelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcCompoundSetJewelAsk_descriptor_;
}

const JewelRpcCompoundSetJewelAsk& JewelRpcCompoundSetJewelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcCompoundSetJewelAsk* JewelRpcCompoundSetJewelAsk::default_instance_ = NULL;

JewelRpcCompoundSetJewelAsk* JewelRpcCompoundSetJewelAsk::New() const {
  return new JewelRpcCompoundSetJewelAsk;
}

void JewelRpcCompoundSetJewelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = -1;
    jewelslot_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcCompoundSetJewelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JewelSlot;
        break;
      }

      // optional int32 JewelSlot = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelslot_)));
          set_has_jewelslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcCompoundSetJewelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipType = 2 [default = -1];
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equiptype(), output);
  }

  // optional int32 JewelSlot = 3 [default = -1];
  if (has_jewelslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jewelslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcCompoundSetJewelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipType = 2 [default = -1];
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equiptype(), target);
  }

  // optional int32 JewelSlot = 3 [default = -1];
  if (has_jewelslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jewelslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcCompoundSetJewelAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipType = 2 [default = -1];
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiptype());
    }

    // optional int32 JewelSlot = 3 [default = -1];
    if (has_jewelslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcCompoundSetJewelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcCompoundSetJewelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcCompoundSetJewelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcCompoundSetJewelAsk::MergeFrom(const JewelRpcCompoundSetJewelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_jewelslot()) {
      set_jewelslot(from.jewelslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcCompoundSetJewelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcCompoundSetJewelAsk::CopyFrom(const JewelRpcCompoundSetJewelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcCompoundSetJewelAsk::IsInitialized() const {

  return true;
}

void JewelRpcCompoundSetJewelAsk::Swap(JewelRpcCompoundSetJewelAsk* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(jewelslot_, other->jewelslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcCompoundSetJewelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcCompoundSetJewelAsk_descriptor_;
  metadata.reflection = JewelRpcCompoundSetJewelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcCompoundSetJewelReply::kResultFieldNumber;
const int JewelRpcCompoundSetJewelReply::kJewelInfoFieldNumber;
#endif  // !_MSC_VER

JewelRpcCompoundSetJewelReply::JewelRpcCompoundSetJewelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcCompoundSetJewelReply::InitAsDefaultInstance() {
  jewelinfo_ = const_cast< ::JewelInfo*>(&::JewelInfo::default_instance());
}

JewelRpcCompoundSetJewelReply::JewelRpcCompoundSetJewelReply(const JewelRpcCompoundSetJewelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcCompoundSetJewelReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  jewelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcCompoundSetJewelReply::~JewelRpcCompoundSetJewelReply() {
  SharedDtor();
}

void JewelRpcCompoundSetJewelReply::SharedDtor() {
  if (this != default_instance_) {
    delete jewelinfo_;
  }
}

void JewelRpcCompoundSetJewelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcCompoundSetJewelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcCompoundSetJewelReply_descriptor_;
}

const JewelRpcCompoundSetJewelReply& JewelRpcCompoundSetJewelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcCompoundSetJewelReply* JewelRpcCompoundSetJewelReply::default_instance_ = NULL;

JewelRpcCompoundSetJewelReply* JewelRpcCompoundSetJewelReply::New() const {
  return new JewelRpcCompoundSetJewelReply;
}

void JewelRpcCompoundSetJewelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_jewelinfo()) {
      if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcCompoundSetJewelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_JewelInfo;
        break;
      }

      // optional .JewelInfo JewelInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jewelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcCompoundSetJewelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .JewelInfo JewelInfo = 3;
  if (has_jewelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jewelinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcCompoundSetJewelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .JewelInfo JewelInfo = 3;
  if (has_jewelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jewelinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcCompoundSetJewelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .JewelInfo JewelInfo = 3;
    if (has_jewelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jewelinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcCompoundSetJewelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcCompoundSetJewelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcCompoundSetJewelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcCompoundSetJewelReply::MergeFrom(const JewelRpcCompoundSetJewelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_jewelinfo()) {
      mutable_jewelinfo()->::JewelInfo::MergeFrom(from.jewelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcCompoundSetJewelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcCompoundSetJewelReply::CopyFrom(const JewelRpcCompoundSetJewelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcCompoundSetJewelReply::IsInitialized() const {

  return true;
}

void JewelRpcCompoundSetJewelReply::Swap(JewelRpcCompoundSetJewelReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(jewelinfo_, other->jewelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcCompoundSetJewelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcCompoundSetJewelReply_descriptor_;
  metadata.reflection = JewelRpcCompoundSetJewelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcUnlockJewelSlotAsk::kEquipSlotFieldNumber;
const int JewelRpcUnlockJewelSlotAsk::kJewelSlotFieldNumber;
#endif  // !_MSC_VER

JewelRpcUnlockJewelSlotAsk::JewelRpcUnlockJewelSlotAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcUnlockJewelSlotAsk::InitAsDefaultInstance() {
}

JewelRpcUnlockJewelSlotAsk::JewelRpcUnlockJewelSlotAsk(const JewelRpcUnlockJewelSlotAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcUnlockJewelSlotAsk::SharedCtor() {
  _cached_size_ = 0;
  equipslot_ = -1;
  jewelslot_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcUnlockJewelSlotAsk::~JewelRpcUnlockJewelSlotAsk() {
  SharedDtor();
}

void JewelRpcUnlockJewelSlotAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcUnlockJewelSlotAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcUnlockJewelSlotAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcUnlockJewelSlotAsk_descriptor_;
}

const JewelRpcUnlockJewelSlotAsk& JewelRpcUnlockJewelSlotAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcUnlockJewelSlotAsk* JewelRpcUnlockJewelSlotAsk::default_instance_ = NULL;

JewelRpcUnlockJewelSlotAsk* JewelRpcUnlockJewelSlotAsk::New() const {
  return new JewelRpcUnlockJewelSlotAsk;
}

void JewelRpcUnlockJewelSlotAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipslot_ = -1;
    jewelslot_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcUnlockJewelSlotAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipSlot = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JewelSlot;
        break;
      }

      // optional int32 JewelSlot = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JewelSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelslot_)));
          set_has_jewelslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcUnlockJewelSlotAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipslot(), output);
  }

  // optional int32 JewelSlot = 2 [default = -1];
  if (has_jewelslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jewelslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcUnlockJewelSlotAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipslot(), target);
  }

  // optional int32 JewelSlot = 2 [default = -1];
  if (has_jewelslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jewelslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcUnlockJewelSlotAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipSlot = 1 [default = -1];
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipslot());
    }

    // optional int32 JewelSlot = 2 [default = -1];
    if (has_jewelslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcUnlockJewelSlotAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcUnlockJewelSlotAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcUnlockJewelSlotAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcUnlockJewelSlotAsk::MergeFrom(const JewelRpcUnlockJewelSlotAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
    if (from.has_jewelslot()) {
      set_jewelslot(from.jewelslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcUnlockJewelSlotAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcUnlockJewelSlotAsk::CopyFrom(const JewelRpcUnlockJewelSlotAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcUnlockJewelSlotAsk::IsInitialized() const {

  return true;
}

void JewelRpcUnlockJewelSlotAsk::Swap(JewelRpcUnlockJewelSlotAsk* other) {
  if (other != this) {
    std::swap(equipslot_, other->equipslot_);
    std::swap(jewelslot_, other->jewelslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcUnlockJewelSlotAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcUnlockJewelSlotAsk_descriptor_;
  metadata.reflection = JewelRpcUnlockJewelSlotAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcUnlockJewelSlotReply::kResultFieldNumber;
const int JewelRpcUnlockJewelSlotReply::kJewelInfoFieldNumber;
#endif  // !_MSC_VER

JewelRpcUnlockJewelSlotReply::JewelRpcUnlockJewelSlotReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcUnlockJewelSlotReply::InitAsDefaultInstance() {
  jewelinfo_ = const_cast< ::JewelInfo*>(&::JewelInfo::default_instance());
}

JewelRpcUnlockJewelSlotReply::JewelRpcUnlockJewelSlotReply(const JewelRpcUnlockJewelSlotReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcUnlockJewelSlotReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  jewelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcUnlockJewelSlotReply::~JewelRpcUnlockJewelSlotReply() {
  SharedDtor();
}

void JewelRpcUnlockJewelSlotReply::SharedDtor() {
  if (this != default_instance_) {
    delete jewelinfo_;
  }
}

void JewelRpcUnlockJewelSlotReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcUnlockJewelSlotReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcUnlockJewelSlotReply_descriptor_;
}

const JewelRpcUnlockJewelSlotReply& JewelRpcUnlockJewelSlotReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcUnlockJewelSlotReply* JewelRpcUnlockJewelSlotReply::default_instance_ = NULL;

JewelRpcUnlockJewelSlotReply* JewelRpcUnlockJewelSlotReply::New() const {
  return new JewelRpcUnlockJewelSlotReply;
}

void JewelRpcUnlockJewelSlotReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_jewelinfo()) {
      if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcUnlockJewelSlotReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelInfo;
        break;
      }

      // optional .JewelInfo JewelInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jewelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcUnlockJewelSlotReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jewelinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcUnlockJewelSlotReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .JewelInfo JewelInfo = 2;
  if (has_jewelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jewelinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcUnlockJewelSlotReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .JewelInfo JewelInfo = 2;
    if (has_jewelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jewelinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcUnlockJewelSlotReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcUnlockJewelSlotReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcUnlockJewelSlotReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcUnlockJewelSlotReply::MergeFrom(const JewelRpcUnlockJewelSlotReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_jewelinfo()) {
      mutable_jewelinfo()->::JewelInfo::MergeFrom(from.jewelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcUnlockJewelSlotReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcUnlockJewelSlotReply::CopyFrom(const JewelRpcUnlockJewelSlotReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcUnlockJewelSlotReply::IsInitialized() const {

  return true;
}

void JewelRpcUnlockJewelSlotReply::Swap(JewelRpcUnlockJewelSlotReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(jewelinfo_, other->jewelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcUnlockJewelSlotReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcUnlockJewelSlotReply_descriptor_;
  metadata.reflection = JewelRpcUnlockJewelSlotReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcQuickCompoundAsk::kJewelIdFieldNumber;
#endif  // !_MSC_VER

JewelRpcQuickCompoundAsk::JewelRpcQuickCompoundAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcQuickCompoundAsk::InitAsDefaultInstance() {
}

JewelRpcQuickCompoundAsk::JewelRpcQuickCompoundAsk(const JewelRpcQuickCompoundAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcQuickCompoundAsk::SharedCtor() {
  _cached_size_ = 0;
  jewelid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcQuickCompoundAsk::~JewelRpcQuickCompoundAsk() {
  SharedDtor();
}

void JewelRpcQuickCompoundAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcQuickCompoundAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcQuickCompoundAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcQuickCompoundAsk_descriptor_;
}

const JewelRpcQuickCompoundAsk& JewelRpcQuickCompoundAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcQuickCompoundAsk* JewelRpcQuickCompoundAsk::default_instance_ = NULL;

JewelRpcQuickCompoundAsk* JewelRpcQuickCompoundAsk::New() const {
  return new JewelRpcQuickCompoundAsk;
}

void JewelRpcQuickCompoundAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jewelid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcQuickCompoundAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 JewelId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelid_)));
          set_has_jewelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcQuickCompoundAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 JewelId = 1 [default = -1];
  if (has_jewelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jewelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcQuickCompoundAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 JewelId = 1 [default = -1];
  if (has_jewelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jewelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcQuickCompoundAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 JewelId = 1 [default = -1];
    if (has_jewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcQuickCompoundAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcQuickCompoundAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcQuickCompoundAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcQuickCompoundAsk::MergeFrom(const JewelRpcQuickCompoundAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jewelid()) {
      set_jewelid(from.jewelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcQuickCompoundAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcQuickCompoundAsk::CopyFrom(const JewelRpcQuickCompoundAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcQuickCompoundAsk::IsInitialized() const {

  return true;
}

void JewelRpcQuickCompoundAsk::Swap(JewelRpcQuickCompoundAsk* other) {
  if (other != this) {
    std::swap(jewelid_, other->jewelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcQuickCompoundAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcQuickCompoundAsk_descriptor_;
  metadata.reflection = JewelRpcQuickCompoundAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelRpcQuickCompoundReply::kResultFieldNumber;
#endif  // !_MSC_VER

JewelRpcQuickCompoundReply::JewelRpcQuickCompoundReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelRpcQuickCompoundReply::InitAsDefaultInstance() {
}

JewelRpcQuickCompoundReply::JewelRpcQuickCompoundReply(const JewelRpcQuickCompoundReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelRpcQuickCompoundReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelRpcQuickCompoundReply::~JewelRpcQuickCompoundReply() {
  SharedDtor();
}

void JewelRpcQuickCompoundReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelRpcQuickCompoundReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelRpcQuickCompoundReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelRpcQuickCompoundReply_descriptor_;
}

const JewelRpcQuickCompoundReply& JewelRpcQuickCompoundReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JewelRpc_2eproto();
  return *default_instance_;
}

JewelRpcQuickCompoundReply* JewelRpcQuickCompoundReply::default_instance_ = NULL;

JewelRpcQuickCompoundReply* JewelRpcQuickCompoundReply::New() const {
  return new JewelRpcQuickCompoundReply;
}

void JewelRpcQuickCompoundReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelRpcQuickCompoundReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelRpcQuickCompoundReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelRpcQuickCompoundReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelRpcQuickCompoundReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelRpcQuickCompoundReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelRpcQuickCompoundReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelRpcQuickCompoundReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelRpcQuickCompoundReply::MergeFrom(const JewelRpcQuickCompoundReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelRpcQuickCompoundReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelRpcQuickCompoundReply::CopyFrom(const JewelRpcQuickCompoundReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelRpcQuickCompoundReply::IsInitialized() const {

  return true;
}

void JewelRpcQuickCompoundReply::Swap(JewelRpcQuickCompoundReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelRpcQuickCompoundReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelRpcQuickCompoundReply_descriptor_;
  metadata.reflection = JewelRpcQuickCompoundReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
