// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JewelRpc.proto

#ifndef PROTOBUF_JewelRpc_2eproto__INCLUDED
#define PROTOBUF_JewelRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_JewelRpc_2eproto();
void protobuf_AssignDesc_JewelRpc_2eproto();
void protobuf_ShutdownFile_JewelRpc_2eproto();

class JewelRpcJewelSyncAsk;
class JewelRpcJewelSyncReply;
class JewelRpcInsetJewelAsk;
class JewelRpcInsetJewelReply;
class JewelRpcRemoveJewelAsk;
class JewelRpcRemoveJewelReply;
class JewelRpcCompoundJewelAsk;
class JewelRpcCompoundJewelReply;
class JewelRpcCompoundSetJewelAsk;
class JewelRpcCompoundSetJewelReply;
class JewelRpcUnlockJewelSlotAsk;
class JewelRpcUnlockJewelSlotReply;
class JewelRpcQuickCompoundAsk;
class JewelRpcQuickCompoundReply;

// ===================================================================

class JewelRpcJewelSyncAsk : public ::google::protobuf::Message {
 public:
  JewelRpcJewelSyncAsk();
  virtual ~JewelRpcJewelSyncAsk();

  JewelRpcJewelSyncAsk(const JewelRpcJewelSyncAsk& from);

  inline JewelRpcJewelSyncAsk& operator=(const JewelRpcJewelSyncAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcJewelSyncAsk& default_instance();

  void Swap(JewelRpcJewelSyncAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcJewelSyncAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcJewelSyncAsk& from);
  void MergeFrom(const JewelRpcJewelSyncAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JewelRpcJewelSyncAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcJewelSyncAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcJewelSyncReply : public ::google::protobuf::Message {
 public:
  JewelRpcJewelSyncReply();
  virtual ~JewelRpcJewelSyncReply();

  JewelRpcJewelSyncReply(const JewelRpcJewelSyncReply& from);

  inline JewelRpcJewelSyncReply& operator=(const JewelRpcJewelSyncReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcJewelSyncReply& default_instance();

  void Swap(JewelRpcJewelSyncReply* other);

  // implements Message ----------------------------------------------

  JewelRpcJewelSyncReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcJewelSyncReply& from);
  void MergeFrom(const JewelRpcJewelSyncReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .JewelInfo JewelInfos = 2;
  inline int jewelinfos_size() const;
  inline void clear_jewelinfos();
  static const int kJewelInfosFieldNumber = 2;
  inline const ::JewelInfo& jewelinfos(int index) const;
  inline ::JewelInfo* mutable_jewelinfos(int index);
  inline ::JewelInfo* add_jewelinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::JewelInfo >&
      jewelinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::JewelInfo >*
      mutable_jewelinfos();

  // @@protoc_insertion_point(class_scope:JewelRpcJewelSyncReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::JewelInfo > jewelinfos_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcJewelSyncReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcInsetJewelAsk : public ::google::protobuf::Message {
 public:
  JewelRpcInsetJewelAsk();
  virtual ~JewelRpcInsetJewelAsk();

  JewelRpcInsetJewelAsk(const JewelRpcInsetJewelAsk& from);

  inline JewelRpcInsetJewelAsk& operator=(const JewelRpcInsetJewelAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcInsetJewelAsk& default_instance();

  void Swap(JewelRpcInsetJewelAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcInsetJewelAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcInsetJewelAsk& from);
  void MergeFrom(const JewelRpcInsetJewelAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EquipSlot = 1 [default = -1];
  inline bool has_equipslot() const;
  inline void clear_equipslot();
  static const int kEquipSlotFieldNumber = 1;
  inline ::google::protobuf::int32 equipslot() const;
  inline void set_equipslot(::google::protobuf::int32 value);

  // optional int32 JewelId = 2 [default = -1];
  inline bool has_jewelid() const;
  inline void clear_jewelid();
  static const int kJewelIdFieldNumber = 2;
  inline ::google::protobuf::int32 jewelid() const;
  inline void set_jewelid(::google::protobuf::int32 value);

  // optional int32 JewelSlot = 3 [default = -1];
  inline bool has_jewelslot() const;
  inline void clear_jewelslot();
  static const int kJewelSlotFieldNumber = 3;
  inline ::google::protobuf::int32 jewelslot() const;
  inline void set_jewelslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcInsetJewelAsk)
 private:
  inline void set_has_equipslot();
  inline void clear_has_equipslot();
  inline void set_has_jewelid();
  inline void clear_has_jewelid();
  inline void set_has_jewelslot();
  inline void clear_has_jewelslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 equipslot_;
  ::google::protobuf::int32 jewelid_;
  ::google::protobuf::int32 jewelslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcInsetJewelAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcInsetJewelReply : public ::google::protobuf::Message {
 public:
  JewelRpcInsetJewelReply();
  virtual ~JewelRpcInsetJewelReply();

  JewelRpcInsetJewelReply(const JewelRpcInsetJewelReply& from);

  inline JewelRpcInsetJewelReply& operator=(const JewelRpcInsetJewelReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcInsetJewelReply& default_instance();

  void Swap(JewelRpcInsetJewelReply* other);

  // implements Message ----------------------------------------------

  JewelRpcInsetJewelReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcInsetJewelReply& from);
  void MergeFrom(const JewelRpcInsetJewelReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .JewelInfo JewelInfo = 2;
  inline bool has_jewelinfo() const;
  inline void clear_jewelinfo();
  static const int kJewelInfoFieldNumber = 2;
  inline const ::JewelInfo& jewelinfo() const;
  inline ::JewelInfo* mutable_jewelinfo();
  inline ::JewelInfo* release_jewelinfo();
  inline void set_allocated_jewelinfo(::JewelInfo* jewelinfo);

  // @@protoc_insertion_point(class_scope:JewelRpcInsetJewelReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_jewelinfo();
  inline void clear_has_jewelinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::JewelInfo* jewelinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcInsetJewelReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcRemoveJewelAsk : public ::google::protobuf::Message {
 public:
  JewelRpcRemoveJewelAsk();
  virtual ~JewelRpcRemoveJewelAsk();

  JewelRpcRemoveJewelAsk(const JewelRpcRemoveJewelAsk& from);

  inline JewelRpcRemoveJewelAsk& operator=(const JewelRpcRemoveJewelAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcRemoveJewelAsk& default_instance();

  void Swap(JewelRpcRemoveJewelAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcRemoveJewelAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcRemoveJewelAsk& from);
  void MergeFrom(const JewelRpcRemoveJewelAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EquipSlot = 1 [default = -1];
  inline bool has_equipslot() const;
  inline void clear_equipslot();
  static const int kEquipSlotFieldNumber = 1;
  inline ::google::protobuf::int32 equipslot() const;
  inline void set_equipslot(::google::protobuf::int32 value);

  // optional int32 JewelSlot = 2 [default = -1];
  inline bool has_jewelslot() const;
  inline void clear_jewelslot();
  static const int kJewelSlotFieldNumber = 2;
  inline ::google::protobuf::int32 jewelslot() const;
  inline void set_jewelslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcRemoveJewelAsk)
 private:
  inline void set_has_equipslot();
  inline void clear_has_equipslot();
  inline void set_has_jewelslot();
  inline void clear_has_jewelslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 equipslot_;
  ::google::protobuf::int32 jewelslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcRemoveJewelAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcRemoveJewelReply : public ::google::protobuf::Message {
 public:
  JewelRpcRemoveJewelReply();
  virtual ~JewelRpcRemoveJewelReply();

  JewelRpcRemoveJewelReply(const JewelRpcRemoveJewelReply& from);

  inline JewelRpcRemoveJewelReply& operator=(const JewelRpcRemoveJewelReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcRemoveJewelReply& default_instance();

  void Swap(JewelRpcRemoveJewelReply* other);

  // implements Message ----------------------------------------------

  JewelRpcRemoveJewelReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcRemoveJewelReply& from);
  void MergeFrom(const JewelRpcRemoveJewelReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .JewelInfo JewelInfo = 2;
  inline bool has_jewelinfo() const;
  inline void clear_jewelinfo();
  static const int kJewelInfoFieldNumber = 2;
  inline const ::JewelInfo& jewelinfo() const;
  inline ::JewelInfo* mutable_jewelinfo();
  inline ::JewelInfo* release_jewelinfo();
  inline void set_allocated_jewelinfo(::JewelInfo* jewelinfo);

  // @@protoc_insertion_point(class_scope:JewelRpcRemoveJewelReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_jewelinfo();
  inline void clear_has_jewelinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::JewelInfo* jewelinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcRemoveJewelReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcCompoundJewelAsk : public ::google::protobuf::Message {
 public:
  JewelRpcCompoundJewelAsk();
  virtual ~JewelRpcCompoundJewelAsk();

  JewelRpcCompoundJewelAsk(const JewelRpcCompoundJewelAsk& from);

  inline JewelRpcCompoundJewelAsk& operator=(const JewelRpcCompoundJewelAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcCompoundJewelAsk& default_instance();

  void Swap(JewelRpcCompoundJewelAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcCompoundJewelAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcCompoundJewelAsk& from);
  void MergeFrom(const JewelRpcCompoundJewelAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 JewelId = 1 [default = -1];
  inline bool has_jewelid() const;
  inline void clear_jewelid();
  static const int kJewelIdFieldNumber = 1;
  inline ::google::protobuf::int32 jewelid() const;
  inline void set_jewelid(::google::protobuf::int32 value);

  // optional bool UseSafeItem = 2 [default = false];
  inline bool has_usesafeitem() const;
  inline void clear_usesafeitem();
  static const int kUseSafeItemFieldNumber = 2;
  inline bool usesafeitem() const;
  inline void set_usesafeitem(bool value);

  // @@protoc_insertion_point(class_scope:JewelRpcCompoundJewelAsk)
 private:
  inline void set_has_jewelid();
  inline void clear_has_jewelid();
  inline void set_has_usesafeitem();
  inline void clear_has_usesafeitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 jewelid_;
  bool usesafeitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcCompoundJewelAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcCompoundJewelReply : public ::google::protobuf::Message {
 public:
  JewelRpcCompoundJewelReply();
  virtual ~JewelRpcCompoundJewelReply();

  JewelRpcCompoundJewelReply(const JewelRpcCompoundJewelReply& from);

  inline JewelRpcCompoundJewelReply& operator=(const JewelRpcCompoundJewelReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcCompoundJewelReply& default_instance();

  void Swap(JewelRpcCompoundJewelReply* other);

  // implements Message ----------------------------------------------

  JewelRpcCompoundJewelReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcCompoundJewelReply& from);
  void MergeFrom(const JewelRpcCompoundJewelReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 JewelId = 2 [default = -1];
  inline bool has_jewelid() const;
  inline void clear_jewelid();
  static const int kJewelIdFieldNumber = 2;
  inline ::google::protobuf::int32 jewelid() const;
  inline void set_jewelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcCompoundJewelReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_jewelid();
  inline void clear_has_jewelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 jewelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcCompoundJewelReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcCompoundSetJewelAsk : public ::google::protobuf::Message {
 public:
  JewelRpcCompoundSetJewelAsk();
  virtual ~JewelRpcCompoundSetJewelAsk();

  JewelRpcCompoundSetJewelAsk(const JewelRpcCompoundSetJewelAsk& from);

  inline JewelRpcCompoundSetJewelAsk& operator=(const JewelRpcCompoundSetJewelAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcCompoundSetJewelAsk& default_instance();

  void Swap(JewelRpcCompoundSetJewelAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcCompoundSetJewelAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcCompoundSetJewelAsk& from);
  void MergeFrom(const JewelRpcCompoundSetJewelAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EquipType = 2 [default = -1];
  inline bool has_equiptype() const;
  inline void clear_equiptype();
  static const int kEquipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 equiptype() const;
  inline void set_equiptype(::google::protobuf::int32 value);

  // optional int32 JewelSlot = 3 [default = -1];
  inline bool has_jewelslot() const;
  inline void clear_jewelslot();
  static const int kJewelSlotFieldNumber = 3;
  inline ::google::protobuf::int32 jewelslot() const;
  inline void set_jewelslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcCompoundSetJewelAsk)
 private:
  inline void set_has_equiptype();
  inline void clear_has_equiptype();
  inline void set_has_jewelslot();
  inline void clear_has_jewelslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 equiptype_;
  ::google::protobuf::int32 jewelslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcCompoundSetJewelAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcCompoundSetJewelReply : public ::google::protobuf::Message {
 public:
  JewelRpcCompoundSetJewelReply();
  virtual ~JewelRpcCompoundSetJewelReply();

  JewelRpcCompoundSetJewelReply(const JewelRpcCompoundSetJewelReply& from);

  inline JewelRpcCompoundSetJewelReply& operator=(const JewelRpcCompoundSetJewelReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcCompoundSetJewelReply& default_instance();

  void Swap(JewelRpcCompoundSetJewelReply* other);

  // implements Message ----------------------------------------------

  JewelRpcCompoundSetJewelReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcCompoundSetJewelReply& from);
  void MergeFrom(const JewelRpcCompoundSetJewelReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .JewelInfo JewelInfo = 3;
  inline bool has_jewelinfo() const;
  inline void clear_jewelinfo();
  static const int kJewelInfoFieldNumber = 3;
  inline const ::JewelInfo& jewelinfo() const;
  inline ::JewelInfo* mutable_jewelinfo();
  inline ::JewelInfo* release_jewelinfo();
  inline void set_allocated_jewelinfo(::JewelInfo* jewelinfo);

  // @@protoc_insertion_point(class_scope:JewelRpcCompoundSetJewelReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_jewelinfo();
  inline void clear_has_jewelinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::JewelInfo* jewelinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcCompoundSetJewelReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcUnlockJewelSlotAsk : public ::google::protobuf::Message {
 public:
  JewelRpcUnlockJewelSlotAsk();
  virtual ~JewelRpcUnlockJewelSlotAsk();

  JewelRpcUnlockJewelSlotAsk(const JewelRpcUnlockJewelSlotAsk& from);

  inline JewelRpcUnlockJewelSlotAsk& operator=(const JewelRpcUnlockJewelSlotAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcUnlockJewelSlotAsk& default_instance();

  void Swap(JewelRpcUnlockJewelSlotAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcUnlockJewelSlotAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcUnlockJewelSlotAsk& from);
  void MergeFrom(const JewelRpcUnlockJewelSlotAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EquipSlot = 1 [default = -1];
  inline bool has_equipslot() const;
  inline void clear_equipslot();
  static const int kEquipSlotFieldNumber = 1;
  inline ::google::protobuf::int32 equipslot() const;
  inline void set_equipslot(::google::protobuf::int32 value);

  // optional int32 JewelSlot = 2 [default = -1];
  inline bool has_jewelslot() const;
  inline void clear_jewelslot();
  static const int kJewelSlotFieldNumber = 2;
  inline ::google::protobuf::int32 jewelslot() const;
  inline void set_jewelslot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcUnlockJewelSlotAsk)
 private:
  inline void set_has_equipslot();
  inline void clear_has_equipslot();
  inline void set_has_jewelslot();
  inline void clear_has_jewelslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 equipslot_;
  ::google::protobuf::int32 jewelslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcUnlockJewelSlotAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcUnlockJewelSlotReply : public ::google::protobuf::Message {
 public:
  JewelRpcUnlockJewelSlotReply();
  virtual ~JewelRpcUnlockJewelSlotReply();

  JewelRpcUnlockJewelSlotReply(const JewelRpcUnlockJewelSlotReply& from);

  inline JewelRpcUnlockJewelSlotReply& operator=(const JewelRpcUnlockJewelSlotReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcUnlockJewelSlotReply& default_instance();

  void Swap(JewelRpcUnlockJewelSlotReply* other);

  // implements Message ----------------------------------------------

  JewelRpcUnlockJewelSlotReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcUnlockJewelSlotReply& from);
  void MergeFrom(const JewelRpcUnlockJewelSlotReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .JewelInfo JewelInfo = 2;
  inline bool has_jewelinfo() const;
  inline void clear_jewelinfo();
  static const int kJewelInfoFieldNumber = 2;
  inline const ::JewelInfo& jewelinfo() const;
  inline ::JewelInfo* mutable_jewelinfo();
  inline ::JewelInfo* release_jewelinfo();
  inline void set_allocated_jewelinfo(::JewelInfo* jewelinfo);

  // @@protoc_insertion_point(class_scope:JewelRpcUnlockJewelSlotReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_jewelinfo();
  inline void clear_has_jewelinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::JewelInfo* jewelinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcUnlockJewelSlotReply* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcQuickCompoundAsk : public ::google::protobuf::Message {
 public:
  JewelRpcQuickCompoundAsk();
  virtual ~JewelRpcQuickCompoundAsk();

  JewelRpcQuickCompoundAsk(const JewelRpcQuickCompoundAsk& from);

  inline JewelRpcQuickCompoundAsk& operator=(const JewelRpcQuickCompoundAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcQuickCompoundAsk& default_instance();

  void Swap(JewelRpcQuickCompoundAsk* other);

  // implements Message ----------------------------------------------

  JewelRpcQuickCompoundAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcQuickCompoundAsk& from);
  void MergeFrom(const JewelRpcQuickCompoundAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 JewelId = 1 [default = -1];
  inline bool has_jewelid() const;
  inline void clear_jewelid();
  static const int kJewelIdFieldNumber = 1;
  inline ::google::protobuf::int32 jewelid() const;
  inline void set_jewelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcQuickCompoundAsk)
 private:
  inline void set_has_jewelid();
  inline void clear_has_jewelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 jewelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcQuickCompoundAsk* default_instance_;
};
// -------------------------------------------------------------------

class JewelRpcQuickCompoundReply : public ::google::protobuf::Message {
 public:
  JewelRpcQuickCompoundReply();
  virtual ~JewelRpcQuickCompoundReply();

  JewelRpcQuickCompoundReply(const JewelRpcQuickCompoundReply& from);

  inline JewelRpcQuickCompoundReply& operator=(const JewelRpcQuickCompoundReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelRpcQuickCompoundReply& default_instance();

  void Swap(JewelRpcQuickCompoundReply* other);

  // implements Message ----------------------------------------------

  JewelRpcQuickCompoundReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelRpcQuickCompoundReply& from);
  void MergeFrom(const JewelRpcQuickCompoundReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JewelRpcQuickCompoundReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_JewelRpc_2eproto();
  friend void protobuf_AssignDesc_JewelRpc_2eproto();
  friend void protobuf_ShutdownFile_JewelRpc_2eproto();

  void InitAsDefaultInstance();
  static JewelRpcQuickCompoundReply* default_instance_;
};
// ===================================================================


// ===================================================================

// JewelRpcJewelSyncAsk

// -------------------------------------------------------------------

// JewelRpcJewelSyncReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcJewelSyncReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcJewelSyncReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcJewelSyncReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcJewelSyncReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcJewelSyncReply::result() const {
  return result_;
}
inline void JewelRpcJewelSyncReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .JewelInfo JewelInfos = 2;
inline int JewelRpcJewelSyncReply::jewelinfos_size() const {
  return jewelinfos_.size();
}
inline void JewelRpcJewelSyncReply::clear_jewelinfos() {
  jewelinfos_.Clear();
}
inline const ::JewelInfo& JewelRpcJewelSyncReply::jewelinfos(int index) const {
  return jewelinfos_.Get(index);
}
inline ::JewelInfo* JewelRpcJewelSyncReply::mutable_jewelinfos(int index) {
  return jewelinfos_.Mutable(index);
}
inline ::JewelInfo* JewelRpcJewelSyncReply::add_jewelinfos() {
  return jewelinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JewelInfo >&
JewelRpcJewelSyncReply::jewelinfos() const {
  return jewelinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::JewelInfo >*
JewelRpcJewelSyncReply::mutable_jewelinfos() {
  return &jewelinfos_;
}

// -------------------------------------------------------------------

// JewelRpcInsetJewelAsk

// optional int32 EquipSlot = 1 [default = -1];
inline bool JewelRpcInsetJewelAsk::has_equipslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcInsetJewelAsk::set_has_equipslot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcInsetJewelAsk::clear_has_equipslot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcInsetJewelAsk::clear_equipslot() {
  equipslot_ = -1;
  clear_has_equipslot();
}
inline ::google::protobuf::int32 JewelRpcInsetJewelAsk::equipslot() const {
  return equipslot_;
}
inline void JewelRpcInsetJewelAsk::set_equipslot(::google::protobuf::int32 value) {
  set_has_equipslot();
  equipslot_ = value;
}

// optional int32 JewelId = 2 [default = -1];
inline bool JewelRpcInsetJewelAsk::has_jewelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcInsetJewelAsk::set_has_jewelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcInsetJewelAsk::clear_has_jewelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcInsetJewelAsk::clear_jewelid() {
  jewelid_ = -1;
  clear_has_jewelid();
}
inline ::google::protobuf::int32 JewelRpcInsetJewelAsk::jewelid() const {
  return jewelid_;
}
inline void JewelRpcInsetJewelAsk::set_jewelid(::google::protobuf::int32 value) {
  set_has_jewelid();
  jewelid_ = value;
}

// optional int32 JewelSlot = 3 [default = -1];
inline bool JewelRpcInsetJewelAsk::has_jewelslot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JewelRpcInsetJewelAsk::set_has_jewelslot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JewelRpcInsetJewelAsk::clear_has_jewelslot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JewelRpcInsetJewelAsk::clear_jewelslot() {
  jewelslot_ = -1;
  clear_has_jewelslot();
}
inline ::google::protobuf::int32 JewelRpcInsetJewelAsk::jewelslot() const {
  return jewelslot_;
}
inline void JewelRpcInsetJewelAsk::set_jewelslot(::google::protobuf::int32 value) {
  set_has_jewelslot();
  jewelslot_ = value;
}

// -------------------------------------------------------------------

// JewelRpcInsetJewelReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcInsetJewelReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcInsetJewelReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcInsetJewelReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcInsetJewelReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcInsetJewelReply::result() const {
  return result_;
}
inline void JewelRpcInsetJewelReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .JewelInfo JewelInfo = 2;
inline bool JewelRpcInsetJewelReply::has_jewelinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcInsetJewelReply::set_has_jewelinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcInsetJewelReply::clear_has_jewelinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcInsetJewelReply::clear_jewelinfo() {
  if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
  clear_has_jewelinfo();
}
inline const ::JewelInfo& JewelRpcInsetJewelReply::jewelinfo() const {
  return jewelinfo_ != NULL ? *jewelinfo_ : *default_instance_->jewelinfo_;
}
inline ::JewelInfo* JewelRpcInsetJewelReply::mutable_jewelinfo() {
  set_has_jewelinfo();
  if (jewelinfo_ == NULL) jewelinfo_ = new ::JewelInfo;
  return jewelinfo_;
}
inline ::JewelInfo* JewelRpcInsetJewelReply::release_jewelinfo() {
  clear_has_jewelinfo();
  ::JewelInfo* temp = jewelinfo_;
  jewelinfo_ = NULL;
  return temp;
}
inline void JewelRpcInsetJewelReply::set_allocated_jewelinfo(::JewelInfo* jewelinfo) {
  delete jewelinfo_;
  jewelinfo_ = jewelinfo;
  if (jewelinfo) {
    set_has_jewelinfo();
  } else {
    clear_has_jewelinfo();
  }
}

// -------------------------------------------------------------------

// JewelRpcRemoveJewelAsk

// optional int32 EquipSlot = 1 [default = -1];
inline bool JewelRpcRemoveJewelAsk::has_equipslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcRemoveJewelAsk::set_has_equipslot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcRemoveJewelAsk::clear_has_equipslot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcRemoveJewelAsk::clear_equipslot() {
  equipslot_ = -1;
  clear_has_equipslot();
}
inline ::google::protobuf::int32 JewelRpcRemoveJewelAsk::equipslot() const {
  return equipslot_;
}
inline void JewelRpcRemoveJewelAsk::set_equipslot(::google::protobuf::int32 value) {
  set_has_equipslot();
  equipslot_ = value;
}

// optional int32 JewelSlot = 2 [default = -1];
inline bool JewelRpcRemoveJewelAsk::has_jewelslot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcRemoveJewelAsk::set_has_jewelslot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcRemoveJewelAsk::clear_has_jewelslot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcRemoveJewelAsk::clear_jewelslot() {
  jewelslot_ = -1;
  clear_has_jewelslot();
}
inline ::google::protobuf::int32 JewelRpcRemoveJewelAsk::jewelslot() const {
  return jewelslot_;
}
inline void JewelRpcRemoveJewelAsk::set_jewelslot(::google::protobuf::int32 value) {
  set_has_jewelslot();
  jewelslot_ = value;
}

// -------------------------------------------------------------------

// JewelRpcRemoveJewelReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcRemoveJewelReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcRemoveJewelReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcRemoveJewelReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcRemoveJewelReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcRemoveJewelReply::result() const {
  return result_;
}
inline void JewelRpcRemoveJewelReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .JewelInfo JewelInfo = 2;
inline bool JewelRpcRemoveJewelReply::has_jewelinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcRemoveJewelReply::set_has_jewelinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcRemoveJewelReply::clear_has_jewelinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcRemoveJewelReply::clear_jewelinfo() {
  if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
  clear_has_jewelinfo();
}
inline const ::JewelInfo& JewelRpcRemoveJewelReply::jewelinfo() const {
  return jewelinfo_ != NULL ? *jewelinfo_ : *default_instance_->jewelinfo_;
}
inline ::JewelInfo* JewelRpcRemoveJewelReply::mutable_jewelinfo() {
  set_has_jewelinfo();
  if (jewelinfo_ == NULL) jewelinfo_ = new ::JewelInfo;
  return jewelinfo_;
}
inline ::JewelInfo* JewelRpcRemoveJewelReply::release_jewelinfo() {
  clear_has_jewelinfo();
  ::JewelInfo* temp = jewelinfo_;
  jewelinfo_ = NULL;
  return temp;
}
inline void JewelRpcRemoveJewelReply::set_allocated_jewelinfo(::JewelInfo* jewelinfo) {
  delete jewelinfo_;
  jewelinfo_ = jewelinfo;
  if (jewelinfo) {
    set_has_jewelinfo();
  } else {
    clear_has_jewelinfo();
  }
}

// -------------------------------------------------------------------

// JewelRpcCompoundJewelAsk

// optional int32 JewelId = 1 [default = -1];
inline bool JewelRpcCompoundJewelAsk::has_jewelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcCompoundJewelAsk::set_has_jewelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcCompoundJewelAsk::clear_has_jewelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcCompoundJewelAsk::clear_jewelid() {
  jewelid_ = -1;
  clear_has_jewelid();
}
inline ::google::protobuf::int32 JewelRpcCompoundJewelAsk::jewelid() const {
  return jewelid_;
}
inline void JewelRpcCompoundJewelAsk::set_jewelid(::google::protobuf::int32 value) {
  set_has_jewelid();
  jewelid_ = value;
}

// optional bool UseSafeItem = 2 [default = false];
inline bool JewelRpcCompoundJewelAsk::has_usesafeitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcCompoundJewelAsk::set_has_usesafeitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcCompoundJewelAsk::clear_has_usesafeitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcCompoundJewelAsk::clear_usesafeitem() {
  usesafeitem_ = false;
  clear_has_usesafeitem();
}
inline bool JewelRpcCompoundJewelAsk::usesafeitem() const {
  return usesafeitem_;
}
inline void JewelRpcCompoundJewelAsk::set_usesafeitem(bool value) {
  set_has_usesafeitem();
  usesafeitem_ = value;
}

// -------------------------------------------------------------------

// JewelRpcCompoundJewelReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcCompoundJewelReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcCompoundJewelReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcCompoundJewelReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcCompoundJewelReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcCompoundJewelReply::result() const {
  return result_;
}
inline void JewelRpcCompoundJewelReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 JewelId = 2 [default = -1];
inline bool JewelRpcCompoundJewelReply::has_jewelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcCompoundJewelReply::set_has_jewelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcCompoundJewelReply::clear_has_jewelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcCompoundJewelReply::clear_jewelid() {
  jewelid_ = -1;
  clear_has_jewelid();
}
inline ::google::protobuf::int32 JewelRpcCompoundJewelReply::jewelid() const {
  return jewelid_;
}
inline void JewelRpcCompoundJewelReply::set_jewelid(::google::protobuf::int32 value) {
  set_has_jewelid();
  jewelid_ = value;
}

// -------------------------------------------------------------------

// JewelRpcCompoundSetJewelAsk

// optional int32 EquipType = 2 [default = -1];
inline bool JewelRpcCompoundSetJewelAsk::has_equiptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcCompoundSetJewelAsk::set_has_equiptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcCompoundSetJewelAsk::clear_has_equiptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcCompoundSetJewelAsk::clear_equiptype() {
  equiptype_ = -1;
  clear_has_equiptype();
}
inline ::google::protobuf::int32 JewelRpcCompoundSetJewelAsk::equiptype() const {
  return equiptype_;
}
inline void JewelRpcCompoundSetJewelAsk::set_equiptype(::google::protobuf::int32 value) {
  set_has_equiptype();
  equiptype_ = value;
}

// optional int32 JewelSlot = 3 [default = -1];
inline bool JewelRpcCompoundSetJewelAsk::has_jewelslot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcCompoundSetJewelAsk::set_has_jewelslot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcCompoundSetJewelAsk::clear_has_jewelslot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcCompoundSetJewelAsk::clear_jewelslot() {
  jewelslot_ = -1;
  clear_has_jewelslot();
}
inline ::google::protobuf::int32 JewelRpcCompoundSetJewelAsk::jewelslot() const {
  return jewelslot_;
}
inline void JewelRpcCompoundSetJewelAsk::set_jewelslot(::google::protobuf::int32 value) {
  set_has_jewelslot();
  jewelslot_ = value;
}

// -------------------------------------------------------------------

// JewelRpcCompoundSetJewelReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcCompoundSetJewelReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcCompoundSetJewelReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcCompoundSetJewelReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcCompoundSetJewelReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcCompoundSetJewelReply::result() const {
  return result_;
}
inline void JewelRpcCompoundSetJewelReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .JewelInfo JewelInfo = 3;
inline bool JewelRpcCompoundSetJewelReply::has_jewelinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcCompoundSetJewelReply::set_has_jewelinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcCompoundSetJewelReply::clear_has_jewelinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcCompoundSetJewelReply::clear_jewelinfo() {
  if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
  clear_has_jewelinfo();
}
inline const ::JewelInfo& JewelRpcCompoundSetJewelReply::jewelinfo() const {
  return jewelinfo_ != NULL ? *jewelinfo_ : *default_instance_->jewelinfo_;
}
inline ::JewelInfo* JewelRpcCompoundSetJewelReply::mutable_jewelinfo() {
  set_has_jewelinfo();
  if (jewelinfo_ == NULL) jewelinfo_ = new ::JewelInfo;
  return jewelinfo_;
}
inline ::JewelInfo* JewelRpcCompoundSetJewelReply::release_jewelinfo() {
  clear_has_jewelinfo();
  ::JewelInfo* temp = jewelinfo_;
  jewelinfo_ = NULL;
  return temp;
}
inline void JewelRpcCompoundSetJewelReply::set_allocated_jewelinfo(::JewelInfo* jewelinfo) {
  delete jewelinfo_;
  jewelinfo_ = jewelinfo;
  if (jewelinfo) {
    set_has_jewelinfo();
  } else {
    clear_has_jewelinfo();
  }
}

// -------------------------------------------------------------------

// JewelRpcUnlockJewelSlotAsk

// optional int32 EquipSlot = 1 [default = -1];
inline bool JewelRpcUnlockJewelSlotAsk::has_equipslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcUnlockJewelSlotAsk::set_has_equipslot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcUnlockJewelSlotAsk::clear_has_equipslot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcUnlockJewelSlotAsk::clear_equipslot() {
  equipslot_ = -1;
  clear_has_equipslot();
}
inline ::google::protobuf::int32 JewelRpcUnlockJewelSlotAsk::equipslot() const {
  return equipslot_;
}
inline void JewelRpcUnlockJewelSlotAsk::set_equipslot(::google::protobuf::int32 value) {
  set_has_equipslot();
  equipslot_ = value;
}

// optional int32 JewelSlot = 2 [default = -1];
inline bool JewelRpcUnlockJewelSlotAsk::has_jewelslot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcUnlockJewelSlotAsk::set_has_jewelslot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcUnlockJewelSlotAsk::clear_has_jewelslot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcUnlockJewelSlotAsk::clear_jewelslot() {
  jewelslot_ = -1;
  clear_has_jewelslot();
}
inline ::google::protobuf::int32 JewelRpcUnlockJewelSlotAsk::jewelslot() const {
  return jewelslot_;
}
inline void JewelRpcUnlockJewelSlotAsk::set_jewelslot(::google::protobuf::int32 value) {
  set_has_jewelslot();
  jewelslot_ = value;
}

// -------------------------------------------------------------------

// JewelRpcUnlockJewelSlotReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcUnlockJewelSlotReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcUnlockJewelSlotReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcUnlockJewelSlotReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcUnlockJewelSlotReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcUnlockJewelSlotReply::result() const {
  return result_;
}
inline void JewelRpcUnlockJewelSlotReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .JewelInfo JewelInfo = 2;
inline bool JewelRpcUnlockJewelSlotReply::has_jewelinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelRpcUnlockJewelSlotReply::set_has_jewelinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelRpcUnlockJewelSlotReply::clear_has_jewelinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelRpcUnlockJewelSlotReply::clear_jewelinfo() {
  if (jewelinfo_ != NULL) jewelinfo_->::JewelInfo::Clear();
  clear_has_jewelinfo();
}
inline const ::JewelInfo& JewelRpcUnlockJewelSlotReply::jewelinfo() const {
  return jewelinfo_ != NULL ? *jewelinfo_ : *default_instance_->jewelinfo_;
}
inline ::JewelInfo* JewelRpcUnlockJewelSlotReply::mutable_jewelinfo() {
  set_has_jewelinfo();
  if (jewelinfo_ == NULL) jewelinfo_ = new ::JewelInfo;
  return jewelinfo_;
}
inline ::JewelInfo* JewelRpcUnlockJewelSlotReply::release_jewelinfo() {
  clear_has_jewelinfo();
  ::JewelInfo* temp = jewelinfo_;
  jewelinfo_ = NULL;
  return temp;
}
inline void JewelRpcUnlockJewelSlotReply::set_allocated_jewelinfo(::JewelInfo* jewelinfo) {
  delete jewelinfo_;
  jewelinfo_ = jewelinfo;
  if (jewelinfo) {
    set_has_jewelinfo();
  } else {
    clear_has_jewelinfo();
  }
}

// -------------------------------------------------------------------

// JewelRpcQuickCompoundAsk

// optional int32 JewelId = 1 [default = -1];
inline bool JewelRpcQuickCompoundAsk::has_jewelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcQuickCompoundAsk::set_has_jewelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcQuickCompoundAsk::clear_has_jewelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcQuickCompoundAsk::clear_jewelid() {
  jewelid_ = -1;
  clear_has_jewelid();
}
inline ::google::protobuf::int32 JewelRpcQuickCompoundAsk::jewelid() const {
  return jewelid_;
}
inline void JewelRpcQuickCompoundAsk::set_jewelid(::google::protobuf::int32 value) {
  set_has_jewelid();
  jewelid_ = value;
}

// -------------------------------------------------------------------

// JewelRpcQuickCompoundReply

// optional int32 Result = 1 [default = -1];
inline bool JewelRpcQuickCompoundReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelRpcQuickCompoundReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelRpcQuickCompoundReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelRpcQuickCompoundReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 JewelRpcQuickCompoundReply::result() const {
  return result_;
}
inline void JewelRpcQuickCompoundReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JewelRpc_2eproto__INCLUDED
