// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ContactRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ContactRpcAddFriendAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddFriendAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddFriendReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddFriendReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcCancelRelationShipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcCancelRelationShipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcCancelRelationShipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcCancelRelationShipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddBlackListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddBlackListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddBlackListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddBlackListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSyncAddressBookAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSyncAddressBookAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSyncAddressBookReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSyncAddressBookReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcContactSettingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcContactSettingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcContactSettingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcContactSettingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcCreateFriendGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcCreateFriendGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcCreateFriendGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcCreateFriendGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcMoveToFriendGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcMoveToFriendGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcMoveToFriendGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcMoveToFriendGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRemoveFriendGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRemoveFriendGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRemoveFriendGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRemoveFriendGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRenameGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRenameGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRenameGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRenameGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAgreeApplicationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAgreeApplicationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAgreeApplicationNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSetFriendGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSetFriendGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSetFriendGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSetFriendGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcNewFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcNewFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcApplyListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcApplyListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRejectApplyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRejectApplyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRejectApplyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRejectApplyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcBeRejectApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcBeRejectApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcBeCancelRelationShipNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcBeCancelRelationShipNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcBeAddBlackListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcBeAddBlackListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRecommendContactAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRecommendContactAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRecommendContactReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRecommendContactReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRejectAllAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRejectAllAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRejectAllReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRejectAllReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddFriendShipPointAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddFriendShipPointAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddFriendShipPointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddFriendShipPointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcRoleDataUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcRoleDataUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcContactLoginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcContactLoginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcContactLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcContactLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcDeleteRoleDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcDeleteRoleDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSortGroupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSortGroupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSortGroupReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSortGroupReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSetFriendAliasAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSetFriendAliasAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSetFriendAliasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSetFriendAliasReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSendFriendGiftPointAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSendFriendGiftPointAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSendFriendGiftPointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSendFriendGiftPointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAcquireGiftPointAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAcquireGiftPointAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAcquireGiftPointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAcquireGiftPointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcUnAcquireGiftPointNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcUnAcquireGiftPointNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSendAllFriendGiftPointAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSendAllFriendGiftPointAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSendAllFriendGiftPointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSendAllFriendGiftPointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAcquireAllGiftPointAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAcquireAllGiftPointAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAcquireAllGiftPointReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAcquireAllGiftPointReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcDeleteGroupRoleAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcDeleteGroupRoleAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcDeleteGroupRoleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcDeleteGroupRoleReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAddRoleDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAddRoleDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcSetGiftPointNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcSetGiftPointNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcContactsGroupsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcContactsGroupsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAgreeAllApplicationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAgreeAllApplicationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcAgreeAllApplicationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcAgreeAllApplicationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcChatToAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcChatToAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcChatToReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcChatToReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcNewChatMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcNewChatMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcReadMsgAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcReadMsgAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactRpcReadMsgReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRpcReadMsgReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ContactRpc_2eproto() {
  protobuf_AddDesc_ContactRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ContactRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ContactRpcAddFriendAsk_descriptor_ = file->message_type(0);
  static const int ContactRpcAddFriendAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendAsk, roleid_),
  };
  ContactRpcAddFriendAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddFriendAsk_descriptor_,
      ContactRpcAddFriendAsk::default_instance_,
      ContactRpcAddFriendAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddFriendAsk));
  ContactRpcAddFriendReply_descriptor_ = file->message_type(1);
  static const int ContactRpcAddFriendReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendReply, newfrienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendReply, myfriendgroup_),
  };
  ContactRpcAddFriendReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddFriendReply_descriptor_,
      ContactRpcAddFriendReply::default_instance_,
      ContactRpcAddFriendReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddFriendReply));
  ContactRpcCancelRelationShipAsk_descriptor_ = file->message_type(2);
  static const int ContactRpcCancelRelationShipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipAsk, roleid_),
  };
  ContactRpcCancelRelationShipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcCancelRelationShipAsk_descriptor_,
      ContactRpcCancelRelationShipAsk::default_instance_,
      ContactRpcCancelRelationShipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcCancelRelationShipAsk));
  ContactRpcCancelRelationShipReply_descriptor_ = file->message_type(3);
  static const int ContactRpcCancelRelationShipReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipReply, deleteroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipReply, contactgroups_),
  };
  ContactRpcCancelRelationShipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcCancelRelationShipReply_descriptor_,
      ContactRpcCancelRelationShipReply::default_instance_,
      ContactRpcCancelRelationShipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCancelRelationShipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcCancelRelationShipReply));
  ContactRpcAddBlackListAsk_descriptor_ = file->message_type(4);
  static const int ContactRpcAddBlackListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListAsk, roleid_),
  };
  ContactRpcAddBlackListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddBlackListAsk_descriptor_,
      ContactRpcAddBlackListAsk::default_instance_,
      ContactRpcAddBlackListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddBlackListAsk));
  ContactRpcAddBlackListReply_descriptor_ = file->message_type(5);
  static const int ContactRpcAddBlackListReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListReply, contactgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListReply, roleid_),
  };
  ContactRpcAddBlackListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddBlackListReply_descriptor_,
      ContactRpcAddBlackListReply::default_instance_,
      ContactRpcAddBlackListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddBlackListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddBlackListReply));
  ContactRpcSyncAddressBookAsk_descriptor_ = file->message_type(6);
  static const int ContactRpcSyncAddressBookAsk_offsets_[1] = {
  };
  ContactRpcSyncAddressBookAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSyncAddressBookAsk_descriptor_,
      ContactRpcSyncAddressBookAsk::default_instance_,
      ContactRpcSyncAddressBookAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSyncAddressBookAsk));
  ContactRpcSyncAddressBookReply_descriptor_ = file->message_type(7);
  static const int ContactRpcSyncAddressBookReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookReply, addressbock_),
  };
  ContactRpcSyncAddressBookReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSyncAddressBookReply_descriptor_,
      ContactRpcSyncAddressBookReply::default_instance_,
      ContactRpcSyncAddressBookReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSyncAddressBookReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSyncAddressBookReply));
  ContactRpcContactSettingAsk_descriptor_ = file->message_type(8);
  static const int ContactRpcContactSettingAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingAsk, newsetting_),
  };
  ContactRpcContactSettingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcContactSettingAsk_descriptor_,
      ContactRpcContactSettingAsk::default_instance_,
      ContactRpcContactSettingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcContactSettingAsk));
  ContactRpcContactSettingReply_descriptor_ = file->message_type(9);
  static const int ContactRpcContactSettingReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingReply, newsetting_),
  };
  ContactRpcContactSettingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcContactSettingReply_descriptor_,
      ContactRpcContactSettingReply::default_instance_,
      ContactRpcContactSettingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactSettingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcContactSettingReply));
  ContactRpcCreateFriendGroupAsk_descriptor_ = file->message_type(10);
  static const int ContactRpcCreateFriendGroupAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupAsk, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupAsk, roleids_),
  };
  ContactRpcCreateFriendGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcCreateFriendGroupAsk_descriptor_,
      ContactRpcCreateFriendGroupAsk::default_instance_,
      ContactRpcCreateFriendGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcCreateFriendGroupAsk));
  ContactRpcCreateFriendGroupReply_descriptor_ = file->message_type(11);
  static const int ContactRpcCreateFriendGroupReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupReply, contactgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupReply, groupids_),
  };
  ContactRpcCreateFriendGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcCreateFriendGroupReply_descriptor_,
      ContactRpcCreateFriendGroupReply::default_instance_,
      ContactRpcCreateFriendGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcCreateFriendGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcCreateFriendGroupReply));
  ContactRpcMoveToFriendGroupAsk_descriptor_ = file->message_type(12);
  static const int ContactRpcMoveToFriendGroupAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupAsk, roleids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupAsk, fromgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupAsk, togroupid_),
  };
  ContactRpcMoveToFriendGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcMoveToFriendGroupAsk_descriptor_,
      ContactRpcMoveToFriendGroupAsk::default_instance_,
      ContactRpcMoveToFriendGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcMoveToFriendGroupAsk));
  ContactRpcMoveToFriendGroupReply_descriptor_ = file->message_type(13);
  static const int ContactRpcMoveToFriendGroupReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupReply, changegroup_),
  };
  ContactRpcMoveToFriendGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcMoveToFriendGroupReply_descriptor_,
      ContactRpcMoveToFriendGroupReply::default_instance_,
      ContactRpcMoveToFriendGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcMoveToFriendGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcMoveToFriendGroupReply));
  ContactRpcRemoveFriendGroupAsk_descriptor_ = file->message_type(14);
  static const int ContactRpcRemoveFriendGroupAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupAsk, removegroupid_),
  };
  ContactRpcRemoveFriendGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRemoveFriendGroupAsk_descriptor_,
      ContactRpcRemoveFriendGroupAsk::default_instance_,
      ContactRpcRemoveFriendGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRemoveFriendGroupAsk));
  ContactRpcRemoveFriendGroupReply_descriptor_ = file->message_type(15);
  static const int ContactRpcRemoveFriendGroupReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, myfriendgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, removegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, groupids_),
  };
  ContactRpcRemoveFriendGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRemoveFriendGroupReply_descriptor_,
      ContactRpcRemoveFriendGroupReply::default_instance_,
      ContactRpcRemoveFriendGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRemoveFriendGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRemoveFriendGroupReply));
  ContactRpcRenameGroupAsk_descriptor_ = file->message_type(16);
  static const int ContactRpcRenameGroupAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupAsk, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupAsk, groupid_),
  };
  ContactRpcRenameGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRenameGroupAsk_descriptor_,
      ContactRpcRenameGroupAsk::default_instance_,
      ContactRpcRenameGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRenameGroupAsk));
  ContactRpcRenameGroupReply_descriptor_ = file->message_type(17);
  static const int ContactRpcRenameGroupReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupReply, definegroup_),
  };
  ContactRpcRenameGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRenameGroupReply_descriptor_,
      ContactRpcRenameGroupReply::default_instance_,
      ContactRpcRenameGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRenameGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRenameGroupReply));
  ContactRpcAgreeApplicationAsk_descriptor_ = file->message_type(18);
  static const int ContactRpcAgreeApplicationAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationAsk, roleid_),
  };
  ContactRpcAgreeApplicationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAgreeApplicationAsk_descriptor_,
      ContactRpcAgreeApplicationAsk::default_instance_,
      ContactRpcAgreeApplicationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAgreeApplicationAsk));
  ContactRpcAgreeApplicationReply_descriptor_ = file->message_type(19);
  static const int ContactRpcAgreeApplicationReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationReply, newfrienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationReply, myfriendgroup_),
  };
  ContactRpcAgreeApplicationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAgreeApplicationReply_descriptor_,
      ContactRpcAgreeApplicationReply::default_instance_,
      ContactRpcAgreeApplicationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAgreeApplicationReply));
  ContactRpcAgreeApplicationNotifyNotify_descriptor_ = file->message_type(20);
  static const int ContactRpcAgreeApplicationNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationNotifyNotify, myfriendgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationNotifyNotify, newfrienddata_),
  };
  ContactRpcAgreeApplicationNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAgreeApplicationNotifyNotify_descriptor_,
      ContactRpcAgreeApplicationNotifyNotify::default_instance_,
      ContactRpcAgreeApplicationNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeApplicationNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAgreeApplicationNotifyNotify));
  ContactRpcSetFriendGroupAsk_descriptor_ = file->message_type(21);
  static const int ContactRpcSetFriendGroupAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupAsk, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupAsk, roleids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupAsk, groupname_),
  };
  ContactRpcSetFriendGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSetFriendGroupAsk_descriptor_,
      ContactRpcSetFriendGroupAsk::default_instance_,
      ContactRpcSetFriendGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSetFriendGroupAsk));
  ContactRpcSetFriendGroupReply_descriptor_ = file->message_type(22);
  static const int ContactRpcSetFriendGroupReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupReply, friendgroups_),
  };
  ContactRpcSetFriendGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSetFriendGroupReply_descriptor_,
      ContactRpcSetFriendGroupReply::default_instance_,
      ContactRpcSetFriendGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSetFriendGroupReply));
  ContactRpcNewFriendNotify_descriptor_ = file->message_type(23);
  static const int ContactRpcNewFriendNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewFriendNotify, newfrienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewFriendNotify, myfriendgroup_),
  };
  ContactRpcNewFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcNewFriendNotify_descriptor_,
      ContactRpcNewFriendNotify::default_instance_,
      ContactRpcNewFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcNewFriendNotify));
  ContactRpcApplyListNotify_descriptor_ = file->message_type(24);
  static const int ContactRpcApplyListNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcApplyListNotify, applyfrienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcApplyListNotify, applygroups_),
  };
  ContactRpcApplyListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcApplyListNotify_descriptor_,
      ContactRpcApplyListNotify::default_instance_,
      ContactRpcApplyListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcApplyListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcApplyListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcApplyListNotify));
  ContactRpcRejectApplyAsk_descriptor_ = file->message_type(25);
  static const int ContactRpcRejectApplyAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyAsk, roleid_),
  };
  ContactRpcRejectApplyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRejectApplyAsk_descriptor_,
      ContactRpcRejectApplyAsk::default_instance_,
      ContactRpcRejectApplyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRejectApplyAsk));
  ContactRpcRejectApplyReply_descriptor_ = file->message_type(26);
  static const int ContactRpcRejectApplyReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyReply, contactgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyReply, deleteroleid_),
  };
  ContactRpcRejectApplyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRejectApplyReply_descriptor_,
      ContactRpcRejectApplyReply::default_instance_,
      ContactRpcRejectApplyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectApplyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRejectApplyReply));
  ContactRpcBeRejectApplyNotify_descriptor_ = file->message_type(27);
  static const int ContactRpcBeRejectApplyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeRejectApplyNotify, deletefrienddata_),
  };
  ContactRpcBeRejectApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcBeRejectApplyNotify_descriptor_,
      ContactRpcBeRejectApplyNotify::default_instance_,
      ContactRpcBeRejectApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeRejectApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeRejectApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcBeRejectApplyNotify));
  ContactRpcBeCancelRelationShipNotify_descriptor_ = file->message_type(28);
  static const int ContactRpcBeCancelRelationShipNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeCancelRelationShipNotify, deleteroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeCancelRelationShipNotify, contactgroups_),
  };
  ContactRpcBeCancelRelationShipNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcBeCancelRelationShipNotify_descriptor_,
      ContactRpcBeCancelRelationShipNotify::default_instance_,
      ContactRpcBeCancelRelationShipNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeCancelRelationShipNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeCancelRelationShipNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcBeCancelRelationShipNotify));
  ContactRpcBeAddBlackListNotify_descriptor_ = file->message_type(29);
  static const int ContactRpcBeAddBlackListNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeAddBlackListNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeAddBlackListNotify, contactgroups_),
  };
  ContactRpcBeAddBlackListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcBeAddBlackListNotify_descriptor_,
      ContactRpcBeAddBlackListNotify::default_instance_,
      ContactRpcBeAddBlackListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeAddBlackListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcBeAddBlackListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcBeAddBlackListNotify));
  ContactRpcRecommendContactAsk_descriptor_ = file->message_type(30);
  static const int ContactRpcRecommendContactAsk_offsets_[1] = {
  };
  ContactRpcRecommendContactAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRecommendContactAsk_descriptor_,
      ContactRpcRecommendContactAsk::default_instance_,
      ContactRpcRecommendContactAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRecommendContactAsk));
  ContactRpcRecommendContactReply_descriptor_ = file->message_type(31);
  static const int ContactRpcRecommendContactReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactReply, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactReply, applyedlistid_),
  };
  ContactRpcRecommendContactReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRecommendContactReply_descriptor_,
      ContactRpcRecommendContactReply::default_instance_,
      ContactRpcRecommendContactReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRecommendContactReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRecommendContactReply));
  ContactRpcRejectAllAsk_descriptor_ = file->message_type(32);
  static const int ContactRpcRejectAllAsk_offsets_[1] = {
  };
  ContactRpcRejectAllAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRejectAllAsk_descriptor_,
      ContactRpcRejectAllAsk::default_instance_,
      ContactRpcRejectAllAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRejectAllAsk));
  ContactRpcRejectAllReply_descriptor_ = file->message_type(33);
  static const int ContactRpcRejectAllReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllReply, contactgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllReply, deleteroleids_),
  };
  ContactRpcRejectAllReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRejectAllReply_descriptor_,
      ContactRpcRejectAllReply::default_instance_,
      ContactRpcRejectAllReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRejectAllReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRejectAllReply));
  ContactRpcAddFriendShipPointAsk_descriptor_ = file->message_type(34);
  static const int ContactRpcAddFriendShipPointAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointAsk, friendroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointAsk, itemdata_),
  };
  ContactRpcAddFriendShipPointAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddFriendShipPointAsk_descriptor_,
      ContactRpcAddFriendShipPointAsk::default_instance_,
      ContactRpcAddFriendShipPointAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddFriendShipPointAsk));
  ContactRpcAddFriendShipPointReply_descriptor_ = file->message_type(35);
  static const int ContactRpcAddFriendShipPointReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointReply, contact_),
  };
  ContactRpcAddFriendShipPointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddFriendShipPointReply_descriptor_,
      ContactRpcAddFriendShipPointReply::default_instance_,
      ContactRpcAddFriendShipPointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddFriendShipPointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddFriendShipPointReply));
  ContactRpcRoleDataUpdateNotify_descriptor_ = file->message_type(36);
  static const int ContactRpcRoleDataUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRoleDataUpdateNotify, contact_),
  };
  ContactRpcRoleDataUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcRoleDataUpdateNotify_descriptor_,
      ContactRpcRoleDataUpdateNotify::default_instance_,
      ContactRpcRoleDataUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRoleDataUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcRoleDataUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcRoleDataUpdateNotify));
  ContactRpcContactLoginNotify_descriptor_ = file->message_type(37);
  static const int ContactRpcContactLoginNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLoginNotify, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLoginNotify, groupids_),
  };
  ContactRpcContactLoginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcContactLoginNotify_descriptor_,
      ContactRpcContactLoginNotify::default_instance_,
      ContactRpcContactLoginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLoginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLoginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcContactLoginNotify));
  ContactRpcContactLogoutNotify_descriptor_ = file->message_type(38);
  static const int ContactRpcContactLogoutNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLogoutNotify, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLogoutNotify, groupids_),
  };
  ContactRpcContactLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcContactLogoutNotify_descriptor_,
      ContactRpcContactLogoutNotify::default_instance_,
      ContactRpcContactLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcContactLogoutNotify));
  ContactRpcDeleteRoleDataNotify_descriptor_ = file->message_type(39);
  static const int ContactRpcDeleteRoleDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteRoleDataNotify, roleid_),
  };
  ContactRpcDeleteRoleDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcDeleteRoleDataNotify_descriptor_,
      ContactRpcDeleteRoleDataNotify::default_instance_,
      ContactRpcDeleteRoleDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteRoleDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteRoleDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcDeleteRoleDataNotify));
  ContactRpcSortGroupAsk_descriptor_ = file->message_type(40);
  static const int ContactRpcSortGroupAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupAsk, groupids_),
  };
  ContactRpcSortGroupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSortGroupAsk_descriptor_,
      ContactRpcSortGroupAsk::default_instance_,
      ContactRpcSortGroupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSortGroupAsk));
  ContactRpcSortGroupReply_descriptor_ = file->message_type(41);
  static const int ContactRpcSortGroupReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupReply, groupids_),
  };
  ContactRpcSortGroupReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSortGroupReply_descriptor_,
      ContactRpcSortGroupReply::default_instance_,
      ContactRpcSortGroupReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSortGroupReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSortGroupReply));
  ContactRpcSetFriendAliasAsk_descriptor_ = file->message_type(42);
  static const int ContactRpcSetFriendAliasAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasAsk, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasAsk, roleid_),
  };
  ContactRpcSetFriendAliasAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSetFriendAliasAsk_descriptor_,
      ContactRpcSetFriendAliasAsk::default_instance_,
      ContactRpcSetFriendAliasAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSetFriendAliasAsk));
  ContactRpcSetFriendAliasReply_descriptor_ = file->message_type(43);
  static const int ContactRpcSetFriendAliasReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasReply, contact_),
  };
  ContactRpcSetFriendAliasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSetFriendAliasReply_descriptor_,
      ContactRpcSetFriendAliasReply::default_instance_,
      ContactRpcSetFriendAliasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetFriendAliasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSetFriendAliasReply));
  ContactRpcSendFriendGiftPointAsk_descriptor_ = file->message_type(44);
  static const int ContactRpcSendFriendGiftPointAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointAsk, sendroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointAsk, point_),
  };
  ContactRpcSendFriendGiftPointAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSendFriendGiftPointAsk_descriptor_,
      ContactRpcSendFriendGiftPointAsk::default_instance_,
      ContactRpcSendFriendGiftPointAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSendFriendGiftPointAsk));
  ContactRpcSendFriendGiftPointReply_descriptor_ = file->message_type(45);
  static const int ContactRpcSendFriendGiftPointReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointReply, sentgiftlist_),
  };
  ContactRpcSendFriendGiftPointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSendFriendGiftPointReply_descriptor_,
      ContactRpcSendFriendGiftPointReply::default_instance_,
      ContactRpcSendFriendGiftPointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendFriendGiftPointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSendFriendGiftPointReply));
  ContactRpcAcquireGiftPointAsk_descriptor_ = file->message_type(46);
  static const int ContactRpcAcquireGiftPointAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointAsk, acquireroleid_),
  };
  ContactRpcAcquireGiftPointAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAcquireGiftPointAsk_descriptor_,
      ContactRpcAcquireGiftPointAsk::default_instance_,
      ContactRpcAcquireGiftPointAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAcquireGiftPointAsk));
  ContactRpcAcquireGiftPointReply_descriptor_ = file->message_type(47);
  static const int ContactRpcAcquireGiftPointReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointReply, acquiregiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointReply, unacquiregiftlist_),
  };
  ContactRpcAcquireGiftPointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAcquireGiftPointReply_descriptor_,
      ContactRpcAcquireGiftPointReply::default_instance_,
      ContactRpcAcquireGiftPointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireGiftPointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAcquireGiftPointReply));
  ContactRpcUnAcquireGiftPointNotify_descriptor_ = file->message_type(48);
  static const int ContactRpcUnAcquireGiftPointNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcUnAcquireGiftPointNotify, unacquiregiftlist_),
  };
  ContactRpcUnAcquireGiftPointNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcUnAcquireGiftPointNotify_descriptor_,
      ContactRpcUnAcquireGiftPointNotify::default_instance_,
      ContactRpcUnAcquireGiftPointNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcUnAcquireGiftPointNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcUnAcquireGiftPointNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcUnAcquireGiftPointNotify));
  ContactRpcSendAllFriendGiftPointAsk_descriptor_ = file->message_type(49);
  static const int ContactRpcSendAllFriendGiftPointAsk_offsets_[1] = {
  };
  ContactRpcSendAllFriendGiftPointAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSendAllFriendGiftPointAsk_descriptor_,
      ContactRpcSendAllFriendGiftPointAsk::default_instance_,
      ContactRpcSendAllFriendGiftPointAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSendAllFriendGiftPointAsk));
  ContactRpcSendAllFriendGiftPointReply_descriptor_ = file->message_type(50);
  static const int ContactRpcSendAllFriendGiftPointReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointReply, sentgiftlist_),
  };
  ContactRpcSendAllFriendGiftPointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSendAllFriendGiftPointReply_descriptor_,
      ContactRpcSendAllFriendGiftPointReply::default_instance_,
      ContactRpcSendAllFriendGiftPointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSendAllFriendGiftPointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSendAllFriendGiftPointReply));
  ContactRpcAcquireAllGiftPointAsk_descriptor_ = file->message_type(51);
  static const int ContactRpcAcquireAllGiftPointAsk_offsets_[1] = {
  };
  ContactRpcAcquireAllGiftPointAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAcquireAllGiftPointAsk_descriptor_,
      ContactRpcAcquireAllGiftPointAsk::default_instance_,
      ContactRpcAcquireAllGiftPointAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAcquireAllGiftPointAsk));
  ContactRpcAcquireAllGiftPointReply_descriptor_ = file->message_type(52);
  static const int ContactRpcAcquireAllGiftPointReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointReply, acquiregiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointReply, unacquiregiftlist_),
  };
  ContactRpcAcquireAllGiftPointReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAcquireAllGiftPointReply_descriptor_,
      ContactRpcAcquireAllGiftPointReply::default_instance_,
      ContactRpcAcquireAllGiftPointReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAcquireAllGiftPointReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAcquireAllGiftPointReply));
  ContactRpcDeleteGroupRoleAsk_descriptor_ = file->message_type(53);
  static const int ContactRpcDeleteGroupRoleAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleAsk, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleAsk, roleid_),
  };
  ContactRpcDeleteGroupRoleAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcDeleteGroupRoleAsk_descriptor_,
      ContactRpcDeleteGroupRoleAsk::default_instance_,
      ContactRpcDeleteGroupRoleAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcDeleteGroupRoleAsk));
  ContactRpcDeleteGroupRoleReply_descriptor_ = file->message_type(54);
  static const int ContactRpcDeleteGroupRoleReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleReply, contactgroups_),
  };
  ContactRpcDeleteGroupRoleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcDeleteGroupRoleReply_descriptor_,
      ContactRpcDeleteGroupRoleReply::default_instance_,
      ContactRpcDeleteGroupRoleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcDeleteGroupRoleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcDeleteGroupRoleReply));
  ContactRpcAddRoleDataNotify_descriptor_ = file->message_type(55);
  static const int ContactRpcAddRoleDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddRoleDataNotify, newroledata_),
  };
  ContactRpcAddRoleDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAddRoleDataNotify_descriptor_,
      ContactRpcAddRoleDataNotify::default_instance_,
      ContactRpcAddRoleDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddRoleDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAddRoleDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAddRoleDataNotify));
  ContactRpcSetGiftPointNotify_descriptor_ = file->message_type(56);
  static const int ContactRpcSetGiftPointNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetGiftPointNotify, acquiregiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetGiftPointNotify, unacquiregiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetGiftPointNotify, sentgiftlist_),
  };
  ContactRpcSetGiftPointNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcSetGiftPointNotify_descriptor_,
      ContactRpcSetGiftPointNotify::default_instance_,
      ContactRpcSetGiftPointNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetGiftPointNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcSetGiftPointNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcSetGiftPointNotify));
  ContactRpcContactsGroupsNotify_descriptor_ = file->message_type(57);
  static const int ContactRpcContactsGroupsNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactsGroupsNotify, myfriendgroup_),
  };
  ContactRpcContactsGroupsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcContactsGroupsNotify_descriptor_,
      ContactRpcContactsGroupsNotify::default_instance_,
      ContactRpcContactsGroupsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactsGroupsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcContactsGroupsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcContactsGroupsNotify));
  ContactRpcAgreeAllApplicationAsk_descriptor_ = file->message_type(58);
  static const int ContactRpcAgreeAllApplicationAsk_offsets_[1] = {
  };
  ContactRpcAgreeAllApplicationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAgreeAllApplicationAsk_descriptor_,
      ContactRpcAgreeAllApplicationAsk::default_instance_,
      ContactRpcAgreeAllApplicationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAgreeAllApplicationAsk));
  ContactRpcAgreeAllApplicationReply_descriptor_ = file->message_type(59);
  static const int ContactRpcAgreeAllApplicationReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationReply, newfrienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationReply, myfriendgroup_),
  };
  ContactRpcAgreeAllApplicationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcAgreeAllApplicationReply_descriptor_,
      ContactRpcAgreeAllApplicationReply::default_instance_,
      ContactRpcAgreeAllApplicationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcAgreeAllApplicationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcAgreeAllApplicationReply));
  ContactRpcChatToAsk_descriptor_ = file->message_type(60);
  static const int ContactRpcChatToAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToAsk, chatmsg_),
  };
  ContactRpcChatToAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcChatToAsk_descriptor_,
      ContactRpcChatToAsk::default_instance_,
      ContactRpcChatToAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcChatToAsk));
  ContactRpcChatToReply_descriptor_ = file->message_type(61);
  static const int ContactRpcChatToReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToReply, result_),
  };
  ContactRpcChatToReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcChatToReply_descriptor_,
      ContactRpcChatToReply::default_instance_,
      ContactRpcChatToReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcChatToReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcChatToReply));
  ContactRpcNewChatMsgNotify_descriptor_ = file->message_type(62);
  static const int ContactRpcNewChatMsgNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewChatMsgNotify, chatmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewChatMsgNotify, roleid_),
  };
  ContactRpcNewChatMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcNewChatMsgNotify_descriptor_,
      ContactRpcNewChatMsgNotify::default_instance_,
      ContactRpcNewChatMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewChatMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcNewChatMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcNewChatMsgNotify));
  ContactRpcReadMsgAsk_descriptor_ = file->message_type(63);
  static const int ContactRpcReadMsgAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgAsk, roleid_),
  };
  ContactRpcReadMsgAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcReadMsgAsk_descriptor_,
      ContactRpcReadMsgAsk::default_instance_,
      ContactRpcReadMsgAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcReadMsgAsk));
  ContactRpcReadMsgReply_descriptor_ = file->message_type(64);
  static const int ContactRpcReadMsgReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgReply, roleid_),
  };
  ContactRpcReadMsgReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactRpcReadMsgReply_descriptor_,
      ContactRpcReadMsgReply::default_instance_,
      ContactRpcReadMsgReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRpcReadMsgReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactRpcReadMsgReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ContactRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddFriendAsk_descriptor_, &ContactRpcAddFriendAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddFriendReply_descriptor_, &ContactRpcAddFriendReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcCancelRelationShipAsk_descriptor_, &ContactRpcCancelRelationShipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcCancelRelationShipReply_descriptor_, &ContactRpcCancelRelationShipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddBlackListAsk_descriptor_, &ContactRpcAddBlackListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddBlackListReply_descriptor_, &ContactRpcAddBlackListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSyncAddressBookAsk_descriptor_, &ContactRpcSyncAddressBookAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSyncAddressBookReply_descriptor_, &ContactRpcSyncAddressBookReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcContactSettingAsk_descriptor_, &ContactRpcContactSettingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcContactSettingReply_descriptor_, &ContactRpcContactSettingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcCreateFriendGroupAsk_descriptor_, &ContactRpcCreateFriendGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcCreateFriendGroupReply_descriptor_, &ContactRpcCreateFriendGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcMoveToFriendGroupAsk_descriptor_, &ContactRpcMoveToFriendGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcMoveToFriendGroupReply_descriptor_, &ContactRpcMoveToFriendGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRemoveFriendGroupAsk_descriptor_, &ContactRpcRemoveFriendGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRemoveFriendGroupReply_descriptor_, &ContactRpcRemoveFriendGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRenameGroupAsk_descriptor_, &ContactRpcRenameGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRenameGroupReply_descriptor_, &ContactRpcRenameGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAgreeApplicationAsk_descriptor_, &ContactRpcAgreeApplicationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAgreeApplicationReply_descriptor_, &ContactRpcAgreeApplicationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAgreeApplicationNotifyNotify_descriptor_, &ContactRpcAgreeApplicationNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSetFriendGroupAsk_descriptor_, &ContactRpcSetFriendGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSetFriendGroupReply_descriptor_, &ContactRpcSetFriendGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcNewFriendNotify_descriptor_, &ContactRpcNewFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcApplyListNotify_descriptor_, &ContactRpcApplyListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRejectApplyAsk_descriptor_, &ContactRpcRejectApplyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRejectApplyReply_descriptor_, &ContactRpcRejectApplyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcBeRejectApplyNotify_descriptor_, &ContactRpcBeRejectApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcBeCancelRelationShipNotify_descriptor_, &ContactRpcBeCancelRelationShipNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcBeAddBlackListNotify_descriptor_, &ContactRpcBeAddBlackListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRecommendContactAsk_descriptor_, &ContactRpcRecommendContactAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRecommendContactReply_descriptor_, &ContactRpcRecommendContactReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRejectAllAsk_descriptor_, &ContactRpcRejectAllAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRejectAllReply_descriptor_, &ContactRpcRejectAllReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddFriendShipPointAsk_descriptor_, &ContactRpcAddFriendShipPointAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddFriendShipPointReply_descriptor_, &ContactRpcAddFriendShipPointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcRoleDataUpdateNotify_descriptor_, &ContactRpcRoleDataUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcContactLoginNotify_descriptor_, &ContactRpcContactLoginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcContactLogoutNotify_descriptor_, &ContactRpcContactLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcDeleteRoleDataNotify_descriptor_, &ContactRpcDeleteRoleDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSortGroupAsk_descriptor_, &ContactRpcSortGroupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSortGroupReply_descriptor_, &ContactRpcSortGroupReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSetFriendAliasAsk_descriptor_, &ContactRpcSetFriendAliasAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSetFriendAliasReply_descriptor_, &ContactRpcSetFriendAliasReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSendFriendGiftPointAsk_descriptor_, &ContactRpcSendFriendGiftPointAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSendFriendGiftPointReply_descriptor_, &ContactRpcSendFriendGiftPointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAcquireGiftPointAsk_descriptor_, &ContactRpcAcquireGiftPointAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAcquireGiftPointReply_descriptor_, &ContactRpcAcquireGiftPointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcUnAcquireGiftPointNotify_descriptor_, &ContactRpcUnAcquireGiftPointNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSendAllFriendGiftPointAsk_descriptor_, &ContactRpcSendAllFriendGiftPointAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSendAllFriendGiftPointReply_descriptor_, &ContactRpcSendAllFriendGiftPointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAcquireAllGiftPointAsk_descriptor_, &ContactRpcAcquireAllGiftPointAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAcquireAllGiftPointReply_descriptor_, &ContactRpcAcquireAllGiftPointReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcDeleteGroupRoleAsk_descriptor_, &ContactRpcDeleteGroupRoleAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcDeleteGroupRoleReply_descriptor_, &ContactRpcDeleteGroupRoleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAddRoleDataNotify_descriptor_, &ContactRpcAddRoleDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcSetGiftPointNotify_descriptor_, &ContactRpcSetGiftPointNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcContactsGroupsNotify_descriptor_, &ContactRpcContactsGroupsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAgreeAllApplicationAsk_descriptor_, &ContactRpcAgreeAllApplicationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcAgreeAllApplicationReply_descriptor_, &ContactRpcAgreeAllApplicationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcChatToAsk_descriptor_, &ContactRpcChatToAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcChatToReply_descriptor_, &ContactRpcChatToReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcNewChatMsgNotify_descriptor_, &ContactRpcNewChatMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcReadMsgAsk_descriptor_, &ContactRpcReadMsgAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactRpcReadMsgReply_descriptor_, &ContactRpcReadMsgReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ContactRpc_2eproto() {
  delete ContactRpcAddFriendAsk::default_instance_;
  delete ContactRpcAddFriendAsk_reflection_;
  delete ContactRpcAddFriendReply::default_instance_;
  delete ContactRpcAddFriendReply_reflection_;
  delete ContactRpcCancelRelationShipAsk::default_instance_;
  delete ContactRpcCancelRelationShipAsk_reflection_;
  delete ContactRpcCancelRelationShipReply::default_instance_;
  delete ContactRpcCancelRelationShipReply_reflection_;
  delete ContactRpcAddBlackListAsk::default_instance_;
  delete ContactRpcAddBlackListAsk_reflection_;
  delete ContactRpcAddBlackListReply::default_instance_;
  delete ContactRpcAddBlackListReply_reflection_;
  delete ContactRpcSyncAddressBookAsk::default_instance_;
  delete ContactRpcSyncAddressBookAsk_reflection_;
  delete ContactRpcSyncAddressBookReply::default_instance_;
  delete ContactRpcSyncAddressBookReply_reflection_;
  delete ContactRpcContactSettingAsk::default_instance_;
  delete ContactRpcContactSettingAsk_reflection_;
  delete ContactRpcContactSettingReply::default_instance_;
  delete ContactRpcContactSettingReply_reflection_;
  delete ContactRpcCreateFriendGroupAsk::default_instance_;
  delete ContactRpcCreateFriendGroupAsk_reflection_;
  delete ContactRpcCreateFriendGroupReply::default_instance_;
  delete ContactRpcCreateFriendGroupReply_reflection_;
  delete ContactRpcMoveToFriendGroupAsk::default_instance_;
  delete ContactRpcMoveToFriendGroupAsk_reflection_;
  delete ContactRpcMoveToFriendGroupReply::default_instance_;
  delete ContactRpcMoveToFriendGroupReply_reflection_;
  delete ContactRpcRemoveFriendGroupAsk::default_instance_;
  delete ContactRpcRemoveFriendGroupAsk_reflection_;
  delete ContactRpcRemoveFriendGroupReply::default_instance_;
  delete ContactRpcRemoveFriendGroupReply_reflection_;
  delete ContactRpcRenameGroupAsk::default_instance_;
  delete ContactRpcRenameGroupAsk_reflection_;
  delete ContactRpcRenameGroupReply::default_instance_;
  delete ContactRpcRenameGroupReply_reflection_;
  delete ContactRpcAgreeApplicationAsk::default_instance_;
  delete ContactRpcAgreeApplicationAsk_reflection_;
  delete ContactRpcAgreeApplicationReply::default_instance_;
  delete ContactRpcAgreeApplicationReply_reflection_;
  delete ContactRpcAgreeApplicationNotifyNotify::default_instance_;
  delete ContactRpcAgreeApplicationNotifyNotify_reflection_;
  delete ContactRpcSetFriendGroupAsk::default_instance_;
  delete ContactRpcSetFriendGroupAsk_reflection_;
  delete ContactRpcSetFriendGroupReply::default_instance_;
  delete ContactRpcSetFriendGroupReply_reflection_;
  delete ContactRpcNewFriendNotify::default_instance_;
  delete ContactRpcNewFriendNotify_reflection_;
  delete ContactRpcApplyListNotify::default_instance_;
  delete ContactRpcApplyListNotify_reflection_;
  delete ContactRpcRejectApplyAsk::default_instance_;
  delete ContactRpcRejectApplyAsk_reflection_;
  delete ContactRpcRejectApplyReply::default_instance_;
  delete ContactRpcRejectApplyReply_reflection_;
  delete ContactRpcBeRejectApplyNotify::default_instance_;
  delete ContactRpcBeRejectApplyNotify_reflection_;
  delete ContactRpcBeCancelRelationShipNotify::default_instance_;
  delete ContactRpcBeCancelRelationShipNotify_reflection_;
  delete ContactRpcBeAddBlackListNotify::default_instance_;
  delete ContactRpcBeAddBlackListNotify_reflection_;
  delete ContactRpcRecommendContactAsk::default_instance_;
  delete ContactRpcRecommendContactAsk_reflection_;
  delete ContactRpcRecommendContactReply::default_instance_;
  delete ContactRpcRecommendContactReply_reflection_;
  delete ContactRpcRejectAllAsk::default_instance_;
  delete ContactRpcRejectAllAsk_reflection_;
  delete ContactRpcRejectAllReply::default_instance_;
  delete ContactRpcRejectAllReply_reflection_;
  delete ContactRpcAddFriendShipPointAsk::default_instance_;
  delete ContactRpcAddFriendShipPointAsk_reflection_;
  delete ContactRpcAddFriendShipPointReply::default_instance_;
  delete ContactRpcAddFriendShipPointReply_reflection_;
  delete ContactRpcRoleDataUpdateNotify::default_instance_;
  delete ContactRpcRoleDataUpdateNotify_reflection_;
  delete ContactRpcContactLoginNotify::default_instance_;
  delete ContactRpcContactLoginNotify_reflection_;
  delete ContactRpcContactLogoutNotify::default_instance_;
  delete ContactRpcContactLogoutNotify_reflection_;
  delete ContactRpcDeleteRoleDataNotify::default_instance_;
  delete ContactRpcDeleteRoleDataNotify_reflection_;
  delete ContactRpcSortGroupAsk::default_instance_;
  delete ContactRpcSortGroupAsk_reflection_;
  delete ContactRpcSortGroupReply::default_instance_;
  delete ContactRpcSortGroupReply_reflection_;
  delete ContactRpcSetFriendAliasAsk::default_instance_;
  delete ContactRpcSetFriendAliasAsk_reflection_;
  delete ContactRpcSetFriendAliasReply::default_instance_;
  delete ContactRpcSetFriendAliasReply_reflection_;
  delete ContactRpcSendFriendGiftPointAsk::default_instance_;
  delete ContactRpcSendFriendGiftPointAsk_reflection_;
  delete ContactRpcSendFriendGiftPointReply::default_instance_;
  delete ContactRpcSendFriendGiftPointReply_reflection_;
  delete ContactRpcAcquireGiftPointAsk::default_instance_;
  delete ContactRpcAcquireGiftPointAsk_reflection_;
  delete ContactRpcAcquireGiftPointReply::default_instance_;
  delete ContactRpcAcquireGiftPointReply_reflection_;
  delete ContactRpcUnAcquireGiftPointNotify::default_instance_;
  delete ContactRpcUnAcquireGiftPointNotify_reflection_;
  delete ContactRpcSendAllFriendGiftPointAsk::default_instance_;
  delete ContactRpcSendAllFriendGiftPointAsk_reflection_;
  delete ContactRpcSendAllFriendGiftPointReply::default_instance_;
  delete ContactRpcSendAllFriendGiftPointReply_reflection_;
  delete ContactRpcAcquireAllGiftPointAsk::default_instance_;
  delete ContactRpcAcquireAllGiftPointAsk_reflection_;
  delete ContactRpcAcquireAllGiftPointReply::default_instance_;
  delete ContactRpcAcquireAllGiftPointReply_reflection_;
  delete ContactRpcDeleteGroupRoleAsk::default_instance_;
  delete ContactRpcDeleteGroupRoleAsk_reflection_;
  delete ContactRpcDeleteGroupRoleReply::default_instance_;
  delete ContactRpcDeleteGroupRoleReply_reflection_;
  delete ContactRpcAddRoleDataNotify::default_instance_;
  delete ContactRpcAddRoleDataNotify_reflection_;
  delete ContactRpcSetGiftPointNotify::default_instance_;
  delete ContactRpcSetGiftPointNotify_reflection_;
  delete ContactRpcContactsGroupsNotify::default_instance_;
  delete ContactRpcContactsGroupsNotify_reflection_;
  delete ContactRpcAgreeAllApplicationAsk::default_instance_;
  delete ContactRpcAgreeAllApplicationAsk_reflection_;
  delete ContactRpcAgreeAllApplicationReply::default_instance_;
  delete ContactRpcAgreeAllApplicationReply_reflection_;
  delete ContactRpcChatToAsk::default_instance_;
  delete ContactRpcChatToAsk_reflection_;
  delete ContactRpcChatToReply::default_instance_;
  delete ContactRpcChatToReply_reflection_;
  delete ContactRpcNewChatMsgNotify::default_instance_;
  delete ContactRpcNewChatMsgNotify_reflection_;
  delete ContactRpcReadMsgAsk::default_instance_;
  delete ContactRpcReadMsgAsk_reflection_;
  delete ContactRpcReadMsgReply::default_instance_;
  delete ContactRpcReadMsgReply_reflection_;
}

void protobuf_AddDesc_ContactRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ContactRpc.proto\032\022PublicStruct.proto\"+"
    "\n\026ContactRpcAddFriendAsk\022\021\n\006RoleId\030\001 \001(\004"
    ":\0010\"y\n\030ContactRpcAddFriendReply\022\022\n\006Resul"
    "t\030\001 \001(\005:\002-1\022#\n\rNewFriendData\030\003 \001(\0132\014.Con"
    "tactData\022$\n\rMyFriendGroup\030\004 \001(\0132\r.Contac"
    "tGroup\"4\n\037ContactRpcCancelRelationShipAs"
    "k\022\021\n\006RoleId\030\001 \001(\004:\0010\"v\n!ContactRpcCancel"
    "RelationShipReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\027\n"
    "\014DeleteRoleId\030\002 \001(\004:\0010\022$\n\rContactGroups\030"
    "\003 \003(\0132\r.ContactGroup\".\n\031ContactRpcAddBla"
    "ckListAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"j\n\033ContactR"
    "pcAddBlackListReply\022\022\n\006Result\030\001 \001(\005:\002-1\022"
    "$\n\rContactGroups\030\002 \003(\0132\r.ContactGroup\022\021\n"
    "\006RoleId\030\003 \001(\004:\0010\"\036\n\034ContactRpcSyncAddres"
    "sBookAsk\"W\n\036ContactRpcSyncAddressBookRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\013AddressBock\030\002 "
    "\001(\0132\014.AddressBook\"B\n\033ContactRpcContactSe"
    "ttingAsk\022#\n\nNewSetting\030\001 \001(\0132\017.ContactSe"
    "tting\"X\n\035ContactRpcContactSettingReply\022\022"
    "\n\006Result\030\001 \001(\005:\002-1\022#\n\nNewSetting\030\002 \001(\0132\017"
    ".ContactSetting\"D\n\036ContactRpcCreateFrien"
    "dGroupAsk\022\021\n\tGroupName\030\001 \001(\t\022\017\n\007RoleIds\030"
    "\002 \003(\004\"n\n ContactRpcCreateFriendGroupRepl"
    "y\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\rContactGroups\030\002"
    " \003(\0132\r.ContactGroup\022\020\n\010GroupIds\030\003 \003(\005\"a\n"
    "\036ContactRpcMoveToFriendGroupAsk\022\017\n\007RoleI"
    "ds\030\001 \003(\004\022\027\n\013FromGroupId\030\002 \001(\005:\002-1\022\025\n\tToG"
    "roupId\030\003 \001(\005:\002-1\"Z\n ContactRpcMoveToFrie"
    "ndGroupReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\"\n\013Chan"
    "geGroup\030\002 \003(\0132\r.ContactGroup\";\n\036ContactR"
    "pcRemoveFriendGroupAsk\022\031\n\rRemoveGroupId\030"
    "\001 \001(\005:\002-1\"\211\001\n ContactRpcRemoveFriendGrou"
    "pReply\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\rMyFriendGr"
    "oup\030\003 \001(\0132\r.ContactGroup\022\031\n\rRemoveGroupI"
    "d\030\004 \001(\005:\002-1\022\020\n\010GroupIds\030\005 \003(\005\"=\n\030Contact"
    "RpcRenameGroupAsk\022\014\n\004Name\030\001 \001(\t\022\023\n\007Group"
    "Id\030\002 \001(\005:\002-1\"T\n\032ContactRpcRenameGroupRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022\"\n\013DefineGroup\030\002 "
    "\001(\0132\r.ContactGroup\"2\n\035ContactRpcAgreeApp"
    "licationAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"\200\001\n\037Conta"
    "ctRpcAgreeApplicationReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\022#\n\rNewFriendData\030\002 \001(\0132\014.ContactD"
    "ata\022$\n\rMyFriendGroup\030\003 \003(\0132\r.ContactGrou"
    "p\"s\n&ContactRpcAgreeApplicationNotifyNot"
    "ify\022$\n\rMyFriendGroup\030\001 \003(\0132\r.ContactGrou"
    "p\022#\n\rNewFriendData\030\002 \001(\0132\014.ContactData\"Z"
    "\n\033ContactRpcSetFriendGroupAsk\022\023\n\007GroupId"
    "\030\001 \001(\005:\002-1\022\023\n\007RoleIds\030\002 \001(\005:\002-1\022\021\n\tGroup"
    "Name\030\003 \001(\014\"X\n\035ContactRpcSetFriendGroupRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022#\n\014FriendGroups\030"
    "\002 \003(\0132\r.ContactGroup\"f\n\031ContactRpcNewFri"
    "endNotify\022#\n\rNewFriendData\030\001 \001(\0132\014.Conta"
    "ctData\022$\n\rMyFriendGroup\030\002 \001(\0132\r.ContactG"
    "roup\"f\n\031ContactRpcApplyListNotify\022%\n\017App"
    "lyFriendData\030\001 \001(\0132\014.ContactData\022\"\n\013Appl"
    "yGroups\030\005 \003(\0132\r.ContactGroup\"-\n\030ContactR"
    "pcRejectApplyAsk\022\021\n\006RoleId\030\002 \001(\004:\0010\"o\n\032C"
    "ontactRpcRejectApplyReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1\022$\n\rContactGroups\030\010 \003(\0132\r.ContactGr"
    "oup\022\027\n\014DeleteRoleId\030\t \001(\004:\0010\"G\n\035ContactR"
    "pcBeRejectApplyNotify\022&\n\020DeleteFriendDat"
    "a\030\001 \001(\0132\014.ContactData\"e\n$ContactRpcBeCan"
    "celRelationShipNotify\022\027\n\014DeleteRoleId\030\001 "
    "\001(\004:\0010\022$\n\rContactGroups\030\002 \003(\0132\r.ContactG"
    "roup\"Y\n\036ContactRpcBeAddBlackListNotify\022\021"
    "\n\006RoleId\030\001 \001(\004:\0010\022$\n\rContactGroups\030\002 \003(\013"
    "2\r.ContactGroup\"\037\n\035ContactRpcRecommendCo"
    "ntactAsk\"k\n\037ContactRpcRecommendContactRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022\035\n\007Contact\030\002 \003(\013"
    "2\014.ContactData\022\025\n\rApplyedListId\030\003 \003(\004\"\030\n"
    "\026ContactRpcRejectAllAsk\"k\n\030ContactRpcRej"
    "ectAllReply\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\rConta"
    "ctGroups\030\002 \003(\0132\r.ContactGroup\022\025\n\rDeleteR"
    "oleIds\030\003 \003(\004\"]\n\037ContactRpcAddFriendShipP"
    "ointAsk\022\027\n\014FriendRoleId\030\001 \001(\004:\0010\022!\n\010Item"
    "Data\030\002 \003(\0132\017.ItemSimpleData\"V\n!ContactRp"
    "cAddFriendShipPointReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\022\035\n\007Contact\030\002 \001(\0132\014.ContactData\"\?\n\036C"
    "ontactRpcRoleDataUpdateNotify\022\035\n\007Contact"
    "\030\001 \001(\0132\014.ContactData\"O\n\034ContactRpcContac"
    "tLoginNotify\022\035\n\007Contact\030\001 \001(\0132\014.ContactD"
    "ata\022\020\n\010GroupIds\030\002 \003(\005\"P\n\035ContactRpcConta"
    "ctLogoutNotify\022\035\n\007Contact\030\001 \001(\0132\014.Contac"
    "tData\022\020\n\010GroupIds\030\002 \003(\005\"3\n\036ContactRpcDel"
    "eteRoleDataNotify\022\021\n\006RoleId\030\002 \001(\004:\0010\"*\n\026"
    "ContactRpcSortGroupAsk\022\020\n\010GroupIds\030\001 \003(\005"
    "\"@\n\030ContactRpcSortGroupReply\022\022\n\006Result\030\001"
    " \001(\005:\002-1\022\020\n\010GroupIds\030\002 \003(\005\">\n\033ContactRpc"
    "SetFriendAliasAsk\022\014\n\004Name\030\001 \001(\t\022\021\n\006RoleI"
    "d\030\002 \001(\004:\0010\"R\n\035ContactRpcSetFriendAliasRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022\035\n\007Contact\030\002 \001(\013"
    "2\014.ContactData\"L\n ContactRpcSendFriendGi"
    "ftPointAsk\022\025\n\nSendRoleId\030\001 \001(\004:\0010\022\021\n\005Poi"
    "nt\030\002 \001(\005:\002-1\"`\n\"ContactRpcSendFriendGift"
    "PointReply\022\022\n\006Result\030\001 \001(\005:\002-1\022&\n\014SentGi"
    "ftList\030\002 \003(\0132\020.FriendGiftPoint\"9\n\035Contac"
    "tRpcAcquireGiftPointAsk\022\030\n\rAcquireRoleId"
    "\030\001 \001(\004:\0010\"\215\001\n\037ContactRpcAcquireGiftPoint"
    "Reply\022\022\n\006Result\030\001 \001(\005:\002-1\022)\n\017AcquireGift"
    "List\030\002 \003(\0132\020.FriendGiftPoint\022+\n\021UnAcquir"
    "eGiftList\030\003 \003(\0132\020.FriendGiftPoint\"Q\n\"Con"
    "tactRpcUnAcquireGiftPointNotify\022+\n\021UnAcq"
    "uireGiftList\030\001 \003(\0132\020.FriendGiftPoint\"%\n#"
    "ContactRpcSendAllFriendGiftPointAsk\"c\n%C"
    "ontactRpcSendAllFriendGiftPointReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022&\n\014SentGiftList\030\002 \003(\0132\020"
    ".FriendGiftPoint\"\"\n ContactRpcAcquireAll"
    "GiftPointAsk\"\220\001\n\"ContactRpcAcquireAllGif"
    "tPointReply\022\022\n\006Result\030\001 \001(\005:\002-1\022)\n\017Acqui"
    "reGiftList\030\002 \003(\0132\020.FriendGiftPoint\022+\n\021Un"
    "AcquireGiftList\030\003 \003(\0132\020.FriendGiftPoint\""
    "F\n\034ContactRpcDeleteGroupRoleAsk\022\023\n\007Group"
    "Id\030\001 \001(\005:\002-1\022\021\n\006RoleId\030\002 \001(\004:\0010\"Z\n\036Conta"
    "ctRpcDeleteGroupRoleReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1\022$\n\rContactGroups\030\003 \003(\0132\r.ContactGr"
    "oup\"@\n\033ContactRpcAddRoleDataNotify\022!\n\013Ne"
    "wRoleData\030\001 \001(\0132\014.ContactData\"\236\001\n\034Contac"
    "tRpcSetGiftPointNotify\022)\n\017AcquireGiftLis"
    "t\030\001 \003(\0132\020.FriendGiftPoint\022+\n\021UnAcquireGi"
    "ftList\030\002 \003(\0132\020.FriendGiftPoint\022&\n\014SentGi"
    "ftList\030\003 \003(\0132\020.FriendGiftPoint\"F\n\036Contac"
    "tRpcContactsGroupsNotify\022$\n\rMyFriendGrou"
    "p\030\001 \003(\0132\r.ContactGroup\"\"\n ContactRpcAgre"
    "eAllApplicationAsk\"\203\001\n\"ContactRpcAgreeAl"
    "lApplicationReply\022\022\n\006Result\030\001 \001(\005:\002-1\022#\n"
    "\rNewFriendData\030\002 \003(\0132\014.ContactData\022$\n\rMy"
    "FriendGroup\030\003 \003(\0132\r.ContactGroup\"C\n\023Cont"
    "actRpcChatToAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\022\031\n\007Ch"
    "atMsg\030\002 \001(\0132\010.ChatMsg\"+\n\025ContactRpcChatT"
    "oReply\022\022\n\006Result\030\001 \001(\005:\002-1\"K\n\032ContactRpc"
    "NewChatMsgNotify\022\032\n\007ChatMsg\030\001 \001(\0132\t.Chat"
    "Info\022\021\n\006RoleId\030\002 \001(\004:\0010\")\n\024ContactRpcRea"
    "dMsgAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"\?\n\026ContactRpc"
    "ReadMsgReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\021\n\006Role"
    "Id\030\002 \001(\004:\0010", 5371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContactRpc.proto", &protobuf_RegisterTypes);
  ContactRpcAddFriendAsk::default_instance_ = new ContactRpcAddFriendAsk();
  ContactRpcAddFriendReply::default_instance_ = new ContactRpcAddFriendReply();
  ContactRpcCancelRelationShipAsk::default_instance_ = new ContactRpcCancelRelationShipAsk();
  ContactRpcCancelRelationShipReply::default_instance_ = new ContactRpcCancelRelationShipReply();
  ContactRpcAddBlackListAsk::default_instance_ = new ContactRpcAddBlackListAsk();
  ContactRpcAddBlackListReply::default_instance_ = new ContactRpcAddBlackListReply();
  ContactRpcSyncAddressBookAsk::default_instance_ = new ContactRpcSyncAddressBookAsk();
  ContactRpcSyncAddressBookReply::default_instance_ = new ContactRpcSyncAddressBookReply();
  ContactRpcContactSettingAsk::default_instance_ = new ContactRpcContactSettingAsk();
  ContactRpcContactSettingReply::default_instance_ = new ContactRpcContactSettingReply();
  ContactRpcCreateFriendGroupAsk::default_instance_ = new ContactRpcCreateFriendGroupAsk();
  ContactRpcCreateFriendGroupReply::default_instance_ = new ContactRpcCreateFriendGroupReply();
  ContactRpcMoveToFriendGroupAsk::default_instance_ = new ContactRpcMoveToFriendGroupAsk();
  ContactRpcMoveToFriendGroupReply::default_instance_ = new ContactRpcMoveToFriendGroupReply();
  ContactRpcRemoveFriendGroupAsk::default_instance_ = new ContactRpcRemoveFriendGroupAsk();
  ContactRpcRemoveFriendGroupReply::default_instance_ = new ContactRpcRemoveFriendGroupReply();
  ContactRpcRenameGroupAsk::default_instance_ = new ContactRpcRenameGroupAsk();
  ContactRpcRenameGroupReply::default_instance_ = new ContactRpcRenameGroupReply();
  ContactRpcAgreeApplicationAsk::default_instance_ = new ContactRpcAgreeApplicationAsk();
  ContactRpcAgreeApplicationReply::default_instance_ = new ContactRpcAgreeApplicationReply();
  ContactRpcAgreeApplicationNotifyNotify::default_instance_ = new ContactRpcAgreeApplicationNotifyNotify();
  ContactRpcSetFriendGroupAsk::default_instance_ = new ContactRpcSetFriendGroupAsk();
  ContactRpcSetFriendGroupReply::default_instance_ = new ContactRpcSetFriendGroupReply();
  ContactRpcNewFriendNotify::default_instance_ = new ContactRpcNewFriendNotify();
  ContactRpcApplyListNotify::default_instance_ = new ContactRpcApplyListNotify();
  ContactRpcRejectApplyAsk::default_instance_ = new ContactRpcRejectApplyAsk();
  ContactRpcRejectApplyReply::default_instance_ = new ContactRpcRejectApplyReply();
  ContactRpcBeRejectApplyNotify::default_instance_ = new ContactRpcBeRejectApplyNotify();
  ContactRpcBeCancelRelationShipNotify::default_instance_ = new ContactRpcBeCancelRelationShipNotify();
  ContactRpcBeAddBlackListNotify::default_instance_ = new ContactRpcBeAddBlackListNotify();
  ContactRpcRecommendContactAsk::default_instance_ = new ContactRpcRecommendContactAsk();
  ContactRpcRecommendContactReply::default_instance_ = new ContactRpcRecommendContactReply();
  ContactRpcRejectAllAsk::default_instance_ = new ContactRpcRejectAllAsk();
  ContactRpcRejectAllReply::default_instance_ = new ContactRpcRejectAllReply();
  ContactRpcAddFriendShipPointAsk::default_instance_ = new ContactRpcAddFriendShipPointAsk();
  ContactRpcAddFriendShipPointReply::default_instance_ = new ContactRpcAddFriendShipPointReply();
  ContactRpcRoleDataUpdateNotify::default_instance_ = new ContactRpcRoleDataUpdateNotify();
  ContactRpcContactLoginNotify::default_instance_ = new ContactRpcContactLoginNotify();
  ContactRpcContactLogoutNotify::default_instance_ = new ContactRpcContactLogoutNotify();
  ContactRpcDeleteRoleDataNotify::default_instance_ = new ContactRpcDeleteRoleDataNotify();
  ContactRpcSortGroupAsk::default_instance_ = new ContactRpcSortGroupAsk();
  ContactRpcSortGroupReply::default_instance_ = new ContactRpcSortGroupReply();
  ContactRpcSetFriendAliasAsk::default_instance_ = new ContactRpcSetFriendAliasAsk();
  ContactRpcSetFriendAliasReply::default_instance_ = new ContactRpcSetFriendAliasReply();
  ContactRpcSendFriendGiftPointAsk::default_instance_ = new ContactRpcSendFriendGiftPointAsk();
  ContactRpcSendFriendGiftPointReply::default_instance_ = new ContactRpcSendFriendGiftPointReply();
  ContactRpcAcquireGiftPointAsk::default_instance_ = new ContactRpcAcquireGiftPointAsk();
  ContactRpcAcquireGiftPointReply::default_instance_ = new ContactRpcAcquireGiftPointReply();
  ContactRpcUnAcquireGiftPointNotify::default_instance_ = new ContactRpcUnAcquireGiftPointNotify();
  ContactRpcSendAllFriendGiftPointAsk::default_instance_ = new ContactRpcSendAllFriendGiftPointAsk();
  ContactRpcSendAllFriendGiftPointReply::default_instance_ = new ContactRpcSendAllFriendGiftPointReply();
  ContactRpcAcquireAllGiftPointAsk::default_instance_ = new ContactRpcAcquireAllGiftPointAsk();
  ContactRpcAcquireAllGiftPointReply::default_instance_ = new ContactRpcAcquireAllGiftPointReply();
  ContactRpcDeleteGroupRoleAsk::default_instance_ = new ContactRpcDeleteGroupRoleAsk();
  ContactRpcDeleteGroupRoleReply::default_instance_ = new ContactRpcDeleteGroupRoleReply();
  ContactRpcAddRoleDataNotify::default_instance_ = new ContactRpcAddRoleDataNotify();
  ContactRpcSetGiftPointNotify::default_instance_ = new ContactRpcSetGiftPointNotify();
  ContactRpcContactsGroupsNotify::default_instance_ = new ContactRpcContactsGroupsNotify();
  ContactRpcAgreeAllApplicationAsk::default_instance_ = new ContactRpcAgreeAllApplicationAsk();
  ContactRpcAgreeAllApplicationReply::default_instance_ = new ContactRpcAgreeAllApplicationReply();
  ContactRpcChatToAsk::default_instance_ = new ContactRpcChatToAsk();
  ContactRpcChatToReply::default_instance_ = new ContactRpcChatToReply();
  ContactRpcNewChatMsgNotify::default_instance_ = new ContactRpcNewChatMsgNotify();
  ContactRpcReadMsgAsk::default_instance_ = new ContactRpcReadMsgAsk();
  ContactRpcReadMsgReply::default_instance_ = new ContactRpcReadMsgReply();
  ContactRpcAddFriendAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAddFriendReply::default_instance_->InitAsDefaultInstance();
  ContactRpcCancelRelationShipAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcCancelRelationShipReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAddBlackListAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAddBlackListReply::default_instance_->InitAsDefaultInstance();
  ContactRpcSyncAddressBookAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSyncAddressBookReply::default_instance_->InitAsDefaultInstance();
  ContactRpcContactSettingAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcContactSettingReply::default_instance_->InitAsDefaultInstance();
  ContactRpcCreateFriendGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcCreateFriendGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcMoveToFriendGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcMoveToFriendGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcRemoveFriendGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcRemoveFriendGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcRenameGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcRenameGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAgreeApplicationAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAgreeApplicationReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAgreeApplicationNotifyNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcSetFriendGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSetFriendGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcNewFriendNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcApplyListNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcRejectApplyAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcRejectApplyReply::default_instance_->InitAsDefaultInstance();
  ContactRpcBeRejectApplyNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcBeCancelRelationShipNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcBeAddBlackListNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcRecommendContactAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcRecommendContactReply::default_instance_->InitAsDefaultInstance();
  ContactRpcRejectAllAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcRejectAllReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAddFriendShipPointAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAddFriendShipPointReply::default_instance_->InitAsDefaultInstance();
  ContactRpcRoleDataUpdateNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcContactLoginNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcContactLogoutNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcDeleteRoleDataNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcSortGroupAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSortGroupReply::default_instance_->InitAsDefaultInstance();
  ContactRpcSetFriendAliasAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSetFriendAliasReply::default_instance_->InitAsDefaultInstance();
  ContactRpcSendFriendGiftPointAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSendFriendGiftPointReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAcquireGiftPointAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAcquireGiftPointReply::default_instance_->InitAsDefaultInstance();
  ContactRpcUnAcquireGiftPointNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcSendAllFriendGiftPointAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcSendAllFriendGiftPointReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAcquireAllGiftPointAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAcquireAllGiftPointReply::default_instance_->InitAsDefaultInstance();
  ContactRpcDeleteGroupRoleAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcDeleteGroupRoleReply::default_instance_->InitAsDefaultInstance();
  ContactRpcAddRoleDataNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcSetGiftPointNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcContactsGroupsNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcAgreeAllApplicationAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcAgreeAllApplicationReply::default_instance_->InitAsDefaultInstance();
  ContactRpcChatToAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcChatToReply::default_instance_->InitAsDefaultInstance();
  ContactRpcNewChatMsgNotify::default_instance_->InitAsDefaultInstance();
  ContactRpcReadMsgAsk::default_instance_->InitAsDefaultInstance();
  ContactRpcReadMsgReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ContactRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ContactRpc_2eproto {
  StaticDescriptorInitializer_ContactRpc_2eproto() {
    protobuf_AddDesc_ContactRpc_2eproto();
  }
} static_descriptor_initializer_ContactRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddFriendAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddFriendAsk::ContactRpcAddFriendAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddFriendAsk::InitAsDefaultInstance() {
}

ContactRpcAddFriendAsk::ContactRpcAddFriendAsk(const ContactRpcAddFriendAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddFriendAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddFriendAsk::~ContactRpcAddFriendAsk() {
  SharedDtor();
}

void ContactRpcAddFriendAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAddFriendAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddFriendAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddFriendAsk_descriptor_;
}

const ContactRpcAddFriendAsk& ContactRpcAddFriendAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddFriendAsk* ContactRpcAddFriendAsk::default_instance_ = NULL;

ContactRpcAddFriendAsk* ContactRpcAddFriendAsk::New() const {
  return new ContactRpcAddFriendAsk;
}

void ContactRpcAddFriendAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddFriendAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddFriendAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddFriendAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddFriendAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddFriendAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddFriendAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddFriendAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddFriendAsk::MergeFrom(const ContactRpcAddFriendAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddFriendAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddFriendAsk::CopyFrom(const ContactRpcAddFriendAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddFriendAsk::IsInitialized() const {

  return true;
}

void ContactRpcAddFriendAsk::Swap(ContactRpcAddFriendAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddFriendAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddFriendAsk_descriptor_;
  metadata.reflection = ContactRpcAddFriendAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddFriendReply::kResultFieldNumber;
const int ContactRpcAddFriendReply::kNewFriendDataFieldNumber;
const int ContactRpcAddFriendReply::kMyFriendGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddFriendReply::ContactRpcAddFriendReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddFriendReply::InitAsDefaultInstance() {
  newfrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
  myfriendgroup_ = const_cast< ::ContactGroup*>(&::ContactGroup::default_instance());
}

ContactRpcAddFriendReply::ContactRpcAddFriendReply(const ContactRpcAddFriendReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddFriendReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  newfrienddata_ = NULL;
  myfriendgroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddFriendReply::~ContactRpcAddFriendReply() {
  SharedDtor();
}

void ContactRpcAddFriendReply::SharedDtor() {
  if (this != default_instance_) {
    delete newfrienddata_;
    delete myfriendgroup_;
  }
}

void ContactRpcAddFriendReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddFriendReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddFriendReply_descriptor_;
}

const ContactRpcAddFriendReply& ContactRpcAddFriendReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddFriendReply* ContactRpcAddFriendReply::default_instance_ = NULL;

ContactRpcAddFriendReply* ContactRpcAddFriendReply::New() const {
  return new ContactRpcAddFriendReply;
}

void ContactRpcAddFriendReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_newfrienddata()) {
      if (newfrienddata_ != NULL) newfrienddata_->::ContactData::Clear();
    }
    if (has_myfriendgroup()) {
      if (myfriendgroup_ != NULL) myfriendgroup_->::ContactGroup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddFriendReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NewFriendData;
        break;
      }

      // optional .ContactData NewFriendData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewFriendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MyFriendGroup;
        break;
      }

      // optional .ContactGroup MyFriendGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddFriendReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactData NewFriendData = 3;
  if (has_newfrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newfrienddata(), output);
  }

  // optional .ContactGroup MyFriendGroup = 4;
  if (has_myfriendgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->myfriendgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddFriendReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactData NewFriendData = 3;
  if (has_newfrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newfrienddata(), target);
  }

  // optional .ContactGroup MyFriendGroup = 4;
  if (has_myfriendgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->myfriendgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddFriendReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactData NewFriendData = 3;
    if (has_newfrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newfrienddata());
    }

    // optional .ContactGroup MyFriendGroup = 4;
    if (has_myfriendgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfriendgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddFriendReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddFriendReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddFriendReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddFriendReply::MergeFrom(const ContactRpcAddFriendReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newfrienddata()) {
      mutable_newfrienddata()->::ContactData::MergeFrom(from.newfrienddata());
    }
    if (from.has_myfriendgroup()) {
      mutable_myfriendgroup()->::ContactGroup::MergeFrom(from.myfriendgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddFriendReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddFriendReply::CopyFrom(const ContactRpcAddFriendReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddFriendReply::IsInitialized() const {

  return true;
}

void ContactRpcAddFriendReply::Swap(ContactRpcAddFriendReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newfrienddata_, other->newfrienddata_);
    std::swap(myfriendgroup_, other->myfriendgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddFriendReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddFriendReply_descriptor_;
  metadata.reflection = ContactRpcAddFriendReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcCancelRelationShipAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcCancelRelationShipAsk::ContactRpcCancelRelationShipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcCancelRelationShipAsk::InitAsDefaultInstance() {
}

ContactRpcCancelRelationShipAsk::ContactRpcCancelRelationShipAsk(const ContactRpcCancelRelationShipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcCancelRelationShipAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcCancelRelationShipAsk::~ContactRpcCancelRelationShipAsk() {
  SharedDtor();
}

void ContactRpcCancelRelationShipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcCancelRelationShipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcCancelRelationShipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcCancelRelationShipAsk_descriptor_;
}

const ContactRpcCancelRelationShipAsk& ContactRpcCancelRelationShipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcCancelRelationShipAsk* ContactRpcCancelRelationShipAsk::default_instance_ = NULL;

ContactRpcCancelRelationShipAsk* ContactRpcCancelRelationShipAsk::New() const {
  return new ContactRpcCancelRelationShipAsk;
}

void ContactRpcCancelRelationShipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcCancelRelationShipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcCancelRelationShipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcCancelRelationShipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcCancelRelationShipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcCancelRelationShipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcCancelRelationShipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcCancelRelationShipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcCancelRelationShipAsk::MergeFrom(const ContactRpcCancelRelationShipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcCancelRelationShipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcCancelRelationShipAsk::CopyFrom(const ContactRpcCancelRelationShipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcCancelRelationShipAsk::IsInitialized() const {

  return true;
}

void ContactRpcCancelRelationShipAsk::Swap(ContactRpcCancelRelationShipAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcCancelRelationShipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcCancelRelationShipAsk_descriptor_;
  metadata.reflection = ContactRpcCancelRelationShipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcCancelRelationShipReply::kResultFieldNumber;
const int ContactRpcCancelRelationShipReply::kDeleteRoleIdFieldNumber;
const int ContactRpcCancelRelationShipReply::kContactGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcCancelRelationShipReply::ContactRpcCancelRelationShipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcCancelRelationShipReply::InitAsDefaultInstance() {
}

ContactRpcCancelRelationShipReply::ContactRpcCancelRelationShipReply(const ContactRpcCancelRelationShipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcCancelRelationShipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  deleteroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcCancelRelationShipReply::~ContactRpcCancelRelationShipReply() {
  SharedDtor();
}

void ContactRpcCancelRelationShipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcCancelRelationShipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcCancelRelationShipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcCancelRelationShipReply_descriptor_;
}

const ContactRpcCancelRelationShipReply& ContactRpcCancelRelationShipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcCancelRelationShipReply* ContactRpcCancelRelationShipReply::default_instance_ = NULL;

ContactRpcCancelRelationShipReply* ContactRpcCancelRelationShipReply::New() const {
  return new ContactRpcCancelRelationShipReply;
}

void ContactRpcCancelRelationShipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    deleteroleid_ = GOOGLE_ULONGLONG(0);
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcCancelRelationShipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeleteRoleId;
        break;
      }

      // optional uint64 DeleteRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeleteRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deleteroleid_)));
          set_has_deleteroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContactGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcCancelRelationShipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 DeleteRoleId = 2 [default = 0];
  if (has_deleteroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->deleteroleid(), output);
  }

  // repeated .ContactGroup ContactGroups = 3;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contactgroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcCancelRelationShipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 DeleteRoleId = 2 [default = 0];
  if (has_deleteroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->deleteroleid(), target);
  }

  // repeated .ContactGroup ContactGroups = 3;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contactgroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcCancelRelationShipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 DeleteRoleId = 2 [default = 0];
    if (has_deleteroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deleteroleid());
    }

  }
  // repeated .ContactGroup ContactGroups = 3;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcCancelRelationShipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcCancelRelationShipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcCancelRelationShipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcCancelRelationShipReply::MergeFrom(const ContactRpcCancelRelationShipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_deleteroleid()) {
      set_deleteroleid(from.deleteroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcCancelRelationShipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcCancelRelationShipReply::CopyFrom(const ContactRpcCancelRelationShipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcCancelRelationShipReply::IsInitialized() const {

  return true;
}

void ContactRpcCancelRelationShipReply::Swap(ContactRpcCancelRelationShipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(deleteroleid_, other->deleteroleid_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcCancelRelationShipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcCancelRelationShipReply_descriptor_;
  metadata.reflection = ContactRpcCancelRelationShipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddBlackListAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddBlackListAsk::ContactRpcAddBlackListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddBlackListAsk::InitAsDefaultInstance() {
}

ContactRpcAddBlackListAsk::ContactRpcAddBlackListAsk(const ContactRpcAddBlackListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddBlackListAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddBlackListAsk::~ContactRpcAddBlackListAsk() {
  SharedDtor();
}

void ContactRpcAddBlackListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAddBlackListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddBlackListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddBlackListAsk_descriptor_;
}

const ContactRpcAddBlackListAsk& ContactRpcAddBlackListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddBlackListAsk* ContactRpcAddBlackListAsk::default_instance_ = NULL;

ContactRpcAddBlackListAsk* ContactRpcAddBlackListAsk::New() const {
  return new ContactRpcAddBlackListAsk;
}

void ContactRpcAddBlackListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddBlackListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddBlackListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddBlackListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddBlackListAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddBlackListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddBlackListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddBlackListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddBlackListAsk::MergeFrom(const ContactRpcAddBlackListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddBlackListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddBlackListAsk::CopyFrom(const ContactRpcAddBlackListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddBlackListAsk::IsInitialized() const {

  return true;
}

void ContactRpcAddBlackListAsk::Swap(ContactRpcAddBlackListAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddBlackListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddBlackListAsk_descriptor_;
  metadata.reflection = ContactRpcAddBlackListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddBlackListReply::kResultFieldNumber;
const int ContactRpcAddBlackListReply::kContactGroupsFieldNumber;
const int ContactRpcAddBlackListReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddBlackListReply::ContactRpcAddBlackListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddBlackListReply::InitAsDefaultInstance() {
}

ContactRpcAddBlackListReply::ContactRpcAddBlackListReply(const ContactRpcAddBlackListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddBlackListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddBlackListReply::~ContactRpcAddBlackListReply() {
  SharedDtor();
}

void ContactRpcAddBlackListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAddBlackListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddBlackListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddBlackListReply_descriptor_;
}

const ContactRpcAddBlackListReply& ContactRpcAddBlackListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddBlackListReply* ContactRpcAddBlackListReply::default_instance_ = NULL;

ContactRpcAddBlackListReply* ContactRpcAddBlackListReply::New() const {
  return new ContactRpcAddBlackListReply;
}

void ContactRpcAddBlackListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddBlackListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectTag(24)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddBlackListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  // optional uint64 RoleId = 3 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddBlackListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  // optional uint64 RoleId = 3 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddBlackListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 RoleId = 3 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddBlackListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddBlackListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddBlackListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddBlackListReply::MergeFrom(const ContactRpcAddBlackListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddBlackListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddBlackListReply::CopyFrom(const ContactRpcAddBlackListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddBlackListReply::IsInitialized() const {

  return true;
}

void ContactRpcAddBlackListReply::Swap(ContactRpcAddBlackListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddBlackListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddBlackListReply_descriptor_;
  metadata.reflection = ContactRpcAddBlackListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcSyncAddressBookAsk::ContactRpcSyncAddressBookAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSyncAddressBookAsk::InitAsDefaultInstance() {
}

ContactRpcSyncAddressBookAsk::ContactRpcSyncAddressBookAsk(const ContactRpcSyncAddressBookAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSyncAddressBookAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSyncAddressBookAsk::~ContactRpcSyncAddressBookAsk() {
  SharedDtor();
}

void ContactRpcSyncAddressBookAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSyncAddressBookAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSyncAddressBookAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSyncAddressBookAsk_descriptor_;
}

const ContactRpcSyncAddressBookAsk& ContactRpcSyncAddressBookAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSyncAddressBookAsk* ContactRpcSyncAddressBookAsk::default_instance_ = NULL;

ContactRpcSyncAddressBookAsk* ContactRpcSyncAddressBookAsk::New() const {
  return new ContactRpcSyncAddressBookAsk;
}

void ContactRpcSyncAddressBookAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSyncAddressBookAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcSyncAddressBookAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSyncAddressBookAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSyncAddressBookAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSyncAddressBookAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSyncAddressBookAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSyncAddressBookAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSyncAddressBookAsk::MergeFrom(const ContactRpcSyncAddressBookAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSyncAddressBookAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSyncAddressBookAsk::CopyFrom(const ContactRpcSyncAddressBookAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSyncAddressBookAsk::IsInitialized() const {

  return true;
}

void ContactRpcSyncAddressBookAsk::Swap(ContactRpcSyncAddressBookAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSyncAddressBookAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSyncAddressBookAsk_descriptor_;
  metadata.reflection = ContactRpcSyncAddressBookAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSyncAddressBookReply::kResultFieldNumber;
const int ContactRpcSyncAddressBookReply::kAddressBockFieldNumber;
#endif  // !_MSC_VER

ContactRpcSyncAddressBookReply::ContactRpcSyncAddressBookReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSyncAddressBookReply::InitAsDefaultInstance() {
  addressbock_ = const_cast< ::AddressBook*>(&::AddressBook::default_instance());
}

ContactRpcSyncAddressBookReply::ContactRpcSyncAddressBookReply(const ContactRpcSyncAddressBookReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSyncAddressBookReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  addressbock_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSyncAddressBookReply::~ContactRpcSyncAddressBookReply() {
  SharedDtor();
}

void ContactRpcSyncAddressBookReply::SharedDtor() {
  if (this != default_instance_) {
    delete addressbock_;
  }
}

void ContactRpcSyncAddressBookReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSyncAddressBookReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSyncAddressBookReply_descriptor_;
}

const ContactRpcSyncAddressBookReply& ContactRpcSyncAddressBookReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSyncAddressBookReply* ContactRpcSyncAddressBookReply::default_instance_ = NULL;

ContactRpcSyncAddressBookReply* ContactRpcSyncAddressBookReply::New() const {
  return new ContactRpcSyncAddressBookReply;
}

void ContactRpcSyncAddressBookReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_addressbock()) {
      if (addressbock_ != NULL) addressbock_->::AddressBook::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSyncAddressBookReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AddressBock;
        break;
      }

      // optional .AddressBook AddressBock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddressBock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addressbock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSyncAddressBookReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .AddressBook AddressBock = 2;
  if (has_addressbock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addressbock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSyncAddressBookReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .AddressBook AddressBock = 2;
  if (has_addressbock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addressbock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSyncAddressBookReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .AddressBook AddressBock = 2;
    if (has_addressbock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addressbock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSyncAddressBookReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSyncAddressBookReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSyncAddressBookReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSyncAddressBookReply::MergeFrom(const ContactRpcSyncAddressBookReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_addressbock()) {
      mutable_addressbock()->::AddressBook::MergeFrom(from.addressbock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSyncAddressBookReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSyncAddressBookReply::CopyFrom(const ContactRpcSyncAddressBookReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSyncAddressBookReply::IsInitialized() const {

  return true;
}

void ContactRpcSyncAddressBookReply::Swap(ContactRpcSyncAddressBookReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(addressbock_, other->addressbock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSyncAddressBookReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSyncAddressBookReply_descriptor_;
  metadata.reflection = ContactRpcSyncAddressBookReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcContactSettingAsk::kNewSettingFieldNumber;
#endif  // !_MSC_VER

ContactRpcContactSettingAsk::ContactRpcContactSettingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcContactSettingAsk::InitAsDefaultInstance() {
  newsetting_ = const_cast< ::ContactSetting*>(&::ContactSetting::default_instance());
}

ContactRpcContactSettingAsk::ContactRpcContactSettingAsk(const ContactRpcContactSettingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcContactSettingAsk::SharedCtor() {
  _cached_size_ = 0;
  newsetting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcContactSettingAsk::~ContactRpcContactSettingAsk() {
  SharedDtor();
}

void ContactRpcContactSettingAsk::SharedDtor() {
  if (this != default_instance_) {
    delete newsetting_;
  }
}

void ContactRpcContactSettingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcContactSettingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcContactSettingAsk_descriptor_;
}

const ContactRpcContactSettingAsk& ContactRpcContactSettingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcContactSettingAsk* ContactRpcContactSettingAsk::default_instance_ = NULL;

ContactRpcContactSettingAsk* ContactRpcContactSettingAsk::New() const {
  return new ContactRpcContactSettingAsk;
}

void ContactRpcContactSettingAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newsetting()) {
      if (newsetting_ != NULL) newsetting_->::ContactSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcContactSettingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactSetting NewSetting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newsetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcContactSettingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactSetting NewSetting = 1;
  if (has_newsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newsetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcContactSettingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactSetting NewSetting = 1;
  if (has_newsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newsetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcContactSettingAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactSetting NewSetting = 1;
    if (has_newsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newsetting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcContactSettingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcContactSettingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcContactSettingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcContactSettingAsk::MergeFrom(const ContactRpcContactSettingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsetting()) {
      mutable_newsetting()->::ContactSetting::MergeFrom(from.newsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcContactSettingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcContactSettingAsk::CopyFrom(const ContactRpcContactSettingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcContactSettingAsk::IsInitialized() const {

  return true;
}

void ContactRpcContactSettingAsk::Swap(ContactRpcContactSettingAsk* other) {
  if (other != this) {
    std::swap(newsetting_, other->newsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcContactSettingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcContactSettingAsk_descriptor_;
  metadata.reflection = ContactRpcContactSettingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcContactSettingReply::kResultFieldNumber;
const int ContactRpcContactSettingReply::kNewSettingFieldNumber;
#endif  // !_MSC_VER

ContactRpcContactSettingReply::ContactRpcContactSettingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcContactSettingReply::InitAsDefaultInstance() {
  newsetting_ = const_cast< ::ContactSetting*>(&::ContactSetting::default_instance());
}

ContactRpcContactSettingReply::ContactRpcContactSettingReply(const ContactRpcContactSettingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcContactSettingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  newsetting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcContactSettingReply::~ContactRpcContactSettingReply() {
  SharedDtor();
}

void ContactRpcContactSettingReply::SharedDtor() {
  if (this != default_instance_) {
    delete newsetting_;
  }
}

void ContactRpcContactSettingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcContactSettingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcContactSettingReply_descriptor_;
}

const ContactRpcContactSettingReply& ContactRpcContactSettingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcContactSettingReply* ContactRpcContactSettingReply::default_instance_ = NULL;

ContactRpcContactSettingReply* ContactRpcContactSettingReply::New() const {
  return new ContactRpcContactSettingReply;
}

void ContactRpcContactSettingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_newsetting()) {
      if (newsetting_ != NULL) newsetting_->::ContactSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcContactSettingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewSetting;
        break;
      }

      // optional .ContactSetting NewSetting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newsetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcContactSettingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactSetting NewSetting = 2;
  if (has_newsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newsetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcContactSettingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactSetting NewSetting = 2;
  if (has_newsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newsetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcContactSettingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactSetting NewSetting = 2;
    if (has_newsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newsetting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcContactSettingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcContactSettingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcContactSettingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcContactSettingReply::MergeFrom(const ContactRpcContactSettingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newsetting()) {
      mutable_newsetting()->::ContactSetting::MergeFrom(from.newsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcContactSettingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcContactSettingReply::CopyFrom(const ContactRpcContactSettingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcContactSettingReply::IsInitialized() const {

  return true;
}

void ContactRpcContactSettingReply::Swap(ContactRpcContactSettingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newsetting_, other->newsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcContactSettingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcContactSettingReply_descriptor_;
  metadata.reflection = ContactRpcContactSettingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcCreateFriendGroupAsk::kGroupNameFieldNumber;
const int ContactRpcCreateFriendGroupAsk::kRoleIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcCreateFriendGroupAsk::ContactRpcCreateFriendGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcCreateFriendGroupAsk::InitAsDefaultInstance() {
}

ContactRpcCreateFriendGroupAsk::ContactRpcCreateFriendGroupAsk(const ContactRpcCreateFriendGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcCreateFriendGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcCreateFriendGroupAsk::~ContactRpcCreateFriendGroupAsk() {
  SharedDtor();
}

void ContactRpcCreateFriendGroupAsk::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void ContactRpcCreateFriendGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcCreateFriendGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcCreateFriendGroupAsk_descriptor_;
}

const ContactRpcCreateFriendGroupAsk& ContactRpcCreateFriendGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcCreateFriendGroupAsk* ContactRpcCreateFriendGroupAsk::default_instance_ = NULL;

ContactRpcCreateFriendGroupAsk* ContactRpcCreateFriendGroupAsk::New() const {
  return new ContactRpcCreateFriendGroupAsk;
}

void ContactRpcCreateFriendGroupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  roleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcCreateFriendGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleIds;
        break;
      }

      // repeated uint64 RoleIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_roleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcCreateFriendGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // repeated uint64 RoleIds = 2;
  for (int i = 0; i < this->roleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->roleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcCreateFriendGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // repeated uint64 RoleIds = 2;
  for (int i = 0; i < this->roleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->roleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcCreateFriendGroupAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated uint64 RoleIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleids(i));
    }
    total_size += 1 * this->roleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcCreateFriendGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcCreateFriendGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcCreateFriendGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcCreateFriendGroupAsk::MergeFrom(const ContactRpcCreateFriendGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleids_.MergeFrom(from.roleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcCreateFriendGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcCreateFriendGroupAsk::CopyFrom(const ContactRpcCreateFriendGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcCreateFriendGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcCreateFriendGroupAsk::Swap(ContactRpcCreateFriendGroupAsk* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    roleids_.Swap(&other->roleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcCreateFriendGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcCreateFriendGroupAsk_descriptor_;
  metadata.reflection = ContactRpcCreateFriendGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcCreateFriendGroupReply::kResultFieldNumber;
const int ContactRpcCreateFriendGroupReply::kContactGroupsFieldNumber;
const int ContactRpcCreateFriendGroupReply::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcCreateFriendGroupReply::ContactRpcCreateFriendGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcCreateFriendGroupReply::InitAsDefaultInstance() {
}

ContactRpcCreateFriendGroupReply::ContactRpcCreateFriendGroupReply(const ContactRpcCreateFriendGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcCreateFriendGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcCreateFriendGroupReply::~ContactRpcCreateFriendGroupReply() {
  SharedDtor();
}

void ContactRpcCreateFriendGroupReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcCreateFriendGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcCreateFriendGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcCreateFriendGroupReply_descriptor_;
}

const ContactRpcCreateFriendGroupReply& ContactRpcCreateFriendGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcCreateFriendGroupReply* ContactRpcCreateFriendGroupReply::default_instance_ = NULL;

ContactRpcCreateFriendGroupReply* ContactRpcCreateFriendGroupReply::New() const {
  return new ContactRpcCreateFriendGroupReply;
}

void ContactRpcCreateFriendGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  contactgroups_.Clear();
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcCreateFriendGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectTag(24)) goto parse_GroupIds;
        break;
      }

      // repeated int32 GroupIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcCreateFriendGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  // repeated int32 GroupIds = 3;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcCreateFriendGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  // repeated int32 GroupIds = 3;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcCreateFriendGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  // repeated int32 GroupIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcCreateFriendGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcCreateFriendGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcCreateFriendGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcCreateFriendGroupReply::MergeFrom(const ContactRpcCreateFriendGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcCreateFriendGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcCreateFriendGroupReply::CopyFrom(const ContactRpcCreateFriendGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcCreateFriendGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcCreateFriendGroupReply::Swap(ContactRpcCreateFriendGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contactgroups_.Swap(&other->contactgroups_);
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcCreateFriendGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcCreateFriendGroupReply_descriptor_;
  metadata.reflection = ContactRpcCreateFriendGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcMoveToFriendGroupAsk::kRoleIdsFieldNumber;
const int ContactRpcMoveToFriendGroupAsk::kFromGroupIdFieldNumber;
const int ContactRpcMoveToFriendGroupAsk::kToGroupIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcMoveToFriendGroupAsk::ContactRpcMoveToFriendGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcMoveToFriendGroupAsk::InitAsDefaultInstance() {
}

ContactRpcMoveToFriendGroupAsk::ContactRpcMoveToFriendGroupAsk(const ContactRpcMoveToFriendGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcMoveToFriendGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  fromgroupid_ = -1;
  togroupid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcMoveToFriendGroupAsk::~ContactRpcMoveToFriendGroupAsk() {
  SharedDtor();
}

void ContactRpcMoveToFriendGroupAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcMoveToFriendGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcMoveToFriendGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcMoveToFriendGroupAsk_descriptor_;
}

const ContactRpcMoveToFriendGroupAsk& ContactRpcMoveToFriendGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcMoveToFriendGroupAsk* ContactRpcMoveToFriendGroupAsk::default_instance_ = NULL;

ContactRpcMoveToFriendGroupAsk* ContactRpcMoveToFriendGroupAsk::New() const {
  return new ContactRpcMoveToFriendGroupAsk;
}

void ContactRpcMoveToFriendGroupAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fromgroupid_ = -1;
    togroupid_ = -1;
  }
  roleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcMoveToFriendGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 RoleIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_roleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_RoleIds;
        if (input->ExpectTag(16)) goto parse_FromGroupId;
        break;
      }

      // optional int32 FromGroupId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromgroupid_)));
          set_has_fromgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ToGroupId;
        break;
      }

      // optional int32 ToGroupId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &togroupid_)));
          set_has_togroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcMoveToFriendGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 RoleIds = 1;
  for (int i = 0; i < this->roleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->roleids(i), output);
  }

  // optional int32 FromGroupId = 2 [default = -1];
  if (has_fromgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromgroupid(), output);
  }

  // optional int32 ToGroupId = 3 [default = -1];
  if (has_togroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->togroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcMoveToFriendGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 RoleIds = 1;
  for (int i = 0; i < this->roleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->roleids(i), target);
  }

  // optional int32 FromGroupId = 2 [default = -1];
  if (has_fromgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromgroupid(), target);
  }

  // optional int32 ToGroupId = 3 [default = -1];
  if (has_togroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->togroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcMoveToFriendGroupAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 FromGroupId = 2 [default = -1];
    if (has_fromgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromgroupid());
    }

    // optional int32 ToGroupId = 3 [default = -1];
    if (has_togroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->togroupid());
    }

  }
  // repeated uint64 RoleIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleids(i));
    }
    total_size += 1 * this->roleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcMoveToFriendGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcMoveToFriendGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcMoveToFriendGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcMoveToFriendGroupAsk::MergeFrom(const ContactRpcMoveToFriendGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleids_.MergeFrom(from.roleids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fromgroupid()) {
      set_fromgroupid(from.fromgroupid());
    }
    if (from.has_togroupid()) {
      set_togroupid(from.togroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcMoveToFriendGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcMoveToFriendGroupAsk::CopyFrom(const ContactRpcMoveToFriendGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcMoveToFriendGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcMoveToFriendGroupAsk::Swap(ContactRpcMoveToFriendGroupAsk* other) {
  if (other != this) {
    roleids_.Swap(&other->roleids_);
    std::swap(fromgroupid_, other->fromgroupid_);
    std::swap(togroupid_, other->togroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcMoveToFriendGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcMoveToFriendGroupAsk_descriptor_;
  metadata.reflection = ContactRpcMoveToFriendGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcMoveToFriendGroupReply::kResultFieldNumber;
const int ContactRpcMoveToFriendGroupReply::kChangeGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcMoveToFriendGroupReply::ContactRpcMoveToFriendGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcMoveToFriendGroupReply::InitAsDefaultInstance() {
}

ContactRpcMoveToFriendGroupReply::ContactRpcMoveToFriendGroupReply(const ContactRpcMoveToFriendGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcMoveToFriendGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcMoveToFriendGroupReply::~ContactRpcMoveToFriendGroupReply() {
  SharedDtor();
}

void ContactRpcMoveToFriendGroupReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcMoveToFriendGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcMoveToFriendGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcMoveToFriendGroupReply_descriptor_;
}

const ContactRpcMoveToFriendGroupReply& ContactRpcMoveToFriendGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcMoveToFriendGroupReply* ContactRpcMoveToFriendGroupReply::default_instance_ = NULL;

ContactRpcMoveToFriendGroupReply* ContactRpcMoveToFriendGroupReply::New() const {
  return new ContactRpcMoveToFriendGroupReply;
}

void ContactRpcMoveToFriendGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  changegroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcMoveToFriendGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChangeGroup;
        break;
      }

      // repeated .ContactGroup ChangeGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changegroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChangeGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcMoveToFriendGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ChangeGroup = 2;
  for (int i = 0; i < this->changegroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->changegroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcMoveToFriendGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ChangeGroup = 2;
  for (int i = 0; i < this->changegroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->changegroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcMoveToFriendGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactGroup ChangeGroup = 2;
  total_size += 1 * this->changegroup_size();
  for (int i = 0; i < this->changegroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changegroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcMoveToFriendGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcMoveToFriendGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcMoveToFriendGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcMoveToFriendGroupReply::MergeFrom(const ContactRpcMoveToFriendGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  changegroup_.MergeFrom(from.changegroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcMoveToFriendGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcMoveToFriendGroupReply::CopyFrom(const ContactRpcMoveToFriendGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcMoveToFriendGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcMoveToFriendGroupReply::Swap(ContactRpcMoveToFriendGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    changegroup_.Swap(&other->changegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcMoveToFriendGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcMoveToFriendGroupReply_descriptor_;
  metadata.reflection = ContactRpcMoveToFriendGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRemoveFriendGroupAsk::kRemoveGroupIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcRemoveFriendGroupAsk::ContactRpcRemoveFriendGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRemoveFriendGroupAsk::InitAsDefaultInstance() {
}

ContactRpcRemoveFriendGroupAsk::ContactRpcRemoveFriendGroupAsk(const ContactRpcRemoveFriendGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRemoveFriendGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  removegroupid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRemoveFriendGroupAsk::~ContactRpcRemoveFriendGroupAsk() {
  SharedDtor();
}

void ContactRpcRemoveFriendGroupAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRemoveFriendGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRemoveFriendGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRemoveFriendGroupAsk_descriptor_;
}

const ContactRpcRemoveFriendGroupAsk& ContactRpcRemoveFriendGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRemoveFriendGroupAsk* ContactRpcRemoveFriendGroupAsk::default_instance_ = NULL;

ContactRpcRemoveFriendGroupAsk* ContactRpcRemoveFriendGroupAsk::New() const {
  return new ContactRpcRemoveFriendGroupAsk;
}

void ContactRpcRemoveFriendGroupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    removegroupid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRemoveFriendGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RemoveGroupId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removegroupid_)));
          set_has_removegroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRemoveFriendGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RemoveGroupId = 1 [default = -1];
  if (has_removegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->removegroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRemoveFriendGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RemoveGroupId = 1 [default = -1];
  if (has_removegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->removegroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRemoveFriendGroupAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RemoveGroupId = 1 [default = -1];
    if (has_removegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->removegroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRemoveFriendGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRemoveFriendGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRemoveFriendGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRemoveFriendGroupAsk::MergeFrom(const ContactRpcRemoveFriendGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_removegroupid()) {
      set_removegroupid(from.removegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRemoveFriendGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRemoveFriendGroupAsk::CopyFrom(const ContactRpcRemoveFriendGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRemoveFriendGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcRemoveFriendGroupAsk::Swap(ContactRpcRemoveFriendGroupAsk* other) {
  if (other != this) {
    std::swap(removegroupid_, other->removegroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRemoveFriendGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRemoveFriendGroupAsk_descriptor_;
  metadata.reflection = ContactRpcRemoveFriendGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRemoveFriendGroupReply::kResultFieldNumber;
const int ContactRpcRemoveFriendGroupReply::kMyFriendGroupFieldNumber;
const int ContactRpcRemoveFriendGroupReply::kRemoveGroupIdFieldNumber;
const int ContactRpcRemoveFriendGroupReply::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcRemoveFriendGroupReply::ContactRpcRemoveFriendGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRemoveFriendGroupReply::InitAsDefaultInstance() {
  myfriendgroup_ = const_cast< ::ContactGroup*>(&::ContactGroup::default_instance());
}

ContactRpcRemoveFriendGroupReply::ContactRpcRemoveFriendGroupReply(const ContactRpcRemoveFriendGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRemoveFriendGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  myfriendgroup_ = NULL;
  removegroupid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRemoveFriendGroupReply::~ContactRpcRemoveFriendGroupReply() {
  SharedDtor();
}

void ContactRpcRemoveFriendGroupReply::SharedDtor() {
  if (this != default_instance_) {
    delete myfriendgroup_;
  }
}

void ContactRpcRemoveFriendGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRemoveFriendGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRemoveFriendGroupReply_descriptor_;
}

const ContactRpcRemoveFriendGroupReply& ContactRpcRemoveFriendGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRemoveFriendGroupReply* ContactRpcRemoveFriendGroupReply::default_instance_ = NULL;

ContactRpcRemoveFriendGroupReply* ContactRpcRemoveFriendGroupReply::New() const {
  return new ContactRpcRemoveFriendGroupReply;
}

void ContactRpcRemoveFriendGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_myfriendgroup()) {
      if (myfriendgroup_ != NULL) myfriendgroup_->::ContactGroup::Clear();
    }
    removegroupid_ = -1;
  }
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRemoveFriendGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MyFriendGroup;
        break;
      }

      // optional .ContactGroup MyFriendGroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RemoveGroupId;
        break;
      }

      // optional int32 RemoveGroupId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemoveGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removegroupid_)));
          set_has_removegroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GroupIds;
        break;
      }

      // repeated int32 GroupIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRemoveFriendGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactGroup MyFriendGroup = 3;
  if (has_myfriendgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->myfriendgroup(), output);
  }

  // optional int32 RemoveGroupId = 4 [default = -1];
  if (has_removegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->removegroupid(), output);
  }

  // repeated int32 GroupIds = 5;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRemoveFriendGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactGroup MyFriendGroup = 3;
  if (has_myfriendgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->myfriendgroup(), target);
  }

  // optional int32 RemoveGroupId = 4 [default = -1];
  if (has_removegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->removegroupid(), target);
  }

  // repeated int32 GroupIds = 5;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRemoveFriendGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactGroup MyFriendGroup = 3;
    if (has_myfriendgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfriendgroup());
    }

    // optional int32 RemoveGroupId = 4 [default = -1];
    if (has_removegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->removegroupid());
    }

  }
  // repeated int32 GroupIds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRemoveFriendGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRemoveFriendGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRemoveFriendGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRemoveFriendGroupReply::MergeFrom(const ContactRpcRemoveFriendGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_myfriendgroup()) {
      mutable_myfriendgroup()->::ContactGroup::MergeFrom(from.myfriendgroup());
    }
    if (from.has_removegroupid()) {
      set_removegroupid(from.removegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRemoveFriendGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRemoveFriendGroupReply::CopyFrom(const ContactRpcRemoveFriendGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRemoveFriendGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcRemoveFriendGroupReply::Swap(ContactRpcRemoveFriendGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(myfriendgroup_, other->myfriendgroup_);
    std::swap(removegroupid_, other->removegroupid_);
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRemoveFriendGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRemoveFriendGroupReply_descriptor_;
  metadata.reflection = ContactRpcRemoveFriendGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRenameGroupAsk::kNameFieldNumber;
const int ContactRpcRenameGroupAsk::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcRenameGroupAsk::ContactRpcRenameGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRenameGroupAsk::InitAsDefaultInstance() {
}

ContactRpcRenameGroupAsk::ContactRpcRenameGroupAsk(const ContactRpcRenameGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRenameGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRenameGroupAsk::~ContactRpcRenameGroupAsk() {
  SharedDtor();
}

void ContactRpcRenameGroupAsk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ContactRpcRenameGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRenameGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRenameGroupAsk_descriptor_;
}

const ContactRpcRenameGroupAsk& ContactRpcRenameGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRenameGroupAsk* ContactRpcRenameGroupAsk::default_instance_ = NULL;

ContactRpcRenameGroupAsk* ContactRpcRenameGroupAsk::New() const {
  return new ContactRpcRenameGroupAsk;
}

void ContactRpcRenameGroupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    groupid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRenameGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional int32 GroupId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRenameGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRenameGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRenameGroupAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 GroupId = 2 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRenameGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRenameGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRenameGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRenameGroupAsk::MergeFrom(const ContactRpcRenameGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRenameGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRenameGroupAsk::CopyFrom(const ContactRpcRenameGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRenameGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcRenameGroupAsk::Swap(ContactRpcRenameGroupAsk* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRenameGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRenameGroupAsk_descriptor_;
  metadata.reflection = ContactRpcRenameGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRenameGroupReply::kResultFieldNumber;
const int ContactRpcRenameGroupReply::kDefineGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcRenameGroupReply::ContactRpcRenameGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRenameGroupReply::InitAsDefaultInstance() {
  definegroup_ = const_cast< ::ContactGroup*>(&::ContactGroup::default_instance());
}

ContactRpcRenameGroupReply::ContactRpcRenameGroupReply(const ContactRpcRenameGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRenameGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  definegroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRenameGroupReply::~ContactRpcRenameGroupReply() {
  SharedDtor();
}

void ContactRpcRenameGroupReply::SharedDtor() {
  if (this != default_instance_) {
    delete definegroup_;
  }
}

void ContactRpcRenameGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRenameGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRenameGroupReply_descriptor_;
}

const ContactRpcRenameGroupReply& ContactRpcRenameGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRenameGroupReply* ContactRpcRenameGroupReply::default_instance_ = NULL;

ContactRpcRenameGroupReply* ContactRpcRenameGroupReply::New() const {
  return new ContactRpcRenameGroupReply;
}

void ContactRpcRenameGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_definegroup()) {
      if (definegroup_ != NULL) definegroup_->::ContactGroup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRenameGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DefineGroup;
        break;
      }

      // optional .ContactGroup DefineGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DefineGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_definegroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRenameGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactGroup DefineGroup = 2;
  if (has_definegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->definegroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRenameGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactGroup DefineGroup = 2;
  if (has_definegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->definegroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRenameGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactGroup DefineGroup = 2;
    if (has_definegroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->definegroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRenameGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRenameGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRenameGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRenameGroupReply::MergeFrom(const ContactRpcRenameGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_definegroup()) {
      mutable_definegroup()->::ContactGroup::MergeFrom(from.definegroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRenameGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRenameGroupReply::CopyFrom(const ContactRpcRenameGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRenameGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcRenameGroupReply::Swap(ContactRpcRenameGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(definegroup_, other->definegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRenameGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRenameGroupReply_descriptor_;
  metadata.reflection = ContactRpcRenameGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAgreeApplicationAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcAgreeApplicationAsk::ContactRpcAgreeApplicationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAgreeApplicationAsk::InitAsDefaultInstance() {
}

ContactRpcAgreeApplicationAsk::ContactRpcAgreeApplicationAsk(const ContactRpcAgreeApplicationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAgreeApplicationAsk::~ContactRpcAgreeApplicationAsk() {
  SharedDtor();
}

void ContactRpcAgreeApplicationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAgreeApplicationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAgreeApplicationAsk_descriptor_;
}

const ContactRpcAgreeApplicationAsk& ContactRpcAgreeApplicationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAgreeApplicationAsk* ContactRpcAgreeApplicationAsk::default_instance_ = NULL;

ContactRpcAgreeApplicationAsk* ContactRpcAgreeApplicationAsk::New() const {
  return new ContactRpcAgreeApplicationAsk;
}

void ContactRpcAgreeApplicationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAgreeApplicationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAgreeApplicationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAgreeApplicationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAgreeApplicationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAgreeApplicationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAgreeApplicationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAgreeApplicationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAgreeApplicationAsk::MergeFrom(const ContactRpcAgreeApplicationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAgreeApplicationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationAsk::CopyFrom(const ContactRpcAgreeApplicationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAgreeApplicationAsk::IsInitialized() const {

  return true;
}

void ContactRpcAgreeApplicationAsk::Swap(ContactRpcAgreeApplicationAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAgreeApplicationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAgreeApplicationAsk_descriptor_;
  metadata.reflection = ContactRpcAgreeApplicationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAgreeApplicationReply::kResultFieldNumber;
const int ContactRpcAgreeApplicationReply::kNewFriendDataFieldNumber;
const int ContactRpcAgreeApplicationReply::kMyFriendGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcAgreeApplicationReply::ContactRpcAgreeApplicationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAgreeApplicationReply::InitAsDefaultInstance() {
  newfrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcAgreeApplicationReply::ContactRpcAgreeApplicationReply(const ContactRpcAgreeApplicationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  newfrienddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAgreeApplicationReply::~ContactRpcAgreeApplicationReply() {
  SharedDtor();
}

void ContactRpcAgreeApplicationReply::SharedDtor() {
  if (this != default_instance_) {
    delete newfrienddata_;
  }
}

void ContactRpcAgreeApplicationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAgreeApplicationReply_descriptor_;
}

const ContactRpcAgreeApplicationReply& ContactRpcAgreeApplicationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAgreeApplicationReply* ContactRpcAgreeApplicationReply::default_instance_ = NULL;

ContactRpcAgreeApplicationReply* ContactRpcAgreeApplicationReply::New() const {
  return new ContactRpcAgreeApplicationReply;
}

void ContactRpcAgreeApplicationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_newfrienddata()) {
      if (newfrienddata_ != NULL) newfrienddata_->::ContactData::Clear();
    }
  }
  myfriendgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAgreeApplicationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewFriendData;
        break;
      }

      // optional .ContactData NewFriendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewFriendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MyFriendGroup;
        break;
      }

      // repeated .ContactGroup MyFriendGroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MyFriendGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAgreeApplicationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactData NewFriendData = 2;
  if (has_newfrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newfrienddata(), output);
  }

  // repeated .ContactGroup MyFriendGroup = 3;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->myfriendgroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAgreeApplicationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactData NewFriendData = 2;
  if (has_newfrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newfrienddata(), target);
  }

  // repeated .ContactGroup MyFriendGroup = 3;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->myfriendgroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAgreeApplicationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactData NewFriendData = 2;
    if (has_newfrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newfrienddata());
    }

  }
  // repeated .ContactGroup MyFriendGroup = 3;
  total_size += 1 * this->myfriendgroup_size();
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfriendgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAgreeApplicationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAgreeApplicationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAgreeApplicationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAgreeApplicationReply::MergeFrom(const ContactRpcAgreeApplicationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  myfriendgroup_.MergeFrom(from.myfriendgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newfrienddata()) {
      mutable_newfrienddata()->::ContactData::MergeFrom(from.newfrienddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAgreeApplicationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationReply::CopyFrom(const ContactRpcAgreeApplicationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAgreeApplicationReply::IsInitialized() const {

  return true;
}

void ContactRpcAgreeApplicationReply::Swap(ContactRpcAgreeApplicationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newfrienddata_, other->newfrienddata_);
    myfriendgroup_.Swap(&other->myfriendgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAgreeApplicationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAgreeApplicationReply_descriptor_;
  metadata.reflection = ContactRpcAgreeApplicationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAgreeApplicationNotifyNotify::kMyFriendGroupFieldNumber;
const int ContactRpcAgreeApplicationNotifyNotify::kNewFriendDataFieldNumber;
#endif  // !_MSC_VER

ContactRpcAgreeApplicationNotifyNotify::ContactRpcAgreeApplicationNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAgreeApplicationNotifyNotify::InitAsDefaultInstance() {
  newfrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcAgreeApplicationNotifyNotify::ContactRpcAgreeApplicationNotifyNotify(const ContactRpcAgreeApplicationNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  newfrienddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAgreeApplicationNotifyNotify::~ContactRpcAgreeApplicationNotifyNotify() {
  SharedDtor();
}

void ContactRpcAgreeApplicationNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete newfrienddata_;
  }
}

void ContactRpcAgreeApplicationNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAgreeApplicationNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAgreeApplicationNotifyNotify_descriptor_;
}

const ContactRpcAgreeApplicationNotifyNotify& ContactRpcAgreeApplicationNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAgreeApplicationNotifyNotify* ContactRpcAgreeApplicationNotifyNotify::default_instance_ = NULL;

ContactRpcAgreeApplicationNotifyNotify* ContactRpcAgreeApplicationNotifyNotify::New() const {
  return new ContactRpcAgreeApplicationNotifyNotify;
}

void ContactRpcAgreeApplicationNotifyNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_newfrienddata()) {
      if (newfrienddata_ != NULL) newfrienddata_->::ContactData::Clear();
    }
  }
  myfriendgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAgreeApplicationNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContactGroup MyFriendGroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MyFriendGroup;
        if (input->ExpectTag(18)) goto parse_NewFriendData;
        break;
      }

      // optional .ContactData NewFriendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewFriendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAgreeApplicationNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ContactGroup MyFriendGroup = 1;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myfriendgroup(i), output);
  }

  // optional .ContactData NewFriendData = 2;
  if (has_newfrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newfrienddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAgreeApplicationNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ContactGroup MyFriendGroup = 1;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myfriendgroup(i), target);
  }

  // optional .ContactData NewFriendData = 2;
  if (has_newfrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newfrienddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAgreeApplicationNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ContactData NewFriendData = 2;
    if (has_newfrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newfrienddata());
    }

  }
  // repeated .ContactGroup MyFriendGroup = 1;
  total_size += 1 * this->myfriendgroup_size();
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfriendgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAgreeApplicationNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAgreeApplicationNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAgreeApplicationNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAgreeApplicationNotifyNotify::MergeFrom(const ContactRpcAgreeApplicationNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  myfriendgroup_.MergeFrom(from.myfriendgroup_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_newfrienddata()) {
      mutable_newfrienddata()->::ContactData::MergeFrom(from.newfrienddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAgreeApplicationNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAgreeApplicationNotifyNotify::CopyFrom(const ContactRpcAgreeApplicationNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAgreeApplicationNotifyNotify::IsInitialized() const {

  return true;
}

void ContactRpcAgreeApplicationNotifyNotify::Swap(ContactRpcAgreeApplicationNotifyNotify* other) {
  if (other != this) {
    myfriendgroup_.Swap(&other->myfriendgroup_);
    std::swap(newfrienddata_, other->newfrienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAgreeApplicationNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAgreeApplicationNotifyNotify_descriptor_;
  metadata.reflection = ContactRpcAgreeApplicationNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSetFriendGroupAsk::kGroupIdFieldNumber;
const int ContactRpcSetFriendGroupAsk::kRoleIdsFieldNumber;
const int ContactRpcSetFriendGroupAsk::kGroupNameFieldNumber;
#endif  // !_MSC_VER

ContactRpcSetFriendGroupAsk::ContactRpcSetFriendGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSetFriendGroupAsk::InitAsDefaultInstance() {
}

ContactRpcSetFriendGroupAsk::ContactRpcSetFriendGroupAsk(const ContactRpcSetFriendGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSetFriendGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = -1;
  roleids_ = -1;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSetFriendGroupAsk::~ContactRpcSetFriendGroupAsk() {
  SharedDtor();
}

void ContactRpcSetFriendGroupAsk::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void ContactRpcSetFriendGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSetFriendGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSetFriendGroupAsk_descriptor_;
}

const ContactRpcSetFriendGroupAsk& ContactRpcSetFriendGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSetFriendGroupAsk* ContactRpcSetFriendGroupAsk::default_instance_ = NULL;

ContactRpcSetFriendGroupAsk* ContactRpcSetFriendGroupAsk::New() const {
  return new ContactRpcSetFriendGroupAsk;
}

void ContactRpcSetFriendGroupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = -1;
    roleids_ = -1;
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSetFriendGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleIds;
        break;
      }

      // optional int32 RoleIds = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleids_)));
          set_has_roleids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GroupName;
        break;
      }

      // optional bytes GroupName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSetFriendGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional int32 RoleIds = 2 [default = -1];
  if (has_roleids()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleids(), output);
  }

  // optional bytes GroupName = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->groupname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSetFriendGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional int32 RoleIds = 2 [default = -1];
  if (has_roleids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleids(), target);
  }

  // optional bytes GroupName = 3;
  if (has_groupname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->groupname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSetFriendGroupAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 RoleIds = 2 [default = -1];
    if (has_roleids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleids());
    }

    // optional bytes GroupName = 3;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSetFriendGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSetFriendGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSetFriendGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSetFriendGroupAsk::MergeFrom(const ContactRpcSetFriendGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_roleids()) {
      set_roleids(from.roleids());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSetFriendGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSetFriendGroupAsk::CopyFrom(const ContactRpcSetFriendGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSetFriendGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcSetFriendGroupAsk::Swap(ContactRpcSetFriendGroupAsk* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(roleids_, other->roleids_);
    std::swap(groupname_, other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSetFriendGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSetFriendGroupAsk_descriptor_;
  metadata.reflection = ContactRpcSetFriendGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSetFriendGroupReply::kResultFieldNumber;
const int ContactRpcSetFriendGroupReply::kFriendGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcSetFriendGroupReply::ContactRpcSetFriendGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSetFriendGroupReply::InitAsDefaultInstance() {
}

ContactRpcSetFriendGroupReply::ContactRpcSetFriendGroupReply(const ContactRpcSetFriendGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSetFriendGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSetFriendGroupReply::~ContactRpcSetFriendGroupReply() {
  SharedDtor();
}

void ContactRpcSetFriendGroupReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSetFriendGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSetFriendGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSetFriendGroupReply_descriptor_;
}

const ContactRpcSetFriendGroupReply& ContactRpcSetFriendGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSetFriendGroupReply* ContactRpcSetFriendGroupReply::default_instance_ = NULL;

ContactRpcSetFriendGroupReply* ContactRpcSetFriendGroupReply::New() const {
  return new ContactRpcSetFriendGroupReply;
}

void ContactRpcSetFriendGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  friendgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSetFriendGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FriendGroups;
        break;
      }

      // repeated .ContactGroup FriendGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FriendGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSetFriendGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup FriendGroups = 2;
  for (int i = 0; i < this->friendgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendgroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSetFriendGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup FriendGroups = 2;
  for (int i = 0; i < this->friendgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendgroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSetFriendGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactGroup FriendGroups = 2;
  total_size += 1 * this->friendgroups_size();
  for (int i = 0; i < this->friendgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSetFriendGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSetFriendGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSetFriendGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSetFriendGroupReply::MergeFrom(const ContactRpcSetFriendGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendgroups_.MergeFrom(from.friendgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSetFriendGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSetFriendGroupReply::CopyFrom(const ContactRpcSetFriendGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSetFriendGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcSetFriendGroupReply::Swap(ContactRpcSetFriendGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    friendgroups_.Swap(&other->friendgroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSetFriendGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSetFriendGroupReply_descriptor_;
  metadata.reflection = ContactRpcSetFriendGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcNewFriendNotify::kNewFriendDataFieldNumber;
const int ContactRpcNewFriendNotify::kMyFriendGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcNewFriendNotify::ContactRpcNewFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcNewFriendNotify::InitAsDefaultInstance() {
  newfrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
  myfriendgroup_ = const_cast< ::ContactGroup*>(&::ContactGroup::default_instance());
}

ContactRpcNewFriendNotify::ContactRpcNewFriendNotify(const ContactRpcNewFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcNewFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  newfrienddata_ = NULL;
  myfriendgroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcNewFriendNotify::~ContactRpcNewFriendNotify() {
  SharedDtor();
}

void ContactRpcNewFriendNotify::SharedDtor() {
  if (this != default_instance_) {
    delete newfrienddata_;
    delete myfriendgroup_;
  }
}

void ContactRpcNewFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcNewFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcNewFriendNotify_descriptor_;
}

const ContactRpcNewFriendNotify& ContactRpcNewFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcNewFriendNotify* ContactRpcNewFriendNotify::default_instance_ = NULL;

ContactRpcNewFriendNotify* ContactRpcNewFriendNotify::New() const {
  return new ContactRpcNewFriendNotify;
}

void ContactRpcNewFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newfrienddata()) {
      if (newfrienddata_ != NULL) newfrienddata_->::ContactData::Clear();
    }
    if (has_myfriendgroup()) {
      if (myfriendgroup_ != NULL) myfriendgroup_->::ContactGroup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcNewFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData NewFriendData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MyFriendGroup;
        break;
      }

      // optional .ContactGroup MyFriendGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcNewFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData NewFriendData = 1;
  if (has_newfrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newfrienddata(), output);
  }

  // optional .ContactGroup MyFriendGroup = 2;
  if (has_myfriendgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfriendgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcNewFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData NewFriendData = 1;
  if (has_newfrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newfrienddata(), target);
  }

  // optional .ContactGroup MyFriendGroup = 2;
  if (has_myfriendgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfriendgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcNewFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData NewFriendData = 1;
    if (has_newfrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newfrienddata());
    }

    // optional .ContactGroup MyFriendGroup = 2;
    if (has_myfriendgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfriendgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcNewFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcNewFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcNewFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcNewFriendNotify::MergeFrom(const ContactRpcNewFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newfrienddata()) {
      mutable_newfrienddata()->::ContactData::MergeFrom(from.newfrienddata());
    }
    if (from.has_myfriendgroup()) {
      mutable_myfriendgroup()->::ContactGroup::MergeFrom(from.myfriendgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcNewFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcNewFriendNotify::CopyFrom(const ContactRpcNewFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcNewFriendNotify::IsInitialized() const {

  return true;
}

void ContactRpcNewFriendNotify::Swap(ContactRpcNewFriendNotify* other) {
  if (other != this) {
    std::swap(newfrienddata_, other->newfrienddata_);
    std::swap(myfriendgroup_, other->myfriendgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcNewFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcNewFriendNotify_descriptor_;
  metadata.reflection = ContactRpcNewFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcApplyListNotify::kApplyFriendDataFieldNumber;
const int ContactRpcApplyListNotify::kApplyGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcApplyListNotify::ContactRpcApplyListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcApplyListNotify::InitAsDefaultInstance() {
  applyfrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcApplyListNotify::ContactRpcApplyListNotify(const ContactRpcApplyListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcApplyListNotify::SharedCtor() {
  _cached_size_ = 0;
  applyfrienddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcApplyListNotify::~ContactRpcApplyListNotify() {
  SharedDtor();
}

void ContactRpcApplyListNotify::SharedDtor() {
  if (this != default_instance_) {
    delete applyfrienddata_;
  }
}

void ContactRpcApplyListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcApplyListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcApplyListNotify_descriptor_;
}

const ContactRpcApplyListNotify& ContactRpcApplyListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcApplyListNotify* ContactRpcApplyListNotify::default_instance_ = NULL;

ContactRpcApplyListNotify* ContactRpcApplyListNotify::New() const {
  return new ContactRpcApplyListNotify;
}

void ContactRpcApplyListNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applyfrienddata()) {
      if (applyfrienddata_ != NULL) applyfrienddata_->::ContactData::Clear();
    }
  }
  applygroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcApplyListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData ApplyFriendData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ApplyGroups;
        break;
      }

      // repeated .ContactGroup ApplyGroups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ApplyGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applygroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ApplyGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcApplyListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData ApplyFriendData = 1;
  if (has_applyfrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyfrienddata(), output);
  }

  // repeated .ContactGroup ApplyGroups = 5;
  for (int i = 0; i < this->applygroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applygroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcApplyListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData ApplyFriendData = 1;
  if (has_applyfrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyfrienddata(), target);
  }

  // repeated .ContactGroup ApplyGroups = 5;
  for (int i = 0; i < this->applygroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applygroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcApplyListNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData ApplyFriendData = 1;
    if (has_applyfrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applyfrienddata());
    }

  }
  // repeated .ContactGroup ApplyGroups = 5;
  total_size += 1 * this->applygroups_size();
  for (int i = 0; i < this->applygroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applygroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcApplyListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcApplyListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcApplyListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcApplyListNotify::MergeFrom(const ContactRpcApplyListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  applygroups_.MergeFrom(from.applygroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyfrienddata()) {
      mutable_applyfrienddata()->::ContactData::MergeFrom(from.applyfrienddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcApplyListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcApplyListNotify::CopyFrom(const ContactRpcApplyListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcApplyListNotify::IsInitialized() const {

  return true;
}

void ContactRpcApplyListNotify::Swap(ContactRpcApplyListNotify* other) {
  if (other != this) {
    std::swap(applyfrienddata_, other->applyfrienddata_);
    applygroups_.Swap(&other->applygroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcApplyListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcApplyListNotify_descriptor_;
  metadata.reflection = ContactRpcApplyListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRejectApplyAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcRejectApplyAsk::ContactRpcRejectApplyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRejectApplyAsk::InitAsDefaultInstance() {
}

ContactRpcRejectApplyAsk::ContactRpcRejectApplyAsk(const ContactRpcRejectApplyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRejectApplyAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRejectApplyAsk::~ContactRpcRejectApplyAsk() {
  SharedDtor();
}

void ContactRpcRejectApplyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRejectApplyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRejectApplyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRejectApplyAsk_descriptor_;
}

const ContactRpcRejectApplyAsk& ContactRpcRejectApplyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRejectApplyAsk* ContactRpcRejectApplyAsk::default_instance_ = NULL;

ContactRpcRejectApplyAsk* ContactRpcRejectApplyAsk::New() const {
  return new ContactRpcRejectApplyAsk;
}

void ContactRpcRejectApplyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRejectApplyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRejectApplyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRejectApplyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRejectApplyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRejectApplyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRejectApplyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRejectApplyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRejectApplyAsk::MergeFrom(const ContactRpcRejectApplyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRejectApplyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRejectApplyAsk::CopyFrom(const ContactRpcRejectApplyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRejectApplyAsk::IsInitialized() const {

  return true;
}

void ContactRpcRejectApplyAsk::Swap(ContactRpcRejectApplyAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRejectApplyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRejectApplyAsk_descriptor_;
  metadata.reflection = ContactRpcRejectApplyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRejectApplyReply::kResultFieldNumber;
const int ContactRpcRejectApplyReply::kContactGroupsFieldNumber;
const int ContactRpcRejectApplyReply::kDeleteRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcRejectApplyReply::ContactRpcRejectApplyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRejectApplyReply::InitAsDefaultInstance() {
}

ContactRpcRejectApplyReply::ContactRpcRejectApplyReply(const ContactRpcRejectApplyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRejectApplyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  deleteroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRejectApplyReply::~ContactRpcRejectApplyReply() {
  SharedDtor();
}

void ContactRpcRejectApplyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRejectApplyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRejectApplyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRejectApplyReply_descriptor_;
}

const ContactRpcRejectApplyReply& ContactRpcRejectApplyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRejectApplyReply* ContactRpcRejectApplyReply::default_instance_ = NULL;

ContactRpcRejectApplyReply* ContactRpcRejectApplyReply::New() const {
  return new ContactRpcRejectApplyReply;
}

void ContactRpcRejectApplyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    deleteroleid_ = GOOGLE_ULONGLONG(0);
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRejectApplyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ContactGroups;
        if (input->ExpectTag(72)) goto parse_DeleteRoleId;
        break;
      }

      // optional uint64 DeleteRoleId = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeleteRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deleteroleid_)));
          set_has_deleteroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRejectApplyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ContactGroups = 8;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->contactgroups(i), output);
  }

  // optional uint64 DeleteRoleId = 9 [default = 0];
  if (has_deleteroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->deleteroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRejectApplyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ContactGroups = 8;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->contactgroups(i), target);
  }

  // optional uint64 DeleteRoleId = 9 [default = 0];
  if (has_deleteroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->deleteroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRejectApplyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 DeleteRoleId = 9 [default = 0];
    if (has_deleteroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deleteroleid());
    }

  }
  // repeated .ContactGroup ContactGroups = 8;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRejectApplyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRejectApplyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRejectApplyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRejectApplyReply::MergeFrom(const ContactRpcRejectApplyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_deleteroleid()) {
      set_deleteroleid(from.deleteroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRejectApplyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRejectApplyReply::CopyFrom(const ContactRpcRejectApplyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRejectApplyReply::IsInitialized() const {

  return true;
}

void ContactRpcRejectApplyReply::Swap(ContactRpcRejectApplyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(deleteroleid_, other->deleteroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRejectApplyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRejectApplyReply_descriptor_;
  metadata.reflection = ContactRpcRejectApplyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcBeRejectApplyNotify::kDeleteFriendDataFieldNumber;
#endif  // !_MSC_VER

ContactRpcBeRejectApplyNotify::ContactRpcBeRejectApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcBeRejectApplyNotify::InitAsDefaultInstance() {
  deletefrienddata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcBeRejectApplyNotify::ContactRpcBeRejectApplyNotify(const ContactRpcBeRejectApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcBeRejectApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  deletefrienddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcBeRejectApplyNotify::~ContactRpcBeRejectApplyNotify() {
  SharedDtor();
}

void ContactRpcBeRejectApplyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete deletefrienddata_;
  }
}

void ContactRpcBeRejectApplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcBeRejectApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcBeRejectApplyNotify_descriptor_;
}

const ContactRpcBeRejectApplyNotify& ContactRpcBeRejectApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcBeRejectApplyNotify* ContactRpcBeRejectApplyNotify::default_instance_ = NULL;

ContactRpcBeRejectApplyNotify* ContactRpcBeRejectApplyNotify::New() const {
  return new ContactRpcBeRejectApplyNotify;
}

void ContactRpcBeRejectApplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deletefrienddata()) {
      if (deletefrienddata_ != NULL) deletefrienddata_->::ContactData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcBeRejectApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData DeleteFriendData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletefrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcBeRejectApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData DeleteFriendData = 1;
  if (has_deletefrienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deletefrienddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcBeRejectApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData DeleteFriendData = 1;
  if (has_deletefrienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deletefrienddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcBeRejectApplyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData DeleteFriendData = 1;
    if (has_deletefrienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletefrienddata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcBeRejectApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcBeRejectApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcBeRejectApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcBeRejectApplyNotify::MergeFrom(const ContactRpcBeRejectApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deletefrienddata()) {
      mutable_deletefrienddata()->::ContactData::MergeFrom(from.deletefrienddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcBeRejectApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcBeRejectApplyNotify::CopyFrom(const ContactRpcBeRejectApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcBeRejectApplyNotify::IsInitialized() const {

  return true;
}

void ContactRpcBeRejectApplyNotify::Swap(ContactRpcBeRejectApplyNotify* other) {
  if (other != this) {
    std::swap(deletefrienddata_, other->deletefrienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcBeRejectApplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcBeRejectApplyNotify_descriptor_;
  metadata.reflection = ContactRpcBeRejectApplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcBeCancelRelationShipNotify::kDeleteRoleIdFieldNumber;
const int ContactRpcBeCancelRelationShipNotify::kContactGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcBeCancelRelationShipNotify::ContactRpcBeCancelRelationShipNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcBeCancelRelationShipNotify::InitAsDefaultInstance() {
}

ContactRpcBeCancelRelationShipNotify::ContactRpcBeCancelRelationShipNotify(const ContactRpcBeCancelRelationShipNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcBeCancelRelationShipNotify::SharedCtor() {
  _cached_size_ = 0;
  deleteroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcBeCancelRelationShipNotify::~ContactRpcBeCancelRelationShipNotify() {
  SharedDtor();
}

void ContactRpcBeCancelRelationShipNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcBeCancelRelationShipNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcBeCancelRelationShipNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcBeCancelRelationShipNotify_descriptor_;
}

const ContactRpcBeCancelRelationShipNotify& ContactRpcBeCancelRelationShipNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcBeCancelRelationShipNotify* ContactRpcBeCancelRelationShipNotify::default_instance_ = NULL;

ContactRpcBeCancelRelationShipNotify* ContactRpcBeCancelRelationShipNotify::New() const {
  return new ContactRpcBeCancelRelationShipNotify;
}

void ContactRpcBeCancelRelationShipNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deleteroleid_ = GOOGLE_ULONGLONG(0);
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcBeCancelRelationShipNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 DeleteRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deleteroleid_)));
          set_has_deleteroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcBeCancelRelationShipNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 DeleteRoleId = 1 [default = 0];
  if (has_deleteroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->deleteroleid(), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcBeCancelRelationShipNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 DeleteRoleId = 1 [default = 0];
  if (has_deleteroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->deleteroleid(), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcBeCancelRelationShipNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 DeleteRoleId = 1 [default = 0];
    if (has_deleteroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deleteroleid());
    }

  }
  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcBeCancelRelationShipNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcBeCancelRelationShipNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcBeCancelRelationShipNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcBeCancelRelationShipNotify::MergeFrom(const ContactRpcBeCancelRelationShipNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deleteroleid()) {
      set_deleteroleid(from.deleteroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcBeCancelRelationShipNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcBeCancelRelationShipNotify::CopyFrom(const ContactRpcBeCancelRelationShipNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcBeCancelRelationShipNotify::IsInitialized() const {

  return true;
}

void ContactRpcBeCancelRelationShipNotify::Swap(ContactRpcBeCancelRelationShipNotify* other) {
  if (other != this) {
    std::swap(deleteroleid_, other->deleteroleid_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcBeCancelRelationShipNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcBeCancelRelationShipNotify_descriptor_;
  metadata.reflection = ContactRpcBeCancelRelationShipNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcBeAddBlackListNotify::kRoleIdFieldNumber;
const int ContactRpcBeAddBlackListNotify::kContactGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcBeAddBlackListNotify::ContactRpcBeAddBlackListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcBeAddBlackListNotify::InitAsDefaultInstance() {
}

ContactRpcBeAddBlackListNotify::ContactRpcBeAddBlackListNotify(const ContactRpcBeAddBlackListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcBeAddBlackListNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcBeAddBlackListNotify::~ContactRpcBeAddBlackListNotify() {
  SharedDtor();
}

void ContactRpcBeAddBlackListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcBeAddBlackListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcBeAddBlackListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcBeAddBlackListNotify_descriptor_;
}

const ContactRpcBeAddBlackListNotify& ContactRpcBeAddBlackListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcBeAddBlackListNotify* ContactRpcBeAddBlackListNotify::default_instance_ = NULL;

ContactRpcBeAddBlackListNotify* ContactRpcBeAddBlackListNotify::New() const {
  return new ContactRpcBeAddBlackListNotify;
}

void ContactRpcBeAddBlackListNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcBeAddBlackListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcBeAddBlackListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcBeAddBlackListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcBeAddBlackListNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcBeAddBlackListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcBeAddBlackListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcBeAddBlackListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcBeAddBlackListNotify::MergeFrom(const ContactRpcBeAddBlackListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcBeAddBlackListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcBeAddBlackListNotify::CopyFrom(const ContactRpcBeAddBlackListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcBeAddBlackListNotify::IsInitialized() const {

  return true;
}

void ContactRpcBeAddBlackListNotify::Swap(ContactRpcBeAddBlackListNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcBeAddBlackListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcBeAddBlackListNotify_descriptor_;
  metadata.reflection = ContactRpcBeAddBlackListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcRecommendContactAsk::ContactRpcRecommendContactAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRecommendContactAsk::InitAsDefaultInstance() {
}

ContactRpcRecommendContactAsk::ContactRpcRecommendContactAsk(const ContactRpcRecommendContactAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRecommendContactAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRecommendContactAsk::~ContactRpcRecommendContactAsk() {
  SharedDtor();
}

void ContactRpcRecommendContactAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRecommendContactAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRecommendContactAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRecommendContactAsk_descriptor_;
}

const ContactRpcRecommendContactAsk& ContactRpcRecommendContactAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRecommendContactAsk* ContactRpcRecommendContactAsk::default_instance_ = NULL;

ContactRpcRecommendContactAsk* ContactRpcRecommendContactAsk::New() const {
  return new ContactRpcRecommendContactAsk;
}

void ContactRpcRecommendContactAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRecommendContactAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcRecommendContactAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRecommendContactAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRecommendContactAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRecommendContactAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRecommendContactAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRecommendContactAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRecommendContactAsk::MergeFrom(const ContactRpcRecommendContactAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRecommendContactAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRecommendContactAsk::CopyFrom(const ContactRpcRecommendContactAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRecommendContactAsk::IsInitialized() const {

  return true;
}

void ContactRpcRecommendContactAsk::Swap(ContactRpcRecommendContactAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRecommendContactAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRecommendContactAsk_descriptor_;
  metadata.reflection = ContactRpcRecommendContactAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRecommendContactReply::kResultFieldNumber;
const int ContactRpcRecommendContactReply::kContactFieldNumber;
const int ContactRpcRecommendContactReply::kApplyedListIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcRecommendContactReply::ContactRpcRecommendContactReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRecommendContactReply::InitAsDefaultInstance() {
}

ContactRpcRecommendContactReply::ContactRpcRecommendContactReply(const ContactRpcRecommendContactReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRecommendContactReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRecommendContactReply::~ContactRpcRecommendContactReply() {
  SharedDtor();
}

void ContactRpcRecommendContactReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRecommendContactReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRecommendContactReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRecommendContactReply_descriptor_;
}

const ContactRpcRecommendContactReply& ContactRpcRecommendContactReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRecommendContactReply* ContactRpcRecommendContactReply::default_instance_ = NULL;

ContactRpcRecommendContactReply* ContactRpcRecommendContactReply::New() const {
  return new ContactRpcRecommendContactReply;
}

void ContactRpcRecommendContactReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  contact_.Clear();
  applyedlistid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRecommendContactReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Contact;
        break;
      }

      // repeated .ContactData Contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Contact;
        if (input->ExpectTag(24)) goto parse_ApplyedListId;
        break;
      }

      // repeated uint64 ApplyedListId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ApplyedListId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_applyedlistid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_applyedlistid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ApplyedListId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRecommendContactReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactData Contact = 2;
  for (int i = 0; i < this->contact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact(i), output);
  }

  // repeated uint64 ApplyedListId = 3;
  for (int i = 0; i < this->applyedlistid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->applyedlistid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRecommendContactReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactData Contact = 2;
  for (int i = 0; i < this->contact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact(i), target);
  }

  // repeated uint64 ApplyedListId = 3;
  for (int i = 0; i < this->applyedlistid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->applyedlistid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRecommendContactReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactData Contact = 2;
  total_size += 1 * this->contact_size();
  for (int i = 0; i < this->contact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact(i));
  }

  // repeated uint64 ApplyedListId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->applyedlistid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->applyedlistid(i));
    }
    total_size += 1 * this->applyedlistid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRecommendContactReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRecommendContactReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRecommendContactReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRecommendContactReply::MergeFrom(const ContactRpcRecommendContactReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_.MergeFrom(from.contact_);
  applyedlistid_.MergeFrom(from.applyedlistid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRecommendContactReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRecommendContactReply::CopyFrom(const ContactRpcRecommendContactReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRecommendContactReply::IsInitialized() const {

  return true;
}

void ContactRpcRecommendContactReply::Swap(ContactRpcRecommendContactReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contact_.Swap(&other->contact_);
    applyedlistid_.Swap(&other->applyedlistid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRecommendContactReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRecommendContactReply_descriptor_;
  metadata.reflection = ContactRpcRecommendContactReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcRejectAllAsk::ContactRpcRejectAllAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRejectAllAsk::InitAsDefaultInstance() {
}

ContactRpcRejectAllAsk::ContactRpcRejectAllAsk(const ContactRpcRejectAllAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRejectAllAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRejectAllAsk::~ContactRpcRejectAllAsk() {
  SharedDtor();
}

void ContactRpcRejectAllAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRejectAllAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRejectAllAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRejectAllAsk_descriptor_;
}

const ContactRpcRejectAllAsk& ContactRpcRejectAllAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRejectAllAsk* ContactRpcRejectAllAsk::default_instance_ = NULL;

ContactRpcRejectAllAsk* ContactRpcRejectAllAsk::New() const {
  return new ContactRpcRejectAllAsk;
}

void ContactRpcRejectAllAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRejectAllAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcRejectAllAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRejectAllAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRejectAllAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRejectAllAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRejectAllAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRejectAllAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRejectAllAsk::MergeFrom(const ContactRpcRejectAllAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRejectAllAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRejectAllAsk::CopyFrom(const ContactRpcRejectAllAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRejectAllAsk::IsInitialized() const {

  return true;
}

void ContactRpcRejectAllAsk::Swap(ContactRpcRejectAllAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRejectAllAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRejectAllAsk_descriptor_;
  metadata.reflection = ContactRpcRejectAllAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRejectAllReply::kResultFieldNumber;
const int ContactRpcRejectAllReply::kContactGroupsFieldNumber;
const int ContactRpcRejectAllReply::kDeleteRoleIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcRejectAllReply::ContactRpcRejectAllReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRejectAllReply::InitAsDefaultInstance() {
}

ContactRpcRejectAllReply::ContactRpcRejectAllReply(const ContactRpcRejectAllReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRejectAllReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRejectAllReply::~ContactRpcRejectAllReply() {
  SharedDtor();
}

void ContactRpcRejectAllReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcRejectAllReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRejectAllReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRejectAllReply_descriptor_;
}

const ContactRpcRejectAllReply& ContactRpcRejectAllReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRejectAllReply* ContactRpcRejectAllReply::default_instance_ = NULL;

ContactRpcRejectAllReply* ContactRpcRejectAllReply::New() const {
  return new ContactRpcRejectAllReply;
}

void ContactRpcRejectAllReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  contactgroups_.Clear();
  deleteroleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRejectAllReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectTag(24)) goto parse_DeleteRoleIds;
        break;
      }

      // repeated uint64 DeleteRoleIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeleteRoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_deleteroleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deleteroleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DeleteRoleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRejectAllReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  // repeated uint64 DeleteRoleIds = 3;
  for (int i = 0; i < this->deleteroleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->deleteroleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRejectAllReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  // repeated uint64 DeleteRoleIds = 3;
  for (int i = 0; i < this->deleteroleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->deleteroleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRejectAllReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  // repeated uint64 DeleteRoleIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->deleteroleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deleteroleids(i));
    }
    total_size += 1 * this->deleteroleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRejectAllReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRejectAllReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRejectAllReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRejectAllReply::MergeFrom(const ContactRpcRejectAllReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  deleteroleids_.MergeFrom(from.deleteroleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRejectAllReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRejectAllReply::CopyFrom(const ContactRpcRejectAllReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRejectAllReply::IsInitialized() const {

  return true;
}

void ContactRpcRejectAllReply::Swap(ContactRpcRejectAllReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contactgroups_.Swap(&other->contactgroups_);
    deleteroleids_.Swap(&other->deleteroleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRejectAllReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRejectAllReply_descriptor_;
  metadata.reflection = ContactRpcRejectAllReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddFriendShipPointAsk::kFriendRoleIdFieldNumber;
const int ContactRpcAddFriendShipPointAsk::kItemDataFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddFriendShipPointAsk::ContactRpcAddFriendShipPointAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddFriendShipPointAsk::InitAsDefaultInstance() {
}

ContactRpcAddFriendShipPointAsk::ContactRpcAddFriendShipPointAsk(const ContactRpcAddFriendShipPointAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddFriendShipPointAsk::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddFriendShipPointAsk::~ContactRpcAddFriendShipPointAsk() {
  SharedDtor();
}

void ContactRpcAddFriendShipPointAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAddFriendShipPointAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddFriendShipPointAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddFriendShipPointAsk_descriptor_;
}

const ContactRpcAddFriendShipPointAsk& ContactRpcAddFriendShipPointAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddFriendShipPointAsk* ContactRpcAddFriendShipPointAsk::default_instance_ = NULL;

ContactRpcAddFriendShipPointAsk* ContactRpcAddFriendShipPointAsk::New() const {
  return new ContactRpcAddFriendShipPointAsk;
}

void ContactRpcAddFriendShipPointAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendroleid_ = GOOGLE_ULONGLONG(0);
  }
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddFriendShipPointAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FriendRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        break;
      }

      // repeated .ItemSimpleData ItemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddFriendShipPointAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 FriendRoleId = 1 [default = 0];
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friendroleid(), output);
  }

  // repeated .ItemSimpleData ItemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddFriendShipPointAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 FriendRoleId = 1 [default = 0];
  if (has_friendroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friendroleid(), target);
  }

  // repeated .ItemSimpleData ItemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddFriendShipPointAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FriendRoleId = 1 [default = 0];
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendroleid());
    }

  }
  // repeated .ItemSimpleData ItemData = 2;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddFriendShipPointAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddFriendShipPointAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddFriendShipPointAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddFriendShipPointAsk::MergeFrom(const ContactRpcAddFriendShipPointAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddFriendShipPointAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddFriendShipPointAsk::CopyFrom(const ContactRpcAddFriendShipPointAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddFriendShipPointAsk::IsInitialized() const {

  return true;
}

void ContactRpcAddFriendShipPointAsk::Swap(ContactRpcAddFriendShipPointAsk* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddFriendShipPointAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddFriendShipPointAsk_descriptor_;
  metadata.reflection = ContactRpcAddFriendShipPointAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddFriendShipPointReply::kResultFieldNumber;
const int ContactRpcAddFriendShipPointReply::kContactFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddFriendShipPointReply::ContactRpcAddFriendShipPointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddFriendShipPointReply::InitAsDefaultInstance() {
  contact_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcAddFriendShipPointReply::ContactRpcAddFriendShipPointReply(const ContactRpcAddFriendShipPointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddFriendShipPointReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddFriendShipPointReply::~ContactRpcAddFriendShipPointReply() {
  SharedDtor();
}

void ContactRpcAddFriendShipPointReply::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactRpcAddFriendShipPointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddFriendShipPointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddFriendShipPointReply_descriptor_;
}

const ContactRpcAddFriendShipPointReply& ContactRpcAddFriendShipPointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddFriendShipPointReply* ContactRpcAddFriendShipPointReply::default_instance_ = NULL;

ContactRpcAddFriendShipPointReply* ContactRpcAddFriendShipPointReply::New() const {
  return new ContactRpcAddFriendShipPointReply;
}

void ContactRpcAddFriendShipPointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_contact()) {
      if (contact_ != NULL) contact_->::ContactData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddFriendShipPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Contact;
        break;
      }

      // optional .ContactData Contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddFriendShipPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactData Contact = 2;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddFriendShipPointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactData Contact = 2;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddFriendShipPointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactData Contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddFriendShipPointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddFriendShipPointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddFriendShipPointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddFriendShipPointReply::MergeFrom(const ContactRpcAddFriendShipPointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_contact()) {
      mutable_contact()->::ContactData::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddFriendShipPointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddFriendShipPointReply::CopyFrom(const ContactRpcAddFriendShipPointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddFriendShipPointReply::IsInitialized() const {

  return true;
}

void ContactRpcAddFriendShipPointReply::Swap(ContactRpcAddFriendShipPointReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddFriendShipPointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddFriendShipPointReply_descriptor_;
  metadata.reflection = ContactRpcAddFriendShipPointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcRoleDataUpdateNotify::kContactFieldNumber;
#endif  // !_MSC_VER

ContactRpcRoleDataUpdateNotify::ContactRpcRoleDataUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcRoleDataUpdateNotify::InitAsDefaultInstance() {
  contact_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcRoleDataUpdateNotify::ContactRpcRoleDataUpdateNotify(const ContactRpcRoleDataUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcRoleDataUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcRoleDataUpdateNotify::~ContactRpcRoleDataUpdateNotify() {
  SharedDtor();
}

void ContactRpcRoleDataUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactRpcRoleDataUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcRoleDataUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcRoleDataUpdateNotify_descriptor_;
}

const ContactRpcRoleDataUpdateNotify& ContactRpcRoleDataUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcRoleDataUpdateNotify* ContactRpcRoleDataUpdateNotify::default_instance_ = NULL;

ContactRpcRoleDataUpdateNotify* ContactRpcRoleDataUpdateNotify::New() const {
  return new ContactRpcRoleDataUpdateNotify;
}

void ContactRpcRoleDataUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contact()) {
      if (contact_ != NULL) contact_->::ContactData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcRoleDataUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData Contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcRoleDataUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcRoleDataUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcRoleDataUpdateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData Contact = 1;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcRoleDataUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcRoleDataUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcRoleDataUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcRoleDataUpdateNotify::MergeFrom(const ContactRpcRoleDataUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact()) {
      mutable_contact()->::ContactData::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcRoleDataUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcRoleDataUpdateNotify::CopyFrom(const ContactRpcRoleDataUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcRoleDataUpdateNotify::IsInitialized() const {

  return true;
}

void ContactRpcRoleDataUpdateNotify::Swap(ContactRpcRoleDataUpdateNotify* other) {
  if (other != this) {
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcRoleDataUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcRoleDataUpdateNotify_descriptor_;
  metadata.reflection = ContactRpcRoleDataUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcContactLoginNotify::kContactFieldNumber;
const int ContactRpcContactLoginNotify::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcContactLoginNotify::ContactRpcContactLoginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcContactLoginNotify::InitAsDefaultInstance() {
  contact_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcContactLoginNotify::ContactRpcContactLoginNotify(const ContactRpcContactLoginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcContactLoginNotify::SharedCtor() {
  _cached_size_ = 0;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcContactLoginNotify::~ContactRpcContactLoginNotify() {
  SharedDtor();
}

void ContactRpcContactLoginNotify::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactRpcContactLoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcContactLoginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcContactLoginNotify_descriptor_;
}

const ContactRpcContactLoginNotify& ContactRpcContactLoginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcContactLoginNotify* ContactRpcContactLoginNotify::default_instance_ = NULL;

ContactRpcContactLoginNotify* ContactRpcContactLoginNotify::New() const {
  return new ContactRpcContactLoginNotify;
}

void ContactRpcContactLoginNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contact()) {
      if (contact_ != NULL) contact_->::ContactData::Clear();
    }
  }
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcContactLoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData Contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        break;
      }

      // repeated int32 GroupIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcContactLoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(), output);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcContactLoginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contact(), target);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcContactLoginNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData Contact = 1;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  // repeated int32 GroupIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcContactLoginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcContactLoginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcContactLoginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcContactLoginNotify::MergeFrom(const ContactRpcContactLoginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact()) {
      mutable_contact()->::ContactData::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcContactLoginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcContactLoginNotify::CopyFrom(const ContactRpcContactLoginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcContactLoginNotify::IsInitialized() const {

  return true;
}

void ContactRpcContactLoginNotify::Swap(ContactRpcContactLoginNotify* other) {
  if (other != this) {
    std::swap(contact_, other->contact_);
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcContactLoginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcContactLoginNotify_descriptor_;
  metadata.reflection = ContactRpcContactLoginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcContactLogoutNotify::kContactFieldNumber;
const int ContactRpcContactLogoutNotify::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcContactLogoutNotify::ContactRpcContactLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcContactLogoutNotify::InitAsDefaultInstance() {
  contact_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcContactLogoutNotify::ContactRpcContactLogoutNotify(const ContactRpcContactLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcContactLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcContactLogoutNotify::~ContactRpcContactLogoutNotify() {
  SharedDtor();
}

void ContactRpcContactLogoutNotify::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactRpcContactLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcContactLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcContactLogoutNotify_descriptor_;
}

const ContactRpcContactLogoutNotify& ContactRpcContactLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcContactLogoutNotify* ContactRpcContactLogoutNotify::default_instance_ = NULL;

ContactRpcContactLogoutNotify* ContactRpcContactLogoutNotify::New() const {
  return new ContactRpcContactLogoutNotify;
}

void ContactRpcContactLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contact()) {
      if (contact_ != NULL) contact_->::ContactData::Clear();
    }
  }
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcContactLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData Contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        break;
      }

      // repeated int32 GroupIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcContactLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(), output);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcContactLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData Contact = 1;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contact(), target);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcContactLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData Contact = 1;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  // repeated int32 GroupIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcContactLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcContactLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcContactLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcContactLogoutNotify::MergeFrom(const ContactRpcContactLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contact()) {
      mutable_contact()->::ContactData::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcContactLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcContactLogoutNotify::CopyFrom(const ContactRpcContactLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcContactLogoutNotify::IsInitialized() const {

  return true;
}

void ContactRpcContactLogoutNotify::Swap(ContactRpcContactLogoutNotify* other) {
  if (other != this) {
    std::swap(contact_, other->contact_);
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcContactLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcContactLogoutNotify_descriptor_;
  metadata.reflection = ContactRpcContactLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcDeleteRoleDataNotify::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcDeleteRoleDataNotify::ContactRpcDeleteRoleDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcDeleteRoleDataNotify::InitAsDefaultInstance() {
}

ContactRpcDeleteRoleDataNotify::ContactRpcDeleteRoleDataNotify(const ContactRpcDeleteRoleDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcDeleteRoleDataNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcDeleteRoleDataNotify::~ContactRpcDeleteRoleDataNotify() {
  SharedDtor();
}

void ContactRpcDeleteRoleDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcDeleteRoleDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcDeleteRoleDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcDeleteRoleDataNotify_descriptor_;
}

const ContactRpcDeleteRoleDataNotify& ContactRpcDeleteRoleDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcDeleteRoleDataNotify* ContactRpcDeleteRoleDataNotify::default_instance_ = NULL;

ContactRpcDeleteRoleDataNotify* ContactRpcDeleteRoleDataNotify::New() const {
  return new ContactRpcDeleteRoleDataNotify;
}

void ContactRpcDeleteRoleDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcDeleteRoleDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcDeleteRoleDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcDeleteRoleDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcDeleteRoleDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcDeleteRoleDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcDeleteRoleDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcDeleteRoleDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcDeleteRoleDataNotify::MergeFrom(const ContactRpcDeleteRoleDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcDeleteRoleDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcDeleteRoleDataNotify::CopyFrom(const ContactRpcDeleteRoleDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcDeleteRoleDataNotify::IsInitialized() const {

  return true;
}

void ContactRpcDeleteRoleDataNotify::Swap(ContactRpcDeleteRoleDataNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcDeleteRoleDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcDeleteRoleDataNotify_descriptor_;
  metadata.reflection = ContactRpcDeleteRoleDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSortGroupAsk::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcSortGroupAsk::ContactRpcSortGroupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSortGroupAsk::InitAsDefaultInstance() {
}

ContactRpcSortGroupAsk::ContactRpcSortGroupAsk(const ContactRpcSortGroupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSortGroupAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSortGroupAsk::~ContactRpcSortGroupAsk() {
  SharedDtor();
}

void ContactRpcSortGroupAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSortGroupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSortGroupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSortGroupAsk_descriptor_;
}

const ContactRpcSortGroupAsk& ContactRpcSortGroupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSortGroupAsk* ContactRpcSortGroupAsk::default_instance_ = NULL;

ContactRpcSortGroupAsk* ContactRpcSortGroupAsk::New() const {
  return new ContactRpcSortGroupAsk;
}

void ContactRpcSortGroupAsk::Clear() {
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSortGroupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 GroupIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSortGroupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 GroupIds = 1;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSortGroupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 GroupIds = 1;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSortGroupAsk::ByteSize() const {
  int total_size = 0;

  // repeated int32 GroupIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSortGroupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSortGroupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSortGroupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSortGroupAsk::MergeFrom(const ContactRpcSortGroupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSortGroupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSortGroupAsk::CopyFrom(const ContactRpcSortGroupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSortGroupAsk::IsInitialized() const {

  return true;
}

void ContactRpcSortGroupAsk::Swap(ContactRpcSortGroupAsk* other) {
  if (other != this) {
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSortGroupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSortGroupAsk_descriptor_;
  metadata.reflection = ContactRpcSortGroupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSortGroupReply::kResultFieldNumber;
const int ContactRpcSortGroupReply::kGroupIdsFieldNumber;
#endif  // !_MSC_VER

ContactRpcSortGroupReply::ContactRpcSortGroupReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSortGroupReply::InitAsDefaultInstance() {
}

ContactRpcSortGroupReply::ContactRpcSortGroupReply(const ContactRpcSortGroupReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSortGroupReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSortGroupReply::~ContactRpcSortGroupReply() {
  SharedDtor();
}

void ContactRpcSortGroupReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSortGroupReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSortGroupReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSortGroupReply_descriptor_;
}

const ContactRpcSortGroupReply& ContactRpcSortGroupReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSortGroupReply* ContactRpcSortGroupReply::default_instance_ = NULL;

ContactRpcSortGroupReply* ContactRpcSortGroupReply::New() const {
  return new ContactRpcSortGroupReply;
}

void ContactRpcSortGroupReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSortGroupReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        break;
      }

      // repeated int32 GroupIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSortGroupReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSortGroupReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 GroupIds = 2;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSortGroupReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 GroupIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSortGroupReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSortGroupReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSortGroupReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSortGroupReply::MergeFrom(const ContactRpcSortGroupReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSortGroupReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSortGroupReply::CopyFrom(const ContactRpcSortGroupReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSortGroupReply::IsInitialized() const {

  return true;
}

void ContactRpcSortGroupReply::Swap(ContactRpcSortGroupReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    groupids_.Swap(&other->groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSortGroupReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSortGroupReply_descriptor_;
  metadata.reflection = ContactRpcSortGroupReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSetFriendAliasAsk::kNameFieldNumber;
const int ContactRpcSetFriendAliasAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcSetFriendAliasAsk::ContactRpcSetFriendAliasAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSetFriendAliasAsk::InitAsDefaultInstance() {
}

ContactRpcSetFriendAliasAsk::ContactRpcSetFriendAliasAsk(const ContactRpcSetFriendAliasAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSetFriendAliasAsk::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSetFriendAliasAsk::~ContactRpcSetFriendAliasAsk() {
  SharedDtor();
}

void ContactRpcSetFriendAliasAsk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ContactRpcSetFriendAliasAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSetFriendAliasAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSetFriendAliasAsk_descriptor_;
}

const ContactRpcSetFriendAliasAsk& ContactRpcSetFriendAliasAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSetFriendAliasAsk* ContactRpcSetFriendAliasAsk::default_instance_ = NULL;

ContactRpcSetFriendAliasAsk* ContactRpcSetFriendAliasAsk::New() const {
  return new ContactRpcSetFriendAliasAsk;
}

void ContactRpcSetFriendAliasAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSetFriendAliasAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSetFriendAliasAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSetFriendAliasAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSetFriendAliasAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSetFriendAliasAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSetFriendAliasAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSetFriendAliasAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSetFriendAliasAsk::MergeFrom(const ContactRpcSetFriendAliasAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSetFriendAliasAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSetFriendAliasAsk::CopyFrom(const ContactRpcSetFriendAliasAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSetFriendAliasAsk::IsInitialized() const {

  return true;
}

void ContactRpcSetFriendAliasAsk::Swap(ContactRpcSetFriendAliasAsk* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSetFriendAliasAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSetFriendAliasAsk_descriptor_;
  metadata.reflection = ContactRpcSetFriendAliasAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSetFriendAliasReply::kResultFieldNumber;
const int ContactRpcSetFriendAliasReply::kContactFieldNumber;
#endif  // !_MSC_VER

ContactRpcSetFriendAliasReply::ContactRpcSetFriendAliasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSetFriendAliasReply::InitAsDefaultInstance() {
  contact_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcSetFriendAliasReply::ContactRpcSetFriendAliasReply(const ContactRpcSetFriendAliasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSetFriendAliasReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSetFriendAliasReply::~ContactRpcSetFriendAliasReply() {
  SharedDtor();
}

void ContactRpcSetFriendAliasReply::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

void ContactRpcSetFriendAliasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSetFriendAliasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSetFriendAliasReply_descriptor_;
}

const ContactRpcSetFriendAliasReply& ContactRpcSetFriendAliasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSetFriendAliasReply* ContactRpcSetFriendAliasReply::default_instance_ = NULL;

ContactRpcSetFriendAliasReply* ContactRpcSetFriendAliasReply::New() const {
  return new ContactRpcSetFriendAliasReply;
}

void ContactRpcSetFriendAliasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_contact()) {
      if (contact_ != NULL) contact_->::ContactData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSetFriendAliasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Contact;
        break;
      }

      // optional .ContactData Contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSetFriendAliasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ContactData Contact = 2;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSetFriendAliasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ContactData Contact = 2;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSetFriendAliasReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ContactData Contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSetFriendAliasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSetFriendAliasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSetFriendAliasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSetFriendAliasReply::MergeFrom(const ContactRpcSetFriendAliasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_contact()) {
      mutable_contact()->::ContactData::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSetFriendAliasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSetFriendAliasReply::CopyFrom(const ContactRpcSetFriendAliasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSetFriendAliasReply::IsInitialized() const {

  return true;
}

void ContactRpcSetFriendAliasReply::Swap(ContactRpcSetFriendAliasReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSetFriendAliasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSetFriendAliasReply_descriptor_;
  metadata.reflection = ContactRpcSetFriendAliasReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSendFriendGiftPointAsk::kSendRoleIdFieldNumber;
const int ContactRpcSendFriendGiftPointAsk::kPointFieldNumber;
#endif  // !_MSC_VER

ContactRpcSendFriendGiftPointAsk::ContactRpcSendFriendGiftPointAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSendFriendGiftPointAsk::InitAsDefaultInstance() {
}

ContactRpcSendFriendGiftPointAsk::ContactRpcSendFriendGiftPointAsk(const ContactRpcSendFriendGiftPointAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSendFriendGiftPointAsk::SharedCtor() {
  _cached_size_ = 0;
  sendroleid_ = GOOGLE_ULONGLONG(0);
  point_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSendFriendGiftPointAsk::~ContactRpcSendFriendGiftPointAsk() {
  SharedDtor();
}

void ContactRpcSendFriendGiftPointAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSendFriendGiftPointAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSendFriendGiftPointAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSendFriendGiftPointAsk_descriptor_;
}

const ContactRpcSendFriendGiftPointAsk& ContactRpcSendFriendGiftPointAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSendFriendGiftPointAsk* ContactRpcSendFriendGiftPointAsk::default_instance_ = NULL;

ContactRpcSendFriendGiftPointAsk* ContactRpcSendFriendGiftPointAsk::New() const {
  return new ContactRpcSendFriendGiftPointAsk;
}

void ContactRpcSendFriendGiftPointAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendroleid_ = GOOGLE_ULONGLONG(0);
    point_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSendFriendGiftPointAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SendRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendroleid_)));
          set_has_sendroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }

      // optional int32 Point = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSendFriendGiftPointAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 SendRoleId = 1 [default = 0];
  if (has_sendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sendroleid(), output);
  }

  // optional int32 Point = 2 [default = -1];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSendFriendGiftPointAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 SendRoleId = 1 [default = 0];
  if (has_sendroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sendroleid(), target);
  }

  // optional int32 Point = 2 [default = -1];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSendFriendGiftPointAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SendRoleId = 1 [default = 0];
    if (has_sendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendroleid());
    }

    // optional int32 Point = 2 [default = -1];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSendFriendGiftPointAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSendFriendGiftPointAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSendFriendGiftPointAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSendFriendGiftPointAsk::MergeFrom(const ContactRpcSendFriendGiftPointAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendroleid()) {
      set_sendroleid(from.sendroleid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSendFriendGiftPointAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSendFriendGiftPointAsk::CopyFrom(const ContactRpcSendFriendGiftPointAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSendFriendGiftPointAsk::IsInitialized() const {

  return true;
}

void ContactRpcSendFriendGiftPointAsk::Swap(ContactRpcSendFriendGiftPointAsk* other) {
  if (other != this) {
    std::swap(sendroleid_, other->sendroleid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSendFriendGiftPointAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSendFriendGiftPointAsk_descriptor_;
  metadata.reflection = ContactRpcSendFriendGiftPointAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSendFriendGiftPointReply::kResultFieldNumber;
const int ContactRpcSendFriendGiftPointReply::kSentGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcSendFriendGiftPointReply::ContactRpcSendFriendGiftPointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSendFriendGiftPointReply::InitAsDefaultInstance() {
}

ContactRpcSendFriendGiftPointReply::ContactRpcSendFriendGiftPointReply(const ContactRpcSendFriendGiftPointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSendFriendGiftPointReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSendFriendGiftPointReply::~ContactRpcSendFriendGiftPointReply() {
  SharedDtor();
}

void ContactRpcSendFriendGiftPointReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSendFriendGiftPointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSendFriendGiftPointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSendFriendGiftPointReply_descriptor_;
}

const ContactRpcSendFriendGiftPointReply& ContactRpcSendFriendGiftPointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSendFriendGiftPointReply* ContactRpcSendFriendGiftPointReply::default_instance_ = NULL;

ContactRpcSendFriendGiftPointReply* ContactRpcSendFriendGiftPointReply::New() const {
  return new ContactRpcSendFriendGiftPointReply;
}

void ContactRpcSendFriendGiftPointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  sentgiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSendFriendGiftPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SentGiftList;
        break;
      }

      // repeated .FriendGiftPoint SentGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SentGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentgiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SentGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSendFriendGiftPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .FriendGiftPoint SentGiftList = 2;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sentgiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSendFriendGiftPointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .FriendGiftPoint SentGiftList = 2;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sentgiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSendFriendGiftPointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .FriendGiftPoint SentGiftList = 2;
  total_size += 1 * this->sentgiftlist_size();
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentgiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSendFriendGiftPointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSendFriendGiftPointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSendFriendGiftPointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSendFriendGiftPointReply::MergeFrom(const ContactRpcSendFriendGiftPointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentgiftlist_.MergeFrom(from.sentgiftlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSendFriendGiftPointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSendFriendGiftPointReply::CopyFrom(const ContactRpcSendFriendGiftPointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSendFriendGiftPointReply::IsInitialized() const {

  return true;
}

void ContactRpcSendFriendGiftPointReply::Swap(ContactRpcSendFriendGiftPointReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    sentgiftlist_.Swap(&other->sentgiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSendFriendGiftPointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSendFriendGiftPointReply_descriptor_;
  metadata.reflection = ContactRpcSendFriendGiftPointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAcquireGiftPointAsk::kAcquireRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcAcquireGiftPointAsk::ContactRpcAcquireGiftPointAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAcquireGiftPointAsk::InitAsDefaultInstance() {
}

ContactRpcAcquireGiftPointAsk::ContactRpcAcquireGiftPointAsk(const ContactRpcAcquireGiftPointAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAcquireGiftPointAsk::SharedCtor() {
  _cached_size_ = 0;
  acquireroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAcquireGiftPointAsk::~ContactRpcAcquireGiftPointAsk() {
  SharedDtor();
}

void ContactRpcAcquireGiftPointAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAcquireGiftPointAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAcquireGiftPointAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAcquireGiftPointAsk_descriptor_;
}

const ContactRpcAcquireGiftPointAsk& ContactRpcAcquireGiftPointAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAcquireGiftPointAsk* ContactRpcAcquireGiftPointAsk::default_instance_ = NULL;

ContactRpcAcquireGiftPointAsk* ContactRpcAcquireGiftPointAsk::New() const {
  return new ContactRpcAcquireGiftPointAsk;
}

void ContactRpcAcquireGiftPointAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    acquireroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAcquireGiftPointAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AcquireRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acquireroleid_)));
          set_has_acquireroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAcquireGiftPointAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AcquireRoleId = 1 [default = 0];
  if (has_acquireroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->acquireroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAcquireGiftPointAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AcquireRoleId = 1 [default = 0];
  if (has_acquireroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->acquireroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAcquireGiftPointAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AcquireRoleId = 1 [default = 0];
    if (has_acquireroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acquireroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAcquireGiftPointAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAcquireGiftPointAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAcquireGiftPointAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAcquireGiftPointAsk::MergeFrom(const ContactRpcAcquireGiftPointAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acquireroleid()) {
      set_acquireroleid(from.acquireroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAcquireGiftPointAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAcquireGiftPointAsk::CopyFrom(const ContactRpcAcquireGiftPointAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAcquireGiftPointAsk::IsInitialized() const {

  return true;
}

void ContactRpcAcquireGiftPointAsk::Swap(ContactRpcAcquireGiftPointAsk* other) {
  if (other != this) {
    std::swap(acquireroleid_, other->acquireroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAcquireGiftPointAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAcquireGiftPointAsk_descriptor_;
  metadata.reflection = ContactRpcAcquireGiftPointAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAcquireGiftPointReply::kResultFieldNumber;
const int ContactRpcAcquireGiftPointReply::kAcquireGiftListFieldNumber;
const int ContactRpcAcquireGiftPointReply::kUnAcquireGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcAcquireGiftPointReply::ContactRpcAcquireGiftPointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAcquireGiftPointReply::InitAsDefaultInstance() {
}

ContactRpcAcquireGiftPointReply::ContactRpcAcquireGiftPointReply(const ContactRpcAcquireGiftPointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAcquireGiftPointReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAcquireGiftPointReply::~ContactRpcAcquireGiftPointReply() {
  SharedDtor();
}

void ContactRpcAcquireGiftPointReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAcquireGiftPointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAcquireGiftPointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAcquireGiftPointReply_descriptor_;
}

const ContactRpcAcquireGiftPointReply& ContactRpcAcquireGiftPointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAcquireGiftPointReply* ContactRpcAcquireGiftPointReply::default_instance_ = NULL;

ContactRpcAcquireGiftPointReply* ContactRpcAcquireGiftPointReply::New() const {
  return new ContactRpcAcquireGiftPointReply;
}

void ContactRpcAcquireGiftPointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  acquiregiftlist_.Clear();
  unacquiregiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAcquireGiftPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint AcquireGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint UnAcquireGiftList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnAcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unacquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAcquireGiftPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acquiregiftlist(i), output);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unacquiregiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAcquireGiftPointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acquiregiftlist(i), target);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unacquiregiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAcquireGiftPointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .FriendGiftPoint AcquireGiftList = 2;
  total_size += 1 * this->acquiregiftlist_size();
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acquiregiftlist(i));
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  total_size += 1 * this->unacquiregiftlist_size();
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unacquiregiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAcquireGiftPointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAcquireGiftPointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAcquireGiftPointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAcquireGiftPointReply::MergeFrom(const ContactRpcAcquireGiftPointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  acquiregiftlist_.MergeFrom(from.acquiregiftlist_);
  unacquiregiftlist_.MergeFrom(from.unacquiregiftlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAcquireGiftPointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAcquireGiftPointReply::CopyFrom(const ContactRpcAcquireGiftPointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAcquireGiftPointReply::IsInitialized() const {

  return true;
}

void ContactRpcAcquireGiftPointReply::Swap(ContactRpcAcquireGiftPointReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    acquiregiftlist_.Swap(&other->acquiregiftlist_);
    unacquiregiftlist_.Swap(&other->unacquiregiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAcquireGiftPointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAcquireGiftPointReply_descriptor_;
  metadata.reflection = ContactRpcAcquireGiftPointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcUnAcquireGiftPointNotify::kUnAcquireGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcUnAcquireGiftPointNotify::ContactRpcUnAcquireGiftPointNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcUnAcquireGiftPointNotify::InitAsDefaultInstance() {
}

ContactRpcUnAcquireGiftPointNotify::ContactRpcUnAcquireGiftPointNotify(const ContactRpcUnAcquireGiftPointNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcUnAcquireGiftPointNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcUnAcquireGiftPointNotify::~ContactRpcUnAcquireGiftPointNotify() {
  SharedDtor();
}

void ContactRpcUnAcquireGiftPointNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcUnAcquireGiftPointNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcUnAcquireGiftPointNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcUnAcquireGiftPointNotify_descriptor_;
}

const ContactRpcUnAcquireGiftPointNotify& ContactRpcUnAcquireGiftPointNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcUnAcquireGiftPointNotify* ContactRpcUnAcquireGiftPointNotify::default_instance_ = NULL;

ContactRpcUnAcquireGiftPointNotify* ContactRpcUnAcquireGiftPointNotify::New() const {
  return new ContactRpcUnAcquireGiftPointNotify;
}

void ContactRpcUnAcquireGiftPointNotify::Clear() {
  unacquiregiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcUnAcquireGiftPointNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendGiftPoint UnAcquireGiftList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnAcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unacquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UnAcquireGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcUnAcquireGiftPointNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendGiftPoint UnAcquireGiftList = 1;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unacquiregiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcUnAcquireGiftPointNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendGiftPoint UnAcquireGiftList = 1;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unacquiregiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcUnAcquireGiftPointNotify::ByteSize() const {
  int total_size = 0;

  // repeated .FriendGiftPoint UnAcquireGiftList = 1;
  total_size += 1 * this->unacquiregiftlist_size();
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unacquiregiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcUnAcquireGiftPointNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcUnAcquireGiftPointNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcUnAcquireGiftPointNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcUnAcquireGiftPointNotify::MergeFrom(const ContactRpcUnAcquireGiftPointNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  unacquiregiftlist_.MergeFrom(from.unacquiregiftlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcUnAcquireGiftPointNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcUnAcquireGiftPointNotify::CopyFrom(const ContactRpcUnAcquireGiftPointNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcUnAcquireGiftPointNotify::IsInitialized() const {

  return true;
}

void ContactRpcUnAcquireGiftPointNotify::Swap(ContactRpcUnAcquireGiftPointNotify* other) {
  if (other != this) {
    unacquiregiftlist_.Swap(&other->unacquiregiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcUnAcquireGiftPointNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcUnAcquireGiftPointNotify_descriptor_;
  metadata.reflection = ContactRpcUnAcquireGiftPointNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcSendAllFriendGiftPointAsk::ContactRpcSendAllFriendGiftPointAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSendAllFriendGiftPointAsk::InitAsDefaultInstance() {
}

ContactRpcSendAllFriendGiftPointAsk::ContactRpcSendAllFriendGiftPointAsk(const ContactRpcSendAllFriendGiftPointAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSendAllFriendGiftPointAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSendAllFriendGiftPointAsk::~ContactRpcSendAllFriendGiftPointAsk() {
  SharedDtor();
}

void ContactRpcSendAllFriendGiftPointAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSendAllFriendGiftPointAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSendAllFriendGiftPointAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSendAllFriendGiftPointAsk_descriptor_;
}

const ContactRpcSendAllFriendGiftPointAsk& ContactRpcSendAllFriendGiftPointAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSendAllFriendGiftPointAsk* ContactRpcSendAllFriendGiftPointAsk::default_instance_ = NULL;

ContactRpcSendAllFriendGiftPointAsk* ContactRpcSendAllFriendGiftPointAsk::New() const {
  return new ContactRpcSendAllFriendGiftPointAsk;
}

void ContactRpcSendAllFriendGiftPointAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSendAllFriendGiftPointAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcSendAllFriendGiftPointAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSendAllFriendGiftPointAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSendAllFriendGiftPointAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSendAllFriendGiftPointAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSendAllFriendGiftPointAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSendAllFriendGiftPointAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSendAllFriendGiftPointAsk::MergeFrom(const ContactRpcSendAllFriendGiftPointAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSendAllFriendGiftPointAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSendAllFriendGiftPointAsk::CopyFrom(const ContactRpcSendAllFriendGiftPointAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSendAllFriendGiftPointAsk::IsInitialized() const {

  return true;
}

void ContactRpcSendAllFriendGiftPointAsk::Swap(ContactRpcSendAllFriendGiftPointAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSendAllFriendGiftPointAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSendAllFriendGiftPointAsk_descriptor_;
  metadata.reflection = ContactRpcSendAllFriendGiftPointAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSendAllFriendGiftPointReply::kResultFieldNumber;
const int ContactRpcSendAllFriendGiftPointReply::kSentGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcSendAllFriendGiftPointReply::ContactRpcSendAllFriendGiftPointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSendAllFriendGiftPointReply::InitAsDefaultInstance() {
}

ContactRpcSendAllFriendGiftPointReply::ContactRpcSendAllFriendGiftPointReply(const ContactRpcSendAllFriendGiftPointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSendAllFriendGiftPointReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSendAllFriendGiftPointReply::~ContactRpcSendAllFriendGiftPointReply() {
  SharedDtor();
}

void ContactRpcSendAllFriendGiftPointReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSendAllFriendGiftPointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSendAllFriendGiftPointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSendAllFriendGiftPointReply_descriptor_;
}

const ContactRpcSendAllFriendGiftPointReply& ContactRpcSendAllFriendGiftPointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSendAllFriendGiftPointReply* ContactRpcSendAllFriendGiftPointReply::default_instance_ = NULL;

ContactRpcSendAllFriendGiftPointReply* ContactRpcSendAllFriendGiftPointReply::New() const {
  return new ContactRpcSendAllFriendGiftPointReply;
}

void ContactRpcSendAllFriendGiftPointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  sentgiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSendAllFriendGiftPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SentGiftList;
        break;
      }

      // repeated .FriendGiftPoint SentGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SentGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentgiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SentGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSendAllFriendGiftPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .FriendGiftPoint SentGiftList = 2;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sentgiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSendAllFriendGiftPointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .FriendGiftPoint SentGiftList = 2;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sentgiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSendAllFriendGiftPointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .FriendGiftPoint SentGiftList = 2;
  total_size += 1 * this->sentgiftlist_size();
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentgiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSendAllFriendGiftPointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSendAllFriendGiftPointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSendAllFriendGiftPointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSendAllFriendGiftPointReply::MergeFrom(const ContactRpcSendAllFriendGiftPointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentgiftlist_.MergeFrom(from.sentgiftlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSendAllFriendGiftPointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSendAllFriendGiftPointReply::CopyFrom(const ContactRpcSendAllFriendGiftPointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSendAllFriendGiftPointReply::IsInitialized() const {

  return true;
}

void ContactRpcSendAllFriendGiftPointReply::Swap(ContactRpcSendAllFriendGiftPointReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    sentgiftlist_.Swap(&other->sentgiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSendAllFriendGiftPointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSendAllFriendGiftPointReply_descriptor_;
  metadata.reflection = ContactRpcSendAllFriendGiftPointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcAcquireAllGiftPointAsk::ContactRpcAcquireAllGiftPointAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAcquireAllGiftPointAsk::InitAsDefaultInstance() {
}

ContactRpcAcquireAllGiftPointAsk::ContactRpcAcquireAllGiftPointAsk(const ContactRpcAcquireAllGiftPointAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAcquireAllGiftPointAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAcquireAllGiftPointAsk::~ContactRpcAcquireAllGiftPointAsk() {
  SharedDtor();
}

void ContactRpcAcquireAllGiftPointAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAcquireAllGiftPointAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAcquireAllGiftPointAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAcquireAllGiftPointAsk_descriptor_;
}

const ContactRpcAcquireAllGiftPointAsk& ContactRpcAcquireAllGiftPointAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAcquireAllGiftPointAsk* ContactRpcAcquireAllGiftPointAsk::default_instance_ = NULL;

ContactRpcAcquireAllGiftPointAsk* ContactRpcAcquireAllGiftPointAsk::New() const {
  return new ContactRpcAcquireAllGiftPointAsk;
}

void ContactRpcAcquireAllGiftPointAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAcquireAllGiftPointAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcAcquireAllGiftPointAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAcquireAllGiftPointAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAcquireAllGiftPointAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAcquireAllGiftPointAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAcquireAllGiftPointAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAcquireAllGiftPointAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAcquireAllGiftPointAsk::MergeFrom(const ContactRpcAcquireAllGiftPointAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAcquireAllGiftPointAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAcquireAllGiftPointAsk::CopyFrom(const ContactRpcAcquireAllGiftPointAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAcquireAllGiftPointAsk::IsInitialized() const {

  return true;
}

void ContactRpcAcquireAllGiftPointAsk::Swap(ContactRpcAcquireAllGiftPointAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAcquireAllGiftPointAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAcquireAllGiftPointAsk_descriptor_;
  metadata.reflection = ContactRpcAcquireAllGiftPointAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAcquireAllGiftPointReply::kResultFieldNumber;
const int ContactRpcAcquireAllGiftPointReply::kAcquireGiftListFieldNumber;
const int ContactRpcAcquireAllGiftPointReply::kUnAcquireGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcAcquireAllGiftPointReply::ContactRpcAcquireAllGiftPointReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAcquireAllGiftPointReply::InitAsDefaultInstance() {
}

ContactRpcAcquireAllGiftPointReply::ContactRpcAcquireAllGiftPointReply(const ContactRpcAcquireAllGiftPointReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAcquireAllGiftPointReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAcquireAllGiftPointReply::~ContactRpcAcquireAllGiftPointReply() {
  SharedDtor();
}

void ContactRpcAcquireAllGiftPointReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAcquireAllGiftPointReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAcquireAllGiftPointReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAcquireAllGiftPointReply_descriptor_;
}

const ContactRpcAcquireAllGiftPointReply& ContactRpcAcquireAllGiftPointReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAcquireAllGiftPointReply* ContactRpcAcquireAllGiftPointReply::default_instance_ = NULL;

ContactRpcAcquireAllGiftPointReply* ContactRpcAcquireAllGiftPointReply::New() const {
  return new ContactRpcAcquireAllGiftPointReply;
}

void ContactRpcAcquireAllGiftPointReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  acquiregiftlist_.Clear();
  unacquiregiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAcquireAllGiftPointReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint AcquireGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint UnAcquireGiftList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnAcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unacquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAcquireAllGiftPointReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acquiregiftlist(i), output);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unacquiregiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAcquireAllGiftPointReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acquiregiftlist(i), target);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unacquiregiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAcquireAllGiftPointReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .FriendGiftPoint AcquireGiftList = 2;
  total_size += 1 * this->acquiregiftlist_size();
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acquiregiftlist(i));
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  total_size += 1 * this->unacquiregiftlist_size();
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unacquiregiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAcquireAllGiftPointReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAcquireAllGiftPointReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAcquireAllGiftPointReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAcquireAllGiftPointReply::MergeFrom(const ContactRpcAcquireAllGiftPointReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  acquiregiftlist_.MergeFrom(from.acquiregiftlist_);
  unacquiregiftlist_.MergeFrom(from.unacquiregiftlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAcquireAllGiftPointReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAcquireAllGiftPointReply::CopyFrom(const ContactRpcAcquireAllGiftPointReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAcquireAllGiftPointReply::IsInitialized() const {

  return true;
}

void ContactRpcAcquireAllGiftPointReply::Swap(ContactRpcAcquireAllGiftPointReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    acquiregiftlist_.Swap(&other->acquiregiftlist_);
    unacquiregiftlist_.Swap(&other->unacquiregiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAcquireAllGiftPointReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAcquireAllGiftPointReply_descriptor_;
  metadata.reflection = ContactRpcAcquireAllGiftPointReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcDeleteGroupRoleAsk::kGroupIdFieldNumber;
const int ContactRpcDeleteGroupRoleAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcDeleteGroupRoleAsk::ContactRpcDeleteGroupRoleAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcDeleteGroupRoleAsk::InitAsDefaultInstance() {
}

ContactRpcDeleteGroupRoleAsk::ContactRpcDeleteGroupRoleAsk(const ContactRpcDeleteGroupRoleAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcDeleteGroupRoleAsk::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcDeleteGroupRoleAsk::~ContactRpcDeleteGroupRoleAsk() {
  SharedDtor();
}

void ContactRpcDeleteGroupRoleAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcDeleteGroupRoleAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcDeleteGroupRoleAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcDeleteGroupRoleAsk_descriptor_;
}

const ContactRpcDeleteGroupRoleAsk& ContactRpcDeleteGroupRoleAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcDeleteGroupRoleAsk* ContactRpcDeleteGroupRoleAsk::default_instance_ = NULL;

ContactRpcDeleteGroupRoleAsk* ContactRpcDeleteGroupRoleAsk::New() const {
  return new ContactRpcDeleteGroupRoleAsk;
}

void ContactRpcDeleteGroupRoleAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcDeleteGroupRoleAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcDeleteGroupRoleAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcDeleteGroupRoleAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcDeleteGroupRoleAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcDeleteGroupRoleAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcDeleteGroupRoleAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcDeleteGroupRoleAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcDeleteGroupRoleAsk::MergeFrom(const ContactRpcDeleteGroupRoleAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcDeleteGroupRoleAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcDeleteGroupRoleAsk::CopyFrom(const ContactRpcDeleteGroupRoleAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcDeleteGroupRoleAsk::IsInitialized() const {

  return true;
}

void ContactRpcDeleteGroupRoleAsk::Swap(ContactRpcDeleteGroupRoleAsk* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcDeleteGroupRoleAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcDeleteGroupRoleAsk_descriptor_;
  metadata.reflection = ContactRpcDeleteGroupRoleAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcDeleteGroupRoleReply::kResultFieldNumber;
const int ContactRpcDeleteGroupRoleReply::kContactGroupsFieldNumber;
#endif  // !_MSC_VER

ContactRpcDeleteGroupRoleReply::ContactRpcDeleteGroupRoleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcDeleteGroupRoleReply::InitAsDefaultInstance() {
}

ContactRpcDeleteGroupRoleReply::ContactRpcDeleteGroupRoleReply(const ContactRpcDeleteGroupRoleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcDeleteGroupRoleReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcDeleteGroupRoleReply::~ContactRpcDeleteGroupRoleReply() {
  SharedDtor();
}

void ContactRpcDeleteGroupRoleReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcDeleteGroupRoleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcDeleteGroupRoleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcDeleteGroupRoleReply_descriptor_;
}

const ContactRpcDeleteGroupRoleReply& ContactRpcDeleteGroupRoleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcDeleteGroupRoleReply* ContactRpcDeleteGroupRoleReply::default_instance_ = NULL;

ContactRpcDeleteGroupRoleReply* ContactRpcDeleteGroupRoleReply::New() const {
  return new ContactRpcDeleteGroupRoleReply;
}

void ContactRpcDeleteGroupRoleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  contactgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcDeleteGroupRoleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContactGroups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcDeleteGroupRoleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactGroup ContactGroups = 3;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contactgroups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcDeleteGroupRoleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactGroup ContactGroups = 3;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contactgroups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcDeleteGroupRoleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactGroup ContactGroups = 3;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcDeleteGroupRoleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcDeleteGroupRoleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcDeleteGroupRoleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcDeleteGroupRoleReply::MergeFrom(const ContactRpcDeleteGroupRoleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactgroups_.MergeFrom(from.contactgroups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcDeleteGroupRoleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcDeleteGroupRoleReply::CopyFrom(const ContactRpcDeleteGroupRoleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcDeleteGroupRoleReply::IsInitialized() const {

  return true;
}

void ContactRpcDeleteGroupRoleReply::Swap(ContactRpcDeleteGroupRoleReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcDeleteGroupRoleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcDeleteGroupRoleReply_descriptor_;
  metadata.reflection = ContactRpcDeleteGroupRoleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAddRoleDataNotify::kNewRoleDataFieldNumber;
#endif  // !_MSC_VER

ContactRpcAddRoleDataNotify::ContactRpcAddRoleDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAddRoleDataNotify::InitAsDefaultInstance() {
  newroledata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
}

ContactRpcAddRoleDataNotify::ContactRpcAddRoleDataNotify(const ContactRpcAddRoleDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAddRoleDataNotify::SharedCtor() {
  _cached_size_ = 0;
  newroledata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAddRoleDataNotify::~ContactRpcAddRoleDataNotify() {
  SharedDtor();
}

void ContactRpcAddRoleDataNotify::SharedDtor() {
  if (this != default_instance_) {
    delete newroledata_;
  }
}

void ContactRpcAddRoleDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAddRoleDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAddRoleDataNotify_descriptor_;
}

const ContactRpcAddRoleDataNotify& ContactRpcAddRoleDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAddRoleDataNotify* ContactRpcAddRoleDataNotify::default_instance_ = NULL;

ContactRpcAddRoleDataNotify* ContactRpcAddRoleDataNotify::New() const {
  return new ContactRpcAddRoleDataNotify;
}

void ContactRpcAddRoleDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newroledata()) {
      if (newroledata_ != NULL) newroledata_->::ContactData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAddRoleDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContactData NewRoleData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newroledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAddRoleDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContactData NewRoleData = 1;
  if (has_newroledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newroledata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAddRoleDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContactData NewRoleData = 1;
  if (has_newroledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newroledata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAddRoleDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContactData NewRoleData = 1;
    if (has_newroledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newroledata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAddRoleDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAddRoleDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAddRoleDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAddRoleDataNotify::MergeFrom(const ContactRpcAddRoleDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newroledata()) {
      mutable_newroledata()->::ContactData::MergeFrom(from.newroledata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAddRoleDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAddRoleDataNotify::CopyFrom(const ContactRpcAddRoleDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAddRoleDataNotify::IsInitialized() const {

  return true;
}

void ContactRpcAddRoleDataNotify::Swap(ContactRpcAddRoleDataNotify* other) {
  if (other != this) {
    std::swap(newroledata_, other->newroledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAddRoleDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAddRoleDataNotify_descriptor_;
  metadata.reflection = ContactRpcAddRoleDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcSetGiftPointNotify::kAcquireGiftListFieldNumber;
const int ContactRpcSetGiftPointNotify::kUnAcquireGiftListFieldNumber;
const int ContactRpcSetGiftPointNotify::kSentGiftListFieldNumber;
#endif  // !_MSC_VER

ContactRpcSetGiftPointNotify::ContactRpcSetGiftPointNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcSetGiftPointNotify::InitAsDefaultInstance() {
}

ContactRpcSetGiftPointNotify::ContactRpcSetGiftPointNotify(const ContactRpcSetGiftPointNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcSetGiftPointNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcSetGiftPointNotify::~ContactRpcSetGiftPointNotify() {
  SharedDtor();
}

void ContactRpcSetGiftPointNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcSetGiftPointNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcSetGiftPointNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcSetGiftPointNotify_descriptor_;
}

const ContactRpcSetGiftPointNotify& ContactRpcSetGiftPointNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcSetGiftPointNotify* ContactRpcSetGiftPointNotify::default_instance_ = NULL;

ContactRpcSetGiftPointNotify* ContactRpcSetGiftPointNotify::New() const {
  return new ContactRpcSetGiftPointNotify;
}

void ContactRpcSetGiftPointNotify::Clear() {
  acquiregiftlist_.Clear();
  unacquiregiftlist_.Clear();
  sentgiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcSetGiftPointNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendGiftPoint AcquireGiftList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AcquireGiftList;
        if (input->ExpectTag(18)) goto parse_UnAcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint UnAcquireGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnAcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unacquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UnAcquireGiftList;
        if (input->ExpectTag(26)) goto parse_SentGiftList;
        break;
      }

      // repeated .FriendGiftPoint SentGiftList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SentGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentgiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SentGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcSetGiftPointNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendGiftPoint AcquireGiftList = 1;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acquiregiftlist(i), output);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 2;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unacquiregiftlist(i), output);
  }

  // repeated .FriendGiftPoint SentGiftList = 3;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentgiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcSetGiftPointNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendGiftPoint AcquireGiftList = 1;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acquiregiftlist(i), target);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 2;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unacquiregiftlist(i), target);
  }

  // repeated .FriendGiftPoint SentGiftList = 3;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sentgiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcSetGiftPointNotify::ByteSize() const {
  int total_size = 0;

  // repeated .FriendGiftPoint AcquireGiftList = 1;
  total_size += 1 * this->acquiregiftlist_size();
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acquiregiftlist(i));
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 2;
  total_size += 1 * this->unacquiregiftlist_size();
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unacquiregiftlist(i));
  }

  // repeated .FriendGiftPoint SentGiftList = 3;
  total_size += 1 * this->sentgiftlist_size();
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentgiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcSetGiftPointNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcSetGiftPointNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcSetGiftPointNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcSetGiftPointNotify::MergeFrom(const ContactRpcSetGiftPointNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  acquiregiftlist_.MergeFrom(from.acquiregiftlist_);
  unacquiregiftlist_.MergeFrom(from.unacquiregiftlist_);
  sentgiftlist_.MergeFrom(from.sentgiftlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcSetGiftPointNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcSetGiftPointNotify::CopyFrom(const ContactRpcSetGiftPointNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcSetGiftPointNotify::IsInitialized() const {

  return true;
}

void ContactRpcSetGiftPointNotify::Swap(ContactRpcSetGiftPointNotify* other) {
  if (other != this) {
    acquiregiftlist_.Swap(&other->acquiregiftlist_);
    unacquiregiftlist_.Swap(&other->unacquiregiftlist_);
    sentgiftlist_.Swap(&other->sentgiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcSetGiftPointNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcSetGiftPointNotify_descriptor_;
  metadata.reflection = ContactRpcSetGiftPointNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcContactsGroupsNotify::kMyFriendGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcContactsGroupsNotify::ContactRpcContactsGroupsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcContactsGroupsNotify::InitAsDefaultInstance() {
}

ContactRpcContactsGroupsNotify::ContactRpcContactsGroupsNotify(const ContactRpcContactsGroupsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcContactsGroupsNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcContactsGroupsNotify::~ContactRpcContactsGroupsNotify() {
  SharedDtor();
}

void ContactRpcContactsGroupsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcContactsGroupsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcContactsGroupsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcContactsGroupsNotify_descriptor_;
}

const ContactRpcContactsGroupsNotify& ContactRpcContactsGroupsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcContactsGroupsNotify* ContactRpcContactsGroupsNotify::default_instance_ = NULL;

ContactRpcContactsGroupsNotify* ContactRpcContactsGroupsNotify::New() const {
  return new ContactRpcContactsGroupsNotify;
}

void ContactRpcContactsGroupsNotify::Clear() {
  myfriendgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcContactsGroupsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContactGroup MyFriendGroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MyFriendGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcContactsGroupsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ContactGroup MyFriendGroup = 1;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myfriendgroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcContactsGroupsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ContactGroup MyFriendGroup = 1;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myfriendgroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcContactsGroupsNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ContactGroup MyFriendGroup = 1;
  total_size += 1 * this->myfriendgroup_size();
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfriendgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcContactsGroupsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcContactsGroupsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcContactsGroupsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcContactsGroupsNotify::MergeFrom(const ContactRpcContactsGroupsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  myfriendgroup_.MergeFrom(from.myfriendgroup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcContactsGroupsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcContactsGroupsNotify::CopyFrom(const ContactRpcContactsGroupsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcContactsGroupsNotify::IsInitialized() const {

  return true;
}

void ContactRpcContactsGroupsNotify::Swap(ContactRpcContactsGroupsNotify* other) {
  if (other != this) {
    myfriendgroup_.Swap(&other->myfriendgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcContactsGroupsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcContactsGroupsNotify_descriptor_;
  metadata.reflection = ContactRpcContactsGroupsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ContactRpcAgreeAllApplicationAsk::ContactRpcAgreeAllApplicationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAgreeAllApplicationAsk::InitAsDefaultInstance() {
}

ContactRpcAgreeAllApplicationAsk::ContactRpcAgreeAllApplicationAsk(const ContactRpcAgreeAllApplicationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAgreeAllApplicationAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAgreeAllApplicationAsk::~ContactRpcAgreeAllApplicationAsk() {
  SharedDtor();
}

void ContactRpcAgreeAllApplicationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAgreeAllApplicationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAgreeAllApplicationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAgreeAllApplicationAsk_descriptor_;
}

const ContactRpcAgreeAllApplicationAsk& ContactRpcAgreeAllApplicationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAgreeAllApplicationAsk* ContactRpcAgreeAllApplicationAsk::default_instance_ = NULL;

ContactRpcAgreeAllApplicationAsk* ContactRpcAgreeAllApplicationAsk::New() const {
  return new ContactRpcAgreeAllApplicationAsk;
}

void ContactRpcAgreeAllApplicationAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAgreeAllApplicationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ContactRpcAgreeAllApplicationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAgreeAllApplicationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAgreeAllApplicationAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAgreeAllApplicationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAgreeAllApplicationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAgreeAllApplicationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAgreeAllApplicationAsk::MergeFrom(const ContactRpcAgreeAllApplicationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAgreeAllApplicationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAgreeAllApplicationAsk::CopyFrom(const ContactRpcAgreeAllApplicationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAgreeAllApplicationAsk::IsInitialized() const {

  return true;
}

void ContactRpcAgreeAllApplicationAsk::Swap(ContactRpcAgreeAllApplicationAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAgreeAllApplicationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAgreeAllApplicationAsk_descriptor_;
  metadata.reflection = ContactRpcAgreeAllApplicationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcAgreeAllApplicationReply::kResultFieldNumber;
const int ContactRpcAgreeAllApplicationReply::kNewFriendDataFieldNumber;
const int ContactRpcAgreeAllApplicationReply::kMyFriendGroupFieldNumber;
#endif  // !_MSC_VER

ContactRpcAgreeAllApplicationReply::ContactRpcAgreeAllApplicationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcAgreeAllApplicationReply::InitAsDefaultInstance() {
}

ContactRpcAgreeAllApplicationReply::ContactRpcAgreeAllApplicationReply(const ContactRpcAgreeAllApplicationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcAgreeAllApplicationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcAgreeAllApplicationReply::~ContactRpcAgreeAllApplicationReply() {
  SharedDtor();
}

void ContactRpcAgreeAllApplicationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcAgreeAllApplicationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcAgreeAllApplicationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcAgreeAllApplicationReply_descriptor_;
}

const ContactRpcAgreeAllApplicationReply& ContactRpcAgreeAllApplicationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcAgreeAllApplicationReply* ContactRpcAgreeAllApplicationReply::default_instance_ = NULL;

ContactRpcAgreeAllApplicationReply* ContactRpcAgreeAllApplicationReply::New() const {
  return new ContactRpcAgreeAllApplicationReply;
}

void ContactRpcAgreeAllApplicationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  newfrienddata_.Clear();
  myfriendgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcAgreeAllApplicationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewFriendData;
        break;
      }

      // repeated .ContactData NewFriendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewFriendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newfrienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NewFriendData;
        if (input->ExpectTag(26)) goto parse_MyFriendGroup;
        break;
      }

      // repeated .ContactGroup MyFriendGroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyFriendGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myfriendgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MyFriendGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcAgreeAllApplicationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ContactData NewFriendData = 2;
  for (int i = 0; i < this->newfrienddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newfrienddata(i), output);
  }

  // repeated .ContactGroup MyFriendGroup = 3;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->myfriendgroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcAgreeAllApplicationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ContactData NewFriendData = 2;
  for (int i = 0; i < this->newfrienddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newfrienddata(i), target);
  }

  // repeated .ContactGroup MyFriendGroup = 3;
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->myfriendgroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcAgreeAllApplicationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ContactData NewFriendData = 2;
  total_size += 1 * this->newfrienddata_size();
  for (int i = 0; i < this->newfrienddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newfrienddata(i));
  }

  // repeated .ContactGroup MyFriendGroup = 3;
  total_size += 1 * this->myfriendgroup_size();
  for (int i = 0; i < this->myfriendgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfriendgroup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcAgreeAllApplicationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcAgreeAllApplicationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcAgreeAllApplicationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcAgreeAllApplicationReply::MergeFrom(const ContactRpcAgreeAllApplicationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  newfrienddata_.MergeFrom(from.newfrienddata_);
  myfriendgroup_.MergeFrom(from.myfriendgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcAgreeAllApplicationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcAgreeAllApplicationReply::CopyFrom(const ContactRpcAgreeAllApplicationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcAgreeAllApplicationReply::IsInitialized() const {

  return true;
}

void ContactRpcAgreeAllApplicationReply::Swap(ContactRpcAgreeAllApplicationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    newfrienddata_.Swap(&other->newfrienddata_);
    myfriendgroup_.Swap(&other->myfriendgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcAgreeAllApplicationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcAgreeAllApplicationReply_descriptor_;
  metadata.reflection = ContactRpcAgreeAllApplicationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcChatToAsk::kRoleIdFieldNumber;
const int ContactRpcChatToAsk::kChatMsgFieldNumber;
#endif  // !_MSC_VER

ContactRpcChatToAsk::ContactRpcChatToAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcChatToAsk::InitAsDefaultInstance() {
  chatmsg_ = const_cast< ::ChatMsg*>(&::ChatMsg::default_instance());
}

ContactRpcChatToAsk::ContactRpcChatToAsk(const ContactRpcChatToAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcChatToAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  chatmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcChatToAsk::~ContactRpcChatToAsk() {
  SharedDtor();
}

void ContactRpcChatToAsk::SharedDtor() {
  if (this != default_instance_) {
    delete chatmsg_;
  }
}

void ContactRpcChatToAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcChatToAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcChatToAsk_descriptor_;
}

const ContactRpcChatToAsk& ContactRpcChatToAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcChatToAsk* ContactRpcChatToAsk::default_instance_ = NULL;

ContactRpcChatToAsk* ContactRpcChatToAsk::New() const {
  return new ContactRpcChatToAsk;
}

void ContactRpcChatToAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_chatmsg()) {
      if (chatmsg_ != NULL) chatmsg_->::ChatMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcChatToAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChatMsg;
        break;
      }

      // optional .ChatMsg ChatMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcChatToAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional .ChatMsg ChatMsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcChatToAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional .ChatMsg ChatMsg = 2;
  if (has_chatmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcChatToAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional .ChatMsg ChatMsg = 2;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcChatToAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcChatToAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcChatToAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcChatToAsk::MergeFrom(const ContactRpcChatToAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_chatmsg()) {
      mutable_chatmsg()->::ChatMsg::MergeFrom(from.chatmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcChatToAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcChatToAsk::CopyFrom(const ContactRpcChatToAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcChatToAsk::IsInitialized() const {

  return true;
}

void ContactRpcChatToAsk::Swap(ContactRpcChatToAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcChatToAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcChatToAsk_descriptor_;
  metadata.reflection = ContactRpcChatToAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcChatToReply::kResultFieldNumber;
#endif  // !_MSC_VER

ContactRpcChatToReply::ContactRpcChatToReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcChatToReply::InitAsDefaultInstance() {
}

ContactRpcChatToReply::ContactRpcChatToReply(const ContactRpcChatToReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcChatToReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcChatToReply::~ContactRpcChatToReply() {
  SharedDtor();
}

void ContactRpcChatToReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcChatToReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcChatToReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcChatToReply_descriptor_;
}

const ContactRpcChatToReply& ContactRpcChatToReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcChatToReply* ContactRpcChatToReply::default_instance_ = NULL;

ContactRpcChatToReply* ContactRpcChatToReply::New() const {
  return new ContactRpcChatToReply;
}

void ContactRpcChatToReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcChatToReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcChatToReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcChatToReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcChatToReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcChatToReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcChatToReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcChatToReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcChatToReply::MergeFrom(const ContactRpcChatToReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcChatToReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcChatToReply::CopyFrom(const ContactRpcChatToReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcChatToReply::IsInitialized() const {

  return true;
}

void ContactRpcChatToReply::Swap(ContactRpcChatToReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcChatToReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcChatToReply_descriptor_;
  metadata.reflection = ContactRpcChatToReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcNewChatMsgNotify::kChatMsgFieldNumber;
const int ContactRpcNewChatMsgNotify::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcNewChatMsgNotify::ContactRpcNewChatMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcNewChatMsgNotify::InitAsDefaultInstance() {
  chatmsg_ = const_cast< ::ChatInfo*>(&::ChatInfo::default_instance());
}

ContactRpcNewChatMsgNotify::ContactRpcNewChatMsgNotify(const ContactRpcNewChatMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcNewChatMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  chatmsg_ = NULL;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcNewChatMsgNotify::~ContactRpcNewChatMsgNotify() {
  SharedDtor();
}

void ContactRpcNewChatMsgNotify::SharedDtor() {
  if (this != default_instance_) {
    delete chatmsg_;
  }
}

void ContactRpcNewChatMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcNewChatMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcNewChatMsgNotify_descriptor_;
}

const ContactRpcNewChatMsgNotify& ContactRpcNewChatMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcNewChatMsgNotify* ContactRpcNewChatMsgNotify::default_instance_ = NULL;

ContactRpcNewChatMsgNotify* ContactRpcNewChatMsgNotify::New() const {
  return new ContactRpcNewChatMsgNotify;
}

void ContactRpcNewChatMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatmsg()) {
      if (chatmsg_ != NULL) chatmsg_->::ChatInfo::Clear();
    }
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcNewChatMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatInfo ChatMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcNewChatMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatInfo ChatMsg = 1;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmsg(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcNewChatMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatInfo ChatMsg = 1;
  if (has_chatmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmsg(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcNewChatMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatInfo ChatMsg = 1;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcNewChatMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcNewChatMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcNewChatMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcNewChatMsgNotify::MergeFrom(const ContactRpcNewChatMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatmsg()) {
      mutable_chatmsg()->::ChatInfo::MergeFrom(from.chatmsg());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcNewChatMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcNewChatMsgNotify::CopyFrom(const ContactRpcNewChatMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcNewChatMsgNotify::IsInitialized() const {

  return true;
}

void ContactRpcNewChatMsgNotify::Swap(ContactRpcNewChatMsgNotify* other) {
  if (other != this) {
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcNewChatMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcNewChatMsgNotify_descriptor_;
  metadata.reflection = ContactRpcNewChatMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcReadMsgAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcReadMsgAsk::ContactRpcReadMsgAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcReadMsgAsk::InitAsDefaultInstance() {
}

ContactRpcReadMsgAsk::ContactRpcReadMsgAsk(const ContactRpcReadMsgAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcReadMsgAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcReadMsgAsk::~ContactRpcReadMsgAsk() {
  SharedDtor();
}

void ContactRpcReadMsgAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcReadMsgAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcReadMsgAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcReadMsgAsk_descriptor_;
}

const ContactRpcReadMsgAsk& ContactRpcReadMsgAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcReadMsgAsk* ContactRpcReadMsgAsk::default_instance_ = NULL;

ContactRpcReadMsgAsk* ContactRpcReadMsgAsk::New() const {
  return new ContactRpcReadMsgAsk;
}

void ContactRpcReadMsgAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcReadMsgAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcReadMsgAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcReadMsgAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcReadMsgAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcReadMsgAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcReadMsgAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcReadMsgAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcReadMsgAsk::MergeFrom(const ContactRpcReadMsgAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcReadMsgAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcReadMsgAsk::CopyFrom(const ContactRpcReadMsgAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcReadMsgAsk::IsInitialized() const {

  return true;
}

void ContactRpcReadMsgAsk::Swap(ContactRpcReadMsgAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcReadMsgAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcReadMsgAsk_descriptor_;
  metadata.reflection = ContactRpcReadMsgAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactRpcReadMsgReply::kResultFieldNumber;
const int ContactRpcReadMsgReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ContactRpcReadMsgReply::ContactRpcReadMsgReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactRpcReadMsgReply::InitAsDefaultInstance() {
}

ContactRpcReadMsgReply::ContactRpcReadMsgReply(const ContactRpcReadMsgReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactRpcReadMsgReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRpcReadMsgReply::~ContactRpcReadMsgReply() {
  SharedDtor();
}

void ContactRpcReadMsgReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactRpcReadMsgReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRpcReadMsgReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRpcReadMsgReply_descriptor_;
}

const ContactRpcReadMsgReply& ContactRpcReadMsgReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRpc_2eproto();
  return *default_instance_;
}

ContactRpcReadMsgReply* ContactRpcReadMsgReply::default_instance_ = NULL;

ContactRpcReadMsgReply* ContactRpcReadMsgReply::New() const {
  return new ContactRpcReadMsgReply;
}

void ContactRpcReadMsgReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactRpcReadMsgReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactRpcReadMsgReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactRpcReadMsgReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactRpcReadMsgReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRpcReadMsgReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactRpcReadMsgReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactRpcReadMsgReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactRpcReadMsgReply::MergeFrom(const ContactRpcReadMsgReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactRpcReadMsgReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRpcReadMsgReply::CopyFrom(const ContactRpcReadMsgReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRpcReadMsgReply::IsInitialized() const {

  return true;
}

void ContactRpcReadMsgReply::Swap(ContactRpcReadMsgReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactRpcReadMsgReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRpcReadMsgReply_descriptor_;
  metadata.reflection = ContactRpcReadMsgReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
