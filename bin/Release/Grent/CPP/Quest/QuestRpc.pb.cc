// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuestRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QuestRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QuestRpcOnAcceptQuestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcOnAcceptQuestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestStepAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteQuestStepAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestStepReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteQuestStepReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcOnCompleteQuestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcOnCompleteQuestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCallClientLuaNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCallClientLuaNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcUpdateQuestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcUpdateQuestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGiveUpQuestAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGiveUpQuestAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGiveUpQuestReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGiveUpQuestReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteQuestAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteQuestReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteAcceptChatMenuAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteAcceptChatMenuAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteAcceptChatMenuReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteAcceptChatMenuReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcAcceptQuestAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcAcceptQuestAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcAcceptQuestReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcAcceptQuestReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncQuestAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncQuestAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncQuestReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncQuestReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGetRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGetRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGetRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGetRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcRemoveQuestNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcRemoveQuestNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGetQuestDataAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGetQuestDataAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcGetQuestDataReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcGetQuestDataReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncDailyQuestAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncDailyQuestAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncDailyQuestReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncDailyQuestReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcDailyQuestUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcDailyQuestUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcConsumeItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcConsumeItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcConsumeItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcConsumeItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcQuestMaxListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcQuestMaxListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcQuestMaxListNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncCompleteQuestIdsAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncCompleteQuestIdsAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncCompleteQuestIdsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncCompleteQuestIdsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestIdsNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcCompleteQuestIdsNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcEliteFinishCountAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcEliteFinishCountAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcEliteFinishCountReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcEliteFinishCountReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRpcSyncCanAcceptQuestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRpcSyncCanAcceptQuestNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QuestRpc_2eproto() {
  protobuf_AddDesc_QuestRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QuestRpc.proto");
  GOOGLE_CHECK(file != NULL);
  QuestRpcOnAcceptQuestNotify_descriptor_ = file->message_type(0);
  static const int QuestRpcOnAcceptQuestNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnAcceptQuestNotify, acceptquest_),
  };
  QuestRpcOnAcceptQuestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcOnAcceptQuestNotify_descriptor_,
      QuestRpcOnAcceptQuestNotify::default_instance_,
      QuestRpcOnAcceptQuestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnAcceptQuestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnAcceptQuestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcOnAcceptQuestNotify));
  QuestRpcCompleteQuestStepAsk_descriptor_ = file->message_type(1);
  static const int QuestRpcCompleteQuestStepAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, questconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, queststep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, queststepeventtype_),
  };
  QuestRpcCompleteQuestStepAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteQuestStepAsk_descriptor_,
      QuestRpcCompleteQuestStepAsk::default_instance_,
      QuestRpcCompleteQuestStepAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteQuestStepAsk));
  QuestRpcCompleteQuestStepReply_descriptor_ = file->message_type(2);
  static const int QuestRpcCompleteQuestStepReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepReply, result_),
  };
  QuestRpcCompleteQuestStepReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteQuestStepReply_descriptor_,
      QuestRpcCompleteQuestStepReply::default_instance_,
      QuestRpcCompleteQuestStepReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestStepReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteQuestStepReply));
  QuestRpcOnCompleteQuestNotify_descriptor_ = file->message_type(3);
  static const int QuestRpcOnCompleteQuestNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnCompleteQuestNotify, questdata_),
  };
  QuestRpcOnCompleteQuestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcOnCompleteQuestNotify_descriptor_,
      QuestRpcOnCompleteQuestNotify::default_instance_,
      QuestRpcOnCompleteQuestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnCompleteQuestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcOnCompleteQuestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcOnCompleteQuestNotify));
  QuestRpcCallClientLuaNotify_descriptor_ = file->message_type(4);
  static const int QuestRpcCallClientLuaNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCallClientLuaNotify, str_),
  };
  QuestRpcCallClientLuaNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCallClientLuaNotify_descriptor_,
      QuestRpcCallClientLuaNotify::default_instance_,
      QuestRpcCallClientLuaNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCallClientLuaNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCallClientLuaNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCallClientLuaNotify));
  QuestRpcUpdateQuestNotify_descriptor_ = file->message_type(5);
  static const int QuestRpcUpdateQuestNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcUpdateQuestNotify, quest_),
  };
  QuestRpcUpdateQuestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcUpdateQuestNotify_descriptor_,
      QuestRpcUpdateQuestNotify::default_instance_,
      QuestRpcUpdateQuestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcUpdateQuestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcUpdateQuestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcUpdateQuestNotify));
  QuestRpcGiveUpQuestAsk_descriptor_ = file->message_type(6);
  static const int QuestRpcGiveUpQuestAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestAsk, questconfigid_),
  };
  QuestRpcGiveUpQuestAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGiveUpQuestAsk_descriptor_,
      QuestRpcGiveUpQuestAsk::default_instance_,
      QuestRpcGiveUpQuestAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGiveUpQuestAsk));
  QuestRpcGiveUpQuestReply_descriptor_ = file->message_type(7);
  static const int QuestRpcGiveUpQuestReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestReply, result_),
  };
  QuestRpcGiveUpQuestReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGiveUpQuestReply_descriptor_,
      QuestRpcGiveUpQuestReply::default_instance_,
      QuestRpcGiveUpQuestReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGiveUpQuestReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGiveUpQuestReply));
  QuestRpcCompleteQuestAsk_descriptor_ = file->message_type(8);
  static const int QuestRpcCompleteQuestAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestAsk, questconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestAsk, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestAsk, questeventtype_),
  };
  QuestRpcCompleteQuestAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteQuestAsk_descriptor_,
      QuestRpcCompleteQuestAsk::default_instance_,
      QuestRpcCompleteQuestAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteQuestAsk));
  QuestRpcCompleteQuestReply_descriptor_ = file->message_type(9);
  static const int QuestRpcCompleteQuestReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestReply, result_),
  };
  QuestRpcCompleteQuestReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteQuestReply_descriptor_,
      QuestRpcCompleteQuestReply::default_instance_,
      QuestRpcCompleteQuestReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteQuestReply));
  QuestRpcCompleteAcceptChatMenuAsk_descriptor_ = file->message_type(10);
  static const int QuestRpcCompleteAcceptChatMenuAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuAsk, questconfigid_),
  };
  QuestRpcCompleteAcceptChatMenuAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteAcceptChatMenuAsk_descriptor_,
      QuestRpcCompleteAcceptChatMenuAsk::default_instance_,
      QuestRpcCompleteAcceptChatMenuAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteAcceptChatMenuAsk));
  QuestRpcCompleteAcceptChatMenuReply_descriptor_ = file->message_type(11);
  static const int QuestRpcCompleteAcceptChatMenuReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuReply, result_),
  };
  QuestRpcCompleteAcceptChatMenuReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteAcceptChatMenuReply_descriptor_,
      QuestRpcCompleteAcceptChatMenuReply::default_instance_,
      QuestRpcCompleteAcceptChatMenuReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteAcceptChatMenuReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteAcceptChatMenuReply));
  QuestRpcAcceptQuestAsk_descriptor_ = file->message_type(12);
  static const int QuestRpcAcceptQuestAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestAsk, questconfigid_),
  };
  QuestRpcAcceptQuestAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcAcceptQuestAsk_descriptor_,
      QuestRpcAcceptQuestAsk::default_instance_,
      QuestRpcAcceptQuestAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcAcceptQuestAsk));
  QuestRpcAcceptQuestReply_descriptor_ = file->message_type(13);
  static const int QuestRpcAcceptQuestReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestReply, result_),
  };
  QuestRpcAcceptQuestReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcAcceptQuestReply_descriptor_,
      QuestRpcAcceptQuestReply::default_instance_,
      QuestRpcAcceptQuestReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcAcceptQuestReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcAcceptQuestReply));
  QuestRpcSyncQuestAsk_descriptor_ = file->message_type(14);
  static const int QuestRpcSyncQuestAsk_offsets_[1] = {
  };
  QuestRpcSyncQuestAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncQuestAsk_descriptor_,
      QuestRpcSyncQuestAsk::default_instance_,
      QuestRpcSyncQuestAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncQuestAsk));
  QuestRpcSyncQuestReply_descriptor_ = file->message_type(15);
  static const int QuestRpcSyncQuestReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, questlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, completequestidslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, canacceptquest_),
  };
  QuestRpcSyncQuestReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncQuestReply_descriptor_,
      QuestRpcSyncQuestReply::default_instance_,
      QuestRpcSyncQuestReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncQuestReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncQuestReply));
  QuestRpcGetRewardAsk_descriptor_ = file->message_type(16);
  static const int QuestRpcGetRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardAsk, questconfigid_),
  };
  QuestRpcGetRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGetRewardAsk_descriptor_,
      QuestRpcGetRewardAsk::default_instance_,
      QuestRpcGetRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGetRewardAsk));
  QuestRpcGetRewardReply_descriptor_ = file->message_type(17);
  static const int QuestRpcGetRewardReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardReply, result_),
  };
  QuestRpcGetRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGetRewardReply_descriptor_,
      QuestRpcGetRewardReply::default_instance_,
      QuestRpcGetRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGetRewardReply));
  QuestRpcRemoveQuestNotifyNotify_descriptor_ = file->message_type(18);
  static const int QuestRpcRemoveQuestNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcRemoveQuestNotifyNotify, questconfigid_),
  };
  QuestRpcRemoveQuestNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcRemoveQuestNotifyNotify_descriptor_,
      QuestRpcRemoveQuestNotifyNotify::default_instance_,
      QuestRpcRemoveQuestNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcRemoveQuestNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcRemoveQuestNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcRemoveQuestNotifyNotify));
  QuestRpcGetQuestDataAsk_descriptor_ = file->message_type(19);
  static const int QuestRpcGetQuestDataAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataAsk, questconfigid_),
  };
  QuestRpcGetQuestDataAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGetQuestDataAsk_descriptor_,
      QuestRpcGetQuestDataAsk::default_instance_,
      QuestRpcGetQuestDataAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGetQuestDataAsk));
  QuestRpcGetQuestDataReply_descriptor_ = file->message_type(20);
  static const int QuestRpcGetQuestDataReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataReply, questlist_),
  };
  QuestRpcGetQuestDataReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcGetQuestDataReply_descriptor_,
      QuestRpcGetQuestDataReply::default_instance_,
      QuestRpcGetQuestDataReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcGetQuestDataReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcGetQuestDataReply));
  QuestRpcSyncDailyQuestAsk_descriptor_ = file->message_type(21);
  static const int QuestRpcSyncDailyQuestAsk_offsets_[1] = {
  };
  QuestRpcSyncDailyQuestAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncDailyQuestAsk_descriptor_,
      QuestRpcSyncDailyQuestAsk::default_instance_,
      QuestRpcSyncDailyQuestAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncDailyQuestAsk));
  QuestRpcSyncDailyQuestReply_descriptor_ = file->message_type(22);
  static const int QuestRpcSyncDailyQuestReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestReply, dailyquestlist_),
  };
  QuestRpcSyncDailyQuestReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncDailyQuestReply_descriptor_,
      QuestRpcSyncDailyQuestReply::default_instance_,
      QuestRpcSyncDailyQuestReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncDailyQuestReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncDailyQuestReply));
  QuestRpcDailyQuestUpdateNotify_descriptor_ = file->message_type(23);
  static const int QuestRpcDailyQuestUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcDailyQuestUpdateNotify, ativityquestdata_),
  };
  QuestRpcDailyQuestUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcDailyQuestUpdateNotify_descriptor_,
      QuestRpcDailyQuestUpdateNotify::default_instance_,
      QuestRpcDailyQuestUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcDailyQuestUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcDailyQuestUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcDailyQuestUpdateNotify));
  QuestRpcConsumeItemAsk_descriptor_ = file->message_type(24);
  static const int QuestRpcConsumeItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemAsk, questconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemAsk, itemdata_),
  };
  QuestRpcConsumeItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcConsumeItemAsk_descriptor_,
      QuestRpcConsumeItemAsk::default_instance_,
      QuestRpcConsumeItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcConsumeItemAsk));
  QuestRpcConsumeItemReply_descriptor_ = file->message_type(25);
  static const int QuestRpcConsumeItemReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemReply, result_),
  };
  QuestRpcConsumeItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcConsumeItemReply_descriptor_,
      QuestRpcConsumeItemReply::default_instance_,
      QuestRpcConsumeItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcConsumeItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcConsumeItemReply));
  QuestRpcQuestMaxListAsk_descriptor_ = file->message_type(26);
  static const int QuestRpcQuestMaxListAsk_offsets_[1] = {
  };
  QuestRpcQuestMaxListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcQuestMaxListAsk_descriptor_,
      QuestRpcQuestMaxListAsk::default_instance_,
      QuestRpcQuestMaxListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcQuestMaxListAsk));
  QuestRpcQuestMaxListReply_descriptor_ = file->message_type(27);
  static const int QuestRpcQuestMaxListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListReply, questlist_),
  };
  QuestRpcQuestMaxListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcQuestMaxListReply_descriptor_,
      QuestRpcQuestMaxListReply::default_instance_,
      QuestRpcQuestMaxListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcQuestMaxListReply));
  QuestRpcQuestMaxListNotifyNotify_descriptor_ = file->message_type(28);
  static const int QuestRpcQuestMaxListNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListNotifyNotify, questlist_),
  };
  QuestRpcQuestMaxListNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcQuestMaxListNotifyNotify_descriptor_,
      QuestRpcQuestMaxListNotifyNotify::default_instance_,
      QuestRpcQuestMaxListNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcQuestMaxListNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcQuestMaxListNotifyNotify));
  QuestRpcSyncCompleteQuestIdsAsk_descriptor_ = file->message_type(29);
  static const int QuestRpcSyncCompleteQuestIdsAsk_offsets_[1] = {
  };
  QuestRpcSyncCompleteQuestIdsAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncCompleteQuestIdsAsk_descriptor_,
      QuestRpcSyncCompleteQuestIdsAsk::default_instance_,
      QuestRpcSyncCompleteQuestIdsAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncCompleteQuestIdsAsk));
  QuestRpcSyncCompleteQuestIdsReply_descriptor_ = file->message_type(30);
  static const int QuestRpcSyncCompleteQuestIdsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsReply, completequestids_),
  };
  QuestRpcSyncCompleteQuestIdsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncCompleteQuestIdsReply_descriptor_,
      QuestRpcSyncCompleteQuestIdsReply::default_instance_,
      QuestRpcSyncCompleteQuestIdsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCompleteQuestIdsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncCompleteQuestIdsReply));
  QuestRpcCompleteQuestIdsNotifyNotify_descriptor_ = file->message_type(31);
  static const int QuestRpcCompleteQuestIdsNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestIdsNotifyNotify, completequestids_),
  };
  QuestRpcCompleteQuestIdsNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcCompleteQuestIdsNotifyNotify_descriptor_,
      QuestRpcCompleteQuestIdsNotifyNotify::default_instance_,
      QuestRpcCompleteQuestIdsNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestIdsNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcCompleteQuestIdsNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcCompleteQuestIdsNotifyNotify));
  QuestRpcEliteFinishCountAsk_descriptor_ = file->message_type(32);
  static const int QuestRpcEliteFinishCountAsk_offsets_[1] = {
  };
  QuestRpcEliteFinishCountAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcEliteFinishCountAsk_descriptor_,
      QuestRpcEliteFinishCountAsk::default_instance_,
      QuestRpcEliteFinishCountAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcEliteFinishCountAsk));
  QuestRpcEliteFinishCountReply_descriptor_ = file->message_type(33);
  static const int QuestRpcEliteFinishCountReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountReply, count_),
  };
  QuestRpcEliteFinishCountReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcEliteFinishCountReply_descriptor_,
      QuestRpcEliteFinishCountReply::default_instance_,
      QuestRpcEliteFinishCountReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcEliteFinishCountReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcEliteFinishCountReply));
  QuestRpcSyncCanAcceptQuestNotify_descriptor_ = file->message_type(34);
  static const int QuestRpcSyncCanAcceptQuestNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCanAcceptQuestNotify, canacceptquest_),
  };
  QuestRpcSyncCanAcceptQuestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRpcSyncCanAcceptQuestNotify_descriptor_,
      QuestRpcSyncCanAcceptQuestNotify::default_instance_,
      QuestRpcSyncCanAcceptQuestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCanAcceptQuestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRpcSyncCanAcceptQuestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRpcSyncCanAcceptQuestNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QuestRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcOnAcceptQuestNotify_descriptor_, &QuestRpcOnAcceptQuestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteQuestStepAsk_descriptor_, &QuestRpcCompleteQuestStepAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteQuestStepReply_descriptor_, &QuestRpcCompleteQuestStepReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcOnCompleteQuestNotify_descriptor_, &QuestRpcOnCompleteQuestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCallClientLuaNotify_descriptor_, &QuestRpcCallClientLuaNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcUpdateQuestNotify_descriptor_, &QuestRpcUpdateQuestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGiveUpQuestAsk_descriptor_, &QuestRpcGiveUpQuestAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGiveUpQuestReply_descriptor_, &QuestRpcGiveUpQuestReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteQuestAsk_descriptor_, &QuestRpcCompleteQuestAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteQuestReply_descriptor_, &QuestRpcCompleteQuestReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteAcceptChatMenuAsk_descriptor_, &QuestRpcCompleteAcceptChatMenuAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteAcceptChatMenuReply_descriptor_, &QuestRpcCompleteAcceptChatMenuReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcAcceptQuestAsk_descriptor_, &QuestRpcAcceptQuestAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcAcceptQuestReply_descriptor_, &QuestRpcAcceptQuestReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncQuestAsk_descriptor_, &QuestRpcSyncQuestAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncQuestReply_descriptor_, &QuestRpcSyncQuestReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGetRewardAsk_descriptor_, &QuestRpcGetRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGetRewardReply_descriptor_, &QuestRpcGetRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcRemoveQuestNotifyNotify_descriptor_, &QuestRpcRemoveQuestNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGetQuestDataAsk_descriptor_, &QuestRpcGetQuestDataAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcGetQuestDataReply_descriptor_, &QuestRpcGetQuestDataReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncDailyQuestAsk_descriptor_, &QuestRpcSyncDailyQuestAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncDailyQuestReply_descriptor_, &QuestRpcSyncDailyQuestReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcDailyQuestUpdateNotify_descriptor_, &QuestRpcDailyQuestUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcConsumeItemAsk_descriptor_, &QuestRpcConsumeItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcConsumeItemReply_descriptor_, &QuestRpcConsumeItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcQuestMaxListAsk_descriptor_, &QuestRpcQuestMaxListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcQuestMaxListReply_descriptor_, &QuestRpcQuestMaxListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcQuestMaxListNotifyNotify_descriptor_, &QuestRpcQuestMaxListNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncCompleteQuestIdsAsk_descriptor_, &QuestRpcSyncCompleteQuestIdsAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncCompleteQuestIdsReply_descriptor_, &QuestRpcSyncCompleteQuestIdsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcCompleteQuestIdsNotifyNotify_descriptor_, &QuestRpcCompleteQuestIdsNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcEliteFinishCountAsk_descriptor_, &QuestRpcEliteFinishCountAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcEliteFinishCountReply_descriptor_, &QuestRpcEliteFinishCountReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRpcSyncCanAcceptQuestNotify_descriptor_, &QuestRpcSyncCanAcceptQuestNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QuestRpc_2eproto() {
  delete QuestRpcOnAcceptQuestNotify::default_instance_;
  delete QuestRpcOnAcceptQuestNotify_reflection_;
  delete QuestRpcCompleteQuestStepAsk::default_instance_;
  delete QuestRpcCompleteQuestStepAsk_reflection_;
  delete QuestRpcCompleteQuestStepReply::default_instance_;
  delete QuestRpcCompleteQuestStepReply_reflection_;
  delete QuestRpcOnCompleteQuestNotify::default_instance_;
  delete QuestRpcOnCompleteQuestNotify_reflection_;
  delete QuestRpcCallClientLuaNotify::default_instance_;
  delete QuestRpcCallClientLuaNotify_reflection_;
  delete QuestRpcUpdateQuestNotify::default_instance_;
  delete QuestRpcUpdateQuestNotify_reflection_;
  delete QuestRpcGiveUpQuestAsk::default_instance_;
  delete QuestRpcGiveUpQuestAsk_reflection_;
  delete QuestRpcGiveUpQuestReply::default_instance_;
  delete QuestRpcGiveUpQuestReply_reflection_;
  delete QuestRpcCompleteQuestAsk::default_instance_;
  delete QuestRpcCompleteQuestAsk_reflection_;
  delete QuestRpcCompleteQuestReply::default_instance_;
  delete QuestRpcCompleteQuestReply_reflection_;
  delete QuestRpcCompleteAcceptChatMenuAsk::default_instance_;
  delete QuestRpcCompleteAcceptChatMenuAsk_reflection_;
  delete QuestRpcCompleteAcceptChatMenuReply::default_instance_;
  delete QuestRpcCompleteAcceptChatMenuReply_reflection_;
  delete QuestRpcAcceptQuestAsk::default_instance_;
  delete QuestRpcAcceptQuestAsk_reflection_;
  delete QuestRpcAcceptQuestReply::default_instance_;
  delete QuestRpcAcceptQuestReply_reflection_;
  delete QuestRpcSyncQuestAsk::default_instance_;
  delete QuestRpcSyncQuestAsk_reflection_;
  delete QuestRpcSyncQuestReply::default_instance_;
  delete QuestRpcSyncQuestReply_reflection_;
  delete QuestRpcGetRewardAsk::default_instance_;
  delete QuestRpcGetRewardAsk_reflection_;
  delete QuestRpcGetRewardReply::default_instance_;
  delete QuestRpcGetRewardReply_reflection_;
  delete QuestRpcRemoveQuestNotifyNotify::default_instance_;
  delete QuestRpcRemoveQuestNotifyNotify_reflection_;
  delete QuestRpcGetQuestDataAsk::default_instance_;
  delete QuestRpcGetQuestDataAsk_reflection_;
  delete QuestRpcGetQuestDataReply::default_instance_;
  delete QuestRpcGetQuestDataReply_reflection_;
  delete QuestRpcSyncDailyQuestAsk::default_instance_;
  delete QuestRpcSyncDailyQuestAsk_reflection_;
  delete QuestRpcSyncDailyQuestReply::default_instance_;
  delete QuestRpcSyncDailyQuestReply_reflection_;
  delete QuestRpcDailyQuestUpdateNotify::default_instance_;
  delete QuestRpcDailyQuestUpdateNotify_reflection_;
  delete QuestRpcConsumeItemAsk::default_instance_;
  delete QuestRpcConsumeItemAsk_reflection_;
  delete QuestRpcConsumeItemReply::default_instance_;
  delete QuestRpcConsumeItemReply_reflection_;
  delete QuestRpcQuestMaxListAsk::default_instance_;
  delete QuestRpcQuestMaxListAsk_reflection_;
  delete QuestRpcQuestMaxListReply::default_instance_;
  delete QuestRpcQuestMaxListReply_reflection_;
  delete QuestRpcQuestMaxListNotifyNotify::default_instance_;
  delete QuestRpcQuestMaxListNotifyNotify_reflection_;
  delete QuestRpcSyncCompleteQuestIdsAsk::default_instance_;
  delete QuestRpcSyncCompleteQuestIdsAsk_reflection_;
  delete QuestRpcSyncCompleteQuestIdsReply::default_instance_;
  delete QuestRpcSyncCompleteQuestIdsReply_reflection_;
  delete QuestRpcCompleteQuestIdsNotifyNotify::default_instance_;
  delete QuestRpcCompleteQuestIdsNotifyNotify_reflection_;
  delete QuestRpcEliteFinishCountAsk::default_instance_;
  delete QuestRpcEliteFinishCountAsk_reflection_;
  delete QuestRpcEliteFinishCountReply::default_instance_;
  delete QuestRpcEliteFinishCountReply_reflection_;
  delete QuestRpcSyncCanAcceptQuestNotify::default_instance_;
  delete QuestRpcSyncCanAcceptQuestNotify_reflection_;
}

void protobuf_AddDesc_QuestRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016QuestRpc.proto\032\022PublicStruct.proto\">\n\033"
    "QuestRpcOnAcceptQuestNotify\022\037\n\013AcceptQue"
    "st\030\001 \001(\0132\n.QuestData\"\206\001\n\034QuestRpcComplet"
    "eQuestStepAsk\022\031\n\rQuestConfigId\030\001 \001(\005:\002-1"
    "\022\025\n\tQuestStep\030\002 \001(\005:\002-1\022\024\n\010TargetId\030\004 \001("
    "\005:\002-1\022\036\n\022QuestStepEventType\030\005 \001(\005:\002-1\"7\n"
    "\036QuestRpcCompleteQuestStepReply\022\025\n\006Resul"
    "t\030\001 \001(\005:\005-9999\">\n\035QuestRpcOnCompleteQues"
    "tNotify\022\035\n\tQuestData\030\001 \001(\0132\n.QuestData\"*"
    "\n\033QuestRpcCallClientLuaNotify\022\013\n\003Str\030\001 \001"
    "(\t\"6\n\031QuestRpcUpdateQuestNotify\022\031\n\005Quest"
    "\030\001 \001(\0132\n.QuestData\"3\n\026QuestRpcGiveUpQues"
    "tAsk\022\031\n\rQuestConfigId\030\001 \001(\005:\002-1\"1\n\030Quest"
    "RpcGiveUpQuestReply\022\025\n\006Result\030\001 \001(\005:\005-99"
    "99\"g\n\030QuestRpcCompleteQuestAsk\022\031\n\rQuestC"
    "onfigId\030\001 \001(\005:\002-1\022\024\n\010TargetId\030\002 \001(\005:\002-1\022"
    "\032\n\016QuestEventType\030\003 \001(\005:\002-1\"0\n\032QuestRpcC"
    "ompleteQuestReply\022\022\n\006Result\030\001 \001(\005:\002-1\">\n"
    "!QuestRpcCompleteAcceptChatMenuAsk\022\031\n\rQu"
    "estConfigId\030\001 \001(\005:\002-1\"9\n#QuestRpcComplet"
    "eAcceptChatMenuReply\022\022\n\006Result\030\001 \001(\005:\002-1"
    "\"E\n\026QuestRpcAcceptQuestAsk\022\020\n\004Type\030\001 \001(\005"
    ":\002-1\022\031\n\rQuestConfigId\030\002 \001(\005:\002-1\".\n\030Quest"
    "RpcAcceptQuestReply\022\022\n\006Result\030\001 \001(\005:\002-1\""
    "\026\n\024QuestRpcSyncQuestAsk\"\205\001\n\026QuestRpcSync"
    "QuestReply\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\tQuestL"
    "ist\030\002 \001(\0132\016.QuestListData\022\034\n\024CompleteQue"
    "stIdsList\030\003 \003(\005\022\026\n\016CanAcceptQuest\030\004 \003(\005\""
    "1\n\024QuestRpcGetRewardAsk\022\031\n\rQuestConfigId"
    "\030\001 \001(\005:\002-1\",\n\026QuestRpcGetRewardReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\"8\n\037QuestRpcRemoveQuestN"
    "otifyNotify\022\025\n\rQuestConfigId\030\001 \003(\005\"0\n\027Qu"
    "estRpcGetQuestDataAsk\022\025\n\rQuestConfigId\030\001"
    " \003(\005\"N\n\031QuestRpcGetQuestDataReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1\022\035\n\tQuestList\030\002 \003(\0132\n.Quest"
    "Data\"\033\n\031QuestRpcSyncDailyQuestAsk\"Z\n\033Que"
    "stRpcSyncDailyQuestReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\022\'\n\016DailyQuestList\030\002 \001(\0132\017.DailyQues"
    "tList\"G\n\036QuestRpcDailyQuestUpdateNotify\022"
    "%\n\020AtivityQuestData\030\001 \001(\0132\013.DailyQuest\"V"
    "\n\026QuestRpcConsumeItemAsk\022\031\n\rQuestConfigI"
    "d\030\001 \001(\005:\002-1\022!\n\010ItemData\030\002 \003(\0132\017.ItemSimp"
    "leData\".\n\030QuestRpcConsumeItemReply\022\022\n\006Re"
    "sult\030\001 \001(\005:\002-1\"\031\n\027QuestRpcQuestMaxListAs"
    "k\"V\n\031QuestRpcQuestMaxListReply\022\022\n\006Result"
    "\030\001 \001(\005:\002-1\022%\n\tQuestList\030\002 \001(\0132\022.QuestMax"
    "QuestList\"I\n QuestRpcQuestMaxListNotifyN"
    "otify\022%\n\tQuestList\030\001 \001(\0132\022.QuestMaxQuest"
    "List\"!\n\037QuestRpcSyncCompleteQuestIdsAsk\""
    "f\n!QuestRpcSyncCompleteQuestIdsReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022-\n\020CompleteQuestIds\030\002 \001"
    "(\0132\023.CompletedQuestList\"U\n$QuestRpcCompl"
    "eteQuestIdsNotifyNotify\022-\n\020CompleteQuest"
    "Ids\030\001 \001(\0132\023.CompletedQuestList\"\035\n\033QuestR"
    "pcEliteFinishCountAsk\"F\n\035QuestRpcEliteFi"
    "nishCountReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\021\n\005Co"
    "unt\030\002 \001(\005:\002-1\":\n QuestRpcSyncCanAcceptQu"
    "estNotify\022\026\n\016CanAcceptQuest\030\001 \003(\005", 2313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QuestRpc.proto", &protobuf_RegisterTypes);
  QuestRpcOnAcceptQuestNotify::default_instance_ = new QuestRpcOnAcceptQuestNotify();
  QuestRpcCompleteQuestStepAsk::default_instance_ = new QuestRpcCompleteQuestStepAsk();
  QuestRpcCompleteQuestStepReply::default_instance_ = new QuestRpcCompleteQuestStepReply();
  QuestRpcOnCompleteQuestNotify::default_instance_ = new QuestRpcOnCompleteQuestNotify();
  QuestRpcCallClientLuaNotify::default_instance_ = new QuestRpcCallClientLuaNotify();
  QuestRpcUpdateQuestNotify::default_instance_ = new QuestRpcUpdateQuestNotify();
  QuestRpcGiveUpQuestAsk::default_instance_ = new QuestRpcGiveUpQuestAsk();
  QuestRpcGiveUpQuestReply::default_instance_ = new QuestRpcGiveUpQuestReply();
  QuestRpcCompleteQuestAsk::default_instance_ = new QuestRpcCompleteQuestAsk();
  QuestRpcCompleteQuestReply::default_instance_ = new QuestRpcCompleteQuestReply();
  QuestRpcCompleteAcceptChatMenuAsk::default_instance_ = new QuestRpcCompleteAcceptChatMenuAsk();
  QuestRpcCompleteAcceptChatMenuReply::default_instance_ = new QuestRpcCompleteAcceptChatMenuReply();
  QuestRpcAcceptQuestAsk::default_instance_ = new QuestRpcAcceptQuestAsk();
  QuestRpcAcceptQuestReply::default_instance_ = new QuestRpcAcceptQuestReply();
  QuestRpcSyncQuestAsk::default_instance_ = new QuestRpcSyncQuestAsk();
  QuestRpcSyncQuestReply::default_instance_ = new QuestRpcSyncQuestReply();
  QuestRpcGetRewardAsk::default_instance_ = new QuestRpcGetRewardAsk();
  QuestRpcGetRewardReply::default_instance_ = new QuestRpcGetRewardReply();
  QuestRpcRemoveQuestNotifyNotify::default_instance_ = new QuestRpcRemoveQuestNotifyNotify();
  QuestRpcGetQuestDataAsk::default_instance_ = new QuestRpcGetQuestDataAsk();
  QuestRpcGetQuestDataReply::default_instance_ = new QuestRpcGetQuestDataReply();
  QuestRpcSyncDailyQuestAsk::default_instance_ = new QuestRpcSyncDailyQuestAsk();
  QuestRpcSyncDailyQuestReply::default_instance_ = new QuestRpcSyncDailyQuestReply();
  QuestRpcDailyQuestUpdateNotify::default_instance_ = new QuestRpcDailyQuestUpdateNotify();
  QuestRpcConsumeItemAsk::default_instance_ = new QuestRpcConsumeItemAsk();
  QuestRpcConsumeItemReply::default_instance_ = new QuestRpcConsumeItemReply();
  QuestRpcQuestMaxListAsk::default_instance_ = new QuestRpcQuestMaxListAsk();
  QuestRpcQuestMaxListReply::default_instance_ = new QuestRpcQuestMaxListReply();
  QuestRpcQuestMaxListNotifyNotify::default_instance_ = new QuestRpcQuestMaxListNotifyNotify();
  QuestRpcSyncCompleteQuestIdsAsk::default_instance_ = new QuestRpcSyncCompleteQuestIdsAsk();
  QuestRpcSyncCompleteQuestIdsReply::default_instance_ = new QuestRpcSyncCompleteQuestIdsReply();
  QuestRpcCompleteQuestIdsNotifyNotify::default_instance_ = new QuestRpcCompleteQuestIdsNotifyNotify();
  QuestRpcEliteFinishCountAsk::default_instance_ = new QuestRpcEliteFinishCountAsk();
  QuestRpcEliteFinishCountReply::default_instance_ = new QuestRpcEliteFinishCountReply();
  QuestRpcSyncCanAcceptQuestNotify::default_instance_ = new QuestRpcSyncCanAcceptQuestNotify();
  QuestRpcOnAcceptQuestNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteQuestStepAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteQuestStepReply::default_instance_->InitAsDefaultInstance();
  QuestRpcOnCompleteQuestNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcCallClientLuaNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcUpdateQuestNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcGiveUpQuestAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcGiveUpQuestReply::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteQuestAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteQuestReply::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteAcceptChatMenuAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteAcceptChatMenuReply::default_instance_->InitAsDefaultInstance();
  QuestRpcAcceptQuestAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcAcceptQuestReply::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncQuestAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncQuestReply::default_instance_->InitAsDefaultInstance();
  QuestRpcGetRewardAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcGetRewardReply::default_instance_->InitAsDefaultInstance();
  QuestRpcRemoveQuestNotifyNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcGetQuestDataAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcGetQuestDataReply::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncDailyQuestAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncDailyQuestReply::default_instance_->InitAsDefaultInstance();
  QuestRpcDailyQuestUpdateNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcConsumeItemAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcConsumeItemReply::default_instance_->InitAsDefaultInstance();
  QuestRpcQuestMaxListAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcQuestMaxListReply::default_instance_->InitAsDefaultInstance();
  QuestRpcQuestMaxListNotifyNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncCompleteQuestIdsAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncCompleteQuestIdsReply::default_instance_->InitAsDefaultInstance();
  QuestRpcCompleteQuestIdsNotifyNotify::default_instance_->InitAsDefaultInstance();
  QuestRpcEliteFinishCountAsk::default_instance_->InitAsDefaultInstance();
  QuestRpcEliteFinishCountReply::default_instance_->InitAsDefaultInstance();
  QuestRpcSyncCanAcceptQuestNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QuestRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QuestRpc_2eproto {
  StaticDescriptorInitializer_QuestRpc_2eproto() {
    protobuf_AddDesc_QuestRpc_2eproto();
  }
} static_descriptor_initializer_QuestRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QuestRpcOnAcceptQuestNotify::kAcceptQuestFieldNumber;
#endif  // !_MSC_VER

QuestRpcOnAcceptQuestNotify::QuestRpcOnAcceptQuestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcOnAcceptQuestNotify::InitAsDefaultInstance() {
  acceptquest_ = const_cast< ::QuestData*>(&::QuestData::default_instance());
}

QuestRpcOnAcceptQuestNotify::QuestRpcOnAcceptQuestNotify(const QuestRpcOnAcceptQuestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcOnAcceptQuestNotify::SharedCtor() {
  _cached_size_ = 0;
  acceptquest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcOnAcceptQuestNotify::~QuestRpcOnAcceptQuestNotify() {
  SharedDtor();
}

void QuestRpcOnAcceptQuestNotify::SharedDtor() {
  if (this != default_instance_) {
    delete acceptquest_;
  }
}

void QuestRpcOnAcceptQuestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcOnAcceptQuestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcOnAcceptQuestNotify_descriptor_;
}

const QuestRpcOnAcceptQuestNotify& QuestRpcOnAcceptQuestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcOnAcceptQuestNotify* QuestRpcOnAcceptQuestNotify::default_instance_ = NULL;

QuestRpcOnAcceptQuestNotify* QuestRpcOnAcceptQuestNotify::New() const {
  return new QuestRpcOnAcceptQuestNotify;
}

void QuestRpcOnAcceptQuestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acceptquest()) {
      if (acceptquest_ != NULL) acceptquest_->::QuestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcOnAcceptQuestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuestData AcceptQuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcOnAcceptQuestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuestData AcceptQuest = 1;
  if (has_acceptquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acceptquest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcOnAcceptQuestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuestData AcceptQuest = 1;
  if (has_acceptquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acceptquest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcOnAcceptQuestNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuestData AcceptQuest = 1;
    if (has_acceptquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptquest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcOnAcceptQuestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcOnAcceptQuestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcOnAcceptQuestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcOnAcceptQuestNotify::MergeFrom(const QuestRpcOnAcceptQuestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acceptquest()) {
      mutable_acceptquest()->::QuestData::MergeFrom(from.acceptquest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcOnAcceptQuestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcOnAcceptQuestNotify::CopyFrom(const QuestRpcOnAcceptQuestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcOnAcceptQuestNotify::IsInitialized() const {

  return true;
}

void QuestRpcOnAcceptQuestNotify::Swap(QuestRpcOnAcceptQuestNotify* other) {
  if (other != this) {
    std::swap(acceptquest_, other->acceptquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcOnAcceptQuestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcOnAcceptQuestNotify_descriptor_;
  metadata.reflection = QuestRpcOnAcceptQuestNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteQuestStepAsk::kQuestConfigIdFieldNumber;
const int QuestRpcCompleteQuestStepAsk::kQuestStepFieldNumber;
const int QuestRpcCompleteQuestStepAsk::kTargetIdFieldNumber;
const int QuestRpcCompleteQuestStepAsk::kQuestStepEventTypeFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteQuestStepAsk::QuestRpcCompleteQuestStepAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteQuestStepAsk::InitAsDefaultInstance() {
}

QuestRpcCompleteQuestStepAsk::QuestRpcCompleteQuestStepAsk(const QuestRpcCompleteQuestStepAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteQuestStepAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  queststep_ = -1;
  targetid_ = -1;
  queststepeventtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteQuestStepAsk::~QuestRpcCompleteQuestStepAsk() {
  SharedDtor();
}

void QuestRpcCompleteQuestStepAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteQuestStepAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestStepAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteQuestStepAsk_descriptor_;
}

const QuestRpcCompleteQuestStepAsk& QuestRpcCompleteQuestStepAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteQuestStepAsk* QuestRpcCompleteQuestStepAsk::default_instance_ = NULL;

QuestRpcCompleteQuestStepAsk* QuestRpcCompleteQuestStepAsk::New() const {
  return new QuestRpcCompleteQuestStepAsk;
}

void QuestRpcCompleteQuestStepAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
    queststep_ = -1;
    targetid_ = -1;
    queststepeventtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteQuestStepAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QuestStep;
        break;
      }

      // optional int32 QuestStep = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queststep_)));
          set_has_queststep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TargetId;
        break;
      }

      // optional int32 TargetId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_QuestStepEventType;
        break;
      }

      // optional int32 QuestStepEventType = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestStepEventType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queststepeventtype_)));
          set_has_queststepeventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteQuestStepAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  // optional int32 QuestStep = 2 [default = -1];
  if (has_queststep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queststep(), output);
  }

  // optional int32 TargetId = 4 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // optional int32 QuestStepEventType = 5 [default = -1];
  if (has_queststepeventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->queststepeventtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteQuestStepAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  // optional int32 QuestStep = 2 [default = -1];
  if (has_queststep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queststep(), target);
  }

  // optional int32 TargetId = 4 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // optional int32 QuestStepEventType = 5 [default = -1];
  if (has_queststepeventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->queststepeventtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteQuestStepAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

    // optional int32 QuestStep = 2 [default = -1];
    if (has_queststep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queststep());
    }

    // optional int32 TargetId = 4 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 QuestStepEventType = 5 [default = -1];
    if (has_queststepeventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queststepeventtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteQuestStepAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteQuestStepAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteQuestStepAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteQuestStepAsk::MergeFrom(const QuestRpcCompleteQuestStepAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
    if (from.has_queststep()) {
      set_queststep(from.queststep());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_queststepeventtype()) {
      set_queststepeventtype(from.queststepeventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteQuestStepAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteQuestStepAsk::CopyFrom(const QuestRpcCompleteQuestStepAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteQuestStepAsk::IsInitialized() const {

  return true;
}

void QuestRpcCompleteQuestStepAsk::Swap(QuestRpcCompleteQuestStepAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(queststep_, other->queststep_);
    std::swap(targetid_, other->targetid_);
    std::swap(queststepeventtype_, other->queststepeventtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteQuestStepAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteQuestStepAsk_descriptor_;
  metadata.reflection = QuestRpcCompleteQuestStepAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteQuestStepReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteQuestStepReply::QuestRpcCompleteQuestStepReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteQuestStepReply::InitAsDefaultInstance() {
}

QuestRpcCompleteQuestStepReply::QuestRpcCompleteQuestStepReply(const QuestRpcCompleteQuestStepReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteQuestStepReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteQuestStepReply::~QuestRpcCompleteQuestStepReply() {
  SharedDtor();
}

void QuestRpcCompleteQuestStepReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteQuestStepReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestStepReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteQuestStepReply_descriptor_;
}

const QuestRpcCompleteQuestStepReply& QuestRpcCompleteQuestStepReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteQuestStepReply* QuestRpcCompleteQuestStepReply::default_instance_ = NULL;

QuestRpcCompleteQuestStepReply* QuestRpcCompleteQuestStepReply::New() const {
  return new QuestRpcCompleteQuestStepReply;
}

void QuestRpcCompleteQuestStepReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteQuestStepReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteQuestStepReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteQuestStepReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteQuestStepReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteQuestStepReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteQuestStepReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteQuestStepReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteQuestStepReply::MergeFrom(const QuestRpcCompleteQuestStepReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteQuestStepReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteQuestStepReply::CopyFrom(const QuestRpcCompleteQuestStepReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteQuestStepReply::IsInitialized() const {

  return true;
}

void QuestRpcCompleteQuestStepReply::Swap(QuestRpcCompleteQuestStepReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteQuestStepReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteQuestStepReply_descriptor_;
  metadata.reflection = QuestRpcCompleteQuestStepReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcOnCompleteQuestNotify::kQuestDataFieldNumber;
#endif  // !_MSC_VER

QuestRpcOnCompleteQuestNotify::QuestRpcOnCompleteQuestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcOnCompleteQuestNotify::InitAsDefaultInstance() {
  questdata_ = const_cast< ::QuestData*>(&::QuestData::default_instance());
}

QuestRpcOnCompleteQuestNotify::QuestRpcOnCompleteQuestNotify(const QuestRpcOnCompleteQuestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcOnCompleteQuestNotify::SharedCtor() {
  _cached_size_ = 0;
  questdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcOnCompleteQuestNotify::~QuestRpcOnCompleteQuestNotify() {
  SharedDtor();
}

void QuestRpcOnCompleteQuestNotify::SharedDtor() {
  if (this != default_instance_) {
    delete questdata_;
  }
}

void QuestRpcOnCompleteQuestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcOnCompleteQuestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcOnCompleteQuestNotify_descriptor_;
}

const QuestRpcOnCompleteQuestNotify& QuestRpcOnCompleteQuestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcOnCompleteQuestNotify* QuestRpcOnCompleteQuestNotify::default_instance_ = NULL;

QuestRpcOnCompleteQuestNotify* QuestRpcOnCompleteQuestNotify::New() const {
  return new QuestRpcOnCompleteQuestNotify;
}

void QuestRpcOnCompleteQuestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questdata()) {
      if (questdata_ != NULL) questdata_->::QuestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcOnCompleteQuestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuestData QuestData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcOnCompleteQuestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuestData QuestData = 1;
  if (has_questdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcOnCompleteQuestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuestData QuestData = 1;
  if (has_questdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcOnCompleteQuestNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuestData QuestData = 1;
    if (has_questdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcOnCompleteQuestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcOnCompleteQuestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcOnCompleteQuestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcOnCompleteQuestNotify::MergeFrom(const QuestRpcOnCompleteQuestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questdata()) {
      mutable_questdata()->::QuestData::MergeFrom(from.questdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcOnCompleteQuestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcOnCompleteQuestNotify::CopyFrom(const QuestRpcOnCompleteQuestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcOnCompleteQuestNotify::IsInitialized() const {

  return true;
}

void QuestRpcOnCompleteQuestNotify::Swap(QuestRpcOnCompleteQuestNotify* other) {
  if (other != this) {
    std::swap(questdata_, other->questdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcOnCompleteQuestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcOnCompleteQuestNotify_descriptor_;
  metadata.reflection = QuestRpcOnCompleteQuestNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCallClientLuaNotify::kStrFieldNumber;
#endif  // !_MSC_VER

QuestRpcCallClientLuaNotify::QuestRpcCallClientLuaNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCallClientLuaNotify::InitAsDefaultInstance() {
}

QuestRpcCallClientLuaNotify::QuestRpcCallClientLuaNotify(const QuestRpcCallClientLuaNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCallClientLuaNotify::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCallClientLuaNotify::~QuestRpcCallClientLuaNotify() {
  SharedDtor();
}

void QuestRpcCallClientLuaNotify::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void QuestRpcCallClientLuaNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCallClientLuaNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCallClientLuaNotify_descriptor_;
}

const QuestRpcCallClientLuaNotify& QuestRpcCallClientLuaNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCallClientLuaNotify* QuestRpcCallClientLuaNotify::default_instance_ = NULL;

QuestRpcCallClientLuaNotify* QuestRpcCallClientLuaNotify::New() const {
  return new QuestRpcCallClientLuaNotify;
}

void QuestRpcCallClientLuaNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCallClientLuaNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCallClientLuaNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCallClientLuaNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCallClientLuaNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCallClientLuaNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCallClientLuaNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCallClientLuaNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCallClientLuaNotify::MergeFrom(const QuestRpcCallClientLuaNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCallClientLuaNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCallClientLuaNotify::CopyFrom(const QuestRpcCallClientLuaNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCallClientLuaNotify::IsInitialized() const {

  return true;
}

void QuestRpcCallClientLuaNotify::Swap(QuestRpcCallClientLuaNotify* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCallClientLuaNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCallClientLuaNotify_descriptor_;
  metadata.reflection = QuestRpcCallClientLuaNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcUpdateQuestNotify::kQuestFieldNumber;
#endif  // !_MSC_VER

QuestRpcUpdateQuestNotify::QuestRpcUpdateQuestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcUpdateQuestNotify::InitAsDefaultInstance() {
  quest_ = const_cast< ::QuestData*>(&::QuestData::default_instance());
}

QuestRpcUpdateQuestNotify::QuestRpcUpdateQuestNotify(const QuestRpcUpdateQuestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcUpdateQuestNotify::SharedCtor() {
  _cached_size_ = 0;
  quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcUpdateQuestNotify::~QuestRpcUpdateQuestNotify() {
  SharedDtor();
}

void QuestRpcUpdateQuestNotify::SharedDtor() {
  if (this != default_instance_) {
    delete quest_;
  }
}

void QuestRpcUpdateQuestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcUpdateQuestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcUpdateQuestNotify_descriptor_;
}

const QuestRpcUpdateQuestNotify& QuestRpcUpdateQuestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcUpdateQuestNotify* QuestRpcUpdateQuestNotify::default_instance_ = NULL;

QuestRpcUpdateQuestNotify* QuestRpcUpdateQuestNotify::New() const {
  return new QuestRpcUpdateQuestNotify;
}

void QuestRpcUpdateQuestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quest()) {
      if (quest_ != NULL) quest_->::QuestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcUpdateQuestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuestData Quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcUpdateQuestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuestData Quest = 1;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcUpdateQuestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuestData Quest = 1;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcUpdateQuestNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuestData Quest = 1;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcUpdateQuestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcUpdateQuestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcUpdateQuestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcUpdateQuestNotify::MergeFrom(const QuestRpcUpdateQuestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest()) {
      mutable_quest()->::QuestData::MergeFrom(from.quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcUpdateQuestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcUpdateQuestNotify::CopyFrom(const QuestRpcUpdateQuestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcUpdateQuestNotify::IsInitialized() const {

  return true;
}

void QuestRpcUpdateQuestNotify::Swap(QuestRpcUpdateQuestNotify* other) {
  if (other != this) {
    std::swap(quest_, other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcUpdateQuestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcUpdateQuestNotify_descriptor_;
  metadata.reflection = QuestRpcUpdateQuestNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGiveUpQuestAsk::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcGiveUpQuestAsk::QuestRpcGiveUpQuestAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGiveUpQuestAsk::InitAsDefaultInstance() {
}

QuestRpcGiveUpQuestAsk::QuestRpcGiveUpQuestAsk(const QuestRpcGiveUpQuestAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGiveUpQuestAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGiveUpQuestAsk::~QuestRpcGiveUpQuestAsk() {
  SharedDtor();
}

void QuestRpcGiveUpQuestAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGiveUpQuestAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGiveUpQuestAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGiveUpQuestAsk_descriptor_;
}

const QuestRpcGiveUpQuestAsk& QuestRpcGiveUpQuestAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGiveUpQuestAsk* QuestRpcGiveUpQuestAsk::default_instance_ = NULL;

QuestRpcGiveUpQuestAsk* QuestRpcGiveUpQuestAsk::New() const {
  return new QuestRpcGiveUpQuestAsk;
}

void QuestRpcGiveUpQuestAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGiveUpQuestAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGiveUpQuestAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGiveUpQuestAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGiveUpQuestAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGiveUpQuestAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGiveUpQuestAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGiveUpQuestAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGiveUpQuestAsk::MergeFrom(const QuestRpcGiveUpQuestAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGiveUpQuestAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGiveUpQuestAsk::CopyFrom(const QuestRpcGiveUpQuestAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGiveUpQuestAsk::IsInitialized() const {

  return true;
}

void QuestRpcGiveUpQuestAsk::Swap(QuestRpcGiveUpQuestAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGiveUpQuestAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGiveUpQuestAsk_descriptor_;
  metadata.reflection = QuestRpcGiveUpQuestAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGiveUpQuestReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcGiveUpQuestReply::QuestRpcGiveUpQuestReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGiveUpQuestReply::InitAsDefaultInstance() {
}

QuestRpcGiveUpQuestReply::QuestRpcGiveUpQuestReply(const QuestRpcGiveUpQuestReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGiveUpQuestReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGiveUpQuestReply::~QuestRpcGiveUpQuestReply() {
  SharedDtor();
}

void QuestRpcGiveUpQuestReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGiveUpQuestReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGiveUpQuestReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGiveUpQuestReply_descriptor_;
}

const QuestRpcGiveUpQuestReply& QuestRpcGiveUpQuestReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGiveUpQuestReply* QuestRpcGiveUpQuestReply::default_instance_ = NULL;

QuestRpcGiveUpQuestReply* QuestRpcGiveUpQuestReply::New() const {
  return new QuestRpcGiveUpQuestReply;
}

void QuestRpcGiveUpQuestReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGiveUpQuestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGiveUpQuestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGiveUpQuestReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGiveUpQuestReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGiveUpQuestReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGiveUpQuestReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGiveUpQuestReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGiveUpQuestReply::MergeFrom(const QuestRpcGiveUpQuestReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGiveUpQuestReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGiveUpQuestReply::CopyFrom(const QuestRpcGiveUpQuestReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGiveUpQuestReply::IsInitialized() const {

  return true;
}

void QuestRpcGiveUpQuestReply::Swap(QuestRpcGiveUpQuestReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGiveUpQuestReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGiveUpQuestReply_descriptor_;
  metadata.reflection = QuestRpcGiveUpQuestReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteQuestAsk::kQuestConfigIdFieldNumber;
const int QuestRpcCompleteQuestAsk::kTargetIdFieldNumber;
const int QuestRpcCompleteQuestAsk::kQuestEventTypeFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteQuestAsk::QuestRpcCompleteQuestAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteQuestAsk::InitAsDefaultInstance() {
}

QuestRpcCompleteQuestAsk::QuestRpcCompleteQuestAsk(const QuestRpcCompleteQuestAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteQuestAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  targetid_ = -1;
  questeventtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteQuestAsk::~QuestRpcCompleteQuestAsk() {
  SharedDtor();
}

void QuestRpcCompleteQuestAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteQuestAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteQuestAsk_descriptor_;
}

const QuestRpcCompleteQuestAsk& QuestRpcCompleteQuestAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteQuestAsk* QuestRpcCompleteQuestAsk::default_instance_ = NULL;

QuestRpcCompleteQuestAsk* QuestRpcCompleteQuestAsk::New() const {
  return new QuestRpcCompleteQuestAsk;
}

void QuestRpcCompleteQuestAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
    targetid_ = -1;
    questeventtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteQuestAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TargetId;
        break;
      }

      // optional int32 TargetId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_QuestEventType;
        break;
      }

      // optional int32 QuestEventType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestEventType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questeventtype_)));
          set_has_questeventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteQuestAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  // optional int32 TargetId = 2 [default = -1];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // optional int32 QuestEventType = 3 [default = -1];
  if (has_questeventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->questeventtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteQuestAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  // optional int32 TargetId = 2 [default = -1];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  // optional int32 QuestEventType = 3 [default = -1];
  if (has_questeventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->questeventtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteQuestAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

    // optional int32 TargetId = 2 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 QuestEventType = 3 [default = -1];
    if (has_questeventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questeventtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteQuestAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteQuestAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteQuestAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteQuestAsk::MergeFrom(const QuestRpcCompleteQuestAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_questeventtype()) {
      set_questeventtype(from.questeventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteQuestAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteQuestAsk::CopyFrom(const QuestRpcCompleteQuestAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteQuestAsk::IsInitialized() const {

  return true;
}

void QuestRpcCompleteQuestAsk::Swap(QuestRpcCompleteQuestAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(targetid_, other->targetid_);
    std::swap(questeventtype_, other->questeventtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteQuestAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteQuestAsk_descriptor_;
  metadata.reflection = QuestRpcCompleteQuestAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteQuestReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteQuestReply::QuestRpcCompleteQuestReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteQuestReply::InitAsDefaultInstance() {
}

QuestRpcCompleteQuestReply::QuestRpcCompleteQuestReply(const QuestRpcCompleteQuestReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteQuestReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteQuestReply::~QuestRpcCompleteQuestReply() {
  SharedDtor();
}

void QuestRpcCompleteQuestReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteQuestReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteQuestReply_descriptor_;
}

const QuestRpcCompleteQuestReply& QuestRpcCompleteQuestReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteQuestReply* QuestRpcCompleteQuestReply::default_instance_ = NULL;

QuestRpcCompleteQuestReply* QuestRpcCompleteQuestReply::New() const {
  return new QuestRpcCompleteQuestReply;
}

void QuestRpcCompleteQuestReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteQuestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteQuestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteQuestReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteQuestReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteQuestReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteQuestReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteQuestReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteQuestReply::MergeFrom(const QuestRpcCompleteQuestReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteQuestReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteQuestReply::CopyFrom(const QuestRpcCompleteQuestReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteQuestReply::IsInitialized() const {

  return true;
}

void QuestRpcCompleteQuestReply::Swap(QuestRpcCompleteQuestReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteQuestReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteQuestReply_descriptor_;
  metadata.reflection = QuestRpcCompleteQuestReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteAcceptChatMenuAsk::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteAcceptChatMenuAsk::QuestRpcCompleteAcceptChatMenuAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteAcceptChatMenuAsk::InitAsDefaultInstance() {
}

QuestRpcCompleteAcceptChatMenuAsk::QuestRpcCompleteAcceptChatMenuAsk(const QuestRpcCompleteAcceptChatMenuAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteAcceptChatMenuAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteAcceptChatMenuAsk::~QuestRpcCompleteAcceptChatMenuAsk() {
  SharedDtor();
}

void QuestRpcCompleteAcceptChatMenuAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteAcceptChatMenuAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteAcceptChatMenuAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteAcceptChatMenuAsk_descriptor_;
}

const QuestRpcCompleteAcceptChatMenuAsk& QuestRpcCompleteAcceptChatMenuAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteAcceptChatMenuAsk* QuestRpcCompleteAcceptChatMenuAsk::default_instance_ = NULL;

QuestRpcCompleteAcceptChatMenuAsk* QuestRpcCompleteAcceptChatMenuAsk::New() const {
  return new QuestRpcCompleteAcceptChatMenuAsk;
}

void QuestRpcCompleteAcceptChatMenuAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteAcceptChatMenuAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteAcceptChatMenuAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteAcceptChatMenuAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteAcceptChatMenuAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteAcceptChatMenuAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteAcceptChatMenuAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteAcceptChatMenuAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteAcceptChatMenuAsk::MergeFrom(const QuestRpcCompleteAcceptChatMenuAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteAcceptChatMenuAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteAcceptChatMenuAsk::CopyFrom(const QuestRpcCompleteAcceptChatMenuAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteAcceptChatMenuAsk::IsInitialized() const {

  return true;
}

void QuestRpcCompleteAcceptChatMenuAsk::Swap(QuestRpcCompleteAcceptChatMenuAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteAcceptChatMenuAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteAcceptChatMenuAsk_descriptor_;
  metadata.reflection = QuestRpcCompleteAcceptChatMenuAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteAcceptChatMenuReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteAcceptChatMenuReply::QuestRpcCompleteAcceptChatMenuReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteAcceptChatMenuReply::InitAsDefaultInstance() {
}

QuestRpcCompleteAcceptChatMenuReply::QuestRpcCompleteAcceptChatMenuReply(const QuestRpcCompleteAcceptChatMenuReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteAcceptChatMenuReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteAcceptChatMenuReply::~QuestRpcCompleteAcceptChatMenuReply() {
  SharedDtor();
}

void QuestRpcCompleteAcceptChatMenuReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcCompleteAcceptChatMenuReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteAcceptChatMenuReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteAcceptChatMenuReply_descriptor_;
}

const QuestRpcCompleteAcceptChatMenuReply& QuestRpcCompleteAcceptChatMenuReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteAcceptChatMenuReply* QuestRpcCompleteAcceptChatMenuReply::default_instance_ = NULL;

QuestRpcCompleteAcceptChatMenuReply* QuestRpcCompleteAcceptChatMenuReply::New() const {
  return new QuestRpcCompleteAcceptChatMenuReply;
}

void QuestRpcCompleteAcceptChatMenuReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteAcceptChatMenuReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteAcceptChatMenuReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteAcceptChatMenuReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteAcceptChatMenuReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteAcceptChatMenuReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteAcceptChatMenuReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteAcceptChatMenuReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteAcceptChatMenuReply::MergeFrom(const QuestRpcCompleteAcceptChatMenuReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteAcceptChatMenuReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteAcceptChatMenuReply::CopyFrom(const QuestRpcCompleteAcceptChatMenuReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteAcceptChatMenuReply::IsInitialized() const {

  return true;
}

void QuestRpcCompleteAcceptChatMenuReply::Swap(QuestRpcCompleteAcceptChatMenuReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteAcceptChatMenuReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteAcceptChatMenuReply_descriptor_;
  metadata.reflection = QuestRpcCompleteAcceptChatMenuReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcAcceptQuestAsk::kTypeFieldNumber;
const int QuestRpcAcceptQuestAsk::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcAcceptQuestAsk::QuestRpcAcceptQuestAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcAcceptQuestAsk::InitAsDefaultInstance() {
}

QuestRpcAcceptQuestAsk::QuestRpcAcceptQuestAsk(const QuestRpcAcceptQuestAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcAcceptQuestAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  questconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcAcceptQuestAsk::~QuestRpcAcceptQuestAsk() {
  SharedDtor();
}

void QuestRpcAcceptQuestAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcAcceptQuestAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcAcceptQuestAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcAcceptQuestAsk_descriptor_;
}

const QuestRpcAcceptQuestAsk& QuestRpcAcceptQuestAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcAcceptQuestAsk* QuestRpcAcceptQuestAsk::default_instance_ = NULL;

QuestRpcAcceptQuestAsk* QuestRpcAcceptQuestAsk::New() const {
  return new QuestRpcAcceptQuestAsk;
}

void QuestRpcAcceptQuestAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    questconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcAcceptQuestAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QuestConfigId;
        break;
      }

      // optional int32 QuestConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcAcceptQuestAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 QuestConfigId = 2 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcAcceptQuestAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 QuestConfigId = 2 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcAcceptQuestAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 QuestConfigId = 2 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcAcceptQuestAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcAcceptQuestAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcAcceptQuestAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcAcceptQuestAsk::MergeFrom(const QuestRpcAcceptQuestAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcAcceptQuestAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcAcceptQuestAsk::CopyFrom(const QuestRpcAcceptQuestAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcAcceptQuestAsk::IsInitialized() const {

  return true;
}

void QuestRpcAcceptQuestAsk::Swap(QuestRpcAcceptQuestAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcAcceptQuestAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcAcceptQuestAsk_descriptor_;
  metadata.reflection = QuestRpcAcceptQuestAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcAcceptQuestReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcAcceptQuestReply::QuestRpcAcceptQuestReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcAcceptQuestReply::InitAsDefaultInstance() {
}

QuestRpcAcceptQuestReply::QuestRpcAcceptQuestReply(const QuestRpcAcceptQuestReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcAcceptQuestReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcAcceptQuestReply::~QuestRpcAcceptQuestReply() {
  SharedDtor();
}

void QuestRpcAcceptQuestReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcAcceptQuestReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcAcceptQuestReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcAcceptQuestReply_descriptor_;
}

const QuestRpcAcceptQuestReply& QuestRpcAcceptQuestReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcAcceptQuestReply* QuestRpcAcceptQuestReply::default_instance_ = NULL;

QuestRpcAcceptQuestReply* QuestRpcAcceptQuestReply::New() const {
  return new QuestRpcAcceptQuestReply;
}

void QuestRpcAcceptQuestReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcAcceptQuestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcAcceptQuestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcAcceptQuestReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcAcceptQuestReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcAcceptQuestReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcAcceptQuestReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcAcceptQuestReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcAcceptQuestReply::MergeFrom(const QuestRpcAcceptQuestReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcAcceptQuestReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcAcceptQuestReply::CopyFrom(const QuestRpcAcceptQuestReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcAcceptQuestReply::IsInitialized() const {

  return true;
}

void QuestRpcAcceptQuestReply::Swap(QuestRpcAcceptQuestReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcAcceptQuestReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcAcceptQuestReply_descriptor_;
  metadata.reflection = QuestRpcAcceptQuestReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestRpcSyncQuestAsk::QuestRpcSyncQuestAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncQuestAsk::InitAsDefaultInstance() {
}

QuestRpcSyncQuestAsk::QuestRpcSyncQuestAsk(const QuestRpcSyncQuestAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncQuestAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncQuestAsk::~QuestRpcSyncQuestAsk() {
  SharedDtor();
}

void QuestRpcSyncQuestAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcSyncQuestAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncQuestAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncQuestAsk_descriptor_;
}

const QuestRpcSyncQuestAsk& QuestRpcSyncQuestAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncQuestAsk* QuestRpcSyncQuestAsk::default_instance_ = NULL;

QuestRpcSyncQuestAsk* QuestRpcSyncQuestAsk::New() const {
  return new QuestRpcSyncQuestAsk;
}

void QuestRpcSyncQuestAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncQuestAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestRpcSyncQuestAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncQuestAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncQuestAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncQuestAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncQuestAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncQuestAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncQuestAsk::MergeFrom(const QuestRpcSyncQuestAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncQuestAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncQuestAsk::CopyFrom(const QuestRpcSyncQuestAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncQuestAsk::IsInitialized() const {

  return true;
}

void QuestRpcSyncQuestAsk::Swap(QuestRpcSyncQuestAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncQuestAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncQuestAsk_descriptor_;
  metadata.reflection = QuestRpcSyncQuestAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcSyncQuestReply::kResultFieldNumber;
const int QuestRpcSyncQuestReply::kQuestListFieldNumber;
const int QuestRpcSyncQuestReply::kCompleteQuestIdsListFieldNumber;
const int QuestRpcSyncQuestReply::kCanAcceptQuestFieldNumber;
#endif  // !_MSC_VER

QuestRpcSyncQuestReply::QuestRpcSyncQuestReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncQuestReply::InitAsDefaultInstance() {
  questlist_ = const_cast< ::QuestListData*>(&::QuestListData::default_instance());
}

QuestRpcSyncQuestReply::QuestRpcSyncQuestReply(const QuestRpcSyncQuestReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncQuestReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  questlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncQuestReply::~QuestRpcSyncQuestReply() {
  SharedDtor();
}

void QuestRpcSyncQuestReply::SharedDtor() {
  if (this != default_instance_) {
    delete questlist_;
  }
}

void QuestRpcSyncQuestReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncQuestReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncQuestReply_descriptor_;
}

const QuestRpcSyncQuestReply& QuestRpcSyncQuestReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncQuestReply* QuestRpcSyncQuestReply::default_instance_ = NULL;

QuestRpcSyncQuestReply* QuestRpcSyncQuestReply::New() const {
  return new QuestRpcSyncQuestReply;
}

void QuestRpcSyncQuestReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_questlist()) {
      if (questlist_ != NULL) questlist_->::QuestListData::Clear();
    }
  }
  completequestidslist_.Clear();
  canacceptquest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncQuestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuestList;
        break;
      }

      // optional .QuestListData QuestList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CompleteQuestIdsList;
        break;
      }

      // repeated int32 CompleteQuestIdsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CompleteQuestIdsList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_completequestidslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_completequestidslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CompleteQuestIdsList;
        if (input->ExpectTag(32)) goto parse_CanAcceptQuest;
        break;
      }

      // repeated int32 CanAcceptQuest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanAcceptQuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_canacceptquest())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_canacceptquest())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CanAcceptQuest;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcSyncQuestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .QuestListData QuestList = 2;
  if (has_questlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questlist(), output);
  }

  // repeated int32 CompleteQuestIdsList = 3;
  for (int i = 0; i < this->completequestidslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->completequestidslist(i), output);
  }

  // repeated int32 CanAcceptQuest = 4;
  for (int i = 0; i < this->canacceptquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->canacceptquest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncQuestReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .QuestListData QuestList = 2;
  if (has_questlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questlist(), target);
  }

  // repeated int32 CompleteQuestIdsList = 3;
  for (int i = 0; i < this->completequestidslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->completequestidslist(i), target);
  }

  // repeated int32 CanAcceptQuest = 4;
  for (int i = 0; i < this->canacceptquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->canacceptquest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncQuestReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .QuestListData QuestList = 2;
    if (has_questlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questlist());
    }

  }
  // repeated int32 CompleteQuestIdsList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->completequestidslist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->completequestidslist(i));
    }
    total_size += 1 * this->completequestidslist_size() + data_size;
  }

  // repeated int32 CanAcceptQuest = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->canacceptquest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->canacceptquest(i));
    }
    total_size += 1 * this->canacceptquest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncQuestReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncQuestReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncQuestReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncQuestReply::MergeFrom(const QuestRpcSyncQuestReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  completequestidslist_.MergeFrom(from.completequestidslist_);
  canacceptquest_.MergeFrom(from.canacceptquest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_questlist()) {
      mutable_questlist()->::QuestListData::MergeFrom(from.questlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncQuestReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncQuestReply::CopyFrom(const QuestRpcSyncQuestReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncQuestReply::IsInitialized() const {

  return true;
}

void QuestRpcSyncQuestReply::Swap(QuestRpcSyncQuestReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(questlist_, other->questlist_);
    completequestidslist_.Swap(&other->completequestidslist_);
    canacceptquest_.Swap(&other->canacceptquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncQuestReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncQuestReply_descriptor_;
  metadata.reflection = QuestRpcSyncQuestReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGetRewardAsk::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcGetRewardAsk::QuestRpcGetRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGetRewardAsk::InitAsDefaultInstance() {
}

QuestRpcGetRewardAsk::QuestRpcGetRewardAsk(const QuestRpcGetRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGetRewardAsk::~QuestRpcGetRewardAsk() {
  SharedDtor();
}

void QuestRpcGetRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGetRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGetRewardAsk_descriptor_;
}

const QuestRpcGetRewardAsk& QuestRpcGetRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGetRewardAsk* QuestRpcGetRewardAsk::default_instance_ = NULL;

QuestRpcGetRewardAsk* QuestRpcGetRewardAsk::New() const {
  return new QuestRpcGetRewardAsk;
}

void QuestRpcGetRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGetRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGetRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGetRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGetRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGetRewardAsk::MergeFrom(const QuestRpcGetRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGetRewardAsk::CopyFrom(const QuestRpcGetRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGetRewardAsk::IsInitialized() const {

  return true;
}

void QuestRpcGetRewardAsk::Swap(QuestRpcGetRewardAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGetRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGetRewardAsk_descriptor_;
  metadata.reflection = QuestRpcGetRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGetRewardReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcGetRewardReply::QuestRpcGetRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGetRewardReply::InitAsDefaultInstance() {
}

QuestRpcGetRewardReply::QuestRpcGetRewardReply(const QuestRpcGetRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGetRewardReply::~QuestRpcGetRewardReply() {
  SharedDtor();
}

void QuestRpcGetRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGetRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGetRewardReply_descriptor_;
}

const QuestRpcGetRewardReply& QuestRpcGetRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGetRewardReply* QuestRpcGetRewardReply::default_instance_ = NULL;

QuestRpcGetRewardReply* QuestRpcGetRewardReply::New() const {
  return new QuestRpcGetRewardReply;
}

void QuestRpcGetRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGetRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGetRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGetRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGetRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGetRewardReply::MergeFrom(const QuestRpcGetRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGetRewardReply::CopyFrom(const QuestRpcGetRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGetRewardReply::IsInitialized() const {

  return true;
}

void QuestRpcGetRewardReply::Swap(QuestRpcGetRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGetRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGetRewardReply_descriptor_;
  metadata.reflection = QuestRpcGetRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcRemoveQuestNotifyNotify::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcRemoveQuestNotifyNotify::QuestRpcRemoveQuestNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcRemoveQuestNotifyNotify::InitAsDefaultInstance() {
}

QuestRpcRemoveQuestNotifyNotify::QuestRpcRemoveQuestNotifyNotify(const QuestRpcRemoveQuestNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcRemoveQuestNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcRemoveQuestNotifyNotify::~QuestRpcRemoveQuestNotifyNotify() {
  SharedDtor();
}

void QuestRpcRemoveQuestNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcRemoveQuestNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcRemoveQuestNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcRemoveQuestNotifyNotify_descriptor_;
}

const QuestRpcRemoveQuestNotifyNotify& QuestRpcRemoveQuestNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcRemoveQuestNotifyNotify* QuestRpcRemoveQuestNotifyNotify::default_instance_ = NULL;

QuestRpcRemoveQuestNotifyNotify* QuestRpcRemoveQuestNotifyNotify::New() const {
  return new QuestRpcRemoveQuestNotifyNotify;
}

void QuestRpcRemoveQuestNotifyNotify::Clear() {
  questconfigid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcRemoveQuestNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 QuestConfigId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_questconfigid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questconfigid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_QuestConfigId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcRemoveQuestNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 QuestConfigId = 1;
  for (int i = 0; i < this->questconfigid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->questconfigid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcRemoveQuestNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 QuestConfigId = 1;
  for (int i = 0; i < this->questconfigid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->questconfigid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcRemoveQuestNotifyNotify::ByteSize() const {
  int total_size = 0;

  // repeated int32 QuestConfigId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questconfigid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questconfigid(i));
    }
    total_size += 1 * this->questconfigid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcRemoveQuestNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcRemoveQuestNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcRemoveQuestNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcRemoveQuestNotifyNotify::MergeFrom(const QuestRpcRemoveQuestNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  questconfigid_.MergeFrom(from.questconfigid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcRemoveQuestNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcRemoveQuestNotifyNotify::CopyFrom(const QuestRpcRemoveQuestNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcRemoveQuestNotifyNotify::IsInitialized() const {

  return true;
}

void QuestRpcRemoveQuestNotifyNotify::Swap(QuestRpcRemoveQuestNotifyNotify* other) {
  if (other != this) {
    questconfigid_.Swap(&other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcRemoveQuestNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcRemoveQuestNotifyNotify_descriptor_;
  metadata.reflection = QuestRpcRemoveQuestNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGetQuestDataAsk::kQuestConfigIdFieldNumber;
#endif  // !_MSC_VER

QuestRpcGetQuestDataAsk::QuestRpcGetQuestDataAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGetQuestDataAsk::InitAsDefaultInstance() {
}

QuestRpcGetQuestDataAsk::QuestRpcGetQuestDataAsk(const QuestRpcGetQuestDataAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGetQuestDataAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGetQuestDataAsk::~QuestRpcGetQuestDataAsk() {
  SharedDtor();
}

void QuestRpcGetQuestDataAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGetQuestDataAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGetQuestDataAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGetQuestDataAsk_descriptor_;
}

const QuestRpcGetQuestDataAsk& QuestRpcGetQuestDataAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGetQuestDataAsk* QuestRpcGetQuestDataAsk::default_instance_ = NULL;

QuestRpcGetQuestDataAsk* QuestRpcGetQuestDataAsk::New() const {
  return new QuestRpcGetQuestDataAsk;
}

void QuestRpcGetQuestDataAsk::Clear() {
  questconfigid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGetQuestDataAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 QuestConfigId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_questconfigid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questconfigid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_QuestConfigId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGetQuestDataAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 QuestConfigId = 1;
  for (int i = 0; i < this->questconfigid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->questconfigid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGetQuestDataAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 QuestConfigId = 1;
  for (int i = 0; i < this->questconfigid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->questconfigid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGetQuestDataAsk::ByteSize() const {
  int total_size = 0;

  // repeated int32 QuestConfigId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questconfigid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questconfigid(i));
    }
    total_size += 1 * this->questconfigid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGetQuestDataAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGetQuestDataAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGetQuestDataAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGetQuestDataAsk::MergeFrom(const QuestRpcGetQuestDataAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  questconfigid_.MergeFrom(from.questconfigid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGetQuestDataAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGetQuestDataAsk::CopyFrom(const QuestRpcGetQuestDataAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGetQuestDataAsk::IsInitialized() const {

  return true;
}

void QuestRpcGetQuestDataAsk::Swap(QuestRpcGetQuestDataAsk* other) {
  if (other != this) {
    questconfigid_.Swap(&other->questconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGetQuestDataAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGetQuestDataAsk_descriptor_;
  metadata.reflection = QuestRpcGetQuestDataAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcGetQuestDataReply::kResultFieldNumber;
const int QuestRpcGetQuestDataReply::kQuestListFieldNumber;
#endif  // !_MSC_VER

QuestRpcGetQuestDataReply::QuestRpcGetQuestDataReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcGetQuestDataReply::InitAsDefaultInstance() {
}

QuestRpcGetQuestDataReply::QuestRpcGetQuestDataReply(const QuestRpcGetQuestDataReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcGetQuestDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcGetQuestDataReply::~QuestRpcGetQuestDataReply() {
  SharedDtor();
}

void QuestRpcGetQuestDataReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcGetQuestDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcGetQuestDataReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcGetQuestDataReply_descriptor_;
}

const QuestRpcGetQuestDataReply& QuestRpcGetQuestDataReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcGetQuestDataReply* QuestRpcGetQuestDataReply::default_instance_ = NULL;

QuestRpcGetQuestDataReply* QuestRpcGetQuestDataReply::New() const {
  return new QuestRpcGetQuestDataReply;
}

void QuestRpcGetQuestDataReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  questlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcGetQuestDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuestList;
        break;
      }

      // repeated .QuestData QuestList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcGetQuestDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .QuestData QuestList = 2;
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcGetQuestDataReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .QuestData QuestList = 2;
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcGetQuestDataReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .QuestData QuestList = 2;
  total_size += 1 * this->questlist_size();
  for (int i = 0; i < this->questlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcGetQuestDataReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcGetQuestDataReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcGetQuestDataReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcGetQuestDataReply::MergeFrom(const QuestRpcGetQuestDataReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  questlist_.MergeFrom(from.questlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcGetQuestDataReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcGetQuestDataReply::CopyFrom(const QuestRpcGetQuestDataReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcGetQuestDataReply::IsInitialized() const {

  return true;
}

void QuestRpcGetQuestDataReply::Swap(QuestRpcGetQuestDataReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    questlist_.Swap(&other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcGetQuestDataReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcGetQuestDataReply_descriptor_;
  metadata.reflection = QuestRpcGetQuestDataReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestRpcSyncDailyQuestAsk::QuestRpcSyncDailyQuestAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncDailyQuestAsk::InitAsDefaultInstance() {
}

QuestRpcSyncDailyQuestAsk::QuestRpcSyncDailyQuestAsk(const QuestRpcSyncDailyQuestAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncDailyQuestAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncDailyQuestAsk::~QuestRpcSyncDailyQuestAsk() {
  SharedDtor();
}

void QuestRpcSyncDailyQuestAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcSyncDailyQuestAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncDailyQuestAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncDailyQuestAsk_descriptor_;
}

const QuestRpcSyncDailyQuestAsk& QuestRpcSyncDailyQuestAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncDailyQuestAsk* QuestRpcSyncDailyQuestAsk::default_instance_ = NULL;

QuestRpcSyncDailyQuestAsk* QuestRpcSyncDailyQuestAsk::New() const {
  return new QuestRpcSyncDailyQuestAsk;
}

void QuestRpcSyncDailyQuestAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncDailyQuestAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestRpcSyncDailyQuestAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncDailyQuestAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncDailyQuestAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncDailyQuestAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncDailyQuestAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncDailyQuestAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncDailyQuestAsk::MergeFrom(const QuestRpcSyncDailyQuestAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncDailyQuestAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncDailyQuestAsk::CopyFrom(const QuestRpcSyncDailyQuestAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncDailyQuestAsk::IsInitialized() const {

  return true;
}

void QuestRpcSyncDailyQuestAsk::Swap(QuestRpcSyncDailyQuestAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncDailyQuestAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncDailyQuestAsk_descriptor_;
  metadata.reflection = QuestRpcSyncDailyQuestAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcSyncDailyQuestReply::kResultFieldNumber;
const int QuestRpcSyncDailyQuestReply::kDailyQuestListFieldNumber;
#endif  // !_MSC_VER

QuestRpcSyncDailyQuestReply::QuestRpcSyncDailyQuestReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncDailyQuestReply::InitAsDefaultInstance() {
  dailyquestlist_ = const_cast< ::DailyQuestList*>(&::DailyQuestList::default_instance());
}

QuestRpcSyncDailyQuestReply::QuestRpcSyncDailyQuestReply(const QuestRpcSyncDailyQuestReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncDailyQuestReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  dailyquestlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncDailyQuestReply::~QuestRpcSyncDailyQuestReply() {
  SharedDtor();
}

void QuestRpcSyncDailyQuestReply::SharedDtor() {
  if (this != default_instance_) {
    delete dailyquestlist_;
  }
}

void QuestRpcSyncDailyQuestReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncDailyQuestReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncDailyQuestReply_descriptor_;
}

const QuestRpcSyncDailyQuestReply& QuestRpcSyncDailyQuestReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncDailyQuestReply* QuestRpcSyncDailyQuestReply::default_instance_ = NULL;

QuestRpcSyncDailyQuestReply* QuestRpcSyncDailyQuestReply::New() const {
  return new QuestRpcSyncDailyQuestReply;
}

void QuestRpcSyncDailyQuestReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_dailyquestlist()) {
      if (dailyquestlist_ != NULL) dailyquestlist_->::DailyQuestList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncDailyQuestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DailyQuestList;
        break;
      }

      // optional .DailyQuestList DailyQuestList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyQuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyquestlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcSyncDailyQuestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .DailyQuestList DailyQuestList = 2;
  if (has_dailyquestlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dailyquestlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncDailyQuestReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .DailyQuestList DailyQuestList = 2;
  if (has_dailyquestlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dailyquestlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncDailyQuestReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .DailyQuestList DailyQuestList = 2;
    if (has_dailyquestlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyquestlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncDailyQuestReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncDailyQuestReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncDailyQuestReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncDailyQuestReply::MergeFrom(const QuestRpcSyncDailyQuestReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dailyquestlist()) {
      mutable_dailyquestlist()->::DailyQuestList::MergeFrom(from.dailyquestlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncDailyQuestReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncDailyQuestReply::CopyFrom(const QuestRpcSyncDailyQuestReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncDailyQuestReply::IsInitialized() const {

  return true;
}

void QuestRpcSyncDailyQuestReply::Swap(QuestRpcSyncDailyQuestReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dailyquestlist_, other->dailyquestlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncDailyQuestReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncDailyQuestReply_descriptor_;
  metadata.reflection = QuestRpcSyncDailyQuestReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcDailyQuestUpdateNotify::kAtivityQuestDataFieldNumber;
#endif  // !_MSC_VER

QuestRpcDailyQuestUpdateNotify::QuestRpcDailyQuestUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcDailyQuestUpdateNotify::InitAsDefaultInstance() {
  ativityquestdata_ = const_cast< ::DailyQuest*>(&::DailyQuest::default_instance());
}

QuestRpcDailyQuestUpdateNotify::QuestRpcDailyQuestUpdateNotify(const QuestRpcDailyQuestUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcDailyQuestUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ativityquestdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcDailyQuestUpdateNotify::~QuestRpcDailyQuestUpdateNotify() {
  SharedDtor();
}

void QuestRpcDailyQuestUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete ativityquestdata_;
  }
}

void QuestRpcDailyQuestUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcDailyQuestUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcDailyQuestUpdateNotify_descriptor_;
}

const QuestRpcDailyQuestUpdateNotify& QuestRpcDailyQuestUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcDailyQuestUpdateNotify* QuestRpcDailyQuestUpdateNotify::default_instance_ = NULL;

QuestRpcDailyQuestUpdateNotify* QuestRpcDailyQuestUpdateNotify::New() const {
  return new QuestRpcDailyQuestUpdateNotify;
}

void QuestRpcDailyQuestUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ativityquestdata()) {
      if (ativityquestdata_ != NULL) ativityquestdata_->::DailyQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcDailyQuestUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DailyQuest AtivityQuestData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ativityquestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcDailyQuestUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DailyQuest AtivityQuestData = 1;
  if (has_ativityquestdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ativityquestdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcDailyQuestUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DailyQuest AtivityQuestData = 1;
  if (has_ativityquestdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ativityquestdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcDailyQuestUpdateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DailyQuest AtivityQuestData = 1;
    if (has_ativityquestdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ativityquestdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcDailyQuestUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcDailyQuestUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcDailyQuestUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcDailyQuestUpdateNotify::MergeFrom(const QuestRpcDailyQuestUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ativityquestdata()) {
      mutable_ativityquestdata()->::DailyQuest::MergeFrom(from.ativityquestdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcDailyQuestUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcDailyQuestUpdateNotify::CopyFrom(const QuestRpcDailyQuestUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcDailyQuestUpdateNotify::IsInitialized() const {

  return true;
}

void QuestRpcDailyQuestUpdateNotify::Swap(QuestRpcDailyQuestUpdateNotify* other) {
  if (other != this) {
    std::swap(ativityquestdata_, other->ativityquestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcDailyQuestUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcDailyQuestUpdateNotify_descriptor_;
  metadata.reflection = QuestRpcDailyQuestUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcConsumeItemAsk::kQuestConfigIdFieldNumber;
const int QuestRpcConsumeItemAsk::kItemDataFieldNumber;
#endif  // !_MSC_VER

QuestRpcConsumeItemAsk::QuestRpcConsumeItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcConsumeItemAsk::InitAsDefaultInstance() {
}

QuestRpcConsumeItemAsk::QuestRpcConsumeItemAsk(const QuestRpcConsumeItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcConsumeItemAsk::SharedCtor() {
  _cached_size_ = 0;
  questconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcConsumeItemAsk::~QuestRpcConsumeItemAsk() {
  SharedDtor();
}

void QuestRpcConsumeItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcConsumeItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcConsumeItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcConsumeItemAsk_descriptor_;
}

const QuestRpcConsumeItemAsk& QuestRpcConsumeItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcConsumeItemAsk* QuestRpcConsumeItemAsk::default_instance_ = NULL;

QuestRpcConsumeItemAsk* QuestRpcConsumeItemAsk::New() const {
  return new QuestRpcConsumeItemAsk;
}

void QuestRpcConsumeItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questconfigid_ = -1;
  }
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcConsumeItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questconfigid_)));
          set_has_questconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        break;
      }

      // repeated .ItemSimpleData ItemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcConsumeItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questconfigid(), output);
  }

  // repeated .ItemSimpleData ItemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcConsumeItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestConfigId = 1 [default = -1];
  if (has_questconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questconfigid(), target);
  }

  // repeated .ItemSimpleData ItemData = 2;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcConsumeItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestConfigId = 1 [default = -1];
    if (has_questconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questconfigid());
    }

  }
  // repeated .ItemSimpleData ItemData = 2;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcConsumeItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcConsumeItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcConsumeItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcConsumeItemAsk::MergeFrom(const QuestRpcConsumeItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questconfigid()) {
      set_questconfigid(from.questconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcConsumeItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcConsumeItemAsk::CopyFrom(const QuestRpcConsumeItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcConsumeItemAsk::IsInitialized() const {

  return true;
}

void QuestRpcConsumeItemAsk::Swap(QuestRpcConsumeItemAsk* other) {
  if (other != this) {
    std::swap(questconfigid_, other->questconfigid_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcConsumeItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcConsumeItemAsk_descriptor_;
  metadata.reflection = QuestRpcConsumeItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcConsumeItemReply::kResultFieldNumber;
#endif  // !_MSC_VER

QuestRpcConsumeItemReply::QuestRpcConsumeItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcConsumeItemReply::InitAsDefaultInstance() {
}

QuestRpcConsumeItemReply::QuestRpcConsumeItemReply(const QuestRpcConsumeItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcConsumeItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcConsumeItemReply::~QuestRpcConsumeItemReply() {
  SharedDtor();
}

void QuestRpcConsumeItemReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcConsumeItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcConsumeItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcConsumeItemReply_descriptor_;
}

const QuestRpcConsumeItemReply& QuestRpcConsumeItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcConsumeItemReply* QuestRpcConsumeItemReply::default_instance_ = NULL;

QuestRpcConsumeItemReply* QuestRpcConsumeItemReply::New() const {
  return new QuestRpcConsumeItemReply;
}

void QuestRpcConsumeItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcConsumeItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcConsumeItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcConsumeItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcConsumeItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcConsumeItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcConsumeItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcConsumeItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcConsumeItemReply::MergeFrom(const QuestRpcConsumeItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcConsumeItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcConsumeItemReply::CopyFrom(const QuestRpcConsumeItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcConsumeItemReply::IsInitialized() const {

  return true;
}

void QuestRpcConsumeItemReply::Swap(QuestRpcConsumeItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcConsumeItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcConsumeItemReply_descriptor_;
  metadata.reflection = QuestRpcConsumeItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestRpcQuestMaxListAsk::QuestRpcQuestMaxListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcQuestMaxListAsk::InitAsDefaultInstance() {
}

QuestRpcQuestMaxListAsk::QuestRpcQuestMaxListAsk(const QuestRpcQuestMaxListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcQuestMaxListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcQuestMaxListAsk::~QuestRpcQuestMaxListAsk() {
  SharedDtor();
}

void QuestRpcQuestMaxListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcQuestMaxListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcQuestMaxListAsk_descriptor_;
}

const QuestRpcQuestMaxListAsk& QuestRpcQuestMaxListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcQuestMaxListAsk* QuestRpcQuestMaxListAsk::default_instance_ = NULL;

QuestRpcQuestMaxListAsk* QuestRpcQuestMaxListAsk::New() const {
  return new QuestRpcQuestMaxListAsk;
}

void QuestRpcQuestMaxListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcQuestMaxListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestRpcQuestMaxListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcQuestMaxListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcQuestMaxListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcQuestMaxListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcQuestMaxListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcQuestMaxListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcQuestMaxListAsk::MergeFrom(const QuestRpcQuestMaxListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcQuestMaxListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcQuestMaxListAsk::CopyFrom(const QuestRpcQuestMaxListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcQuestMaxListAsk::IsInitialized() const {

  return true;
}

void QuestRpcQuestMaxListAsk::Swap(QuestRpcQuestMaxListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcQuestMaxListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcQuestMaxListAsk_descriptor_;
  metadata.reflection = QuestRpcQuestMaxListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcQuestMaxListReply::kResultFieldNumber;
const int QuestRpcQuestMaxListReply::kQuestListFieldNumber;
#endif  // !_MSC_VER

QuestRpcQuestMaxListReply::QuestRpcQuestMaxListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcQuestMaxListReply::InitAsDefaultInstance() {
  questlist_ = const_cast< ::QuestMaxQuestList*>(&::QuestMaxQuestList::default_instance());
}

QuestRpcQuestMaxListReply::QuestRpcQuestMaxListReply(const QuestRpcQuestMaxListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcQuestMaxListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  questlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcQuestMaxListReply::~QuestRpcQuestMaxListReply() {
  SharedDtor();
}

void QuestRpcQuestMaxListReply::SharedDtor() {
  if (this != default_instance_) {
    delete questlist_;
  }
}

void QuestRpcQuestMaxListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcQuestMaxListReply_descriptor_;
}

const QuestRpcQuestMaxListReply& QuestRpcQuestMaxListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcQuestMaxListReply* QuestRpcQuestMaxListReply::default_instance_ = NULL;

QuestRpcQuestMaxListReply* QuestRpcQuestMaxListReply::New() const {
  return new QuestRpcQuestMaxListReply;
}

void QuestRpcQuestMaxListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_questlist()) {
      if (questlist_ != NULL) questlist_->::QuestMaxQuestList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcQuestMaxListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuestList;
        break;
      }

      // optional .QuestMaxQuestList QuestList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcQuestMaxListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .QuestMaxQuestList QuestList = 2;
  if (has_questlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcQuestMaxListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .QuestMaxQuestList QuestList = 2;
  if (has_questlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcQuestMaxListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .QuestMaxQuestList QuestList = 2;
    if (has_questlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcQuestMaxListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcQuestMaxListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcQuestMaxListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcQuestMaxListReply::MergeFrom(const QuestRpcQuestMaxListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_questlist()) {
      mutable_questlist()->::QuestMaxQuestList::MergeFrom(from.questlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcQuestMaxListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcQuestMaxListReply::CopyFrom(const QuestRpcQuestMaxListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcQuestMaxListReply::IsInitialized() const {

  return true;
}

void QuestRpcQuestMaxListReply::Swap(QuestRpcQuestMaxListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(questlist_, other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcQuestMaxListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcQuestMaxListReply_descriptor_;
  metadata.reflection = QuestRpcQuestMaxListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcQuestMaxListNotifyNotify::kQuestListFieldNumber;
#endif  // !_MSC_VER

QuestRpcQuestMaxListNotifyNotify::QuestRpcQuestMaxListNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcQuestMaxListNotifyNotify::InitAsDefaultInstance() {
  questlist_ = const_cast< ::QuestMaxQuestList*>(&::QuestMaxQuestList::default_instance());
}

QuestRpcQuestMaxListNotifyNotify::QuestRpcQuestMaxListNotifyNotify(const QuestRpcQuestMaxListNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcQuestMaxListNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  questlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcQuestMaxListNotifyNotify::~QuestRpcQuestMaxListNotifyNotify() {
  SharedDtor();
}

void QuestRpcQuestMaxListNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete questlist_;
  }
}

void QuestRpcQuestMaxListNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcQuestMaxListNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcQuestMaxListNotifyNotify_descriptor_;
}

const QuestRpcQuestMaxListNotifyNotify& QuestRpcQuestMaxListNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcQuestMaxListNotifyNotify* QuestRpcQuestMaxListNotifyNotify::default_instance_ = NULL;

QuestRpcQuestMaxListNotifyNotify* QuestRpcQuestMaxListNotifyNotify::New() const {
  return new QuestRpcQuestMaxListNotifyNotify;
}

void QuestRpcQuestMaxListNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questlist()) {
      if (questlist_ != NULL) questlist_->::QuestMaxQuestList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcQuestMaxListNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuestMaxQuestList QuestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcQuestMaxListNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuestMaxQuestList QuestList = 1;
  if (has_questlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcQuestMaxListNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuestMaxQuestList QuestList = 1;
  if (has_questlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcQuestMaxListNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuestMaxQuestList QuestList = 1;
    if (has_questlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcQuestMaxListNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcQuestMaxListNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcQuestMaxListNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcQuestMaxListNotifyNotify::MergeFrom(const QuestRpcQuestMaxListNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questlist()) {
      mutable_questlist()->::QuestMaxQuestList::MergeFrom(from.questlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcQuestMaxListNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcQuestMaxListNotifyNotify::CopyFrom(const QuestRpcQuestMaxListNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcQuestMaxListNotifyNotify::IsInitialized() const {

  return true;
}

void QuestRpcQuestMaxListNotifyNotify::Swap(QuestRpcQuestMaxListNotifyNotify* other) {
  if (other != this) {
    std::swap(questlist_, other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcQuestMaxListNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcQuestMaxListNotifyNotify_descriptor_;
  metadata.reflection = QuestRpcQuestMaxListNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestRpcSyncCompleteQuestIdsAsk::QuestRpcSyncCompleteQuestIdsAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncCompleteQuestIdsAsk::InitAsDefaultInstance() {
}

QuestRpcSyncCompleteQuestIdsAsk::QuestRpcSyncCompleteQuestIdsAsk(const QuestRpcSyncCompleteQuestIdsAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncCompleteQuestIdsAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncCompleteQuestIdsAsk::~QuestRpcSyncCompleteQuestIdsAsk() {
  SharedDtor();
}

void QuestRpcSyncCompleteQuestIdsAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcSyncCompleteQuestIdsAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncCompleteQuestIdsAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncCompleteQuestIdsAsk_descriptor_;
}

const QuestRpcSyncCompleteQuestIdsAsk& QuestRpcSyncCompleteQuestIdsAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncCompleteQuestIdsAsk* QuestRpcSyncCompleteQuestIdsAsk::default_instance_ = NULL;

QuestRpcSyncCompleteQuestIdsAsk* QuestRpcSyncCompleteQuestIdsAsk::New() const {
  return new QuestRpcSyncCompleteQuestIdsAsk;
}

void QuestRpcSyncCompleteQuestIdsAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncCompleteQuestIdsAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestRpcSyncCompleteQuestIdsAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncCompleteQuestIdsAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncCompleteQuestIdsAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncCompleteQuestIdsAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncCompleteQuestIdsAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncCompleteQuestIdsAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncCompleteQuestIdsAsk::MergeFrom(const QuestRpcSyncCompleteQuestIdsAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncCompleteQuestIdsAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncCompleteQuestIdsAsk::CopyFrom(const QuestRpcSyncCompleteQuestIdsAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncCompleteQuestIdsAsk::IsInitialized() const {

  return true;
}

void QuestRpcSyncCompleteQuestIdsAsk::Swap(QuestRpcSyncCompleteQuestIdsAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncCompleteQuestIdsAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncCompleteQuestIdsAsk_descriptor_;
  metadata.reflection = QuestRpcSyncCompleteQuestIdsAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcSyncCompleteQuestIdsReply::kResultFieldNumber;
const int QuestRpcSyncCompleteQuestIdsReply::kCompleteQuestIdsFieldNumber;
#endif  // !_MSC_VER

QuestRpcSyncCompleteQuestIdsReply::QuestRpcSyncCompleteQuestIdsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncCompleteQuestIdsReply::InitAsDefaultInstance() {
  completequestids_ = const_cast< ::CompletedQuestList*>(&::CompletedQuestList::default_instance());
}

QuestRpcSyncCompleteQuestIdsReply::QuestRpcSyncCompleteQuestIdsReply(const QuestRpcSyncCompleteQuestIdsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncCompleteQuestIdsReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  completequestids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncCompleteQuestIdsReply::~QuestRpcSyncCompleteQuestIdsReply() {
  SharedDtor();
}

void QuestRpcSyncCompleteQuestIdsReply::SharedDtor() {
  if (this != default_instance_) {
    delete completequestids_;
  }
}

void QuestRpcSyncCompleteQuestIdsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncCompleteQuestIdsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncCompleteQuestIdsReply_descriptor_;
}

const QuestRpcSyncCompleteQuestIdsReply& QuestRpcSyncCompleteQuestIdsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncCompleteQuestIdsReply* QuestRpcSyncCompleteQuestIdsReply::default_instance_ = NULL;

QuestRpcSyncCompleteQuestIdsReply* QuestRpcSyncCompleteQuestIdsReply::New() const {
  return new QuestRpcSyncCompleteQuestIdsReply;
}

void QuestRpcSyncCompleteQuestIdsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_completequestids()) {
      if (completequestids_ != NULL) completequestids_->::CompletedQuestList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncCompleteQuestIdsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CompleteQuestIds;
        break;
      }

      // optional .CompletedQuestList CompleteQuestIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CompleteQuestIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_completequestids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcSyncCompleteQuestIdsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .CompletedQuestList CompleteQuestIds = 2;
  if (has_completequestids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completequestids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncCompleteQuestIdsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .CompletedQuestList CompleteQuestIds = 2;
  if (has_completequestids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->completequestids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncCompleteQuestIdsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .CompletedQuestList CompleteQuestIds = 2;
    if (has_completequestids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completequestids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncCompleteQuestIdsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncCompleteQuestIdsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncCompleteQuestIdsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncCompleteQuestIdsReply::MergeFrom(const QuestRpcSyncCompleteQuestIdsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_completequestids()) {
      mutable_completequestids()->::CompletedQuestList::MergeFrom(from.completequestids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncCompleteQuestIdsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncCompleteQuestIdsReply::CopyFrom(const QuestRpcSyncCompleteQuestIdsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncCompleteQuestIdsReply::IsInitialized() const {

  return true;
}

void QuestRpcSyncCompleteQuestIdsReply::Swap(QuestRpcSyncCompleteQuestIdsReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(completequestids_, other->completequestids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncCompleteQuestIdsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncCompleteQuestIdsReply_descriptor_;
  metadata.reflection = QuestRpcSyncCompleteQuestIdsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcCompleteQuestIdsNotifyNotify::kCompleteQuestIdsFieldNumber;
#endif  // !_MSC_VER

QuestRpcCompleteQuestIdsNotifyNotify::QuestRpcCompleteQuestIdsNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcCompleteQuestIdsNotifyNotify::InitAsDefaultInstance() {
  completequestids_ = const_cast< ::CompletedQuestList*>(&::CompletedQuestList::default_instance());
}

QuestRpcCompleteQuestIdsNotifyNotify::QuestRpcCompleteQuestIdsNotifyNotify(const QuestRpcCompleteQuestIdsNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcCompleteQuestIdsNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  completequestids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcCompleteQuestIdsNotifyNotify::~QuestRpcCompleteQuestIdsNotifyNotify() {
  SharedDtor();
}

void QuestRpcCompleteQuestIdsNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete completequestids_;
  }
}

void QuestRpcCompleteQuestIdsNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcCompleteQuestIdsNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcCompleteQuestIdsNotifyNotify_descriptor_;
}

const QuestRpcCompleteQuestIdsNotifyNotify& QuestRpcCompleteQuestIdsNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcCompleteQuestIdsNotifyNotify* QuestRpcCompleteQuestIdsNotifyNotify::default_instance_ = NULL;

QuestRpcCompleteQuestIdsNotifyNotify* QuestRpcCompleteQuestIdsNotifyNotify::New() const {
  return new QuestRpcCompleteQuestIdsNotifyNotify;
}

void QuestRpcCompleteQuestIdsNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_completequestids()) {
      if (completequestids_ != NULL) completequestids_->::CompletedQuestList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcCompleteQuestIdsNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CompletedQuestList CompleteQuestIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_completequestids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcCompleteQuestIdsNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CompletedQuestList CompleteQuestIds = 1;
  if (has_completequestids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->completequestids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcCompleteQuestIdsNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CompletedQuestList CompleteQuestIds = 1;
  if (has_completequestids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->completequestids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcCompleteQuestIdsNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CompletedQuestList CompleteQuestIds = 1;
    if (has_completequestids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completequestids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcCompleteQuestIdsNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcCompleteQuestIdsNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcCompleteQuestIdsNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcCompleteQuestIdsNotifyNotify::MergeFrom(const QuestRpcCompleteQuestIdsNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_completequestids()) {
      mutable_completequestids()->::CompletedQuestList::MergeFrom(from.completequestids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcCompleteQuestIdsNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcCompleteQuestIdsNotifyNotify::CopyFrom(const QuestRpcCompleteQuestIdsNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcCompleteQuestIdsNotifyNotify::IsInitialized() const {

  return true;
}

void QuestRpcCompleteQuestIdsNotifyNotify::Swap(QuestRpcCompleteQuestIdsNotifyNotify* other) {
  if (other != this) {
    std::swap(completequestids_, other->completequestids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcCompleteQuestIdsNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcCompleteQuestIdsNotifyNotify_descriptor_;
  metadata.reflection = QuestRpcCompleteQuestIdsNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuestRpcEliteFinishCountAsk::QuestRpcEliteFinishCountAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcEliteFinishCountAsk::InitAsDefaultInstance() {
}

QuestRpcEliteFinishCountAsk::QuestRpcEliteFinishCountAsk(const QuestRpcEliteFinishCountAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcEliteFinishCountAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcEliteFinishCountAsk::~QuestRpcEliteFinishCountAsk() {
  SharedDtor();
}

void QuestRpcEliteFinishCountAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcEliteFinishCountAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcEliteFinishCountAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcEliteFinishCountAsk_descriptor_;
}

const QuestRpcEliteFinishCountAsk& QuestRpcEliteFinishCountAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcEliteFinishCountAsk* QuestRpcEliteFinishCountAsk::default_instance_ = NULL;

QuestRpcEliteFinishCountAsk* QuestRpcEliteFinishCountAsk::New() const {
  return new QuestRpcEliteFinishCountAsk;
}

void QuestRpcEliteFinishCountAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcEliteFinishCountAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuestRpcEliteFinishCountAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcEliteFinishCountAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcEliteFinishCountAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcEliteFinishCountAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcEliteFinishCountAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcEliteFinishCountAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcEliteFinishCountAsk::MergeFrom(const QuestRpcEliteFinishCountAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcEliteFinishCountAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcEliteFinishCountAsk::CopyFrom(const QuestRpcEliteFinishCountAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcEliteFinishCountAsk::IsInitialized() const {

  return true;
}

void QuestRpcEliteFinishCountAsk::Swap(QuestRpcEliteFinishCountAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcEliteFinishCountAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcEliteFinishCountAsk_descriptor_;
  metadata.reflection = QuestRpcEliteFinishCountAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcEliteFinishCountReply::kResultFieldNumber;
const int QuestRpcEliteFinishCountReply::kCountFieldNumber;
#endif  // !_MSC_VER

QuestRpcEliteFinishCountReply::QuestRpcEliteFinishCountReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcEliteFinishCountReply::InitAsDefaultInstance() {
}

QuestRpcEliteFinishCountReply::QuestRpcEliteFinishCountReply(const QuestRpcEliteFinishCountReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcEliteFinishCountReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcEliteFinishCountReply::~QuestRpcEliteFinishCountReply() {
  SharedDtor();
}

void QuestRpcEliteFinishCountReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcEliteFinishCountReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcEliteFinishCountReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcEliteFinishCountReply_descriptor_;
}

const QuestRpcEliteFinishCountReply& QuestRpcEliteFinishCountReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcEliteFinishCountReply* QuestRpcEliteFinishCountReply::default_instance_ = NULL;

QuestRpcEliteFinishCountReply* QuestRpcEliteFinishCountReply::New() const {
  return new QuestRpcEliteFinishCountReply;
}

void QuestRpcEliteFinishCountReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcEliteFinishCountReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcEliteFinishCountReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcEliteFinishCountReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcEliteFinishCountReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcEliteFinishCountReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcEliteFinishCountReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcEliteFinishCountReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcEliteFinishCountReply::MergeFrom(const QuestRpcEliteFinishCountReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcEliteFinishCountReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcEliteFinishCountReply::CopyFrom(const QuestRpcEliteFinishCountReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcEliteFinishCountReply::IsInitialized() const {

  return true;
}

void QuestRpcEliteFinishCountReply::Swap(QuestRpcEliteFinishCountReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcEliteFinishCountReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcEliteFinishCountReply_descriptor_;
  metadata.reflection = QuestRpcEliteFinishCountReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRpcSyncCanAcceptQuestNotify::kCanAcceptQuestFieldNumber;
#endif  // !_MSC_VER

QuestRpcSyncCanAcceptQuestNotify::QuestRpcSyncCanAcceptQuestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRpcSyncCanAcceptQuestNotify::InitAsDefaultInstance() {
}

QuestRpcSyncCanAcceptQuestNotify::QuestRpcSyncCanAcceptQuestNotify(const QuestRpcSyncCanAcceptQuestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRpcSyncCanAcceptQuestNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRpcSyncCanAcceptQuestNotify::~QuestRpcSyncCanAcceptQuestNotify() {
  SharedDtor();
}

void QuestRpcSyncCanAcceptQuestNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRpcSyncCanAcceptQuestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRpcSyncCanAcceptQuestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRpcSyncCanAcceptQuestNotify_descriptor_;
}

const QuestRpcSyncCanAcceptQuestNotify& QuestRpcSyncCanAcceptQuestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuestRpc_2eproto();
  return *default_instance_;
}

QuestRpcSyncCanAcceptQuestNotify* QuestRpcSyncCanAcceptQuestNotify::default_instance_ = NULL;

QuestRpcSyncCanAcceptQuestNotify* QuestRpcSyncCanAcceptQuestNotify::New() const {
  return new QuestRpcSyncCanAcceptQuestNotify;
}

void QuestRpcSyncCanAcceptQuestNotify::Clear() {
  canacceptquest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRpcSyncCanAcceptQuestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 CanAcceptQuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanAcceptQuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_canacceptquest())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_canacceptquest())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_CanAcceptQuest;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRpcSyncCanAcceptQuestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 CanAcceptQuest = 1;
  for (int i = 0; i < this->canacceptquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->canacceptquest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRpcSyncCanAcceptQuestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 CanAcceptQuest = 1;
  for (int i = 0; i < this->canacceptquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->canacceptquest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRpcSyncCanAcceptQuestNotify::ByteSize() const {
  int total_size = 0;

  // repeated int32 CanAcceptQuest = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->canacceptquest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->canacceptquest(i));
    }
    total_size += 1 * this->canacceptquest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRpcSyncCanAcceptQuestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRpcSyncCanAcceptQuestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRpcSyncCanAcceptQuestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRpcSyncCanAcceptQuestNotify::MergeFrom(const QuestRpcSyncCanAcceptQuestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  canacceptquest_.MergeFrom(from.canacceptquest_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRpcSyncCanAcceptQuestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRpcSyncCanAcceptQuestNotify::CopyFrom(const QuestRpcSyncCanAcceptQuestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRpcSyncCanAcceptQuestNotify::IsInitialized() const {

  return true;
}

void QuestRpcSyncCanAcceptQuestNotify::Swap(QuestRpcSyncCanAcceptQuestNotify* other) {
  if (other != this) {
    canacceptquest_.Swap(&other->canacceptquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRpcSyncCanAcceptQuestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRpcSyncCanAcceptQuestNotify_descriptor_;
  metadata.reflection = QuestRpcSyncCanAcceptQuestNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
