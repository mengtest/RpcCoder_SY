// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TreasureRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TreasureRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDepotInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDepotInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureUnlockAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureUnlockReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipSycAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureEquipSycAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipSycReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureEquipSycReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotLvUpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDepotLvUpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotLvUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDepotLvUpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureUnEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureUnEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipedIDNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureEquipedIDNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureDelayTimeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDelayTimeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureDelayTimeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureDelayTimeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockEquipNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureRpcTreasureUnlockEquipNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TreasureRpc_2eproto() {
  protobuf_AddDesc_TreasureRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TreasureRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TreasureRpcTreasureDepotInfoAsk_descriptor_ = file->message_type(0);
  static const int TreasureRpcTreasureDepotInfoAsk_offsets_[1] = {
  };
  TreasureRpcTreasureDepotInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDepotInfoAsk_descriptor_,
      TreasureRpcTreasureDepotInfoAsk::default_instance_,
      TreasureRpcTreasureDepotInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDepotInfoAsk));
  TreasureRpcTreasureDepotInfoReply_descriptor_ = file->message_type(1);
  static const int TreasureRpcTreasureDepotInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoReply, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoReply, point_),
  };
  TreasureRpcTreasureDepotInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDepotInfoReply_descriptor_,
      TreasureRpcTreasureDepotInfoReply::default_instance_,
      TreasureRpcTreasureDepotInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDepotInfoReply));
  TreasureRpcTreasureInfoAsk_descriptor_ = file->message_type(2);
  static const int TreasureRpcTreasureInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoAsk, type_),
  };
  TreasureRpcTreasureInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureInfoAsk_descriptor_,
      TreasureRpcTreasureInfoAsk::default_instance_,
      TreasureRpcTreasureInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureInfoAsk));
  TreasureRpcTreasureInfoReply_descriptor_ = file->message_type(3);
  static const int TreasureRpcTreasureInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoReply, treasure_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoReply, type_),
  };
  TreasureRpcTreasureInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureInfoReply_descriptor_,
      TreasureRpcTreasureInfoReply::default_instance_,
      TreasureRpcTreasureInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureInfoReply));
  TreasureRpcTreasureUnlockAsk_descriptor_ = file->message_type(4);
  static const int TreasureRpcTreasureUnlockAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockAsk, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockAsk, time_type_),
  };
  TreasureRpcTreasureUnlockAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureUnlockAsk_descriptor_,
      TreasureRpcTreasureUnlockAsk::default_instance_,
      TreasureRpcTreasureUnlockAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureUnlockAsk));
  TreasureRpcTreasureUnlockReply_descriptor_ = file->message_type(5);
  static const int TreasureRpcTreasureUnlockReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockReply, treasureunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockReply, points_),
  };
  TreasureRpcTreasureUnlockReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureUnlockReply_descriptor_,
      TreasureRpcTreasureUnlockReply::default_instance_,
      TreasureRpcTreasureUnlockReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureUnlockReply));
  TreasureRpcTreasureEquipAsk_descriptor_ = file->message_type(6);
  static const int TreasureRpcTreasureEquipAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipAsk, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipAsk, time_type_),
  };
  TreasureRpcTreasureEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureEquipAsk_descriptor_,
      TreasureRpcTreasureEquipAsk::default_instance_,
      TreasureRpcTreasureEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureEquipAsk));
  TreasureRpcTreasureEquipReply_descriptor_ = file->message_type(7);
  static const int TreasureRpcTreasureEquipReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipReply, treasureequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipReply, treasureunequiped_),
  };
  TreasureRpcTreasureEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureEquipReply_descriptor_,
      TreasureRpcTreasureEquipReply::default_instance_,
      TreasureRpcTreasureEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureEquipReply));
  TreasureRpcTreasureEquipSycAsk_descriptor_ = file->message_type(8);
  static const int TreasureRpcTreasureEquipSycAsk_offsets_[1] = {
  };
  TreasureRpcTreasureEquipSycAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureEquipSycAsk_descriptor_,
      TreasureRpcTreasureEquipSycAsk::default_instance_,
      TreasureRpcTreasureEquipSycAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureEquipSycAsk));
  TreasureRpcTreasureEquipSycReply_descriptor_ = file->message_type(9);
  static const int TreasureRpcTreasureEquipSycReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycReply, treasueequiped_),
  };
  TreasureRpcTreasureEquipSycReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureEquipSycReply_descriptor_,
      TreasureRpcTreasureEquipSycReply::default_instance_,
      TreasureRpcTreasureEquipSycReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipSycReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureEquipSycReply));
  TreasureRpcTreasureDepotLvUpAsk_descriptor_ = file->message_type(10);
  static const int TreasureRpcTreasureDepotLvUpAsk_offsets_[1] = {
  };
  TreasureRpcTreasureDepotLvUpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDepotLvUpAsk_descriptor_,
      TreasureRpcTreasureDepotLvUpAsk::default_instance_,
      TreasureRpcTreasureDepotLvUpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDepotLvUpAsk));
  TreasureRpcTreasureDepotLvUpReply_descriptor_ = file->message_type(11);
  static const int TreasureRpcTreasureDepotLvUpReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpReply, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpReply, point_),
  };
  TreasureRpcTreasureDepotLvUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDepotLvUpReply_descriptor_,
      TreasureRpcTreasureDepotLvUpReply::default_instance_,
      TreasureRpcTreasureDepotLvUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDepotLvUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDepotLvUpReply));
  TreasureRpcTreasureUnEquipAsk_descriptor_ = file->message_type(12);
  static const int TreasureRpcTreasureUnEquipAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipAsk, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipAsk, time_type_),
  };
  TreasureRpcTreasureUnEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureUnEquipAsk_descriptor_,
      TreasureRpcTreasureUnEquipAsk::default_instance_,
      TreasureRpcTreasureUnEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureUnEquipAsk));
  TreasureRpcTreasureUnEquipReply_descriptor_ = file->message_type(13);
  static const int TreasureRpcTreasureUnEquipReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipReply, treasureunequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipReply, treasureequiped_),
  };
  TreasureRpcTreasureUnEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureUnEquipReply_descriptor_,
      TreasureRpcTreasureUnEquipReply::default_instance_,
      TreasureRpcTreasureUnEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureUnEquipReply));
  TreasureRpcTreasureEquipedIDNotify_descriptor_ = file->message_type(14);
  static const int TreasureRpcTreasureEquipedIDNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipedIDNotify, treasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipedIDNotify, objid_),
  };
  TreasureRpcTreasureEquipedIDNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureEquipedIDNotify_descriptor_,
      TreasureRpcTreasureEquipedIDNotify::default_instance_,
      TreasureRpcTreasureEquipedIDNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipedIDNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureEquipedIDNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureEquipedIDNotify));
  TreasureRpcTreasureDelayTimeAsk_descriptor_ = file->message_type(15);
  static const int TreasureRpcTreasureDelayTimeAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeAsk, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeAsk, time_type_),
  };
  TreasureRpcTreasureDelayTimeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDelayTimeAsk_descriptor_,
      TreasureRpcTreasureDelayTimeAsk::default_instance_,
      TreasureRpcTreasureDelayTimeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDelayTimeAsk));
  TreasureRpcTreasureDelayTimeReply_descriptor_ = file->message_type(16);
  static const int TreasureRpcTreasureDelayTimeReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeReply, treasureunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeReply, points_),
  };
  TreasureRpcTreasureDelayTimeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureDelayTimeReply_descriptor_,
      TreasureRpcTreasureDelayTimeReply::default_instance_,
      TreasureRpcTreasureDelayTimeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureDelayTimeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureDelayTimeReply));
  TreasureRpcTreasureUnlockEquipNotify_descriptor_ = file->message_type(17);
  static const int TreasureRpcTreasureUnlockEquipNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, treasureequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, treasureunequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, points_),
  };
  TreasureRpcTreasureUnlockEquipNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureRpcTreasureUnlockEquipNotify_descriptor_,
      TreasureRpcTreasureUnlockEquipNotify::default_instance_,
      TreasureRpcTreasureUnlockEquipNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureRpcTreasureUnlockEquipNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureRpcTreasureUnlockEquipNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TreasureRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDepotInfoAsk_descriptor_, &TreasureRpcTreasureDepotInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDepotInfoReply_descriptor_, &TreasureRpcTreasureDepotInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureInfoAsk_descriptor_, &TreasureRpcTreasureInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureInfoReply_descriptor_, &TreasureRpcTreasureInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureUnlockAsk_descriptor_, &TreasureRpcTreasureUnlockAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureUnlockReply_descriptor_, &TreasureRpcTreasureUnlockReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureEquipAsk_descriptor_, &TreasureRpcTreasureEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureEquipReply_descriptor_, &TreasureRpcTreasureEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureEquipSycAsk_descriptor_, &TreasureRpcTreasureEquipSycAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureEquipSycReply_descriptor_, &TreasureRpcTreasureEquipSycReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDepotLvUpAsk_descriptor_, &TreasureRpcTreasureDepotLvUpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDepotLvUpReply_descriptor_, &TreasureRpcTreasureDepotLvUpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureUnEquipAsk_descriptor_, &TreasureRpcTreasureUnEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureUnEquipReply_descriptor_, &TreasureRpcTreasureUnEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureEquipedIDNotify_descriptor_, &TreasureRpcTreasureEquipedIDNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDelayTimeAsk_descriptor_, &TreasureRpcTreasureDelayTimeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureDelayTimeReply_descriptor_, &TreasureRpcTreasureDelayTimeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureRpcTreasureUnlockEquipNotify_descriptor_, &TreasureRpcTreasureUnlockEquipNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TreasureRpc_2eproto() {
  delete TreasureRpcTreasureDepotInfoAsk::default_instance_;
  delete TreasureRpcTreasureDepotInfoAsk_reflection_;
  delete TreasureRpcTreasureDepotInfoReply::default_instance_;
  delete TreasureRpcTreasureDepotInfoReply_reflection_;
  delete TreasureRpcTreasureInfoAsk::default_instance_;
  delete TreasureRpcTreasureInfoAsk_reflection_;
  delete TreasureRpcTreasureInfoReply::default_instance_;
  delete TreasureRpcTreasureInfoReply_reflection_;
  delete TreasureRpcTreasureUnlockAsk::default_instance_;
  delete TreasureRpcTreasureUnlockAsk_reflection_;
  delete TreasureRpcTreasureUnlockReply::default_instance_;
  delete TreasureRpcTreasureUnlockReply_reflection_;
  delete TreasureRpcTreasureEquipAsk::default_instance_;
  delete TreasureRpcTreasureEquipAsk_reflection_;
  delete TreasureRpcTreasureEquipReply::default_instance_;
  delete TreasureRpcTreasureEquipReply_reflection_;
  delete TreasureRpcTreasureEquipSycAsk::default_instance_;
  delete TreasureRpcTreasureEquipSycAsk_reflection_;
  delete TreasureRpcTreasureEquipSycReply::default_instance_;
  delete TreasureRpcTreasureEquipSycReply_reflection_;
  delete TreasureRpcTreasureDepotLvUpAsk::default_instance_;
  delete TreasureRpcTreasureDepotLvUpAsk_reflection_;
  delete TreasureRpcTreasureDepotLvUpReply::default_instance_;
  delete TreasureRpcTreasureDepotLvUpReply_reflection_;
  delete TreasureRpcTreasureUnEquipAsk::default_instance_;
  delete TreasureRpcTreasureUnEquipAsk_reflection_;
  delete TreasureRpcTreasureUnEquipReply::default_instance_;
  delete TreasureRpcTreasureUnEquipReply_reflection_;
  delete TreasureRpcTreasureEquipedIDNotify::default_instance_;
  delete TreasureRpcTreasureEquipedIDNotify_reflection_;
  delete TreasureRpcTreasureDelayTimeAsk::default_instance_;
  delete TreasureRpcTreasureDelayTimeAsk_reflection_;
  delete TreasureRpcTreasureDelayTimeReply::default_instance_;
  delete TreasureRpcTreasureDelayTimeReply_reflection_;
  delete TreasureRpcTreasureUnlockEquipNotify::default_instance_;
  delete TreasureRpcTreasureUnlockEquipNotify_reflection_;
}

void protobuf_AddDesc_TreasureRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TreasureRpc.proto\032\022PublicStruct.proto\""
    "!\n\037TreasureRpcTreasureDepotInfoAsk\"[\n!Tr"
    "easureRpcTreasureDepotInfoReply\022\022\n\006Resul"
    "t\030\001 \001(\005:\002-1\022\020\n\005Level\030\002 \001(\005:\0011\022\020\n\005Point\030\003"
    " \001(\005:\0010\".\n\032TreasureRpcTreasureInfoAsk\022\020\n"
    "\004Type\030\001 \001(\005:\002-1\"j\n\034TreasureRpcTreasureIn"
    "foReply\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\rTreasure_"
    "Info\030\002 \003(\0132\r.TreasureData\022\020\n\004Type\030\003 \001(\005:"
    "\002-1\"]\n\034TreasureRpcTreasureUnlockAsk\022\016\n\002I"
    "d\030\001 \001(\005:\002-1\022\026\n\nColor_Type\030\002 \001(\005:\002-1\022\025\n\tT"
    "ime_Type\030\003 \001(\005:\002-1\"q\n\036TreasureRpcTreasur"
    "eUnlockReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\'\n\020Trea"
    "sureUnLocked\030\002 \001(\0132\r.TreasureData\022\022\n\006Poi"
    "nts\030\003 \001(\005:\002-1\"\\\n\033TreasureRpcTreasureEqui"
    "pAsk\022\016\n\002Id\030\001 \001(\005:\002-1\022\026\n\nColor_Type\030\002 \001(\005"
    ":\002-1\022\025\n\tTime_Type\030\003 \001(\005:\002-1\"\205\001\n\035Treasure"
    "RpcTreasureEquipReply\022\022\n\006Result\030\001 \001(\005:\002-"
    "1\022&\n\017TreasureEquiped\030\002 \001(\0132\r.TreasureDat"
    "a\022(\n\021TreasureUnequiped\030\004 \001(\0132\r.TreasureD"
    "ata\" \n\036TreasureRpcTreasureEquipSycAsk\"]\n"
    " TreasureRpcTreasureEquipSycReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1\022%\n\016TreasueEquiped\030\002 \003(\0132\r."
    "TreasureData\"!\n\037TreasureRpcTreasureDepot"
    "LvUpAsk\"]\n!TreasureRpcTreasureDepotLvUpR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\022\021\n\005Level\030\002 \001(\005:"
    "\002-1\022\021\n\005Point\030\003 \001(\005:\002-1\"^\n\035TreasureRpcTre"
    "asureUnEquipAsk\022\016\n\002Id\030\001 \001(\005:\002-1\022\026\n\nColor"
    "_Type\030\002 \001(\005:\002-1\022\025\n\tTime_Type\030\003 \001(\005:\002-1\"\207"
    "\001\n\037TreasureRpcTreasureUnEquipReply\022\022\n\006Re"
    "sult\030\001 \001(\005:\002-1\022(\n\021TreasureUnequiped\030\002 \001("
    "\0132\r.TreasureData\022&\n\017TreasureEquiped\030\003 \001("
    "\0132\r.TreasureData\"_\n\"TreasureRpcTreasureE"
    "quipedIDNotify\022&\n\nTreasureID\030\001 \001(\0132\022.Tre"
    "asureEquipedID\022\021\n\005ObjID\030\002 \001(\005:\002-1\"`\n\037Tre"
    "asureRpcTreasureDelayTimeAsk\022\016\n\002Id\030\001 \001(\005"
    ":\002-1\022\026\n\nColor_Type\030\002 \001(\005:\002-1\022\025\n\tTime_Typ"
    "e\030\003 \001(\005:\002-1\"t\n!TreasureRpcTreasureDelayT"
    "imeReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\'\n\020Treasure"
    "UnLocked\030\002 \001(\0132\r.TreasureData\022\022\n\006Points\030"
    "\003 \001(\005:\002-1\"\240\001\n$TreasureRpcTreasureUnlockE"
    "quipNotify\022\022\n\006Result\030\001 \001(\005:\002-1\022&\n\017Treasu"
    "reEquiped\030\002 \001(\0132\r.TreasureData\022(\n\021Treasu"
    "reUnequiped\030\003 \001(\0132\r.TreasureData\022\022\n\006Poin"
    "ts\030\004 \001(\005:\002-1", 1732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TreasureRpc.proto", &protobuf_RegisterTypes);
  TreasureRpcTreasureDepotInfoAsk::default_instance_ = new TreasureRpcTreasureDepotInfoAsk();
  TreasureRpcTreasureDepotInfoReply::default_instance_ = new TreasureRpcTreasureDepotInfoReply();
  TreasureRpcTreasureInfoAsk::default_instance_ = new TreasureRpcTreasureInfoAsk();
  TreasureRpcTreasureInfoReply::default_instance_ = new TreasureRpcTreasureInfoReply();
  TreasureRpcTreasureUnlockAsk::default_instance_ = new TreasureRpcTreasureUnlockAsk();
  TreasureRpcTreasureUnlockReply::default_instance_ = new TreasureRpcTreasureUnlockReply();
  TreasureRpcTreasureEquipAsk::default_instance_ = new TreasureRpcTreasureEquipAsk();
  TreasureRpcTreasureEquipReply::default_instance_ = new TreasureRpcTreasureEquipReply();
  TreasureRpcTreasureEquipSycAsk::default_instance_ = new TreasureRpcTreasureEquipSycAsk();
  TreasureRpcTreasureEquipSycReply::default_instance_ = new TreasureRpcTreasureEquipSycReply();
  TreasureRpcTreasureDepotLvUpAsk::default_instance_ = new TreasureRpcTreasureDepotLvUpAsk();
  TreasureRpcTreasureDepotLvUpReply::default_instance_ = new TreasureRpcTreasureDepotLvUpReply();
  TreasureRpcTreasureUnEquipAsk::default_instance_ = new TreasureRpcTreasureUnEquipAsk();
  TreasureRpcTreasureUnEquipReply::default_instance_ = new TreasureRpcTreasureUnEquipReply();
  TreasureRpcTreasureEquipedIDNotify::default_instance_ = new TreasureRpcTreasureEquipedIDNotify();
  TreasureRpcTreasureDelayTimeAsk::default_instance_ = new TreasureRpcTreasureDelayTimeAsk();
  TreasureRpcTreasureDelayTimeReply::default_instance_ = new TreasureRpcTreasureDelayTimeReply();
  TreasureRpcTreasureUnlockEquipNotify::default_instance_ = new TreasureRpcTreasureUnlockEquipNotify();
  TreasureRpcTreasureDepotInfoAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureDepotInfoReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureInfoAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureInfoReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureUnlockAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureUnlockReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureEquipAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureEquipReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureEquipSycAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureEquipSycReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureDepotLvUpAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureDepotLvUpReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureUnEquipAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureUnEquipReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureEquipedIDNotify::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureDelayTimeAsk::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureDelayTimeReply::default_instance_->InitAsDefaultInstance();
  TreasureRpcTreasureUnlockEquipNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TreasureRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TreasureRpc_2eproto {
  StaticDescriptorInitializer_TreasureRpc_2eproto() {
    protobuf_AddDesc_TreasureRpc_2eproto();
  }
} static_descriptor_initializer_TreasureRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TreasureRpcTreasureDepotInfoAsk::TreasureRpcTreasureDepotInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDepotInfoAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureDepotInfoAsk::TreasureRpcTreasureDepotInfoAsk(const TreasureRpcTreasureDepotInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDepotInfoAsk::~TreasureRpcTreasureDepotInfoAsk() {
  SharedDtor();
}

void TreasureRpcTreasureDepotInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureDepotInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDepotInfoAsk_descriptor_;
}

const TreasureRpcTreasureDepotInfoAsk& TreasureRpcTreasureDepotInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDepotInfoAsk* TreasureRpcTreasureDepotInfoAsk::default_instance_ = NULL;

TreasureRpcTreasureDepotInfoAsk* TreasureRpcTreasureDepotInfoAsk::New() const {
  return new TreasureRpcTreasureDepotInfoAsk;
}

void TreasureRpcTreasureDepotInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDepotInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDepotInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDepotInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDepotInfoAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDepotInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDepotInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDepotInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDepotInfoAsk::MergeFrom(const TreasureRpcTreasureDepotInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDepotInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotInfoAsk::CopyFrom(const TreasureRpcTreasureDepotInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDepotInfoAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDepotInfoAsk::Swap(TreasureRpcTreasureDepotInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDepotInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDepotInfoAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureDepotInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureDepotInfoReply::kResultFieldNumber;
const int TreasureRpcTreasureDepotInfoReply::kLevelFieldNumber;
const int TreasureRpcTreasureDepotInfoReply::kPointFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureDepotInfoReply::TreasureRpcTreasureDepotInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDepotInfoReply::InitAsDefaultInstance() {
}

TreasureRpcTreasureDepotInfoReply::TreasureRpcTreasureDepotInfoReply(const TreasureRpcTreasureDepotInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  level_ = 1;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDepotInfoReply::~TreasureRpcTreasureDepotInfoReply() {
  SharedDtor();
}

void TreasureRpcTreasureDepotInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureDepotInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDepotInfoReply_descriptor_;
}

const TreasureRpcTreasureDepotInfoReply& TreasureRpcTreasureDepotInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDepotInfoReply* TreasureRpcTreasureDepotInfoReply::default_instance_ = NULL;

TreasureRpcTreasureDepotInfoReply* TreasureRpcTreasureDepotInfoReply::New() const {
  return new TreasureRpcTreasureDepotInfoReply;
}

void TreasureRpcTreasureDepotInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    level_ = 1;
    point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDepotInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Point;
        break;
      }

      // optional int32 Point = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDepotInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Level = 2 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 Point = 3 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDepotInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Level = 2 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 Point = 3 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDepotInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Level = 2 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Point = 3 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDepotInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDepotInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDepotInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDepotInfoReply::MergeFrom(const TreasureRpcTreasureDepotInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDepotInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotInfoReply::CopyFrom(const TreasureRpcTreasureDepotInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDepotInfoReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDepotInfoReply::Swap(TreasureRpcTreasureDepotInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(level_, other->level_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDepotInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDepotInfoReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureDepotInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureInfoAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureInfoAsk::TreasureRpcTreasureInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureInfoAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureInfoAsk::TreasureRpcTreasureInfoAsk(const TreasureRpcTreasureInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureInfoAsk::~TreasureRpcTreasureInfoAsk() {
  SharedDtor();
}

void TreasureRpcTreasureInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureInfoAsk_descriptor_;
}

const TreasureRpcTreasureInfoAsk& TreasureRpcTreasureInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureInfoAsk* TreasureRpcTreasureInfoAsk::default_instance_ = NULL;

TreasureRpcTreasureInfoAsk* TreasureRpcTreasureInfoAsk::New() const {
  return new TreasureRpcTreasureInfoAsk;
}

void TreasureRpcTreasureInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureInfoAsk::MergeFrom(const TreasureRpcTreasureInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureInfoAsk::CopyFrom(const TreasureRpcTreasureInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureInfoAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureInfoAsk::Swap(TreasureRpcTreasureInfoAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureInfoAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureInfoReply::kResultFieldNumber;
const int TreasureRpcTreasureInfoReply::kTreasureInfoFieldNumber;
const int TreasureRpcTreasureInfoReply::kTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureInfoReply::TreasureRpcTreasureInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureInfoReply::InitAsDefaultInstance() {
}

TreasureRpcTreasureInfoReply::TreasureRpcTreasureInfoReply(const TreasureRpcTreasureInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureInfoReply::~TreasureRpcTreasureInfoReply() {
  SharedDtor();
}

void TreasureRpcTreasureInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureInfoReply_descriptor_;
}

const TreasureRpcTreasureInfoReply& TreasureRpcTreasureInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureInfoReply* TreasureRpcTreasureInfoReply::default_instance_ = NULL;

TreasureRpcTreasureInfoReply* TreasureRpcTreasureInfoReply::New() const {
  return new TreasureRpcTreasureInfoReply;
}

void TreasureRpcTreasureInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    type_ = -1;
  }
  treasure_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Treasure_Info;
        break;
      }

      // repeated .TreasureData Treasure_Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Treasure_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasure_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Treasure_Info;
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional int32 Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .TreasureData Treasure_Info = 2;
  for (int i = 0; i < this->treasure_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasure_info(i), output);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .TreasureData Treasure_Info = 2;
  for (int i = 0; i < this->treasure_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasure_info(i), target);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Type = 3 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .TreasureData Treasure_Info = 2;
  total_size += 1 * this->treasure_info_size();
  for (int i = 0; i < this->treasure_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasure_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureInfoReply::MergeFrom(const TreasureRpcTreasureInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasure_info_.MergeFrom(from.treasure_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureInfoReply::CopyFrom(const TreasureRpcTreasureInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureInfoReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureInfoReply::Swap(TreasureRpcTreasureInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    treasure_info_.Swap(&other->treasure_info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureInfoReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureUnlockAsk::kIdFieldNumber;
const int TreasureRpcTreasureUnlockAsk::kColorTypeFieldNumber;
const int TreasureRpcTreasureUnlockAsk::kTimeTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureUnlockAsk::TreasureRpcTreasureUnlockAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureUnlockAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureUnlockAsk::TreasureRpcTreasureUnlockAsk(const TreasureRpcTreasureUnlockAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  color_type_ = -1;
  time_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureUnlockAsk::~TreasureRpcTreasureUnlockAsk() {
  SharedDtor();
}

void TreasureRpcTreasureUnlockAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureUnlockAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureUnlockAsk_descriptor_;
}

const TreasureRpcTreasureUnlockAsk& TreasureRpcTreasureUnlockAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureUnlockAsk* TreasureRpcTreasureUnlockAsk::default_instance_ = NULL;

TreasureRpcTreasureUnlockAsk* TreasureRpcTreasureUnlockAsk::New() const {
  return new TreasureRpcTreasureUnlockAsk;
}

void TreasureRpcTreasureUnlockAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    color_type_ = -1;
    time_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureUnlockAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Color_Type;
        break;
      }

      // optional int32 Color_Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time_Type;
        break;
      }

      // optional int32 Time_Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureUnlockAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_type(), output);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureUnlockAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_type(), target);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureUnlockAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Color_Type = 2 [default = -1];
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 Time_Type = 3 [default = -1];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureUnlockAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureUnlockAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureUnlockAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureUnlockAsk::MergeFrom(const TreasureRpcTreasureUnlockAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureUnlockAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockAsk::CopyFrom(const TreasureRpcTreasureUnlockAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureUnlockAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureUnlockAsk::Swap(TreasureRpcTreasureUnlockAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(color_type_, other->color_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureUnlockAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureUnlockAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureUnlockAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureUnlockReply::kResultFieldNumber;
const int TreasureRpcTreasureUnlockReply::kTreasureUnLockedFieldNumber;
const int TreasureRpcTreasureUnlockReply::kPointsFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureUnlockReply::TreasureRpcTreasureUnlockReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureUnlockReply::InitAsDefaultInstance() {
  treasureunlocked_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
}

TreasureRpcTreasureUnlockReply::TreasureRpcTreasureUnlockReply(const TreasureRpcTreasureUnlockReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasureunlocked_ = NULL;
  points_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureUnlockReply::~TreasureRpcTreasureUnlockReply() {
  SharedDtor();
}

void TreasureRpcTreasureUnlockReply::SharedDtor() {
  if (this != default_instance_) {
    delete treasureunlocked_;
  }
}

void TreasureRpcTreasureUnlockReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureUnlockReply_descriptor_;
}

const TreasureRpcTreasureUnlockReply& TreasureRpcTreasureUnlockReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureUnlockReply* TreasureRpcTreasureUnlockReply::default_instance_ = NULL;

TreasureRpcTreasureUnlockReply* TreasureRpcTreasureUnlockReply::New() const {
  return new TreasureRpcTreasureUnlockReply;
}

void TreasureRpcTreasureUnlockReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_treasureunlocked()) {
      if (treasureunlocked_ != NULL) treasureunlocked_->::TreasureData::Clear();
    }
    points_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureUnlockReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasureUnLocked;
        break;
      }

      // optional .TreasureData TreasureUnLocked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureUnLocked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureunlocked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Points;
        break;
      }

      // optional int32 Points = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureUnlockReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TreasureData TreasureUnLocked = 2;
  if (has_treasureunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasureunlocked(), output);
  }

  // optional int32 Points = 3 [default = -1];
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureUnlockReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TreasureData TreasureUnLocked = 2;
  if (has_treasureunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasureunlocked(), target);
  }

  // optional int32 Points = 3 [default = -1];
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureUnlockReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TreasureData TreasureUnLocked = 2;
    if (has_treasureunlocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureunlocked());
    }

    // optional int32 Points = 3 [default = -1];
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureUnlockReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureUnlockReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureUnlockReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureUnlockReply::MergeFrom(const TreasureRpcTreasureUnlockReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasureunlocked()) {
      mutable_treasureunlocked()->::TreasureData::MergeFrom(from.treasureunlocked());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureUnlockReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockReply::CopyFrom(const TreasureRpcTreasureUnlockReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureUnlockReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureUnlockReply::Swap(TreasureRpcTreasureUnlockReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasureunlocked_, other->treasureunlocked_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureUnlockReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureUnlockReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureUnlockReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureEquipAsk::kIdFieldNumber;
const int TreasureRpcTreasureEquipAsk::kColorTypeFieldNumber;
const int TreasureRpcTreasureEquipAsk::kTimeTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureEquipAsk::TreasureRpcTreasureEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureEquipAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureEquipAsk::TreasureRpcTreasureEquipAsk(const TreasureRpcTreasureEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  color_type_ = -1;
  time_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureEquipAsk::~TreasureRpcTreasureEquipAsk() {
  SharedDtor();
}

void TreasureRpcTreasureEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureEquipAsk_descriptor_;
}

const TreasureRpcTreasureEquipAsk& TreasureRpcTreasureEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureEquipAsk* TreasureRpcTreasureEquipAsk::default_instance_ = NULL;

TreasureRpcTreasureEquipAsk* TreasureRpcTreasureEquipAsk::New() const {
  return new TreasureRpcTreasureEquipAsk;
}

void TreasureRpcTreasureEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    color_type_ = -1;
    time_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Color_Type;
        break;
      }

      // optional int32 Color_Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time_Type;
        break;
      }

      // optional int32 Time_Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_type(), output);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_type(), target);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureEquipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Color_Type = 2 [default = -1];
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 Time_Type = 3 [default = -1];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureEquipAsk::MergeFrom(const TreasureRpcTreasureEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipAsk::CopyFrom(const TreasureRpcTreasureEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureEquipAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureEquipAsk::Swap(TreasureRpcTreasureEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(color_type_, other->color_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureEquipAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureEquipReply::kResultFieldNumber;
const int TreasureRpcTreasureEquipReply::kTreasureEquipedFieldNumber;
const int TreasureRpcTreasureEquipReply::kTreasureUnequipedFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureEquipReply::TreasureRpcTreasureEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureEquipReply::InitAsDefaultInstance() {
  treasureequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
  treasureunequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
}

TreasureRpcTreasureEquipReply::TreasureRpcTreasureEquipReply(const TreasureRpcTreasureEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasureequiped_ = NULL;
  treasureunequiped_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureEquipReply::~TreasureRpcTreasureEquipReply() {
  SharedDtor();
}

void TreasureRpcTreasureEquipReply::SharedDtor() {
  if (this != default_instance_) {
    delete treasureequiped_;
    delete treasureunequiped_;
  }
}

void TreasureRpcTreasureEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureEquipReply_descriptor_;
}

const TreasureRpcTreasureEquipReply& TreasureRpcTreasureEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureEquipReply* TreasureRpcTreasureEquipReply::default_instance_ = NULL;

TreasureRpcTreasureEquipReply* TreasureRpcTreasureEquipReply::New() const {
  return new TreasureRpcTreasureEquipReply;
}

void TreasureRpcTreasureEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_treasureequiped()) {
      if (treasureequiped_ != NULL) treasureequiped_->::TreasureData::Clear();
    }
    if (has_treasureunequiped()) {
      if (treasureunequiped_ != NULL) treasureunequiped_->::TreasureData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasureEquiped;
        break;
      }

      // optional .TreasureData TreasureEquiped = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureEquiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TreasureUnequiped;
        break;
      }

      // optional .TreasureData TreasureUnequiped = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureUnequiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureunequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TreasureData TreasureEquiped = 2;
  if (has_treasureequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasureequiped(), output);
  }

  // optional .TreasureData TreasureUnequiped = 4;
  if (has_treasureunequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->treasureunequiped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TreasureData TreasureEquiped = 2;
  if (has_treasureequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasureequiped(), target);
  }

  // optional .TreasureData TreasureUnequiped = 4;
  if (has_treasureunequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->treasureunequiped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TreasureData TreasureEquiped = 2;
    if (has_treasureequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureequiped());
    }

    // optional .TreasureData TreasureUnequiped = 4;
    if (has_treasureunequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureunequiped());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureEquipReply::MergeFrom(const TreasureRpcTreasureEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasureequiped()) {
      mutable_treasureequiped()->::TreasureData::MergeFrom(from.treasureequiped());
    }
    if (from.has_treasureunequiped()) {
      mutable_treasureunequiped()->::TreasureData::MergeFrom(from.treasureunequiped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipReply::CopyFrom(const TreasureRpcTreasureEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureEquipReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureEquipReply::Swap(TreasureRpcTreasureEquipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasureequiped_, other->treasureequiped_);
    std::swap(treasureunequiped_, other->treasureunequiped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureEquipReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TreasureRpcTreasureEquipSycAsk::TreasureRpcTreasureEquipSycAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureEquipSycAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureEquipSycAsk::TreasureRpcTreasureEquipSycAsk(const TreasureRpcTreasureEquipSycAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipSycAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureEquipSycAsk::~TreasureRpcTreasureEquipSycAsk() {
  SharedDtor();
}

void TreasureRpcTreasureEquipSycAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureEquipSycAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipSycAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureEquipSycAsk_descriptor_;
}

const TreasureRpcTreasureEquipSycAsk& TreasureRpcTreasureEquipSycAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureEquipSycAsk* TreasureRpcTreasureEquipSycAsk::default_instance_ = NULL;

TreasureRpcTreasureEquipSycAsk* TreasureRpcTreasureEquipSycAsk::New() const {
  return new TreasureRpcTreasureEquipSycAsk;
}

void TreasureRpcTreasureEquipSycAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureEquipSycAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureEquipSycAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureEquipSycAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureEquipSycAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureEquipSycAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureEquipSycAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureEquipSycAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureEquipSycAsk::MergeFrom(const TreasureRpcTreasureEquipSycAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureEquipSycAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipSycAsk::CopyFrom(const TreasureRpcTreasureEquipSycAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureEquipSycAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureEquipSycAsk::Swap(TreasureRpcTreasureEquipSycAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureEquipSycAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureEquipSycAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureEquipSycAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureEquipSycReply::kResultFieldNumber;
const int TreasureRpcTreasureEquipSycReply::kTreasueEquipedFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureEquipSycReply::TreasureRpcTreasureEquipSycReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureEquipSycReply::InitAsDefaultInstance() {
}

TreasureRpcTreasureEquipSycReply::TreasureRpcTreasureEquipSycReply(const TreasureRpcTreasureEquipSycReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipSycReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureEquipSycReply::~TreasureRpcTreasureEquipSycReply() {
  SharedDtor();
}

void TreasureRpcTreasureEquipSycReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureEquipSycReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipSycReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureEquipSycReply_descriptor_;
}

const TreasureRpcTreasureEquipSycReply& TreasureRpcTreasureEquipSycReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureEquipSycReply* TreasureRpcTreasureEquipSycReply::default_instance_ = NULL;

TreasureRpcTreasureEquipSycReply* TreasureRpcTreasureEquipSycReply::New() const {
  return new TreasureRpcTreasureEquipSycReply;
}

void TreasureRpcTreasureEquipSycReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  treasueequiped_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureEquipSycReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasueEquiped;
        break;
      }

      // repeated .TreasureData TreasueEquiped = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasueEquiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasueequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasueEquiped;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureEquipSycReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .TreasureData TreasueEquiped = 2;
  for (int i = 0; i < this->treasueequiped_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasueequiped(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureEquipSycReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .TreasureData TreasueEquiped = 2;
  for (int i = 0; i < this->treasueequiped_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasueequiped(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureEquipSycReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .TreasureData TreasueEquiped = 2;
  total_size += 1 * this->treasueequiped_size();
  for (int i = 0; i < this->treasueequiped_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasueequiped(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureEquipSycReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureEquipSycReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureEquipSycReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureEquipSycReply::MergeFrom(const TreasureRpcTreasureEquipSycReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasueequiped_.MergeFrom(from.treasueequiped_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureEquipSycReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipSycReply::CopyFrom(const TreasureRpcTreasureEquipSycReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureEquipSycReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureEquipSycReply::Swap(TreasureRpcTreasureEquipSycReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    treasueequiped_.Swap(&other->treasueequiped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureEquipSycReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureEquipSycReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureEquipSycReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TreasureRpcTreasureDepotLvUpAsk::TreasureRpcTreasureDepotLvUpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDepotLvUpAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureDepotLvUpAsk::TreasureRpcTreasureDepotLvUpAsk(const TreasureRpcTreasureDepotLvUpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotLvUpAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDepotLvUpAsk::~TreasureRpcTreasureDepotLvUpAsk() {
  SharedDtor();
}

void TreasureRpcTreasureDepotLvUpAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureDepotLvUpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotLvUpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDepotLvUpAsk_descriptor_;
}

const TreasureRpcTreasureDepotLvUpAsk& TreasureRpcTreasureDepotLvUpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDepotLvUpAsk* TreasureRpcTreasureDepotLvUpAsk::default_instance_ = NULL;

TreasureRpcTreasureDepotLvUpAsk* TreasureRpcTreasureDepotLvUpAsk::New() const {
  return new TreasureRpcTreasureDepotLvUpAsk;
}

void TreasureRpcTreasureDepotLvUpAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDepotLvUpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDepotLvUpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDepotLvUpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDepotLvUpAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDepotLvUpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDepotLvUpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDepotLvUpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDepotLvUpAsk::MergeFrom(const TreasureRpcTreasureDepotLvUpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDepotLvUpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotLvUpAsk::CopyFrom(const TreasureRpcTreasureDepotLvUpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDepotLvUpAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDepotLvUpAsk::Swap(TreasureRpcTreasureDepotLvUpAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDepotLvUpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDepotLvUpAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureDepotLvUpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureDepotLvUpReply::kResultFieldNumber;
const int TreasureRpcTreasureDepotLvUpReply::kLevelFieldNumber;
const int TreasureRpcTreasureDepotLvUpReply::kPointFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureDepotLvUpReply::TreasureRpcTreasureDepotLvUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDepotLvUpReply::InitAsDefaultInstance() {
}

TreasureRpcTreasureDepotLvUpReply::TreasureRpcTreasureDepotLvUpReply(const TreasureRpcTreasureDepotLvUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotLvUpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  level_ = -1;
  point_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDepotLvUpReply::~TreasureRpcTreasureDepotLvUpReply() {
  SharedDtor();
}

void TreasureRpcTreasureDepotLvUpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureDepotLvUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDepotLvUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDepotLvUpReply_descriptor_;
}

const TreasureRpcTreasureDepotLvUpReply& TreasureRpcTreasureDepotLvUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDepotLvUpReply* TreasureRpcTreasureDepotLvUpReply::default_instance_ = NULL;

TreasureRpcTreasureDepotLvUpReply* TreasureRpcTreasureDepotLvUpReply::New() const {
  return new TreasureRpcTreasureDepotLvUpReply;
}

void TreasureRpcTreasureDepotLvUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    level_ = -1;
    point_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDepotLvUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Point;
        break;
      }

      // optional int32 Point = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDepotLvUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 Point = 3 [default = -1];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDepotLvUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 Point = 3 [default = -1];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDepotLvUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Level = 2 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Point = 3 [default = -1];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDepotLvUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDepotLvUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDepotLvUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDepotLvUpReply::MergeFrom(const TreasureRpcTreasureDepotLvUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDepotLvUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDepotLvUpReply::CopyFrom(const TreasureRpcTreasureDepotLvUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDepotLvUpReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDepotLvUpReply::Swap(TreasureRpcTreasureDepotLvUpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(level_, other->level_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDepotLvUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDepotLvUpReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureDepotLvUpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureUnEquipAsk::kIdFieldNumber;
const int TreasureRpcTreasureUnEquipAsk::kColorTypeFieldNumber;
const int TreasureRpcTreasureUnEquipAsk::kTimeTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureUnEquipAsk::TreasureRpcTreasureUnEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureUnEquipAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureUnEquipAsk::TreasureRpcTreasureUnEquipAsk(const TreasureRpcTreasureUnEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureUnEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  color_type_ = -1;
  time_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureUnEquipAsk::~TreasureRpcTreasureUnEquipAsk() {
  SharedDtor();
}

void TreasureRpcTreasureUnEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureUnEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureUnEquipAsk_descriptor_;
}

const TreasureRpcTreasureUnEquipAsk& TreasureRpcTreasureUnEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureUnEquipAsk* TreasureRpcTreasureUnEquipAsk::default_instance_ = NULL;

TreasureRpcTreasureUnEquipAsk* TreasureRpcTreasureUnEquipAsk::New() const {
  return new TreasureRpcTreasureUnEquipAsk;
}

void TreasureRpcTreasureUnEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    color_type_ = -1;
    time_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureUnEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Color_Type;
        break;
      }

      // optional int32 Color_Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time_Type;
        break;
      }

      // optional int32 Time_Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureUnEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_type(), output);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureUnEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_type(), target);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureUnEquipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Color_Type = 2 [default = -1];
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 Time_Type = 3 [default = -1];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureUnEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureUnEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureUnEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureUnEquipAsk::MergeFrom(const TreasureRpcTreasureUnEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureUnEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureUnEquipAsk::CopyFrom(const TreasureRpcTreasureUnEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureUnEquipAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureUnEquipAsk::Swap(TreasureRpcTreasureUnEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(color_type_, other->color_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureUnEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureUnEquipAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureUnEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureUnEquipReply::kResultFieldNumber;
const int TreasureRpcTreasureUnEquipReply::kTreasureUnequipedFieldNumber;
const int TreasureRpcTreasureUnEquipReply::kTreasureEquipedFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureUnEquipReply::TreasureRpcTreasureUnEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureUnEquipReply::InitAsDefaultInstance() {
  treasureunequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
  treasureequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
}

TreasureRpcTreasureUnEquipReply::TreasureRpcTreasureUnEquipReply(const TreasureRpcTreasureUnEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureUnEquipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasureunequiped_ = NULL;
  treasureequiped_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureUnEquipReply::~TreasureRpcTreasureUnEquipReply() {
  SharedDtor();
}

void TreasureRpcTreasureUnEquipReply::SharedDtor() {
  if (this != default_instance_) {
    delete treasureunequiped_;
    delete treasureequiped_;
  }
}

void TreasureRpcTreasureUnEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureUnEquipReply_descriptor_;
}

const TreasureRpcTreasureUnEquipReply& TreasureRpcTreasureUnEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureUnEquipReply* TreasureRpcTreasureUnEquipReply::default_instance_ = NULL;

TreasureRpcTreasureUnEquipReply* TreasureRpcTreasureUnEquipReply::New() const {
  return new TreasureRpcTreasureUnEquipReply;
}

void TreasureRpcTreasureUnEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_treasureunequiped()) {
      if (treasureunequiped_ != NULL) treasureunequiped_->::TreasureData::Clear();
    }
    if (has_treasureequiped()) {
      if (treasureequiped_ != NULL) treasureequiped_->::TreasureData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureUnEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasureUnequiped;
        break;
      }

      // optional .TreasureData TreasureUnequiped = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureUnequiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureunequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TreasureEquiped;
        break;
      }

      // optional .TreasureData TreasureEquiped = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureEquiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureUnEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TreasureData TreasureUnequiped = 2;
  if (has_treasureunequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasureunequiped(), output);
  }

  // optional .TreasureData TreasureEquiped = 3;
  if (has_treasureequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->treasureequiped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureUnEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TreasureData TreasureUnequiped = 2;
  if (has_treasureunequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasureunequiped(), target);
  }

  // optional .TreasureData TreasureEquiped = 3;
  if (has_treasureequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->treasureequiped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureUnEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TreasureData TreasureUnequiped = 2;
    if (has_treasureunequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureunequiped());
    }

    // optional .TreasureData TreasureEquiped = 3;
    if (has_treasureequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureequiped());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureUnEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureUnEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureUnEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureUnEquipReply::MergeFrom(const TreasureRpcTreasureUnEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasureunequiped()) {
      mutable_treasureunequiped()->::TreasureData::MergeFrom(from.treasureunequiped());
    }
    if (from.has_treasureequiped()) {
      mutable_treasureequiped()->::TreasureData::MergeFrom(from.treasureequiped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureUnEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureUnEquipReply::CopyFrom(const TreasureRpcTreasureUnEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureUnEquipReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureUnEquipReply::Swap(TreasureRpcTreasureUnEquipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasureunequiped_, other->treasureunequiped_);
    std::swap(treasureequiped_, other->treasureequiped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureUnEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureUnEquipReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureUnEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureEquipedIDNotify::kTreasureIDFieldNumber;
const int TreasureRpcTreasureEquipedIDNotify::kObjIDFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureEquipedIDNotify::TreasureRpcTreasureEquipedIDNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureEquipedIDNotify::InitAsDefaultInstance() {
  treasureid_ = const_cast< ::TreasureEquipedID*>(&::TreasureEquipedID::default_instance());
}

TreasureRpcTreasureEquipedIDNotify::TreasureRpcTreasureEquipedIDNotify(const TreasureRpcTreasureEquipedIDNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipedIDNotify::SharedCtor() {
  _cached_size_ = 0;
  treasureid_ = NULL;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureEquipedIDNotify::~TreasureRpcTreasureEquipedIDNotify() {
  SharedDtor();
}

void TreasureRpcTreasureEquipedIDNotify::SharedDtor() {
  if (this != default_instance_) {
    delete treasureid_;
  }
}

void TreasureRpcTreasureEquipedIDNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureEquipedIDNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureEquipedIDNotify_descriptor_;
}

const TreasureRpcTreasureEquipedIDNotify& TreasureRpcTreasureEquipedIDNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureEquipedIDNotify* TreasureRpcTreasureEquipedIDNotify::default_instance_ = NULL;

TreasureRpcTreasureEquipedIDNotify* TreasureRpcTreasureEquipedIDNotify::New() const {
  return new TreasureRpcTreasureEquipedIDNotify;
}

void TreasureRpcTreasureEquipedIDNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_treasureid()) {
      if (treasureid_ != NULL) treasureid_->::TreasureEquipedID::Clear();
    }
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureEquipedIDNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TreasureEquipedID TreasureID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ObjID;
        break;
      }

      // optional int32 ObjID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureEquipedIDNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TreasureEquipedID TreasureID = 1;
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasureid(), output);
  }

  // optional int32 ObjID = 2 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureEquipedIDNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TreasureEquipedID TreasureID = 1;
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasureid(), target);
  }

  // optional int32 ObjID = 2 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureEquipedIDNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TreasureEquipedID TreasureID = 1;
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureid());
    }

    // optional int32 ObjID = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureEquipedIDNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureEquipedIDNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureEquipedIDNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureEquipedIDNotify::MergeFrom(const TreasureRpcTreasureEquipedIDNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasureid()) {
      mutable_treasureid()->::TreasureEquipedID::MergeFrom(from.treasureid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureEquipedIDNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureEquipedIDNotify::CopyFrom(const TreasureRpcTreasureEquipedIDNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureEquipedIDNotify::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureEquipedIDNotify::Swap(TreasureRpcTreasureEquipedIDNotify* other) {
  if (other != this) {
    std::swap(treasureid_, other->treasureid_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureEquipedIDNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureEquipedIDNotify_descriptor_;
  metadata.reflection = TreasureRpcTreasureEquipedIDNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureDelayTimeAsk::kIdFieldNumber;
const int TreasureRpcTreasureDelayTimeAsk::kColorTypeFieldNumber;
const int TreasureRpcTreasureDelayTimeAsk::kTimeTypeFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureDelayTimeAsk::TreasureRpcTreasureDelayTimeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDelayTimeAsk::InitAsDefaultInstance() {
}

TreasureRpcTreasureDelayTimeAsk::TreasureRpcTreasureDelayTimeAsk(const TreasureRpcTreasureDelayTimeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDelayTimeAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  color_type_ = -1;
  time_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDelayTimeAsk::~TreasureRpcTreasureDelayTimeAsk() {
  SharedDtor();
}

void TreasureRpcTreasureDelayTimeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureRpcTreasureDelayTimeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDelayTimeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDelayTimeAsk_descriptor_;
}

const TreasureRpcTreasureDelayTimeAsk& TreasureRpcTreasureDelayTimeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDelayTimeAsk* TreasureRpcTreasureDelayTimeAsk::default_instance_ = NULL;

TreasureRpcTreasureDelayTimeAsk* TreasureRpcTreasureDelayTimeAsk::New() const {
  return new TreasureRpcTreasureDelayTimeAsk;
}

void TreasureRpcTreasureDelayTimeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    color_type_ = -1;
    time_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDelayTimeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Color_Type;
        break;
      }

      // optional int32 Color_Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time_Type;
        break;
      }

      // optional int32 Time_Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDelayTimeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_type(), output);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDelayTimeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Color_Type = 2 [default = -1];
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_type(), target);
  }

  // optional int32 Time_Type = 3 [default = -1];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDelayTimeAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Color_Type = 2 [default = -1];
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 Time_Type = 3 [default = -1];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDelayTimeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDelayTimeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDelayTimeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDelayTimeAsk::MergeFrom(const TreasureRpcTreasureDelayTimeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDelayTimeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDelayTimeAsk::CopyFrom(const TreasureRpcTreasureDelayTimeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDelayTimeAsk::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDelayTimeAsk::Swap(TreasureRpcTreasureDelayTimeAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(color_type_, other->color_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDelayTimeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDelayTimeAsk_descriptor_;
  metadata.reflection = TreasureRpcTreasureDelayTimeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureDelayTimeReply::kResultFieldNumber;
const int TreasureRpcTreasureDelayTimeReply::kTreasureUnLockedFieldNumber;
const int TreasureRpcTreasureDelayTimeReply::kPointsFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureDelayTimeReply::TreasureRpcTreasureDelayTimeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureDelayTimeReply::InitAsDefaultInstance() {
  treasureunlocked_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
}

TreasureRpcTreasureDelayTimeReply::TreasureRpcTreasureDelayTimeReply(const TreasureRpcTreasureDelayTimeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureDelayTimeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasureunlocked_ = NULL;
  points_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureDelayTimeReply::~TreasureRpcTreasureDelayTimeReply() {
  SharedDtor();
}

void TreasureRpcTreasureDelayTimeReply::SharedDtor() {
  if (this != default_instance_) {
    delete treasureunlocked_;
  }
}

void TreasureRpcTreasureDelayTimeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureDelayTimeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureDelayTimeReply_descriptor_;
}

const TreasureRpcTreasureDelayTimeReply& TreasureRpcTreasureDelayTimeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureDelayTimeReply* TreasureRpcTreasureDelayTimeReply::default_instance_ = NULL;

TreasureRpcTreasureDelayTimeReply* TreasureRpcTreasureDelayTimeReply::New() const {
  return new TreasureRpcTreasureDelayTimeReply;
}

void TreasureRpcTreasureDelayTimeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_treasureunlocked()) {
      if (treasureunlocked_ != NULL) treasureunlocked_->::TreasureData::Clear();
    }
    points_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureDelayTimeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasureUnLocked;
        break;
      }

      // optional .TreasureData TreasureUnLocked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureUnLocked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureunlocked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Points;
        break;
      }

      // optional int32 Points = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureDelayTimeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TreasureData TreasureUnLocked = 2;
  if (has_treasureunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasureunlocked(), output);
  }

  // optional int32 Points = 3 [default = -1];
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureDelayTimeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TreasureData TreasureUnLocked = 2;
  if (has_treasureunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasureunlocked(), target);
  }

  // optional int32 Points = 3 [default = -1];
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureDelayTimeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TreasureData TreasureUnLocked = 2;
    if (has_treasureunlocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureunlocked());
    }

    // optional int32 Points = 3 [default = -1];
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureDelayTimeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureDelayTimeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureDelayTimeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureDelayTimeReply::MergeFrom(const TreasureRpcTreasureDelayTimeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasureunlocked()) {
      mutable_treasureunlocked()->::TreasureData::MergeFrom(from.treasureunlocked());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureDelayTimeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureDelayTimeReply::CopyFrom(const TreasureRpcTreasureDelayTimeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureDelayTimeReply::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureDelayTimeReply::Swap(TreasureRpcTreasureDelayTimeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasureunlocked_, other->treasureunlocked_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureDelayTimeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureDelayTimeReply_descriptor_;
  metadata.reflection = TreasureRpcTreasureDelayTimeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureRpcTreasureUnlockEquipNotify::kResultFieldNumber;
const int TreasureRpcTreasureUnlockEquipNotify::kTreasureEquipedFieldNumber;
const int TreasureRpcTreasureUnlockEquipNotify::kTreasureUnequipedFieldNumber;
const int TreasureRpcTreasureUnlockEquipNotify::kPointsFieldNumber;
#endif  // !_MSC_VER

TreasureRpcTreasureUnlockEquipNotify::TreasureRpcTreasureUnlockEquipNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureRpcTreasureUnlockEquipNotify::InitAsDefaultInstance() {
  treasureequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
  treasureunequiped_ = const_cast< ::TreasureData*>(&::TreasureData::default_instance());
}

TreasureRpcTreasureUnlockEquipNotify::TreasureRpcTreasureUnlockEquipNotify(const TreasureRpcTreasureUnlockEquipNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockEquipNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasureequiped_ = NULL;
  treasureunequiped_ = NULL;
  points_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureRpcTreasureUnlockEquipNotify::~TreasureRpcTreasureUnlockEquipNotify() {
  SharedDtor();
}

void TreasureRpcTreasureUnlockEquipNotify::SharedDtor() {
  if (this != default_instance_) {
    delete treasureequiped_;
    delete treasureunequiped_;
  }
}

void TreasureRpcTreasureUnlockEquipNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureRpcTreasureUnlockEquipNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureRpcTreasureUnlockEquipNotify_descriptor_;
}

const TreasureRpcTreasureUnlockEquipNotify& TreasureRpcTreasureUnlockEquipNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureRpc_2eproto();
  return *default_instance_;
}

TreasureRpcTreasureUnlockEquipNotify* TreasureRpcTreasureUnlockEquipNotify::default_instance_ = NULL;

TreasureRpcTreasureUnlockEquipNotify* TreasureRpcTreasureUnlockEquipNotify::New() const {
  return new TreasureRpcTreasureUnlockEquipNotify;
}

void TreasureRpcTreasureUnlockEquipNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_treasureequiped()) {
      if (treasureequiped_ != NULL) treasureequiped_->::TreasureData::Clear();
    }
    if (has_treasureunequiped()) {
      if (treasureunequiped_ != NULL) treasureunequiped_->::TreasureData::Clear();
    }
    points_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureRpcTreasureUnlockEquipNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TreasureEquiped;
        break;
      }

      // optional .TreasureData TreasureEquiped = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureEquiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TreasureUnequiped;
        break;
      }

      // optional .TreasureData TreasureUnequiped = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureUnequiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureunequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Points;
        break;
      }

      // optional int32 Points = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureRpcTreasureUnlockEquipNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TreasureData TreasureEquiped = 2;
  if (has_treasureequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasureequiped(), output);
  }

  // optional .TreasureData TreasureUnequiped = 3;
  if (has_treasureunequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->treasureunequiped(), output);
  }

  // optional int32 Points = 4 [default = -1];
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureRpcTreasureUnlockEquipNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TreasureData TreasureEquiped = 2;
  if (has_treasureequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasureequiped(), target);
  }

  // optional .TreasureData TreasureUnequiped = 3;
  if (has_treasureunequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->treasureunequiped(), target);
  }

  // optional int32 Points = 4 [default = -1];
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureRpcTreasureUnlockEquipNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TreasureData TreasureEquiped = 2;
    if (has_treasureequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureequiped());
    }

    // optional .TreasureData TreasureUnequiped = 3;
    if (has_treasureunequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureunequiped());
    }

    // optional int32 Points = 4 [default = -1];
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureRpcTreasureUnlockEquipNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureRpcTreasureUnlockEquipNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureRpcTreasureUnlockEquipNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureRpcTreasureUnlockEquipNotify::MergeFrom(const TreasureRpcTreasureUnlockEquipNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasureequiped()) {
      mutable_treasureequiped()->::TreasureData::MergeFrom(from.treasureequiped());
    }
    if (from.has_treasureunequiped()) {
      mutable_treasureunequiped()->::TreasureData::MergeFrom(from.treasureunequiped());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureRpcTreasureUnlockEquipNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureRpcTreasureUnlockEquipNotify::CopyFrom(const TreasureRpcTreasureUnlockEquipNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureRpcTreasureUnlockEquipNotify::IsInitialized() const {

  return true;
}

void TreasureRpcTreasureUnlockEquipNotify::Swap(TreasureRpcTreasureUnlockEquipNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasureequiped_, other->treasureequiped_);
    std::swap(treasureunequiped_, other->treasureunequiped_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureRpcTreasureUnlockEquipNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureRpcTreasureUnlockEquipNotify_descriptor_;
  metadata.reflection = TreasureRpcTreasureUnlockEquipNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
