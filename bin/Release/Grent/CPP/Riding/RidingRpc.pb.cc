// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RidingRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RidingRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RidingRpcRidingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidingRpcRidingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* RidingRpcRidingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidingRpcRidingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RidingRpcUnRidingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidingRpcUnRidingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* RidingRpcUnRidingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidingRpcUnRidingReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RidingRpc_2eproto() {
  protobuf_AddDesc_RidingRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RidingRpc.proto");
  GOOGLE_CHECK(file != NULL);
  RidingRpcRidingAsk_descriptor_ = file->message_type(0);
  static const int RidingRpcRidingAsk_offsets_[1] = {
  };
  RidingRpcRidingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidingRpcRidingAsk_descriptor_,
      RidingRpcRidingAsk::default_instance_,
      RidingRpcRidingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcRidingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcRidingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidingRpcRidingAsk));
  RidingRpcRidingReply_descriptor_ = file->message_type(1);
  static const int RidingRpcRidingReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcRidingReply, result_),
  };
  RidingRpcRidingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidingRpcRidingReply_descriptor_,
      RidingRpcRidingReply::default_instance_,
      RidingRpcRidingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcRidingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcRidingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidingRpcRidingReply));
  RidingRpcUnRidingAsk_descriptor_ = file->message_type(2);
  static const int RidingRpcUnRidingAsk_offsets_[1] = {
  };
  RidingRpcUnRidingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidingRpcUnRidingAsk_descriptor_,
      RidingRpcUnRidingAsk::default_instance_,
      RidingRpcUnRidingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcUnRidingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcUnRidingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidingRpcUnRidingAsk));
  RidingRpcUnRidingReply_descriptor_ = file->message_type(3);
  static const int RidingRpcUnRidingReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcUnRidingReply, result_),
  };
  RidingRpcUnRidingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidingRpcUnRidingReply_descriptor_,
      RidingRpcUnRidingReply::default_instance_,
      RidingRpcUnRidingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcUnRidingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidingRpcUnRidingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidingRpcUnRidingReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RidingRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidingRpcRidingAsk_descriptor_, &RidingRpcRidingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidingRpcRidingReply_descriptor_, &RidingRpcRidingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidingRpcUnRidingAsk_descriptor_, &RidingRpcUnRidingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidingRpcUnRidingReply_descriptor_, &RidingRpcUnRidingReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RidingRpc_2eproto() {
  delete RidingRpcRidingAsk::default_instance_;
  delete RidingRpcRidingAsk_reflection_;
  delete RidingRpcRidingReply::default_instance_;
  delete RidingRpcRidingReply_reflection_;
  delete RidingRpcUnRidingAsk::default_instance_;
  delete RidingRpcUnRidingAsk_reflection_;
  delete RidingRpcUnRidingReply::default_instance_;
  delete RidingRpcUnRidingReply_reflection_;
}

void protobuf_AddDesc_RidingRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RidingRpc.proto\032\022PublicStruct.proto\"\024\n"
    "\022RidingRpcRidingAsk\"*\n\024RidingRpcRidingRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\"\026\n\024RidingRpcUnRi"
    "dingAsk\",\n\026RidingRpcUnRidingReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RidingRpc.proto", &protobuf_RegisterTypes);
  RidingRpcRidingAsk::default_instance_ = new RidingRpcRidingAsk();
  RidingRpcRidingReply::default_instance_ = new RidingRpcRidingReply();
  RidingRpcUnRidingAsk::default_instance_ = new RidingRpcUnRidingAsk();
  RidingRpcUnRidingReply::default_instance_ = new RidingRpcUnRidingReply();
  RidingRpcRidingAsk::default_instance_->InitAsDefaultInstance();
  RidingRpcRidingReply::default_instance_->InitAsDefaultInstance();
  RidingRpcUnRidingAsk::default_instance_->InitAsDefaultInstance();
  RidingRpcUnRidingReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RidingRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RidingRpc_2eproto {
  StaticDescriptorInitializer_RidingRpc_2eproto() {
    protobuf_AddDesc_RidingRpc_2eproto();
  }
} static_descriptor_initializer_RidingRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RidingRpcRidingAsk::RidingRpcRidingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidingRpcRidingAsk::InitAsDefaultInstance() {
}

RidingRpcRidingAsk::RidingRpcRidingAsk(const RidingRpcRidingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidingRpcRidingAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidingRpcRidingAsk::~RidingRpcRidingAsk() {
  SharedDtor();
}

void RidingRpcRidingAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RidingRpcRidingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidingRpcRidingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidingRpcRidingAsk_descriptor_;
}

const RidingRpcRidingAsk& RidingRpcRidingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidingRpc_2eproto();
  return *default_instance_;
}

RidingRpcRidingAsk* RidingRpcRidingAsk::default_instance_ = NULL;

RidingRpcRidingAsk* RidingRpcRidingAsk::New() const {
  return new RidingRpcRidingAsk;
}

void RidingRpcRidingAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidingRpcRidingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RidingRpcRidingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidingRpcRidingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidingRpcRidingAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidingRpcRidingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidingRpcRidingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidingRpcRidingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidingRpcRidingAsk::MergeFrom(const RidingRpcRidingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidingRpcRidingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidingRpcRidingAsk::CopyFrom(const RidingRpcRidingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidingRpcRidingAsk::IsInitialized() const {

  return true;
}

void RidingRpcRidingAsk::Swap(RidingRpcRidingAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidingRpcRidingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidingRpcRidingAsk_descriptor_;
  metadata.reflection = RidingRpcRidingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RidingRpcRidingReply::kResultFieldNumber;
#endif  // !_MSC_VER

RidingRpcRidingReply::RidingRpcRidingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidingRpcRidingReply::InitAsDefaultInstance() {
}

RidingRpcRidingReply::RidingRpcRidingReply(const RidingRpcRidingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidingRpcRidingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidingRpcRidingReply::~RidingRpcRidingReply() {
  SharedDtor();
}

void RidingRpcRidingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RidingRpcRidingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidingRpcRidingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidingRpcRidingReply_descriptor_;
}

const RidingRpcRidingReply& RidingRpcRidingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidingRpc_2eproto();
  return *default_instance_;
}

RidingRpcRidingReply* RidingRpcRidingReply::default_instance_ = NULL;

RidingRpcRidingReply* RidingRpcRidingReply::New() const {
  return new RidingRpcRidingReply;
}

void RidingRpcRidingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidingRpcRidingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RidingRpcRidingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidingRpcRidingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidingRpcRidingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidingRpcRidingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidingRpcRidingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidingRpcRidingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidingRpcRidingReply::MergeFrom(const RidingRpcRidingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidingRpcRidingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidingRpcRidingReply::CopyFrom(const RidingRpcRidingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidingRpcRidingReply::IsInitialized() const {

  return true;
}

void RidingRpcRidingReply::Swap(RidingRpcRidingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidingRpcRidingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidingRpcRidingReply_descriptor_;
  metadata.reflection = RidingRpcRidingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RidingRpcUnRidingAsk::RidingRpcUnRidingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidingRpcUnRidingAsk::InitAsDefaultInstance() {
}

RidingRpcUnRidingAsk::RidingRpcUnRidingAsk(const RidingRpcUnRidingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidingRpcUnRidingAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidingRpcUnRidingAsk::~RidingRpcUnRidingAsk() {
  SharedDtor();
}

void RidingRpcUnRidingAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RidingRpcUnRidingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidingRpcUnRidingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidingRpcUnRidingAsk_descriptor_;
}

const RidingRpcUnRidingAsk& RidingRpcUnRidingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidingRpc_2eproto();
  return *default_instance_;
}

RidingRpcUnRidingAsk* RidingRpcUnRidingAsk::default_instance_ = NULL;

RidingRpcUnRidingAsk* RidingRpcUnRidingAsk::New() const {
  return new RidingRpcUnRidingAsk;
}

void RidingRpcUnRidingAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidingRpcUnRidingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RidingRpcUnRidingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidingRpcUnRidingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidingRpcUnRidingAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidingRpcUnRidingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidingRpcUnRidingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidingRpcUnRidingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidingRpcUnRidingAsk::MergeFrom(const RidingRpcUnRidingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidingRpcUnRidingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidingRpcUnRidingAsk::CopyFrom(const RidingRpcUnRidingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidingRpcUnRidingAsk::IsInitialized() const {

  return true;
}

void RidingRpcUnRidingAsk::Swap(RidingRpcUnRidingAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidingRpcUnRidingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidingRpcUnRidingAsk_descriptor_;
  metadata.reflection = RidingRpcUnRidingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RidingRpcUnRidingReply::kResultFieldNumber;
#endif  // !_MSC_VER

RidingRpcUnRidingReply::RidingRpcUnRidingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidingRpcUnRidingReply::InitAsDefaultInstance() {
}

RidingRpcUnRidingReply::RidingRpcUnRidingReply(const RidingRpcUnRidingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidingRpcUnRidingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidingRpcUnRidingReply::~RidingRpcUnRidingReply() {
  SharedDtor();
}

void RidingRpcUnRidingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RidingRpcUnRidingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidingRpcUnRidingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidingRpcUnRidingReply_descriptor_;
}

const RidingRpcUnRidingReply& RidingRpcUnRidingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidingRpc_2eproto();
  return *default_instance_;
}

RidingRpcUnRidingReply* RidingRpcUnRidingReply::default_instance_ = NULL;

RidingRpcUnRidingReply* RidingRpcUnRidingReply::New() const {
  return new RidingRpcUnRidingReply;
}

void RidingRpcUnRidingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidingRpcUnRidingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RidingRpcUnRidingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidingRpcUnRidingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidingRpcUnRidingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidingRpcUnRidingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidingRpcUnRidingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidingRpcUnRidingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidingRpcUnRidingReply::MergeFrom(const RidingRpcUnRidingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidingRpcUnRidingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidingRpcUnRidingReply::CopyFrom(const RidingRpcUnRidingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidingRpcUnRidingReply::IsInitialized() const {

  return true;
}

void RidingRpcUnRidingReply::Swap(RidingRpcUnRidingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidingRpcUnRidingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidingRpcUnRidingReply_descriptor_;
  metadata.reflection = RidingRpcUnRidingReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
