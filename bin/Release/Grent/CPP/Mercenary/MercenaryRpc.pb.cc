// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MercenaryRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MercenaryRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MercenaryRpcInQueueAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcInQueueAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcInQueueReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcInQueueReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcOutQueueAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcOutQueueAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcOutQueueReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcOutQueueReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcAutoSetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcAutoSetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcAutoSetReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcAutoSetReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryRpcInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryRpcInfoReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MercenaryRpc_2eproto() {
  protobuf_AddDesc_MercenaryRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MercenaryRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MercenaryRpcInQueueAsk_descriptor_ = file->message_type(0);
  static const int MercenaryRpcInQueueAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueAsk, id_),
  };
  MercenaryRpcInQueueAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcInQueueAsk_descriptor_,
      MercenaryRpcInQueueAsk::default_instance_,
      MercenaryRpcInQueueAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcInQueueAsk));
  MercenaryRpcInQueueReply_descriptor_ = file->message_type(1);
  static const int MercenaryRpcInQueueReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueReply, result_),
  };
  MercenaryRpcInQueueReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcInQueueReply_descriptor_,
      MercenaryRpcInQueueReply::default_instance_,
      MercenaryRpcInQueueReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInQueueReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcInQueueReply));
  MercenaryRpcOutQueueAsk_descriptor_ = file->message_type(2);
  static const int MercenaryRpcOutQueueAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueAsk, id_),
  };
  MercenaryRpcOutQueueAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcOutQueueAsk_descriptor_,
      MercenaryRpcOutQueueAsk::default_instance_,
      MercenaryRpcOutQueueAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcOutQueueAsk));
  MercenaryRpcOutQueueReply_descriptor_ = file->message_type(3);
  static const int MercenaryRpcOutQueueReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueReply, result_),
  };
  MercenaryRpcOutQueueReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcOutQueueReply_descriptor_,
      MercenaryRpcOutQueueReply::default_instance_,
      MercenaryRpcOutQueueReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcOutQueueReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcOutQueueReply));
  MercenaryRpcAutoSetAsk_descriptor_ = file->message_type(4);
  static const int MercenaryRpcAutoSetAsk_offsets_[1] = {
  };
  MercenaryRpcAutoSetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcAutoSetAsk_descriptor_,
      MercenaryRpcAutoSetAsk::default_instance_,
      MercenaryRpcAutoSetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcAutoSetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcAutoSetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcAutoSetAsk));
  MercenaryRpcAutoSetReply_descriptor_ = file->message_type(5);
  static const int MercenaryRpcAutoSetReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcAutoSetReply, result_),
  };
  MercenaryRpcAutoSetReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcAutoSetReply_descriptor_,
      MercenaryRpcAutoSetReply::default_instance_,
      MercenaryRpcAutoSetReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcAutoSetReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcAutoSetReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcAutoSetReply));
  MercenaryRpcInfoAsk_descriptor_ = file->message_type(6);
  static const int MercenaryRpcInfoAsk_offsets_[1] = {
  };
  MercenaryRpcInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcInfoAsk_descriptor_,
      MercenaryRpcInfoAsk::default_instance_,
      MercenaryRpcInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcInfoAsk));
  MercenaryRpcInfoReply_descriptor_ = file->message_type(7);
  static const int MercenaryRpcInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoReply, mercenary_),
  };
  MercenaryRpcInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryRpcInfoReply_descriptor_,
      MercenaryRpcInfoReply::default_instance_,
      MercenaryRpcInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryRpcInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryRpcInfoReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MercenaryRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcInQueueAsk_descriptor_, &MercenaryRpcInQueueAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcInQueueReply_descriptor_, &MercenaryRpcInQueueReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcOutQueueAsk_descriptor_, &MercenaryRpcOutQueueAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcOutQueueReply_descriptor_, &MercenaryRpcOutQueueReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcAutoSetAsk_descriptor_, &MercenaryRpcAutoSetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcAutoSetReply_descriptor_, &MercenaryRpcAutoSetReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcInfoAsk_descriptor_, &MercenaryRpcInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryRpcInfoReply_descriptor_, &MercenaryRpcInfoReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MercenaryRpc_2eproto() {
  delete MercenaryRpcInQueueAsk::default_instance_;
  delete MercenaryRpcInQueueAsk_reflection_;
  delete MercenaryRpcInQueueReply::default_instance_;
  delete MercenaryRpcInQueueReply_reflection_;
  delete MercenaryRpcOutQueueAsk::default_instance_;
  delete MercenaryRpcOutQueueAsk_reflection_;
  delete MercenaryRpcOutQueueReply::default_instance_;
  delete MercenaryRpcOutQueueReply_reflection_;
  delete MercenaryRpcAutoSetAsk::default_instance_;
  delete MercenaryRpcAutoSetAsk_reflection_;
  delete MercenaryRpcAutoSetReply::default_instance_;
  delete MercenaryRpcAutoSetReply_reflection_;
  delete MercenaryRpcInfoAsk::default_instance_;
  delete MercenaryRpcInfoAsk_reflection_;
  delete MercenaryRpcInfoReply::default_instance_;
  delete MercenaryRpcInfoReply_reflection_;
}

void protobuf_AddDesc_MercenaryRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MercenaryRpc.proto\032\022PublicStruct.proto"
    "\"(\n\026MercenaryRpcInQueueAsk\022\016\n\002Id\030\001 \001(\005:\002"
    "-1\".\n\030MercenaryRpcInQueueReply\022\022\n\006Result"
    "\030\001 \001(\005:\002-1\")\n\027MercenaryRpcOutQueueAsk\022\016\n"
    "\002Id\030\001 \001(\005:\002-1\"/\n\031MercenaryRpcOutQueueRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\"\030\n\026MercenaryRpcAu"
    "toSetAsk\".\n\030MercenaryRpcAutoSetReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\"\025\n\023MercenaryRpcInfoAsk\""
    "N\n\025MercenaryRpcInfoReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\022!\n\tMercenary\030\002 \003(\0132\016.MercenaryInfo", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MercenaryRpc.proto", &protobuf_RegisterTypes);
  MercenaryRpcInQueueAsk::default_instance_ = new MercenaryRpcInQueueAsk();
  MercenaryRpcInQueueReply::default_instance_ = new MercenaryRpcInQueueReply();
  MercenaryRpcOutQueueAsk::default_instance_ = new MercenaryRpcOutQueueAsk();
  MercenaryRpcOutQueueReply::default_instance_ = new MercenaryRpcOutQueueReply();
  MercenaryRpcAutoSetAsk::default_instance_ = new MercenaryRpcAutoSetAsk();
  MercenaryRpcAutoSetReply::default_instance_ = new MercenaryRpcAutoSetReply();
  MercenaryRpcInfoAsk::default_instance_ = new MercenaryRpcInfoAsk();
  MercenaryRpcInfoReply::default_instance_ = new MercenaryRpcInfoReply();
  MercenaryRpcInQueueAsk::default_instance_->InitAsDefaultInstance();
  MercenaryRpcInQueueReply::default_instance_->InitAsDefaultInstance();
  MercenaryRpcOutQueueAsk::default_instance_->InitAsDefaultInstance();
  MercenaryRpcOutQueueReply::default_instance_->InitAsDefaultInstance();
  MercenaryRpcAutoSetAsk::default_instance_->InitAsDefaultInstance();
  MercenaryRpcAutoSetReply::default_instance_->InitAsDefaultInstance();
  MercenaryRpcInfoAsk::default_instance_->InitAsDefaultInstance();
  MercenaryRpcInfoReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MercenaryRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MercenaryRpc_2eproto {
  StaticDescriptorInitializer_MercenaryRpc_2eproto() {
    protobuf_AddDesc_MercenaryRpc_2eproto();
  }
} static_descriptor_initializer_MercenaryRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcInQueueAsk::kIdFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcInQueueAsk::MercenaryRpcInQueueAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcInQueueAsk::InitAsDefaultInstance() {
}

MercenaryRpcInQueueAsk::MercenaryRpcInQueueAsk(const MercenaryRpcInQueueAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcInQueueAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcInQueueAsk::~MercenaryRpcInQueueAsk() {
  SharedDtor();
}

void MercenaryRpcInQueueAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcInQueueAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcInQueueAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcInQueueAsk_descriptor_;
}

const MercenaryRpcInQueueAsk& MercenaryRpcInQueueAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcInQueueAsk* MercenaryRpcInQueueAsk::default_instance_ = NULL;

MercenaryRpcInQueueAsk* MercenaryRpcInQueueAsk::New() const {
  return new MercenaryRpcInQueueAsk;
}

void MercenaryRpcInQueueAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcInQueueAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcInQueueAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcInQueueAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcInQueueAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcInQueueAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcInQueueAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcInQueueAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcInQueueAsk::MergeFrom(const MercenaryRpcInQueueAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcInQueueAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcInQueueAsk::CopyFrom(const MercenaryRpcInQueueAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcInQueueAsk::IsInitialized() const {

  return true;
}

void MercenaryRpcInQueueAsk::Swap(MercenaryRpcInQueueAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcInQueueAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcInQueueAsk_descriptor_;
  metadata.reflection = MercenaryRpcInQueueAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcInQueueReply::kResultFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcInQueueReply::MercenaryRpcInQueueReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcInQueueReply::InitAsDefaultInstance() {
}

MercenaryRpcInQueueReply::MercenaryRpcInQueueReply(const MercenaryRpcInQueueReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcInQueueReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcInQueueReply::~MercenaryRpcInQueueReply() {
  SharedDtor();
}

void MercenaryRpcInQueueReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcInQueueReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcInQueueReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcInQueueReply_descriptor_;
}

const MercenaryRpcInQueueReply& MercenaryRpcInQueueReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcInQueueReply* MercenaryRpcInQueueReply::default_instance_ = NULL;

MercenaryRpcInQueueReply* MercenaryRpcInQueueReply::New() const {
  return new MercenaryRpcInQueueReply;
}

void MercenaryRpcInQueueReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcInQueueReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcInQueueReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcInQueueReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcInQueueReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcInQueueReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcInQueueReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcInQueueReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcInQueueReply::MergeFrom(const MercenaryRpcInQueueReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcInQueueReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcInQueueReply::CopyFrom(const MercenaryRpcInQueueReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcInQueueReply::IsInitialized() const {

  return true;
}

void MercenaryRpcInQueueReply::Swap(MercenaryRpcInQueueReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcInQueueReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcInQueueReply_descriptor_;
  metadata.reflection = MercenaryRpcInQueueReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcOutQueueAsk::kIdFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcOutQueueAsk::MercenaryRpcOutQueueAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcOutQueueAsk::InitAsDefaultInstance() {
}

MercenaryRpcOutQueueAsk::MercenaryRpcOutQueueAsk(const MercenaryRpcOutQueueAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcOutQueueAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcOutQueueAsk::~MercenaryRpcOutQueueAsk() {
  SharedDtor();
}

void MercenaryRpcOutQueueAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcOutQueueAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcOutQueueAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcOutQueueAsk_descriptor_;
}

const MercenaryRpcOutQueueAsk& MercenaryRpcOutQueueAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcOutQueueAsk* MercenaryRpcOutQueueAsk::default_instance_ = NULL;

MercenaryRpcOutQueueAsk* MercenaryRpcOutQueueAsk::New() const {
  return new MercenaryRpcOutQueueAsk;
}

void MercenaryRpcOutQueueAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcOutQueueAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcOutQueueAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcOutQueueAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcOutQueueAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcOutQueueAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcOutQueueAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcOutQueueAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcOutQueueAsk::MergeFrom(const MercenaryRpcOutQueueAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcOutQueueAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcOutQueueAsk::CopyFrom(const MercenaryRpcOutQueueAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcOutQueueAsk::IsInitialized() const {

  return true;
}

void MercenaryRpcOutQueueAsk::Swap(MercenaryRpcOutQueueAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcOutQueueAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcOutQueueAsk_descriptor_;
  metadata.reflection = MercenaryRpcOutQueueAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcOutQueueReply::kResultFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcOutQueueReply::MercenaryRpcOutQueueReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcOutQueueReply::InitAsDefaultInstance() {
}

MercenaryRpcOutQueueReply::MercenaryRpcOutQueueReply(const MercenaryRpcOutQueueReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcOutQueueReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcOutQueueReply::~MercenaryRpcOutQueueReply() {
  SharedDtor();
}

void MercenaryRpcOutQueueReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcOutQueueReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcOutQueueReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcOutQueueReply_descriptor_;
}

const MercenaryRpcOutQueueReply& MercenaryRpcOutQueueReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcOutQueueReply* MercenaryRpcOutQueueReply::default_instance_ = NULL;

MercenaryRpcOutQueueReply* MercenaryRpcOutQueueReply::New() const {
  return new MercenaryRpcOutQueueReply;
}

void MercenaryRpcOutQueueReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcOutQueueReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcOutQueueReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcOutQueueReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcOutQueueReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcOutQueueReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcOutQueueReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcOutQueueReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcOutQueueReply::MergeFrom(const MercenaryRpcOutQueueReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcOutQueueReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcOutQueueReply::CopyFrom(const MercenaryRpcOutQueueReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcOutQueueReply::IsInitialized() const {

  return true;
}

void MercenaryRpcOutQueueReply::Swap(MercenaryRpcOutQueueReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcOutQueueReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcOutQueueReply_descriptor_;
  metadata.reflection = MercenaryRpcOutQueueReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MercenaryRpcAutoSetAsk::MercenaryRpcAutoSetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcAutoSetAsk::InitAsDefaultInstance() {
}

MercenaryRpcAutoSetAsk::MercenaryRpcAutoSetAsk(const MercenaryRpcAutoSetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcAutoSetAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcAutoSetAsk::~MercenaryRpcAutoSetAsk() {
  SharedDtor();
}

void MercenaryRpcAutoSetAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcAutoSetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcAutoSetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcAutoSetAsk_descriptor_;
}

const MercenaryRpcAutoSetAsk& MercenaryRpcAutoSetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcAutoSetAsk* MercenaryRpcAutoSetAsk::default_instance_ = NULL;

MercenaryRpcAutoSetAsk* MercenaryRpcAutoSetAsk::New() const {
  return new MercenaryRpcAutoSetAsk;
}

void MercenaryRpcAutoSetAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcAutoSetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MercenaryRpcAutoSetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcAutoSetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcAutoSetAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcAutoSetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcAutoSetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcAutoSetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcAutoSetAsk::MergeFrom(const MercenaryRpcAutoSetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcAutoSetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcAutoSetAsk::CopyFrom(const MercenaryRpcAutoSetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcAutoSetAsk::IsInitialized() const {

  return true;
}

void MercenaryRpcAutoSetAsk::Swap(MercenaryRpcAutoSetAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcAutoSetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcAutoSetAsk_descriptor_;
  metadata.reflection = MercenaryRpcAutoSetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcAutoSetReply::kResultFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcAutoSetReply::MercenaryRpcAutoSetReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcAutoSetReply::InitAsDefaultInstance() {
}

MercenaryRpcAutoSetReply::MercenaryRpcAutoSetReply(const MercenaryRpcAutoSetReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcAutoSetReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcAutoSetReply::~MercenaryRpcAutoSetReply() {
  SharedDtor();
}

void MercenaryRpcAutoSetReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcAutoSetReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcAutoSetReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcAutoSetReply_descriptor_;
}

const MercenaryRpcAutoSetReply& MercenaryRpcAutoSetReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcAutoSetReply* MercenaryRpcAutoSetReply::default_instance_ = NULL;

MercenaryRpcAutoSetReply* MercenaryRpcAutoSetReply::New() const {
  return new MercenaryRpcAutoSetReply;
}

void MercenaryRpcAutoSetReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcAutoSetReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcAutoSetReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcAutoSetReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcAutoSetReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcAutoSetReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcAutoSetReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcAutoSetReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcAutoSetReply::MergeFrom(const MercenaryRpcAutoSetReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcAutoSetReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcAutoSetReply::CopyFrom(const MercenaryRpcAutoSetReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcAutoSetReply::IsInitialized() const {

  return true;
}

void MercenaryRpcAutoSetReply::Swap(MercenaryRpcAutoSetReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcAutoSetReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcAutoSetReply_descriptor_;
  metadata.reflection = MercenaryRpcAutoSetReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MercenaryRpcInfoAsk::MercenaryRpcInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcInfoAsk::InitAsDefaultInstance() {
}

MercenaryRpcInfoAsk::MercenaryRpcInfoAsk(const MercenaryRpcInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcInfoAsk::~MercenaryRpcInfoAsk() {
  SharedDtor();
}

void MercenaryRpcInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcInfoAsk_descriptor_;
}

const MercenaryRpcInfoAsk& MercenaryRpcInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcInfoAsk* MercenaryRpcInfoAsk::default_instance_ = NULL;

MercenaryRpcInfoAsk* MercenaryRpcInfoAsk::New() const {
  return new MercenaryRpcInfoAsk;
}

void MercenaryRpcInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MercenaryRpcInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcInfoAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcInfoAsk::MergeFrom(const MercenaryRpcInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcInfoAsk::CopyFrom(const MercenaryRpcInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcInfoAsk::IsInitialized() const {

  return true;
}

void MercenaryRpcInfoAsk::Swap(MercenaryRpcInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcInfoAsk_descriptor_;
  metadata.reflection = MercenaryRpcInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryRpcInfoReply::kResultFieldNumber;
const int MercenaryRpcInfoReply::kMercenaryFieldNumber;
#endif  // !_MSC_VER

MercenaryRpcInfoReply::MercenaryRpcInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryRpcInfoReply::InitAsDefaultInstance() {
}

MercenaryRpcInfoReply::MercenaryRpcInfoReply(const MercenaryRpcInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryRpcInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryRpcInfoReply::~MercenaryRpcInfoReply() {
  SharedDtor();
}

void MercenaryRpcInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryRpcInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryRpcInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryRpcInfoReply_descriptor_;
}

const MercenaryRpcInfoReply& MercenaryRpcInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MercenaryRpc_2eproto();
  return *default_instance_;
}

MercenaryRpcInfoReply* MercenaryRpcInfoReply::default_instance_ = NULL;

MercenaryRpcInfoReply* MercenaryRpcInfoReply::New() const {
  return new MercenaryRpcInfoReply;
}

void MercenaryRpcInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  mercenary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryRpcInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Mercenary;
        break;
      }

      // repeated .MercenaryInfo Mercenary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Mercenary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mercenary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Mercenary;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryRpcInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .MercenaryInfo Mercenary = 2;
  for (int i = 0; i < this->mercenary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mercenary(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryRpcInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .MercenaryInfo Mercenary = 2;
  for (int i = 0; i < this->mercenary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mercenary(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryRpcInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .MercenaryInfo Mercenary = 2;
  total_size += 1 * this->mercenary_size();
  for (int i = 0; i < this->mercenary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mercenary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryRpcInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryRpcInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryRpcInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryRpcInfoReply::MergeFrom(const MercenaryRpcInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mercenary_.MergeFrom(from.mercenary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryRpcInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryRpcInfoReply::CopyFrom(const MercenaryRpcInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryRpcInfoReply::IsInitialized() const {

  return true;
}

void MercenaryRpcInfoReply::Swap(MercenaryRpcInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    mercenary_.Swap(&other->mercenary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryRpcInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryRpcInfoReply_descriptor_;
  metadata.reflection = MercenaryRpcInfoReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
