// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentRpc.proto

#ifndef PROTOBUF_EquipmentRpc_2eproto__INCLUDED
#define PROTOBUF_EquipmentRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentRpc_2eproto();
void protobuf_AssignDesc_EquipmentRpc_2eproto();
void protobuf_ShutdownFile_EquipmentRpc_2eproto();

class EquipmentRpcEquipAsk;
class EquipmentRpcEquipReply;
class EquipmentRpcUnEquipAsk;
class EquipmentRpcUnEquipReply;
class EquipmentRpcSwitchEquipSetAsk;
class EquipmentRpcSwitchEquipSetReply;
class EquipmentRpcSyncEquipAsk;
class EquipmentRpcSyncEquipReply;
class EquipmentRpcResonanceUnlockAsk;
class EquipmentRpcResonanceUnlockReply;
class EquipmentRpcEquipDoResonanceAsk;
class EquipmentRpcEquipDoResonanceReply;
class EquipmentRpcEquipResonanceSaveAsk;
class EquipmentRpcEquipResonanceSaveReply;
class EquipmentRpcEquipResonanceSyncAsk;
class EquipmentRpcEquipResonanceSyncReply;
class EquipmentRpcEquipWashSyncAsk;
class EquipmentRpcEquipWashSyncReply;
class EquipmentRpcEquipWashAsk;
class EquipmentRpcEquipWashReply;
class EquipmentRpcEquipWashSaveAsk;
class EquipmentRpcEquipWashSaveReply;
class EquipmentRpcEquipBuildSyncAsk;
class EquipmentRpcEquipBuildSyncReply;
class EquipmentRpcEquipBuildAsk;
class EquipmentRpcEquipBuildReply;
class EquipmentRpcGetPlayerInfoAsk;
class EquipmentRpcGetPlayerInfoReply;
class EquipmentRpcEquipInheritAsk;
class EquipmentRpcEquipInheritReply;

// ===================================================================

class EquipmentRpcEquipAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipAsk();
  virtual ~EquipmentRpcEquipAsk();

  EquipmentRpcEquipAsk(const EquipmentRpcEquipAsk& from);

  inline EquipmentRpcEquipAsk& operator=(const EquipmentRpcEquipAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipAsk& default_instance();

  void Swap(EquipmentRpcEquipAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipAsk& from);
  void MergeFrom(const EquipmentRpcEquipAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Pos = 1 [default = -1];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipAsk)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipReply();
  virtual ~EquipmentRpcEquipReply();

  EquipmentRpcEquipReply(const EquipmentRpcEquipReply& from);

  inline EquipmentRpcEquipReply& operator=(const EquipmentRpcEquipReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipReply& default_instance();

  void Swap(EquipmentRpcEquipReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipReply& from);
  void MergeFrom(const EquipmentRpcEquipReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ItemData Equip_data = 2;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 2;
  inline const ::ItemData& equip_data(int index) const;
  inline ::ItemData* mutable_equip_data(int index);
  inline ::ItemData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equip_data();

  // repeated .SuitInfo Suit_infos = 3;
  inline int suit_infos_size() const;
  inline void clear_suit_infos();
  static const int kSuitInfosFieldNumber = 3;
  inline const ::SuitInfo& suit_infos(int index) const;
  inline ::SuitInfo* mutable_suit_infos(int index);
  inline ::SuitInfo* add_suit_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
      suit_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
      mutable_suit_infos();

  // optional int32 SlotType = 4 [default = -1];
  inline bool has_slottype() const;
  inline void clear_slottype();
  static const int kSlotTypeFieldNumber = 4;
  inline ::google::protobuf::int32 slottype() const;
  inline void set_slottype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_slottype();
  inline void clear_has_slottype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemData > equip_data_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 slottype_;
  ::google::protobuf::RepeatedPtrField< ::SuitInfo > suit_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcUnEquipAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcUnEquipAsk();
  virtual ~EquipmentRpcUnEquipAsk();

  EquipmentRpcUnEquipAsk(const EquipmentRpcUnEquipAsk& from);

  inline EquipmentRpcUnEquipAsk& operator=(const EquipmentRpcUnEquipAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcUnEquipAsk& default_instance();

  void Swap(EquipmentRpcUnEquipAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcUnEquipAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcUnEquipAsk& from);
  void MergeFrom(const EquipmentRpcUnEquipAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SlotType = 1 [default = -1];
  inline bool has_slottype() const;
  inline void clear_slottype();
  static const int kSlotTypeFieldNumber = 1;
  inline ::google::protobuf::int32 slottype() const;
  inline void set_slottype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcUnEquipAsk)
 private:
  inline void set_has_slottype();
  inline void clear_has_slottype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 slottype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcUnEquipAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcUnEquipReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcUnEquipReply();
  virtual ~EquipmentRpcUnEquipReply();

  EquipmentRpcUnEquipReply(const EquipmentRpcUnEquipReply& from);

  inline EquipmentRpcUnEquipReply& operator=(const EquipmentRpcUnEquipReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcUnEquipReply& default_instance();

  void Swap(EquipmentRpcUnEquipReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcUnEquipReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcUnEquipReply& from);
  void MergeFrom(const EquipmentRpcUnEquipReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ItemData Equip_data = 2;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 2;
  inline const ::ItemData& equip_data(int index) const;
  inline ::ItemData* mutable_equip_data(int index);
  inline ::ItemData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equip_data();

  // repeated .SuitInfo Suit_infos = 3;
  inline int suit_infos_size() const;
  inline void clear_suit_infos();
  static const int kSuitInfosFieldNumber = 3;
  inline const ::SuitInfo& suit_infos(int index) const;
  inline ::SuitInfo* mutable_suit_infos(int index);
  inline ::SuitInfo* add_suit_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
      suit_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
      mutable_suit_infos();

  // optional int32 SlotType = 4 [default = -1];
  inline bool has_slottype() const;
  inline void clear_slottype();
  static const int kSlotTypeFieldNumber = 4;
  inline ::google::protobuf::int32 slottype() const;
  inline void set_slottype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcUnEquipReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_slottype();
  inline void clear_has_slottype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemData > equip_data_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 slottype_;
  ::google::protobuf::RepeatedPtrField< ::SuitInfo > suit_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcUnEquipReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcSwitchEquipSetAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcSwitchEquipSetAsk();
  virtual ~EquipmentRpcSwitchEquipSetAsk();

  EquipmentRpcSwitchEquipSetAsk(const EquipmentRpcSwitchEquipSetAsk& from);

  inline EquipmentRpcSwitchEquipSetAsk& operator=(const EquipmentRpcSwitchEquipSetAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcSwitchEquipSetAsk& default_instance();

  void Swap(EquipmentRpcSwitchEquipSetAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcSwitchEquipSetAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcSwitchEquipSetAsk& from);
  void MergeFrom(const EquipmentRpcSwitchEquipSetAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 To_index = 1 [default = -1];
  inline bool has_to_index() const;
  inline void clear_to_index();
  static const int kToIndexFieldNumber = 1;
  inline ::google::protobuf::int32 to_index() const;
  inline void set_to_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcSwitchEquipSetAsk)
 private:
  inline void set_has_to_index();
  inline void clear_has_to_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 to_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcSwitchEquipSetAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcSwitchEquipSetReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcSwitchEquipSetReply();
  virtual ~EquipmentRpcSwitchEquipSetReply();

  EquipmentRpcSwitchEquipSetReply(const EquipmentRpcSwitchEquipSetReply& from);

  inline EquipmentRpcSwitchEquipSetReply& operator=(const EquipmentRpcSwitchEquipSetReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcSwitchEquipSetReply& default_instance();

  void Swap(EquipmentRpcSwitchEquipSetReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcSwitchEquipSetReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcSwitchEquipSetReply& from);
  void MergeFrom(const EquipmentRpcSwitchEquipSetReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ItemData Equip_data = 2;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 2;
  inline const ::ItemData& equip_data(int index) const;
  inline ::ItemData* mutable_equip_data(int index);
  inline ::ItemData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equip_data();

  // @@protoc_insertion_point(class_scope:EquipmentRpcSwitchEquipSetReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemData > equip_data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcSwitchEquipSetReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcSyncEquipAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcSyncEquipAsk();
  virtual ~EquipmentRpcSyncEquipAsk();

  EquipmentRpcSyncEquipAsk(const EquipmentRpcSyncEquipAsk& from);

  inline EquipmentRpcSyncEquipAsk& operator=(const EquipmentRpcSyncEquipAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcSyncEquipAsk& default_instance();

  void Swap(EquipmentRpcSyncEquipAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcSyncEquipAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcSyncEquipAsk& from);
  void MergeFrom(const EquipmentRpcSyncEquipAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EquipmentRpcSyncEquipAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcSyncEquipAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcSyncEquipReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcSyncEquipReply();
  virtual ~EquipmentRpcSyncEquipReply();

  EquipmentRpcSyncEquipReply(const EquipmentRpcSyncEquipReply& from);

  inline EquipmentRpcSyncEquipReply& operator=(const EquipmentRpcSyncEquipReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcSyncEquipReply& default_instance();

  void Swap(EquipmentRpcSyncEquipReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcSyncEquipReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcSyncEquipReply& from);
  void MergeFrom(const EquipmentRpcSyncEquipReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ItemData Equip_data = 3;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 3;
  inline const ::ItemData& equip_data(int index) const;
  inline ::ItemData* mutable_equip_data(int index);
  inline ::ItemData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equip_data();

  // repeated .SuitInfo Suit_infos = 4;
  inline int suit_infos_size() const;
  inline void clear_suit_infos();
  static const int kSuitInfosFieldNumber = 4;
  inline const ::SuitInfo& suit_infos(int index) const;
  inline ::SuitInfo* mutable_suit_infos(int index);
  inline ::SuitInfo* add_suit_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
      suit_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
      mutable_suit_infos();

  // @@protoc_insertion_point(class_scope:EquipmentRpcSyncEquipReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemData > equip_data_;
  ::google::protobuf::RepeatedPtrField< ::SuitInfo > suit_infos_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcSyncEquipReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcResonanceUnlockAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcResonanceUnlockAsk();
  virtual ~EquipmentRpcResonanceUnlockAsk();

  EquipmentRpcResonanceUnlockAsk(const EquipmentRpcResonanceUnlockAsk& from);

  inline EquipmentRpcResonanceUnlockAsk& operator=(const EquipmentRpcResonanceUnlockAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcResonanceUnlockAsk& default_instance();

  void Swap(EquipmentRpcResonanceUnlockAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcResonanceUnlockAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcResonanceUnlockAsk& from);
  void MergeFrom(const EquipmentRpcResonanceUnlockAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfId = 1 [default = -1];
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfIdFieldNumber = 1;
  inline ::google::protobuf::int32 confid() const;
  inline void set_confid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcResonanceUnlockAsk)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 confid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcResonanceUnlockAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcResonanceUnlockReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcResonanceUnlockReply();
  virtual ~EquipmentRpcResonanceUnlockReply();

  EquipmentRpcResonanceUnlockReply(const EquipmentRpcResonanceUnlockReply& from);

  inline EquipmentRpcResonanceUnlockReply& operator=(const EquipmentRpcResonanceUnlockReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcResonanceUnlockReply& default_instance();

  void Swap(EquipmentRpcResonanceUnlockReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcResonanceUnlockReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcResonanceUnlockReply& from);
  void MergeFrom(const EquipmentRpcResonanceUnlockReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  inline bool has_resonanceinfo() const;
  inline void clear_resonanceinfo();
  static const int kResonanceInfoFieldNumber = 2;
  inline const ::EquipResonanceInfo& resonanceinfo() const;
  inline ::EquipResonanceInfo* mutable_resonanceinfo();
  inline ::EquipResonanceInfo* release_resonanceinfo();
  inline void set_allocated_resonanceinfo(::EquipResonanceInfo* resonanceinfo);

  // @@protoc_insertion_point(class_scope:EquipmentRpcResonanceUnlockReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resonanceinfo();
  inline void clear_has_resonanceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipResonanceInfo* resonanceinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcResonanceUnlockReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipDoResonanceAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipDoResonanceAsk();
  virtual ~EquipmentRpcEquipDoResonanceAsk();

  EquipmentRpcEquipDoResonanceAsk(const EquipmentRpcEquipDoResonanceAsk& from);

  inline EquipmentRpcEquipDoResonanceAsk& operator=(const EquipmentRpcEquipDoResonanceAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipDoResonanceAsk& default_instance();

  void Swap(EquipmentRpcEquipDoResonanceAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipDoResonanceAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipDoResonanceAsk& from);
  void MergeFrom(const EquipmentRpcEquipDoResonanceAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfId = 1 [default = -1];
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfIdFieldNumber = 1;
  inline ::google::protobuf::int32 confid() const;
  inline void set_confid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipDoResonanceAsk)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 confid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipDoResonanceAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipDoResonanceReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipDoResonanceReply();
  virtual ~EquipmentRpcEquipDoResonanceReply();

  EquipmentRpcEquipDoResonanceReply(const EquipmentRpcEquipDoResonanceReply& from);

  inline EquipmentRpcEquipDoResonanceReply& operator=(const EquipmentRpcEquipDoResonanceReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipDoResonanceReply& default_instance();

  void Swap(EquipmentRpcEquipDoResonanceReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipDoResonanceReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipDoResonanceReply& from);
  void MergeFrom(const EquipmentRpcEquipDoResonanceReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipResonanceInfo AddAttr = 2;
  inline bool has_addattr() const;
  inline void clear_addattr();
  static const int kAddAttrFieldNumber = 2;
  inline const ::EquipResonanceInfo& addattr() const;
  inline ::EquipResonanceInfo* mutable_addattr();
  inline ::EquipResonanceInfo* release_addattr();
  inline void set_allocated_addattr(::EquipResonanceInfo* addattr);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipDoResonanceReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_addattr();
  inline void clear_has_addattr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipResonanceInfo* addattr_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipDoResonanceReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipResonanceSaveAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipResonanceSaveAsk();
  virtual ~EquipmentRpcEquipResonanceSaveAsk();

  EquipmentRpcEquipResonanceSaveAsk(const EquipmentRpcEquipResonanceSaveAsk& from);

  inline EquipmentRpcEquipResonanceSaveAsk& operator=(const EquipmentRpcEquipResonanceSaveAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipResonanceSaveAsk& default_instance();

  void Swap(EquipmentRpcEquipResonanceSaveAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipResonanceSaveAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipResonanceSaveAsk& from);
  void MergeFrom(const EquipmentRpcEquipResonanceSaveAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfId = 1 [default = -1];
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfIdFieldNumber = 1;
  inline ::google::protobuf::int32 confid() const;
  inline void set_confid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipResonanceSaveAsk)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 confid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipResonanceSaveAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipResonanceSaveReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipResonanceSaveReply();
  virtual ~EquipmentRpcEquipResonanceSaveReply();

  EquipmentRpcEquipResonanceSaveReply(const EquipmentRpcEquipResonanceSaveReply& from);

  inline EquipmentRpcEquipResonanceSaveReply& operator=(const EquipmentRpcEquipResonanceSaveReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipResonanceSaveReply& default_instance();

  void Swap(EquipmentRpcEquipResonanceSaveReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipResonanceSaveReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipResonanceSaveReply& from);
  void MergeFrom(const EquipmentRpcEquipResonanceSaveReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  inline bool has_resonanceinfo() const;
  inline void clear_resonanceinfo();
  static const int kResonanceInfoFieldNumber = 2;
  inline const ::EquipResonanceInfo& resonanceinfo() const;
  inline ::EquipResonanceInfo* mutable_resonanceinfo();
  inline ::EquipResonanceInfo* release_resonanceinfo();
  inline void set_allocated_resonanceinfo(::EquipResonanceInfo* resonanceinfo);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipResonanceSaveReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resonanceinfo();
  inline void clear_has_resonanceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipResonanceInfo* resonanceinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipResonanceSaveReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipResonanceSyncAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipResonanceSyncAsk();
  virtual ~EquipmentRpcEquipResonanceSyncAsk();

  EquipmentRpcEquipResonanceSyncAsk(const EquipmentRpcEquipResonanceSyncAsk& from);

  inline EquipmentRpcEquipResonanceSyncAsk& operator=(const EquipmentRpcEquipResonanceSyncAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipResonanceSyncAsk& default_instance();

  void Swap(EquipmentRpcEquipResonanceSyncAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipResonanceSyncAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipResonanceSyncAsk& from);
  void MergeFrom(const EquipmentRpcEquipResonanceSyncAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipResonanceSyncAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipResonanceSyncAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipResonanceSyncReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipResonanceSyncReply();
  virtual ~EquipmentRpcEquipResonanceSyncReply();

  EquipmentRpcEquipResonanceSyncReply(const EquipmentRpcEquipResonanceSyncReply& from);

  inline EquipmentRpcEquipResonanceSyncReply& operator=(const EquipmentRpcEquipResonanceSyncReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipResonanceSyncReply& default_instance();

  void Swap(EquipmentRpcEquipResonanceSyncReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipResonanceSyncReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipResonanceSyncReply& from);
  void MergeFrom(const EquipmentRpcEquipResonanceSyncReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipResonanceData ResonanceData = 2;
  inline bool has_resonancedata() const;
  inline void clear_resonancedata();
  static const int kResonanceDataFieldNumber = 2;
  inline const ::EquipResonanceData& resonancedata() const;
  inline ::EquipResonanceData* mutable_resonancedata();
  inline ::EquipResonanceData* release_resonancedata();
  inline void set_allocated_resonancedata(::EquipResonanceData* resonancedata);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipResonanceSyncReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resonancedata();
  inline void clear_has_resonancedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipResonanceData* resonancedata_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipResonanceSyncReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashSyncAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashSyncAsk();
  virtual ~EquipmentRpcEquipWashSyncAsk();

  EquipmentRpcEquipWashSyncAsk(const EquipmentRpcEquipWashSyncAsk& from);

  inline EquipmentRpcEquipWashSyncAsk& operator=(const EquipmentRpcEquipWashSyncAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashSyncAsk& default_instance();

  void Swap(EquipmentRpcEquipWashSyncAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashSyncAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashSyncAsk& from);
  void MergeFrom(const EquipmentRpcEquipWashSyncAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashSyncAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashSyncAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashSyncReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashSyncReply();
  virtual ~EquipmentRpcEquipWashSyncReply();

  EquipmentRpcEquipWashSyncReply(const EquipmentRpcEquipWashSyncReply& from);

  inline EquipmentRpcEquipWashSyncReply& operator=(const EquipmentRpcEquipWashSyncReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashSyncReply& default_instance();

  void Swap(EquipmentRpcEquipWashSyncReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashSyncReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashSyncReply& from);
  void MergeFrom(const EquipmentRpcEquipWashSyncReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipWashData EquipWashData = 2;
  inline bool has_equipwashdata() const;
  inline void clear_equipwashdata();
  static const int kEquipWashDataFieldNumber = 2;
  inline const ::EquipWashData& equipwashdata() const;
  inline ::EquipWashData* mutable_equipwashdata();
  inline ::EquipWashData* release_equipwashdata();
  inline void set_allocated_equipwashdata(::EquipWashData* equipwashdata);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashSyncReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_equipwashdata();
  inline void clear_has_equipwashdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipWashData* equipwashdata_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashSyncReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashAsk();
  virtual ~EquipmentRpcEquipWashAsk();

  EquipmentRpcEquipWashAsk(const EquipmentRpcEquipWashAsk& from);

  inline EquipmentRpcEquipWashAsk& operator=(const EquipmentRpcEquipWashAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashAsk& default_instance();

  void Swap(EquipmentRpcEquipWashAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashAsk& from);
  void MergeFrom(const EquipmentRpcEquipWashAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated int32 LockedIndex = 2;
  inline int lockedindex_size() const;
  inline void clear_lockedindex();
  static const int kLockedIndexFieldNumber = 2;
  inline ::google::protobuf::int32 lockedindex(int index) const;
  inline void set_lockedindex(int index, ::google::protobuf::int32 value);
  inline void add_lockedindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lockedindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lockedindex();

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lockedindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashReply();
  virtual ~EquipmentRpcEquipWashReply();

  EquipmentRpcEquipWashReply(const EquipmentRpcEquipWashReply& from);

  inline EquipmentRpcEquipWashReply& operator=(const EquipmentRpcEquipWashReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashReply& default_instance();

  void Swap(EquipmentRpcEquipWashReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashReply& from);
  void MergeFrom(const EquipmentRpcEquipWashReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipWashInfo EquipWashInfo = 2;
  inline bool has_equipwashinfo() const;
  inline void clear_equipwashinfo();
  static const int kEquipWashInfoFieldNumber = 2;
  inline const ::EquipWashInfo& equipwashinfo() const;
  inline ::EquipWashInfo* mutable_equipwashinfo();
  inline ::EquipWashInfo* release_equipwashinfo();
  inline void set_allocated_equipwashinfo(::EquipWashInfo* equipwashinfo);

  // optional int32 LeftTimes = 3 [default = -1];
  inline bool has_lefttimes() const;
  inline void clear_lefttimes();
  static const int kLeftTimesFieldNumber = 3;
  inline ::google::protobuf::int32 lefttimes() const;
  inline void set_lefttimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_equipwashinfo();
  inline void clear_has_equipwashinfo();
  inline void set_has_lefttimes();
  inline void clear_has_lefttimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipWashInfo* equipwashinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 lefttimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashSaveAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashSaveAsk();
  virtual ~EquipmentRpcEquipWashSaveAsk();

  EquipmentRpcEquipWashSaveAsk(const EquipmentRpcEquipWashSaveAsk& from);

  inline EquipmentRpcEquipWashSaveAsk& operator=(const EquipmentRpcEquipWashSaveAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashSaveAsk& default_instance();

  void Swap(EquipmentRpcEquipWashSaveAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashSaveAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashSaveAsk& from);
  void MergeFrom(const EquipmentRpcEquipWashSaveAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashSaveAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashSaveAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipWashSaveReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipWashSaveReply();
  virtual ~EquipmentRpcEquipWashSaveReply();

  EquipmentRpcEquipWashSaveReply(const EquipmentRpcEquipWashSaveReply& from);

  inline EquipmentRpcEquipWashSaveReply& operator=(const EquipmentRpcEquipWashSaveReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipWashSaveReply& default_instance();

  void Swap(EquipmentRpcEquipWashSaveReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipWashSaveReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipWashSaveReply& from);
  void MergeFrom(const EquipmentRpcEquipWashSaveReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .ItemData ItemData = 2;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 2;
  inline const ::ItemData& itemdata() const;
  inline ::ItemData* mutable_itemdata();
  inline ::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::ItemData* itemdata);

  // repeated int32 LockedIndex = 3;
  inline int lockedindex_size() const;
  inline void clear_lockedindex();
  static const int kLockedIndexFieldNumber = 3;
  inline ::google::protobuf::int32 lockedindex(int index) const;
  inline void set_lockedindex(int index, ::google::protobuf::int32 value);
  inline void add_lockedindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lockedindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lockedindex();

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipWashSaveReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ItemData* itemdata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lockedindex_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipWashSaveReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipBuildSyncAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipBuildSyncAsk();
  virtual ~EquipmentRpcEquipBuildSyncAsk();

  EquipmentRpcEquipBuildSyncAsk(const EquipmentRpcEquipBuildSyncAsk& from);

  inline EquipmentRpcEquipBuildSyncAsk& operator=(const EquipmentRpcEquipBuildSyncAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipBuildSyncAsk& default_instance();

  void Swap(EquipmentRpcEquipBuildSyncAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipBuildSyncAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipBuildSyncAsk& from);
  void MergeFrom(const EquipmentRpcEquipBuildSyncAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipBuildSyncAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipBuildSyncAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipBuildSyncReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipBuildSyncReply();
  virtual ~EquipmentRpcEquipBuildSyncReply();

  EquipmentRpcEquipBuildSyncReply(const EquipmentRpcEquipBuildSyncReply& from);

  inline EquipmentRpcEquipBuildSyncReply& operator=(const EquipmentRpcEquipBuildSyncReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipBuildSyncReply& default_instance();

  void Swap(EquipmentRpcEquipBuildSyncReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipBuildSyncReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipBuildSyncReply& from);
  void MergeFrom(const EquipmentRpcEquipBuildSyncReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .EquipBuildAtf Atf_list = 2;
  inline int atf_list_size() const;
  inline void clear_atf_list();
  static const int kAtfListFieldNumber = 2;
  inline const ::EquipBuildAtf& atf_list(int index) const;
  inline ::EquipBuildAtf* mutable_atf_list(int index);
  inline ::EquipBuildAtf* add_atf_list();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipBuildAtf >&
      atf_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipBuildAtf >*
      mutable_atf_list();

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipBuildSyncReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EquipBuildAtf > atf_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipBuildSyncReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipBuildAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipBuildAsk();
  virtual ~EquipmentRpcEquipBuildAsk();

  EquipmentRpcEquipBuildAsk(const EquipmentRpcEquipBuildAsk& from);

  inline EquipmentRpcEquipBuildAsk& operator=(const EquipmentRpcEquipBuildAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipBuildAsk& default_instance();

  void Swap(EquipmentRpcEquipBuildAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipBuildAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipBuildAsk& from);
  void MergeFrom(const EquipmentRpcEquipBuildAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Level = 1 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Occupation = 2 [default = -1];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 2;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // optional int32 Slot_type = 3 [default = -1];
  inline bool has_slot_type() const;
  inline void clear_slot_type();
  static const int kSlotTypeFieldNumber = 3;
  inline ::google::protobuf::int32 slot_type() const;
  inline void set_slot_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipBuildAsk)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_slot_type();
  inline void clear_has_slot_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 slot_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipBuildAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipBuildReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipBuildReply();
  virtual ~EquipmentRpcEquipBuildReply();

  EquipmentRpcEquipBuildReply(const EquipmentRpcEquipBuildReply& from);

  inline EquipmentRpcEquipBuildReply& operator=(const EquipmentRpcEquipBuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipBuildReply& default_instance();

  void Swap(EquipmentRpcEquipBuildReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipBuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipBuildReply& from);
  void MergeFrom(const EquipmentRpcEquipBuildReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EquipBuildAtf EquipBuildAtf = 2;
  inline bool has_equipbuildatf() const;
  inline void clear_equipbuildatf();
  static const int kEquipBuildAtfFieldNumber = 2;
  inline const ::EquipBuildAtf& equipbuildatf() const;
  inline ::EquipBuildAtf* mutable_equipbuildatf();
  inline ::EquipBuildAtf* release_equipbuildatf();
  inline void set_allocated_equipbuildatf(::EquipBuildAtf* equipbuildatf);

  // optional .ItemObj Equip = 3;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 3;
  inline const ::ItemObj& equip() const;
  inline ::ItemObj* mutable_equip();
  inline ::ItemObj* release_equip();
  inline void set_allocated_equip(::ItemObj* equip);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipBuildReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_equipbuildatf();
  inline void clear_has_equipbuildatf();
  inline void set_has_equip();
  inline void clear_has_equip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EquipBuildAtf* equipbuildatf_;
  ::ItemObj* equip_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipBuildReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcGetPlayerInfoAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcGetPlayerInfoAsk();
  virtual ~EquipmentRpcGetPlayerInfoAsk();

  EquipmentRpcGetPlayerInfoAsk(const EquipmentRpcGetPlayerInfoAsk& from);

  inline EquipmentRpcGetPlayerInfoAsk& operator=(const EquipmentRpcGetPlayerInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcGetPlayerInfoAsk& default_instance();

  void Swap(EquipmentRpcGetPlayerInfoAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcGetPlayerInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcGetPlayerInfoAsk& from);
  void MergeFrom(const EquipmentRpcGetPlayerInfoAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Player_guid = 1 [default = 0];
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcGetPlayerInfoAsk)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcGetPlayerInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcGetPlayerInfoReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcGetPlayerInfoReply();
  virtual ~EquipmentRpcGetPlayerInfoReply();

  EquipmentRpcGetPlayerInfoReply(const EquipmentRpcGetPlayerInfoReply& from);

  inline EquipmentRpcGetPlayerInfoReply& operator=(const EquipmentRpcGetPlayerInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcGetPlayerInfoReply& default_instance();

  void Swap(EquipmentRpcGetPlayerInfoReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcGetPlayerInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcGetPlayerInfoReply& from);
  void MergeFrom(const EquipmentRpcGetPlayerInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string Player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint64 Player_guid = 3 [default = 0];
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // optional int32 Avatar_id = 4 [default = -1];
  inline bool has_avatar_id() const;
  inline void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 4;
  inline ::google::protobuf::int32 avatar_id() const;
  inline void set_avatar_id(::google::protobuf::int32 value);

  // optional int32 Player_level = 5 [default = -1];
  inline bool has_player_level() const;
  inline void clear_player_level();
  static const int kPlayerLevelFieldNumber = 5;
  inline ::google::protobuf::int32 player_level() const;
  inline void set_player_level(::google::protobuf::int32 value);

  // optional int32 Avatar_frame_id = 6 [default = -1];
  inline bool has_avatar_frame_id() const;
  inline void clear_avatar_frame_id();
  static const int kAvatarFrameIdFieldNumber = 6;
  inline ::google::protobuf::int32 avatar_frame_id() const;
  inline void set_avatar_frame_id(::google::protobuf::int32 value);

  // optional int32 Config_id = 7 [default = -1];
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 7;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional uint64 Guild_id = 8 [default = 0];
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 8;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // optional string Guild_name = 9;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // repeated .ItemData Equip_data = 10;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 10;
  inline const ::ItemData& equip_data(int index) const;
  inline ::ItemData* mutable_equip_data(int index);
  inline ::ItemData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equip_data();

  // repeated .SuitInfo Suit_infos = 11;
  inline int suit_infos_size() const;
  inline void clear_suit_infos();
  static const int kSuitInfosFieldNumber = 11;
  inline const ::SuitInfo& suit_infos(int index) const;
  inline ::SuitInfo* mutable_suit_infos(int index);
  inline ::SuitInfo* add_suit_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
      suit_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
      mutable_suit_infos();

  // repeated .EquipSlotInfo EquipSlotData = 12;
  inline int equipslotdata_size() const;
  inline void clear_equipslotdata();
  static const int kEquipSlotDataFieldNumber = 12;
  inline const ::EquipSlotInfo& equipslotdata(int index) const;
  inline ::EquipSlotInfo* mutable_equipslotdata(int index);
  inline ::EquipSlotInfo* add_equipslotdata();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipSlotInfo >&
      equipslotdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipSlotInfo >*
      mutable_equipslotdata();

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  inline int equipslotstarlist_size() const;
  inline void clear_equipslotstarlist();
  static const int kEquipSlotStarListFieldNumber = 13;
  inline const ::EquipSlotStarInfo& equipslotstarlist(int index) const;
  inline ::EquipSlotStarInfo* mutable_equipslotstarlist(int index);
  inline ::EquipSlotStarInfo* add_equipslotstarlist();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipSlotStarInfo >&
      equipslotstarlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipSlotStarInfo >*
      mutable_equipslotstarlist();

  // repeated .JewelInfo JewelInfos = 14;
  inline int jewelinfos_size() const;
  inline void clear_jewelinfos();
  static const int kJewelInfosFieldNumber = 14;
  inline const ::JewelInfo& jewelinfos(int index) const;
  inline ::JewelInfo* mutable_jewelinfos(int index);
  inline ::JewelInfo* add_jewelinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::JewelInfo >&
      jewelinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::JewelInfo >*
      mutable_jewelinfos();

  // optional int32 BattleScore = 16 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 16;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // optional .ItemData Pet_item_data = 18;
  inline bool has_pet_item_data() const;
  inline void clear_pet_item_data();
  static const int kPetItemDataFieldNumber = 18;
  inline const ::ItemData& pet_item_data() const;
  inline ::ItemData* mutable_pet_item_data();
  inline ::ItemData* release_pet_item_data();
  inline void set_allocated_pet_item_data(::ItemData* pet_item_data);

  // optional int32 TreasureHair = 19 [default = -1];
  inline bool has_treasurehair() const;
  inline void clear_treasurehair();
  static const int kTreasureHairFieldNumber = 19;
  inline ::google::protobuf::int32 treasurehair() const;
  inline void set_treasurehair(::google::protobuf::int32 value);

  // optional int32 TreasureHead = 20 [default = -1];
  inline bool has_treasurehead() const;
  inline void clear_treasurehead();
  static const int kTreasureHeadFieldNumber = 20;
  inline ::google::protobuf::int32 treasurehead() const;
  inline void set_treasurehead(::google::protobuf::int32 value);

  // optional int32 TreasureBody = 21 [default = -1];
  inline bool has_treasurebody() const;
  inline void clear_treasurebody();
  static const int kTreasureBodyFieldNumber = 21;
  inline ::google::protobuf::int32 treasurebody() const;
  inline void set_treasurebody(::google::protobuf::int32 value);

  // optional int32 TreasureWeapon = 22 [default = -1];
  inline bool has_treasureweapon() const;
  inline void clear_treasureweapon();
  static const int kTreasureWeaponFieldNumber = 22;
  inline ::google::protobuf::int32 treasureweapon() const;
  inline void set_treasureweapon(::google::protobuf::int32 value);

  // optional int32 TreasureWing = 23 [default = -1];
  inline bool has_treasurewing() const;
  inline void clear_treasurewing();
  static const int kTreasureWingFieldNumber = 23;
  inline ::google::protobuf::int32 treasurewing() const;
  inline void set_treasurewing(::google::protobuf::int32 value);

  // optional uint64 TeamId = 24 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 24;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcGetPlayerInfoReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_avatar_id();
  inline void clear_has_avatar_id();
  inline void set_has_player_level();
  inline void clear_has_player_level();
  inline void set_has_avatar_frame_id();
  inline void clear_has_avatar_frame_id();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_pet_item_data();
  inline void clear_has_pet_item_data();
  inline void set_has_treasurehair();
  inline void clear_has_treasurehair();
  inline void set_has_treasurehead();
  inline void clear_has_treasurehead();
  inline void set_has_treasurebody();
  inline void clear_has_treasurebody();
  inline void set_has_treasureweapon();
  inline void clear_has_treasureweapon();
  inline void set_has_treasurewing();
  inline void clear_has_treasurewing();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 avatar_id_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 avatar_frame_id_;
  ::google::protobuf::uint64 guild_id_;
  ::std::string* guild_name_;
  ::google::protobuf::RepeatedPtrField< ::ItemData > equip_data_;
  ::google::protobuf::RepeatedPtrField< ::SuitInfo > suit_infos_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::RepeatedPtrField< ::EquipSlotInfo > equipslotdata_;
  ::google::protobuf::RepeatedPtrField< ::EquipSlotStarInfo > equipslotstarlist_;
  ::google::protobuf::RepeatedPtrField< ::JewelInfo > jewelinfos_;
  ::ItemData* pet_item_data_;
  ::google::protobuf::int32 treasurehair_;
  ::google::protobuf::int32 treasurehead_;
  ::google::protobuf::int32 treasurebody_;
  ::google::protobuf::int32 treasureweapon_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::int32 treasurewing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcGetPlayerInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipInheritAsk : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipInheritAsk();
  virtual ~EquipmentRpcEquipInheritAsk();

  EquipmentRpcEquipInheritAsk(const EquipmentRpcEquipInheritAsk& from);

  inline EquipmentRpcEquipInheritAsk& operator=(const EquipmentRpcEquipInheritAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipInheritAsk& default_instance();

  void Swap(EquipmentRpcEquipInheritAsk* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipInheritAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipInheritAsk& from);
  void MergeFrom(const EquipmentRpcEquipInheritAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ToGuid = 1 [default = 0];
  inline bool has_toguid() const;
  inline void clear_toguid();
  static const int kToGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 toguid() const;
  inline void set_toguid(::google::protobuf::uint64 value);

  // optional uint64 FromGuid = 2 [default = 0];
  inline bool has_fromguid() const;
  inline void clear_fromguid();
  static const int kFromGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 fromguid() const;
  inline void set_fromguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipInheritAsk)
 private:
  inline void set_has_toguid();
  inline void clear_has_toguid();
  inline void set_has_fromguid();
  inline void clear_has_fromguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 toguid_;
  ::google::protobuf::uint64 fromguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipInheritAsk* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRpcEquipInheritReply : public ::google::protobuf::Message {
 public:
  EquipmentRpcEquipInheritReply();
  virtual ~EquipmentRpcEquipInheritReply();

  EquipmentRpcEquipInheritReply(const EquipmentRpcEquipInheritReply& from);

  inline EquipmentRpcEquipInheritReply& operator=(const EquipmentRpcEquipInheritReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRpcEquipInheritReply& default_instance();

  void Swap(EquipmentRpcEquipInheritReply* other);

  // implements Message ----------------------------------------------

  EquipmentRpcEquipInheritReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRpcEquipInheritReply& from);
  void MergeFrom(const EquipmentRpcEquipInheritReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .ItemData NewEquip = 4;
  inline bool has_newequip() const;
  inline void clear_newequip();
  static const int kNewEquipFieldNumber = 4;
  inline const ::ItemData& newequip() const;
  inline ::ItemData* mutable_newequip();
  inline ::ItemData* release_newequip();
  inline void set_allocated_newequip(::ItemData* newequip);

  // repeated .ItemData EquipData = 5;
  inline int equipdata_size() const;
  inline void clear_equipdata();
  static const int kEquipDataFieldNumber = 5;
  inline const ::ItemData& equipdata(int index) const;
  inline ::ItemData* mutable_equipdata(int index);
  inline ::ItemData* add_equipdata();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
      equipdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
      mutable_equipdata();

  // repeated .SuitInfo SuitInfos = 6;
  inline int suitinfos_size() const;
  inline void clear_suitinfos();
  static const int kSuitInfosFieldNumber = 6;
  inline const ::SuitInfo& suitinfos(int index) const;
  inline ::SuitInfo* mutable_suitinfos(int index);
  inline ::SuitInfo* add_suitinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
      suitinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
      mutable_suitinfos();

  // optional uint64 FromGuid = 7 [default = 0];
  inline bool has_fromguid() const;
  inline void clear_fromguid();
  static const int kFromGuidFieldNumber = 7;
  inline ::google::protobuf::uint64 fromguid() const;
  inline void set_fromguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EquipmentRpcEquipInheritReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_newequip();
  inline void clear_has_newequip();
  inline void set_has_fromguid();
  inline void clear_has_fromguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ItemData* newequip_;
  ::google::protobuf::RepeatedPtrField< ::ItemData > equipdata_;
  ::google::protobuf::RepeatedPtrField< ::SuitInfo > suitinfos_;
  ::google::protobuf::uint64 fromguid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentRpc_2eproto();
  friend void protobuf_AssignDesc_EquipmentRpc_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRpc_2eproto();

  void InitAsDefaultInstance();
  static EquipmentRpcEquipInheritReply* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipmentRpcEquipAsk

// optional int32 Pos = 1 [default = -1];
inline bool EquipmentRpcEquipAsk::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipAsk::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipAsk::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipAsk::clear_pos() {
  pos_ = -1;
  clear_has_pos();
}
inline ::google::protobuf::int32 EquipmentRpcEquipAsk::pos() const {
  return pos_;
}
inline void EquipmentRpcEquipAsk::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipReply

// optional int32 Result = 1 [default = -9999];
inline bool EquipmentRpcEquipReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .ItemData Equip_data = 2;
inline int EquipmentRpcEquipReply::equip_data_size() const {
  return equip_data_.size();
}
inline void EquipmentRpcEquipReply::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::ItemData& EquipmentRpcEquipReply::equip_data(int index) const {
  return equip_data_.Get(index);
}
inline ::ItemData* EquipmentRpcEquipReply::mutable_equip_data(int index) {
  return equip_data_.Mutable(index);
}
inline ::ItemData* EquipmentRpcEquipReply::add_equip_data() {
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcEquipReply::equip_data() const {
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcEquipReply::mutable_equip_data() {
  return &equip_data_;
}

// repeated .SuitInfo Suit_infos = 3;
inline int EquipmentRpcEquipReply::suit_infos_size() const {
  return suit_infos_.size();
}
inline void EquipmentRpcEquipReply::clear_suit_infos() {
  suit_infos_.Clear();
}
inline const ::SuitInfo& EquipmentRpcEquipReply::suit_infos(int index) const {
  return suit_infos_.Get(index);
}
inline ::SuitInfo* EquipmentRpcEquipReply::mutable_suit_infos(int index) {
  return suit_infos_.Mutable(index);
}
inline ::SuitInfo* EquipmentRpcEquipReply::add_suit_infos() {
  return suit_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
EquipmentRpcEquipReply::suit_infos() const {
  return suit_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
EquipmentRpcEquipReply::mutable_suit_infos() {
  return &suit_infos_;
}

// optional int32 SlotType = 4 [default = -1];
inline bool EquipmentRpcEquipReply::has_slottype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRpcEquipReply::set_has_slottype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRpcEquipReply::clear_has_slottype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRpcEquipReply::clear_slottype() {
  slottype_ = -1;
  clear_has_slottype();
}
inline ::google::protobuf::int32 EquipmentRpcEquipReply::slottype() const {
  return slottype_;
}
inline void EquipmentRpcEquipReply::set_slottype(::google::protobuf::int32 value) {
  set_has_slottype();
  slottype_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcUnEquipAsk

// optional int32 SlotType = 1 [default = -1];
inline bool EquipmentRpcUnEquipAsk::has_slottype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcUnEquipAsk::set_has_slottype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcUnEquipAsk::clear_has_slottype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcUnEquipAsk::clear_slottype() {
  slottype_ = -1;
  clear_has_slottype();
}
inline ::google::protobuf::int32 EquipmentRpcUnEquipAsk::slottype() const {
  return slottype_;
}
inline void EquipmentRpcUnEquipAsk::set_slottype(::google::protobuf::int32 value) {
  set_has_slottype();
  slottype_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcUnEquipReply

// optional int32 Result = 1 [default = -9999];
inline bool EquipmentRpcUnEquipReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcUnEquipReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcUnEquipReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcUnEquipReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcUnEquipReply::result() const {
  return result_;
}
inline void EquipmentRpcUnEquipReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .ItemData Equip_data = 2;
inline int EquipmentRpcUnEquipReply::equip_data_size() const {
  return equip_data_.size();
}
inline void EquipmentRpcUnEquipReply::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::ItemData& EquipmentRpcUnEquipReply::equip_data(int index) const {
  return equip_data_.Get(index);
}
inline ::ItemData* EquipmentRpcUnEquipReply::mutable_equip_data(int index) {
  return equip_data_.Mutable(index);
}
inline ::ItemData* EquipmentRpcUnEquipReply::add_equip_data() {
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcUnEquipReply::equip_data() const {
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcUnEquipReply::mutable_equip_data() {
  return &equip_data_;
}

// repeated .SuitInfo Suit_infos = 3;
inline int EquipmentRpcUnEquipReply::suit_infos_size() const {
  return suit_infos_.size();
}
inline void EquipmentRpcUnEquipReply::clear_suit_infos() {
  suit_infos_.Clear();
}
inline const ::SuitInfo& EquipmentRpcUnEquipReply::suit_infos(int index) const {
  return suit_infos_.Get(index);
}
inline ::SuitInfo* EquipmentRpcUnEquipReply::mutable_suit_infos(int index) {
  return suit_infos_.Mutable(index);
}
inline ::SuitInfo* EquipmentRpcUnEquipReply::add_suit_infos() {
  return suit_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
EquipmentRpcUnEquipReply::suit_infos() const {
  return suit_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
EquipmentRpcUnEquipReply::mutable_suit_infos() {
  return &suit_infos_;
}

// optional int32 SlotType = 4 [default = -1];
inline bool EquipmentRpcUnEquipReply::has_slottype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRpcUnEquipReply::set_has_slottype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRpcUnEquipReply::clear_has_slottype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRpcUnEquipReply::clear_slottype() {
  slottype_ = -1;
  clear_has_slottype();
}
inline ::google::protobuf::int32 EquipmentRpcUnEquipReply::slottype() const {
  return slottype_;
}
inline void EquipmentRpcUnEquipReply::set_slottype(::google::protobuf::int32 value) {
  set_has_slottype();
  slottype_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcSwitchEquipSetAsk

// optional int32 To_index = 1 [default = -1];
inline bool EquipmentRpcSwitchEquipSetAsk::has_to_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcSwitchEquipSetAsk::set_has_to_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcSwitchEquipSetAsk::clear_has_to_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcSwitchEquipSetAsk::clear_to_index() {
  to_index_ = -1;
  clear_has_to_index();
}
inline ::google::protobuf::int32 EquipmentRpcSwitchEquipSetAsk::to_index() const {
  return to_index_;
}
inline void EquipmentRpcSwitchEquipSetAsk::set_to_index(::google::protobuf::int32 value) {
  set_has_to_index();
  to_index_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcSwitchEquipSetReply

// optional int32 Result = 1 [default = -9999];
inline bool EquipmentRpcSwitchEquipSetReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcSwitchEquipSetReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcSwitchEquipSetReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcSwitchEquipSetReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcSwitchEquipSetReply::result() const {
  return result_;
}
inline void EquipmentRpcSwitchEquipSetReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .ItemData Equip_data = 2;
inline int EquipmentRpcSwitchEquipSetReply::equip_data_size() const {
  return equip_data_.size();
}
inline void EquipmentRpcSwitchEquipSetReply::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::ItemData& EquipmentRpcSwitchEquipSetReply::equip_data(int index) const {
  return equip_data_.Get(index);
}
inline ::ItemData* EquipmentRpcSwitchEquipSetReply::mutable_equip_data(int index) {
  return equip_data_.Mutable(index);
}
inline ::ItemData* EquipmentRpcSwitchEquipSetReply::add_equip_data() {
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcSwitchEquipSetReply::equip_data() const {
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcSwitchEquipSetReply::mutable_equip_data() {
  return &equip_data_;
}

// -------------------------------------------------------------------

// EquipmentRpcSyncEquipAsk

// -------------------------------------------------------------------

// EquipmentRpcSyncEquipReply

// optional int32 Result = 1 [default = -9999];
inline bool EquipmentRpcSyncEquipReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcSyncEquipReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcSyncEquipReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcSyncEquipReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcSyncEquipReply::result() const {
  return result_;
}
inline void EquipmentRpcSyncEquipReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .ItemData Equip_data = 3;
inline int EquipmentRpcSyncEquipReply::equip_data_size() const {
  return equip_data_.size();
}
inline void EquipmentRpcSyncEquipReply::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::ItemData& EquipmentRpcSyncEquipReply::equip_data(int index) const {
  return equip_data_.Get(index);
}
inline ::ItemData* EquipmentRpcSyncEquipReply::mutable_equip_data(int index) {
  return equip_data_.Mutable(index);
}
inline ::ItemData* EquipmentRpcSyncEquipReply::add_equip_data() {
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcSyncEquipReply::equip_data() const {
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcSyncEquipReply::mutable_equip_data() {
  return &equip_data_;
}

// repeated .SuitInfo Suit_infos = 4;
inline int EquipmentRpcSyncEquipReply::suit_infos_size() const {
  return suit_infos_.size();
}
inline void EquipmentRpcSyncEquipReply::clear_suit_infos() {
  suit_infos_.Clear();
}
inline const ::SuitInfo& EquipmentRpcSyncEquipReply::suit_infos(int index) const {
  return suit_infos_.Get(index);
}
inline ::SuitInfo* EquipmentRpcSyncEquipReply::mutable_suit_infos(int index) {
  return suit_infos_.Mutable(index);
}
inline ::SuitInfo* EquipmentRpcSyncEquipReply::add_suit_infos() {
  return suit_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
EquipmentRpcSyncEquipReply::suit_infos() const {
  return suit_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
EquipmentRpcSyncEquipReply::mutable_suit_infos() {
  return &suit_infos_;
}

// -------------------------------------------------------------------

// EquipmentRpcResonanceUnlockAsk

// optional int32 ConfId = 1 [default = -1];
inline bool EquipmentRpcResonanceUnlockAsk::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcResonanceUnlockAsk::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcResonanceUnlockAsk::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcResonanceUnlockAsk::clear_confid() {
  confid_ = -1;
  clear_has_confid();
}
inline ::google::protobuf::int32 EquipmentRpcResonanceUnlockAsk::confid() const {
  return confid_;
}
inline void EquipmentRpcResonanceUnlockAsk::set_confid(::google::protobuf::int32 value) {
  set_has_confid();
  confid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcResonanceUnlockReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcResonanceUnlockReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcResonanceUnlockReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcResonanceUnlockReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcResonanceUnlockReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcResonanceUnlockReply::result() const {
  return result_;
}
inline void EquipmentRpcResonanceUnlockReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipResonanceInfo ResonanceInfo = 2;
inline bool EquipmentRpcResonanceUnlockReply::has_resonanceinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcResonanceUnlockReply::set_has_resonanceinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcResonanceUnlockReply::clear_has_resonanceinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcResonanceUnlockReply::clear_resonanceinfo() {
  if (resonanceinfo_ != NULL) resonanceinfo_->::EquipResonanceInfo::Clear();
  clear_has_resonanceinfo();
}
inline const ::EquipResonanceInfo& EquipmentRpcResonanceUnlockReply::resonanceinfo() const {
  return resonanceinfo_ != NULL ? *resonanceinfo_ : *default_instance_->resonanceinfo_;
}
inline ::EquipResonanceInfo* EquipmentRpcResonanceUnlockReply::mutable_resonanceinfo() {
  set_has_resonanceinfo();
  if (resonanceinfo_ == NULL) resonanceinfo_ = new ::EquipResonanceInfo;
  return resonanceinfo_;
}
inline ::EquipResonanceInfo* EquipmentRpcResonanceUnlockReply::release_resonanceinfo() {
  clear_has_resonanceinfo();
  ::EquipResonanceInfo* temp = resonanceinfo_;
  resonanceinfo_ = NULL;
  return temp;
}
inline void EquipmentRpcResonanceUnlockReply::set_allocated_resonanceinfo(::EquipResonanceInfo* resonanceinfo) {
  delete resonanceinfo_;
  resonanceinfo_ = resonanceinfo;
  if (resonanceinfo) {
    set_has_resonanceinfo();
  } else {
    clear_has_resonanceinfo();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcEquipDoResonanceAsk

// optional int32 ConfId = 1 [default = -1];
inline bool EquipmentRpcEquipDoResonanceAsk::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipDoResonanceAsk::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipDoResonanceAsk::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipDoResonanceAsk::clear_confid() {
  confid_ = -1;
  clear_has_confid();
}
inline ::google::protobuf::int32 EquipmentRpcEquipDoResonanceAsk::confid() const {
  return confid_;
}
inline void EquipmentRpcEquipDoResonanceAsk::set_confid(::google::protobuf::int32 value) {
  set_has_confid();
  confid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipDoResonanceReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipDoResonanceReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipDoResonanceReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipDoResonanceReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipDoResonanceReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipDoResonanceReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipDoResonanceReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipResonanceInfo AddAttr = 2;
inline bool EquipmentRpcEquipDoResonanceReply::has_addattr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipDoResonanceReply::set_has_addattr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipDoResonanceReply::clear_has_addattr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipDoResonanceReply::clear_addattr() {
  if (addattr_ != NULL) addattr_->::EquipResonanceInfo::Clear();
  clear_has_addattr();
}
inline const ::EquipResonanceInfo& EquipmentRpcEquipDoResonanceReply::addattr() const {
  return addattr_ != NULL ? *addattr_ : *default_instance_->addattr_;
}
inline ::EquipResonanceInfo* EquipmentRpcEquipDoResonanceReply::mutable_addattr() {
  set_has_addattr();
  if (addattr_ == NULL) addattr_ = new ::EquipResonanceInfo;
  return addattr_;
}
inline ::EquipResonanceInfo* EquipmentRpcEquipDoResonanceReply::release_addattr() {
  clear_has_addattr();
  ::EquipResonanceInfo* temp = addattr_;
  addattr_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipDoResonanceReply::set_allocated_addattr(::EquipResonanceInfo* addattr) {
  delete addattr_;
  addattr_ = addattr;
  if (addattr) {
    set_has_addattr();
  } else {
    clear_has_addattr();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcEquipResonanceSaveAsk

// optional int32 ConfId = 1 [default = -1];
inline bool EquipmentRpcEquipResonanceSaveAsk::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipResonanceSaveAsk::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipResonanceSaveAsk::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipResonanceSaveAsk::clear_confid() {
  confid_ = -1;
  clear_has_confid();
}
inline ::google::protobuf::int32 EquipmentRpcEquipResonanceSaveAsk::confid() const {
  return confid_;
}
inline void EquipmentRpcEquipResonanceSaveAsk::set_confid(::google::protobuf::int32 value) {
  set_has_confid();
  confid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipResonanceSaveReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipResonanceSaveReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipResonanceSaveReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipResonanceSaveReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipResonanceSaveReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipResonanceSaveReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipResonanceSaveReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipResonanceInfo ResonanceInfo = 2;
inline bool EquipmentRpcEquipResonanceSaveReply::has_resonanceinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipResonanceSaveReply::set_has_resonanceinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipResonanceSaveReply::clear_has_resonanceinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipResonanceSaveReply::clear_resonanceinfo() {
  if (resonanceinfo_ != NULL) resonanceinfo_->::EquipResonanceInfo::Clear();
  clear_has_resonanceinfo();
}
inline const ::EquipResonanceInfo& EquipmentRpcEquipResonanceSaveReply::resonanceinfo() const {
  return resonanceinfo_ != NULL ? *resonanceinfo_ : *default_instance_->resonanceinfo_;
}
inline ::EquipResonanceInfo* EquipmentRpcEquipResonanceSaveReply::mutable_resonanceinfo() {
  set_has_resonanceinfo();
  if (resonanceinfo_ == NULL) resonanceinfo_ = new ::EquipResonanceInfo;
  return resonanceinfo_;
}
inline ::EquipResonanceInfo* EquipmentRpcEquipResonanceSaveReply::release_resonanceinfo() {
  clear_has_resonanceinfo();
  ::EquipResonanceInfo* temp = resonanceinfo_;
  resonanceinfo_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipResonanceSaveReply::set_allocated_resonanceinfo(::EquipResonanceInfo* resonanceinfo) {
  delete resonanceinfo_;
  resonanceinfo_ = resonanceinfo;
  if (resonanceinfo) {
    set_has_resonanceinfo();
  } else {
    clear_has_resonanceinfo();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcEquipResonanceSyncAsk

// -------------------------------------------------------------------

// EquipmentRpcEquipResonanceSyncReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipResonanceSyncReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipResonanceSyncReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipResonanceSyncReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipResonanceSyncReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipResonanceSyncReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipResonanceSyncReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipResonanceData ResonanceData = 2;
inline bool EquipmentRpcEquipResonanceSyncReply::has_resonancedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipResonanceSyncReply::set_has_resonancedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipResonanceSyncReply::clear_has_resonancedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipResonanceSyncReply::clear_resonancedata() {
  if (resonancedata_ != NULL) resonancedata_->::EquipResonanceData::Clear();
  clear_has_resonancedata();
}
inline const ::EquipResonanceData& EquipmentRpcEquipResonanceSyncReply::resonancedata() const {
  return resonancedata_ != NULL ? *resonancedata_ : *default_instance_->resonancedata_;
}
inline ::EquipResonanceData* EquipmentRpcEquipResonanceSyncReply::mutable_resonancedata() {
  set_has_resonancedata();
  if (resonancedata_ == NULL) resonancedata_ = new ::EquipResonanceData;
  return resonancedata_;
}
inline ::EquipResonanceData* EquipmentRpcEquipResonanceSyncReply::release_resonancedata() {
  clear_has_resonancedata();
  ::EquipResonanceData* temp = resonancedata_;
  resonancedata_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipResonanceSyncReply::set_allocated_resonancedata(::EquipResonanceData* resonancedata) {
  delete resonancedata_;
  resonancedata_ = resonancedata;
  if (resonancedata) {
    set_has_resonancedata();
  } else {
    clear_has_resonancedata();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcEquipWashSyncAsk

// -------------------------------------------------------------------

// EquipmentRpcEquipWashSyncReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipWashSyncReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipWashSyncReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipWashSyncReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipWashSyncReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashSyncReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipWashSyncReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipWashData EquipWashData = 2;
inline bool EquipmentRpcEquipWashSyncReply::has_equipwashdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipWashSyncReply::set_has_equipwashdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipWashSyncReply::clear_has_equipwashdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipWashSyncReply::clear_equipwashdata() {
  if (equipwashdata_ != NULL) equipwashdata_->::EquipWashData::Clear();
  clear_has_equipwashdata();
}
inline const ::EquipWashData& EquipmentRpcEquipWashSyncReply::equipwashdata() const {
  return equipwashdata_ != NULL ? *equipwashdata_ : *default_instance_->equipwashdata_;
}
inline ::EquipWashData* EquipmentRpcEquipWashSyncReply::mutable_equipwashdata() {
  set_has_equipwashdata();
  if (equipwashdata_ == NULL) equipwashdata_ = new ::EquipWashData;
  return equipwashdata_;
}
inline ::EquipWashData* EquipmentRpcEquipWashSyncReply::release_equipwashdata() {
  clear_has_equipwashdata();
  ::EquipWashData* temp = equipwashdata_;
  equipwashdata_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipWashSyncReply::set_allocated_equipwashdata(::EquipWashData* equipwashdata) {
  delete equipwashdata_;
  equipwashdata_ = equipwashdata;
  if (equipwashdata) {
    set_has_equipwashdata();
  } else {
    clear_has_equipwashdata();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcEquipWashAsk

// optional uint64 Guid = 1 [default = 0];
inline bool EquipmentRpcEquipWashAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipWashAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipWashAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipWashAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 EquipmentRpcEquipWashAsk::guid() const {
  return guid_;
}
inline void EquipmentRpcEquipWashAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// repeated int32 LockedIndex = 2;
inline int EquipmentRpcEquipWashAsk::lockedindex_size() const {
  return lockedindex_.size();
}
inline void EquipmentRpcEquipWashAsk::clear_lockedindex() {
  lockedindex_.Clear();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashAsk::lockedindex(int index) const {
  return lockedindex_.Get(index);
}
inline void EquipmentRpcEquipWashAsk::set_lockedindex(int index, ::google::protobuf::int32 value) {
  lockedindex_.Set(index, value);
}
inline void EquipmentRpcEquipWashAsk::add_lockedindex(::google::protobuf::int32 value) {
  lockedindex_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentRpcEquipWashAsk::lockedindex() const {
  return lockedindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentRpcEquipWashAsk::mutable_lockedindex() {
  return &lockedindex_;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipWashReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipWashReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipWashReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipWashReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipWashReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipWashReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipWashInfo EquipWashInfo = 2;
inline bool EquipmentRpcEquipWashReply::has_equipwashinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipWashReply::set_has_equipwashinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipWashReply::clear_has_equipwashinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipWashReply::clear_equipwashinfo() {
  if (equipwashinfo_ != NULL) equipwashinfo_->::EquipWashInfo::Clear();
  clear_has_equipwashinfo();
}
inline const ::EquipWashInfo& EquipmentRpcEquipWashReply::equipwashinfo() const {
  return equipwashinfo_ != NULL ? *equipwashinfo_ : *default_instance_->equipwashinfo_;
}
inline ::EquipWashInfo* EquipmentRpcEquipWashReply::mutable_equipwashinfo() {
  set_has_equipwashinfo();
  if (equipwashinfo_ == NULL) equipwashinfo_ = new ::EquipWashInfo;
  return equipwashinfo_;
}
inline ::EquipWashInfo* EquipmentRpcEquipWashReply::release_equipwashinfo() {
  clear_has_equipwashinfo();
  ::EquipWashInfo* temp = equipwashinfo_;
  equipwashinfo_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipWashReply::set_allocated_equipwashinfo(::EquipWashInfo* equipwashinfo) {
  delete equipwashinfo_;
  equipwashinfo_ = equipwashinfo;
  if (equipwashinfo) {
    set_has_equipwashinfo();
  } else {
    clear_has_equipwashinfo();
  }
}

// optional int32 LeftTimes = 3 [default = -1];
inline bool EquipmentRpcEquipWashReply::has_lefttimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRpcEquipWashReply::set_has_lefttimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRpcEquipWashReply::clear_has_lefttimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRpcEquipWashReply::clear_lefttimes() {
  lefttimes_ = -1;
  clear_has_lefttimes();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashReply::lefttimes() const {
  return lefttimes_;
}
inline void EquipmentRpcEquipWashReply::set_lefttimes(::google::protobuf::int32 value) {
  set_has_lefttimes();
  lefttimes_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipWashSaveAsk

// optional uint64 Guid = 1 [default = 0];
inline bool EquipmentRpcEquipWashSaveAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipWashSaveAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipWashSaveAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipWashSaveAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 EquipmentRpcEquipWashSaveAsk::guid() const {
  return guid_;
}
inline void EquipmentRpcEquipWashSaveAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipWashSaveReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipWashSaveReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipWashSaveReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipWashSaveReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipWashSaveReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashSaveReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipWashSaveReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .ItemData ItemData = 2;
inline bool EquipmentRpcEquipWashSaveReply::has_itemdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipWashSaveReply::set_has_itemdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipWashSaveReply::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipWashSaveReply::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::ItemData& EquipmentRpcEquipWashSaveReply::itemdata() const {
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::ItemData* EquipmentRpcEquipWashSaveReply::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::ItemData;
  return itemdata_;
}
inline ::ItemData* EquipmentRpcEquipWashSaveReply::release_itemdata() {
  clear_has_itemdata();
  ::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipWashSaveReply::set_allocated_itemdata(::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
}

// repeated int32 LockedIndex = 3;
inline int EquipmentRpcEquipWashSaveReply::lockedindex_size() const {
  return lockedindex_.size();
}
inline void EquipmentRpcEquipWashSaveReply::clear_lockedindex() {
  lockedindex_.Clear();
}
inline ::google::protobuf::int32 EquipmentRpcEquipWashSaveReply::lockedindex(int index) const {
  return lockedindex_.Get(index);
}
inline void EquipmentRpcEquipWashSaveReply::set_lockedindex(int index, ::google::protobuf::int32 value) {
  lockedindex_.Set(index, value);
}
inline void EquipmentRpcEquipWashSaveReply::add_lockedindex(::google::protobuf::int32 value) {
  lockedindex_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentRpcEquipWashSaveReply::lockedindex() const {
  return lockedindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentRpcEquipWashSaveReply::mutable_lockedindex() {
  return &lockedindex_;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipBuildSyncAsk

// -------------------------------------------------------------------

// EquipmentRpcEquipBuildSyncReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipBuildSyncReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipBuildSyncReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipBuildSyncReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipBuildSyncReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipBuildSyncReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipBuildSyncReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .EquipBuildAtf Atf_list = 2;
inline int EquipmentRpcEquipBuildSyncReply::atf_list_size() const {
  return atf_list_.size();
}
inline void EquipmentRpcEquipBuildSyncReply::clear_atf_list() {
  atf_list_.Clear();
}
inline const ::EquipBuildAtf& EquipmentRpcEquipBuildSyncReply::atf_list(int index) const {
  return atf_list_.Get(index);
}
inline ::EquipBuildAtf* EquipmentRpcEquipBuildSyncReply::mutable_atf_list(int index) {
  return atf_list_.Mutable(index);
}
inline ::EquipBuildAtf* EquipmentRpcEquipBuildSyncReply::add_atf_list() {
  return atf_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipBuildAtf >&
EquipmentRpcEquipBuildSyncReply::atf_list() const {
  return atf_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipBuildAtf >*
EquipmentRpcEquipBuildSyncReply::mutable_atf_list() {
  return &atf_list_;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipBuildAsk

// optional int32 Level = 1 [default = -1];
inline bool EquipmentRpcEquipBuildAsk::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipBuildAsk::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipBuildAsk::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipBuildAsk::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 EquipmentRpcEquipBuildAsk::level() const {
  return level_;
}
inline void EquipmentRpcEquipBuildAsk::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Occupation = 2 [default = -1];
inline bool EquipmentRpcEquipBuildAsk::has_occupation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipBuildAsk::set_has_occupation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipBuildAsk::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipBuildAsk::clear_occupation() {
  occupation_ = -1;
  clear_has_occupation();
}
inline ::google::protobuf::int32 EquipmentRpcEquipBuildAsk::occupation() const {
  return occupation_;
}
inline void EquipmentRpcEquipBuildAsk::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// optional int32 Slot_type = 3 [default = -1];
inline bool EquipmentRpcEquipBuildAsk::has_slot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRpcEquipBuildAsk::set_has_slot_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRpcEquipBuildAsk::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRpcEquipBuildAsk::clear_slot_type() {
  slot_type_ = -1;
  clear_has_slot_type();
}
inline ::google::protobuf::int32 EquipmentRpcEquipBuildAsk::slot_type() const {
  return slot_type_;
}
inline void EquipmentRpcEquipBuildAsk::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipBuildReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipBuildReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipBuildReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipBuildReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipBuildReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipBuildReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipBuildReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .EquipBuildAtf EquipBuildAtf = 2;
inline bool EquipmentRpcEquipBuildReply::has_equipbuildatf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipBuildReply::set_has_equipbuildatf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipBuildReply::clear_has_equipbuildatf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipBuildReply::clear_equipbuildatf() {
  if (equipbuildatf_ != NULL) equipbuildatf_->::EquipBuildAtf::Clear();
  clear_has_equipbuildatf();
}
inline const ::EquipBuildAtf& EquipmentRpcEquipBuildReply::equipbuildatf() const {
  return equipbuildatf_ != NULL ? *equipbuildatf_ : *default_instance_->equipbuildatf_;
}
inline ::EquipBuildAtf* EquipmentRpcEquipBuildReply::mutable_equipbuildatf() {
  set_has_equipbuildatf();
  if (equipbuildatf_ == NULL) equipbuildatf_ = new ::EquipBuildAtf;
  return equipbuildatf_;
}
inline ::EquipBuildAtf* EquipmentRpcEquipBuildReply::release_equipbuildatf() {
  clear_has_equipbuildatf();
  ::EquipBuildAtf* temp = equipbuildatf_;
  equipbuildatf_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipBuildReply::set_allocated_equipbuildatf(::EquipBuildAtf* equipbuildatf) {
  delete equipbuildatf_;
  equipbuildatf_ = equipbuildatf;
  if (equipbuildatf) {
    set_has_equipbuildatf();
  } else {
    clear_has_equipbuildatf();
  }
}

// optional .ItemObj Equip = 3;
inline bool EquipmentRpcEquipBuildReply::has_equip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRpcEquipBuildReply::set_has_equip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRpcEquipBuildReply::clear_has_equip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRpcEquipBuildReply::clear_equip() {
  if (equip_ != NULL) equip_->::ItemObj::Clear();
  clear_has_equip();
}
inline const ::ItemObj& EquipmentRpcEquipBuildReply::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::ItemObj* EquipmentRpcEquipBuildReply::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::ItemObj;
  return equip_;
}
inline ::ItemObj* EquipmentRpcEquipBuildReply::release_equip() {
  clear_has_equip();
  ::ItemObj* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipBuildReply::set_allocated_equip(::ItemObj* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// -------------------------------------------------------------------

// EquipmentRpcGetPlayerInfoAsk

// optional uint64 Player_guid = 1 [default = 0];
inline bool EquipmentRpcGetPlayerInfoAsk::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcGetPlayerInfoAsk::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcGetPlayerInfoAsk::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcGetPlayerInfoAsk::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 EquipmentRpcGetPlayerInfoAsk::player_guid() const {
  return player_guid_;
}
inline void EquipmentRpcGetPlayerInfoAsk::set_player_guid(::google::protobuf::uint64 value) {
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcGetPlayerInfoReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::result() const {
  return result_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string Player_name = 2;
inline bool EquipmentRpcGetPlayerInfoReply::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& EquipmentRpcGetPlayerInfoReply::player_name() const {
  return *player_name_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void EquipmentRpcGetPlayerInfoReply::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void EquipmentRpcGetPlayerInfoReply::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentRpcGetPlayerInfoReply::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* EquipmentRpcGetPlayerInfoReply::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentRpcGetPlayerInfoReply::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 Player_guid = 3 [default = 0];
inline bool EquipmentRpcGetPlayerInfoReply::has_player_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_player_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 EquipmentRpcGetPlayerInfoReply::player_guid() const {
  return player_guid_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_player_guid(::google::protobuf::uint64 value) {
  set_has_player_guid();
  player_guid_ = value;
}

// optional int32 Avatar_id = 4 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_avatar_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_avatar_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_avatar_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_avatar_id() {
  avatar_id_ = -1;
  clear_has_avatar_id();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::avatar_id() const {
  return avatar_id_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_avatar_id(::google::protobuf::int32 value) {
  set_has_avatar_id();
  avatar_id_ = value;
}

// optional int32 Player_level = 5 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_player_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_player_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_player_level() {
  player_level_ = -1;
  clear_has_player_level();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::player_level() const {
  return player_level_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
}

// optional int32 Avatar_frame_id = 6 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_avatar_frame_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_avatar_frame_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_avatar_frame_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_avatar_frame_id() {
  avatar_frame_id_ = -1;
  clear_has_avatar_frame_id();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::avatar_frame_id() const {
  return avatar_frame_id_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_avatar_frame_id(::google::protobuf::int32 value) {
  set_has_avatar_frame_id();
  avatar_frame_id_ = value;
}

// optional int32 Config_id = 7 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_config_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_config_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_config_id() {
  config_id_ = -1;
  clear_has_config_id();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::config_id() const {
  return config_id_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint64 Guild_id = 8 [default = 0];
inline bool EquipmentRpcGetPlayerInfoReply::has_guild_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_guild_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
}
inline ::google::protobuf::uint64 EquipmentRpcGetPlayerInfoReply::guild_id() const {
  return guild_id_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_guild_id(::google::protobuf::uint64 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string Guild_name = 9;
inline bool EquipmentRpcGetPlayerInfoReply::has_guild_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_guild_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& EquipmentRpcGetPlayerInfoReply::guild_name() const {
  return *guild_name_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void EquipmentRpcGetPlayerInfoReply::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void EquipmentRpcGetPlayerInfoReply::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentRpcGetPlayerInfoReply::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* EquipmentRpcGetPlayerInfoReply::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentRpcGetPlayerInfoReply::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ItemData Equip_data = 10;
inline int EquipmentRpcGetPlayerInfoReply::equip_data_size() const {
  return equip_data_.size();
}
inline void EquipmentRpcGetPlayerInfoReply::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::ItemData& EquipmentRpcGetPlayerInfoReply::equip_data(int index) const {
  return equip_data_.Get(index);
}
inline ::ItemData* EquipmentRpcGetPlayerInfoReply::mutable_equip_data(int index) {
  return equip_data_.Mutable(index);
}
inline ::ItemData* EquipmentRpcGetPlayerInfoReply::add_equip_data() {
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcGetPlayerInfoReply::equip_data() const {
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcGetPlayerInfoReply::mutable_equip_data() {
  return &equip_data_;
}

// repeated .SuitInfo Suit_infos = 11;
inline int EquipmentRpcGetPlayerInfoReply::suit_infos_size() const {
  return suit_infos_.size();
}
inline void EquipmentRpcGetPlayerInfoReply::clear_suit_infos() {
  suit_infos_.Clear();
}
inline const ::SuitInfo& EquipmentRpcGetPlayerInfoReply::suit_infos(int index) const {
  return suit_infos_.Get(index);
}
inline ::SuitInfo* EquipmentRpcGetPlayerInfoReply::mutable_suit_infos(int index) {
  return suit_infos_.Mutable(index);
}
inline ::SuitInfo* EquipmentRpcGetPlayerInfoReply::add_suit_infos() {
  return suit_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
EquipmentRpcGetPlayerInfoReply::suit_infos() const {
  return suit_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
EquipmentRpcGetPlayerInfoReply::mutable_suit_infos() {
  return &suit_infos_;
}

// repeated .EquipSlotInfo EquipSlotData = 12;
inline int EquipmentRpcGetPlayerInfoReply::equipslotdata_size() const {
  return equipslotdata_.size();
}
inline void EquipmentRpcGetPlayerInfoReply::clear_equipslotdata() {
  equipslotdata_.Clear();
}
inline const ::EquipSlotInfo& EquipmentRpcGetPlayerInfoReply::equipslotdata(int index) const {
  return equipslotdata_.Get(index);
}
inline ::EquipSlotInfo* EquipmentRpcGetPlayerInfoReply::mutable_equipslotdata(int index) {
  return equipslotdata_.Mutable(index);
}
inline ::EquipSlotInfo* EquipmentRpcGetPlayerInfoReply::add_equipslotdata() {
  return equipslotdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipSlotInfo >&
EquipmentRpcGetPlayerInfoReply::equipslotdata() const {
  return equipslotdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipSlotInfo >*
EquipmentRpcGetPlayerInfoReply::mutable_equipslotdata() {
  return &equipslotdata_;
}

// repeated .EquipSlotStarInfo EquipSlotStarList = 13;
inline int EquipmentRpcGetPlayerInfoReply::equipslotstarlist_size() const {
  return equipslotstarlist_.size();
}
inline void EquipmentRpcGetPlayerInfoReply::clear_equipslotstarlist() {
  equipslotstarlist_.Clear();
}
inline const ::EquipSlotStarInfo& EquipmentRpcGetPlayerInfoReply::equipslotstarlist(int index) const {
  return equipslotstarlist_.Get(index);
}
inline ::EquipSlotStarInfo* EquipmentRpcGetPlayerInfoReply::mutable_equipslotstarlist(int index) {
  return equipslotstarlist_.Mutable(index);
}
inline ::EquipSlotStarInfo* EquipmentRpcGetPlayerInfoReply::add_equipslotstarlist() {
  return equipslotstarlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipSlotStarInfo >&
EquipmentRpcGetPlayerInfoReply::equipslotstarlist() const {
  return equipslotstarlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipSlotStarInfo >*
EquipmentRpcGetPlayerInfoReply::mutable_equipslotstarlist() {
  return &equipslotstarlist_;
}

// repeated .JewelInfo JewelInfos = 14;
inline int EquipmentRpcGetPlayerInfoReply::jewelinfos_size() const {
  return jewelinfos_.size();
}
inline void EquipmentRpcGetPlayerInfoReply::clear_jewelinfos() {
  jewelinfos_.Clear();
}
inline const ::JewelInfo& EquipmentRpcGetPlayerInfoReply::jewelinfos(int index) const {
  return jewelinfos_.Get(index);
}
inline ::JewelInfo* EquipmentRpcGetPlayerInfoReply::mutable_jewelinfos(int index) {
  return jewelinfos_.Mutable(index);
}
inline ::JewelInfo* EquipmentRpcGetPlayerInfoReply::add_jewelinfos() {
  return jewelinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JewelInfo >&
EquipmentRpcGetPlayerInfoReply::jewelinfos() const {
  return jewelinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::JewelInfo >*
EquipmentRpcGetPlayerInfoReply::mutable_jewelinfos() {
  return &jewelinfos_;
}

// optional int32 BattleScore = 16 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_battlescore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_battlescore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::battlescore() const {
  return battlescore_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// optional .ItemData Pet_item_data = 18;
inline bool EquipmentRpcGetPlayerInfoReply::has_pet_item_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_pet_item_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_pet_item_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_pet_item_data() {
  if (pet_item_data_ != NULL) pet_item_data_->::ItemData::Clear();
  clear_has_pet_item_data();
}
inline const ::ItemData& EquipmentRpcGetPlayerInfoReply::pet_item_data() const {
  return pet_item_data_ != NULL ? *pet_item_data_ : *default_instance_->pet_item_data_;
}
inline ::ItemData* EquipmentRpcGetPlayerInfoReply::mutable_pet_item_data() {
  set_has_pet_item_data();
  if (pet_item_data_ == NULL) pet_item_data_ = new ::ItemData;
  return pet_item_data_;
}
inline ::ItemData* EquipmentRpcGetPlayerInfoReply::release_pet_item_data() {
  clear_has_pet_item_data();
  ::ItemData* temp = pet_item_data_;
  pet_item_data_ = NULL;
  return temp;
}
inline void EquipmentRpcGetPlayerInfoReply::set_allocated_pet_item_data(::ItemData* pet_item_data) {
  delete pet_item_data_;
  pet_item_data_ = pet_item_data;
  if (pet_item_data) {
    set_has_pet_item_data();
  } else {
    clear_has_pet_item_data();
  }
}

// optional int32 TreasureHair = 19 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_treasurehair() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_treasurehair() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_treasurehair() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_treasurehair() {
  treasurehair_ = -1;
  clear_has_treasurehair();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::treasurehair() const {
  return treasurehair_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_treasurehair(::google::protobuf::int32 value) {
  set_has_treasurehair();
  treasurehair_ = value;
}

// optional int32 TreasureHead = 20 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_treasurehead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_treasurehead() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_treasurehead() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_treasurehead() {
  treasurehead_ = -1;
  clear_has_treasurehead();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::treasurehead() const {
  return treasurehead_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_treasurehead(::google::protobuf::int32 value) {
  set_has_treasurehead();
  treasurehead_ = value;
}

// optional int32 TreasureBody = 21 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_treasurebody() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_treasurebody() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_treasurebody() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_treasurebody() {
  treasurebody_ = -1;
  clear_has_treasurebody();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::treasurebody() const {
  return treasurebody_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_treasurebody(::google::protobuf::int32 value) {
  set_has_treasurebody();
  treasurebody_ = value;
}

// optional int32 TreasureWeapon = 22 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_treasureweapon() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_treasureweapon() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_treasureweapon() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_treasureweapon() {
  treasureweapon_ = -1;
  clear_has_treasureweapon();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::treasureweapon() const {
  return treasureweapon_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_treasureweapon(::google::protobuf::int32 value) {
  set_has_treasureweapon();
  treasureweapon_ = value;
}

// optional int32 TreasureWing = 23 [default = -1];
inline bool EquipmentRpcGetPlayerInfoReply::has_treasurewing() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_treasurewing() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_treasurewing() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_treasurewing() {
  treasurewing_ = -1;
  clear_has_treasurewing();
}
inline ::google::protobuf::int32 EquipmentRpcGetPlayerInfoReply::treasurewing() const {
  return treasurewing_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_treasurewing(::google::protobuf::int32 value) {
  set_has_treasurewing();
  treasurewing_ = value;
}

// optional uint64 TeamId = 24 [default = 0];
inline bool EquipmentRpcGetPlayerInfoReply::has_teamid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EquipmentRpcGetPlayerInfoReply::set_has_teamid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EquipmentRpcGetPlayerInfoReply::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 EquipmentRpcGetPlayerInfoReply::teamid() const {
  return teamid_;
}
inline void EquipmentRpcGetPlayerInfoReply::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipInheritAsk

// optional uint64 ToGuid = 1 [default = 0];
inline bool EquipmentRpcEquipInheritAsk::has_toguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipInheritAsk::set_has_toguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipInheritAsk::clear_has_toguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipInheritAsk::clear_toguid() {
  toguid_ = GOOGLE_ULONGLONG(0);
  clear_has_toguid();
}
inline ::google::protobuf::uint64 EquipmentRpcEquipInheritAsk::toguid() const {
  return toguid_;
}
inline void EquipmentRpcEquipInheritAsk::set_toguid(::google::protobuf::uint64 value) {
  set_has_toguid();
  toguid_ = value;
}

// optional uint64 FromGuid = 2 [default = 0];
inline bool EquipmentRpcEquipInheritAsk::has_fromguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipInheritAsk::set_has_fromguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipInheritAsk::clear_has_fromguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipInheritAsk::clear_fromguid() {
  fromguid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromguid();
}
inline ::google::protobuf::uint64 EquipmentRpcEquipInheritAsk::fromguid() const {
  return fromguid_;
}
inline void EquipmentRpcEquipInheritAsk::set_fromguid(::google::protobuf::uint64 value) {
  set_has_fromguid();
  fromguid_ = value;
}

// -------------------------------------------------------------------

// EquipmentRpcEquipInheritReply

// optional int32 Result = 1 [default = -1];
inline bool EquipmentRpcEquipInheritReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRpcEquipInheritReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRpcEquipInheritReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRpcEquipInheritReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 EquipmentRpcEquipInheritReply::result() const {
  return result_;
}
inline void EquipmentRpcEquipInheritReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .ItemData NewEquip = 4;
inline bool EquipmentRpcEquipInheritReply::has_newequip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRpcEquipInheritReply::set_has_newequip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRpcEquipInheritReply::clear_has_newequip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRpcEquipInheritReply::clear_newequip() {
  if (newequip_ != NULL) newequip_->::ItemData::Clear();
  clear_has_newequip();
}
inline const ::ItemData& EquipmentRpcEquipInheritReply::newequip() const {
  return newequip_ != NULL ? *newequip_ : *default_instance_->newequip_;
}
inline ::ItemData* EquipmentRpcEquipInheritReply::mutable_newequip() {
  set_has_newequip();
  if (newequip_ == NULL) newequip_ = new ::ItemData;
  return newequip_;
}
inline ::ItemData* EquipmentRpcEquipInheritReply::release_newequip() {
  clear_has_newequip();
  ::ItemData* temp = newequip_;
  newequip_ = NULL;
  return temp;
}
inline void EquipmentRpcEquipInheritReply::set_allocated_newequip(::ItemData* newequip) {
  delete newequip_;
  newequip_ = newequip;
  if (newequip) {
    set_has_newequip();
  } else {
    clear_has_newequip();
  }
}

// repeated .ItemData EquipData = 5;
inline int EquipmentRpcEquipInheritReply::equipdata_size() const {
  return equipdata_.size();
}
inline void EquipmentRpcEquipInheritReply::clear_equipdata() {
  equipdata_.Clear();
}
inline const ::ItemData& EquipmentRpcEquipInheritReply::equipdata(int index) const {
  return equipdata_.Get(index);
}
inline ::ItemData* EquipmentRpcEquipInheritReply::mutable_equipdata(int index) {
  return equipdata_.Mutable(index);
}
inline ::ItemData* EquipmentRpcEquipInheritReply::add_equipdata() {
  return equipdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemData >&
EquipmentRpcEquipInheritReply::equipdata() const {
  return equipdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemData >*
EquipmentRpcEquipInheritReply::mutable_equipdata() {
  return &equipdata_;
}

// repeated .SuitInfo SuitInfos = 6;
inline int EquipmentRpcEquipInheritReply::suitinfos_size() const {
  return suitinfos_.size();
}
inline void EquipmentRpcEquipInheritReply::clear_suitinfos() {
  suitinfos_.Clear();
}
inline const ::SuitInfo& EquipmentRpcEquipInheritReply::suitinfos(int index) const {
  return suitinfos_.Get(index);
}
inline ::SuitInfo* EquipmentRpcEquipInheritReply::mutable_suitinfos(int index) {
  return suitinfos_.Mutable(index);
}
inline ::SuitInfo* EquipmentRpcEquipInheritReply::add_suitinfos() {
  return suitinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuitInfo >&
EquipmentRpcEquipInheritReply::suitinfos() const {
  return suitinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuitInfo >*
EquipmentRpcEquipInheritReply::mutable_suitinfos() {
  return &suitinfos_;
}

// optional uint64 FromGuid = 7 [default = 0];
inline bool EquipmentRpcEquipInheritReply::has_fromguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentRpcEquipInheritReply::set_has_fromguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentRpcEquipInheritReply::clear_has_fromguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentRpcEquipInheritReply::clear_fromguid() {
  fromguid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromguid();
}
inline ::google::protobuf::uint64 EquipmentRpcEquipInheritReply::fromguid() const {
  return fromguid_;
}
inline void EquipmentRpcEquipInheritReply::set_fromguid(::google::protobuf::uint64 value) {
  set_has_fromguid();
  fromguid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentRpc_2eproto__INCLUDED
