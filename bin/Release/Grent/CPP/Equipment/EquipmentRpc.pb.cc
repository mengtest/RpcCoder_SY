// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipmentRpcEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcUnEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcUnEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcUnEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcUnEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcSwitchEquipSetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcSwitchEquipSetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcSwitchEquipSetReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcSwitchEquipSetReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcSyncEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcSyncEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcSyncEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcSyncEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcResonanceUnlockAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcResonanceUnlockAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcResonanceUnlockReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcResonanceUnlockReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipDoResonanceAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipDoResonanceAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipDoResonanceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipDoResonanceReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSaveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipResonanceSaveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSaveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipResonanceSaveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipResonanceSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipResonanceSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSaveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashSaveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSaveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipWashSaveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipBuildSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipBuildSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipBuildAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipBuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcGetPlayerInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcGetPlayerInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcGetPlayerInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcGetPlayerInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipInheritAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipInheritAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRpcEquipInheritReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRpcEquipInheritReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentRpc_2eproto() {
  protobuf_AddDesc_EquipmentRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentRpc.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentRpcEquipAsk_descriptor_ = file->message_type(0);
  static const int EquipmentRpcEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipAsk, pos_),
  };
  EquipmentRpcEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipAsk_descriptor_,
      EquipmentRpcEquipAsk::default_instance_,
      EquipmentRpcEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipAsk));
  EquipmentRpcEquipReply_descriptor_ = file->message_type(1);
  static const int EquipmentRpcEquipReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, suit_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, slottype_),
  };
  EquipmentRpcEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipReply_descriptor_,
      EquipmentRpcEquipReply::default_instance_,
      EquipmentRpcEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipReply));
  EquipmentRpcUnEquipAsk_descriptor_ = file->message_type(2);
  static const int EquipmentRpcUnEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipAsk, slottype_),
  };
  EquipmentRpcUnEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcUnEquipAsk_descriptor_,
      EquipmentRpcUnEquipAsk::default_instance_,
      EquipmentRpcUnEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcUnEquipAsk));
  EquipmentRpcUnEquipReply_descriptor_ = file->message_type(3);
  static const int EquipmentRpcUnEquipReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, suit_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, slottype_),
  };
  EquipmentRpcUnEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcUnEquipReply_descriptor_,
      EquipmentRpcUnEquipReply::default_instance_,
      EquipmentRpcUnEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcUnEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcUnEquipReply));
  EquipmentRpcSwitchEquipSetAsk_descriptor_ = file->message_type(4);
  static const int EquipmentRpcSwitchEquipSetAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetAsk, to_index_),
  };
  EquipmentRpcSwitchEquipSetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcSwitchEquipSetAsk_descriptor_,
      EquipmentRpcSwitchEquipSetAsk::default_instance_,
      EquipmentRpcSwitchEquipSetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcSwitchEquipSetAsk));
  EquipmentRpcSwitchEquipSetReply_descriptor_ = file->message_type(5);
  static const int EquipmentRpcSwitchEquipSetReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetReply, equip_data_),
  };
  EquipmentRpcSwitchEquipSetReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcSwitchEquipSetReply_descriptor_,
      EquipmentRpcSwitchEquipSetReply::default_instance_,
      EquipmentRpcSwitchEquipSetReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSwitchEquipSetReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcSwitchEquipSetReply));
  EquipmentRpcSyncEquipAsk_descriptor_ = file->message_type(6);
  static const int EquipmentRpcSyncEquipAsk_offsets_[1] = {
  };
  EquipmentRpcSyncEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcSyncEquipAsk_descriptor_,
      EquipmentRpcSyncEquipAsk::default_instance_,
      EquipmentRpcSyncEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcSyncEquipAsk));
  EquipmentRpcSyncEquipReply_descriptor_ = file->message_type(7);
  static const int EquipmentRpcSyncEquipReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipReply, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipReply, suit_infos_),
  };
  EquipmentRpcSyncEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcSyncEquipReply_descriptor_,
      EquipmentRpcSyncEquipReply::default_instance_,
      EquipmentRpcSyncEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcSyncEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcSyncEquipReply));
  EquipmentRpcResonanceUnlockAsk_descriptor_ = file->message_type(8);
  static const int EquipmentRpcResonanceUnlockAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockAsk, confid_),
  };
  EquipmentRpcResonanceUnlockAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcResonanceUnlockAsk_descriptor_,
      EquipmentRpcResonanceUnlockAsk::default_instance_,
      EquipmentRpcResonanceUnlockAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcResonanceUnlockAsk));
  EquipmentRpcResonanceUnlockReply_descriptor_ = file->message_type(9);
  static const int EquipmentRpcResonanceUnlockReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockReply, resonanceinfo_),
  };
  EquipmentRpcResonanceUnlockReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcResonanceUnlockReply_descriptor_,
      EquipmentRpcResonanceUnlockReply::default_instance_,
      EquipmentRpcResonanceUnlockReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcResonanceUnlockReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcResonanceUnlockReply));
  EquipmentRpcEquipDoResonanceAsk_descriptor_ = file->message_type(10);
  static const int EquipmentRpcEquipDoResonanceAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceAsk, confid_),
  };
  EquipmentRpcEquipDoResonanceAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipDoResonanceAsk_descriptor_,
      EquipmentRpcEquipDoResonanceAsk::default_instance_,
      EquipmentRpcEquipDoResonanceAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipDoResonanceAsk));
  EquipmentRpcEquipDoResonanceReply_descriptor_ = file->message_type(11);
  static const int EquipmentRpcEquipDoResonanceReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceReply, addattr_),
  };
  EquipmentRpcEquipDoResonanceReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipDoResonanceReply_descriptor_,
      EquipmentRpcEquipDoResonanceReply::default_instance_,
      EquipmentRpcEquipDoResonanceReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipDoResonanceReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipDoResonanceReply));
  EquipmentRpcEquipResonanceSaveAsk_descriptor_ = file->message_type(12);
  static const int EquipmentRpcEquipResonanceSaveAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveAsk, confid_),
  };
  EquipmentRpcEquipResonanceSaveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipResonanceSaveAsk_descriptor_,
      EquipmentRpcEquipResonanceSaveAsk::default_instance_,
      EquipmentRpcEquipResonanceSaveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipResonanceSaveAsk));
  EquipmentRpcEquipResonanceSaveReply_descriptor_ = file->message_type(13);
  static const int EquipmentRpcEquipResonanceSaveReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveReply, resonanceinfo_),
  };
  EquipmentRpcEquipResonanceSaveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipResonanceSaveReply_descriptor_,
      EquipmentRpcEquipResonanceSaveReply::default_instance_,
      EquipmentRpcEquipResonanceSaveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSaveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipResonanceSaveReply));
  EquipmentRpcEquipResonanceSyncAsk_descriptor_ = file->message_type(14);
  static const int EquipmentRpcEquipResonanceSyncAsk_offsets_[1] = {
  };
  EquipmentRpcEquipResonanceSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipResonanceSyncAsk_descriptor_,
      EquipmentRpcEquipResonanceSyncAsk::default_instance_,
      EquipmentRpcEquipResonanceSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipResonanceSyncAsk));
  EquipmentRpcEquipResonanceSyncReply_descriptor_ = file->message_type(15);
  static const int EquipmentRpcEquipResonanceSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncReply, resonancedata_),
  };
  EquipmentRpcEquipResonanceSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipResonanceSyncReply_descriptor_,
      EquipmentRpcEquipResonanceSyncReply::default_instance_,
      EquipmentRpcEquipResonanceSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipResonanceSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipResonanceSyncReply));
  EquipmentRpcEquipWashSyncAsk_descriptor_ = file->message_type(16);
  static const int EquipmentRpcEquipWashSyncAsk_offsets_[1] = {
  };
  EquipmentRpcEquipWashSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashSyncAsk_descriptor_,
      EquipmentRpcEquipWashSyncAsk::default_instance_,
      EquipmentRpcEquipWashSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashSyncAsk));
  EquipmentRpcEquipWashSyncReply_descriptor_ = file->message_type(17);
  static const int EquipmentRpcEquipWashSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncReply, equipwashdata_),
  };
  EquipmentRpcEquipWashSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashSyncReply_descriptor_,
      EquipmentRpcEquipWashSyncReply::default_instance_,
      EquipmentRpcEquipWashSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashSyncReply));
  EquipmentRpcEquipWashAsk_descriptor_ = file->message_type(18);
  static const int EquipmentRpcEquipWashAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashAsk, lockedindex_),
  };
  EquipmentRpcEquipWashAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashAsk_descriptor_,
      EquipmentRpcEquipWashAsk::default_instance_,
      EquipmentRpcEquipWashAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashAsk));
  EquipmentRpcEquipWashReply_descriptor_ = file->message_type(19);
  static const int EquipmentRpcEquipWashReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashReply, equipwashinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashReply, lefttimes_),
  };
  EquipmentRpcEquipWashReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashReply_descriptor_,
      EquipmentRpcEquipWashReply::default_instance_,
      EquipmentRpcEquipWashReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashReply));
  EquipmentRpcEquipWashSaveAsk_descriptor_ = file->message_type(20);
  static const int EquipmentRpcEquipWashSaveAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveAsk, guid_),
  };
  EquipmentRpcEquipWashSaveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashSaveAsk_descriptor_,
      EquipmentRpcEquipWashSaveAsk::default_instance_,
      EquipmentRpcEquipWashSaveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashSaveAsk));
  EquipmentRpcEquipWashSaveReply_descriptor_ = file->message_type(21);
  static const int EquipmentRpcEquipWashSaveReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveReply, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveReply, lockedindex_),
  };
  EquipmentRpcEquipWashSaveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipWashSaveReply_descriptor_,
      EquipmentRpcEquipWashSaveReply::default_instance_,
      EquipmentRpcEquipWashSaveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipWashSaveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipWashSaveReply));
  EquipmentRpcEquipBuildSyncAsk_descriptor_ = file->message_type(22);
  static const int EquipmentRpcEquipBuildSyncAsk_offsets_[1] = {
  };
  EquipmentRpcEquipBuildSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipBuildSyncAsk_descriptor_,
      EquipmentRpcEquipBuildSyncAsk::default_instance_,
      EquipmentRpcEquipBuildSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipBuildSyncAsk));
  EquipmentRpcEquipBuildSyncReply_descriptor_ = file->message_type(23);
  static const int EquipmentRpcEquipBuildSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncReply, atf_list_),
  };
  EquipmentRpcEquipBuildSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipBuildSyncReply_descriptor_,
      EquipmentRpcEquipBuildSyncReply::default_instance_,
      EquipmentRpcEquipBuildSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipBuildSyncReply));
  EquipmentRpcEquipBuildAsk_descriptor_ = file->message_type(24);
  static const int EquipmentRpcEquipBuildAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildAsk, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildAsk, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildAsk, slot_type_),
  };
  EquipmentRpcEquipBuildAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipBuildAsk_descriptor_,
      EquipmentRpcEquipBuildAsk::default_instance_,
      EquipmentRpcEquipBuildAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipBuildAsk));
  EquipmentRpcEquipBuildReply_descriptor_ = file->message_type(25);
  static const int EquipmentRpcEquipBuildReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildReply, equipbuildatf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildReply, equip_),
  };
  EquipmentRpcEquipBuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipBuildReply_descriptor_,
      EquipmentRpcEquipBuildReply::default_instance_,
      EquipmentRpcEquipBuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipBuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipBuildReply));
  EquipmentRpcGetPlayerInfoAsk_descriptor_ = file->message_type(26);
  static const int EquipmentRpcGetPlayerInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoAsk, player_guid_),
  };
  EquipmentRpcGetPlayerInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcGetPlayerInfoAsk_descriptor_,
      EquipmentRpcGetPlayerInfoAsk::default_instance_,
      EquipmentRpcGetPlayerInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcGetPlayerInfoAsk));
  EquipmentRpcGetPlayerInfoReply_descriptor_ = file->message_type(27);
  static const int EquipmentRpcGetPlayerInfoReply_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, avatar_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, suit_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, equipslotdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, equipslotstarlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, jewelinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, pet_item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, treasurehair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, treasurehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, treasurebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, treasureweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, treasurewing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, teamid_),
  };
  EquipmentRpcGetPlayerInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcGetPlayerInfoReply_descriptor_,
      EquipmentRpcGetPlayerInfoReply::default_instance_,
      EquipmentRpcGetPlayerInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcGetPlayerInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcGetPlayerInfoReply));
  EquipmentRpcEquipInheritAsk_descriptor_ = file->message_type(28);
  static const int EquipmentRpcEquipInheritAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritAsk, toguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritAsk, fromguid_),
  };
  EquipmentRpcEquipInheritAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipInheritAsk_descriptor_,
      EquipmentRpcEquipInheritAsk::default_instance_,
      EquipmentRpcEquipInheritAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipInheritAsk));
  EquipmentRpcEquipInheritReply_descriptor_ = file->message_type(29);
  static const int EquipmentRpcEquipInheritReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, newequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, equipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, suitinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, fromguid_),
  };
  EquipmentRpcEquipInheritReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRpcEquipInheritReply_descriptor_,
      EquipmentRpcEquipInheritReply::default_instance_,
      EquipmentRpcEquipInheritReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRpcEquipInheritReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRpcEquipInheritReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipAsk_descriptor_, &EquipmentRpcEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipReply_descriptor_, &EquipmentRpcEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcUnEquipAsk_descriptor_, &EquipmentRpcUnEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcUnEquipReply_descriptor_, &EquipmentRpcUnEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcSwitchEquipSetAsk_descriptor_, &EquipmentRpcSwitchEquipSetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcSwitchEquipSetReply_descriptor_, &EquipmentRpcSwitchEquipSetReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcSyncEquipAsk_descriptor_, &EquipmentRpcSyncEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcSyncEquipReply_descriptor_, &EquipmentRpcSyncEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcResonanceUnlockAsk_descriptor_, &EquipmentRpcResonanceUnlockAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcResonanceUnlockReply_descriptor_, &EquipmentRpcResonanceUnlockReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipDoResonanceAsk_descriptor_, &EquipmentRpcEquipDoResonanceAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipDoResonanceReply_descriptor_, &EquipmentRpcEquipDoResonanceReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipResonanceSaveAsk_descriptor_, &EquipmentRpcEquipResonanceSaveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipResonanceSaveReply_descriptor_, &EquipmentRpcEquipResonanceSaveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipResonanceSyncAsk_descriptor_, &EquipmentRpcEquipResonanceSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipResonanceSyncReply_descriptor_, &EquipmentRpcEquipResonanceSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashSyncAsk_descriptor_, &EquipmentRpcEquipWashSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashSyncReply_descriptor_, &EquipmentRpcEquipWashSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashAsk_descriptor_, &EquipmentRpcEquipWashAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashReply_descriptor_, &EquipmentRpcEquipWashReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashSaveAsk_descriptor_, &EquipmentRpcEquipWashSaveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipWashSaveReply_descriptor_, &EquipmentRpcEquipWashSaveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipBuildSyncAsk_descriptor_, &EquipmentRpcEquipBuildSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipBuildSyncReply_descriptor_, &EquipmentRpcEquipBuildSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipBuildAsk_descriptor_, &EquipmentRpcEquipBuildAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipBuildReply_descriptor_, &EquipmentRpcEquipBuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcGetPlayerInfoAsk_descriptor_, &EquipmentRpcGetPlayerInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcGetPlayerInfoReply_descriptor_, &EquipmentRpcGetPlayerInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipInheritAsk_descriptor_, &EquipmentRpcEquipInheritAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRpcEquipInheritReply_descriptor_, &EquipmentRpcEquipInheritReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentRpc_2eproto() {
  delete EquipmentRpcEquipAsk::default_instance_;
  delete EquipmentRpcEquipAsk_reflection_;
  delete EquipmentRpcEquipReply::default_instance_;
  delete EquipmentRpcEquipReply_reflection_;
  delete EquipmentRpcUnEquipAsk::default_instance_;
  delete EquipmentRpcUnEquipAsk_reflection_;
  delete EquipmentRpcUnEquipReply::default_instance_;
  delete EquipmentRpcUnEquipReply_reflection_;
  delete EquipmentRpcSwitchEquipSetAsk::default_instance_;
  delete EquipmentRpcSwitchEquipSetAsk_reflection_;
  delete EquipmentRpcSwitchEquipSetReply::default_instance_;
  delete EquipmentRpcSwitchEquipSetReply_reflection_;
  delete EquipmentRpcSyncEquipAsk::default_instance_;
  delete EquipmentRpcSyncEquipAsk_reflection_;
  delete EquipmentRpcSyncEquipReply::default_instance_;
  delete EquipmentRpcSyncEquipReply_reflection_;
  delete EquipmentRpcResonanceUnlockAsk::default_instance_;
  delete EquipmentRpcResonanceUnlockAsk_reflection_;
  delete EquipmentRpcResonanceUnlockReply::default_instance_;
  delete EquipmentRpcResonanceUnlockReply_reflection_;
  delete EquipmentRpcEquipDoResonanceAsk::default_instance_;
  delete EquipmentRpcEquipDoResonanceAsk_reflection_;
  delete EquipmentRpcEquipDoResonanceReply::default_instance_;
  delete EquipmentRpcEquipDoResonanceReply_reflection_;
  delete EquipmentRpcEquipResonanceSaveAsk::default_instance_;
  delete EquipmentRpcEquipResonanceSaveAsk_reflection_;
  delete EquipmentRpcEquipResonanceSaveReply::default_instance_;
  delete EquipmentRpcEquipResonanceSaveReply_reflection_;
  delete EquipmentRpcEquipResonanceSyncAsk::default_instance_;
  delete EquipmentRpcEquipResonanceSyncAsk_reflection_;
  delete EquipmentRpcEquipResonanceSyncReply::default_instance_;
  delete EquipmentRpcEquipResonanceSyncReply_reflection_;
  delete EquipmentRpcEquipWashSyncAsk::default_instance_;
  delete EquipmentRpcEquipWashSyncAsk_reflection_;
  delete EquipmentRpcEquipWashSyncReply::default_instance_;
  delete EquipmentRpcEquipWashSyncReply_reflection_;
  delete EquipmentRpcEquipWashAsk::default_instance_;
  delete EquipmentRpcEquipWashAsk_reflection_;
  delete EquipmentRpcEquipWashReply::default_instance_;
  delete EquipmentRpcEquipWashReply_reflection_;
  delete EquipmentRpcEquipWashSaveAsk::default_instance_;
  delete EquipmentRpcEquipWashSaveAsk_reflection_;
  delete EquipmentRpcEquipWashSaveReply::default_instance_;
  delete EquipmentRpcEquipWashSaveReply_reflection_;
  delete EquipmentRpcEquipBuildSyncAsk::default_instance_;
  delete EquipmentRpcEquipBuildSyncAsk_reflection_;
  delete EquipmentRpcEquipBuildSyncReply::default_instance_;
  delete EquipmentRpcEquipBuildSyncReply_reflection_;
  delete EquipmentRpcEquipBuildAsk::default_instance_;
  delete EquipmentRpcEquipBuildAsk_reflection_;
  delete EquipmentRpcEquipBuildReply::default_instance_;
  delete EquipmentRpcEquipBuildReply_reflection_;
  delete EquipmentRpcGetPlayerInfoAsk::default_instance_;
  delete EquipmentRpcGetPlayerInfoAsk_reflection_;
  delete EquipmentRpcGetPlayerInfoReply::default_instance_;
  delete EquipmentRpcGetPlayerInfoReply_reflection_;
  delete EquipmentRpcEquipInheritAsk::default_instance_;
  delete EquipmentRpcEquipInheritAsk_reflection_;
  delete EquipmentRpcEquipInheritReply::default_instance_;
  delete EquipmentRpcEquipInheritReply_reflection_;
}

void protobuf_AddDesc_EquipmentRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022EquipmentRpc.proto\032\022PublicStruct.proto"
    "\"\'\n\024EquipmentRpcEquipAsk\022\017\n\003Pos\030\001 \001(\005:\002-"
    "1\"\203\001\n\026EquipmentRpcEquipReply\022\025\n\006Result\030\001"
    " \001(\005:\005-9999\022\035\n\nEquip_data\030\002 \003(\0132\t.ItemDa"
    "ta\022\035\n\nSuit_infos\030\003 \003(\0132\t.SuitInfo\022\024\n\010Slo"
    "tType\030\004 \001(\005:\002-1\".\n\026EquipmentRpcUnEquipAs"
    "k\022\024\n\010SlotType\030\001 \001(\005:\002-1\"\205\001\n\030EquipmentRpc"
    "UnEquipReply\022\025\n\006Result\030\001 \001(\005:\005-9999\022\035\n\nE"
    "quip_data\030\002 \003(\0132\t.ItemData\022\035\n\nSuit_infos"
    "\030\003 \003(\0132\t.SuitInfo\022\024\n\010SlotType\030\004 \001(\005:\002-1\""
    "5\n\035EquipmentRpcSwitchEquipSetAsk\022\024\n\010To_i"
    "ndex\030\001 \001(\005:\002-1\"W\n\037EquipmentRpcSwitchEqui"
    "pSetReply\022\025\n\006Result\030\001 \001(\005:\005-9999\022\035\n\nEqui"
    "p_data\030\002 \003(\0132\t.ItemData\"\032\n\030EquipmentRpcS"
    "yncEquipAsk\"q\n\032EquipmentRpcSyncEquipRepl"
    "y\022\025\n\006Result\030\001 \001(\005:\005-9999\022\035\n\nEquip_data\030\003"
    " \003(\0132\t.ItemData\022\035\n\nSuit_infos\030\004 \003(\0132\t.Su"
    "itInfo\"4\n\036EquipmentRpcResonanceUnlockAsk"
    "\022\022\n\006ConfId\030\001 \001(\005:\002-1\"b\n EquipmentRpcReso"
    "nanceUnlockReply\022\022\n\006Result\030\001 \001(\005:\002-1\022*\n\r"
    "ResonanceInfo\030\002 \001(\0132\023.EquipResonanceInfo"
    "\"5\n\037EquipmentRpcEquipDoResonanceAsk\022\022\n\006C"
    "onfId\030\001 \001(\005:\002-1\"]\n!EquipmentRpcEquipDoRe"
    "sonanceReply\022\022\n\006Result\030\001 \001(\005:\002-1\022$\n\007AddA"
    "ttr\030\002 \001(\0132\023.EquipResonanceInfo\"7\n!Equipm"
    "entRpcEquipResonanceSaveAsk\022\022\n\006ConfId\030\001 "
    "\001(\005:\002-1\"e\n#EquipmentRpcEquipResonanceSav"
    "eReply\022\022\n\006Result\030\001 \001(\005:\002-1\022*\n\rResonanceI"
    "nfo\030\002 \001(\0132\023.EquipResonanceInfo\"#\n!Equipm"
    "entRpcEquipResonanceSyncAsk\"e\n#Equipment"
    "RpcEquipResonanceSyncReply\022\022\n\006Result\030\001 \001"
    "(\005:\002-1\022*\n\rResonanceData\030\002 \001(\0132\023.EquipRes"
    "onanceData\"\036\n\034EquipmentRpcEquipWashSyncA"
    "sk\"[\n\036EquipmentRpcEquipWashSyncReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022%\n\rEquipWashData\030\002 \001(\0132"
    "\016.EquipWashData\"@\n\030EquipmentRpcEquipWash"
    "Ask\022\017\n\004Guid\030\001 \001(\004:\0010\022\023\n\013LockedIndex\030\002 \003("
    "\005\"n\n\032EquipmentRpcEquipWashReply\022\022\n\006Resul"
    "t\030\001 \001(\005:\002-1\022%\n\rEquipWashInfo\030\002 \001(\0132\016.Equ"
    "ipWashInfo\022\025\n\tLeftTimes\030\003 \001(\005:\002-1\"/\n\034Equ"
    "ipmentRpcEquipWashSaveAsk\022\017\n\004Guid\030\001 \001(\004:"
    "\0010\"f\n\036EquipmentRpcEquipWashSaveReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\033\n\010ItemData\030\002 \001(\0132\t.Ite"
    "mData\022\023\n\013LockedIndex\030\003 \003(\005\"\037\n\035EquipmentR"
    "pcEquipBuildSyncAsk\"W\n\037EquipmentRpcEquip"
    "BuildSyncReply\022\022\n\006Result\030\001 \001(\005:\002-1\022 \n\010At"
    "f_list\030\002 \003(\0132\016.EquipBuildAtf\"]\n\031Equipmen"
    "tRpcEquipBuildAsk\022\021\n\005Level\030\001 \001(\005:\002-1\022\026\n\n"
    "Occupation\030\002 \001(\005:\002-1\022\025\n\tSlot_type\030\003 \001(\005:"
    "\002-1\"q\n\033EquipmentRpcEquipBuildReply\022\022\n\006Re"
    "sult\030\001 \001(\005:\002-1\022%\n\rEquipBuildAtf\030\002 \001(\0132\016."
    "EquipBuildAtf\022\027\n\005Equip\030\003 \001(\0132\010.ItemObj\"6"
    "\n\034EquipmentRpcGetPlayerInfoAsk\022\026\n\013Player"
    "_guid\030\001 \001(\004:\0010\"\365\004\n\036EquipmentRpcGetPlayer"
    "InfoReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\023\n\013Player_"
    "name\030\002 \001(\t\022\026\n\013Player_guid\030\003 \001(\004:\0010\022\025\n\tAv"
    "atar_id\030\004 \001(\005:\002-1\022\030\n\014Player_level\030\005 \001(\005:"
    "\002-1\022\033\n\017Avatar_frame_id\030\006 \001(\005:\002-1\022\025\n\tConf"
    "ig_id\030\007 \001(\005:\002-1\022\023\n\010Guild_id\030\010 \001(\004:\0010\022\022\n\n"
    "Guild_name\030\t \001(\t\022\035\n\nEquip_data\030\n \003(\0132\t.I"
    "temData\022\035\n\nSuit_infos\030\013 \003(\0132\t.SuitInfo\022%"
    "\n\rEquipSlotData\030\014 \003(\0132\016.EquipSlotInfo\022-\n"
    "\021EquipSlotStarList\030\r \003(\0132\022.EquipSlotStar"
    "Info\022\036\n\nJewelInfos\030\016 \003(\0132\n.JewelInfo\022\027\n\013"
    "BattleScore\030\020 \001(\005:\002-1\022 \n\rPet_item_data\030\022"
    " \001(\0132\t.ItemData\022\030\n\014TreasureHair\030\023 \001(\005:\002-"
    "1\022\030\n\014TreasureHead\030\024 \001(\005:\002-1\022\030\n\014TreasureB"
    "ody\030\025 \001(\005:\002-1\022\032\n\016TreasureWeapon\030\026 \001(\005:\002-"
    "1\022\030\n\014TreasureWing\030\027 \001(\005:\002-1\022\021\n\006TeamId\030\030 "
    "\001(\004:\0010\"E\n\033EquipmentRpcEquipInheritAsk\022\021\n"
    "\006ToGuid\030\001 \001(\004:\0010\022\023\n\010FromGuid\030\002 \001(\004:\0010\"\241\001"
    "\n\035EquipmentRpcEquipInheritReply\022\022\n\006Resul"
    "t\030\001 \001(\005:\002-1\022\033\n\010NewEquip\030\004 \001(\0132\t.ItemData"
    "\022\034\n\tEquipData\030\005 \003(\0132\t.ItemData\022\034\n\tSuitIn"
    "fos\030\006 \003(\0132\t.SuitInfo\022\023\n\010FromGuid\030\007 \001(\004:\001"
    "0", 3001);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentRpc.proto", &protobuf_RegisterTypes);
  EquipmentRpcEquipAsk::default_instance_ = new EquipmentRpcEquipAsk();
  EquipmentRpcEquipReply::default_instance_ = new EquipmentRpcEquipReply();
  EquipmentRpcUnEquipAsk::default_instance_ = new EquipmentRpcUnEquipAsk();
  EquipmentRpcUnEquipReply::default_instance_ = new EquipmentRpcUnEquipReply();
  EquipmentRpcSwitchEquipSetAsk::default_instance_ = new EquipmentRpcSwitchEquipSetAsk();
  EquipmentRpcSwitchEquipSetReply::default_instance_ = new EquipmentRpcSwitchEquipSetReply();
  EquipmentRpcSyncEquipAsk::default_instance_ = new EquipmentRpcSyncEquipAsk();
  EquipmentRpcSyncEquipReply::default_instance_ = new EquipmentRpcSyncEquipReply();
  EquipmentRpcResonanceUnlockAsk::default_instance_ = new EquipmentRpcResonanceUnlockAsk();
  EquipmentRpcResonanceUnlockReply::default_instance_ = new EquipmentRpcResonanceUnlockReply();
  EquipmentRpcEquipDoResonanceAsk::default_instance_ = new EquipmentRpcEquipDoResonanceAsk();
  EquipmentRpcEquipDoResonanceReply::default_instance_ = new EquipmentRpcEquipDoResonanceReply();
  EquipmentRpcEquipResonanceSaveAsk::default_instance_ = new EquipmentRpcEquipResonanceSaveAsk();
  EquipmentRpcEquipResonanceSaveReply::default_instance_ = new EquipmentRpcEquipResonanceSaveReply();
  EquipmentRpcEquipResonanceSyncAsk::default_instance_ = new EquipmentRpcEquipResonanceSyncAsk();
  EquipmentRpcEquipResonanceSyncReply::default_instance_ = new EquipmentRpcEquipResonanceSyncReply();
  EquipmentRpcEquipWashSyncAsk::default_instance_ = new EquipmentRpcEquipWashSyncAsk();
  EquipmentRpcEquipWashSyncReply::default_instance_ = new EquipmentRpcEquipWashSyncReply();
  EquipmentRpcEquipWashAsk::default_instance_ = new EquipmentRpcEquipWashAsk();
  EquipmentRpcEquipWashReply::default_instance_ = new EquipmentRpcEquipWashReply();
  EquipmentRpcEquipWashSaveAsk::default_instance_ = new EquipmentRpcEquipWashSaveAsk();
  EquipmentRpcEquipWashSaveReply::default_instance_ = new EquipmentRpcEquipWashSaveReply();
  EquipmentRpcEquipBuildSyncAsk::default_instance_ = new EquipmentRpcEquipBuildSyncAsk();
  EquipmentRpcEquipBuildSyncReply::default_instance_ = new EquipmentRpcEquipBuildSyncReply();
  EquipmentRpcEquipBuildAsk::default_instance_ = new EquipmentRpcEquipBuildAsk();
  EquipmentRpcEquipBuildReply::default_instance_ = new EquipmentRpcEquipBuildReply();
  EquipmentRpcGetPlayerInfoAsk::default_instance_ = new EquipmentRpcGetPlayerInfoAsk();
  EquipmentRpcGetPlayerInfoReply::default_instance_ = new EquipmentRpcGetPlayerInfoReply();
  EquipmentRpcEquipInheritAsk::default_instance_ = new EquipmentRpcEquipInheritAsk();
  EquipmentRpcEquipInheritReply::default_instance_ = new EquipmentRpcEquipInheritReply();
  EquipmentRpcEquipAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcUnEquipAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcUnEquipReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcSwitchEquipSetAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcSwitchEquipSetReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcSyncEquipAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcSyncEquipReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcResonanceUnlockAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcResonanceUnlockReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipDoResonanceAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipDoResonanceReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipResonanceSaveAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipResonanceSaveReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipResonanceSyncAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipResonanceSyncReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashSyncAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashSyncReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashSaveAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipWashSaveReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipBuildSyncAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipBuildSyncReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipBuildAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipBuildReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcGetPlayerInfoAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcGetPlayerInfoReply::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipInheritAsk::default_instance_->InitAsDefaultInstance();
  EquipmentRpcEquipInheritReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentRpc_2eproto {
  StaticDescriptorInitializer_EquipmentRpc_2eproto() {
    protobuf_AddDesc_EquipmentRpc_2eproto();
  }
} static_descriptor_initializer_EquipmentRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipAsk::kPosFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipAsk::EquipmentRpcEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipAsk::EquipmentRpcEquipAsk(const EquipmentRpcEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipAsk::~EquipmentRpcEquipAsk() {
  SharedDtor();
}

void EquipmentRpcEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipAsk_descriptor_;
}

const EquipmentRpcEquipAsk& EquipmentRpcEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipAsk* EquipmentRpcEquipAsk::default_instance_ = NULL;

EquipmentRpcEquipAsk* EquipmentRpcEquipAsk::New() const {
  return new EquipmentRpcEquipAsk;
}

void EquipmentRpcEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Pos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Pos = 1 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipAsk::MergeFrom(const EquipmentRpcEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipAsk::CopyFrom(const EquipmentRpcEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipAsk::Swap(EquipmentRpcEquipAsk* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipReply::kResultFieldNumber;
const int EquipmentRpcEquipReply::kEquipDataFieldNumber;
const int EquipmentRpcEquipReply::kSuitInfosFieldNumber;
const int EquipmentRpcEquipReply::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipReply::EquipmentRpcEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipReply::InitAsDefaultInstance() {
}

EquipmentRpcEquipReply::EquipmentRpcEquipReply(const EquipmentRpcEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  slottype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipReply::~EquipmentRpcEquipReply() {
  SharedDtor();
}

void EquipmentRpcEquipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipReply_descriptor_;
}

const EquipmentRpcEquipReply& EquipmentRpcEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipReply* EquipmentRpcEquipReply::default_instance_ = NULL;

EquipmentRpcEquipReply* EquipmentRpcEquipReply::New() const {
  return new EquipmentRpcEquipReply;
}

void EquipmentRpcEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    slottype_ = -1;
  }
  equip_data_.Clear();
  suit_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        if (input->ExpectTag(26)) goto parse_Suit_infos;
        break;
      }

      // repeated .SuitInfo Suit_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suit_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Suit_infos;
        if (input->ExpectTag(32)) goto parse_SlotType;
        break;
      }

      // optional int32 SlotType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlotType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slottype_)));
          set_has_slottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_data(i), output);
  }

  // repeated .SuitInfo Suit_infos = 3;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suit_infos(i), output);
  }

  // optional int32 SlotType = 4 [default = -1];
  if (has_slottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slottype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_data(i), target);
  }

  // repeated .SuitInfo Suit_infos = 3;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suit_infos(i), target);
  }

  // optional int32 SlotType = 4 [default = -1];
  if (has_slottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slottype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 SlotType = 4 [default = -1];
    if (has_slottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slottype());
    }

  }
  // repeated .ItemData Equip_data = 2;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  // repeated .SuitInfo Suit_infos = 3;
  total_size += 1 * this->suit_infos_size();
  for (int i = 0; i < this->suit_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipReply::MergeFrom(const EquipmentRpcEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  suit_infos_.MergeFrom(from.suit_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_slottype()) {
      set_slottype(from.slottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipReply::CopyFrom(const EquipmentRpcEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipReply::Swap(EquipmentRpcEquipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_data_.Swap(&other->equip_data_);
    suit_infos_.Swap(&other->suit_infos_);
    std::swap(slottype_, other->slottype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcUnEquipAsk::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcUnEquipAsk::EquipmentRpcUnEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcUnEquipAsk::InitAsDefaultInstance() {
}

EquipmentRpcUnEquipAsk::EquipmentRpcUnEquipAsk(const EquipmentRpcUnEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcUnEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  slottype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcUnEquipAsk::~EquipmentRpcUnEquipAsk() {
  SharedDtor();
}

void EquipmentRpcUnEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcUnEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcUnEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcUnEquipAsk_descriptor_;
}

const EquipmentRpcUnEquipAsk& EquipmentRpcUnEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcUnEquipAsk* EquipmentRpcUnEquipAsk::default_instance_ = NULL;

EquipmentRpcUnEquipAsk* EquipmentRpcUnEquipAsk::New() const {
  return new EquipmentRpcUnEquipAsk;
}

void EquipmentRpcUnEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slottype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcUnEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SlotType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slottype_)));
          set_has_slottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcUnEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SlotType = 1 [default = -1];
  if (has_slottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slottype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcUnEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SlotType = 1 [default = -1];
  if (has_slottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slottype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcUnEquipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SlotType = 1 [default = -1];
    if (has_slottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slottype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcUnEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcUnEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcUnEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcUnEquipAsk::MergeFrom(const EquipmentRpcUnEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slottype()) {
      set_slottype(from.slottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcUnEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcUnEquipAsk::CopyFrom(const EquipmentRpcUnEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcUnEquipAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcUnEquipAsk::Swap(EquipmentRpcUnEquipAsk* other) {
  if (other != this) {
    std::swap(slottype_, other->slottype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcUnEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcUnEquipAsk_descriptor_;
  metadata.reflection = EquipmentRpcUnEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcUnEquipReply::kResultFieldNumber;
const int EquipmentRpcUnEquipReply::kEquipDataFieldNumber;
const int EquipmentRpcUnEquipReply::kSuitInfosFieldNumber;
const int EquipmentRpcUnEquipReply::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcUnEquipReply::EquipmentRpcUnEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcUnEquipReply::InitAsDefaultInstance() {
}

EquipmentRpcUnEquipReply::EquipmentRpcUnEquipReply(const EquipmentRpcUnEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcUnEquipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  slottype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcUnEquipReply::~EquipmentRpcUnEquipReply() {
  SharedDtor();
}

void EquipmentRpcUnEquipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcUnEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcUnEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcUnEquipReply_descriptor_;
}

const EquipmentRpcUnEquipReply& EquipmentRpcUnEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcUnEquipReply* EquipmentRpcUnEquipReply::default_instance_ = NULL;

EquipmentRpcUnEquipReply* EquipmentRpcUnEquipReply::New() const {
  return new EquipmentRpcUnEquipReply;
}

void EquipmentRpcUnEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    slottype_ = -1;
  }
  equip_data_.Clear();
  suit_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcUnEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        if (input->ExpectTag(26)) goto parse_Suit_infos;
        break;
      }

      // repeated .SuitInfo Suit_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suit_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Suit_infos;
        if (input->ExpectTag(32)) goto parse_SlotType;
        break;
      }

      // optional int32 SlotType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SlotType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slottype_)));
          set_has_slottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcUnEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_data(i), output);
  }

  // repeated .SuitInfo Suit_infos = 3;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suit_infos(i), output);
  }

  // optional int32 SlotType = 4 [default = -1];
  if (has_slottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slottype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcUnEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_data(i), target);
  }

  // repeated .SuitInfo Suit_infos = 3;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suit_infos(i), target);
  }

  // optional int32 SlotType = 4 [default = -1];
  if (has_slottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slottype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcUnEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 SlotType = 4 [default = -1];
    if (has_slottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slottype());
    }

  }
  // repeated .ItemData Equip_data = 2;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  // repeated .SuitInfo Suit_infos = 3;
  total_size += 1 * this->suit_infos_size();
  for (int i = 0; i < this->suit_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcUnEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcUnEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcUnEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcUnEquipReply::MergeFrom(const EquipmentRpcUnEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  suit_infos_.MergeFrom(from.suit_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_slottype()) {
      set_slottype(from.slottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcUnEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcUnEquipReply::CopyFrom(const EquipmentRpcUnEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcUnEquipReply::IsInitialized() const {

  return true;
}

void EquipmentRpcUnEquipReply::Swap(EquipmentRpcUnEquipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_data_.Swap(&other->equip_data_);
    suit_infos_.Swap(&other->suit_infos_);
    std::swap(slottype_, other->slottype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcUnEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcUnEquipReply_descriptor_;
  metadata.reflection = EquipmentRpcUnEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcSwitchEquipSetAsk::kToIndexFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcSwitchEquipSetAsk::EquipmentRpcSwitchEquipSetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcSwitchEquipSetAsk::InitAsDefaultInstance() {
}

EquipmentRpcSwitchEquipSetAsk::EquipmentRpcSwitchEquipSetAsk(const EquipmentRpcSwitchEquipSetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcSwitchEquipSetAsk::SharedCtor() {
  _cached_size_ = 0;
  to_index_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcSwitchEquipSetAsk::~EquipmentRpcSwitchEquipSetAsk() {
  SharedDtor();
}

void EquipmentRpcSwitchEquipSetAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcSwitchEquipSetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcSwitchEquipSetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcSwitchEquipSetAsk_descriptor_;
}

const EquipmentRpcSwitchEquipSetAsk& EquipmentRpcSwitchEquipSetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcSwitchEquipSetAsk* EquipmentRpcSwitchEquipSetAsk::default_instance_ = NULL;

EquipmentRpcSwitchEquipSetAsk* EquipmentRpcSwitchEquipSetAsk::New() const {
  return new EquipmentRpcSwitchEquipSetAsk;
}

void EquipmentRpcSwitchEquipSetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_index_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcSwitchEquipSetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 To_index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_index_)));
          set_has_to_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcSwitchEquipSetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 To_index = 1 [default = -1];
  if (has_to_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->to_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcSwitchEquipSetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 To_index = 1 [default = -1];
  if (has_to_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->to_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcSwitchEquipSetAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 To_index = 1 [default = -1];
    if (has_to_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcSwitchEquipSetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcSwitchEquipSetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcSwitchEquipSetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcSwitchEquipSetAsk::MergeFrom(const EquipmentRpcSwitchEquipSetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_index()) {
      set_to_index(from.to_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcSwitchEquipSetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcSwitchEquipSetAsk::CopyFrom(const EquipmentRpcSwitchEquipSetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcSwitchEquipSetAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcSwitchEquipSetAsk::Swap(EquipmentRpcSwitchEquipSetAsk* other) {
  if (other != this) {
    std::swap(to_index_, other->to_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcSwitchEquipSetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcSwitchEquipSetAsk_descriptor_;
  metadata.reflection = EquipmentRpcSwitchEquipSetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcSwitchEquipSetReply::kResultFieldNumber;
const int EquipmentRpcSwitchEquipSetReply::kEquipDataFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcSwitchEquipSetReply::EquipmentRpcSwitchEquipSetReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcSwitchEquipSetReply::InitAsDefaultInstance() {
}

EquipmentRpcSwitchEquipSetReply::EquipmentRpcSwitchEquipSetReply(const EquipmentRpcSwitchEquipSetReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcSwitchEquipSetReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcSwitchEquipSetReply::~EquipmentRpcSwitchEquipSetReply() {
  SharedDtor();
}

void EquipmentRpcSwitchEquipSetReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcSwitchEquipSetReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcSwitchEquipSetReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcSwitchEquipSetReply_descriptor_;
}

const EquipmentRpcSwitchEquipSetReply& EquipmentRpcSwitchEquipSetReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcSwitchEquipSetReply* EquipmentRpcSwitchEquipSetReply::default_instance_ = NULL;

EquipmentRpcSwitchEquipSetReply* EquipmentRpcSwitchEquipSetReply::New() const {
  return new EquipmentRpcSwitchEquipSetReply;
}

void EquipmentRpcSwitchEquipSetReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  equip_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcSwitchEquipSetReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Equip_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcSwitchEquipSetReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcSwitchEquipSetReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ItemData Equip_data = 2;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcSwitchEquipSetReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ItemData Equip_data = 2;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcSwitchEquipSetReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcSwitchEquipSetReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcSwitchEquipSetReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcSwitchEquipSetReply::MergeFrom(const EquipmentRpcSwitchEquipSetReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcSwitchEquipSetReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcSwitchEquipSetReply::CopyFrom(const EquipmentRpcSwitchEquipSetReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcSwitchEquipSetReply::IsInitialized() const {

  return true;
}

void EquipmentRpcSwitchEquipSetReply::Swap(EquipmentRpcSwitchEquipSetReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_data_.Swap(&other->equip_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcSwitchEquipSetReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcSwitchEquipSetReply_descriptor_;
  metadata.reflection = EquipmentRpcSwitchEquipSetReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentRpcSyncEquipAsk::EquipmentRpcSyncEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcSyncEquipAsk::InitAsDefaultInstance() {
}

EquipmentRpcSyncEquipAsk::EquipmentRpcSyncEquipAsk(const EquipmentRpcSyncEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcSyncEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcSyncEquipAsk::~EquipmentRpcSyncEquipAsk() {
  SharedDtor();
}

void EquipmentRpcSyncEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcSyncEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcSyncEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcSyncEquipAsk_descriptor_;
}

const EquipmentRpcSyncEquipAsk& EquipmentRpcSyncEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcSyncEquipAsk* EquipmentRpcSyncEquipAsk::default_instance_ = NULL;

EquipmentRpcSyncEquipAsk* EquipmentRpcSyncEquipAsk::New() const {
  return new EquipmentRpcSyncEquipAsk;
}

void EquipmentRpcSyncEquipAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcSyncEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentRpcSyncEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcSyncEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcSyncEquipAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcSyncEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcSyncEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcSyncEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcSyncEquipAsk::MergeFrom(const EquipmentRpcSyncEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcSyncEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcSyncEquipAsk::CopyFrom(const EquipmentRpcSyncEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcSyncEquipAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcSyncEquipAsk::Swap(EquipmentRpcSyncEquipAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcSyncEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcSyncEquipAsk_descriptor_;
  metadata.reflection = EquipmentRpcSyncEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcSyncEquipReply::kResultFieldNumber;
const int EquipmentRpcSyncEquipReply::kEquipDataFieldNumber;
const int EquipmentRpcSyncEquipReply::kSuitInfosFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcSyncEquipReply::EquipmentRpcSyncEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcSyncEquipReply::InitAsDefaultInstance() {
}

EquipmentRpcSyncEquipReply::EquipmentRpcSyncEquipReply(const EquipmentRpcSyncEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcSyncEquipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcSyncEquipReply::~EquipmentRpcSyncEquipReply() {
  SharedDtor();
}

void EquipmentRpcSyncEquipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcSyncEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcSyncEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcSyncEquipReply_descriptor_;
}

const EquipmentRpcSyncEquipReply& EquipmentRpcSyncEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcSyncEquipReply* EquipmentRpcSyncEquipReply::default_instance_ = NULL;

EquipmentRpcSyncEquipReply* EquipmentRpcSyncEquipReply::New() const {
  return new EquipmentRpcSyncEquipReply;
}

void EquipmentRpcSyncEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  equip_data_.Clear();
  suit_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcSyncEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Equip_data;
        if (input->ExpectTag(34)) goto parse_Suit_infos;
        break;
      }

      // repeated .SuitInfo Suit_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suit_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Suit_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcSyncEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .ItemData Equip_data = 3;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_data(i), output);
  }

  // repeated .SuitInfo Suit_infos = 4;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->suit_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcSyncEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .ItemData Equip_data = 3;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_data(i), target);
  }

  // repeated .SuitInfo Suit_infos = 4;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->suit_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcSyncEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ItemData Equip_data = 3;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  // repeated .SuitInfo Suit_infos = 4;
  total_size += 1 * this->suit_infos_size();
  for (int i = 0; i < this->suit_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcSyncEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcSyncEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcSyncEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcSyncEquipReply::MergeFrom(const EquipmentRpcSyncEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  suit_infos_.MergeFrom(from.suit_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcSyncEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcSyncEquipReply::CopyFrom(const EquipmentRpcSyncEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcSyncEquipReply::IsInitialized() const {

  return true;
}

void EquipmentRpcSyncEquipReply::Swap(EquipmentRpcSyncEquipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    equip_data_.Swap(&other->equip_data_);
    suit_infos_.Swap(&other->suit_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcSyncEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcSyncEquipReply_descriptor_;
  metadata.reflection = EquipmentRpcSyncEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcResonanceUnlockAsk::kConfIdFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcResonanceUnlockAsk::EquipmentRpcResonanceUnlockAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcResonanceUnlockAsk::InitAsDefaultInstance() {
}

EquipmentRpcResonanceUnlockAsk::EquipmentRpcResonanceUnlockAsk(const EquipmentRpcResonanceUnlockAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcResonanceUnlockAsk::SharedCtor() {
  _cached_size_ = 0;
  confid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcResonanceUnlockAsk::~EquipmentRpcResonanceUnlockAsk() {
  SharedDtor();
}

void EquipmentRpcResonanceUnlockAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcResonanceUnlockAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcResonanceUnlockAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcResonanceUnlockAsk_descriptor_;
}

const EquipmentRpcResonanceUnlockAsk& EquipmentRpcResonanceUnlockAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcResonanceUnlockAsk* EquipmentRpcResonanceUnlockAsk::default_instance_ = NULL;

EquipmentRpcResonanceUnlockAsk* EquipmentRpcResonanceUnlockAsk::New() const {
  return new EquipmentRpcResonanceUnlockAsk;
}

void EquipmentRpcResonanceUnlockAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcResonanceUnlockAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcResonanceUnlockAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcResonanceUnlockAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcResonanceUnlockAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfId = 1 [default = -1];
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcResonanceUnlockAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcResonanceUnlockAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcResonanceUnlockAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcResonanceUnlockAsk::MergeFrom(const EquipmentRpcResonanceUnlockAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcResonanceUnlockAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcResonanceUnlockAsk::CopyFrom(const EquipmentRpcResonanceUnlockAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcResonanceUnlockAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcResonanceUnlockAsk::Swap(EquipmentRpcResonanceUnlockAsk* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcResonanceUnlockAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcResonanceUnlockAsk_descriptor_;
  metadata.reflection = EquipmentRpcResonanceUnlockAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcResonanceUnlockReply::kResultFieldNumber;
const int EquipmentRpcResonanceUnlockReply::kResonanceInfoFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcResonanceUnlockReply::EquipmentRpcResonanceUnlockReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcResonanceUnlockReply::InitAsDefaultInstance() {
  resonanceinfo_ = const_cast< ::EquipResonanceInfo*>(&::EquipResonanceInfo::default_instance());
}

EquipmentRpcResonanceUnlockReply::EquipmentRpcResonanceUnlockReply(const EquipmentRpcResonanceUnlockReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcResonanceUnlockReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  resonanceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcResonanceUnlockReply::~EquipmentRpcResonanceUnlockReply() {
  SharedDtor();
}

void EquipmentRpcResonanceUnlockReply::SharedDtor() {
  if (this != default_instance_) {
    delete resonanceinfo_;
  }
}

void EquipmentRpcResonanceUnlockReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcResonanceUnlockReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcResonanceUnlockReply_descriptor_;
}

const EquipmentRpcResonanceUnlockReply& EquipmentRpcResonanceUnlockReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcResonanceUnlockReply* EquipmentRpcResonanceUnlockReply::default_instance_ = NULL;

EquipmentRpcResonanceUnlockReply* EquipmentRpcResonanceUnlockReply::New() const {
  return new EquipmentRpcResonanceUnlockReply;
}

void EquipmentRpcResonanceUnlockReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_resonanceinfo()) {
      if (resonanceinfo_ != NULL) resonanceinfo_->::EquipResonanceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcResonanceUnlockReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ResonanceInfo;
        break;
      }

      // optional .EquipResonanceInfo ResonanceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResonanceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resonanceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcResonanceUnlockReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  if (has_resonanceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resonanceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcResonanceUnlockReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  if (has_resonanceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resonanceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcResonanceUnlockReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipResonanceInfo ResonanceInfo = 2;
    if (has_resonanceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resonanceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcResonanceUnlockReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcResonanceUnlockReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcResonanceUnlockReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcResonanceUnlockReply::MergeFrom(const EquipmentRpcResonanceUnlockReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resonanceinfo()) {
      mutable_resonanceinfo()->::EquipResonanceInfo::MergeFrom(from.resonanceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcResonanceUnlockReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcResonanceUnlockReply::CopyFrom(const EquipmentRpcResonanceUnlockReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcResonanceUnlockReply::IsInitialized() const {

  return true;
}

void EquipmentRpcResonanceUnlockReply::Swap(EquipmentRpcResonanceUnlockReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resonanceinfo_, other->resonanceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcResonanceUnlockReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcResonanceUnlockReply_descriptor_;
  metadata.reflection = EquipmentRpcResonanceUnlockReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipDoResonanceAsk::kConfIdFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipDoResonanceAsk::EquipmentRpcEquipDoResonanceAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipDoResonanceAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipDoResonanceAsk::EquipmentRpcEquipDoResonanceAsk(const EquipmentRpcEquipDoResonanceAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipDoResonanceAsk::SharedCtor() {
  _cached_size_ = 0;
  confid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipDoResonanceAsk::~EquipmentRpcEquipDoResonanceAsk() {
  SharedDtor();
}

void EquipmentRpcEquipDoResonanceAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipDoResonanceAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipDoResonanceAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipDoResonanceAsk_descriptor_;
}

const EquipmentRpcEquipDoResonanceAsk& EquipmentRpcEquipDoResonanceAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipDoResonanceAsk* EquipmentRpcEquipDoResonanceAsk::default_instance_ = NULL;

EquipmentRpcEquipDoResonanceAsk* EquipmentRpcEquipDoResonanceAsk::New() const {
  return new EquipmentRpcEquipDoResonanceAsk;
}

void EquipmentRpcEquipDoResonanceAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipDoResonanceAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipDoResonanceAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipDoResonanceAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipDoResonanceAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfId = 1 [default = -1];
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipDoResonanceAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipDoResonanceAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipDoResonanceAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipDoResonanceAsk::MergeFrom(const EquipmentRpcEquipDoResonanceAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipDoResonanceAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipDoResonanceAsk::CopyFrom(const EquipmentRpcEquipDoResonanceAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipDoResonanceAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipDoResonanceAsk::Swap(EquipmentRpcEquipDoResonanceAsk* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipDoResonanceAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipDoResonanceAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipDoResonanceAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipDoResonanceReply::kResultFieldNumber;
const int EquipmentRpcEquipDoResonanceReply::kAddAttrFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipDoResonanceReply::EquipmentRpcEquipDoResonanceReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipDoResonanceReply::InitAsDefaultInstance() {
  addattr_ = const_cast< ::EquipResonanceInfo*>(&::EquipResonanceInfo::default_instance());
}

EquipmentRpcEquipDoResonanceReply::EquipmentRpcEquipDoResonanceReply(const EquipmentRpcEquipDoResonanceReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipDoResonanceReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  addattr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipDoResonanceReply::~EquipmentRpcEquipDoResonanceReply() {
  SharedDtor();
}

void EquipmentRpcEquipDoResonanceReply::SharedDtor() {
  if (this != default_instance_) {
    delete addattr_;
  }
}

void EquipmentRpcEquipDoResonanceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipDoResonanceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipDoResonanceReply_descriptor_;
}

const EquipmentRpcEquipDoResonanceReply& EquipmentRpcEquipDoResonanceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipDoResonanceReply* EquipmentRpcEquipDoResonanceReply::default_instance_ = NULL;

EquipmentRpcEquipDoResonanceReply* EquipmentRpcEquipDoResonanceReply::New() const {
  return new EquipmentRpcEquipDoResonanceReply;
}

void EquipmentRpcEquipDoResonanceReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_addattr()) {
      if (addattr_ != NULL) addattr_->::EquipResonanceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipDoResonanceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AddAttr;
        break;
      }

      // optional .EquipResonanceInfo AddAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipDoResonanceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipResonanceInfo AddAttr = 2;
  if (has_addattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addattr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipDoResonanceReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipResonanceInfo AddAttr = 2;
  if (has_addattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addattr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipDoResonanceReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipResonanceInfo AddAttr = 2;
    if (has_addattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addattr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipDoResonanceReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipDoResonanceReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipDoResonanceReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipDoResonanceReply::MergeFrom(const EquipmentRpcEquipDoResonanceReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_addattr()) {
      mutable_addattr()->::EquipResonanceInfo::MergeFrom(from.addattr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipDoResonanceReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipDoResonanceReply::CopyFrom(const EquipmentRpcEquipDoResonanceReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipDoResonanceReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipDoResonanceReply::Swap(EquipmentRpcEquipDoResonanceReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(addattr_, other->addattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipDoResonanceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipDoResonanceReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipDoResonanceReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipResonanceSaveAsk::kConfIdFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipResonanceSaveAsk::EquipmentRpcEquipResonanceSaveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipResonanceSaveAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipResonanceSaveAsk::EquipmentRpcEquipResonanceSaveAsk(const EquipmentRpcEquipResonanceSaveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSaveAsk::SharedCtor() {
  _cached_size_ = 0;
  confid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipResonanceSaveAsk::~EquipmentRpcEquipResonanceSaveAsk() {
  SharedDtor();
}

void EquipmentRpcEquipResonanceSaveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipResonanceSaveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSaveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipResonanceSaveAsk_descriptor_;
}

const EquipmentRpcEquipResonanceSaveAsk& EquipmentRpcEquipResonanceSaveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipResonanceSaveAsk* EquipmentRpcEquipResonanceSaveAsk::default_instance_ = NULL;

EquipmentRpcEquipResonanceSaveAsk* EquipmentRpcEquipResonanceSaveAsk::New() const {
  return new EquipmentRpcEquipResonanceSaveAsk;
}

void EquipmentRpcEquipResonanceSaveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipResonanceSaveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipResonanceSaveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipResonanceSaveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfId = 1 [default = -1];
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipResonanceSaveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfId = 1 [default = -1];
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipResonanceSaveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipResonanceSaveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipResonanceSaveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipResonanceSaveAsk::MergeFrom(const EquipmentRpcEquipResonanceSaveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipResonanceSaveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSaveAsk::CopyFrom(const EquipmentRpcEquipResonanceSaveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipResonanceSaveAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipResonanceSaveAsk::Swap(EquipmentRpcEquipResonanceSaveAsk* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipResonanceSaveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipResonanceSaveAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipResonanceSaveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipResonanceSaveReply::kResultFieldNumber;
const int EquipmentRpcEquipResonanceSaveReply::kResonanceInfoFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipResonanceSaveReply::EquipmentRpcEquipResonanceSaveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipResonanceSaveReply::InitAsDefaultInstance() {
  resonanceinfo_ = const_cast< ::EquipResonanceInfo*>(&::EquipResonanceInfo::default_instance());
}

EquipmentRpcEquipResonanceSaveReply::EquipmentRpcEquipResonanceSaveReply(const EquipmentRpcEquipResonanceSaveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSaveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  resonanceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipResonanceSaveReply::~EquipmentRpcEquipResonanceSaveReply() {
  SharedDtor();
}

void EquipmentRpcEquipResonanceSaveReply::SharedDtor() {
  if (this != default_instance_) {
    delete resonanceinfo_;
  }
}

void EquipmentRpcEquipResonanceSaveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSaveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipResonanceSaveReply_descriptor_;
}

const EquipmentRpcEquipResonanceSaveReply& EquipmentRpcEquipResonanceSaveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipResonanceSaveReply* EquipmentRpcEquipResonanceSaveReply::default_instance_ = NULL;

EquipmentRpcEquipResonanceSaveReply* EquipmentRpcEquipResonanceSaveReply::New() const {
  return new EquipmentRpcEquipResonanceSaveReply;
}

void EquipmentRpcEquipResonanceSaveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_resonanceinfo()) {
      if (resonanceinfo_ != NULL) resonanceinfo_->::EquipResonanceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipResonanceSaveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ResonanceInfo;
        break;
      }

      // optional .EquipResonanceInfo ResonanceInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResonanceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resonanceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipResonanceSaveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  if (has_resonanceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resonanceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipResonanceSaveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipResonanceInfo ResonanceInfo = 2;
  if (has_resonanceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resonanceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipResonanceSaveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipResonanceInfo ResonanceInfo = 2;
    if (has_resonanceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resonanceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipResonanceSaveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipResonanceSaveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipResonanceSaveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipResonanceSaveReply::MergeFrom(const EquipmentRpcEquipResonanceSaveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resonanceinfo()) {
      mutable_resonanceinfo()->::EquipResonanceInfo::MergeFrom(from.resonanceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipResonanceSaveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSaveReply::CopyFrom(const EquipmentRpcEquipResonanceSaveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipResonanceSaveReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipResonanceSaveReply::Swap(EquipmentRpcEquipResonanceSaveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resonanceinfo_, other->resonanceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipResonanceSaveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipResonanceSaveReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipResonanceSaveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentRpcEquipResonanceSyncAsk::EquipmentRpcEquipResonanceSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipResonanceSyncAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipResonanceSyncAsk::EquipmentRpcEquipResonanceSyncAsk(const EquipmentRpcEquipResonanceSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipResonanceSyncAsk::~EquipmentRpcEquipResonanceSyncAsk() {
  SharedDtor();
}

void EquipmentRpcEquipResonanceSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipResonanceSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipResonanceSyncAsk_descriptor_;
}

const EquipmentRpcEquipResonanceSyncAsk& EquipmentRpcEquipResonanceSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipResonanceSyncAsk* EquipmentRpcEquipResonanceSyncAsk::default_instance_ = NULL;

EquipmentRpcEquipResonanceSyncAsk* EquipmentRpcEquipResonanceSyncAsk::New() const {
  return new EquipmentRpcEquipResonanceSyncAsk;
}

void EquipmentRpcEquipResonanceSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipResonanceSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipResonanceSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipResonanceSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipResonanceSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipResonanceSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipResonanceSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipResonanceSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipResonanceSyncAsk::MergeFrom(const EquipmentRpcEquipResonanceSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipResonanceSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSyncAsk::CopyFrom(const EquipmentRpcEquipResonanceSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipResonanceSyncAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipResonanceSyncAsk::Swap(EquipmentRpcEquipResonanceSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipResonanceSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipResonanceSyncAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipResonanceSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipResonanceSyncReply::kResultFieldNumber;
const int EquipmentRpcEquipResonanceSyncReply::kResonanceDataFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipResonanceSyncReply::EquipmentRpcEquipResonanceSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipResonanceSyncReply::InitAsDefaultInstance() {
  resonancedata_ = const_cast< ::EquipResonanceData*>(&::EquipResonanceData::default_instance());
}

EquipmentRpcEquipResonanceSyncReply::EquipmentRpcEquipResonanceSyncReply(const EquipmentRpcEquipResonanceSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  resonancedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipResonanceSyncReply::~EquipmentRpcEquipResonanceSyncReply() {
  SharedDtor();
}

void EquipmentRpcEquipResonanceSyncReply::SharedDtor() {
  if (this != default_instance_) {
    delete resonancedata_;
  }
}

void EquipmentRpcEquipResonanceSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipResonanceSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipResonanceSyncReply_descriptor_;
}

const EquipmentRpcEquipResonanceSyncReply& EquipmentRpcEquipResonanceSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipResonanceSyncReply* EquipmentRpcEquipResonanceSyncReply::default_instance_ = NULL;

EquipmentRpcEquipResonanceSyncReply* EquipmentRpcEquipResonanceSyncReply::New() const {
  return new EquipmentRpcEquipResonanceSyncReply;
}

void EquipmentRpcEquipResonanceSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_resonancedata()) {
      if (resonancedata_ != NULL) resonancedata_->::EquipResonanceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipResonanceSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ResonanceData;
        break;
      }

      // optional .EquipResonanceData ResonanceData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResonanceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resonancedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipResonanceSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipResonanceData ResonanceData = 2;
  if (has_resonancedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resonancedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipResonanceSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipResonanceData ResonanceData = 2;
  if (has_resonancedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resonancedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipResonanceSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipResonanceData ResonanceData = 2;
    if (has_resonancedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resonancedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipResonanceSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipResonanceSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipResonanceSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipResonanceSyncReply::MergeFrom(const EquipmentRpcEquipResonanceSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resonancedata()) {
      mutable_resonancedata()->::EquipResonanceData::MergeFrom(from.resonancedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipResonanceSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipResonanceSyncReply::CopyFrom(const EquipmentRpcEquipResonanceSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipResonanceSyncReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipResonanceSyncReply::Swap(EquipmentRpcEquipResonanceSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resonancedata_, other->resonancedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipResonanceSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipResonanceSyncReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipResonanceSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentRpcEquipWashSyncAsk::EquipmentRpcEquipWashSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashSyncAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipWashSyncAsk::EquipmentRpcEquipWashSyncAsk(const EquipmentRpcEquipWashSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashSyncAsk::~EquipmentRpcEquipWashSyncAsk() {
  SharedDtor();
}

void EquipmentRpcEquipWashSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipWashSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashSyncAsk_descriptor_;
}

const EquipmentRpcEquipWashSyncAsk& EquipmentRpcEquipWashSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashSyncAsk* EquipmentRpcEquipWashSyncAsk::default_instance_ = NULL;

EquipmentRpcEquipWashSyncAsk* EquipmentRpcEquipWashSyncAsk::New() const {
  return new EquipmentRpcEquipWashSyncAsk;
}

void EquipmentRpcEquipWashSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashSyncAsk::MergeFrom(const EquipmentRpcEquipWashSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSyncAsk::CopyFrom(const EquipmentRpcEquipWashSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashSyncAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashSyncAsk::Swap(EquipmentRpcEquipWashSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashSyncAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipWashSyncReply::kResultFieldNumber;
const int EquipmentRpcEquipWashSyncReply::kEquipWashDataFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipWashSyncReply::EquipmentRpcEquipWashSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashSyncReply::InitAsDefaultInstance() {
  equipwashdata_ = const_cast< ::EquipWashData*>(&::EquipWashData::default_instance());
}

EquipmentRpcEquipWashSyncReply::EquipmentRpcEquipWashSyncReply(const EquipmentRpcEquipWashSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  equipwashdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashSyncReply::~EquipmentRpcEquipWashSyncReply() {
  SharedDtor();
}

void EquipmentRpcEquipWashSyncReply::SharedDtor() {
  if (this != default_instance_) {
    delete equipwashdata_;
  }
}

void EquipmentRpcEquipWashSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashSyncReply_descriptor_;
}

const EquipmentRpcEquipWashSyncReply& EquipmentRpcEquipWashSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashSyncReply* EquipmentRpcEquipWashSyncReply::default_instance_ = NULL;

EquipmentRpcEquipWashSyncReply* EquipmentRpcEquipWashSyncReply::New() const {
  return new EquipmentRpcEquipWashSyncReply;
}

void EquipmentRpcEquipWashSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_equipwashdata()) {
      if (equipwashdata_ != NULL) equipwashdata_->::EquipWashData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipWashData;
        break;
      }

      // optional .EquipWashData EquipWashData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipWashData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipwashdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipWashData EquipWashData = 2;
  if (has_equipwashdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipwashdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipWashData EquipWashData = 2;
  if (has_equipwashdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipwashdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipWashData EquipWashData = 2;
    if (has_equipwashdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipwashdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashSyncReply::MergeFrom(const EquipmentRpcEquipWashSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equipwashdata()) {
      mutable_equipwashdata()->::EquipWashData::MergeFrom(from.equipwashdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSyncReply::CopyFrom(const EquipmentRpcEquipWashSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashSyncReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashSyncReply::Swap(EquipmentRpcEquipWashSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equipwashdata_, other->equipwashdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashSyncReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipWashAsk::kGuidFieldNumber;
const int EquipmentRpcEquipWashAsk::kLockedIndexFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipWashAsk::EquipmentRpcEquipWashAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipWashAsk::EquipmentRpcEquipWashAsk(const EquipmentRpcEquipWashAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashAsk::~EquipmentRpcEquipWashAsk() {
  SharedDtor();
}

void EquipmentRpcEquipWashAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipWashAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashAsk_descriptor_;
}

const EquipmentRpcEquipWashAsk& EquipmentRpcEquipWashAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashAsk* EquipmentRpcEquipWashAsk::default_instance_ = NULL;

EquipmentRpcEquipWashAsk* EquipmentRpcEquipWashAsk::New() const {
  return new EquipmentRpcEquipWashAsk;
}

void EquipmentRpcEquipWashAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  lockedindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LockedIndex;
        break;
      }

      // repeated int32 LockedIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lockedindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lockedindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LockedIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // repeated int32 LockedIndex = 2;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lockedindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // repeated int32 LockedIndex = 2;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lockedindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated int32 LockedIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lockedindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lockedindex(i));
    }
    total_size += 1 * this->lockedindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashAsk::MergeFrom(const EquipmentRpcEquipWashAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  lockedindex_.MergeFrom(from.lockedindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashAsk::CopyFrom(const EquipmentRpcEquipWashAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashAsk::Swap(EquipmentRpcEquipWashAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    lockedindex_.Swap(&other->lockedindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipWashReply::kResultFieldNumber;
const int EquipmentRpcEquipWashReply::kEquipWashInfoFieldNumber;
const int EquipmentRpcEquipWashReply::kLeftTimesFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipWashReply::EquipmentRpcEquipWashReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashReply::InitAsDefaultInstance() {
  equipwashinfo_ = const_cast< ::EquipWashInfo*>(&::EquipWashInfo::default_instance());
}

EquipmentRpcEquipWashReply::EquipmentRpcEquipWashReply(const EquipmentRpcEquipWashReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  equipwashinfo_ = NULL;
  lefttimes_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashReply::~EquipmentRpcEquipWashReply() {
  SharedDtor();
}

void EquipmentRpcEquipWashReply::SharedDtor() {
  if (this != default_instance_) {
    delete equipwashinfo_;
  }
}

void EquipmentRpcEquipWashReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashReply_descriptor_;
}

const EquipmentRpcEquipWashReply& EquipmentRpcEquipWashReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashReply* EquipmentRpcEquipWashReply::default_instance_ = NULL;

EquipmentRpcEquipWashReply* EquipmentRpcEquipWashReply::New() const {
  return new EquipmentRpcEquipWashReply;
}

void EquipmentRpcEquipWashReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_equipwashinfo()) {
      if (equipwashinfo_ != NULL) equipwashinfo_->::EquipWashInfo::Clear();
    }
    lefttimes_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipWashInfo;
        break;
      }

      // optional .EquipWashInfo EquipWashInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipWashInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipwashinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LeftTimes;
        break;
      }

      // optional int32 LeftTimes = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipWashInfo EquipWashInfo = 2;
  if (has_equipwashinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipwashinfo(), output);
  }

  // optional int32 LeftTimes = 3 [default = -1];
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefttimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipWashInfo EquipWashInfo = 2;
  if (has_equipwashinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipwashinfo(), target);
  }

  // optional int32 LeftTimes = 3 [default = -1];
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefttimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipWashInfo EquipWashInfo = 2;
    if (has_equipwashinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipwashinfo());
    }

    // optional int32 LeftTimes = 3 [default = -1];
    if (has_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashReply::MergeFrom(const EquipmentRpcEquipWashReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equipwashinfo()) {
      mutable_equipwashinfo()->::EquipWashInfo::MergeFrom(from.equipwashinfo());
    }
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashReply::CopyFrom(const EquipmentRpcEquipWashReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashReply::Swap(EquipmentRpcEquipWashReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equipwashinfo_, other->equipwashinfo_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipWashSaveAsk::kGuidFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipWashSaveAsk::EquipmentRpcEquipWashSaveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashSaveAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipWashSaveAsk::EquipmentRpcEquipWashSaveAsk(const EquipmentRpcEquipWashSaveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSaveAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashSaveAsk::~EquipmentRpcEquipWashSaveAsk() {
  SharedDtor();
}

void EquipmentRpcEquipWashSaveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipWashSaveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSaveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashSaveAsk_descriptor_;
}

const EquipmentRpcEquipWashSaveAsk& EquipmentRpcEquipWashSaveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashSaveAsk* EquipmentRpcEquipWashSaveAsk::default_instance_ = NULL;

EquipmentRpcEquipWashSaveAsk* EquipmentRpcEquipWashSaveAsk::New() const {
  return new EquipmentRpcEquipWashSaveAsk;
}

void EquipmentRpcEquipWashSaveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashSaveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashSaveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashSaveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashSaveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashSaveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashSaveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashSaveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashSaveAsk::MergeFrom(const EquipmentRpcEquipWashSaveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashSaveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSaveAsk::CopyFrom(const EquipmentRpcEquipWashSaveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashSaveAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashSaveAsk::Swap(EquipmentRpcEquipWashSaveAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashSaveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashSaveAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashSaveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipWashSaveReply::kResultFieldNumber;
const int EquipmentRpcEquipWashSaveReply::kItemDataFieldNumber;
const int EquipmentRpcEquipWashSaveReply::kLockedIndexFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipWashSaveReply::EquipmentRpcEquipWashSaveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipWashSaveReply::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

EquipmentRpcEquipWashSaveReply::EquipmentRpcEquipWashSaveReply(const EquipmentRpcEquipWashSaveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSaveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipWashSaveReply::~EquipmentRpcEquipWashSaveReply() {
  SharedDtor();
}

void EquipmentRpcEquipWashSaveReply::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void EquipmentRpcEquipWashSaveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipWashSaveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipWashSaveReply_descriptor_;
}

const EquipmentRpcEquipWashSaveReply& EquipmentRpcEquipWashSaveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipWashSaveReply* EquipmentRpcEquipWashSaveReply::default_instance_ = NULL;

EquipmentRpcEquipWashSaveReply* EquipmentRpcEquipWashSaveReply::New() const {
  return new EquipmentRpcEquipWashSaveReply;
}

void EquipmentRpcEquipWashSaveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
    }
  }
  lockedindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipWashSaveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        break;
      }

      // optional .ItemData ItemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LockedIndex;
        break;
      }

      // repeated int32 LockedIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lockedindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lockedindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LockedIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipWashSaveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ItemData ItemData = 2;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(), output);
  }

  // repeated int32 LockedIndex = 3;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lockedindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipWashSaveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ItemData ItemData = 2;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(), target);
  }

  // repeated int32 LockedIndex = 3;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lockedindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipWashSaveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ItemData ItemData = 2;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  // repeated int32 LockedIndex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lockedindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lockedindex(i));
    }
    total_size += 1 * this->lockedindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipWashSaveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipWashSaveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipWashSaveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipWashSaveReply::MergeFrom(const EquipmentRpcEquipWashSaveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  lockedindex_.MergeFrom(from.lockedindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipWashSaveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipWashSaveReply::CopyFrom(const EquipmentRpcEquipWashSaveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipWashSaveReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipWashSaveReply::Swap(EquipmentRpcEquipWashSaveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemdata_, other->itemdata_);
    lockedindex_.Swap(&other->lockedindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipWashSaveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipWashSaveReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipWashSaveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentRpcEquipBuildSyncAsk::EquipmentRpcEquipBuildSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipBuildSyncAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipBuildSyncAsk::EquipmentRpcEquipBuildSyncAsk(const EquipmentRpcEquipBuildSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipBuildSyncAsk::~EquipmentRpcEquipBuildSyncAsk() {
  SharedDtor();
}

void EquipmentRpcEquipBuildSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipBuildSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipBuildSyncAsk_descriptor_;
}

const EquipmentRpcEquipBuildSyncAsk& EquipmentRpcEquipBuildSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipBuildSyncAsk* EquipmentRpcEquipBuildSyncAsk::default_instance_ = NULL;

EquipmentRpcEquipBuildSyncAsk* EquipmentRpcEquipBuildSyncAsk::New() const {
  return new EquipmentRpcEquipBuildSyncAsk;
}

void EquipmentRpcEquipBuildSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipBuildSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipBuildSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipBuildSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipBuildSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipBuildSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipBuildSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipBuildSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipBuildSyncAsk::MergeFrom(const EquipmentRpcEquipBuildSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipBuildSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildSyncAsk::CopyFrom(const EquipmentRpcEquipBuildSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipBuildSyncAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipBuildSyncAsk::Swap(EquipmentRpcEquipBuildSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipBuildSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipBuildSyncAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipBuildSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipBuildSyncReply::kResultFieldNumber;
const int EquipmentRpcEquipBuildSyncReply::kAtfListFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipBuildSyncReply::EquipmentRpcEquipBuildSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipBuildSyncReply::InitAsDefaultInstance() {
}

EquipmentRpcEquipBuildSyncReply::EquipmentRpcEquipBuildSyncReply(const EquipmentRpcEquipBuildSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipBuildSyncReply::~EquipmentRpcEquipBuildSyncReply() {
  SharedDtor();
}

void EquipmentRpcEquipBuildSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipBuildSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipBuildSyncReply_descriptor_;
}

const EquipmentRpcEquipBuildSyncReply& EquipmentRpcEquipBuildSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipBuildSyncReply* EquipmentRpcEquipBuildSyncReply::default_instance_ = NULL;

EquipmentRpcEquipBuildSyncReply* EquipmentRpcEquipBuildSyncReply::New() const {
  return new EquipmentRpcEquipBuildSyncReply;
}

void EquipmentRpcEquipBuildSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  atf_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipBuildSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Atf_list;
        break;
      }

      // repeated .EquipBuildAtf Atf_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Atf_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atf_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Atf_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipBuildSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .EquipBuildAtf Atf_list = 2;
  for (int i = 0; i < this->atf_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atf_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipBuildSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .EquipBuildAtf Atf_list = 2;
  for (int i = 0; i < this->atf_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atf_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipBuildSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .EquipBuildAtf Atf_list = 2;
  total_size += 1 * this->atf_list_size();
  for (int i = 0; i < this->atf_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atf_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipBuildSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipBuildSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipBuildSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipBuildSyncReply::MergeFrom(const EquipmentRpcEquipBuildSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  atf_list_.MergeFrom(from.atf_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipBuildSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildSyncReply::CopyFrom(const EquipmentRpcEquipBuildSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipBuildSyncReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipBuildSyncReply::Swap(EquipmentRpcEquipBuildSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    atf_list_.Swap(&other->atf_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipBuildSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipBuildSyncReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipBuildSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipBuildAsk::kLevelFieldNumber;
const int EquipmentRpcEquipBuildAsk::kOccupationFieldNumber;
const int EquipmentRpcEquipBuildAsk::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipBuildAsk::EquipmentRpcEquipBuildAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipBuildAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipBuildAsk::EquipmentRpcEquipBuildAsk(const EquipmentRpcEquipBuildAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildAsk::SharedCtor() {
  _cached_size_ = 0;
  level_ = -1;
  occupation_ = -1;
  slot_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipBuildAsk::~EquipmentRpcEquipBuildAsk() {
  SharedDtor();
}

void EquipmentRpcEquipBuildAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipBuildAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipBuildAsk_descriptor_;
}

const EquipmentRpcEquipBuildAsk& EquipmentRpcEquipBuildAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipBuildAsk* EquipmentRpcEquipBuildAsk::default_instance_ = NULL;

EquipmentRpcEquipBuildAsk* EquipmentRpcEquipBuildAsk::New() const {
  return new EquipmentRpcEquipBuildAsk;
}

void EquipmentRpcEquipBuildAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = -1;
    occupation_ = -1;
    slot_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipBuildAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Level = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Occupation;
        break;
      }

      // optional int32 Occupation = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Slot_type;
        break;
      }

      // optional int32 Slot_type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Slot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
          set_has_slot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipBuildAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Level = 1 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->occupation(), output);
  }

  // optional int32 Slot_type = 3 [default = -1];
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipBuildAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Level = 1 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->occupation(), target);
  }

  // optional int32 Slot_type = 3 [default = -1];
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipBuildAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Level = 1 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Occupation = 2 [default = -1];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // optional int32 Slot_type = 3 [default = -1];
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipBuildAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipBuildAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipBuildAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipBuildAsk::MergeFrom(const EquipmentRpcEquipBuildAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipBuildAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildAsk::CopyFrom(const EquipmentRpcEquipBuildAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipBuildAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipBuildAsk::Swap(EquipmentRpcEquipBuildAsk* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(occupation_, other->occupation_);
    std::swap(slot_type_, other->slot_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipBuildAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipBuildAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipBuildAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipBuildReply::kResultFieldNumber;
const int EquipmentRpcEquipBuildReply::kEquipBuildAtfFieldNumber;
const int EquipmentRpcEquipBuildReply::kEquipFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipBuildReply::EquipmentRpcEquipBuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipBuildReply::InitAsDefaultInstance() {
  equipbuildatf_ = const_cast< ::EquipBuildAtf*>(&::EquipBuildAtf::default_instance());
  equip_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
}

EquipmentRpcEquipBuildReply::EquipmentRpcEquipBuildReply(const EquipmentRpcEquipBuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  equipbuildatf_ = NULL;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipBuildReply::~EquipmentRpcEquipBuildReply() {
  SharedDtor();
}

void EquipmentRpcEquipBuildReply::SharedDtor() {
  if (this != default_instance_) {
    delete equipbuildatf_;
    delete equip_;
  }
}

void EquipmentRpcEquipBuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipBuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipBuildReply_descriptor_;
}

const EquipmentRpcEquipBuildReply& EquipmentRpcEquipBuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipBuildReply* EquipmentRpcEquipBuildReply::default_instance_ = NULL;

EquipmentRpcEquipBuildReply* EquipmentRpcEquipBuildReply::New() const {
  return new EquipmentRpcEquipBuildReply;
}

void EquipmentRpcEquipBuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_equipbuildatf()) {
      if (equipbuildatf_ != NULL) equipbuildatf_->::EquipBuildAtf::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::ItemObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipBuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipBuildAtf;
        break;
      }

      // optional .EquipBuildAtf EquipBuildAtf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipBuildAtf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipbuildatf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Equip;
        break;
      }

      // optional .ItemObj Equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipBuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipBuildAtf EquipBuildAtf = 2;
  if (has_equipbuildatf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipbuildatf(), output);
  }

  // optional .ItemObj Equip = 3;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipBuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipBuildAtf EquipBuildAtf = 2;
  if (has_equipbuildatf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipbuildatf(), target);
  }

  // optional .ItemObj Equip = 3;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipBuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipBuildAtf EquipBuildAtf = 2;
    if (has_equipbuildatf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipbuildatf());
    }

    // optional .ItemObj Equip = 3;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipBuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipBuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipBuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipBuildReply::MergeFrom(const EquipmentRpcEquipBuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equipbuildatf()) {
      mutable_equipbuildatf()->::EquipBuildAtf::MergeFrom(from.equipbuildatf());
    }
    if (from.has_equip()) {
      mutable_equip()->::ItemObj::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipBuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipBuildReply::CopyFrom(const EquipmentRpcEquipBuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipBuildReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipBuildReply::Swap(EquipmentRpcEquipBuildReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equipbuildatf_, other->equipbuildatf_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipBuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipBuildReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipBuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcGetPlayerInfoAsk::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcGetPlayerInfoAsk::EquipmentRpcGetPlayerInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcGetPlayerInfoAsk::InitAsDefaultInstance() {
}

EquipmentRpcGetPlayerInfoAsk::EquipmentRpcGetPlayerInfoAsk(const EquipmentRpcGetPlayerInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcGetPlayerInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcGetPlayerInfoAsk::~EquipmentRpcGetPlayerInfoAsk() {
  SharedDtor();
}

void EquipmentRpcGetPlayerInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcGetPlayerInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcGetPlayerInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcGetPlayerInfoAsk_descriptor_;
}

const EquipmentRpcGetPlayerInfoAsk& EquipmentRpcGetPlayerInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcGetPlayerInfoAsk* EquipmentRpcGetPlayerInfoAsk::default_instance_ = NULL;

EquipmentRpcGetPlayerInfoAsk* EquipmentRpcGetPlayerInfoAsk::New() const {
  return new EquipmentRpcGetPlayerInfoAsk;
}

void EquipmentRpcGetPlayerInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcGetPlayerInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Player_guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcGetPlayerInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Player_guid = 1 [default = 0];
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcGetPlayerInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Player_guid = 1 [default = 0];
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcGetPlayerInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Player_guid = 1 [default = 0];
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcGetPlayerInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcGetPlayerInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcGetPlayerInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcGetPlayerInfoAsk::MergeFrom(const EquipmentRpcGetPlayerInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcGetPlayerInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcGetPlayerInfoAsk::CopyFrom(const EquipmentRpcGetPlayerInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcGetPlayerInfoAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcGetPlayerInfoAsk::Swap(EquipmentRpcGetPlayerInfoAsk* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcGetPlayerInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcGetPlayerInfoAsk_descriptor_;
  metadata.reflection = EquipmentRpcGetPlayerInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcGetPlayerInfoReply::kResultFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kPlayerNameFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kPlayerGuidFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kAvatarIdFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kPlayerLevelFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kAvatarFrameIdFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kConfigIdFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kGuildIdFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kGuildNameFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kEquipDataFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kSuitInfosFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kEquipSlotDataFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kEquipSlotStarListFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kJewelInfosFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kBattleScoreFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kPetItemDataFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTreasureHairFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTreasureHeadFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTreasureBodyFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTreasureWeaponFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTreasureWingFieldNumber;
const int EquipmentRpcGetPlayerInfoReply::kTeamIdFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcGetPlayerInfoReply::EquipmentRpcGetPlayerInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcGetPlayerInfoReply::InitAsDefaultInstance() {
  pet_item_data_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

EquipmentRpcGetPlayerInfoReply::EquipmentRpcGetPlayerInfoReply(const EquipmentRpcGetPlayerInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcGetPlayerInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_guid_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = -1;
  player_level_ = -1;
  avatar_frame_id_ = -1;
  config_id_ = -1;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlescore_ = -1;
  pet_item_data_ = NULL;
  treasurehair_ = -1;
  treasurehead_ = -1;
  treasurebody_ = -1;
  treasureweapon_ = -1;
  treasurewing_ = -1;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcGetPlayerInfoReply::~EquipmentRpcGetPlayerInfoReply() {
  SharedDtor();
}

void EquipmentRpcGetPlayerInfoReply::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete pet_item_data_;
  }
}

void EquipmentRpcGetPlayerInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcGetPlayerInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcGetPlayerInfoReply_descriptor_;
}

const EquipmentRpcGetPlayerInfoReply& EquipmentRpcGetPlayerInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcGetPlayerInfoReply* EquipmentRpcGetPlayerInfoReply::default_instance_ = NULL;

EquipmentRpcGetPlayerInfoReply* EquipmentRpcGetPlayerInfoReply::New() const {
  return new EquipmentRpcGetPlayerInfoReply;
}

void EquipmentRpcGetPlayerInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_guid_ = GOOGLE_ULONGLONG(0);
    avatar_id_ = -1;
    player_level_ = -1;
    avatar_frame_id_ = -1;
    config_id_ = -1;
    guild_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    battlescore_ = -1;
    if (has_pet_item_data()) {
      if (pet_item_data_ != NULL) pet_item_data_->::ItemData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    treasurehair_ = -1;
    treasurehead_ = -1;
    treasurebody_ = -1;
    treasureweapon_ = -1;
    treasurewing_ = -1;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  equip_data_.Clear();
  suit_infos_.Clear();
  equipslotdata_.Clear();
  equipslotstarlist_.Clear();
  jewelinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcGetPlayerInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Player_name;
        break;
      }

      // optional string Player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Player_guid;
        break;
      }

      // optional uint64 Player_guid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Avatar_id;
        break;
      }

      // optional int32 Avatar_id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Player_level;
        break;
      }

      // optional int32 Player_level = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
          set_has_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Avatar_frame_id;
        break;
      }

      // optional int32 Avatar_frame_id = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_frame_id_)));
          set_has_avatar_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Config_id;
        break;
      }

      // optional int32 Config_id = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Guild_id;
        break;
      }

      // optional uint64 Guild_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Guild_name;
        break;
      }

      // optional string Guild_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Equip_data;
        if (input->ExpectTag(90)) goto parse_Suit_infos;
        break;
      }

      // repeated .SuitInfo Suit_infos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suit_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Suit_infos;
        if (input->ExpectTag(98)) goto parse_EquipSlotData;
        break;
      }

      // repeated .EquipSlotInfo EquipSlotData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipSlotData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslotdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_EquipSlotData;
        if (input->ExpectTag(106)) goto parse_EquipSlotStarList;
        break;
      }

      // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipSlotStarList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslotstarlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EquipSlotStarList;
        if (input->ExpectTag(114)) goto parse_JewelInfos;
        break;
      }

      // repeated .JewelInfo JewelInfos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jewelinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_JewelInfos;
        if (input->ExpectTag(128)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Pet_item_data;
        break;
      }

      // optional .ItemData Pet_item_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pet_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_TreasureHair;
        break;
      }

      // optional int32 TreasureHair = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehair_)));
          set_has_treasurehair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_TreasureHead;
        break;
      }

      // optional int32 TreasureHead = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehead_)));
          set_has_treasurehead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_TreasureBody;
        break;
      }

      // optional int32 TreasureBody = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurebody_)));
          set_has_treasurebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_TreasureWeapon;
        break;
      }

      // optional int32 TreasureWeapon = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureweapon_)));
          set_has_treasureweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_TreasureWing;
        break;
      }

      // optional int32 TreasureWing = 23 [default = -1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurewing_)));
          set_has_treasurewing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcGetPlayerInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string Player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional uint64 Player_guid = 3 [default = 0];
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_guid(), output);
  }

  // optional int32 Avatar_id = 4 [default = -1];
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avatar_id(), output);
  }

  // optional int32 Player_level = 5 [default = -1];
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_level(), output);
  }

  // optional int32 Avatar_frame_id = 6 [default = -1];
  if (has_avatar_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->avatar_frame_id(), output);
  }

  // optional int32 Config_id = 7 [default = -1];
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->config_id(), output);
  }

  // optional uint64 Guild_id = 8 [default = 0];
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->guild_id(), output);
  }

  // optional string Guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guild_name(), output);
  }

  // repeated .ItemData Equip_data = 10;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equip_data(i), output);
  }

  // repeated .SuitInfo Suit_infos = 11;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->suit_infos(i), output);
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->equipslotdata(i), output);
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equipslotstarlist(i), output);
  }

  // repeated .JewelInfo JewelInfos = 14;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->jewelinfos(i), output);
  }

  // optional int32 BattleScore = 16 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->battlescore(), output);
  }

  // optional .ItemData Pet_item_data = 18;
  if (has_pet_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->pet_item_data(), output);
  }

  // optional int32 TreasureHair = 19 [default = -1];
  if (has_treasurehair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->treasurehair(), output);
  }

  // optional int32 TreasureHead = 20 [default = -1];
  if (has_treasurehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->treasurehead(), output);
  }

  // optional int32 TreasureBody = 21 [default = -1];
  if (has_treasurebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->treasurebody(), output);
  }

  // optional int32 TreasureWeapon = 22 [default = -1];
  if (has_treasureweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->treasureweapon(), output);
  }

  // optional int32 TreasureWing = 23 [default = -1];
  if (has_treasurewing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->treasurewing(), output);
  }

  // optional uint64 TeamId = 24 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcGetPlayerInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string Player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional uint64 Player_guid = 3 [default = 0];
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_guid(), target);
  }

  // optional int32 Avatar_id = 4 [default = -1];
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avatar_id(), target);
  }

  // optional int32 Player_level = 5 [default = -1];
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_level(), target);
  }

  // optional int32 Avatar_frame_id = 6 [default = -1];
  if (has_avatar_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->avatar_frame_id(), target);
  }

  // optional int32 Config_id = 7 [default = -1];
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->config_id(), target);
  }

  // optional uint64 Guild_id = 8 [default = 0];
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->guild_id(), target);
  }

  // optional string Guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // repeated .ItemData Equip_data = 10;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equip_data(i), target);
  }

  // repeated .SuitInfo Suit_infos = 11;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->suit_infos(i), target);
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->equipslotdata(i), target);
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->equipslotstarlist(i), target);
  }

  // repeated .JewelInfo JewelInfos = 14;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->jewelinfos(i), target);
  }

  // optional int32 BattleScore = 16 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->battlescore(), target);
  }

  // optional .ItemData Pet_item_data = 18;
  if (has_pet_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->pet_item_data(), target);
  }

  // optional int32 TreasureHair = 19 [default = -1];
  if (has_treasurehair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->treasurehair(), target);
  }

  // optional int32 TreasureHead = 20 [default = -1];
  if (has_treasurehead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->treasurehead(), target);
  }

  // optional int32 TreasureBody = 21 [default = -1];
  if (has_treasurebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->treasurebody(), target);
  }

  // optional int32 TreasureWeapon = 22 [default = -1];
  if (has_treasureweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->treasureweapon(), target);
  }

  // optional int32 TreasureWing = 23 [default = -1];
  if (has_treasurewing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->treasurewing(), target);
  }

  // optional uint64 TeamId = 24 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcGetPlayerInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string Player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 Player_guid = 3 [default = 0];
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional int32 Avatar_id = 4 [default = -1];
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 Player_level = 5 [default = -1];
    if (has_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional int32 Avatar_frame_id = 6 [default = -1];
    if (has_avatar_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_frame_id());
    }

    // optional int32 Config_id = 7 [default = -1];
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional uint64 Guild_id = 8 [default = 0];
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional int32 BattleScore = 16 [default = -1];
    if (has_battlescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional .ItemData Pet_item_data = 18;
    if (has_pet_item_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_item_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 TreasureHair = 19 [default = -1];
    if (has_treasurehair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehair());
    }

    // optional int32 TreasureHead = 20 [default = -1];
    if (has_treasurehead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehead());
    }

    // optional int32 TreasureBody = 21 [default = -1];
    if (has_treasurebody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurebody());
    }

    // optional int32 TreasureWeapon = 22 [default = -1];
    if (has_treasureweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureweapon());
    }

    // optional int32 TreasureWing = 23 [default = -1];
    if (has_treasurewing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurewing());
    }

    // optional uint64 TeamId = 24 [default = 0];
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  // repeated .ItemData Equip_data = 10;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  // repeated .SuitInfo Suit_infos = 11;
  total_size += 1 * this->suit_infos_size();
  for (int i = 0; i < this->suit_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_infos(i));
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  total_size += 1 * this->equipslotdata_size();
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslotdata(i));
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  total_size += 1 * this->equipslotstarlist_size();
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslotstarlist(i));
  }

  // repeated .JewelInfo JewelInfos = 14;
  total_size += 1 * this->jewelinfos_size();
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jewelinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcGetPlayerInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcGetPlayerInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcGetPlayerInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcGetPlayerInfoReply::MergeFrom(const EquipmentRpcGetPlayerInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  suit_infos_.MergeFrom(from.suit_infos_);
  equipslotdata_.MergeFrom(from.equipslotdata_);
  equipslotstarlist_.MergeFrom(from.equipslotstarlist_);
  jewelinfos_.MergeFrom(from.jewelinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
    if (from.has_avatar_frame_id()) {
      set_avatar_frame_id(from.avatar_frame_id());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_pet_item_data()) {
      mutable_pet_item_data()->::ItemData::MergeFrom(from.pet_item_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_treasurehair()) {
      set_treasurehair(from.treasurehair());
    }
    if (from.has_treasurehead()) {
      set_treasurehead(from.treasurehead());
    }
    if (from.has_treasurebody()) {
      set_treasurebody(from.treasurebody());
    }
    if (from.has_treasureweapon()) {
      set_treasureweapon(from.treasureweapon());
    }
    if (from.has_treasurewing()) {
      set_treasurewing(from.treasurewing());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcGetPlayerInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcGetPlayerInfoReply::CopyFrom(const EquipmentRpcGetPlayerInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcGetPlayerInfoReply::IsInitialized() const {

  return true;
}

void EquipmentRpcGetPlayerInfoReply::Swap(EquipmentRpcGetPlayerInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(player_level_, other->player_level_);
    std::swap(avatar_frame_id_, other->avatar_frame_id_);
    std::swap(config_id_, other->config_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    equip_data_.Swap(&other->equip_data_);
    suit_infos_.Swap(&other->suit_infos_);
    equipslotdata_.Swap(&other->equipslotdata_);
    equipslotstarlist_.Swap(&other->equipslotstarlist_);
    jewelinfos_.Swap(&other->jewelinfos_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(pet_item_data_, other->pet_item_data_);
    std::swap(treasurehair_, other->treasurehair_);
    std::swap(treasurehead_, other->treasurehead_);
    std::swap(treasurebody_, other->treasurebody_);
    std::swap(treasureweapon_, other->treasureweapon_);
    std::swap(treasurewing_, other->treasurewing_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcGetPlayerInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcGetPlayerInfoReply_descriptor_;
  metadata.reflection = EquipmentRpcGetPlayerInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipInheritAsk::kToGuidFieldNumber;
const int EquipmentRpcEquipInheritAsk::kFromGuidFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipInheritAsk::EquipmentRpcEquipInheritAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipInheritAsk::InitAsDefaultInstance() {
}

EquipmentRpcEquipInheritAsk::EquipmentRpcEquipInheritAsk(const EquipmentRpcEquipInheritAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipInheritAsk::SharedCtor() {
  _cached_size_ = 0;
  toguid_ = GOOGLE_ULONGLONG(0);
  fromguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipInheritAsk::~EquipmentRpcEquipInheritAsk() {
  SharedDtor();
}

void EquipmentRpcEquipInheritAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRpcEquipInheritAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipInheritAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipInheritAsk_descriptor_;
}

const EquipmentRpcEquipInheritAsk& EquipmentRpcEquipInheritAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipInheritAsk* EquipmentRpcEquipInheritAsk::default_instance_ = NULL;

EquipmentRpcEquipInheritAsk* EquipmentRpcEquipInheritAsk::New() const {
  return new EquipmentRpcEquipInheritAsk;
}

void EquipmentRpcEquipInheritAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toguid_ = GOOGLE_ULONGLONG(0);
    fromguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipInheritAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ToGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toguid_)));
          set_has_toguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FromGuid;
        break;
      }

      // optional uint64 FromGuid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromguid_)));
          set_has_fromguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipInheritAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ToGuid = 1 [default = 0];
  if (has_toguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->toguid(), output);
  }

  // optional uint64 FromGuid = 2 [default = 0];
  if (has_fromguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fromguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipInheritAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ToGuid = 1 [default = 0];
  if (has_toguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->toguid(), target);
  }

  // optional uint64 FromGuid = 2 [default = 0];
  if (has_fromguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fromguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipInheritAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ToGuid = 1 [default = 0];
    if (has_toguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toguid());
    }

    // optional uint64 FromGuid = 2 [default = 0];
    if (has_fromguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipInheritAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipInheritAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipInheritAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipInheritAsk::MergeFrom(const EquipmentRpcEquipInheritAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toguid()) {
      set_toguid(from.toguid());
    }
    if (from.has_fromguid()) {
      set_fromguid(from.fromguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipInheritAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipInheritAsk::CopyFrom(const EquipmentRpcEquipInheritAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipInheritAsk::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipInheritAsk::Swap(EquipmentRpcEquipInheritAsk* other) {
  if (other != this) {
    std::swap(toguid_, other->toguid_);
    std::swap(fromguid_, other->fromguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipInheritAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipInheritAsk_descriptor_;
  metadata.reflection = EquipmentRpcEquipInheritAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRpcEquipInheritReply::kResultFieldNumber;
const int EquipmentRpcEquipInheritReply::kNewEquipFieldNumber;
const int EquipmentRpcEquipInheritReply::kEquipDataFieldNumber;
const int EquipmentRpcEquipInheritReply::kSuitInfosFieldNumber;
const int EquipmentRpcEquipInheritReply::kFromGuidFieldNumber;
#endif  // !_MSC_VER

EquipmentRpcEquipInheritReply::EquipmentRpcEquipInheritReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRpcEquipInheritReply::InitAsDefaultInstance() {
  newequip_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

EquipmentRpcEquipInheritReply::EquipmentRpcEquipInheritReply(const EquipmentRpcEquipInheritReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRpcEquipInheritReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  newequip_ = NULL;
  fromguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRpcEquipInheritReply::~EquipmentRpcEquipInheritReply() {
  SharedDtor();
}

void EquipmentRpcEquipInheritReply::SharedDtor() {
  if (this != default_instance_) {
    delete newequip_;
  }
}

void EquipmentRpcEquipInheritReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRpcEquipInheritReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRpcEquipInheritReply_descriptor_;
}

const EquipmentRpcEquipInheritReply& EquipmentRpcEquipInheritReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRpc_2eproto();
  return *default_instance_;
}

EquipmentRpcEquipInheritReply* EquipmentRpcEquipInheritReply::default_instance_ = NULL;

EquipmentRpcEquipInheritReply* EquipmentRpcEquipInheritReply::New() const {
  return new EquipmentRpcEquipInheritReply;
}

void EquipmentRpcEquipInheritReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_newequip()) {
      if (newequip_ != NULL) newequip_->::ItemData::Clear();
    }
    fromguid_ = GOOGLE_ULONGLONG(0);
  }
  equipdata_.Clear();
  suitinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRpcEquipInheritReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NewEquip;
        break;
      }

      // optional .ItemData NewEquip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EquipData;
        break;
      }

      // repeated .ItemData EquipData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EquipData;
        if (input->ExpectTag(50)) goto parse_SuitInfos;
        break;
      }

      // repeated .SuitInfo SuitInfos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuitInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suitinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SuitInfos;
        if (input->ExpectTag(56)) goto parse_FromGuid;
        break;
      }

      // optional uint64 FromGuid = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromguid_)));
          set_has_fromguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRpcEquipInheritReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .ItemData NewEquip = 4;
  if (has_newequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newequip(), output);
  }

  // repeated .ItemData EquipData = 5;
  for (int i = 0; i < this->equipdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipdata(i), output);
  }

  // repeated .SuitInfo SuitInfos = 6;
  for (int i = 0; i < this->suitinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->suitinfos(i), output);
  }

  // optional uint64 FromGuid = 7 [default = 0];
  if (has_fromguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fromguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRpcEquipInheritReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .ItemData NewEquip = 4;
  if (has_newequip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newequip(), target);
  }

  // repeated .ItemData EquipData = 5;
  for (int i = 0; i < this->equipdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipdata(i), target);
  }

  // repeated .SuitInfo SuitInfos = 6;
  for (int i = 0; i < this->suitinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->suitinfos(i), target);
  }

  // optional uint64 FromGuid = 7 [default = 0];
  if (has_fromguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fromguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRpcEquipInheritReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .ItemData NewEquip = 4;
    if (has_newequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newequip());
    }

    // optional uint64 FromGuid = 7 [default = 0];
    if (has_fromguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromguid());
    }

  }
  // repeated .ItemData EquipData = 5;
  total_size += 1 * this->equipdata_size();
  for (int i = 0; i < this->equipdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipdata(i));
  }

  // repeated .SuitInfo SuitInfos = 6;
  total_size += 1 * this->suitinfos_size();
  for (int i = 0; i < this->suitinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suitinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRpcEquipInheritReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRpcEquipInheritReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRpcEquipInheritReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRpcEquipInheritReply::MergeFrom(const EquipmentRpcEquipInheritReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipdata_.MergeFrom(from.equipdata_);
  suitinfos_.MergeFrom(from.suitinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newequip()) {
      mutable_newequip()->::ItemData::MergeFrom(from.newequip());
    }
    if (from.has_fromguid()) {
      set_fromguid(from.fromguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRpcEquipInheritReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRpcEquipInheritReply::CopyFrom(const EquipmentRpcEquipInheritReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRpcEquipInheritReply::IsInitialized() const {

  return true;
}

void EquipmentRpcEquipInheritReply::Swap(EquipmentRpcEquipInheritReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newequip_, other->newequip_);
    equipdata_.Swap(&other->equipdata_);
    suitinfos_.Swap(&other->suitinfos_);
    std::swap(fromguid_, other->fromguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRpcEquipInheritReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRpcEquipInheritReply_descriptor_;
  metadata.reflection = EquipmentRpcEquipInheritReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
