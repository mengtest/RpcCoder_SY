// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildRpc.proto

#ifndef PROTOBUF_GuildRpc_2eproto__INCLUDED
#define PROTOBUF_GuildRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GuildRpc_2eproto();
void protobuf_AssignDesc_GuildRpc_2eproto();
void protobuf_ShutdownFile_GuildRpc_2eproto();

class GuildRpcGuildBaseInfoAsk;
class GuildRpcGuildBaseInfoReply;
class GuildRpcKickMemberAsk;
class GuildRpcKickMemberReply;
class GuildRpcKickMemberNotifyNotify;
class GuildRpcAskVacationAsk;
class GuildRpcAskVacationReply;
class GuildRpcVacationNotify;
class GuildRpcReplyVacationNotify;
class GuildRpcAskApplyListAsk;
class GuildRpcAskApplyListReply;
class GuildRpcApplyGuildOperationAsk;
class GuildRpcApplyGuildOperationReply;
class GuildRpcApplyGuildNotify;
class GuildRpcApplyLimitSettingAsk;
class GuildRpcApplyLimitSettingReply;
class GuildRpcAskJurisdictionListAsk;
class GuildRpcAskJurisdictionListReply;
class GuildRpcSetJurisdictionAsk;
class GuildRpcSetJurisdictionReply;
class GuildRpcAskVacationListAsk;
class GuildRpcAskVacationListReply;
class GuildRpcVacationGuildOperationAsk;
class GuildRpcVacationGuildOperationReply;
class GuildRpcApplyGuildToOfficeNotify;
class GuildRpcAskBuildingInfoAsk;
class GuildRpcAskBuildingInfoReply;
class GuildRpcBuildingLvUpAsk;
class GuildRpcBuildingLvUpReply;
class GuildRpcBuildingLvSpeedUpAsk;
class GuildRpcBuildingLvSpeedUpReply;
class GuildRpcAskBuildingContributionListAsk;
class GuildRpcAskBuildingContributionListReply;
class GuildRpcBuildingCanLvUpNotify;
class GuildRpcAskGuildEventListAsk;
class GuildRpcAskGuildEventListReply;
class GuildRpcAskGuildInfoListAsk;
class GuildRpcAskGuildInfoListReply;
class GuildRpcSearchGuildAsk;
class GuildRpcSearchGuildReply;
class GuildRpcJoinGuildAsk;
class GuildRpcJoinGuildReply;
class GuildRpcCreateGuildAsk;
class GuildRpcCreateGuildReply;
class GuildRpcChangeFlagAsk;
class GuildRpcChangeFlagReply;
class GuildRpcGuildChangeNameAsk;
class GuildRpcGuildChangeNameReply;
class GuildRpcAskGuildMemberAsk;
class GuildRpcAskGuildMemberReply;
class GuildRpcQuiteGuildAsk;
class GuildRpcQuiteGuildReply;
class GuildRpcSetOfficeAsk;
class GuildRpcSetOfficeReply;
class GuildRpcOfficeChangeNotify;
class GuildRpcChangeCreedAsk;
class GuildRpcChangeCreedReply;
class GuildRpcForbiddenChatAsk;
class GuildRpcForbiddenChatReply;
class GuildRpcBuildLvUpCompleteNotify;
class GuildRpcGuildCurrencyChangeNotify;

// ===================================================================

class GuildRpcGuildBaseInfoAsk : public ::google::protobuf::Message {
 public:
  GuildRpcGuildBaseInfoAsk();
  virtual ~GuildRpcGuildBaseInfoAsk();

  GuildRpcGuildBaseInfoAsk(const GuildRpcGuildBaseInfoAsk& from);

  inline GuildRpcGuildBaseInfoAsk& operator=(const GuildRpcGuildBaseInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcGuildBaseInfoAsk& default_instance();

  void Swap(GuildRpcGuildBaseInfoAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcGuildBaseInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcGuildBaseInfoAsk& from);
  void MergeFrom(const GuildRpcGuildBaseInfoAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcGuildBaseInfoAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcGuildBaseInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcGuildBaseInfoReply : public ::google::protobuf::Message {
 public:
  GuildRpcGuildBaseInfoReply();
  virtual ~GuildRpcGuildBaseInfoReply();

  GuildRpcGuildBaseInfoReply(const GuildRpcGuildBaseInfoReply& from);

  inline GuildRpcGuildBaseInfoReply& operator=(const GuildRpcGuildBaseInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcGuildBaseInfoReply& default_instance();

  void Swap(GuildRpcGuildBaseInfoReply* other);

  // implements Message ----------------------------------------------

  GuildRpcGuildBaseInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcGuildBaseInfoReply& from);
  void MergeFrom(const GuildRpcGuildBaseInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GuildInfo GuildBaseInfo = 2;
  inline bool has_guildbaseinfo() const;
  inline void clear_guildbaseinfo();
  static const int kGuildBaseInfoFieldNumber = 2;
  inline const ::GuildInfo& guildbaseinfo() const;
  inline ::GuildInfo* mutable_guildbaseinfo();
  inline ::GuildInfo* release_guildbaseinfo();
  inline void set_allocated_guildbaseinfo(::GuildInfo* guildbaseinfo);

  // @@protoc_insertion_point(class_scope:GuildRpcGuildBaseInfoReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildbaseinfo();
  inline void clear_has_guildbaseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildInfo* guildbaseinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcGuildBaseInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcKickMemberAsk : public ::google::protobuf::Message {
 public:
  GuildRpcKickMemberAsk();
  virtual ~GuildRpcKickMemberAsk();

  GuildRpcKickMemberAsk(const GuildRpcKickMemberAsk& from);

  inline GuildRpcKickMemberAsk& operator=(const GuildRpcKickMemberAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcKickMemberAsk& default_instance();

  void Swap(GuildRpcKickMemberAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcKickMemberAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcKickMemberAsk& from);
  void MergeFrom(const GuildRpcKickMemberAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Guid = 1 [default = -1];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // optional string KickReason = 2;
  inline bool has_kickreason() const;
  inline void clear_kickreason();
  static const int kKickReasonFieldNumber = 2;
  inline const ::std::string& kickreason() const;
  inline void set_kickreason(const ::std::string& value);
  inline void set_kickreason(const char* value);
  inline void set_kickreason(const char* value, size_t size);
  inline ::std::string* mutable_kickreason();
  inline ::std::string* release_kickreason();
  inline void set_allocated_kickreason(::std::string* kickreason);

  // optional int32 ReasonType = 3 [default = -1];
  inline bool has_reasontype() const;
  inline void clear_reasontype();
  static const int kReasonTypeFieldNumber = 3;
  inline ::google::protobuf::int32 reasontype() const;
  inline void set_reasontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcKickMemberAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_kickreason();
  inline void clear_has_kickreason();
  inline void set_has_reasontype();
  inline void clear_has_reasontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* kickreason_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 reasontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcKickMemberAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcKickMemberReply : public ::google::protobuf::Message {
 public:
  GuildRpcKickMemberReply();
  virtual ~GuildRpcKickMemberReply();

  GuildRpcKickMemberReply(const GuildRpcKickMemberReply& from);

  inline GuildRpcKickMemberReply& operator=(const GuildRpcKickMemberReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcKickMemberReply& default_instance();

  void Swap(GuildRpcKickMemberReply* other);

  // implements Message ----------------------------------------------

  GuildRpcKickMemberReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcKickMemberReply& from);
  void MergeFrom(const GuildRpcKickMemberReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 Guid = 2 [default = -1];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // optional int32 OnlineCount = 3 [default = -1];
  inline bool has_onlinecount() const;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 3;
  inline ::google::protobuf::int32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::int32 value);

  // optional int32 MemberCount = 4 [default = -1];
  inline bool has_membercount() const;
  inline void clear_membercount();
  static const int kMemberCountFieldNumber = 4;
  inline ::google::protobuf::int32 membercount() const;
  inline void set_membercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcKickMemberReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_onlinecount();
  inline void clear_has_onlinecount();
  inline void set_has_membercount();
  inline void clear_has_membercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 onlinecount_;
  ::google::protobuf::int32 membercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcKickMemberReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcKickMemberNotifyNotify : public ::google::protobuf::Message {
 public:
  GuildRpcKickMemberNotifyNotify();
  virtual ~GuildRpcKickMemberNotifyNotify();

  GuildRpcKickMemberNotifyNotify(const GuildRpcKickMemberNotifyNotify& from);

  inline GuildRpcKickMemberNotifyNotify& operator=(const GuildRpcKickMemberNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcKickMemberNotifyNotify& default_instance();

  void Swap(GuildRpcKickMemberNotifyNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcKickMemberNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcKickMemberNotifyNotify& from);
  void MergeFrom(const GuildRpcKickMemberNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string KickReason = 1;
  inline bool has_kickreason() const;
  inline void clear_kickreason();
  static const int kKickReasonFieldNumber = 1;
  inline const ::std::string& kickreason() const;
  inline void set_kickreason(const ::std::string& value);
  inline void set_kickreason(const char* value);
  inline void set_kickreason(const char* value, size_t size);
  inline ::std::string* mutable_kickreason();
  inline ::std::string* release_kickreason();
  inline void set_allocated_kickreason(::std::string* kickreason);

  // optional int32 ReasonType = 2 [default = -1];
  inline bool has_reasontype() const;
  inline void clear_reasontype();
  static const int kReasonTypeFieldNumber = 2;
  inline ::google::protobuf::int32 reasontype() const;
  inline void set_reasontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcKickMemberNotifyNotify)
 private:
  inline void set_has_kickreason();
  inline void clear_has_kickreason();
  inline void set_has_reasontype();
  inline void clear_has_reasontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* kickreason_;
  ::google::protobuf::int32 reasontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcKickMemberNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskVacationAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskVacationAsk();
  virtual ~GuildRpcAskVacationAsk();

  GuildRpcAskVacationAsk(const GuildRpcAskVacationAsk& from);

  inline GuildRpcAskVacationAsk& operator=(const GuildRpcAskVacationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskVacationAsk& default_instance();

  void Swap(GuildRpcAskVacationAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskVacationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskVacationAsk& from);
  void MergeFrom(const GuildRpcAskVacationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Guid = 1 [default = -1];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // optional string Reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 Type = 4 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskVacationAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* reason_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskVacationAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskVacationReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskVacationReply();
  virtual ~GuildRpcAskVacationReply();

  GuildRpcAskVacationReply(const GuildRpcAskVacationReply& from);

  inline GuildRpcAskVacationReply& operator=(const GuildRpcAskVacationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskVacationReply& default_instance();

  void Swap(GuildRpcAskVacationReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskVacationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskVacationReply& from);
  void MergeFrom(const GuildRpcAskVacationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 Guid = 2 [default = -1];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // optional int32 Type = 3 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskVacationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskVacationReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcVacationNotify : public ::google::protobuf::Message {
 public:
  GuildRpcVacationNotify();
  virtual ~GuildRpcVacationNotify();

  GuildRpcVacationNotify(const GuildRpcVacationNotify& from);

  inline GuildRpcVacationNotify& operator=(const GuildRpcVacationNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcVacationNotify& default_instance();

  void Swap(GuildRpcVacationNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcVacationNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcVacationNotify& from);
  void MergeFrom(const GuildRpcVacationNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GuildVacationInfo VacationInfo = 2;
  inline bool has_vacationinfo() const;
  inline void clear_vacationinfo();
  static const int kVacationInfoFieldNumber = 2;
  inline const ::GuildVacationInfo& vacationinfo() const;
  inline ::GuildVacationInfo* mutable_vacationinfo();
  inline ::GuildVacationInfo* release_vacationinfo();
  inline void set_allocated_vacationinfo(::GuildVacationInfo* vacationinfo);

  // optional int32 Type = 3 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcVacationNotify)
 private:
  inline void set_has_vacationinfo();
  inline void clear_has_vacationinfo();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildVacationInfo* vacationinfo_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcVacationNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcReplyVacationNotify : public ::google::protobuf::Message {
 public:
  GuildRpcReplyVacationNotify();
  virtual ~GuildRpcReplyVacationNotify();

  GuildRpcReplyVacationNotify(const GuildRpcReplyVacationNotify& from);

  inline GuildRpcReplyVacationNotify& operator=(const GuildRpcReplyVacationNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcReplyVacationNotify& default_instance();

  void Swap(GuildRpcReplyVacationNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcReplyVacationNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcReplyVacationNotify& from);
  void MergeFrom(const GuildRpcReplyVacationNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcReplyVacationNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcReplyVacationNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskApplyListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskApplyListAsk();
  virtual ~GuildRpcAskApplyListAsk();

  GuildRpcAskApplyListAsk(const GuildRpcAskApplyListAsk& from);

  inline GuildRpcAskApplyListAsk& operator=(const GuildRpcAskApplyListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskApplyListAsk& default_instance();

  void Swap(GuildRpcAskApplyListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskApplyListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskApplyListAsk& from);
  void MergeFrom(const GuildRpcAskApplyListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskApplyListAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskApplyListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskApplyListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskApplyListReply();
  virtual ~GuildRpcAskApplyListReply();

  GuildRpcAskApplyListReply(const GuildRpcAskApplyListReply& from);

  inline GuildRpcAskApplyListReply& operator=(const GuildRpcAskApplyListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskApplyListReply& default_instance();

  void Swap(GuildRpcAskApplyListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskApplyListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskApplyListReply& from);
  void MergeFrom(const GuildRpcAskApplyListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
  inline int guildmembertinyinfolist_size() const;
  inline void clear_guildmembertinyinfolist();
  static const int kGuildMemberTinyInfoListFieldNumber = 2;
  inline const ::GuildMemberTinyInfo& guildmembertinyinfolist(int index) const;
  inline ::GuildMemberTinyInfo* mutable_guildmembertinyinfolist(int index);
  inline ::GuildMemberTinyInfo* add_guildmembertinyinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberTinyInfo >&
      guildmembertinyinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildMemberTinyInfo >*
      mutable_guildmembertinyinfolist();

  // @@protoc_insertion_point(class_scope:GuildRpcAskApplyListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildMemberTinyInfo > guildmembertinyinfolist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskApplyListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyGuildOperationAsk : public ::google::protobuf::Message {
 public:
  GuildRpcApplyGuildOperationAsk();
  virtual ~GuildRpcApplyGuildOperationAsk();

  GuildRpcApplyGuildOperationAsk(const GuildRpcApplyGuildOperationAsk& from);

  inline GuildRpcApplyGuildOperationAsk& operator=(const GuildRpcApplyGuildOperationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyGuildOperationAsk& default_instance();

  void Swap(GuildRpcApplyGuildOperationAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyGuildOperationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyGuildOperationAsk& from);
  void MergeFrom(const GuildRpcApplyGuildOperationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 Operation = 2 [default = -1];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyGuildOperationAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyGuildOperationAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyGuildOperationReply : public ::google::protobuf::Message {
 public:
  GuildRpcApplyGuildOperationReply();
  virtual ~GuildRpcApplyGuildOperationReply();

  GuildRpcApplyGuildOperationReply(const GuildRpcApplyGuildOperationReply& from);

  inline GuildRpcApplyGuildOperationReply& operator=(const GuildRpcApplyGuildOperationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyGuildOperationReply& default_instance();

  void Swap(GuildRpcApplyGuildOperationReply* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyGuildOperationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyGuildOperationReply& from);
  void MergeFrom(const GuildRpcApplyGuildOperationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 Operation = 3 [default = -1];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);

  // repeated .GuildMemberInfo MemberInfoList = 4;
  inline int memberinfolist_size() const;
  inline void clear_memberinfolist();
  static const int kMemberInfoListFieldNumber = 4;
  inline const ::GuildMemberInfo& memberinfolist(int index) const;
  inline ::GuildMemberInfo* mutable_memberinfolist(int index);
  inline ::GuildMemberInfo* add_memberinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >&
      memberinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >*
      mutable_memberinfolist();

  // optional int32 OnlineCount = 5 [default = -1];
  inline bool has_onlinecount() const;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 5;
  inline ::google::protobuf::int32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::int32 value);

  // optional int32 MemberCount = 6 [default = -1];
  inline bool has_membercount() const;
  inline void clear_membercount();
  static const int kMemberCountFieldNumber = 6;
  inline ::google::protobuf::int32 membercount() const;
  inline void set_membercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyGuildOperationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_onlinecount();
  inline void clear_has_onlinecount();
  inline void set_has_membercount();
  inline void clear_has_membercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operation_;
  ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo > memberinfolist_;
  ::google::protobuf::int32 onlinecount_;
  ::google::protobuf::int32 membercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyGuildOperationReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyGuildNotify : public ::google::protobuf::Message {
 public:
  GuildRpcApplyGuildNotify();
  virtual ~GuildRpcApplyGuildNotify();

  GuildRpcApplyGuildNotify(const GuildRpcApplyGuildNotify& from);

  inline GuildRpcApplyGuildNotify& operator=(const GuildRpcApplyGuildNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyGuildNotify& default_instance();

  void Swap(GuildRpcApplyGuildNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyGuildNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyGuildNotify& from);
  void MergeFrom(const GuildRpcApplyGuildNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildID = 1 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyGuildNotify)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyGuildNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyLimitSettingAsk : public ::google::protobuf::Message {
 public:
  GuildRpcApplyLimitSettingAsk();
  virtual ~GuildRpcApplyLimitSettingAsk();

  GuildRpcApplyLimitSettingAsk(const GuildRpcApplyLimitSettingAsk& from);

  inline GuildRpcApplyLimitSettingAsk& operator=(const GuildRpcApplyLimitSettingAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyLimitSettingAsk& default_instance();

  void Swap(GuildRpcApplyLimitSettingAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyLimitSettingAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyLimitSettingAsk& from);
  void MergeFrom(const GuildRpcApplyLimitSettingAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsAutoJoin = 1 [default = false];
  inline bool has_isautojoin() const;
  inline void clear_isautojoin();
  static const int kIsAutoJoinFieldNumber = 1;
  inline bool isautojoin() const;
  inline void set_isautojoin(bool value);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyLimitSettingAsk)
 private:
  inline void set_has_isautojoin();
  inline void clear_has_isautojoin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isautojoin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyLimitSettingAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyLimitSettingReply : public ::google::protobuf::Message {
 public:
  GuildRpcApplyLimitSettingReply();
  virtual ~GuildRpcApplyLimitSettingReply();

  GuildRpcApplyLimitSettingReply(const GuildRpcApplyLimitSettingReply& from);

  inline GuildRpcApplyLimitSettingReply& operator=(const GuildRpcApplyLimitSettingReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyLimitSettingReply& default_instance();

  void Swap(GuildRpcApplyLimitSettingReply* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyLimitSettingReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyLimitSettingReply& from);
  void MergeFrom(const GuildRpcApplyLimitSettingReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bool IsAutoJoin = 2 [default = false];
  inline bool has_isautojoin() const;
  inline void clear_isautojoin();
  static const int kIsAutoJoinFieldNumber = 2;
  inline bool isautojoin() const;
  inline void set_isautojoin(bool value);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyLimitSettingReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_isautojoin();
  inline void clear_has_isautojoin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  bool isautojoin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyLimitSettingReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskJurisdictionListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskJurisdictionListAsk();
  virtual ~GuildRpcAskJurisdictionListAsk();

  GuildRpcAskJurisdictionListAsk(const GuildRpcAskJurisdictionListAsk& from);

  inline GuildRpcAskJurisdictionListAsk& operator=(const GuildRpcAskJurisdictionListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskJurisdictionListAsk& default_instance();

  void Swap(GuildRpcAskJurisdictionListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskJurisdictionListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskJurisdictionListAsk& from);
  void MergeFrom(const GuildRpcAskJurisdictionListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskJurisdictionListAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskJurisdictionListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskJurisdictionListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskJurisdictionListReply();
  virtual ~GuildRpcAskJurisdictionListReply();

  GuildRpcAskJurisdictionListReply(const GuildRpcAskJurisdictionListReply& from);

  inline GuildRpcAskJurisdictionListReply& operator=(const GuildRpcAskJurisdictionListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskJurisdictionListReply& default_instance();

  void Swap(GuildRpcAskJurisdictionListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskJurisdictionListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskJurisdictionListReply& from);
  void MergeFrom(const GuildRpcAskJurisdictionListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildOfficeJurisdiction JurisdictionList = 2;
  inline int jurisdictionlist_size() const;
  inline void clear_jurisdictionlist();
  static const int kJurisdictionListFieldNumber = 2;
  inline const ::GuildOfficeJurisdiction& jurisdictionlist(int index) const;
  inline ::GuildOfficeJurisdiction* mutable_jurisdictionlist(int index);
  inline ::GuildOfficeJurisdiction* add_jurisdictionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildOfficeJurisdiction >&
      jurisdictionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildOfficeJurisdiction >*
      mutable_jurisdictionlist();

  // @@protoc_insertion_point(class_scope:GuildRpcAskJurisdictionListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildOfficeJurisdiction > jurisdictionlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskJurisdictionListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSetJurisdictionAsk : public ::google::protobuf::Message {
 public:
  GuildRpcSetJurisdictionAsk();
  virtual ~GuildRpcSetJurisdictionAsk();

  GuildRpcSetJurisdictionAsk(const GuildRpcSetJurisdictionAsk& from);

  inline GuildRpcSetJurisdictionAsk& operator=(const GuildRpcSetJurisdictionAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSetJurisdictionAsk& default_instance();

  void Swap(GuildRpcSetJurisdictionAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcSetJurisdictionAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSetJurisdictionAsk& from);
  void MergeFrom(const GuildRpcSetJurisdictionAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GuildOfficeJurisdiction SetList = 1;
  inline bool has_setlist() const;
  inline void clear_setlist();
  static const int kSetListFieldNumber = 1;
  inline const ::GuildOfficeJurisdiction& setlist() const;
  inline ::GuildOfficeJurisdiction* mutable_setlist();
  inline ::GuildOfficeJurisdiction* release_setlist();
  inline void set_allocated_setlist(::GuildOfficeJurisdiction* setlist);

  // @@protoc_insertion_point(class_scope:GuildRpcSetJurisdictionAsk)
 private:
  inline void set_has_setlist();
  inline void clear_has_setlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildOfficeJurisdiction* setlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSetJurisdictionAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSetJurisdictionReply : public ::google::protobuf::Message {
 public:
  GuildRpcSetJurisdictionReply();
  virtual ~GuildRpcSetJurisdictionReply();

  GuildRpcSetJurisdictionReply(const GuildRpcSetJurisdictionReply& from);

  inline GuildRpcSetJurisdictionReply& operator=(const GuildRpcSetJurisdictionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSetJurisdictionReply& default_instance();

  void Swap(GuildRpcSetJurisdictionReply* other);

  // implements Message ----------------------------------------------

  GuildRpcSetJurisdictionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSetJurisdictionReply& from);
  void MergeFrom(const GuildRpcSetJurisdictionReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GuildOfficeJurisdiction SetList = 2;
  inline bool has_setlist() const;
  inline void clear_setlist();
  static const int kSetListFieldNumber = 2;
  inline const ::GuildOfficeJurisdiction& setlist() const;
  inline ::GuildOfficeJurisdiction* mutable_setlist();
  inline ::GuildOfficeJurisdiction* release_setlist();
  inline void set_allocated_setlist(::GuildOfficeJurisdiction* setlist);

  // @@protoc_insertion_point(class_scope:GuildRpcSetJurisdictionReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_setlist();
  inline void clear_has_setlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildOfficeJurisdiction* setlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSetJurisdictionReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskVacationListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskVacationListAsk();
  virtual ~GuildRpcAskVacationListAsk();

  GuildRpcAskVacationListAsk(const GuildRpcAskVacationListAsk& from);

  inline GuildRpcAskVacationListAsk& operator=(const GuildRpcAskVacationListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskVacationListAsk& default_instance();

  void Swap(GuildRpcAskVacationListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskVacationListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskVacationListAsk& from);
  void MergeFrom(const GuildRpcAskVacationListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskVacationListAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskVacationListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskVacationListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskVacationListReply();
  virtual ~GuildRpcAskVacationListReply();

  GuildRpcAskVacationListReply(const GuildRpcAskVacationListReply& from);

  inline GuildRpcAskVacationListReply& operator=(const GuildRpcAskVacationListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskVacationListReply& default_instance();

  void Swap(GuildRpcAskVacationListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskVacationListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskVacationListReply& from);
  void MergeFrom(const GuildRpcAskVacationListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildVacationInfo VacationList = 2;
  inline int vacationlist_size() const;
  inline void clear_vacationlist();
  static const int kVacationListFieldNumber = 2;
  inline const ::GuildVacationInfo& vacationlist(int index) const;
  inline ::GuildVacationInfo* mutable_vacationlist(int index);
  inline ::GuildVacationInfo* add_vacationlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildVacationInfo >&
      vacationlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildVacationInfo >*
      mutable_vacationlist();

  // @@protoc_insertion_point(class_scope:GuildRpcAskVacationListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildVacationInfo > vacationlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskVacationListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcVacationGuildOperationAsk : public ::google::protobuf::Message {
 public:
  GuildRpcVacationGuildOperationAsk();
  virtual ~GuildRpcVacationGuildOperationAsk();

  GuildRpcVacationGuildOperationAsk(const GuildRpcVacationGuildOperationAsk& from);

  inline GuildRpcVacationGuildOperationAsk& operator=(const GuildRpcVacationGuildOperationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcVacationGuildOperationAsk& default_instance();

  void Swap(GuildRpcVacationGuildOperationAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcVacationGuildOperationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcVacationGuildOperationAsk& from);
  void MergeFrom(const GuildRpcVacationGuildOperationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 2 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 Operation = 3 [default = -1];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcVacationGuildOperationAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcVacationGuildOperationAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcVacationGuildOperationReply : public ::google::protobuf::Message {
 public:
  GuildRpcVacationGuildOperationReply();
  virtual ~GuildRpcVacationGuildOperationReply();

  GuildRpcVacationGuildOperationReply(const GuildRpcVacationGuildOperationReply& from);

  inline GuildRpcVacationGuildOperationReply& operator=(const GuildRpcVacationGuildOperationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcVacationGuildOperationReply& default_instance();

  void Swap(GuildRpcVacationGuildOperationReply* other);

  // implements Message ----------------------------------------------

  GuildRpcVacationGuildOperationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcVacationGuildOperationReply& from);
  void MergeFrom(const GuildRpcVacationGuildOperationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 Guid = 2 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 Operation = 3 [default = -1];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 3;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcVacationGuildOperationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcVacationGuildOperationReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcApplyGuildToOfficeNotify : public ::google::protobuf::Message {
 public:
  GuildRpcApplyGuildToOfficeNotify();
  virtual ~GuildRpcApplyGuildToOfficeNotify();

  GuildRpcApplyGuildToOfficeNotify(const GuildRpcApplyGuildToOfficeNotify& from);

  inline GuildRpcApplyGuildToOfficeNotify& operator=(const GuildRpcApplyGuildToOfficeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcApplyGuildToOfficeNotify& default_instance();

  void Swap(GuildRpcApplyGuildToOfficeNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcApplyGuildToOfficeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcApplyGuildToOfficeNotify& from);
  void MergeFrom(const GuildRpcApplyGuildToOfficeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
  inline bool has_guildmembertinyinfo() const;
  inline void clear_guildmembertinyinfo();
  static const int kGuildMemberTinyInfoFieldNumber = 1;
  inline const ::GuildMemberTinyInfo& guildmembertinyinfo() const;
  inline ::GuildMemberTinyInfo* mutable_guildmembertinyinfo();
  inline ::GuildMemberTinyInfo* release_guildmembertinyinfo();
  inline void set_allocated_guildmembertinyinfo(::GuildMemberTinyInfo* guildmembertinyinfo);

  // @@protoc_insertion_point(class_scope:GuildRpcApplyGuildToOfficeNotify)
 private:
  inline void set_has_guildmembertinyinfo();
  inline void clear_has_guildmembertinyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildMemberTinyInfo* guildmembertinyinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcApplyGuildToOfficeNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskBuildingInfoAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskBuildingInfoAsk();
  virtual ~GuildRpcAskBuildingInfoAsk();

  GuildRpcAskBuildingInfoAsk(const GuildRpcAskBuildingInfoAsk& from);

  inline GuildRpcAskBuildingInfoAsk& operator=(const GuildRpcAskBuildingInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskBuildingInfoAsk& default_instance();

  void Swap(GuildRpcAskBuildingInfoAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskBuildingInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskBuildingInfoAsk& from);
  void MergeFrom(const GuildRpcAskBuildingInfoAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskBuildingInfoAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskBuildingInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskBuildingInfoReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskBuildingInfoReply();
  virtual ~GuildRpcAskBuildingInfoReply();

  GuildRpcAskBuildingInfoReply(const GuildRpcAskBuildingInfoReply& from);

  inline GuildRpcAskBuildingInfoReply& operator=(const GuildRpcAskBuildingInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskBuildingInfoReply& default_instance();

  void Swap(GuildRpcAskBuildingInfoReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskBuildingInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskBuildingInfoReply& from);
  void MergeFrom(const GuildRpcAskBuildingInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildBuildingInfo BuildingInfoList = 2;
  inline int buildinginfolist_size() const;
  inline void clear_buildinginfolist();
  static const int kBuildingInfoListFieldNumber = 2;
  inline const ::GuildBuildingInfo& buildinginfolist(int index) const;
  inline ::GuildBuildingInfo* mutable_buildinginfolist(int index);
  inline ::GuildBuildingInfo* add_buildinginfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildBuildingInfo >&
      buildinginfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildBuildingInfo >*
      mutable_buildinginfolist();

  // @@protoc_insertion_point(class_scope:GuildRpcAskBuildingInfoReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildBuildingInfo > buildinginfolist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskBuildingInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildingLvUpAsk : public ::google::protobuf::Message {
 public:
  GuildRpcBuildingLvUpAsk();
  virtual ~GuildRpcBuildingLvUpAsk();

  GuildRpcBuildingLvUpAsk(const GuildRpcBuildingLvUpAsk& from);

  inline GuildRpcBuildingLvUpAsk& operator=(const GuildRpcBuildingLvUpAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildingLvUpAsk& default_instance();

  void Swap(GuildRpcBuildingLvUpAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildingLvUpAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildingLvUpAsk& from);
  void MergeFrom(const GuildRpcBuildingLvUpAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BuildingType = 2 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 2;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildingLvUpAsk)
 private:
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildingLvUpAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildingLvUpReply : public ::google::protobuf::Message {
 public:
  GuildRpcBuildingLvUpReply();
  virtual ~GuildRpcBuildingLvUpReply();

  GuildRpcBuildingLvUpReply(const GuildRpcBuildingLvUpReply& from);

  inline GuildRpcBuildingLvUpReply& operator=(const GuildRpcBuildingLvUpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildingLvUpReply& default_instance();

  void Swap(GuildRpcBuildingLvUpReply* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildingLvUpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildingLvUpReply& from);
  void MergeFrom(const GuildRpcBuildingLvUpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  inline bool has_guildbuildinginfo() const;
  inline void clear_guildbuildinginfo();
  static const int kGuildBuildingInfoFieldNumber = 2;
  inline const ::GuildBuildingInfo& guildbuildinginfo() const;
  inline ::GuildBuildingInfo* mutable_guildbuildinginfo();
  inline ::GuildBuildingInfo* release_guildbuildinginfo();
  inline void set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo);

  // optional int32 GuildMoney = 3 [default = -1];
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // optional int32 GuildResource = 4 [default = -1];
  inline bool has_guildresource() const;
  inline void clear_guildresource();
  static const int kGuildResourceFieldNumber = 4;
  inline ::google::protobuf::int32 guildresource() const;
  inline void set_guildresource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildingLvUpReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildbuildinginfo();
  inline void clear_has_guildbuildinginfo();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_guildresource();
  inline void clear_has_guildresource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildBuildingInfo* guildbuildinginfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guildmoney_;
  ::google::protobuf::int32 guildresource_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildingLvUpReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildingLvSpeedUpAsk : public ::google::protobuf::Message {
 public:
  GuildRpcBuildingLvSpeedUpAsk();
  virtual ~GuildRpcBuildingLvSpeedUpAsk();

  GuildRpcBuildingLvSpeedUpAsk(const GuildRpcBuildingLvSpeedUpAsk& from);

  inline GuildRpcBuildingLvSpeedUpAsk& operator=(const GuildRpcBuildingLvSpeedUpAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildingLvSpeedUpAsk& default_instance();

  void Swap(GuildRpcBuildingLvSpeedUpAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildingLvSpeedUpAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildingLvSpeedUpAsk& from);
  void MergeFrom(const GuildRpcBuildingLvSpeedUpAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BuildingType = 1 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 1;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // optional int32 Time = 2 [default = -1];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildingLvSpeedUpAsk)
 private:
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildingtype_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildingLvSpeedUpAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildingLvSpeedUpReply : public ::google::protobuf::Message {
 public:
  GuildRpcBuildingLvSpeedUpReply();
  virtual ~GuildRpcBuildingLvSpeedUpReply();

  GuildRpcBuildingLvSpeedUpReply(const GuildRpcBuildingLvSpeedUpReply& from);

  inline GuildRpcBuildingLvSpeedUpReply& operator=(const GuildRpcBuildingLvSpeedUpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildingLvSpeedUpReply& default_instance();

  void Swap(GuildRpcBuildingLvSpeedUpReply* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildingLvSpeedUpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildingLvSpeedUpReply& from);
  void MergeFrom(const GuildRpcBuildingLvSpeedUpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  inline bool has_guildbuildinginfo() const;
  inline void clear_guildbuildinginfo();
  static const int kGuildBuildingInfoFieldNumber = 2;
  inline const ::GuildBuildingInfo& guildbuildinginfo() const;
  inline ::GuildBuildingInfo* mutable_guildbuildinginfo();
  inline ::GuildBuildingInfo* release_guildbuildinginfo();
  inline void set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildingLvSpeedUpReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildbuildinginfo();
  inline void clear_has_guildbuildinginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildBuildingInfo* guildbuildinginfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildingLvSpeedUpReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskBuildingContributionListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskBuildingContributionListAsk();
  virtual ~GuildRpcAskBuildingContributionListAsk();

  GuildRpcAskBuildingContributionListAsk(const GuildRpcAskBuildingContributionListAsk& from);

  inline GuildRpcAskBuildingContributionListAsk& operator=(const GuildRpcAskBuildingContributionListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskBuildingContributionListAsk& default_instance();

  void Swap(GuildRpcAskBuildingContributionListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskBuildingContributionListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskBuildingContributionListAsk& from);
  void MergeFrom(const GuildRpcAskBuildingContributionListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BuildingType = 1 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 1;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskBuildingContributionListAsk)
 private:
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskBuildingContributionListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskBuildingContributionListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskBuildingContributionListReply();
  virtual ~GuildRpcAskBuildingContributionListReply();

  GuildRpcAskBuildingContributionListReply(const GuildRpcAskBuildingContributionListReply& from);

  inline GuildRpcAskBuildingContributionListReply& operator=(const GuildRpcAskBuildingContributionListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskBuildingContributionListReply& default_instance();

  void Swap(GuildRpcAskBuildingContributionListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskBuildingContributionListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskBuildingContributionListReply& from);
  void MergeFrom(const GuildRpcAskBuildingContributionListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildBuildingContributionInfo ContributionList = 2;
  inline int contributionlist_size() const;
  inline void clear_contributionlist();
  static const int kContributionListFieldNumber = 2;
  inline const ::GuildBuildingContributionInfo& contributionlist(int index) const;
  inline ::GuildBuildingContributionInfo* mutable_contributionlist(int index);
  inline ::GuildBuildingContributionInfo* add_contributionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildBuildingContributionInfo >&
      contributionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildBuildingContributionInfo >*
      mutable_contributionlist();

  // optional int32 BuildingType = 3 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 3;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskBuildingContributionListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildBuildingContributionInfo > contributionlist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 buildingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskBuildingContributionListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildingCanLvUpNotify : public ::google::protobuf::Message {
 public:
  GuildRpcBuildingCanLvUpNotify();
  virtual ~GuildRpcBuildingCanLvUpNotify();

  GuildRpcBuildingCanLvUpNotify(const GuildRpcBuildingCanLvUpNotify& from);

  inline GuildRpcBuildingCanLvUpNotify& operator=(const GuildRpcBuildingCanLvUpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildingCanLvUpNotify& default_instance();

  void Swap(GuildRpcBuildingCanLvUpNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildingCanLvUpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildingCanLvUpNotify& from);
  void MergeFrom(const GuildRpcBuildingCanLvUpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BuildingType = 2 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 2;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildingCanLvUpNotify)
 private:
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildingCanLvUpNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildEventListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildEventListAsk();
  virtual ~GuildRpcAskGuildEventListAsk();

  GuildRpcAskGuildEventListAsk(const GuildRpcAskGuildEventListAsk& from);

  inline GuildRpcAskGuildEventListAsk& operator=(const GuildRpcAskGuildEventListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildEventListAsk& default_instance();

  void Swap(GuildRpcAskGuildEventListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildEventListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildEventListAsk& from);
  void MergeFrom(const GuildRpcAskGuildEventListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildEventListAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildEventListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildEventListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildEventListReply();
  virtual ~GuildRpcAskGuildEventListReply();

  GuildRpcAskGuildEventListReply(const GuildRpcAskGuildEventListReply& from);

  inline GuildRpcAskGuildEventListReply& operator=(const GuildRpcAskGuildEventListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildEventListReply& default_instance();

  void Swap(GuildRpcAskGuildEventListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildEventListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildEventListReply& from);
  void MergeFrom(const GuildRpcAskGuildEventListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildEvent GuildEventList = 2;
  inline int guildeventlist_size() const;
  inline void clear_guildeventlist();
  static const int kGuildEventListFieldNumber = 2;
  inline const ::GuildEvent& guildeventlist(int index) const;
  inline ::GuildEvent* mutable_guildeventlist(int index);
  inline ::GuildEvent* add_guildeventlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildEvent >&
      guildeventlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildEvent >*
      mutable_guildeventlist();

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildEventListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildEvent > guildeventlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildEventListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildInfoListAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildInfoListAsk();
  virtual ~GuildRpcAskGuildInfoListAsk();

  GuildRpcAskGuildInfoListAsk(const GuildRpcAskGuildInfoListAsk& from);

  inline GuildRpcAskGuildInfoListAsk& operator=(const GuildRpcAskGuildInfoListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildInfoListAsk& default_instance();

  void Swap(GuildRpcAskGuildInfoListAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildInfoListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildInfoListAsk& from);
  void MergeFrom(const GuildRpcAskGuildInfoListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PageIndex = 2 [default = -1];
  inline bool has_pageindex() const;
  inline void clear_pageindex();
  static const int kPageIndexFieldNumber = 2;
  inline ::google::protobuf::int32 pageindex() const;
  inline void set_pageindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildInfoListAsk)
 private:
  inline void set_has_pageindex();
  inline void clear_has_pageindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pageindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildInfoListAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildInfoListReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildInfoListReply();
  virtual ~GuildRpcAskGuildInfoListReply();

  GuildRpcAskGuildInfoListReply(const GuildRpcAskGuildInfoListReply& from);

  inline GuildRpcAskGuildInfoListReply& operator=(const GuildRpcAskGuildInfoListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildInfoListReply& default_instance();

  void Swap(GuildRpcAskGuildInfoListReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildInfoListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildInfoListReply& from);
  void MergeFrom(const GuildRpcAskGuildInfoListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildInfo GuildInfoList = 2;
  inline int guildinfolist_size() const;
  inline void clear_guildinfolist();
  static const int kGuildInfoListFieldNumber = 2;
  inline const ::GuildInfo& guildinfolist(int index) const;
  inline ::GuildInfo* mutable_guildinfolist(int index);
  inline ::GuildInfo* add_guildinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildInfo >&
      guildinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildInfo >*
      mutable_guildinfolist();

  // optional int32 PageIndex = 3 [default = -1];
  inline bool has_pageindex() const;
  inline void clear_pageindex();
  static const int kPageIndexFieldNumber = 3;
  inline ::google::protobuf::int32 pageindex() const;
  inline void set_pageindex(::google::protobuf::int32 value);

  // optional int32 TotalGuildCount = 4 [default = -1];
  inline bool has_totalguildcount() const;
  inline void clear_totalguildcount();
  static const int kTotalGuildCountFieldNumber = 4;
  inline ::google::protobuf::int32 totalguildcount() const;
  inline void set_totalguildcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildInfoListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pageindex();
  inline void clear_has_pageindex();
  inline void set_has_totalguildcount();
  inline void clear_has_totalguildcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildInfo > guildinfolist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 pageindex_;
  ::google::protobuf::int32 totalguildcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildInfoListReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSearchGuildAsk : public ::google::protobuf::Message {
 public:
  GuildRpcSearchGuildAsk();
  virtual ~GuildRpcSearchGuildAsk();

  GuildRpcSearchGuildAsk(const GuildRpcSearchGuildAsk& from);

  inline GuildRpcSearchGuildAsk& operator=(const GuildRpcSearchGuildAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSearchGuildAsk& default_instance();

  void Swap(GuildRpcSearchGuildAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcSearchGuildAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSearchGuildAsk& from);
  void MergeFrom(const GuildRpcSearchGuildAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:GuildRpcSearchGuildAsk)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSearchGuildAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSearchGuildReply : public ::google::protobuf::Message {
 public:
  GuildRpcSearchGuildReply();
  virtual ~GuildRpcSearchGuildReply();

  GuildRpcSearchGuildReply(const GuildRpcSearchGuildReply& from);

  inline GuildRpcSearchGuildReply& operator=(const GuildRpcSearchGuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSearchGuildReply& default_instance();

  void Swap(GuildRpcSearchGuildReply* other);

  // implements Message ----------------------------------------------

  GuildRpcSearchGuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSearchGuildReply& from);
  void MergeFrom(const GuildRpcSearchGuildReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildInfo GuildInfoList = 2;
  inline int guildinfolist_size() const;
  inline void clear_guildinfolist();
  static const int kGuildInfoListFieldNumber = 2;
  inline const ::GuildInfo& guildinfolist(int index) const;
  inline ::GuildInfo* mutable_guildinfolist(int index);
  inline ::GuildInfo* add_guildinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildInfo >&
      guildinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildInfo >*
      mutable_guildinfolist();

  // @@protoc_insertion_point(class_scope:GuildRpcSearchGuildReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildInfo > guildinfolist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSearchGuildReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcJoinGuildAsk : public ::google::protobuf::Message {
 public:
  GuildRpcJoinGuildAsk();
  virtual ~GuildRpcJoinGuildAsk();

  GuildRpcJoinGuildAsk(const GuildRpcJoinGuildAsk& from);

  inline GuildRpcJoinGuildAsk& operator=(const GuildRpcJoinGuildAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcJoinGuildAsk& default_instance();

  void Swap(GuildRpcJoinGuildAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcJoinGuildAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcJoinGuildAsk& from);
  void MergeFrom(const GuildRpcJoinGuildAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcJoinGuildAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcJoinGuildAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcJoinGuildReply : public ::google::protobuf::Message {
 public:
  GuildRpcJoinGuildReply();
  virtual ~GuildRpcJoinGuildReply();

  GuildRpcJoinGuildReply(const GuildRpcJoinGuildReply& from);

  inline GuildRpcJoinGuildReply& operator=(const GuildRpcJoinGuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcJoinGuildReply& default_instance();

  void Swap(GuildRpcJoinGuildReply* other);

  // implements Message ----------------------------------------------

  GuildRpcJoinGuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcJoinGuildReply& from);
  void MergeFrom(const GuildRpcJoinGuildReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 Guid = 2 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GuildRpcJoinGuildReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcJoinGuildReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcCreateGuildAsk : public ::google::protobuf::Message {
 public:
  GuildRpcCreateGuildAsk();
  virtual ~GuildRpcCreateGuildAsk();

  GuildRpcCreateGuildAsk(const GuildRpcCreateGuildAsk& from);

  inline GuildRpcCreateGuildAsk& operator=(const GuildRpcCreateGuildAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcCreateGuildAsk& default_instance();

  void Swap(GuildRpcCreateGuildAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcCreateGuildAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcCreateGuildAsk& from);
  void MergeFrom(const GuildRpcCreateGuildAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GuildName = 1;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 1;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string GuildCreed = 2;
  inline bool has_guildcreed() const;
  inline void clear_guildcreed();
  static const int kGuildCreedFieldNumber = 2;
  inline const ::std::string& guildcreed() const;
  inline void set_guildcreed(const ::std::string& value);
  inline void set_guildcreed(const char* value);
  inline void set_guildcreed(const char* value, size_t size);
  inline ::std::string* mutable_guildcreed();
  inline ::std::string* release_guildcreed();
  inline void set_allocated_guildcreed(::std::string* guildcreed);

  // @@protoc_insertion_point(class_scope:GuildRpcCreateGuildAsk)
 private:
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildcreed();
  inline void clear_has_guildcreed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildname_;
  ::std::string* guildcreed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcCreateGuildAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcCreateGuildReply : public ::google::protobuf::Message {
 public:
  GuildRpcCreateGuildReply();
  virtual ~GuildRpcCreateGuildReply();

  GuildRpcCreateGuildReply(const GuildRpcCreateGuildReply& from);

  inline GuildRpcCreateGuildReply& operator=(const GuildRpcCreateGuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcCreateGuildReply& default_instance();

  void Swap(GuildRpcCreateGuildReply* other);

  // implements Message ----------------------------------------------

  GuildRpcCreateGuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcCreateGuildReply& from);
  void MergeFrom(const GuildRpcCreateGuildReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GuildInfo GuildBaseInfo = 2;
  inline bool has_guildbaseinfo() const;
  inline void clear_guildbaseinfo();
  static const int kGuildBaseInfoFieldNumber = 2;
  inline const ::GuildInfo& guildbaseinfo() const;
  inline ::GuildInfo* mutable_guildbaseinfo();
  inline ::GuildInfo* release_guildbaseinfo();
  inline void set_allocated_guildbaseinfo(::GuildInfo* guildbaseinfo);

  // @@protoc_insertion_point(class_scope:GuildRpcCreateGuildReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildbaseinfo();
  inline void clear_has_guildbaseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildInfo* guildbaseinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcCreateGuildReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcChangeFlagAsk : public ::google::protobuf::Message {
 public:
  GuildRpcChangeFlagAsk();
  virtual ~GuildRpcChangeFlagAsk();

  GuildRpcChangeFlagAsk(const GuildRpcChangeFlagAsk& from);

  inline GuildRpcChangeFlagAsk& operator=(const GuildRpcChangeFlagAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcChangeFlagAsk& default_instance();

  void Swap(GuildRpcChangeFlagAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcChangeFlagAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcChangeFlagAsk& from);
  void MergeFrom(const GuildRpcChangeFlagAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FlagConfigID = 1 [default = -1];
  inline bool has_flagconfigid() const;
  inline void clear_flagconfigid();
  static const int kFlagConfigIDFieldNumber = 1;
  inline ::google::protobuf::int32 flagconfigid() const;
  inline void set_flagconfigid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcChangeFlagAsk)
 private:
  inline void set_has_flagconfigid();
  inline void clear_has_flagconfigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flagconfigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcChangeFlagAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcChangeFlagReply : public ::google::protobuf::Message {
 public:
  GuildRpcChangeFlagReply();
  virtual ~GuildRpcChangeFlagReply();

  GuildRpcChangeFlagReply(const GuildRpcChangeFlagReply& from);

  inline GuildRpcChangeFlagReply& operator=(const GuildRpcChangeFlagReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcChangeFlagReply& default_instance();

  void Swap(GuildRpcChangeFlagReply* other);

  // implements Message ----------------------------------------------

  GuildRpcChangeFlagReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcChangeFlagReply& from);
  void MergeFrom(const GuildRpcChangeFlagReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 GuildMoney = 2 [default = -1];
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // optional .GuildFlag Flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline const ::GuildFlag& flag() const;
  inline ::GuildFlag* mutable_flag();
  inline ::GuildFlag* release_flag();
  inline void set_allocated_flag(::GuildFlag* flag);

  // @@protoc_insertion_point(class_scope:GuildRpcChangeFlagReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guildmoney_;
  ::GuildFlag* flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcChangeFlagReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcGuildChangeNameAsk : public ::google::protobuf::Message {
 public:
  GuildRpcGuildChangeNameAsk();
  virtual ~GuildRpcGuildChangeNameAsk();

  GuildRpcGuildChangeNameAsk(const GuildRpcGuildChangeNameAsk& from);

  inline GuildRpcGuildChangeNameAsk& operator=(const GuildRpcGuildChangeNameAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcGuildChangeNameAsk& default_instance();

  void Swap(GuildRpcGuildChangeNameAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcGuildChangeNameAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcGuildChangeNameAsk& from);
  void MergeFrom(const GuildRpcGuildChangeNameAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GuildNewName = 1;
  inline bool has_guildnewname() const;
  inline void clear_guildnewname();
  static const int kGuildNewNameFieldNumber = 1;
  inline const ::std::string& guildnewname() const;
  inline void set_guildnewname(const ::std::string& value);
  inline void set_guildnewname(const char* value);
  inline void set_guildnewname(const char* value, size_t size);
  inline ::std::string* mutable_guildnewname();
  inline ::std::string* release_guildnewname();
  inline void set_allocated_guildnewname(::std::string* guildnewname);

  // @@protoc_insertion_point(class_scope:GuildRpcGuildChangeNameAsk)
 private:
  inline void set_has_guildnewname();
  inline void clear_has_guildnewname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildnewname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcGuildChangeNameAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcGuildChangeNameReply : public ::google::protobuf::Message {
 public:
  GuildRpcGuildChangeNameReply();
  virtual ~GuildRpcGuildChangeNameReply();

  GuildRpcGuildChangeNameReply(const GuildRpcGuildChangeNameReply& from);

  inline GuildRpcGuildChangeNameReply& operator=(const GuildRpcGuildChangeNameReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcGuildChangeNameReply& default_instance();

  void Swap(GuildRpcGuildChangeNameReply* other);

  // implements Message ----------------------------------------------

  GuildRpcGuildChangeNameReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcGuildChangeNameReply& from);
  void MergeFrom(const GuildRpcGuildChangeNameReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string GuildNewName = 2;
  inline bool has_guildnewname() const;
  inline void clear_guildnewname();
  static const int kGuildNewNameFieldNumber = 2;
  inline const ::std::string& guildnewname() const;
  inline void set_guildnewname(const ::std::string& value);
  inline void set_guildnewname(const char* value);
  inline void set_guildnewname(const char* value, size_t size);
  inline ::std::string* mutable_guildnewname();
  inline ::std::string* release_guildnewname();
  inline void set_allocated_guildnewname(::std::string* guildnewname);

  // optional string GuildOldName = 3;
  inline bool has_guildoldname() const;
  inline void clear_guildoldname();
  static const int kGuildOldNameFieldNumber = 3;
  inline const ::std::string& guildoldname() const;
  inline void set_guildoldname(const ::std::string& value);
  inline void set_guildoldname(const char* value);
  inline void set_guildoldname(const char* value, size_t size);
  inline ::std::string* mutable_guildoldname();
  inline ::std::string* release_guildoldname();
  inline void set_allocated_guildoldname(::std::string* guildoldname);

  // @@protoc_insertion_point(class_scope:GuildRpcGuildChangeNameReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guildnewname();
  inline void clear_has_guildnewname();
  inline void set_has_guildoldname();
  inline void clear_has_guildoldname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guildnewname_;
  ::std::string* guildoldname_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcGuildChangeNameReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildMemberAsk : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildMemberAsk();
  virtual ~GuildRpcAskGuildMemberAsk();

  GuildRpcAskGuildMemberAsk(const GuildRpcAskGuildMemberAsk& from);

  inline GuildRpcAskGuildMemberAsk& operator=(const GuildRpcAskGuildMemberAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildMemberAsk& default_instance();

  void Swap(GuildRpcAskGuildMemberAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildMemberAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildMemberAsk& from);
  void MergeFrom(const GuildRpcAskGuildMemberAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildMemberAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildMemberAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcAskGuildMemberReply : public ::google::protobuf::Message {
 public:
  GuildRpcAskGuildMemberReply();
  virtual ~GuildRpcAskGuildMemberReply();

  GuildRpcAskGuildMemberReply(const GuildRpcAskGuildMemberReply& from);

  inline GuildRpcAskGuildMemberReply& operator=(const GuildRpcAskGuildMemberReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcAskGuildMemberReply& default_instance();

  void Swap(GuildRpcAskGuildMemberReply* other);

  // implements Message ----------------------------------------------

  GuildRpcAskGuildMemberReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcAskGuildMemberReply& from);
  void MergeFrom(const GuildRpcAskGuildMemberReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GuildMemberInfo GuildMemberInfoList = 2;
  inline int guildmemberinfolist_size() const;
  inline void clear_guildmemberinfolist();
  static const int kGuildMemberInfoListFieldNumber = 2;
  inline const ::GuildMemberInfo& guildmemberinfolist(int index) const;
  inline ::GuildMemberInfo* mutable_guildmemberinfolist(int index);
  inline ::GuildMemberInfo* add_guildmemberinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >&
      guildmemberinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >*
      mutable_guildmemberinfolist();

  // optional int32 OnlineCount = 3 [default = -1];
  inline bool has_onlinecount() const;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 3;
  inline ::google::protobuf::int32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::int32 value);

  // optional int32 MemberCount = 4 [default = -1];
  inline bool has_membercount() const;
  inline void clear_membercount();
  static const int kMemberCountFieldNumber = 4;
  inline ::google::protobuf::int32 membercount() const;
  inline void set_membercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcAskGuildMemberReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_onlinecount();
  inline void clear_has_onlinecount();
  inline void set_has_membercount();
  inline void clear_has_membercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo > guildmemberinfolist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 onlinecount_;
  ::google::protobuf::int32 membercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcAskGuildMemberReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcQuiteGuildAsk : public ::google::protobuf::Message {
 public:
  GuildRpcQuiteGuildAsk();
  virtual ~GuildRpcQuiteGuildAsk();

  GuildRpcQuiteGuildAsk(const GuildRpcQuiteGuildAsk& from);

  inline GuildRpcQuiteGuildAsk& operator=(const GuildRpcQuiteGuildAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcQuiteGuildAsk& default_instance();

  void Swap(GuildRpcQuiteGuildAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcQuiteGuildAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcQuiteGuildAsk& from);
  void MergeFrom(const GuildRpcQuiteGuildAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GuildRpcQuiteGuildAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcQuiteGuildAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcQuiteGuildReply : public ::google::protobuf::Message {
 public:
  GuildRpcQuiteGuildReply();
  virtual ~GuildRpcQuiteGuildReply();

  GuildRpcQuiteGuildReply(const GuildRpcQuiteGuildReply& from);

  inline GuildRpcQuiteGuildReply& operator=(const GuildRpcQuiteGuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcQuiteGuildReply& default_instance();

  void Swap(GuildRpcQuiteGuildReply* other);

  // implements Message ----------------------------------------------

  GuildRpcQuiteGuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcQuiteGuildReply& from);
  void MergeFrom(const GuildRpcQuiteGuildReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcQuiteGuildReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcQuiteGuildReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSetOfficeAsk : public ::google::protobuf::Message {
 public:
  GuildRpcSetOfficeAsk();
  virtual ~GuildRpcSetOfficeAsk();

  GuildRpcSetOfficeAsk(const GuildRpcSetOfficeAsk& from);

  inline GuildRpcSetOfficeAsk& operator=(const GuildRpcSetOfficeAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSetOfficeAsk& default_instance();

  void Swap(GuildRpcSetOfficeAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcSetOfficeAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSetOfficeAsk& from);
  void MergeFrom(const GuildRpcSetOfficeAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint64 TargetGuid = 2 [default = 0];
  inline bool has_targetguid() const;
  inline void clear_targetguid();
  static const int kTargetGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 targetguid() const;
  inline void set_targetguid(::google::protobuf::uint64 value);

  // optional int32 OfficeType = 3 [default = -1];
  inline bool has_officetype() const;
  inline void clear_officetype();
  static const int kOfficeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 officetype() const;
  inline void set_officetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcSetOfficeAsk)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_targetguid();
  inline void clear_has_targetguid();
  inline void set_has_officetype();
  inline void clear_has_officetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 targetguid_;
  ::google::protobuf::int32 officetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSetOfficeAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcSetOfficeReply : public ::google::protobuf::Message {
 public:
  GuildRpcSetOfficeReply();
  virtual ~GuildRpcSetOfficeReply();

  GuildRpcSetOfficeReply(const GuildRpcSetOfficeReply& from);

  inline GuildRpcSetOfficeReply& operator=(const GuildRpcSetOfficeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcSetOfficeReply& default_instance();

  void Swap(GuildRpcSetOfficeReply* other);

  // implements Message ----------------------------------------------

  GuildRpcSetOfficeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcSetOfficeReply& from);
  void MergeFrom(const GuildRpcSetOfficeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 SelfOfficeType = 2 [default = -1];
  inline bool has_selfofficetype() const;
  inline void clear_selfofficetype();
  static const int kSelfOfficeTypeFieldNumber = 2;
  inline ::google::protobuf::int32 selfofficetype() const;
  inline void set_selfofficetype(::google::protobuf::int32 value);

  // optional int32 TargetOfficeType = 4 [default = -1];
  inline bool has_targetofficetype() const;
  inline void clear_targetofficetype();
  static const int kTargetOfficeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 targetofficetype() const;
  inline void set_targetofficetype(::google::protobuf::int32 value);

  // optional uint64 TargetGuid = 5 [default = 0];
  inline bool has_targetguid() const;
  inline void clear_targetguid();
  static const int kTargetGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 targetguid() const;
  inline void set_targetguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GuildRpcSetOfficeReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_selfofficetype();
  inline void clear_has_selfofficetype();
  inline void set_has_targetofficetype();
  inline void clear_has_targetofficetype();
  inline void set_has_targetguid();
  inline void clear_has_targetguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 selfofficetype_;
  ::google::protobuf::uint64 targetguid_;
  ::google::protobuf::int32 targetofficetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcSetOfficeReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcOfficeChangeNotify : public ::google::protobuf::Message {
 public:
  GuildRpcOfficeChangeNotify();
  virtual ~GuildRpcOfficeChangeNotify();

  GuildRpcOfficeChangeNotify(const GuildRpcOfficeChangeNotify& from);

  inline GuildRpcOfficeChangeNotify& operator=(const GuildRpcOfficeChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcOfficeChangeNotify& default_instance();

  void Swap(GuildRpcOfficeChangeNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcOfficeChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcOfficeChangeNotify& from);
  void MergeFrom(const GuildRpcOfficeChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OfficeType = 1 [default = -1];
  inline bool has_officetype() const;
  inline void clear_officetype();
  static const int kOfficeTypeFieldNumber = 1;
  inline ::google::protobuf::int32 officetype() const;
  inline void set_officetype(::google::protobuf::int32 value);

  // optional uint64 Optguid = 2 [default = 0];
  inline bool has_optguid() const;
  inline void clear_optguid();
  static const int kOptguidFieldNumber = 2;
  inline ::google::protobuf::uint64 optguid() const;
  inline void set_optguid(::google::protobuf::uint64 value);

  // optional int32 OptOfficeType = 3 [default = -1];
  inline bool has_optofficetype() const;
  inline void clear_optofficetype();
  static const int kOptOfficeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 optofficetype() const;
  inline void set_optofficetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcOfficeChangeNotify)
 private:
  inline void set_has_officetype();
  inline void clear_has_officetype();
  inline void set_has_optguid();
  inline void clear_has_optguid();
  inline void set_has_optofficetype();
  inline void clear_has_optofficetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 optguid_;
  ::google::protobuf::int32 officetype_;
  ::google::protobuf::int32 optofficetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcOfficeChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcChangeCreedAsk : public ::google::protobuf::Message {
 public:
  GuildRpcChangeCreedAsk();
  virtual ~GuildRpcChangeCreedAsk();

  GuildRpcChangeCreedAsk(const GuildRpcChangeCreedAsk& from);

  inline GuildRpcChangeCreedAsk& operator=(const GuildRpcChangeCreedAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcChangeCreedAsk& default_instance();

  void Swap(GuildRpcChangeCreedAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcChangeCreedAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcChangeCreedAsk& from);
  void MergeFrom(const GuildRpcChangeCreedAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:GuildRpcChangeCreedAsk)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcChangeCreedAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcChangeCreedReply : public ::google::protobuf::Message {
 public:
  GuildRpcChangeCreedReply();
  virtual ~GuildRpcChangeCreedReply();

  GuildRpcChangeCreedReply(const GuildRpcChangeCreedReply& from);

  inline GuildRpcChangeCreedReply& operator=(const GuildRpcChangeCreedReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcChangeCreedReply& default_instance();

  void Swap(GuildRpcChangeCreedReply* other);

  // implements Message ----------------------------------------------

  GuildRpcChangeCreedReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcChangeCreedReply& from);
  void MergeFrom(const GuildRpcChangeCreedReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:GuildRpcChangeCreedReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcChangeCreedReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcForbiddenChatAsk : public ::google::protobuf::Message {
 public:
  GuildRpcForbiddenChatAsk();
  virtual ~GuildRpcForbiddenChatAsk();

  GuildRpcForbiddenChatAsk(const GuildRpcForbiddenChatAsk& from);

  inline GuildRpcForbiddenChatAsk& operator=(const GuildRpcForbiddenChatAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcForbiddenChatAsk& default_instance();

  void Swap(GuildRpcForbiddenChatAsk* other);

  // implements Message ----------------------------------------------

  GuildRpcForbiddenChatAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcForbiddenChatAsk& from);
  void MergeFrom(const GuildRpcForbiddenChatAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Playerguid = 1 [default = -1];
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::int64 playerguid() const;
  inline void set_playerguid(::google::protobuf::int64 value);

  // optional bool IsForbidden = 2 [default = false];
  inline bool has_isforbidden() const;
  inline void clear_isforbidden();
  static const int kIsForbiddenFieldNumber = 2;
  inline bool isforbidden() const;
  inline void set_isforbidden(bool value);

  // @@protoc_insertion_point(class_scope:GuildRpcForbiddenChatAsk)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_isforbidden();
  inline void clear_has_isforbidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerguid_;
  bool isforbidden_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcForbiddenChatAsk* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcForbiddenChatReply : public ::google::protobuf::Message {
 public:
  GuildRpcForbiddenChatReply();
  virtual ~GuildRpcForbiddenChatReply();

  GuildRpcForbiddenChatReply(const GuildRpcForbiddenChatReply& from);

  inline GuildRpcForbiddenChatReply& operator=(const GuildRpcForbiddenChatReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcForbiddenChatReply& default_instance();

  void Swap(GuildRpcForbiddenChatReply* other);

  // implements Message ----------------------------------------------

  GuildRpcForbiddenChatReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcForbiddenChatReply& from);
  void MergeFrom(const GuildRpcForbiddenChatReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 Playerguid = 2 [default = -1];
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 2;
  inline ::google::protobuf::int64 playerguid() const;
  inline void set_playerguid(::google::protobuf::int64 value);

  // optional bool IsForbidden = 3 [default = false];
  inline bool has_isforbidden() const;
  inline void clear_isforbidden();
  static const int kIsForbiddenFieldNumber = 3;
  inline bool isforbidden() const;
  inline void set_isforbidden(bool value);

  // @@protoc_insertion_point(class_scope:GuildRpcForbiddenChatReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_isforbidden();
  inline void clear_has_isforbidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerguid_;
  ::google::protobuf::int32 result_;
  bool isforbidden_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcForbiddenChatReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcBuildLvUpCompleteNotify : public ::google::protobuf::Message {
 public:
  GuildRpcBuildLvUpCompleteNotify();
  virtual ~GuildRpcBuildLvUpCompleteNotify();

  GuildRpcBuildLvUpCompleteNotify(const GuildRpcBuildLvUpCompleteNotify& from);

  inline GuildRpcBuildLvUpCompleteNotify& operator=(const GuildRpcBuildLvUpCompleteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcBuildLvUpCompleteNotify& default_instance();

  void Swap(GuildRpcBuildLvUpCompleteNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcBuildLvUpCompleteNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcBuildLvUpCompleteNotify& from);
  void MergeFrom(const GuildRpcBuildLvUpCompleteNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  inline bool has_guildbuildinginfo() const;
  inline void clear_guildbuildinginfo();
  static const int kGuildBuildingInfoFieldNumber = 2;
  inline const ::GuildBuildingInfo& guildbuildinginfo() const;
  inline ::GuildBuildingInfo* mutable_guildbuildinginfo();
  inline ::GuildBuildingInfo* release_guildbuildinginfo();
  inline void set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo);

  // @@protoc_insertion_point(class_scope:GuildRpcBuildLvUpCompleteNotify)
 private:
  inline void set_has_guildbuildinginfo();
  inline void clear_has_guildbuildinginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GuildBuildingInfo* guildbuildinginfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcBuildLvUpCompleteNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildRpcGuildCurrencyChangeNotify : public ::google::protobuf::Message {
 public:
  GuildRpcGuildCurrencyChangeNotify();
  virtual ~GuildRpcGuildCurrencyChangeNotify();

  GuildRpcGuildCurrencyChangeNotify(const GuildRpcGuildCurrencyChangeNotify& from);

  inline GuildRpcGuildCurrencyChangeNotify& operator=(const GuildRpcGuildCurrencyChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRpcGuildCurrencyChangeNotify& default_instance();

  void Swap(GuildRpcGuildCurrencyChangeNotify* other);

  // implements Message ----------------------------------------------

  GuildRpcGuildCurrencyChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRpcGuildCurrencyChangeNotify& from);
  void MergeFrom(const GuildRpcGuildCurrencyChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GuildProsper = 1 [default = -1];
  inline bool has_guildprosper() const;
  inline void clear_guildprosper();
  static const int kGuildProsperFieldNumber = 1;
  inline ::google::protobuf::int32 guildprosper() const;
  inline void set_guildprosper(::google::protobuf::int32 value);

  // optional int32 GuildMoney = 2 [default = -1];
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // optional int32 GuildResource = 3 [default = -1];
  inline bool has_guildresource() const;
  inline void clear_guildresource();
  static const int kGuildResourceFieldNumber = 3;
  inline ::google::protobuf::int32 guildresource() const;
  inline void set_guildresource(::google::protobuf::int32 value);

  // optional int32 GuildWelfare = 4 [default = -1];
  inline bool has_guildwelfare() const;
  inline void clear_guildwelfare();
  static const int kGuildWelfareFieldNumber = 4;
  inline ::google::protobuf::int32 guildwelfare() const;
  inline void set_guildwelfare(::google::protobuf::int32 value);

  // optional int32 MaintainCost = 5 [default = -1];
  inline bool has_maintaincost() const;
  inline void clear_maintaincost();
  static const int kMaintainCostFieldNumber = 5;
  inline ::google::protobuf::int32 maintaincost() const;
  inline void set_maintaincost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildRpcGuildCurrencyChangeNotify)
 private:
  inline void set_has_guildprosper();
  inline void clear_has_guildprosper();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_guildresource();
  inline void clear_has_guildresource();
  inline void set_has_guildwelfare();
  inline void clear_has_guildwelfare();
  inline void set_has_maintaincost();
  inline void clear_has_maintaincost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 guildprosper_;
  ::google::protobuf::int32 guildmoney_;
  ::google::protobuf::int32 guildresource_;
  ::google::protobuf::int32 guildwelfare_;
  ::google::protobuf::int32 maintaincost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildRpc_2eproto();
  friend void protobuf_AssignDesc_GuildRpc_2eproto();
  friend void protobuf_ShutdownFile_GuildRpc_2eproto();

  void InitAsDefaultInstance();
  static GuildRpcGuildCurrencyChangeNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// GuildRpcGuildBaseInfoAsk

// -------------------------------------------------------------------

// GuildRpcGuildBaseInfoReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcGuildBaseInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcGuildBaseInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcGuildBaseInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcGuildBaseInfoReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcGuildBaseInfoReply::result() const {
  return result_;
}
inline void GuildRpcGuildBaseInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .GuildInfo GuildBaseInfo = 2;
inline bool GuildRpcGuildBaseInfoReply::has_guildbaseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcGuildBaseInfoReply::set_has_guildbaseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcGuildBaseInfoReply::clear_has_guildbaseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcGuildBaseInfoReply::clear_guildbaseinfo() {
  if (guildbaseinfo_ != NULL) guildbaseinfo_->::GuildInfo::Clear();
  clear_has_guildbaseinfo();
}
inline const ::GuildInfo& GuildRpcGuildBaseInfoReply::guildbaseinfo() const {
  return guildbaseinfo_ != NULL ? *guildbaseinfo_ : *default_instance_->guildbaseinfo_;
}
inline ::GuildInfo* GuildRpcGuildBaseInfoReply::mutable_guildbaseinfo() {
  set_has_guildbaseinfo();
  if (guildbaseinfo_ == NULL) guildbaseinfo_ = new ::GuildInfo;
  return guildbaseinfo_;
}
inline ::GuildInfo* GuildRpcGuildBaseInfoReply::release_guildbaseinfo() {
  clear_has_guildbaseinfo();
  ::GuildInfo* temp = guildbaseinfo_;
  guildbaseinfo_ = NULL;
  return temp;
}
inline void GuildRpcGuildBaseInfoReply::set_allocated_guildbaseinfo(::GuildInfo* guildbaseinfo) {
  delete guildbaseinfo_;
  guildbaseinfo_ = guildbaseinfo;
  if (guildbaseinfo) {
    set_has_guildbaseinfo();
  } else {
    clear_has_guildbaseinfo();
  }
}

// -------------------------------------------------------------------

// GuildRpcKickMemberAsk

// optional int32 Guid = 1 [default = -1];
inline bool GuildRpcKickMemberAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcKickMemberAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcKickMemberAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcKickMemberAsk::clear_guid() {
  guid_ = -1;
  clear_has_guid();
}
inline ::google::protobuf::int32 GuildRpcKickMemberAsk::guid() const {
  return guid_;
}
inline void GuildRpcKickMemberAsk::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// optional string KickReason = 2;
inline bool GuildRpcKickMemberAsk::has_kickreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcKickMemberAsk::set_has_kickreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcKickMemberAsk::clear_has_kickreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcKickMemberAsk::clear_kickreason() {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    kickreason_->clear();
  }
  clear_has_kickreason();
}
inline const ::std::string& GuildRpcKickMemberAsk::kickreason() const {
  return *kickreason_;
}
inline void GuildRpcKickMemberAsk::set_kickreason(const ::std::string& value) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(value);
}
inline void GuildRpcKickMemberAsk::set_kickreason(const char* value) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(value);
}
inline void GuildRpcKickMemberAsk::set_kickreason(const char* value, size_t size) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcKickMemberAsk::mutable_kickreason() {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  return kickreason_;
}
inline ::std::string* GuildRpcKickMemberAsk::release_kickreason() {
  clear_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kickreason_;
    kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcKickMemberAsk::set_allocated_kickreason(::std::string* kickreason) {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    delete kickreason_;
  }
  if (kickreason) {
    set_has_kickreason();
    kickreason_ = kickreason;
  } else {
    clear_has_kickreason();
    kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ReasonType = 3 [default = -1];
inline bool GuildRpcKickMemberAsk::has_reasontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcKickMemberAsk::set_has_reasontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcKickMemberAsk::clear_has_reasontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcKickMemberAsk::clear_reasontype() {
  reasontype_ = -1;
  clear_has_reasontype();
}
inline ::google::protobuf::int32 GuildRpcKickMemberAsk::reasontype() const {
  return reasontype_;
}
inline void GuildRpcKickMemberAsk::set_reasontype(::google::protobuf::int32 value) {
  set_has_reasontype();
  reasontype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcKickMemberReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcKickMemberReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcKickMemberReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcKickMemberReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcKickMemberReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcKickMemberReply::result() const {
  return result_;
}
inline void GuildRpcKickMemberReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 Guid = 2 [default = -1];
inline bool GuildRpcKickMemberReply::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcKickMemberReply::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcKickMemberReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcKickMemberReply::clear_guid() {
  guid_ = -1;
  clear_has_guid();
}
inline ::google::protobuf::int32 GuildRpcKickMemberReply::guid() const {
  return guid_;
}
inline void GuildRpcKickMemberReply::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 OnlineCount = 3 [default = -1];
inline bool GuildRpcKickMemberReply::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcKickMemberReply::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcKickMemberReply::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcKickMemberReply::clear_onlinecount() {
  onlinecount_ = -1;
  clear_has_onlinecount();
}
inline ::google::protobuf::int32 GuildRpcKickMemberReply::onlinecount() const {
  return onlinecount_;
}
inline void GuildRpcKickMemberReply::set_onlinecount(::google::protobuf::int32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
}

// optional int32 MemberCount = 4 [default = -1];
inline bool GuildRpcKickMemberReply::has_membercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcKickMemberReply::set_has_membercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcKickMemberReply::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcKickMemberReply::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
inline ::google::protobuf::int32 GuildRpcKickMemberReply::membercount() const {
  return membercount_;
}
inline void GuildRpcKickMemberReply::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
}

// -------------------------------------------------------------------

// GuildRpcKickMemberNotifyNotify

// optional string KickReason = 1;
inline bool GuildRpcKickMemberNotifyNotify::has_kickreason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcKickMemberNotifyNotify::set_has_kickreason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcKickMemberNotifyNotify::clear_has_kickreason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcKickMemberNotifyNotify::clear_kickreason() {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    kickreason_->clear();
  }
  clear_has_kickreason();
}
inline const ::std::string& GuildRpcKickMemberNotifyNotify::kickreason() const {
  return *kickreason_;
}
inline void GuildRpcKickMemberNotifyNotify::set_kickreason(const ::std::string& value) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(value);
}
inline void GuildRpcKickMemberNotifyNotify::set_kickreason(const char* value) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(value);
}
inline void GuildRpcKickMemberNotifyNotify::set_kickreason(const char* value, size_t size) {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  kickreason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcKickMemberNotifyNotify::mutable_kickreason() {
  set_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    kickreason_ = new ::std::string;
  }
  return kickreason_;
}
inline ::std::string* GuildRpcKickMemberNotifyNotify::release_kickreason() {
  clear_has_kickreason();
  if (kickreason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kickreason_;
    kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcKickMemberNotifyNotify::set_allocated_kickreason(::std::string* kickreason) {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    delete kickreason_;
  }
  if (kickreason) {
    set_has_kickreason();
    kickreason_ = kickreason;
  } else {
    clear_has_kickreason();
    kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ReasonType = 2 [default = -1];
inline bool GuildRpcKickMemberNotifyNotify::has_reasontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcKickMemberNotifyNotify::set_has_reasontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcKickMemberNotifyNotify::clear_has_reasontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcKickMemberNotifyNotify::clear_reasontype() {
  reasontype_ = -1;
  clear_has_reasontype();
}
inline ::google::protobuf::int32 GuildRpcKickMemberNotifyNotify::reasontype() const {
  return reasontype_;
}
inline void GuildRpcKickMemberNotifyNotify::set_reasontype(::google::protobuf::int32 value) {
  set_has_reasontype();
  reasontype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskVacationAsk

// optional int32 Guid = 1 [default = -1];
inline bool GuildRpcAskVacationAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskVacationAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskVacationAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskVacationAsk::clear_guid() {
  guid_ = -1;
  clear_has_guid();
}
inline ::google::protobuf::int32 GuildRpcAskVacationAsk::guid() const {
  return guid_;
}
inline void GuildRpcAskVacationAsk::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// optional string Reason = 2;
inline bool GuildRpcAskVacationAsk::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcAskVacationAsk::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcAskVacationAsk::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcAskVacationAsk::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& GuildRpcAskVacationAsk::reason() const {
  return *reason_;
}
inline void GuildRpcAskVacationAsk::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void GuildRpcAskVacationAsk::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void GuildRpcAskVacationAsk::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcAskVacationAsk::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* GuildRpcAskVacationAsk::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcAskVacationAsk::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Type = 4 [default = -1];
inline bool GuildRpcAskVacationAsk::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcAskVacationAsk::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcAskVacationAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcAskVacationAsk::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 GuildRpcAskVacationAsk::type() const {
  return type_;
}
inline void GuildRpcAskVacationAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskVacationReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskVacationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskVacationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskVacationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskVacationReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskVacationReply::result() const {
  return result_;
}
inline void GuildRpcAskVacationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 Guid = 2 [default = -1];
inline bool GuildRpcAskVacationReply::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcAskVacationReply::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcAskVacationReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcAskVacationReply::clear_guid() {
  guid_ = -1;
  clear_has_guid();
}
inline ::google::protobuf::int32 GuildRpcAskVacationReply::guid() const {
  return guid_;
}
inline void GuildRpcAskVacationReply::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Type = 3 [default = -1];
inline bool GuildRpcAskVacationReply::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcAskVacationReply::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcAskVacationReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcAskVacationReply::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 GuildRpcAskVacationReply::type() const {
  return type_;
}
inline void GuildRpcAskVacationReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GuildRpcVacationNotify

// optional .GuildVacationInfo VacationInfo = 2;
inline bool GuildRpcVacationNotify::has_vacationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcVacationNotify::set_has_vacationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcVacationNotify::clear_has_vacationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcVacationNotify::clear_vacationinfo() {
  if (vacationinfo_ != NULL) vacationinfo_->::GuildVacationInfo::Clear();
  clear_has_vacationinfo();
}
inline const ::GuildVacationInfo& GuildRpcVacationNotify::vacationinfo() const {
  return vacationinfo_ != NULL ? *vacationinfo_ : *default_instance_->vacationinfo_;
}
inline ::GuildVacationInfo* GuildRpcVacationNotify::mutable_vacationinfo() {
  set_has_vacationinfo();
  if (vacationinfo_ == NULL) vacationinfo_ = new ::GuildVacationInfo;
  return vacationinfo_;
}
inline ::GuildVacationInfo* GuildRpcVacationNotify::release_vacationinfo() {
  clear_has_vacationinfo();
  ::GuildVacationInfo* temp = vacationinfo_;
  vacationinfo_ = NULL;
  return temp;
}
inline void GuildRpcVacationNotify::set_allocated_vacationinfo(::GuildVacationInfo* vacationinfo) {
  delete vacationinfo_;
  vacationinfo_ = vacationinfo;
  if (vacationinfo) {
    set_has_vacationinfo();
  } else {
    clear_has_vacationinfo();
  }
}

// optional int32 Type = 3 [default = -1];
inline bool GuildRpcVacationNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcVacationNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcVacationNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcVacationNotify::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 GuildRpcVacationNotify::type() const {
  return type_;
}
inline void GuildRpcVacationNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GuildRpcReplyVacationNotify

// -------------------------------------------------------------------

// GuildRpcAskApplyListAsk

// -------------------------------------------------------------------

// GuildRpcAskApplyListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskApplyListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskApplyListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskApplyListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskApplyListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskApplyListReply::result() const {
  return result_;
}
inline void GuildRpcAskApplyListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
inline int GuildRpcAskApplyListReply::guildmembertinyinfolist_size() const {
  return guildmembertinyinfolist_.size();
}
inline void GuildRpcAskApplyListReply::clear_guildmembertinyinfolist() {
  guildmembertinyinfolist_.Clear();
}
inline const ::GuildMemberTinyInfo& GuildRpcAskApplyListReply::guildmembertinyinfolist(int index) const {
  return guildmembertinyinfolist_.Get(index);
}
inline ::GuildMemberTinyInfo* GuildRpcAskApplyListReply::mutable_guildmembertinyinfolist(int index) {
  return guildmembertinyinfolist_.Mutable(index);
}
inline ::GuildMemberTinyInfo* GuildRpcAskApplyListReply::add_guildmembertinyinfolist() {
  return guildmembertinyinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberTinyInfo >&
GuildRpcAskApplyListReply::guildmembertinyinfolist() const {
  return guildmembertinyinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildMemberTinyInfo >*
GuildRpcAskApplyListReply::mutable_guildmembertinyinfolist() {
  return &guildmembertinyinfolist_;
}

// -------------------------------------------------------------------

// GuildRpcApplyGuildOperationAsk

// optional uint64 Guid = 1 [default = 0];
inline bool GuildRpcApplyGuildOperationAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyGuildOperationAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyGuildOperationAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyGuildOperationAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcApplyGuildOperationAsk::guid() const {
  return guid_;
}
inline void GuildRpcApplyGuildOperationAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Operation = 2 [default = -1];
inline bool GuildRpcApplyGuildOperationAsk::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcApplyGuildOperationAsk::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcApplyGuildOperationAsk::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcApplyGuildOperationAsk::clear_operation() {
  operation_ = -1;
  clear_has_operation();
}
inline ::google::protobuf::int32 GuildRpcApplyGuildOperationAsk::operation() const {
  return operation_;
}
inline void GuildRpcApplyGuildOperationAsk::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
}

// -------------------------------------------------------------------

// GuildRpcApplyGuildOperationReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcApplyGuildOperationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyGuildOperationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyGuildOperationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyGuildOperationReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcApplyGuildOperationReply::result() const {
  return result_;
}
inline void GuildRpcApplyGuildOperationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 Operation = 3 [default = -1];
inline bool GuildRpcApplyGuildOperationReply::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcApplyGuildOperationReply::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcApplyGuildOperationReply::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcApplyGuildOperationReply::clear_operation() {
  operation_ = -1;
  clear_has_operation();
}
inline ::google::protobuf::int32 GuildRpcApplyGuildOperationReply::operation() const {
  return operation_;
}
inline void GuildRpcApplyGuildOperationReply::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
}

// repeated .GuildMemberInfo MemberInfoList = 4;
inline int GuildRpcApplyGuildOperationReply::memberinfolist_size() const {
  return memberinfolist_.size();
}
inline void GuildRpcApplyGuildOperationReply::clear_memberinfolist() {
  memberinfolist_.Clear();
}
inline const ::GuildMemberInfo& GuildRpcApplyGuildOperationReply::memberinfolist(int index) const {
  return memberinfolist_.Get(index);
}
inline ::GuildMemberInfo* GuildRpcApplyGuildOperationReply::mutable_memberinfolist(int index) {
  return memberinfolist_.Mutable(index);
}
inline ::GuildMemberInfo* GuildRpcApplyGuildOperationReply::add_memberinfolist() {
  return memberinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >&
GuildRpcApplyGuildOperationReply::memberinfolist() const {
  return memberinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >*
GuildRpcApplyGuildOperationReply::mutable_memberinfolist() {
  return &memberinfolist_;
}

// optional int32 OnlineCount = 5 [default = -1];
inline bool GuildRpcApplyGuildOperationReply::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcApplyGuildOperationReply::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcApplyGuildOperationReply::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcApplyGuildOperationReply::clear_onlinecount() {
  onlinecount_ = -1;
  clear_has_onlinecount();
}
inline ::google::protobuf::int32 GuildRpcApplyGuildOperationReply::onlinecount() const {
  return onlinecount_;
}
inline void GuildRpcApplyGuildOperationReply::set_onlinecount(::google::protobuf::int32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
}

// optional int32 MemberCount = 6 [default = -1];
inline bool GuildRpcApplyGuildOperationReply::has_membercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildRpcApplyGuildOperationReply::set_has_membercount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildRpcApplyGuildOperationReply::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildRpcApplyGuildOperationReply::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
inline ::google::protobuf::int32 GuildRpcApplyGuildOperationReply::membercount() const {
  return membercount_;
}
inline void GuildRpcApplyGuildOperationReply::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
}

// -------------------------------------------------------------------

// GuildRpcApplyGuildNotify

// optional uint64 GuildID = 1 [default = 0];
inline bool GuildRpcApplyGuildNotify::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyGuildNotify::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyGuildNotify::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyGuildNotify::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildRpcApplyGuildNotify::guildid() const {
  return guildid_;
}
inline void GuildRpcApplyGuildNotify::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string GuildName = 2;
inline bool GuildRpcApplyGuildNotify::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcApplyGuildNotify::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcApplyGuildNotify::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcApplyGuildNotify::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& GuildRpcApplyGuildNotify::guildname() const {
  return *guildname_;
}
inline void GuildRpcApplyGuildNotify::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildRpcApplyGuildNotify::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildRpcApplyGuildNotify::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcApplyGuildNotify::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildRpcApplyGuildNotify::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcApplyGuildNotify::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcApplyLimitSettingAsk

// optional bool IsAutoJoin = 1 [default = false];
inline bool GuildRpcApplyLimitSettingAsk::has_isautojoin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyLimitSettingAsk::set_has_isautojoin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyLimitSettingAsk::clear_has_isautojoin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyLimitSettingAsk::clear_isautojoin() {
  isautojoin_ = false;
  clear_has_isautojoin();
}
inline bool GuildRpcApplyLimitSettingAsk::isautojoin() const {
  return isautojoin_;
}
inline void GuildRpcApplyLimitSettingAsk::set_isautojoin(bool value) {
  set_has_isautojoin();
  isautojoin_ = value;
}

// -------------------------------------------------------------------

// GuildRpcApplyLimitSettingReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcApplyLimitSettingReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyLimitSettingReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyLimitSettingReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyLimitSettingReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcApplyLimitSettingReply::result() const {
  return result_;
}
inline void GuildRpcApplyLimitSettingReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional bool IsAutoJoin = 2 [default = false];
inline bool GuildRpcApplyLimitSettingReply::has_isautojoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcApplyLimitSettingReply::set_has_isautojoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcApplyLimitSettingReply::clear_has_isautojoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcApplyLimitSettingReply::clear_isautojoin() {
  isautojoin_ = false;
  clear_has_isautojoin();
}
inline bool GuildRpcApplyLimitSettingReply::isautojoin() const {
  return isautojoin_;
}
inline void GuildRpcApplyLimitSettingReply::set_isautojoin(bool value) {
  set_has_isautojoin();
  isautojoin_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskJurisdictionListAsk

// -------------------------------------------------------------------

// GuildRpcAskJurisdictionListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskJurisdictionListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskJurisdictionListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskJurisdictionListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskJurisdictionListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskJurisdictionListReply::result() const {
  return result_;
}
inline void GuildRpcAskJurisdictionListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildOfficeJurisdiction JurisdictionList = 2;
inline int GuildRpcAskJurisdictionListReply::jurisdictionlist_size() const {
  return jurisdictionlist_.size();
}
inline void GuildRpcAskJurisdictionListReply::clear_jurisdictionlist() {
  jurisdictionlist_.Clear();
}
inline const ::GuildOfficeJurisdiction& GuildRpcAskJurisdictionListReply::jurisdictionlist(int index) const {
  return jurisdictionlist_.Get(index);
}
inline ::GuildOfficeJurisdiction* GuildRpcAskJurisdictionListReply::mutable_jurisdictionlist(int index) {
  return jurisdictionlist_.Mutable(index);
}
inline ::GuildOfficeJurisdiction* GuildRpcAskJurisdictionListReply::add_jurisdictionlist() {
  return jurisdictionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildOfficeJurisdiction >&
GuildRpcAskJurisdictionListReply::jurisdictionlist() const {
  return jurisdictionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildOfficeJurisdiction >*
GuildRpcAskJurisdictionListReply::mutable_jurisdictionlist() {
  return &jurisdictionlist_;
}

// -------------------------------------------------------------------

// GuildRpcSetJurisdictionAsk

// optional .GuildOfficeJurisdiction SetList = 1;
inline bool GuildRpcSetJurisdictionAsk::has_setlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSetJurisdictionAsk::set_has_setlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSetJurisdictionAsk::clear_has_setlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSetJurisdictionAsk::clear_setlist() {
  if (setlist_ != NULL) setlist_->::GuildOfficeJurisdiction::Clear();
  clear_has_setlist();
}
inline const ::GuildOfficeJurisdiction& GuildRpcSetJurisdictionAsk::setlist() const {
  return setlist_ != NULL ? *setlist_ : *default_instance_->setlist_;
}
inline ::GuildOfficeJurisdiction* GuildRpcSetJurisdictionAsk::mutable_setlist() {
  set_has_setlist();
  if (setlist_ == NULL) setlist_ = new ::GuildOfficeJurisdiction;
  return setlist_;
}
inline ::GuildOfficeJurisdiction* GuildRpcSetJurisdictionAsk::release_setlist() {
  clear_has_setlist();
  ::GuildOfficeJurisdiction* temp = setlist_;
  setlist_ = NULL;
  return temp;
}
inline void GuildRpcSetJurisdictionAsk::set_allocated_setlist(::GuildOfficeJurisdiction* setlist) {
  delete setlist_;
  setlist_ = setlist;
  if (setlist) {
    set_has_setlist();
  } else {
    clear_has_setlist();
  }
}

// -------------------------------------------------------------------

// GuildRpcSetJurisdictionReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcSetJurisdictionReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSetJurisdictionReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSetJurisdictionReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSetJurisdictionReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcSetJurisdictionReply::result() const {
  return result_;
}
inline void GuildRpcSetJurisdictionReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .GuildOfficeJurisdiction SetList = 2;
inline bool GuildRpcSetJurisdictionReply::has_setlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcSetJurisdictionReply::set_has_setlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcSetJurisdictionReply::clear_has_setlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcSetJurisdictionReply::clear_setlist() {
  if (setlist_ != NULL) setlist_->::GuildOfficeJurisdiction::Clear();
  clear_has_setlist();
}
inline const ::GuildOfficeJurisdiction& GuildRpcSetJurisdictionReply::setlist() const {
  return setlist_ != NULL ? *setlist_ : *default_instance_->setlist_;
}
inline ::GuildOfficeJurisdiction* GuildRpcSetJurisdictionReply::mutable_setlist() {
  set_has_setlist();
  if (setlist_ == NULL) setlist_ = new ::GuildOfficeJurisdiction;
  return setlist_;
}
inline ::GuildOfficeJurisdiction* GuildRpcSetJurisdictionReply::release_setlist() {
  clear_has_setlist();
  ::GuildOfficeJurisdiction* temp = setlist_;
  setlist_ = NULL;
  return temp;
}
inline void GuildRpcSetJurisdictionReply::set_allocated_setlist(::GuildOfficeJurisdiction* setlist) {
  delete setlist_;
  setlist_ = setlist;
  if (setlist) {
    set_has_setlist();
  } else {
    clear_has_setlist();
  }
}

// -------------------------------------------------------------------

// GuildRpcAskVacationListAsk

// -------------------------------------------------------------------

// GuildRpcAskVacationListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskVacationListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskVacationListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskVacationListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskVacationListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskVacationListReply::result() const {
  return result_;
}
inline void GuildRpcAskVacationListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildVacationInfo VacationList = 2;
inline int GuildRpcAskVacationListReply::vacationlist_size() const {
  return vacationlist_.size();
}
inline void GuildRpcAskVacationListReply::clear_vacationlist() {
  vacationlist_.Clear();
}
inline const ::GuildVacationInfo& GuildRpcAskVacationListReply::vacationlist(int index) const {
  return vacationlist_.Get(index);
}
inline ::GuildVacationInfo* GuildRpcAskVacationListReply::mutable_vacationlist(int index) {
  return vacationlist_.Mutable(index);
}
inline ::GuildVacationInfo* GuildRpcAskVacationListReply::add_vacationlist() {
  return vacationlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildVacationInfo >&
GuildRpcAskVacationListReply::vacationlist() const {
  return vacationlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildVacationInfo >*
GuildRpcAskVacationListReply::mutable_vacationlist() {
  return &vacationlist_;
}

// -------------------------------------------------------------------

// GuildRpcVacationGuildOperationAsk

// optional uint64 Guid = 2 [default = 0];
inline bool GuildRpcVacationGuildOperationAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcVacationGuildOperationAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcVacationGuildOperationAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcVacationGuildOperationAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcVacationGuildOperationAsk::guid() const {
  return guid_;
}
inline void GuildRpcVacationGuildOperationAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Operation = 3 [default = -1];
inline bool GuildRpcVacationGuildOperationAsk::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcVacationGuildOperationAsk::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcVacationGuildOperationAsk::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcVacationGuildOperationAsk::clear_operation() {
  operation_ = -1;
  clear_has_operation();
}
inline ::google::protobuf::int32 GuildRpcVacationGuildOperationAsk::operation() const {
  return operation_;
}
inline void GuildRpcVacationGuildOperationAsk::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
}

// -------------------------------------------------------------------

// GuildRpcVacationGuildOperationReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcVacationGuildOperationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcVacationGuildOperationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcVacationGuildOperationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcVacationGuildOperationReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcVacationGuildOperationReply::result() const {
  return result_;
}
inline void GuildRpcVacationGuildOperationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 Guid = 2 [default = 0];
inline bool GuildRpcVacationGuildOperationReply::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcVacationGuildOperationReply::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcVacationGuildOperationReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcVacationGuildOperationReply::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcVacationGuildOperationReply::guid() const {
  return guid_;
}
inline void GuildRpcVacationGuildOperationReply::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Operation = 3 [default = -1];
inline bool GuildRpcVacationGuildOperationReply::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcVacationGuildOperationReply::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcVacationGuildOperationReply::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcVacationGuildOperationReply::clear_operation() {
  operation_ = -1;
  clear_has_operation();
}
inline ::google::protobuf::int32 GuildRpcVacationGuildOperationReply::operation() const {
  return operation_;
}
inline void GuildRpcVacationGuildOperationReply::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
}

// -------------------------------------------------------------------

// GuildRpcApplyGuildToOfficeNotify

// optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
inline bool GuildRpcApplyGuildToOfficeNotify::has_guildmembertinyinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcApplyGuildToOfficeNotify::set_has_guildmembertinyinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcApplyGuildToOfficeNotify::clear_has_guildmembertinyinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcApplyGuildToOfficeNotify::clear_guildmembertinyinfo() {
  if (guildmembertinyinfo_ != NULL) guildmembertinyinfo_->::GuildMemberTinyInfo::Clear();
  clear_has_guildmembertinyinfo();
}
inline const ::GuildMemberTinyInfo& GuildRpcApplyGuildToOfficeNotify::guildmembertinyinfo() const {
  return guildmembertinyinfo_ != NULL ? *guildmembertinyinfo_ : *default_instance_->guildmembertinyinfo_;
}
inline ::GuildMemberTinyInfo* GuildRpcApplyGuildToOfficeNotify::mutable_guildmembertinyinfo() {
  set_has_guildmembertinyinfo();
  if (guildmembertinyinfo_ == NULL) guildmembertinyinfo_ = new ::GuildMemberTinyInfo;
  return guildmembertinyinfo_;
}
inline ::GuildMemberTinyInfo* GuildRpcApplyGuildToOfficeNotify::release_guildmembertinyinfo() {
  clear_has_guildmembertinyinfo();
  ::GuildMemberTinyInfo* temp = guildmembertinyinfo_;
  guildmembertinyinfo_ = NULL;
  return temp;
}
inline void GuildRpcApplyGuildToOfficeNotify::set_allocated_guildmembertinyinfo(::GuildMemberTinyInfo* guildmembertinyinfo) {
  delete guildmembertinyinfo_;
  guildmembertinyinfo_ = guildmembertinyinfo;
  if (guildmembertinyinfo) {
    set_has_guildmembertinyinfo();
  } else {
    clear_has_guildmembertinyinfo();
  }
}

// -------------------------------------------------------------------

// GuildRpcAskBuildingInfoAsk

// -------------------------------------------------------------------

// GuildRpcAskBuildingInfoReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskBuildingInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskBuildingInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskBuildingInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskBuildingInfoReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskBuildingInfoReply::result() const {
  return result_;
}
inline void GuildRpcAskBuildingInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildBuildingInfo BuildingInfoList = 2;
inline int GuildRpcAskBuildingInfoReply::buildinginfolist_size() const {
  return buildinginfolist_.size();
}
inline void GuildRpcAskBuildingInfoReply::clear_buildinginfolist() {
  buildinginfolist_.Clear();
}
inline const ::GuildBuildingInfo& GuildRpcAskBuildingInfoReply::buildinginfolist(int index) const {
  return buildinginfolist_.Get(index);
}
inline ::GuildBuildingInfo* GuildRpcAskBuildingInfoReply::mutable_buildinginfolist(int index) {
  return buildinginfolist_.Mutable(index);
}
inline ::GuildBuildingInfo* GuildRpcAskBuildingInfoReply::add_buildinginfolist() {
  return buildinginfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildBuildingInfo >&
GuildRpcAskBuildingInfoReply::buildinginfolist() const {
  return buildinginfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildBuildingInfo >*
GuildRpcAskBuildingInfoReply::mutable_buildinginfolist() {
  return &buildinginfolist_;
}

// -------------------------------------------------------------------

// GuildRpcBuildingLvUpAsk

// optional int32 BuildingType = 2 [default = -1];
inline bool GuildRpcBuildingLvUpAsk::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildingLvUpAsk::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildingLvUpAsk::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildingLvUpAsk::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvUpAsk::buildingtype() const {
  return buildingtype_;
}
inline void GuildRpcBuildingLvUpAsk::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcBuildingLvUpReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcBuildingLvUpReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildingLvUpReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildingLvUpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildingLvUpReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvUpReply::result() const {
  return result_;
}
inline void GuildRpcBuildingLvUpReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .GuildBuildingInfo GuildBuildingInfo = 2;
inline bool GuildRpcBuildingLvUpReply::has_guildbuildinginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcBuildingLvUpReply::set_has_guildbuildinginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcBuildingLvUpReply::clear_has_guildbuildinginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcBuildingLvUpReply::clear_guildbuildinginfo() {
  if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
  clear_has_guildbuildinginfo();
}
inline const ::GuildBuildingInfo& GuildRpcBuildingLvUpReply::guildbuildinginfo() const {
  return guildbuildinginfo_ != NULL ? *guildbuildinginfo_ : *default_instance_->guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildingLvUpReply::mutable_guildbuildinginfo() {
  set_has_guildbuildinginfo();
  if (guildbuildinginfo_ == NULL) guildbuildinginfo_ = new ::GuildBuildingInfo;
  return guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildingLvUpReply::release_guildbuildinginfo() {
  clear_has_guildbuildinginfo();
  ::GuildBuildingInfo* temp = guildbuildinginfo_;
  guildbuildinginfo_ = NULL;
  return temp;
}
inline void GuildRpcBuildingLvUpReply::set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo) {
  delete guildbuildinginfo_;
  guildbuildinginfo_ = guildbuildinginfo;
  if (guildbuildinginfo) {
    set_has_guildbuildinginfo();
  } else {
    clear_has_guildbuildinginfo();
  }
}

// optional int32 GuildMoney = 3 [default = -1];
inline bool GuildRpcBuildingLvUpReply::has_guildmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcBuildingLvUpReply::set_has_guildmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcBuildingLvUpReply::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcBuildingLvUpReply::clear_guildmoney() {
  guildmoney_ = -1;
  clear_has_guildmoney();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvUpReply::guildmoney() const {
  return guildmoney_;
}
inline void GuildRpcBuildingLvUpReply::set_guildmoney(::google::protobuf::int32 value) {
  set_has_guildmoney();
  guildmoney_ = value;
}

// optional int32 GuildResource = 4 [default = -1];
inline bool GuildRpcBuildingLvUpReply::has_guildresource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcBuildingLvUpReply::set_has_guildresource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcBuildingLvUpReply::clear_has_guildresource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcBuildingLvUpReply::clear_guildresource() {
  guildresource_ = -1;
  clear_has_guildresource();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvUpReply::guildresource() const {
  return guildresource_;
}
inline void GuildRpcBuildingLvUpReply::set_guildresource(::google::protobuf::int32 value) {
  set_has_guildresource();
  guildresource_ = value;
}

// -------------------------------------------------------------------

// GuildRpcBuildingLvSpeedUpAsk

// optional int32 BuildingType = 1 [default = -1];
inline bool GuildRpcBuildingLvSpeedUpAsk::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildingLvSpeedUpAsk::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildingLvSpeedUpAsk::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildingLvSpeedUpAsk::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvSpeedUpAsk::buildingtype() const {
  return buildingtype_;
}
inline void GuildRpcBuildingLvSpeedUpAsk::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// optional int32 Time = 2 [default = -1];
inline bool GuildRpcBuildingLvSpeedUpAsk::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcBuildingLvSpeedUpAsk::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcBuildingLvSpeedUpAsk::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcBuildingLvSpeedUpAsk::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvSpeedUpAsk::time() const {
  return time_;
}
inline void GuildRpcBuildingLvSpeedUpAsk::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GuildRpcBuildingLvSpeedUpReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcBuildingLvSpeedUpReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildingLvSpeedUpReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildingLvSpeedUpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildingLvSpeedUpReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcBuildingLvSpeedUpReply::result() const {
  return result_;
}
inline void GuildRpcBuildingLvSpeedUpReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .GuildBuildingInfo GuildBuildingInfo = 2;
inline bool GuildRpcBuildingLvSpeedUpReply::has_guildbuildinginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcBuildingLvSpeedUpReply::set_has_guildbuildinginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcBuildingLvSpeedUpReply::clear_has_guildbuildinginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcBuildingLvSpeedUpReply::clear_guildbuildinginfo() {
  if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
  clear_has_guildbuildinginfo();
}
inline const ::GuildBuildingInfo& GuildRpcBuildingLvSpeedUpReply::guildbuildinginfo() const {
  return guildbuildinginfo_ != NULL ? *guildbuildinginfo_ : *default_instance_->guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildingLvSpeedUpReply::mutable_guildbuildinginfo() {
  set_has_guildbuildinginfo();
  if (guildbuildinginfo_ == NULL) guildbuildinginfo_ = new ::GuildBuildingInfo;
  return guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildingLvSpeedUpReply::release_guildbuildinginfo() {
  clear_has_guildbuildinginfo();
  ::GuildBuildingInfo* temp = guildbuildinginfo_;
  guildbuildinginfo_ = NULL;
  return temp;
}
inline void GuildRpcBuildingLvSpeedUpReply::set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo) {
  delete guildbuildinginfo_;
  guildbuildinginfo_ = guildbuildinginfo;
  if (guildbuildinginfo) {
    set_has_guildbuildinginfo();
  } else {
    clear_has_guildbuildinginfo();
  }
}

// -------------------------------------------------------------------

// GuildRpcAskBuildingContributionListAsk

// optional int32 BuildingType = 1 [default = -1];
inline bool GuildRpcAskBuildingContributionListAsk::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskBuildingContributionListAsk::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskBuildingContributionListAsk::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskBuildingContributionListAsk::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildRpcAskBuildingContributionListAsk::buildingtype() const {
  return buildingtype_;
}
inline void GuildRpcAskBuildingContributionListAsk::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskBuildingContributionListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskBuildingContributionListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskBuildingContributionListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskBuildingContributionListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskBuildingContributionListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskBuildingContributionListReply::result() const {
  return result_;
}
inline void GuildRpcAskBuildingContributionListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildBuildingContributionInfo ContributionList = 2;
inline int GuildRpcAskBuildingContributionListReply::contributionlist_size() const {
  return contributionlist_.size();
}
inline void GuildRpcAskBuildingContributionListReply::clear_contributionlist() {
  contributionlist_.Clear();
}
inline const ::GuildBuildingContributionInfo& GuildRpcAskBuildingContributionListReply::contributionlist(int index) const {
  return contributionlist_.Get(index);
}
inline ::GuildBuildingContributionInfo* GuildRpcAskBuildingContributionListReply::mutable_contributionlist(int index) {
  return contributionlist_.Mutable(index);
}
inline ::GuildBuildingContributionInfo* GuildRpcAskBuildingContributionListReply::add_contributionlist() {
  return contributionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildBuildingContributionInfo >&
GuildRpcAskBuildingContributionListReply::contributionlist() const {
  return contributionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildBuildingContributionInfo >*
GuildRpcAskBuildingContributionListReply::mutable_contributionlist() {
  return &contributionlist_;
}

// optional int32 BuildingType = 3 [default = -1];
inline bool GuildRpcAskBuildingContributionListReply::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcAskBuildingContributionListReply::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcAskBuildingContributionListReply::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcAskBuildingContributionListReply::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildRpcAskBuildingContributionListReply::buildingtype() const {
  return buildingtype_;
}
inline void GuildRpcAskBuildingContributionListReply::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcBuildingCanLvUpNotify

// optional int32 BuildingType = 2 [default = -1];
inline bool GuildRpcBuildingCanLvUpNotify::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildingCanLvUpNotify::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildingCanLvUpNotify::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildingCanLvUpNotify::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildRpcBuildingCanLvUpNotify::buildingtype() const {
  return buildingtype_;
}
inline void GuildRpcBuildingCanLvUpNotify::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskGuildEventListAsk

// -------------------------------------------------------------------

// GuildRpcAskGuildEventListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskGuildEventListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskGuildEventListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskGuildEventListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskGuildEventListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskGuildEventListReply::result() const {
  return result_;
}
inline void GuildRpcAskGuildEventListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildEvent GuildEventList = 2;
inline int GuildRpcAskGuildEventListReply::guildeventlist_size() const {
  return guildeventlist_.size();
}
inline void GuildRpcAskGuildEventListReply::clear_guildeventlist() {
  guildeventlist_.Clear();
}
inline const ::GuildEvent& GuildRpcAskGuildEventListReply::guildeventlist(int index) const {
  return guildeventlist_.Get(index);
}
inline ::GuildEvent* GuildRpcAskGuildEventListReply::mutable_guildeventlist(int index) {
  return guildeventlist_.Mutable(index);
}
inline ::GuildEvent* GuildRpcAskGuildEventListReply::add_guildeventlist() {
  return guildeventlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildEvent >&
GuildRpcAskGuildEventListReply::guildeventlist() const {
  return guildeventlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildEvent >*
GuildRpcAskGuildEventListReply::mutable_guildeventlist() {
  return &guildeventlist_;
}

// -------------------------------------------------------------------

// GuildRpcAskGuildInfoListAsk

// optional int32 PageIndex = 2 [default = -1];
inline bool GuildRpcAskGuildInfoListAsk::has_pageindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskGuildInfoListAsk::set_has_pageindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskGuildInfoListAsk::clear_has_pageindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskGuildInfoListAsk::clear_pageindex() {
  pageindex_ = -1;
  clear_has_pageindex();
}
inline ::google::protobuf::int32 GuildRpcAskGuildInfoListAsk::pageindex() const {
  return pageindex_;
}
inline void GuildRpcAskGuildInfoListAsk::set_pageindex(::google::protobuf::int32 value) {
  set_has_pageindex();
  pageindex_ = value;
}

// -------------------------------------------------------------------

// GuildRpcAskGuildInfoListReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskGuildInfoListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskGuildInfoListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskGuildInfoListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskGuildInfoListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskGuildInfoListReply::result() const {
  return result_;
}
inline void GuildRpcAskGuildInfoListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildInfo GuildInfoList = 2;
inline int GuildRpcAskGuildInfoListReply::guildinfolist_size() const {
  return guildinfolist_.size();
}
inline void GuildRpcAskGuildInfoListReply::clear_guildinfolist() {
  guildinfolist_.Clear();
}
inline const ::GuildInfo& GuildRpcAskGuildInfoListReply::guildinfolist(int index) const {
  return guildinfolist_.Get(index);
}
inline ::GuildInfo* GuildRpcAskGuildInfoListReply::mutable_guildinfolist(int index) {
  return guildinfolist_.Mutable(index);
}
inline ::GuildInfo* GuildRpcAskGuildInfoListReply::add_guildinfolist() {
  return guildinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildInfo >&
GuildRpcAskGuildInfoListReply::guildinfolist() const {
  return guildinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildInfo >*
GuildRpcAskGuildInfoListReply::mutable_guildinfolist() {
  return &guildinfolist_;
}

// optional int32 PageIndex = 3 [default = -1];
inline bool GuildRpcAskGuildInfoListReply::has_pageindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcAskGuildInfoListReply::set_has_pageindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcAskGuildInfoListReply::clear_has_pageindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcAskGuildInfoListReply::clear_pageindex() {
  pageindex_ = -1;
  clear_has_pageindex();
}
inline ::google::protobuf::int32 GuildRpcAskGuildInfoListReply::pageindex() const {
  return pageindex_;
}
inline void GuildRpcAskGuildInfoListReply::set_pageindex(::google::protobuf::int32 value) {
  set_has_pageindex();
  pageindex_ = value;
}

// optional int32 TotalGuildCount = 4 [default = -1];
inline bool GuildRpcAskGuildInfoListReply::has_totalguildcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcAskGuildInfoListReply::set_has_totalguildcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcAskGuildInfoListReply::clear_has_totalguildcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcAskGuildInfoListReply::clear_totalguildcount() {
  totalguildcount_ = -1;
  clear_has_totalguildcount();
}
inline ::google::protobuf::int32 GuildRpcAskGuildInfoListReply::totalguildcount() const {
  return totalguildcount_;
}
inline void GuildRpcAskGuildInfoListReply::set_totalguildcount(::google::protobuf::int32 value) {
  set_has_totalguildcount();
  totalguildcount_ = value;
}

// -------------------------------------------------------------------

// GuildRpcSearchGuildAsk

// optional string Text = 1;
inline bool GuildRpcSearchGuildAsk::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSearchGuildAsk::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSearchGuildAsk::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSearchGuildAsk::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& GuildRpcSearchGuildAsk::text() const {
  return *text_;
}
inline void GuildRpcSearchGuildAsk::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void GuildRpcSearchGuildAsk::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void GuildRpcSearchGuildAsk::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcSearchGuildAsk::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* GuildRpcSearchGuildAsk::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcSearchGuildAsk::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcSearchGuildReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcSearchGuildReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSearchGuildReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSearchGuildReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSearchGuildReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcSearchGuildReply::result() const {
  return result_;
}
inline void GuildRpcSearchGuildReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildInfo GuildInfoList = 2;
inline int GuildRpcSearchGuildReply::guildinfolist_size() const {
  return guildinfolist_.size();
}
inline void GuildRpcSearchGuildReply::clear_guildinfolist() {
  guildinfolist_.Clear();
}
inline const ::GuildInfo& GuildRpcSearchGuildReply::guildinfolist(int index) const {
  return guildinfolist_.Get(index);
}
inline ::GuildInfo* GuildRpcSearchGuildReply::mutable_guildinfolist(int index) {
  return guildinfolist_.Mutable(index);
}
inline ::GuildInfo* GuildRpcSearchGuildReply::add_guildinfolist() {
  return guildinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildInfo >&
GuildRpcSearchGuildReply::guildinfolist() const {
  return guildinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildInfo >*
GuildRpcSearchGuildReply::mutable_guildinfolist() {
  return &guildinfolist_;
}

// -------------------------------------------------------------------

// GuildRpcJoinGuildAsk

// optional uint64 Guid = 1 [default = 0];
inline bool GuildRpcJoinGuildAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcJoinGuildAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcJoinGuildAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcJoinGuildAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcJoinGuildAsk::guid() const {
  return guid_;
}
inline void GuildRpcJoinGuildAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Type = 2 [default = -1];
inline bool GuildRpcJoinGuildAsk::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcJoinGuildAsk::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcJoinGuildAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcJoinGuildAsk::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 GuildRpcJoinGuildAsk::type() const {
  return type_;
}
inline void GuildRpcJoinGuildAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GuildRpcJoinGuildReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcJoinGuildReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcJoinGuildReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcJoinGuildReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcJoinGuildReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcJoinGuildReply::result() const {
  return result_;
}
inline void GuildRpcJoinGuildReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 Guid = 2 [default = 0];
inline bool GuildRpcJoinGuildReply::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcJoinGuildReply::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcJoinGuildReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcJoinGuildReply::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcJoinGuildReply::guid() const {
  return guid_;
}
inline void GuildRpcJoinGuildReply::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// GuildRpcCreateGuildAsk

// optional string GuildName = 1;
inline bool GuildRpcCreateGuildAsk::has_guildname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcCreateGuildAsk::set_has_guildname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcCreateGuildAsk::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcCreateGuildAsk::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& GuildRpcCreateGuildAsk::guildname() const {
  return *guildname_;
}
inline void GuildRpcCreateGuildAsk::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildRpcCreateGuildAsk::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildRpcCreateGuildAsk::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcCreateGuildAsk::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildRpcCreateGuildAsk::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcCreateGuildAsk::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GuildCreed = 2;
inline bool GuildRpcCreateGuildAsk::has_guildcreed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcCreateGuildAsk::set_has_guildcreed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcCreateGuildAsk::clear_has_guildcreed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcCreateGuildAsk::clear_guildcreed() {
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    guildcreed_->clear();
  }
  clear_has_guildcreed();
}
inline const ::std::string& GuildRpcCreateGuildAsk::guildcreed() const {
  return *guildcreed_;
}
inline void GuildRpcCreateGuildAsk::set_guildcreed(const ::std::string& value) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(value);
}
inline void GuildRpcCreateGuildAsk::set_guildcreed(const char* value) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(value);
}
inline void GuildRpcCreateGuildAsk::set_guildcreed(const char* value, size_t size) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcCreateGuildAsk::mutable_guildcreed() {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  return guildcreed_;
}
inline ::std::string* GuildRpcCreateGuildAsk::release_guildcreed() {
  clear_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildcreed_;
    guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcCreateGuildAsk::set_allocated_guildcreed(::std::string* guildcreed) {
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreed_;
  }
  if (guildcreed) {
    set_has_guildcreed();
    guildcreed_ = guildcreed;
  } else {
    clear_has_guildcreed();
    guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcCreateGuildReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcCreateGuildReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcCreateGuildReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcCreateGuildReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcCreateGuildReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcCreateGuildReply::result() const {
  return result_;
}
inline void GuildRpcCreateGuildReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .GuildInfo GuildBaseInfo = 2;
inline bool GuildRpcCreateGuildReply::has_guildbaseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcCreateGuildReply::set_has_guildbaseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcCreateGuildReply::clear_has_guildbaseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcCreateGuildReply::clear_guildbaseinfo() {
  if (guildbaseinfo_ != NULL) guildbaseinfo_->::GuildInfo::Clear();
  clear_has_guildbaseinfo();
}
inline const ::GuildInfo& GuildRpcCreateGuildReply::guildbaseinfo() const {
  return guildbaseinfo_ != NULL ? *guildbaseinfo_ : *default_instance_->guildbaseinfo_;
}
inline ::GuildInfo* GuildRpcCreateGuildReply::mutable_guildbaseinfo() {
  set_has_guildbaseinfo();
  if (guildbaseinfo_ == NULL) guildbaseinfo_ = new ::GuildInfo;
  return guildbaseinfo_;
}
inline ::GuildInfo* GuildRpcCreateGuildReply::release_guildbaseinfo() {
  clear_has_guildbaseinfo();
  ::GuildInfo* temp = guildbaseinfo_;
  guildbaseinfo_ = NULL;
  return temp;
}
inline void GuildRpcCreateGuildReply::set_allocated_guildbaseinfo(::GuildInfo* guildbaseinfo) {
  delete guildbaseinfo_;
  guildbaseinfo_ = guildbaseinfo;
  if (guildbaseinfo) {
    set_has_guildbaseinfo();
  } else {
    clear_has_guildbaseinfo();
  }
}

// -------------------------------------------------------------------

// GuildRpcChangeFlagAsk

// optional int32 FlagConfigID = 1 [default = -1];
inline bool GuildRpcChangeFlagAsk::has_flagconfigid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcChangeFlagAsk::set_has_flagconfigid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcChangeFlagAsk::clear_has_flagconfigid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcChangeFlagAsk::clear_flagconfigid() {
  flagconfigid_ = -1;
  clear_has_flagconfigid();
}
inline ::google::protobuf::int32 GuildRpcChangeFlagAsk::flagconfigid() const {
  return flagconfigid_;
}
inline void GuildRpcChangeFlagAsk::set_flagconfigid(::google::protobuf::int32 value) {
  set_has_flagconfigid();
  flagconfigid_ = value;
}

// -------------------------------------------------------------------

// GuildRpcChangeFlagReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcChangeFlagReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcChangeFlagReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcChangeFlagReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcChangeFlagReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcChangeFlagReply::result() const {
  return result_;
}
inline void GuildRpcChangeFlagReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 GuildMoney = 2 [default = -1];
inline bool GuildRpcChangeFlagReply::has_guildmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcChangeFlagReply::set_has_guildmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcChangeFlagReply::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcChangeFlagReply::clear_guildmoney() {
  guildmoney_ = -1;
  clear_has_guildmoney();
}
inline ::google::protobuf::int32 GuildRpcChangeFlagReply::guildmoney() const {
  return guildmoney_;
}
inline void GuildRpcChangeFlagReply::set_guildmoney(::google::protobuf::int32 value) {
  set_has_guildmoney();
  guildmoney_ = value;
}

// optional .GuildFlag Flag = 5;
inline bool GuildRpcChangeFlagReply::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcChangeFlagReply::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcChangeFlagReply::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcChangeFlagReply::clear_flag() {
  if (flag_ != NULL) flag_->::GuildFlag::Clear();
  clear_has_flag();
}
inline const ::GuildFlag& GuildRpcChangeFlagReply::flag() const {
  return flag_ != NULL ? *flag_ : *default_instance_->flag_;
}
inline ::GuildFlag* GuildRpcChangeFlagReply::mutable_flag() {
  set_has_flag();
  if (flag_ == NULL) flag_ = new ::GuildFlag;
  return flag_;
}
inline ::GuildFlag* GuildRpcChangeFlagReply::release_flag() {
  clear_has_flag();
  ::GuildFlag* temp = flag_;
  flag_ = NULL;
  return temp;
}
inline void GuildRpcChangeFlagReply::set_allocated_flag(::GuildFlag* flag) {
  delete flag_;
  flag_ = flag;
  if (flag) {
    set_has_flag();
  } else {
    clear_has_flag();
  }
}

// -------------------------------------------------------------------

// GuildRpcGuildChangeNameAsk

// optional string GuildNewName = 1;
inline bool GuildRpcGuildChangeNameAsk::has_guildnewname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcGuildChangeNameAsk::set_has_guildnewname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcGuildChangeNameAsk::clear_has_guildnewname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcGuildChangeNameAsk::clear_guildnewname() {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    guildnewname_->clear();
  }
  clear_has_guildnewname();
}
inline const ::std::string& GuildRpcGuildChangeNameAsk::guildnewname() const {
  return *guildnewname_;
}
inline void GuildRpcGuildChangeNameAsk::set_guildnewname(const ::std::string& value) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(value);
}
inline void GuildRpcGuildChangeNameAsk::set_guildnewname(const char* value) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(value);
}
inline void GuildRpcGuildChangeNameAsk::set_guildnewname(const char* value, size_t size) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcGuildChangeNameAsk::mutable_guildnewname() {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  return guildnewname_;
}
inline ::std::string* GuildRpcGuildChangeNameAsk::release_guildnewname() {
  clear_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildnewname_;
    guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcGuildChangeNameAsk::set_allocated_guildnewname(::std::string* guildnewname) {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildnewname_;
  }
  if (guildnewname) {
    set_has_guildnewname();
    guildnewname_ = guildnewname;
  } else {
    clear_has_guildnewname();
    guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcGuildChangeNameReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcGuildChangeNameReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcGuildChangeNameReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcGuildChangeNameReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcGuildChangeNameReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcGuildChangeNameReply::result() const {
  return result_;
}
inline void GuildRpcGuildChangeNameReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string GuildNewName = 2;
inline bool GuildRpcGuildChangeNameReply::has_guildnewname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcGuildChangeNameReply::set_has_guildnewname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcGuildChangeNameReply::clear_has_guildnewname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcGuildChangeNameReply::clear_guildnewname() {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    guildnewname_->clear();
  }
  clear_has_guildnewname();
}
inline const ::std::string& GuildRpcGuildChangeNameReply::guildnewname() const {
  return *guildnewname_;
}
inline void GuildRpcGuildChangeNameReply::set_guildnewname(const ::std::string& value) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(value);
}
inline void GuildRpcGuildChangeNameReply::set_guildnewname(const char* value) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(value);
}
inline void GuildRpcGuildChangeNameReply::set_guildnewname(const char* value, size_t size) {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  guildnewname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcGuildChangeNameReply::mutable_guildnewname() {
  set_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    guildnewname_ = new ::std::string;
  }
  return guildnewname_;
}
inline ::std::string* GuildRpcGuildChangeNameReply::release_guildnewname() {
  clear_has_guildnewname();
  if (guildnewname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildnewname_;
    guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcGuildChangeNameReply::set_allocated_guildnewname(::std::string* guildnewname) {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildnewname_;
  }
  if (guildnewname) {
    set_has_guildnewname();
    guildnewname_ = guildnewname;
  } else {
    clear_has_guildnewname();
    guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GuildOldName = 3;
inline bool GuildRpcGuildChangeNameReply::has_guildoldname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcGuildChangeNameReply::set_has_guildoldname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcGuildChangeNameReply::clear_has_guildoldname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcGuildChangeNameReply::clear_guildoldname() {
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    guildoldname_->clear();
  }
  clear_has_guildoldname();
}
inline const ::std::string& GuildRpcGuildChangeNameReply::guildoldname() const {
  return *guildoldname_;
}
inline void GuildRpcGuildChangeNameReply::set_guildoldname(const ::std::string& value) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(value);
}
inline void GuildRpcGuildChangeNameReply::set_guildoldname(const char* value) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(value);
}
inline void GuildRpcGuildChangeNameReply::set_guildoldname(const char* value, size_t size) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcGuildChangeNameReply::mutable_guildoldname() {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  return guildoldname_;
}
inline ::std::string* GuildRpcGuildChangeNameReply::release_guildoldname() {
  clear_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildoldname_;
    guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcGuildChangeNameReply::set_allocated_guildoldname(::std::string* guildoldname) {
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildoldname_;
  }
  if (guildoldname) {
    set_has_guildoldname();
    guildoldname_ = guildoldname;
  } else {
    clear_has_guildoldname();
    guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcAskGuildMemberAsk

// -------------------------------------------------------------------

// GuildRpcAskGuildMemberReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcAskGuildMemberReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcAskGuildMemberReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcAskGuildMemberReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcAskGuildMemberReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcAskGuildMemberReply::result() const {
  return result_;
}
inline void GuildRpcAskGuildMemberReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GuildMemberInfo GuildMemberInfoList = 2;
inline int GuildRpcAskGuildMemberReply::guildmemberinfolist_size() const {
  return guildmemberinfolist_.size();
}
inline void GuildRpcAskGuildMemberReply::clear_guildmemberinfolist() {
  guildmemberinfolist_.Clear();
}
inline const ::GuildMemberInfo& GuildRpcAskGuildMemberReply::guildmemberinfolist(int index) const {
  return guildmemberinfolist_.Get(index);
}
inline ::GuildMemberInfo* GuildRpcAskGuildMemberReply::mutable_guildmemberinfolist(int index) {
  return guildmemberinfolist_.Mutable(index);
}
inline ::GuildMemberInfo* GuildRpcAskGuildMemberReply::add_guildmemberinfolist() {
  return guildmemberinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >&
GuildRpcAskGuildMemberReply::guildmemberinfolist() const {
  return guildmemberinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildMemberInfo >*
GuildRpcAskGuildMemberReply::mutable_guildmemberinfolist() {
  return &guildmemberinfolist_;
}

// optional int32 OnlineCount = 3 [default = -1];
inline bool GuildRpcAskGuildMemberReply::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcAskGuildMemberReply::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcAskGuildMemberReply::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcAskGuildMemberReply::clear_onlinecount() {
  onlinecount_ = -1;
  clear_has_onlinecount();
}
inline ::google::protobuf::int32 GuildRpcAskGuildMemberReply::onlinecount() const {
  return onlinecount_;
}
inline void GuildRpcAskGuildMemberReply::set_onlinecount(::google::protobuf::int32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
}

// optional int32 MemberCount = 4 [default = -1];
inline bool GuildRpcAskGuildMemberReply::has_membercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcAskGuildMemberReply::set_has_membercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcAskGuildMemberReply::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcAskGuildMemberReply::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
inline ::google::protobuf::int32 GuildRpcAskGuildMemberReply::membercount() const {
  return membercount_;
}
inline void GuildRpcAskGuildMemberReply::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
}

// -------------------------------------------------------------------

// GuildRpcQuiteGuildAsk

// -------------------------------------------------------------------

// GuildRpcQuiteGuildReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcQuiteGuildReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcQuiteGuildReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcQuiteGuildReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcQuiteGuildReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcQuiteGuildReply::result() const {
  return result_;
}
inline void GuildRpcQuiteGuildReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GuildRpcSetOfficeAsk

// optional uint64 Guid = 1 [default = 0];
inline bool GuildRpcSetOfficeAsk::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSetOfficeAsk::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSetOfficeAsk::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSetOfficeAsk::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildRpcSetOfficeAsk::guid() const {
  return guid_;
}
inline void GuildRpcSetOfficeAsk::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional uint64 TargetGuid = 2 [default = 0];
inline bool GuildRpcSetOfficeAsk::has_targetguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcSetOfficeAsk::set_has_targetguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcSetOfficeAsk::clear_has_targetguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcSetOfficeAsk::clear_targetguid() {
  targetguid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetguid();
}
inline ::google::protobuf::uint64 GuildRpcSetOfficeAsk::targetguid() const {
  return targetguid_;
}
inline void GuildRpcSetOfficeAsk::set_targetguid(::google::protobuf::uint64 value) {
  set_has_targetguid();
  targetguid_ = value;
}

// optional int32 OfficeType = 3 [default = -1];
inline bool GuildRpcSetOfficeAsk::has_officetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcSetOfficeAsk::set_has_officetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcSetOfficeAsk::clear_has_officetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcSetOfficeAsk::clear_officetype() {
  officetype_ = -1;
  clear_has_officetype();
}
inline ::google::protobuf::int32 GuildRpcSetOfficeAsk::officetype() const {
  return officetype_;
}
inline void GuildRpcSetOfficeAsk::set_officetype(::google::protobuf::int32 value) {
  set_has_officetype();
  officetype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcSetOfficeReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcSetOfficeReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcSetOfficeReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcSetOfficeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcSetOfficeReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcSetOfficeReply::result() const {
  return result_;
}
inline void GuildRpcSetOfficeReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 SelfOfficeType = 2 [default = -1];
inline bool GuildRpcSetOfficeReply::has_selfofficetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcSetOfficeReply::set_has_selfofficetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcSetOfficeReply::clear_has_selfofficetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcSetOfficeReply::clear_selfofficetype() {
  selfofficetype_ = -1;
  clear_has_selfofficetype();
}
inline ::google::protobuf::int32 GuildRpcSetOfficeReply::selfofficetype() const {
  return selfofficetype_;
}
inline void GuildRpcSetOfficeReply::set_selfofficetype(::google::protobuf::int32 value) {
  set_has_selfofficetype();
  selfofficetype_ = value;
}

// optional int32 TargetOfficeType = 4 [default = -1];
inline bool GuildRpcSetOfficeReply::has_targetofficetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcSetOfficeReply::set_has_targetofficetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcSetOfficeReply::clear_has_targetofficetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcSetOfficeReply::clear_targetofficetype() {
  targetofficetype_ = -1;
  clear_has_targetofficetype();
}
inline ::google::protobuf::int32 GuildRpcSetOfficeReply::targetofficetype() const {
  return targetofficetype_;
}
inline void GuildRpcSetOfficeReply::set_targetofficetype(::google::protobuf::int32 value) {
  set_has_targetofficetype();
  targetofficetype_ = value;
}

// optional uint64 TargetGuid = 5 [default = 0];
inline bool GuildRpcSetOfficeReply::has_targetguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcSetOfficeReply::set_has_targetguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcSetOfficeReply::clear_has_targetguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcSetOfficeReply::clear_targetguid() {
  targetguid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetguid();
}
inline ::google::protobuf::uint64 GuildRpcSetOfficeReply::targetguid() const {
  return targetguid_;
}
inline void GuildRpcSetOfficeReply::set_targetguid(::google::protobuf::uint64 value) {
  set_has_targetguid();
  targetguid_ = value;
}

// -------------------------------------------------------------------

// GuildRpcOfficeChangeNotify

// optional int32 OfficeType = 1 [default = -1];
inline bool GuildRpcOfficeChangeNotify::has_officetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcOfficeChangeNotify::set_has_officetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcOfficeChangeNotify::clear_has_officetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcOfficeChangeNotify::clear_officetype() {
  officetype_ = -1;
  clear_has_officetype();
}
inline ::google::protobuf::int32 GuildRpcOfficeChangeNotify::officetype() const {
  return officetype_;
}
inline void GuildRpcOfficeChangeNotify::set_officetype(::google::protobuf::int32 value) {
  set_has_officetype();
  officetype_ = value;
}

// optional uint64 Optguid = 2 [default = 0];
inline bool GuildRpcOfficeChangeNotify::has_optguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcOfficeChangeNotify::set_has_optguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcOfficeChangeNotify::clear_has_optguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcOfficeChangeNotify::clear_optguid() {
  optguid_ = GOOGLE_ULONGLONG(0);
  clear_has_optguid();
}
inline ::google::protobuf::uint64 GuildRpcOfficeChangeNotify::optguid() const {
  return optguid_;
}
inline void GuildRpcOfficeChangeNotify::set_optguid(::google::protobuf::uint64 value) {
  set_has_optguid();
  optguid_ = value;
}

// optional int32 OptOfficeType = 3 [default = -1];
inline bool GuildRpcOfficeChangeNotify::has_optofficetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcOfficeChangeNotify::set_has_optofficetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcOfficeChangeNotify::clear_has_optofficetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcOfficeChangeNotify::clear_optofficetype() {
  optofficetype_ = -1;
  clear_has_optofficetype();
}
inline ::google::protobuf::int32 GuildRpcOfficeChangeNotify::optofficetype() const {
  return optofficetype_;
}
inline void GuildRpcOfficeChangeNotify::set_optofficetype(::google::protobuf::int32 value) {
  set_has_optofficetype();
  optofficetype_ = value;
}

// -------------------------------------------------------------------

// GuildRpcChangeCreedAsk

// optional string Content = 1;
inline bool GuildRpcChangeCreedAsk::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcChangeCreedAsk::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcChangeCreedAsk::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcChangeCreedAsk::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GuildRpcChangeCreedAsk::content() const {
  return *content_;
}
inline void GuildRpcChangeCreedAsk::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GuildRpcChangeCreedAsk::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GuildRpcChangeCreedAsk::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcChangeCreedAsk::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* GuildRpcChangeCreedAsk::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcChangeCreedAsk::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcChangeCreedReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcChangeCreedReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcChangeCreedReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcChangeCreedReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcChangeCreedReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcChangeCreedReply::result() const {
  return result_;
}
inline void GuildRpcChangeCreedReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string Content = 2;
inline bool GuildRpcChangeCreedReply::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcChangeCreedReply::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcChangeCreedReply::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcChangeCreedReply::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GuildRpcChangeCreedReply::content() const {
  return *content_;
}
inline void GuildRpcChangeCreedReply::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GuildRpcChangeCreedReply::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GuildRpcChangeCreedReply::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRpcChangeCreedReply::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* GuildRpcChangeCreedReply::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRpcChangeCreedReply::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildRpcForbiddenChatAsk

// optional int64 Playerguid = 1 [default = -1];
inline bool GuildRpcForbiddenChatAsk::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcForbiddenChatAsk::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcForbiddenChatAsk::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcForbiddenChatAsk::clear_playerguid() {
  playerguid_ = GOOGLE_LONGLONG(-1);
  clear_has_playerguid();
}
inline ::google::protobuf::int64 GuildRpcForbiddenChatAsk::playerguid() const {
  return playerguid_;
}
inline void GuildRpcForbiddenChatAsk::set_playerguid(::google::protobuf::int64 value) {
  set_has_playerguid();
  playerguid_ = value;
}

// optional bool IsForbidden = 2 [default = false];
inline bool GuildRpcForbiddenChatAsk::has_isforbidden() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcForbiddenChatAsk::set_has_isforbidden() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcForbiddenChatAsk::clear_has_isforbidden() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcForbiddenChatAsk::clear_isforbidden() {
  isforbidden_ = false;
  clear_has_isforbidden();
}
inline bool GuildRpcForbiddenChatAsk::isforbidden() const {
  return isforbidden_;
}
inline void GuildRpcForbiddenChatAsk::set_isforbidden(bool value) {
  set_has_isforbidden();
  isforbidden_ = value;
}

// -------------------------------------------------------------------

// GuildRpcForbiddenChatReply

// optional int32 Result = 1 [default = -1];
inline bool GuildRpcForbiddenChatReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcForbiddenChatReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcForbiddenChatReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcForbiddenChatReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 GuildRpcForbiddenChatReply::result() const {
  return result_;
}
inline void GuildRpcForbiddenChatReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 Playerguid = 2 [default = -1];
inline bool GuildRpcForbiddenChatReply::has_playerguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcForbiddenChatReply::set_has_playerguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcForbiddenChatReply::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcForbiddenChatReply::clear_playerguid() {
  playerguid_ = GOOGLE_LONGLONG(-1);
  clear_has_playerguid();
}
inline ::google::protobuf::int64 GuildRpcForbiddenChatReply::playerguid() const {
  return playerguid_;
}
inline void GuildRpcForbiddenChatReply::set_playerguid(::google::protobuf::int64 value) {
  set_has_playerguid();
  playerguid_ = value;
}

// optional bool IsForbidden = 3 [default = false];
inline bool GuildRpcForbiddenChatReply::has_isforbidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcForbiddenChatReply::set_has_isforbidden() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcForbiddenChatReply::clear_has_isforbidden() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcForbiddenChatReply::clear_isforbidden() {
  isforbidden_ = false;
  clear_has_isforbidden();
}
inline bool GuildRpcForbiddenChatReply::isforbidden() const {
  return isforbidden_;
}
inline void GuildRpcForbiddenChatReply::set_isforbidden(bool value) {
  set_has_isforbidden();
  isforbidden_ = value;
}

// -------------------------------------------------------------------

// GuildRpcBuildLvUpCompleteNotify

// optional .GuildBuildingInfo GuildBuildingInfo = 2;
inline bool GuildRpcBuildLvUpCompleteNotify::has_guildbuildinginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcBuildLvUpCompleteNotify::set_has_guildbuildinginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcBuildLvUpCompleteNotify::clear_has_guildbuildinginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcBuildLvUpCompleteNotify::clear_guildbuildinginfo() {
  if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
  clear_has_guildbuildinginfo();
}
inline const ::GuildBuildingInfo& GuildRpcBuildLvUpCompleteNotify::guildbuildinginfo() const {
  return guildbuildinginfo_ != NULL ? *guildbuildinginfo_ : *default_instance_->guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildLvUpCompleteNotify::mutable_guildbuildinginfo() {
  set_has_guildbuildinginfo();
  if (guildbuildinginfo_ == NULL) guildbuildinginfo_ = new ::GuildBuildingInfo;
  return guildbuildinginfo_;
}
inline ::GuildBuildingInfo* GuildRpcBuildLvUpCompleteNotify::release_guildbuildinginfo() {
  clear_has_guildbuildinginfo();
  ::GuildBuildingInfo* temp = guildbuildinginfo_;
  guildbuildinginfo_ = NULL;
  return temp;
}
inline void GuildRpcBuildLvUpCompleteNotify::set_allocated_guildbuildinginfo(::GuildBuildingInfo* guildbuildinginfo) {
  delete guildbuildinginfo_;
  guildbuildinginfo_ = guildbuildinginfo;
  if (guildbuildinginfo) {
    set_has_guildbuildinginfo();
  } else {
    clear_has_guildbuildinginfo();
  }
}

// -------------------------------------------------------------------

// GuildRpcGuildCurrencyChangeNotify

// optional int32 GuildProsper = 1 [default = -1];
inline bool GuildRpcGuildCurrencyChangeNotify::has_guildprosper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_has_guildprosper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_has_guildprosper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_guildprosper() {
  guildprosper_ = -1;
  clear_has_guildprosper();
}
inline ::google::protobuf::int32 GuildRpcGuildCurrencyChangeNotify::guildprosper() const {
  return guildprosper_;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_guildprosper(::google::protobuf::int32 value) {
  set_has_guildprosper();
  guildprosper_ = value;
}

// optional int32 GuildMoney = 2 [default = -1];
inline bool GuildRpcGuildCurrencyChangeNotify::has_guildmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_has_guildmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_guildmoney() {
  guildmoney_ = -1;
  clear_has_guildmoney();
}
inline ::google::protobuf::int32 GuildRpcGuildCurrencyChangeNotify::guildmoney() const {
  return guildmoney_;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_guildmoney(::google::protobuf::int32 value) {
  set_has_guildmoney();
  guildmoney_ = value;
}

// optional int32 GuildResource = 3 [default = -1];
inline bool GuildRpcGuildCurrencyChangeNotify::has_guildresource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_has_guildresource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_has_guildresource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_guildresource() {
  guildresource_ = -1;
  clear_has_guildresource();
}
inline ::google::protobuf::int32 GuildRpcGuildCurrencyChangeNotify::guildresource() const {
  return guildresource_;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_guildresource(::google::protobuf::int32 value) {
  set_has_guildresource();
  guildresource_ = value;
}

// optional int32 GuildWelfare = 4 [default = -1];
inline bool GuildRpcGuildCurrencyChangeNotify::has_guildwelfare() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_has_guildwelfare() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_has_guildwelfare() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_guildwelfare() {
  guildwelfare_ = -1;
  clear_has_guildwelfare();
}
inline ::google::protobuf::int32 GuildRpcGuildCurrencyChangeNotify::guildwelfare() const {
  return guildwelfare_;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_guildwelfare(::google::protobuf::int32 value) {
  set_has_guildwelfare();
  guildwelfare_ = value;
}

// optional int32 MaintainCost = 5 [default = -1];
inline bool GuildRpcGuildCurrencyChangeNotify::has_maintaincost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_has_maintaincost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_has_maintaincost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildRpcGuildCurrencyChangeNotify::clear_maintaincost() {
  maintaincost_ = -1;
  clear_has_maintaincost();
}
inline ::google::protobuf::int32 GuildRpcGuildCurrencyChangeNotify::maintaincost() const {
  return maintaincost_;
}
inline void GuildRpcGuildCurrencyChangeNotify::set_maintaincost(::google::protobuf::int32 value) {
  set_has_maintaincost();
  maintaincost_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GuildRpc_2eproto__INCLUDED
