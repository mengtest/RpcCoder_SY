// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GuildRpcGuildBaseInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcGuildBaseInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcGuildBaseInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcGuildBaseInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcKickMemberAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcKickMemberAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcKickMemberReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcKickMemberReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcKickMemberNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcKickMemberNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskVacationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskVacationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskVacationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskVacationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcVacationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcVacationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcReplyVacationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcReplyVacationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskApplyListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskApplyListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskApplyListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskApplyListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyGuildOperationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyGuildOperationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyGuildOperationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyGuildOperationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyGuildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyGuildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyLimitSettingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyLimitSettingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyLimitSettingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyLimitSettingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskJurisdictionListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskJurisdictionListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskJurisdictionListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskJurisdictionListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSetJurisdictionAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSetJurisdictionAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSetJurisdictionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSetJurisdictionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskVacationListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskVacationListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskVacationListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskVacationListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcVacationGuildOperationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcVacationGuildOperationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcVacationGuildOperationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcVacationGuildOperationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcApplyGuildToOfficeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcApplyGuildToOfficeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskBuildingInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskBuildingInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskBuildingInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskBuildingInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildingLvUpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildingLvUpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildingLvUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildingLvUpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildingLvSpeedUpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildingLvSpeedUpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildingLvSpeedUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildingLvSpeedUpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskBuildingContributionListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskBuildingContributionListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskBuildingContributionListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskBuildingContributionListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildingCanLvUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildingCanLvUpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildEventListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildEventListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildEventListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildEventListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildInfoListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildInfoListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildInfoListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildInfoListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSearchGuildAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSearchGuildAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSearchGuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSearchGuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcJoinGuildAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcJoinGuildAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcJoinGuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcJoinGuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcCreateGuildAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcCreateGuildAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcCreateGuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcCreateGuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcChangeFlagAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcChangeFlagAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcChangeFlagReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcChangeFlagReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcGuildChangeNameAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcGuildChangeNameAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcGuildChangeNameReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcGuildChangeNameReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildMemberAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildMemberAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcAskGuildMemberReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcAskGuildMemberReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcQuiteGuildAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcQuiteGuildAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcQuiteGuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcQuiteGuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSetOfficeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSetOfficeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcSetOfficeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcSetOfficeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcOfficeChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcOfficeChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcChangeCreedAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcChangeCreedAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcChangeCreedReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcChangeCreedReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcForbiddenChatAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcForbiddenChatAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcForbiddenChatReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcForbiddenChatReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcBuildLvUpCompleteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcBuildLvUpCompleteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRpcGuildCurrencyChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRpcGuildCurrencyChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildRpc_2eproto() {
  protobuf_AddDesc_GuildRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildRpc.proto");
  GOOGLE_CHECK(file != NULL);
  GuildRpcGuildBaseInfoAsk_descriptor_ = file->message_type(0);
  static const int GuildRpcGuildBaseInfoAsk_offsets_[1] = {
  };
  GuildRpcGuildBaseInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcGuildBaseInfoAsk_descriptor_,
      GuildRpcGuildBaseInfoAsk::default_instance_,
      GuildRpcGuildBaseInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcGuildBaseInfoAsk));
  GuildRpcGuildBaseInfoReply_descriptor_ = file->message_type(1);
  static const int GuildRpcGuildBaseInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoReply, guildbaseinfo_),
  };
  GuildRpcGuildBaseInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcGuildBaseInfoReply_descriptor_,
      GuildRpcGuildBaseInfoReply::default_instance_,
      GuildRpcGuildBaseInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildBaseInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcGuildBaseInfoReply));
  GuildRpcKickMemberAsk_descriptor_ = file->message_type(2);
  static const int GuildRpcKickMemberAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberAsk, kickreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberAsk, reasontype_),
  };
  GuildRpcKickMemberAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcKickMemberAsk_descriptor_,
      GuildRpcKickMemberAsk::default_instance_,
      GuildRpcKickMemberAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcKickMemberAsk));
  GuildRpcKickMemberReply_descriptor_ = file->message_type(3);
  static const int GuildRpcKickMemberReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, membercount_),
  };
  GuildRpcKickMemberReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcKickMemberReply_descriptor_,
      GuildRpcKickMemberReply::default_instance_,
      GuildRpcKickMemberReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcKickMemberReply));
  GuildRpcKickMemberNotifyNotify_descriptor_ = file->message_type(4);
  static const int GuildRpcKickMemberNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberNotifyNotify, kickreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberNotifyNotify, reasontype_),
  };
  GuildRpcKickMemberNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcKickMemberNotifyNotify_descriptor_,
      GuildRpcKickMemberNotifyNotify::default_instance_,
      GuildRpcKickMemberNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcKickMemberNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcKickMemberNotifyNotify));
  GuildRpcAskVacationAsk_descriptor_ = file->message_type(5);
  static const int GuildRpcAskVacationAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationAsk, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationAsk, type_),
  };
  GuildRpcAskVacationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskVacationAsk_descriptor_,
      GuildRpcAskVacationAsk::default_instance_,
      GuildRpcAskVacationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskVacationAsk));
  GuildRpcAskVacationReply_descriptor_ = file->message_type(6);
  static const int GuildRpcAskVacationReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationReply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationReply, type_),
  };
  GuildRpcAskVacationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskVacationReply_descriptor_,
      GuildRpcAskVacationReply::default_instance_,
      GuildRpcAskVacationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskVacationReply));
  GuildRpcVacationNotify_descriptor_ = file->message_type(7);
  static const int GuildRpcVacationNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationNotify, vacationinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationNotify, type_),
  };
  GuildRpcVacationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcVacationNotify_descriptor_,
      GuildRpcVacationNotify::default_instance_,
      GuildRpcVacationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcVacationNotify));
  GuildRpcReplyVacationNotify_descriptor_ = file->message_type(8);
  static const int GuildRpcReplyVacationNotify_offsets_[1] = {
  };
  GuildRpcReplyVacationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcReplyVacationNotify_descriptor_,
      GuildRpcReplyVacationNotify::default_instance_,
      GuildRpcReplyVacationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcReplyVacationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcReplyVacationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcReplyVacationNotify));
  GuildRpcAskApplyListAsk_descriptor_ = file->message_type(9);
  static const int GuildRpcAskApplyListAsk_offsets_[1] = {
  };
  GuildRpcAskApplyListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskApplyListAsk_descriptor_,
      GuildRpcAskApplyListAsk::default_instance_,
      GuildRpcAskApplyListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskApplyListAsk));
  GuildRpcAskApplyListReply_descriptor_ = file->message_type(10);
  static const int GuildRpcAskApplyListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListReply, guildmembertinyinfolist_),
  };
  GuildRpcAskApplyListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskApplyListReply_descriptor_,
      GuildRpcAskApplyListReply::default_instance_,
      GuildRpcAskApplyListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskApplyListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskApplyListReply));
  GuildRpcApplyGuildOperationAsk_descriptor_ = file->message_type(11);
  static const int GuildRpcApplyGuildOperationAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationAsk, operation_),
  };
  GuildRpcApplyGuildOperationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyGuildOperationAsk_descriptor_,
      GuildRpcApplyGuildOperationAsk::default_instance_,
      GuildRpcApplyGuildOperationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyGuildOperationAsk));
  GuildRpcApplyGuildOperationReply_descriptor_ = file->message_type(12);
  static const int GuildRpcApplyGuildOperationReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, memberinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, membercount_),
  };
  GuildRpcApplyGuildOperationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyGuildOperationReply_descriptor_,
      GuildRpcApplyGuildOperationReply::default_instance_,
      GuildRpcApplyGuildOperationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildOperationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyGuildOperationReply));
  GuildRpcApplyGuildNotify_descriptor_ = file->message_type(13);
  static const int GuildRpcApplyGuildNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildNotify, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildNotify, guildname_),
  };
  GuildRpcApplyGuildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyGuildNotify_descriptor_,
      GuildRpcApplyGuildNotify::default_instance_,
      GuildRpcApplyGuildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyGuildNotify));
  GuildRpcApplyLimitSettingAsk_descriptor_ = file->message_type(14);
  static const int GuildRpcApplyLimitSettingAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingAsk, isautojoin_),
  };
  GuildRpcApplyLimitSettingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyLimitSettingAsk_descriptor_,
      GuildRpcApplyLimitSettingAsk::default_instance_,
      GuildRpcApplyLimitSettingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyLimitSettingAsk));
  GuildRpcApplyLimitSettingReply_descriptor_ = file->message_type(15);
  static const int GuildRpcApplyLimitSettingReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingReply, isautojoin_),
  };
  GuildRpcApplyLimitSettingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyLimitSettingReply_descriptor_,
      GuildRpcApplyLimitSettingReply::default_instance_,
      GuildRpcApplyLimitSettingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyLimitSettingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyLimitSettingReply));
  GuildRpcAskJurisdictionListAsk_descriptor_ = file->message_type(16);
  static const int GuildRpcAskJurisdictionListAsk_offsets_[1] = {
  };
  GuildRpcAskJurisdictionListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskJurisdictionListAsk_descriptor_,
      GuildRpcAskJurisdictionListAsk::default_instance_,
      GuildRpcAskJurisdictionListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskJurisdictionListAsk));
  GuildRpcAskJurisdictionListReply_descriptor_ = file->message_type(17);
  static const int GuildRpcAskJurisdictionListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListReply, jurisdictionlist_),
  };
  GuildRpcAskJurisdictionListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskJurisdictionListReply_descriptor_,
      GuildRpcAskJurisdictionListReply::default_instance_,
      GuildRpcAskJurisdictionListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskJurisdictionListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskJurisdictionListReply));
  GuildRpcSetJurisdictionAsk_descriptor_ = file->message_type(18);
  static const int GuildRpcSetJurisdictionAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionAsk, setlist_),
  };
  GuildRpcSetJurisdictionAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSetJurisdictionAsk_descriptor_,
      GuildRpcSetJurisdictionAsk::default_instance_,
      GuildRpcSetJurisdictionAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSetJurisdictionAsk));
  GuildRpcSetJurisdictionReply_descriptor_ = file->message_type(19);
  static const int GuildRpcSetJurisdictionReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionReply, setlist_),
  };
  GuildRpcSetJurisdictionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSetJurisdictionReply_descriptor_,
      GuildRpcSetJurisdictionReply::default_instance_,
      GuildRpcSetJurisdictionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetJurisdictionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSetJurisdictionReply));
  GuildRpcAskVacationListAsk_descriptor_ = file->message_type(20);
  static const int GuildRpcAskVacationListAsk_offsets_[1] = {
  };
  GuildRpcAskVacationListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskVacationListAsk_descriptor_,
      GuildRpcAskVacationListAsk::default_instance_,
      GuildRpcAskVacationListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskVacationListAsk));
  GuildRpcAskVacationListReply_descriptor_ = file->message_type(21);
  static const int GuildRpcAskVacationListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListReply, vacationlist_),
  };
  GuildRpcAskVacationListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskVacationListReply_descriptor_,
      GuildRpcAskVacationListReply::default_instance_,
      GuildRpcAskVacationListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskVacationListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskVacationListReply));
  GuildRpcVacationGuildOperationAsk_descriptor_ = file->message_type(22);
  static const int GuildRpcVacationGuildOperationAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationAsk, operation_),
  };
  GuildRpcVacationGuildOperationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcVacationGuildOperationAsk_descriptor_,
      GuildRpcVacationGuildOperationAsk::default_instance_,
      GuildRpcVacationGuildOperationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcVacationGuildOperationAsk));
  GuildRpcVacationGuildOperationReply_descriptor_ = file->message_type(23);
  static const int GuildRpcVacationGuildOperationReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationReply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationReply, operation_),
  };
  GuildRpcVacationGuildOperationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcVacationGuildOperationReply_descriptor_,
      GuildRpcVacationGuildOperationReply::default_instance_,
      GuildRpcVacationGuildOperationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcVacationGuildOperationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcVacationGuildOperationReply));
  GuildRpcApplyGuildToOfficeNotify_descriptor_ = file->message_type(24);
  static const int GuildRpcApplyGuildToOfficeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildToOfficeNotify, guildmembertinyinfo_),
  };
  GuildRpcApplyGuildToOfficeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcApplyGuildToOfficeNotify_descriptor_,
      GuildRpcApplyGuildToOfficeNotify::default_instance_,
      GuildRpcApplyGuildToOfficeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildToOfficeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcApplyGuildToOfficeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcApplyGuildToOfficeNotify));
  GuildRpcAskBuildingInfoAsk_descriptor_ = file->message_type(25);
  static const int GuildRpcAskBuildingInfoAsk_offsets_[1] = {
  };
  GuildRpcAskBuildingInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskBuildingInfoAsk_descriptor_,
      GuildRpcAskBuildingInfoAsk::default_instance_,
      GuildRpcAskBuildingInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskBuildingInfoAsk));
  GuildRpcAskBuildingInfoReply_descriptor_ = file->message_type(26);
  static const int GuildRpcAskBuildingInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoReply, buildinginfolist_),
  };
  GuildRpcAskBuildingInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskBuildingInfoReply_descriptor_,
      GuildRpcAskBuildingInfoReply::default_instance_,
      GuildRpcAskBuildingInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskBuildingInfoReply));
  GuildRpcBuildingLvUpAsk_descriptor_ = file->message_type(27);
  static const int GuildRpcBuildingLvUpAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpAsk, buildingtype_),
  };
  GuildRpcBuildingLvUpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildingLvUpAsk_descriptor_,
      GuildRpcBuildingLvUpAsk::default_instance_,
      GuildRpcBuildingLvUpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildingLvUpAsk));
  GuildRpcBuildingLvUpReply_descriptor_ = file->message_type(28);
  static const int GuildRpcBuildingLvUpReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, guildbuildinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, guildresource_),
  };
  GuildRpcBuildingLvUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildingLvUpReply_descriptor_,
      GuildRpcBuildingLvUpReply::default_instance_,
      GuildRpcBuildingLvUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildingLvUpReply));
  GuildRpcBuildingLvSpeedUpAsk_descriptor_ = file->message_type(29);
  static const int GuildRpcBuildingLvSpeedUpAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpAsk, buildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpAsk, time_),
  };
  GuildRpcBuildingLvSpeedUpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildingLvSpeedUpAsk_descriptor_,
      GuildRpcBuildingLvSpeedUpAsk::default_instance_,
      GuildRpcBuildingLvSpeedUpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildingLvSpeedUpAsk));
  GuildRpcBuildingLvSpeedUpReply_descriptor_ = file->message_type(30);
  static const int GuildRpcBuildingLvSpeedUpReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpReply, guildbuildinginfo_),
  };
  GuildRpcBuildingLvSpeedUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildingLvSpeedUpReply_descriptor_,
      GuildRpcBuildingLvSpeedUpReply::default_instance_,
      GuildRpcBuildingLvSpeedUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingLvSpeedUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildingLvSpeedUpReply));
  GuildRpcAskBuildingContributionListAsk_descriptor_ = file->message_type(31);
  static const int GuildRpcAskBuildingContributionListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListAsk, buildingtype_),
  };
  GuildRpcAskBuildingContributionListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskBuildingContributionListAsk_descriptor_,
      GuildRpcAskBuildingContributionListAsk::default_instance_,
      GuildRpcAskBuildingContributionListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskBuildingContributionListAsk));
  GuildRpcAskBuildingContributionListReply_descriptor_ = file->message_type(32);
  static const int GuildRpcAskBuildingContributionListReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListReply, contributionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListReply, buildingtype_),
  };
  GuildRpcAskBuildingContributionListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskBuildingContributionListReply_descriptor_,
      GuildRpcAskBuildingContributionListReply::default_instance_,
      GuildRpcAskBuildingContributionListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskBuildingContributionListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskBuildingContributionListReply));
  GuildRpcBuildingCanLvUpNotify_descriptor_ = file->message_type(33);
  static const int GuildRpcBuildingCanLvUpNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingCanLvUpNotify, buildingtype_),
  };
  GuildRpcBuildingCanLvUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildingCanLvUpNotify_descriptor_,
      GuildRpcBuildingCanLvUpNotify::default_instance_,
      GuildRpcBuildingCanLvUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingCanLvUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildingCanLvUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildingCanLvUpNotify));
  GuildRpcAskGuildEventListAsk_descriptor_ = file->message_type(34);
  static const int GuildRpcAskGuildEventListAsk_offsets_[1] = {
  };
  GuildRpcAskGuildEventListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildEventListAsk_descriptor_,
      GuildRpcAskGuildEventListAsk::default_instance_,
      GuildRpcAskGuildEventListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildEventListAsk));
  GuildRpcAskGuildEventListReply_descriptor_ = file->message_type(35);
  static const int GuildRpcAskGuildEventListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListReply, guildeventlist_),
  };
  GuildRpcAskGuildEventListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildEventListReply_descriptor_,
      GuildRpcAskGuildEventListReply::default_instance_,
      GuildRpcAskGuildEventListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildEventListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildEventListReply));
  GuildRpcAskGuildInfoListAsk_descriptor_ = file->message_type(36);
  static const int GuildRpcAskGuildInfoListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListAsk, pageindex_),
  };
  GuildRpcAskGuildInfoListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildInfoListAsk_descriptor_,
      GuildRpcAskGuildInfoListAsk::default_instance_,
      GuildRpcAskGuildInfoListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildInfoListAsk));
  GuildRpcAskGuildInfoListReply_descriptor_ = file->message_type(37);
  static const int GuildRpcAskGuildInfoListReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, guildinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, totalguildcount_),
  };
  GuildRpcAskGuildInfoListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildInfoListReply_descriptor_,
      GuildRpcAskGuildInfoListReply::default_instance_,
      GuildRpcAskGuildInfoListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildInfoListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildInfoListReply));
  GuildRpcSearchGuildAsk_descriptor_ = file->message_type(38);
  static const int GuildRpcSearchGuildAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildAsk, text_),
  };
  GuildRpcSearchGuildAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSearchGuildAsk_descriptor_,
      GuildRpcSearchGuildAsk::default_instance_,
      GuildRpcSearchGuildAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSearchGuildAsk));
  GuildRpcSearchGuildReply_descriptor_ = file->message_type(39);
  static const int GuildRpcSearchGuildReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildReply, guildinfolist_),
  };
  GuildRpcSearchGuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSearchGuildReply_descriptor_,
      GuildRpcSearchGuildReply::default_instance_,
      GuildRpcSearchGuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSearchGuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSearchGuildReply));
  GuildRpcJoinGuildAsk_descriptor_ = file->message_type(40);
  static const int GuildRpcJoinGuildAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildAsk, type_),
  };
  GuildRpcJoinGuildAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcJoinGuildAsk_descriptor_,
      GuildRpcJoinGuildAsk::default_instance_,
      GuildRpcJoinGuildAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcJoinGuildAsk));
  GuildRpcJoinGuildReply_descriptor_ = file->message_type(41);
  static const int GuildRpcJoinGuildReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildReply, guid_),
  };
  GuildRpcJoinGuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcJoinGuildReply_descriptor_,
      GuildRpcJoinGuildReply::default_instance_,
      GuildRpcJoinGuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcJoinGuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcJoinGuildReply));
  GuildRpcCreateGuildAsk_descriptor_ = file->message_type(42);
  static const int GuildRpcCreateGuildAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildAsk, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildAsk, guildcreed_),
  };
  GuildRpcCreateGuildAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcCreateGuildAsk_descriptor_,
      GuildRpcCreateGuildAsk::default_instance_,
      GuildRpcCreateGuildAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcCreateGuildAsk));
  GuildRpcCreateGuildReply_descriptor_ = file->message_type(43);
  static const int GuildRpcCreateGuildReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildReply, guildbaseinfo_),
  };
  GuildRpcCreateGuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcCreateGuildReply_descriptor_,
      GuildRpcCreateGuildReply::default_instance_,
      GuildRpcCreateGuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcCreateGuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcCreateGuildReply));
  GuildRpcChangeFlagAsk_descriptor_ = file->message_type(44);
  static const int GuildRpcChangeFlagAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagAsk, flagconfigid_),
  };
  GuildRpcChangeFlagAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcChangeFlagAsk_descriptor_,
      GuildRpcChangeFlagAsk::default_instance_,
      GuildRpcChangeFlagAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcChangeFlagAsk));
  GuildRpcChangeFlagReply_descriptor_ = file->message_type(45);
  static const int GuildRpcChangeFlagReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagReply, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagReply, flag_),
  };
  GuildRpcChangeFlagReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcChangeFlagReply_descriptor_,
      GuildRpcChangeFlagReply::default_instance_,
      GuildRpcChangeFlagReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeFlagReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcChangeFlagReply));
  GuildRpcGuildChangeNameAsk_descriptor_ = file->message_type(46);
  static const int GuildRpcGuildChangeNameAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameAsk, guildnewname_),
  };
  GuildRpcGuildChangeNameAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcGuildChangeNameAsk_descriptor_,
      GuildRpcGuildChangeNameAsk::default_instance_,
      GuildRpcGuildChangeNameAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcGuildChangeNameAsk));
  GuildRpcGuildChangeNameReply_descriptor_ = file->message_type(47);
  static const int GuildRpcGuildChangeNameReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameReply, guildnewname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameReply, guildoldname_),
  };
  GuildRpcGuildChangeNameReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcGuildChangeNameReply_descriptor_,
      GuildRpcGuildChangeNameReply::default_instance_,
      GuildRpcGuildChangeNameReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildChangeNameReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcGuildChangeNameReply));
  GuildRpcAskGuildMemberAsk_descriptor_ = file->message_type(48);
  static const int GuildRpcAskGuildMemberAsk_offsets_[1] = {
  };
  GuildRpcAskGuildMemberAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildMemberAsk_descriptor_,
      GuildRpcAskGuildMemberAsk::default_instance_,
      GuildRpcAskGuildMemberAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildMemberAsk));
  GuildRpcAskGuildMemberReply_descriptor_ = file->message_type(49);
  static const int GuildRpcAskGuildMemberReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, guildmemberinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, membercount_),
  };
  GuildRpcAskGuildMemberReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcAskGuildMemberReply_descriptor_,
      GuildRpcAskGuildMemberReply::default_instance_,
      GuildRpcAskGuildMemberReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcAskGuildMemberReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcAskGuildMemberReply));
  GuildRpcQuiteGuildAsk_descriptor_ = file->message_type(50);
  static const int GuildRpcQuiteGuildAsk_offsets_[1] = {
  };
  GuildRpcQuiteGuildAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcQuiteGuildAsk_descriptor_,
      GuildRpcQuiteGuildAsk::default_instance_,
      GuildRpcQuiteGuildAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcQuiteGuildAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcQuiteGuildAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcQuiteGuildAsk));
  GuildRpcQuiteGuildReply_descriptor_ = file->message_type(51);
  static const int GuildRpcQuiteGuildReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcQuiteGuildReply, result_),
  };
  GuildRpcQuiteGuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcQuiteGuildReply_descriptor_,
      GuildRpcQuiteGuildReply::default_instance_,
      GuildRpcQuiteGuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcQuiteGuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcQuiteGuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcQuiteGuildReply));
  GuildRpcSetOfficeAsk_descriptor_ = file->message_type(52);
  static const int GuildRpcSetOfficeAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeAsk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeAsk, targetguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeAsk, officetype_),
  };
  GuildRpcSetOfficeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSetOfficeAsk_descriptor_,
      GuildRpcSetOfficeAsk::default_instance_,
      GuildRpcSetOfficeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSetOfficeAsk));
  GuildRpcSetOfficeReply_descriptor_ = file->message_type(53);
  static const int GuildRpcSetOfficeReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, selfofficetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, targetofficetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, targetguid_),
  };
  GuildRpcSetOfficeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcSetOfficeReply_descriptor_,
      GuildRpcSetOfficeReply::default_instance_,
      GuildRpcSetOfficeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcSetOfficeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcSetOfficeReply));
  GuildRpcOfficeChangeNotify_descriptor_ = file->message_type(54);
  static const int GuildRpcOfficeChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcOfficeChangeNotify, officetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcOfficeChangeNotify, optguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcOfficeChangeNotify, optofficetype_),
  };
  GuildRpcOfficeChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcOfficeChangeNotify_descriptor_,
      GuildRpcOfficeChangeNotify::default_instance_,
      GuildRpcOfficeChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcOfficeChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcOfficeChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcOfficeChangeNotify));
  GuildRpcChangeCreedAsk_descriptor_ = file->message_type(55);
  static const int GuildRpcChangeCreedAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedAsk, content_),
  };
  GuildRpcChangeCreedAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcChangeCreedAsk_descriptor_,
      GuildRpcChangeCreedAsk::default_instance_,
      GuildRpcChangeCreedAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcChangeCreedAsk));
  GuildRpcChangeCreedReply_descriptor_ = file->message_type(56);
  static const int GuildRpcChangeCreedReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedReply, content_),
  };
  GuildRpcChangeCreedReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcChangeCreedReply_descriptor_,
      GuildRpcChangeCreedReply::default_instance_,
      GuildRpcChangeCreedReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcChangeCreedReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcChangeCreedReply));
  GuildRpcForbiddenChatAsk_descriptor_ = file->message_type(57);
  static const int GuildRpcForbiddenChatAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatAsk, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatAsk, isforbidden_),
  };
  GuildRpcForbiddenChatAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcForbiddenChatAsk_descriptor_,
      GuildRpcForbiddenChatAsk::default_instance_,
      GuildRpcForbiddenChatAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcForbiddenChatAsk));
  GuildRpcForbiddenChatReply_descriptor_ = file->message_type(58);
  static const int GuildRpcForbiddenChatReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatReply, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatReply, isforbidden_),
  };
  GuildRpcForbiddenChatReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcForbiddenChatReply_descriptor_,
      GuildRpcForbiddenChatReply::default_instance_,
      GuildRpcForbiddenChatReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcForbiddenChatReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcForbiddenChatReply));
  GuildRpcBuildLvUpCompleteNotify_descriptor_ = file->message_type(59);
  static const int GuildRpcBuildLvUpCompleteNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildLvUpCompleteNotify, guildbuildinginfo_),
  };
  GuildRpcBuildLvUpCompleteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcBuildLvUpCompleteNotify_descriptor_,
      GuildRpcBuildLvUpCompleteNotify::default_instance_,
      GuildRpcBuildLvUpCompleteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildLvUpCompleteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcBuildLvUpCompleteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcBuildLvUpCompleteNotify));
  GuildRpcGuildCurrencyChangeNotify_descriptor_ = file->message_type(60);
  static const int GuildRpcGuildCurrencyChangeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, guildprosper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, guildresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, guildwelfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, maintaincost_),
  };
  GuildRpcGuildCurrencyChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRpcGuildCurrencyChangeNotify_descriptor_,
      GuildRpcGuildCurrencyChangeNotify::default_instance_,
      GuildRpcGuildCurrencyChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRpcGuildCurrencyChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRpcGuildCurrencyChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcGuildBaseInfoAsk_descriptor_, &GuildRpcGuildBaseInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcGuildBaseInfoReply_descriptor_, &GuildRpcGuildBaseInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcKickMemberAsk_descriptor_, &GuildRpcKickMemberAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcKickMemberReply_descriptor_, &GuildRpcKickMemberReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcKickMemberNotifyNotify_descriptor_, &GuildRpcKickMemberNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskVacationAsk_descriptor_, &GuildRpcAskVacationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskVacationReply_descriptor_, &GuildRpcAskVacationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcVacationNotify_descriptor_, &GuildRpcVacationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcReplyVacationNotify_descriptor_, &GuildRpcReplyVacationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskApplyListAsk_descriptor_, &GuildRpcAskApplyListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskApplyListReply_descriptor_, &GuildRpcAskApplyListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyGuildOperationAsk_descriptor_, &GuildRpcApplyGuildOperationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyGuildOperationReply_descriptor_, &GuildRpcApplyGuildOperationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyGuildNotify_descriptor_, &GuildRpcApplyGuildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyLimitSettingAsk_descriptor_, &GuildRpcApplyLimitSettingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyLimitSettingReply_descriptor_, &GuildRpcApplyLimitSettingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskJurisdictionListAsk_descriptor_, &GuildRpcAskJurisdictionListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskJurisdictionListReply_descriptor_, &GuildRpcAskJurisdictionListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSetJurisdictionAsk_descriptor_, &GuildRpcSetJurisdictionAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSetJurisdictionReply_descriptor_, &GuildRpcSetJurisdictionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskVacationListAsk_descriptor_, &GuildRpcAskVacationListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskVacationListReply_descriptor_, &GuildRpcAskVacationListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcVacationGuildOperationAsk_descriptor_, &GuildRpcVacationGuildOperationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcVacationGuildOperationReply_descriptor_, &GuildRpcVacationGuildOperationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcApplyGuildToOfficeNotify_descriptor_, &GuildRpcApplyGuildToOfficeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskBuildingInfoAsk_descriptor_, &GuildRpcAskBuildingInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskBuildingInfoReply_descriptor_, &GuildRpcAskBuildingInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildingLvUpAsk_descriptor_, &GuildRpcBuildingLvUpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildingLvUpReply_descriptor_, &GuildRpcBuildingLvUpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildingLvSpeedUpAsk_descriptor_, &GuildRpcBuildingLvSpeedUpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildingLvSpeedUpReply_descriptor_, &GuildRpcBuildingLvSpeedUpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskBuildingContributionListAsk_descriptor_, &GuildRpcAskBuildingContributionListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskBuildingContributionListReply_descriptor_, &GuildRpcAskBuildingContributionListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildingCanLvUpNotify_descriptor_, &GuildRpcBuildingCanLvUpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildEventListAsk_descriptor_, &GuildRpcAskGuildEventListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildEventListReply_descriptor_, &GuildRpcAskGuildEventListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildInfoListAsk_descriptor_, &GuildRpcAskGuildInfoListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildInfoListReply_descriptor_, &GuildRpcAskGuildInfoListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSearchGuildAsk_descriptor_, &GuildRpcSearchGuildAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSearchGuildReply_descriptor_, &GuildRpcSearchGuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcJoinGuildAsk_descriptor_, &GuildRpcJoinGuildAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcJoinGuildReply_descriptor_, &GuildRpcJoinGuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcCreateGuildAsk_descriptor_, &GuildRpcCreateGuildAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcCreateGuildReply_descriptor_, &GuildRpcCreateGuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcChangeFlagAsk_descriptor_, &GuildRpcChangeFlagAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcChangeFlagReply_descriptor_, &GuildRpcChangeFlagReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcGuildChangeNameAsk_descriptor_, &GuildRpcGuildChangeNameAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcGuildChangeNameReply_descriptor_, &GuildRpcGuildChangeNameReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildMemberAsk_descriptor_, &GuildRpcAskGuildMemberAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcAskGuildMemberReply_descriptor_, &GuildRpcAskGuildMemberReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcQuiteGuildAsk_descriptor_, &GuildRpcQuiteGuildAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcQuiteGuildReply_descriptor_, &GuildRpcQuiteGuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSetOfficeAsk_descriptor_, &GuildRpcSetOfficeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcSetOfficeReply_descriptor_, &GuildRpcSetOfficeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcOfficeChangeNotify_descriptor_, &GuildRpcOfficeChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcChangeCreedAsk_descriptor_, &GuildRpcChangeCreedAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcChangeCreedReply_descriptor_, &GuildRpcChangeCreedReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcForbiddenChatAsk_descriptor_, &GuildRpcForbiddenChatAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcForbiddenChatReply_descriptor_, &GuildRpcForbiddenChatReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcBuildLvUpCompleteNotify_descriptor_, &GuildRpcBuildLvUpCompleteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRpcGuildCurrencyChangeNotify_descriptor_, &GuildRpcGuildCurrencyChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildRpc_2eproto() {
  delete GuildRpcGuildBaseInfoAsk::default_instance_;
  delete GuildRpcGuildBaseInfoAsk_reflection_;
  delete GuildRpcGuildBaseInfoReply::default_instance_;
  delete GuildRpcGuildBaseInfoReply_reflection_;
  delete GuildRpcKickMemberAsk::default_instance_;
  delete GuildRpcKickMemberAsk_reflection_;
  delete GuildRpcKickMemberReply::default_instance_;
  delete GuildRpcKickMemberReply_reflection_;
  delete GuildRpcKickMemberNotifyNotify::default_instance_;
  delete GuildRpcKickMemberNotifyNotify_reflection_;
  delete GuildRpcAskVacationAsk::default_instance_;
  delete GuildRpcAskVacationAsk_reflection_;
  delete GuildRpcAskVacationReply::default_instance_;
  delete GuildRpcAskVacationReply_reflection_;
  delete GuildRpcVacationNotify::default_instance_;
  delete GuildRpcVacationNotify_reflection_;
  delete GuildRpcReplyVacationNotify::default_instance_;
  delete GuildRpcReplyVacationNotify_reflection_;
  delete GuildRpcAskApplyListAsk::default_instance_;
  delete GuildRpcAskApplyListAsk_reflection_;
  delete GuildRpcAskApplyListReply::default_instance_;
  delete GuildRpcAskApplyListReply_reflection_;
  delete GuildRpcApplyGuildOperationAsk::default_instance_;
  delete GuildRpcApplyGuildOperationAsk_reflection_;
  delete GuildRpcApplyGuildOperationReply::default_instance_;
  delete GuildRpcApplyGuildOperationReply_reflection_;
  delete GuildRpcApplyGuildNotify::default_instance_;
  delete GuildRpcApplyGuildNotify_reflection_;
  delete GuildRpcApplyLimitSettingAsk::default_instance_;
  delete GuildRpcApplyLimitSettingAsk_reflection_;
  delete GuildRpcApplyLimitSettingReply::default_instance_;
  delete GuildRpcApplyLimitSettingReply_reflection_;
  delete GuildRpcAskJurisdictionListAsk::default_instance_;
  delete GuildRpcAskJurisdictionListAsk_reflection_;
  delete GuildRpcAskJurisdictionListReply::default_instance_;
  delete GuildRpcAskJurisdictionListReply_reflection_;
  delete GuildRpcSetJurisdictionAsk::default_instance_;
  delete GuildRpcSetJurisdictionAsk_reflection_;
  delete GuildRpcSetJurisdictionReply::default_instance_;
  delete GuildRpcSetJurisdictionReply_reflection_;
  delete GuildRpcAskVacationListAsk::default_instance_;
  delete GuildRpcAskVacationListAsk_reflection_;
  delete GuildRpcAskVacationListReply::default_instance_;
  delete GuildRpcAskVacationListReply_reflection_;
  delete GuildRpcVacationGuildOperationAsk::default_instance_;
  delete GuildRpcVacationGuildOperationAsk_reflection_;
  delete GuildRpcVacationGuildOperationReply::default_instance_;
  delete GuildRpcVacationGuildOperationReply_reflection_;
  delete GuildRpcApplyGuildToOfficeNotify::default_instance_;
  delete GuildRpcApplyGuildToOfficeNotify_reflection_;
  delete GuildRpcAskBuildingInfoAsk::default_instance_;
  delete GuildRpcAskBuildingInfoAsk_reflection_;
  delete GuildRpcAskBuildingInfoReply::default_instance_;
  delete GuildRpcAskBuildingInfoReply_reflection_;
  delete GuildRpcBuildingLvUpAsk::default_instance_;
  delete GuildRpcBuildingLvUpAsk_reflection_;
  delete GuildRpcBuildingLvUpReply::default_instance_;
  delete GuildRpcBuildingLvUpReply_reflection_;
  delete GuildRpcBuildingLvSpeedUpAsk::default_instance_;
  delete GuildRpcBuildingLvSpeedUpAsk_reflection_;
  delete GuildRpcBuildingLvSpeedUpReply::default_instance_;
  delete GuildRpcBuildingLvSpeedUpReply_reflection_;
  delete GuildRpcAskBuildingContributionListAsk::default_instance_;
  delete GuildRpcAskBuildingContributionListAsk_reflection_;
  delete GuildRpcAskBuildingContributionListReply::default_instance_;
  delete GuildRpcAskBuildingContributionListReply_reflection_;
  delete GuildRpcBuildingCanLvUpNotify::default_instance_;
  delete GuildRpcBuildingCanLvUpNotify_reflection_;
  delete GuildRpcAskGuildEventListAsk::default_instance_;
  delete GuildRpcAskGuildEventListAsk_reflection_;
  delete GuildRpcAskGuildEventListReply::default_instance_;
  delete GuildRpcAskGuildEventListReply_reflection_;
  delete GuildRpcAskGuildInfoListAsk::default_instance_;
  delete GuildRpcAskGuildInfoListAsk_reflection_;
  delete GuildRpcAskGuildInfoListReply::default_instance_;
  delete GuildRpcAskGuildInfoListReply_reflection_;
  delete GuildRpcSearchGuildAsk::default_instance_;
  delete GuildRpcSearchGuildAsk_reflection_;
  delete GuildRpcSearchGuildReply::default_instance_;
  delete GuildRpcSearchGuildReply_reflection_;
  delete GuildRpcJoinGuildAsk::default_instance_;
  delete GuildRpcJoinGuildAsk_reflection_;
  delete GuildRpcJoinGuildReply::default_instance_;
  delete GuildRpcJoinGuildReply_reflection_;
  delete GuildRpcCreateGuildAsk::default_instance_;
  delete GuildRpcCreateGuildAsk_reflection_;
  delete GuildRpcCreateGuildReply::default_instance_;
  delete GuildRpcCreateGuildReply_reflection_;
  delete GuildRpcChangeFlagAsk::default_instance_;
  delete GuildRpcChangeFlagAsk_reflection_;
  delete GuildRpcChangeFlagReply::default_instance_;
  delete GuildRpcChangeFlagReply_reflection_;
  delete GuildRpcGuildChangeNameAsk::default_instance_;
  delete GuildRpcGuildChangeNameAsk_reflection_;
  delete GuildRpcGuildChangeNameReply::default_instance_;
  delete GuildRpcGuildChangeNameReply_reflection_;
  delete GuildRpcAskGuildMemberAsk::default_instance_;
  delete GuildRpcAskGuildMemberAsk_reflection_;
  delete GuildRpcAskGuildMemberReply::default_instance_;
  delete GuildRpcAskGuildMemberReply_reflection_;
  delete GuildRpcQuiteGuildAsk::default_instance_;
  delete GuildRpcQuiteGuildAsk_reflection_;
  delete GuildRpcQuiteGuildReply::default_instance_;
  delete GuildRpcQuiteGuildReply_reflection_;
  delete GuildRpcSetOfficeAsk::default_instance_;
  delete GuildRpcSetOfficeAsk_reflection_;
  delete GuildRpcSetOfficeReply::default_instance_;
  delete GuildRpcSetOfficeReply_reflection_;
  delete GuildRpcOfficeChangeNotify::default_instance_;
  delete GuildRpcOfficeChangeNotify_reflection_;
  delete GuildRpcChangeCreedAsk::default_instance_;
  delete GuildRpcChangeCreedAsk_reflection_;
  delete GuildRpcChangeCreedReply::default_instance_;
  delete GuildRpcChangeCreedReply_reflection_;
  delete GuildRpcForbiddenChatAsk::default_instance_;
  delete GuildRpcForbiddenChatAsk_reflection_;
  delete GuildRpcForbiddenChatReply::default_instance_;
  delete GuildRpcForbiddenChatReply_reflection_;
  delete GuildRpcBuildLvUpCompleteNotify::default_instance_;
  delete GuildRpcBuildLvUpCompleteNotify_reflection_;
  delete GuildRpcGuildCurrencyChangeNotify::default_instance_;
  delete GuildRpcGuildCurrencyChangeNotify_reflection_;
}

void protobuf_AddDesc_GuildRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GuildRpc.proto\032\022PublicStruct.proto\"\032\n\030"
    "GuildRpcGuildBaseInfoAsk\"S\n\032GuildRpcGuil"
    "dBaseInfoReply\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\rGu"
    "ildBaseInfo\030\002 \001(\0132\n.GuildInfo\"U\n\025GuildRp"
    "cKickMemberAsk\022\020\n\004Guid\030\001 \001(\005:\002-1\022\022\n\nKick"
    "Reason\030\002 \001(\t\022\026\n\nReasonType\030\003 \001(\005:\002-1\"q\n\027"
    "GuildRpcKickMemberReply\022\022\n\006Result\030\001 \001(\005:"
    "\002-1\022\020\n\004Guid\030\002 \001(\005:\002-1\022\027\n\013OnlineCount\030\003 \001"
    "(\005:\002-1\022\027\n\013MemberCount\030\004 \001(\005:\002-1\"L\n\036Guild"
    "RpcKickMemberNotifyNotify\022\022\n\nKickReason\030"
    "\001 \001(\t\022\026\n\nReasonType\030\002 \001(\005:\002-1\"L\n\026GuildRp"
    "cAskVacationAsk\022\020\n\004Guid\030\001 \001(\005:\002-1\022\016\n\006Rea"
    "son\030\002 \001(\t\022\020\n\004Type\030\004 \001(\005:\002-1\"R\n\030GuildRpcA"
    "skVacationReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\020\n\004G"
    "uid\030\002 \001(\005:\002-1\022\020\n\004Type\030\003 \001(\005:\002-1\"T\n\026Guild"
    "RpcVacationNotify\022(\n\014VacationInfo\030\002 \001(\0132"
    "\022.GuildVacationInfo\022\020\n\004Type\030\003 \001(\005:\002-1\"\035\n"
    "\033GuildRpcReplyVacationNotify\"\031\n\027GuildRpc"
    "AskApplyListAsk\"f\n\031GuildRpcAskApplyListR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\0225\n\027GuildMemberT"
    "inyInfoList\030\002 \003(\0132\024.GuildMemberTinyInfo\""
    "H\n\036GuildRpcApplyGuildOperationAsk\022\017\n\004Gui"
    "d\030\001 \001(\004:\0010\022\025\n\tOperation\030\002 \001(\005:\002-1\"\251\001\n Gu"
    "ildRpcApplyGuildOperationReply\022\022\n\006Result"
    "\030\001 \001(\005:\002-1\022\025\n\tOperation\030\003 \001(\005:\002-1\022(\n\016Mem"
    "berInfoList\030\004 \003(\0132\020.GuildMemberInfo\022\027\n\013O"
    "nlineCount\030\005 \001(\005:\002-1\022\027\n\013MemberCount\030\006 \001("
    "\005:\002-1\"A\n\030GuildRpcApplyGuildNotify\022\022\n\007Gui"
    "ldID\030\001 \001(\004:\0010\022\021\n\tGuildName\030\002 \001(\t\"9\n\034Guil"
    "dRpcApplyLimitSettingAsk\022\031\n\nIsAutoJoin\030\001"
    " \001(\010:\005false\"O\n\036GuildRpcApplyLimitSetting"
    "Reply\022\022\n\006Result\030\001 \001(\005:\002-1\022\031\n\nIsAutoJoin\030"
    "\002 \001(\010:\005false\" \n\036GuildRpcAskJurisdictionL"
    "istAsk\"j\n GuildRpcAskJurisdictionListRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\0222\n\020JurisdictionLi"
    "st\030\002 \003(\0132\030.GuildOfficeJurisdiction\"G\n\032Gu"
    "ildRpcSetJurisdictionAsk\022)\n\007SetList\030\001 \001("
    "\0132\030.GuildOfficeJurisdiction\"]\n\034GuildRpcS"
    "etJurisdictionReply\022\022\n\006Result\030\001 \001(\005:\002-1\022"
    ")\n\007SetList\030\002 \001(\0132\030.GuildOfficeJurisdicti"
    "on\"\034\n\032GuildRpcAskVacationListAsk\"\\\n\034Guil"
    "dRpcAskVacationListReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\022(\n\014VacationList\030\002 \003(\0132\022.GuildVacati"
    "onInfo\"K\n!GuildRpcVacationGuildOperation"
    "Ask\022\017\n\004Guid\030\002 \001(\004:\0010\022\025\n\tOperation\030\003 \001(\005:"
    "\002-1\"a\n#GuildRpcVacationGuildOperationRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022\017\n\004Guid\030\002 \001(\004:\0010\022"
    "\025\n\tOperation\030\003 \001(\005:\002-1\"U\n GuildRpcApplyG"
    "uildToOfficeNotify\0221\n\023GuildMemberTinyInf"
    "o\030\001 \001(\0132\024.GuildMemberTinyInfo\"\034\n\032GuildRp"
    "cAskBuildingInfoAsk\"`\n\034GuildRpcAskBuildi"
    "ngInfoReply\022\022\n\006Result\030\001 \001(\005:\002-1\022,\n\020Build"
    "ingInfoList\030\002 \003(\0132\022.GuildBuildingInfo\"3\n"
    "\027GuildRpcBuildingLvUpAsk\022\030\n\014BuildingType"
    "\030\002 \001(\005:\002-1\"\221\001\n\031GuildRpcBuildingLvUpReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\022-\n\021GuildBuildingInf"
    "o\030\002 \001(\0132\022.GuildBuildingInfo\022\026\n\nGuildMone"
    "y\030\003 \001(\005:\002-1\022\031\n\rGuildResource\030\004 \001(\005:\002-1\"J"
    "\n\034GuildRpcBuildingLvSpeedUpAsk\022\030\n\014Buildi"
    "ngType\030\001 \001(\005:\002-1\022\020\n\004Time\030\002 \001(\005:\002-1\"c\n\036Gu"
    "ildRpcBuildingLvSpeedUpReply\022\022\n\006Result\030\001"
    " \001(\005:\002-1\022-\n\021GuildBuildingInfo\030\002 \001(\0132\022.Gu"
    "ildBuildingInfo\"B\n&GuildRpcAskBuildingCo"
    "ntributionListAsk\022\030\n\014BuildingType\030\001 \001(\005:"
    "\002-1\"\222\001\n(GuildRpcAskBuildingContributionL"
    "istReply\022\022\n\006Result\030\001 \001(\005:\002-1\0228\n\020Contribu"
    "tionList\030\002 \003(\0132\036.GuildBuildingContributi"
    "onInfo\022\030\n\014BuildingType\030\003 \001(\005:\002-1\"9\n\035Guil"
    "dRpcBuildingCanLvUpNotify\022\030\n\014BuildingTyp"
    "e\030\002 \001(\005:\002-1\"\036\n\034GuildRpcAskGuildEventList"
    "Ask\"Y\n\036GuildRpcAskGuildEventListReply\022\022\n"
    "\006Result\030\001 \001(\005:\002-1\022#\n\016GuildEventList\030\002 \003("
    "\0132\013.GuildEvent\"4\n\033GuildRpcAskGuildInfoLi"
    "stAsk\022\025\n\tPageIndex\030\002 \001(\005:\002-1\"\212\001\n\035GuildRp"
    "cAskGuildInfoListReply\022\022\n\006Result\030\001 \001(\005:\002"
    "-1\022!\n\rGuildInfoList\030\002 \003(\0132\n.GuildInfo\022\025\n"
    "\tPageIndex\030\003 \001(\005:\002-1\022\033\n\017TotalGuildCount\030"
    "\004 \001(\005:\002-1\"&\n\026GuildRpcSearchGuildAsk\022\014\n\004T"
    "ext\030\001 \001(\t\"Q\n\030GuildRpcSearchGuildReply\022\022\n"
    "\006Result\030\001 \001(\005:\002-1\022!\n\rGuildInfoList\030\002 \003(\013"
    "2\n.GuildInfo\"9\n\024GuildRpcJoinGuildAsk\022\017\n\004"
    "Guid\030\001 \001(\004:\0010\022\020\n\004Type\030\002 \001(\005:\002-1\"=\n\026Guild"
    "RpcJoinGuildReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\017\n"
    "\004Guid\030\002 \001(\004:\0010\"\?\n\026GuildRpcCreateGuildAsk"
    "\022\021\n\tGuildName\030\001 \001(\t\022\022\n\nGuildCreed\030\002 \001(\t\""
    "Q\n\030GuildRpcCreateGuildReply\022\022\n\006Result\030\001 "
    "\001(\005:\002-1\022!\n\rGuildBaseInfo\030\002 \001(\0132\n.GuildIn"
    "fo\"1\n\025GuildRpcChangeFlagAsk\022\030\n\014FlagConfi"
    "gID\030\001 \001(\005:\002-1\"_\n\027GuildRpcChangeFlagReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\022\026\n\nGuildMoney\030\002 \001(\005"
    ":\002-1\022\030\n\004Flag\030\005 \001(\0132\n.GuildFlag\"2\n\032GuildR"
    "pcGuildChangeNameAsk\022\024\n\014GuildNewName\030\001 \001"
    "(\t\"^\n\034GuildRpcGuildChangeNameReply\022\022\n\006Re"
    "sult\030\001 \001(\005:\002-1\022\024\n\014GuildNewName\030\002 \001(\t\022\024\n\014"
    "GuildOldName\030\003 \001(\t\"\033\n\031GuildRpcAskGuildMe"
    "mberAsk\"\222\001\n\033GuildRpcAskGuildMemberReply\022"
    "\022\n\006Result\030\001 \001(\005:\002-1\022-\n\023GuildMemberInfoLi"
    "st\030\002 \003(\0132\020.GuildMemberInfo\022\027\n\013OnlineCoun"
    "t\030\003 \001(\005:\002-1\022\027\n\013MemberCount\030\004 \001(\005:\002-1\"\027\n\025"
    "GuildRpcQuiteGuildAsk\"-\n\027GuildRpcQuiteGu"
    "ildReply\022\022\n\006Result\030\001 \001(\005:\002-1\"V\n\024GuildRpc"
    "SetOfficeAsk\022\017\n\004Guid\030\001 \001(\004:\0010\022\025\n\nTargetG"
    "uid\030\002 \001(\004:\0010\022\026\n\nOfficeType\030\003 \001(\005:\002-1\"}\n\026"
    "GuildRpcSetOfficeReply\022\022\n\006Result\030\001 \001(\005:\002"
    "-1\022\032\n\016SelfOfficeType\030\002 \001(\005:\002-1\022\034\n\020Target"
    "OfficeType\030\004 \001(\005:\002-1\022\025\n\nTargetGuid\030\005 \001(\004"
    ":\0010\"c\n\032GuildRpcOfficeChangeNotify\022\026\n\nOff"
    "iceType\030\001 \001(\005:\002-1\022\022\n\007Optguid\030\002 \001(\004:\0010\022\031\n"
    "\rOptOfficeType\030\003 \001(\005:\002-1\")\n\026GuildRpcChan"
    "geCreedAsk\022\017\n\007Content\030\001 \001(\t\"\?\n\030GuildRpcC"
    "hangeCreedReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\017\n\007C"
    "ontent\030\002 \001(\t\"N\n\030GuildRpcForbiddenChatAsk"
    "\022\026\n\nPlayerguid\030\001 \001(\003:\002-1\022\032\n\013IsForbidden\030"
    "\002 \001(\010:\005false\"d\n\032GuildRpcForbiddenChatRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022\026\n\nPlayerguid\030\002 \001"
    "(\003:\002-1\022\032\n\013IsForbidden\030\003 \001(\010:\005false\"P\n\037Gu"
    "ildRpcBuildLvUpCompleteNotify\022-\n\021GuildBu"
    "ildingInfo\030\002 \001(\0132\022.GuildBuildingInfo\"\244\001\n"
    "!GuildRpcGuildCurrencyChangeNotify\022\030\n\014Gu"
    "ildProsper\030\001 \001(\005:\002-1\022\026\n\nGuildMoney\030\002 \001(\005"
    ":\002-1\022\031\n\rGuildResource\030\003 \001(\005:\002-1\022\030\n\014Guild"
    "Welfare\030\004 \001(\005:\002-1\022\030\n\014MaintainCost\030\005 \001(\005:"
    "\002-1", 4883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildRpc.proto", &protobuf_RegisterTypes);
  GuildRpcGuildBaseInfoAsk::default_instance_ = new GuildRpcGuildBaseInfoAsk();
  GuildRpcGuildBaseInfoReply::default_instance_ = new GuildRpcGuildBaseInfoReply();
  GuildRpcKickMemberAsk::default_instance_ = new GuildRpcKickMemberAsk();
  GuildRpcKickMemberReply::default_instance_ = new GuildRpcKickMemberReply();
  GuildRpcKickMemberNotifyNotify::default_instance_ = new GuildRpcKickMemberNotifyNotify();
  GuildRpcAskVacationAsk::default_instance_ = new GuildRpcAskVacationAsk();
  GuildRpcAskVacationReply::default_instance_ = new GuildRpcAskVacationReply();
  GuildRpcVacationNotify::default_instance_ = new GuildRpcVacationNotify();
  GuildRpcReplyVacationNotify::default_instance_ = new GuildRpcReplyVacationNotify();
  GuildRpcAskApplyListAsk::default_instance_ = new GuildRpcAskApplyListAsk();
  GuildRpcAskApplyListReply::default_instance_ = new GuildRpcAskApplyListReply();
  GuildRpcApplyGuildOperationAsk::default_instance_ = new GuildRpcApplyGuildOperationAsk();
  GuildRpcApplyGuildOperationReply::default_instance_ = new GuildRpcApplyGuildOperationReply();
  GuildRpcApplyGuildNotify::default_instance_ = new GuildRpcApplyGuildNotify();
  GuildRpcApplyLimitSettingAsk::default_instance_ = new GuildRpcApplyLimitSettingAsk();
  GuildRpcApplyLimitSettingReply::default_instance_ = new GuildRpcApplyLimitSettingReply();
  GuildRpcAskJurisdictionListAsk::default_instance_ = new GuildRpcAskJurisdictionListAsk();
  GuildRpcAskJurisdictionListReply::default_instance_ = new GuildRpcAskJurisdictionListReply();
  GuildRpcSetJurisdictionAsk::default_instance_ = new GuildRpcSetJurisdictionAsk();
  GuildRpcSetJurisdictionReply::default_instance_ = new GuildRpcSetJurisdictionReply();
  GuildRpcAskVacationListAsk::default_instance_ = new GuildRpcAskVacationListAsk();
  GuildRpcAskVacationListReply::default_instance_ = new GuildRpcAskVacationListReply();
  GuildRpcVacationGuildOperationAsk::default_instance_ = new GuildRpcVacationGuildOperationAsk();
  GuildRpcVacationGuildOperationReply::default_instance_ = new GuildRpcVacationGuildOperationReply();
  GuildRpcApplyGuildToOfficeNotify::default_instance_ = new GuildRpcApplyGuildToOfficeNotify();
  GuildRpcAskBuildingInfoAsk::default_instance_ = new GuildRpcAskBuildingInfoAsk();
  GuildRpcAskBuildingInfoReply::default_instance_ = new GuildRpcAskBuildingInfoReply();
  GuildRpcBuildingLvUpAsk::default_instance_ = new GuildRpcBuildingLvUpAsk();
  GuildRpcBuildingLvUpReply::default_instance_ = new GuildRpcBuildingLvUpReply();
  GuildRpcBuildingLvSpeedUpAsk::default_instance_ = new GuildRpcBuildingLvSpeedUpAsk();
  GuildRpcBuildingLvSpeedUpReply::default_instance_ = new GuildRpcBuildingLvSpeedUpReply();
  GuildRpcAskBuildingContributionListAsk::default_instance_ = new GuildRpcAskBuildingContributionListAsk();
  GuildRpcAskBuildingContributionListReply::default_instance_ = new GuildRpcAskBuildingContributionListReply();
  GuildRpcBuildingCanLvUpNotify::default_instance_ = new GuildRpcBuildingCanLvUpNotify();
  GuildRpcAskGuildEventListAsk::default_instance_ = new GuildRpcAskGuildEventListAsk();
  GuildRpcAskGuildEventListReply::default_instance_ = new GuildRpcAskGuildEventListReply();
  GuildRpcAskGuildInfoListAsk::default_instance_ = new GuildRpcAskGuildInfoListAsk();
  GuildRpcAskGuildInfoListReply::default_instance_ = new GuildRpcAskGuildInfoListReply();
  GuildRpcSearchGuildAsk::default_instance_ = new GuildRpcSearchGuildAsk();
  GuildRpcSearchGuildReply::default_instance_ = new GuildRpcSearchGuildReply();
  GuildRpcJoinGuildAsk::default_instance_ = new GuildRpcJoinGuildAsk();
  GuildRpcJoinGuildReply::default_instance_ = new GuildRpcJoinGuildReply();
  GuildRpcCreateGuildAsk::default_instance_ = new GuildRpcCreateGuildAsk();
  GuildRpcCreateGuildReply::default_instance_ = new GuildRpcCreateGuildReply();
  GuildRpcChangeFlagAsk::default_instance_ = new GuildRpcChangeFlagAsk();
  GuildRpcChangeFlagReply::default_instance_ = new GuildRpcChangeFlagReply();
  GuildRpcGuildChangeNameAsk::default_instance_ = new GuildRpcGuildChangeNameAsk();
  GuildRpcGuildChangeNameReply::default_instance_ = new GuildRpcGuildChangeNameReply();
  GuildRpcAskGuildMemberAsk::default_instance_ = new GuildRpcAskGuildMemberAsk();
  GuildRpcAskGuildMemberReply::default_instance_ = new GuildRpcAskGuildMemberReply();
  GuildRpcQuiteGuildAsk::default_instance_ = new GuildRpcQuiteGuildAsk();
  GuildRpcQuiteGuildReply::default_instance_ = new GuildRpcQuiteGuildReply();
  GuildRpcSetOfficeAsk::default_instance_ = new GuildRpcSetOfficeAsk();
  GuildRpcSetOfficeReply::default_instance_ = new GuildRpcSetOfficeReply();
  GuildRpcOfficeChangeNotify::default_instance_ = new GuildRpcOfficeChangeNotify();
  GuildRpcChangeCreedAsk::default_instance_ = new GuildRpcChangeCreedAsk();
  GuildRpcChangeCreedReply::default_instance_ = new GuildRpcChangeCreedReply();
  GuildRpcForbiddenChatAsk::default_instance_ = new GuildRpcForbiddenChatAsk();
  GuildRpcForbiddenChatReply::default_instance_ = new GuildRpcForbiddenChatReply();
  GuildRpcBuildLvUpCompleteNotify::default_instance_ = new GuildRpcBuildLvUpCompleteNotify();
  GuildRpcGuildCurrencyChangeNotify::default_instance_ = new GuildRpcGuildCurrencyChangeNotify();
  GuildRpcGuildBaseInfoAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcGuildBaseInfoReply::default_instance_->InitAsDefaultInstance();
  GuildRpcKickMemberAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcKickMemberReply::default_instance_->InitAsDefaultInstance();
  GuildRpcKickMemberNotifyNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcAskVacationAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskVacationReply::default_instance_->InitAsDefaultInstance();
  GuildRpcVacationNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcReplyVacationNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcAskApplyListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskApplyListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyGuildOperationAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyGuildOperationReply::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyGuildNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyLimitSettingAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyLimitSettingReply::default_instance_->InitAsDefaultInstance();
  GuildRpcAskJurisdictionListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskJurisdictionListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcSetJurisdictionAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcSetJurisdictionReply::default_instance_->InitAsDefaultInstance();
  GuildRpcAskVacationListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskVacationListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcVacationGuildOperationAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcVacationGuildOperationReply::default_instance_->InitAsDefaultInstance();
  GuildRpcApplyGuildToOfficeNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcAskBuildingInfoAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskBuildingInfoReply::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildingLvUpAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildingLvUpReply::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildingLvSpeedUpAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildingLvSpeedUpReply::default_instance_->InitAsDefaultInstance();
  GuildRpcAskBuildingContributionListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskBuildingContributionListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildingCanLvUpNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildEventListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildEventListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildInfoListAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildInfoListReply::default_instance_->InitAsDefaultInstance();
  GuildRpcSearchGuildAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcSearchGuildReply::default_instance_->InitAsDefaultInstance();
  GuildRpcJoinGuildAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcJoinGuildReply::default_instance_->InitAsDefaultInstance();
  GuildRpcCreateGuildAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcCreateGuildReply::default_instance_->InitAsDefaultInstance();
  GuildRpcChangeFlagAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcChangeFlagReply::default_instance_->InitAsDefaultInstance();
  GuildRpcGuildChangeNameAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcGuildChangeNameReply::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildMemberAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcAskGuildMemberReply::default_instance_->InitAsDefaultInstance();
  GuildRpcQuiteGuildAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcQuiteGuildReply::default_instance_->InitAsDefaultInstance();
  GuildRpcSetOfficeAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcSetOfficeReply::default_instance_->InitAsDefaultInstance();
  GuildRpcOfficeChangeNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcChangeCreedAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcChangeCreedReply::default_instance_->InitAsDefaultInstance();
  GuildRpcForbiddenChatAsk::default_instance_->InitAsDefaultInstance();
  GuildRpcForbiddenChatReply::default_instance_->InitAsDefaultInstance();
  GuildRpcBuildLvUpCompleteNotify::default_instance_->InitAsDefaultInstance();
  GuildRpcGuildCurrencyChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildRpc_2eproto {
  StaticDescriptorInitializer_GuildRpc_2eproto() {
    protobuf_AddDesc_GuildRpc_2eproto();
  }
} static_descriptor_initializer_GuildRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcGuildBaseInfoAsk::GuildRpcGuildBaseInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcGuildBaseInfoAsk::InitAsDefaultInstance() {
}

GuildRpcGuildBaseInfoAsk::GuildRpcGuildBaseInfoAsk(const GuildRpcGuildBaseInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcGuildBaseInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcGuildBaseInfoAsk::~GuildRpcGuildBaseInfoAsk() {
  SharedDtor();
}

void GuildRpcGuildBaseInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcGuildBaseInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcGuildBaseInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcGuildBaseInfoAsk_descriptor_;
}

const GuildRpcGuildBaseInfoAsk& GuildRpcGuildBaseInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcGuildBaseInfoAsk* GuildRpcGuildBaseInfoAsk::default_instance_ = NULL;

GuildRpcGuildBaseInfoAsk* GuildRpcGuildBaseInfoAsk::New() const {
  return new GuildRpcGuildBaseInfoAsk;
}

void GuildRpcGuildBaseInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcGuildBaseInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcGuildBaseInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcGuildBaseInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcGuildBaseInfoAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcGuildBaseInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcGuildBaseInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcGuildBaseInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcGuildBaseInfoAsk::MergeFrom(const GuildRpcGuildBaseInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcGuildBaseInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcGuildBaseInfoAsk::CopyFrom(const GuildRpcGuildBaseInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcGuildBaseInfoAsk::IsInitialized() const {

  return true;
}

void GuildRpcGuildBaseInfoAsk::Swap(GuildRpcGuildBaseInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcGuildBaseInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcGuildBaseInfoAsk_descriptor_;
  metadata.reflection = GuildRpcGuildBaseInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcGuildBaseInfoReply::kResultFieldNumber;
const int GuildRpcGuildBaseInfoReply::kGuildBaseInfoFieldNumber;
#endif  // !_MSC_VER

GuildRpcGuildBaseInfoReply::GuildRpcGuildBaseInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcGuildBaseInfoReply::InitAsDefaultInstance() {
  guildbaseinfo_ = const_cast< ::GuildInfo*>(&::GuildInfo::default_instance());
}

GuildRpcGuildBaseInfoReply::GuildRpcGuildBaseInfoReply(const GuildRpcGuildBaseInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcGuildBaseInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildbaseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcGuildBaseInfoReply::~GuildRpcGuildBaseInfoReply() {
  SharedDtor();
}

void GuildRpcGuildBaseInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete guildbaseinfo_;
  }
}

void GuildRpcGuildBaseInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcGuildBaseInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcGuildBaseInfoReply_descriptor_;
}

const GuildRpcGuildBaseInfoReply& GuildRpcGuildBaseInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcGuildBaseInfoReply* GuildRpcGuildBaseInfoReply::default_instance_ = NULL;

GuildRpcGuildBaseInfoReply* GuildRpcGuildBaseInfoReply::New() const {
  return new GuildRpcGuildBaseInfoReply;
}

void GuildRpcGuildBaseInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_guildbaseinfo()) {
      if (guildbaseinfo_ != NULL) guildbaseinfo_->::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcGuildBaseInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildBaseInfo;
        break;
      }

      // optional .GuildInfo GuildBaseInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcGuildBaseInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GuildInfo GuildBaseInfo = 2;
  if (has_guildbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbaseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcGuildBaseInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GuildInfo GuildBaseInfo = 2;
  if (has_guildbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbaseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcGuildBaseInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GuildInfo GuildBaseInfo = 2;
    if (has_guildbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbaseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcGuildBaseInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcGuildBaseInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcGuildBaseInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcGuildBaseInfoReply::MergeFrom(const GuildRpcGuildBaseInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildbaseinfo()) {
      mutable_guildbaseinfo()->::GuildInfo::MergeFrom(from.guildbaseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcGuildBaseInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcGuildBaseInfoReply::CopyFrom(const GuildRpcGuildBaseInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcGuildBaseInfoReply::IsInitialized() const {

  return true;
}

void GuildRpcGuildBaseInfoReply::Swap(GuildRpcGuildBaseInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildbaseinfo_, other->guildbaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcGuildBaseInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcGuildBaseInfoReply_descriptor_;
  metadata.reflection = GuildRpcGuildBaseInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcKickMemberAsk::kGuidFieldNumber;
const int GuildRpcKickMemberAsk::kKickReasonFieldNumber;
const int GuildRpcKickMemberAsk::kReasonTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcKickMemberAsk::GuildRpcKickMemberAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcKickMemberAsk::InitAsDefaultInstance() {
}

GuildRpcKickMemberAsk::GuildRpcKickMemberAsk(const GuildRpcKickMemberAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcKickMemberAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = -1;
  kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reasontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcKickMemberAsk::~GuildRpcKickMemberAsk() {
  SharedDtor();
}

void GuildRpcKickMemberAsk::SharedDtor() {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    delete kickreason_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcKickMemberAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcKickMemberAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcKickMemberAsk_descriptor_;
}

const GuildRpcKickMemberAsk& GuildRpcKickMemberAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcKickMemberAsk* GuildRpcKickMemberAsk::default_instance_ = NULL;

GuildRpcKickMemberAsk* GuildRpcKickMemberAsk::New() const {
  return new GuildRpcKickMemberAsk;
}

void GuildRpcKickMemberAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = -1;
    if (has_kickreason()) {
      if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
        kickreason_->clear();
      }
    }
    reasontype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcKickMemberAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Guid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_KickReason;
        break;
      }

      // optional string KickReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KickReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kickreason().data(), this->kickreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReasonType;
        break;
      }

      // optional int32 ReasonType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReasonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reasontype_)));
          set_has_reasontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcKickMemberAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Guid = 1 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string KickReason = 2;
  if (has_kickreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickreason().data(), this->kickreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->kickreason(), output);
  }

  // optional int32 ReasonType = 3 [default = -1];
  if (has_reasontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reasontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcKickMemberAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Guid = 1 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string KickReason = 2;
  if (has_kickreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickreason().data(), this->kickreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kickreason(), target);
  }

  // optional int32 ReasonType = 3 [default = -1];
  if (has_reasontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reasontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcKickMemberAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Guid = 1 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional string KickReason = 2;
    if (has_kickreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kickreason());
    }

    // optional int32 ReasonType = 3 [default = -1];
    if (has_reasontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reasontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcKickMemberAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcKickMemberAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcKickMemberAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcKickMemberAsk::MergeFrom(const GuildRpcKickMemberAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_kickreason()) {
      set_kickreason(from.kickreason());
    }
    if (from.has_reasontype()) {
      set_reasontype(from.reasontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcKickMemberAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcKickMemberAsk::CopyFrom(const GuildRpcKickMemberAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcKickMemberAsk::IsInitialized() const {

  return true;
}

void GuildRpcKickMemberAsk::Swap(GuildRpcKickMemberAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(kickreason_, other->kickreason_);
    std::swap(reasontype_, other->reasontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcKickMemberAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcKickMemberAsk_descriptor_;
  metadata.reflection = GuildRpcKickMemberAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcKickMemberReply::kResultFieldNumber;
const int GuildRpcKickMemberReply::kGuidFieldNumber;
const int GuildRpcKickMemberReply::kOnlineCountFieldNumber;
const int GuildRpcKickMemberReply::kMemberCountFieldNumber;
#endif  // !_MSC_VER

GuildRpcKickMemberReply::GuildRpcKickMemberReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcKickMemberReply::InitAsDefaultInstance() {
}

GuildRpcKickMemberReply::GuildRpcKickMemberReply(const GuildRpcKickMemberReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcKickMemberReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guid_ = -1;
  onlinecount_ = -1;
  membercount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcKickMemberReply::~GuildRpcKickMemberReply() {
  SharedDtor();
}

void GuildRpcKickMemberReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcKickMemberReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcKickMemberReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcKickMemberReply_descriptor_;
}

const GuildRpcKickMemberReply& GuildRpcKickMemberReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcKickMemberReply* GuildRpcKickMemberReply::default_instance_ = NULL;

GuildRpcKickMemberReply* GuildRpcKickMemberReply::New() const {
  return new GuildRpcKickMemberReply;
}

void GuildRpcKickMemberReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    guid_ = -1;
    onlinecount_ = -1;
    membercount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcKickMemberReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Guid;
        break;
      }

      // optional int32 Guid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OnlineCount;
        break;
      }

      // optional int32 OnlineCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));
          set_has_onlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MemberCount;
        break;
      }

      // optional int32 MemberCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcKickMemberReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Guid = 2 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  // optional int32 OnlineCount = 3 [default = -1];
  if (has_onlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->onlinecount(), output);
  }

  // optional int32 MemberCount = 4 [default = -1];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->membercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcKickMemberReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Guid = 2 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guid(), target);
  }

  // optional int32 OnlineCount = 3 [default = -1];
  if (has_onlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->onlinecount(), target);
  }

  // optional int32 MemberCount = 4 [default = -1];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->membercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcKickMemberReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Guid = 2 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 OnlineCount = 3 [default = -1];
    if (has_onlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecount());
    }

    // optional int32 MemberCount = 4 [default = -1];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcKickMemberReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcKickMemberReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcKickMemberReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcKickMemberReply::MergeFrom(const GuildRpcKickMemberReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_onlinecount()) {
      set_onlinecount(from.onlinecount());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcKickMemberReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcKickMemberReply::CopyFrom(const GuildRpcKickMemberReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcKickMemberReply::IsInitialized() const {

  return true;
}

void GuildRpcKickMemberReply::Swap(GuildRpcKickMemberReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(onlinecount_, other->onlinecount_);
    std::swap(membercount_, other->membercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcKickMemberReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcKickMemberReply_descriptor_;
  metadata.reflection = GuildRpcKickMemberReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcKickMemberNotifyNotify::kKickReasonFieldNumber;
const int GuildRpcKickMemberNotifyNotify::kReasonTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcKickMemberNotifyNotify::GuildRpcKickMemberNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcKickMemberNotifyNotify::InitAsDefaultInstance() {
}

GuildRpcKickMemberNotifyNotify::GuildRpcKickMemberNotifyNotify(const GuildRpcKickMemberNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcKickMemberNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  kickreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reasontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcKickMemberNotifyNotify::~GuildRpcKickMemberNotifyNotify() {
  SharedDtor();
}

void GuildRpcKickMemberNotifyNotify::SharedDtor() {
  if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
    delete kickreason_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcKickMemberNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcKickMemberNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcKickMemberNotifyNotify_descriptor_;
}

const GuildRpcKickMemberNotifyNotify& GuildRpcKickMemberNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcKickMemberNotifyNotify* GuildRpcKickMemberNotifyNotify::default_instance_ = NULL;

GuildRpcKickMemberNotifyNotify* GuildRpcKickMemberNotifyNotify::New() const {
  return new GuildRpcKickMemberNotifyNotify;
}

void GuildRpcKickMemberNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kickreason()) {
      if (kickreason_ != &::google::protobuf::internal::kEmptyString) {
        kickreason_->clear();
      }
    }
    reasontype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcKickMemberNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string KickReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kickreason().data(), this->kickreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReasonType;
        break;
      }

      // optional int32 ReasonType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReasonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reasontype_)));
          set_has_reasontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcKickMemberNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string KickReason = 1;
  if (has_kickreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickreason().data(), this->kickreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->kickreason(), output);
  }

  // optional int32 ReasonType = 2 [default = -1];
  if (has_reasontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reasontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcKickMemberNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string KickReason = 1;
  if (has_kickreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickreason().data(), this->kickreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kickreason(), target);
  }

  // optional int32 ReasonType = 2 [default = -1];
  if (has_reasontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reasontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcKickMemberNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string KickReason = 1;
    if (has_kickreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kickreason());
    }

    // optional int32 ReasonType = 2 [default = -1];
    if (has_reasontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reasontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcKickMemberNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcKickMemberNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcKickMemberNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcKickMemberNotifyNotify::MergeFrom(const GuildRpcKickMemberNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickreason()) {
      set_kickreason(from.kickreason());
    }
    if (from.has_reasontype()) {
      set_reasontype(from.reasontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcKickMemberNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcKickMemberNotifyNotify::CopyFrom(const GuildRpcKickMemberNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcKickMemberNotifyNotify::IsInitialized() const {

  return true;
}

void GuildRpcKickMemberNotifyNotify::Swap(GuildRpcKickMemberNotifyNotify* other) {
  if (other != this) {
    std::swap(kickreason_, other->kickreason_);
    std::swap(reasontype_, other->reasontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcKickMemberNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcKickMemberNotifyNotify_descriptor_;
  metadata.reflection = GuildRpcKickMemberNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskVacationAsk::kGuidFieldNumber;
const int GuildRpcAskVacationAsk::kReasonFieldNumber;
const int GuildRpcAskVacationAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskVacationAsk::GuildRpcAskVacationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskVacationAsk::InitAsDefaultInstance() {
}

GuildRpcAskVacationAsk::GuildRpcAskVacationAsk(const GuildRpcAskVacationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskVacationAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = -1;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskVacationAsk::~GuildRpcAskVacationAsk() {
  SharedDtor();
}

void GuildRpcAskVacationAsk::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcAskVacationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskVacationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskVacationAsk_descriptor_;
}

const GuildRpcAskVacationAsk& GuildRpcAskVacationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskVacationAsk* GuildRpcAskVacationAsk::default_instance_ = NULL;

GuildRpcAskVacationAsk* GuildRpcAskVacationAsk::New() const {
  return new GuildRpcAskVacationAsk;
}

void GuildRpcAskVacationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = -1;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskVacationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Guid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Reason;
        break;
      }

      // optional string Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional int32 Type = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskVacationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Guid = 1 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // optional string Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }

  // optional int32 Type = 4 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskVacationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Guid = 1 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // optional string Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional int32 Type = 4 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskVacationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Guid = 1 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional string Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 Type = 4 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskVacationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskVacationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskVacationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskVacationAsk::MergeFrom(const GuildRpcAskVacationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskVacationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskVacationAsk::CopyFrom(const GuildRpcAskVacationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskVacationAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskVacationAsk::Swap(GuildRpcAskVacationAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(reason_, other->reason_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskVacationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskVacationAsk_descriptor_;
  metadata.reflection = GuildRpcAskVacationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskVacationReply::kResultFieldNumber;
const int GuildRpcAskVacationReply::kGuidFieldNumber;
const int GuildRpcAskVacationReply::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskVacationReply::GuildRpcAskVacationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskVacationReply::InitAsDefaultInstance() {
}

GuildRpcAskVacationReply::GuildRpcAskVacationReply(const GuildRpcAskVacationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskVacationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guid_ = -1;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskVacationReply::~GuildRpcAskVacationReply() {
  SharedDtor();
}

void GuildRpcAskVacationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskVacationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskVacationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskVacationReply_descriptor_;
}

const GuildRpcAskVacationReply& GuildRpcAskVacationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskVacationReply* GuildRpcAskVacationReply::default_instance_ = NULL;

GuildRpcAskVacationReply* GuildRpcAskVacationReply::New() const {
  return new GuildRpcAskVacationReply;
}

void GuildRpcAskVacationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    guid_ = -1;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskVacationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Guid;
        break;
      }

      // optional int32 Guid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional int32 Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskVacationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Guid = 2 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskVacationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Guid = 2 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guid(), target);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskVacationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Guid = 2 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 Type = 3 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskVacationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskVacationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskVacationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskVacationReply::MergeFrom(const GuildRpcAskVacationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskVacationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskVacationReply::CopyFrom(const GuildRpcAskVacationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskVacationReply::IsInitialized() const {

  return true;
}

void GuildRpcAskVacationReply::Swap(GuildRpcAskVacationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskVacationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskVacationReply_descriptor_;
  metadata.reflection = GuildRpcAskVacationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcVacationNotify::kVacationInfoFieldNumber;
const int GuildRpcVacationNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcVacationNotify::GuildRpcVacationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcVacationNotify::InitAsDefaultInstance() {
  vacationinfo_ = const_cast< ::GuildVacationInfo*>(&::GuildVacationInfo::default_instance());
}

GuildRpcVacationNotify::GuildRpcVacationNotify(const GuildRpcVacationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcVacationNotify::SharedCtor() {
  _cached_size_ = 0;
  vacationinfo_ = NULL;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcVacationNotify::~GuildRpcVacationNotify() {
  SharedDtor();
}

void GuildRpcVacationNotify::SharedDtor() {
  if (this != default_instance_) {
    delete vacationinfo_;
  }
}

void GuildRpcVacationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcVacationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcVacationNotify_descriptor_;
}

const GuildRpcVacationNotify& GuildRpcVacationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcVacationNotify* GuildRpcVacationNotify::default_instance_ = NULL;

GuildRpcVacationNotify* GuildRpcVacationNotify::New() const {
  return new GuildRpcVacationNotify;
}

void GuildRpcVacationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_vacationinfo()) {
      if (vacationinfo_ != NULL) vacationinfo_->::GuildVacationInfo::Clear();
    }
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcVacationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildVacationInfo VacationInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vacationinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional int32 Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcVacationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildVacationInfo VacationInfo = 2;
  if (has_vacationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vacationinfo(), output);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcVacationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildVacationInfo VacationInfo = 2;
  if (has_vacationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vacationinfo(), target);
  }

  // optional int32 Type = 3 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcVacationNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildVacationInfo VacationInfo = 2;
    if (has_vacationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vacationinfo());
    }

    // optional int32 Type = 3 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcVacationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcVacationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcVacationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcVacationNotify::MergeFrom(const GuildRpcVacationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vacationinfo()) {
      mutable_vacationinfo()->::GuildVacationInfo::MergeFrom(from.vacationinfo());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcVacationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcVacationNotify::CopyFrom(const GuildRpcVacationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcVacationNotify::IsInitialized() const {

  return true;
}

void GuildRpcVacationNotify::Swap(GuildRpcVacationNotify* other) {
  if (other != this) {
    std::swap(vacationinfo_, other->vacationinfo_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcVacationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcVacationNotify_descriptor_;
  metadata.reflection = GuildRpcVacationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcReplyVacationNotify::GuildRpcReplyVacationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcReplyVacationNotify::InitAsDefaultInstance() {
}

GuildRpcReplyVacationNotify::GuildRpcReplyVacationNotify(const GuildRpcReplyVacationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcReplyVacationNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcReplyVacationNotify::~GuildRpcReplyVacationNotify() {
  SharedDtor();
}

void GuildRpcReplyVacationNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcReplyVacationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcReplyVacationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcReplyVacationNotify_descriptor_;
}

const GuildRpcReplyVacationNotify& GuildRpcReplyVacationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcReplyVacationNotify* GuildRpcReplyVacationNotify::default_instance_ = NULL;

GuildRpcReplyVacationNotify* GuildRpcReplyVacationNotify::New() const {
  return new GuildRpcReplyVacationNotify;
}

void GuildRpcReplyVacationNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcReplyVacationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcReplyVacationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcReplyVacationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcReplyVacationNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcReplyVacationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcReplyVacationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcReplyVacationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcReplyVacationNotify::MergeFrom(const GuildRpcReplyVacationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcReplyVacationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcReplyVacationNotify::CopyFrom(const GuildRpcReplyVacationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcReplyVacationNotify::IsInitialized() const {

  return true;
}

void GuildRpcReplyVacationNotify::Swap(GuildRpcReplyVacationNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcReplyVacationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcReplyVacationNotify_descriptor_;
  metadata.reflection = GuildRpcReplyVacationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskApplyListAsk::GuildRpcAskApplyListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskApplyListAsk::InitAsDefaultInstance() {
}

GuildRpcAskApplyListAsk::GuildRpcAskApplyListAsk(const GuildRpcAskApplyListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskApplyListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskApplyListAsk::~GuildRpcAskApplyListAsk() {
  SharedDtor();
}

void GuildRpcAskApplyListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskApplyListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskApplyListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskApplyListAsk_descriptor_;
}

const GuildRpcAskApplyListAsk& GuildRpcAskApplyListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskApplyListAsk* GuildRpcAskApplyListAsk::default_instance_ = NULL;

GuildRpcAskApplyListAsk* GuildRpcAskApplyListAsk::New() const {
  return new GuildRpcAskApplyListAsk;
}

void GuildRpcAskApplyListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskApplyListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskApplyListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskApplyListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskApplyListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskApplyListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskApplyListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskApplyListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskApplyListAsk::MergeFrom(const GuildRpcAskApplyListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskApplyListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskApplyListAsk::CopyFrom(const GuildRpcAskApplyListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskApplyListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskApplyListAsk::Swap(GuildRpcAskApplyListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskApplyListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskApplyListAsk_descriptor_;
  metadata.reflection = GuildRpcAskApplyListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskApplyListReply::kResultFieldNumber;
const int GuildRpcAskApplyListReply::kGuildMemberTinyInfoListFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskApplyListReply::GuildRpcAskApplyListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskApplyListReply::InitAsDefaultInstance() {
}

GuildRpcAskApplyListReply::GuildRpcAskApplyListReply(const GuildRpcAskApplyListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskApplyListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskApplyListReply::~GuildRpcAskApplyListReply() {
  SharedDtor();
}

void GuildRpcAskApplyListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskApplyListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskApplyListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskApplyListReply_descriptor_;
}

const GuildRpcAskApplyListReply& GuildRpcAskApplyListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskApplyListReply* GuildRpcAskApplyListReply::default_instance_ = NULL;

GuildRpcAskApplyListReply* GuildRpcAskApplyListReply::New() const {
  return new GuildRpcAskApplyListReply;
}

void GuildRpcAskApplyListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  guildmembertinyinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskApplyListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberTinyInfoList;
        break;
      }

      // repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildMemberTinyInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildmembertinyinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberTinyInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskApplyListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
  for (int i = 0; i < this->guildmembertinyinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildmembertinyinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskApplyListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
  for (int i = 0; i < this->guildmembertinyinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildmembertinyinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskApplyListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildMemberTinyInfo GuildMemberTinyInfoList = 2;
  total_size += 1 * this->guildmembertinyinfolist_size();
  for (int i = 0; i < this->guildmembertinyinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildmembertinyinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskApplyListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskApplyListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskApplyListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskApplyListReply::MergeFrom(const GuildRpcAskApplyListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildmembertinyinfolist_.MergeFrom(from.guildmembertinyinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskApplyListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskApplyListReply::CopyFrom(const GuildRpcAskApplyListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskApplyListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskApplyListReply::Swap(GuildRpcAskApplyListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    guildmembertinyinfolist_.Swap(&other->guildmembertinyinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskApplyListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskApplyListReply_descriptor_;
  metadata.reflection = GuildRpcAskApplyListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyGuildOperationAsk::kGuidFieldNumber;
const int GuildRpcApplyGuildOperationAsk::kOperationFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyGuildOperationAsk::GuildRpcApplyGuildOperationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyGuildOperationAsk::InitAsDefaultInstance() {
}

GuildRpcApplyGuildOperationAsk::GuildRpcApplyGuildOperationAsk(const GuildRpcApplyGuildOperationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyGuildOperationAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  operation_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyGuildOperationAsk::~GuildRpcApplyGuildOperationAsk() {
  SharedDtor();
}

void GuildRpcApplyGuildOperationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcApplyGuildOperationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyGuildOperationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyGuildOperationAsk_descriptor_;
}

const GuildRpcApplyGuildOperationAsk& GuildRpcApplyGuildOperationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyGuildOperationAsk* GuildRpcApplyGuildOperationAsk::default_instance_ = NULL;

GuildRpcApplyGuildOperationAsk* GuildRpcApplyGuildOperationAsk::New() const {
  return new GuildRpcApplyGuildOperationAsk;
}

void GuildRpcApplyGuildOperationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    operation_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyGuildOperationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Operation;
        break;
      }

      // optional int32 Operation = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyGuildOperationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 Operation = 2 [default = -1];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyGuildOperationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 Operation = 2 [default = -1];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyGuildOperationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 Operation = 2 [default = -1];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyGuildOperationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyGuildOperationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyGuildOperationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyGuildOperationAsk::MergeFrom(const GuildRpcApplyGuildOperationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyGuildOperationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyGuildOperationAsk::CopyFrom(const GuildRpcApplyGuildOperationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyGuildOperationAsk::IsInitialized() const {

  return true;
}

void GuildRpcApplyGuildOperationAsk::Swap(GuildRpcApplyGuildOperationAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyGuildOperationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyGuildOperationAsk_descriptor_;
  metadata.reflection = GuildRpcApplyGuildOperationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyGuildOperationReply::kResultFieldNumber;
const int GuildRpcApplyGuildOperationReply::kOperationFieldNumber;
const int GuildRpcApplyGuildOperationReply::kMemberInfoListFieldNumber;
const int GuildRpcApplyGuildOperationReply::kOnlineCountFieldNumber;
const int GuildRpcApplyGuildOperationReply::kMemberCountFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyGuildOperationReply::GuildRpcApplyGuildOperationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyGuildOperationReply::InitAsDefaultInstance() {
}

GuildRpcApplyGuildOperationReply::GuildRpcApplyGuildOperationReply(const GuildRpcApplyGuildOperationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyGuildOperationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  operation_ = -1;
  onlinecount_ = -1;
  membercount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyGuildOperationReply::~GuildRpcApplyGuildOperationReply() {
  SharedDtor();
}

void GuildRpcApplyGuildOperationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcApplyGuildOperationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyGuildOperationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyGuildOperationReply_descriptor_;
}

const GuildRpcApplyGuildOperationReply& GuildRpcApplyGuildOperationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyGuildOperationReply* GuildRpcApplyGuildOperationReply::default_instance_ = NULL;

GuildRpcApplyGuildOperationReply* GuildRpcApplyGuildOperationReply::New() const {
  return new GuildRpcApplyGuildOperationReply;
}

void GuildRpcApplyGuildOperationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    operation_ = -1;
    onlinecount_ = -1;
    membercount_ = -1;
  }
  memberinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyGuildOperationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Operation;
        break;
      }

      // optional int32 Operation = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MemberInfoList;
        break;
      }

      // repeated .GuildMemberInfo MemberInfoList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MemberInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MemberInfoList;
        if (input->ExpectTag(40)) goto parse_OnlineCount;
        break;
      }

      // optional int32 OnlineCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));
          set_has_onlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MemberCount;
        break;
      }

      // optional int32 MemberCount = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyGuildOperationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operation(), output);
  }

  // repeated .GuildMemberInfo MemberInfoList = 4;
  for (int i = 0; i < this->memberinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberinfolist(i), output);
  }

  // optional int32 OnlineCount = 5 [default = -1];
  if (has_onlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onlinecount(), output);
  }

  // optional int32 MemberCount = 6 [default = -1];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->membercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyGuildOperationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operation(), target);
  }

  // repeated .GuildMemberInfo MemberInfoList = 4;
  for (int i = 0; i < this->memberinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberinfolist(i), target);
  }

  // optional int32 OnlineCount = 5 [default = -1];
  if (has_onlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onlinecount(), target);
  }

  // optional int32 MemberCount = 6 [default = -1];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->membercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyGuildOperationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Operation = 3 [default = -1];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }

    // optional int32 OnlineCount = 5 [default = -1];
    if (has_onlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecount());
    }

    // optional int32 MemberCount = 6 [default = -1];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membercount());
    }

  }
  // repeated .GuildMemberInfo MemberInfoList = 4;
  total_size += 1 * this->memberinfolist_size();
  for (int i = 0; i < this->memberinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyGuildOperationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyGuildOperationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyGuildOperationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyGuildOperationReply::MergeFrom(const GuildRpcApplyGuildOperationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfolist_.MergeFrom(from.memberinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_onlinecount()) {
      set_onlinecount(from.onlinecount());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyGuildOperationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyGuildOperationReply::CopyFrom(const GuildRpcApplyGuildOperationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyGuildOperationReply::IsInitialized() const {

  return true;
}

void GuildRpcApplyGuildOperationReply::Swap(GuildRpcApplyGuildOperationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(operation_, other->operation_);
    memberinfolist_.Swap(&other->memberinfolist_);
    std::swap(onlinecount_, other->onlinecount_);
    std::swap(membercount_, other->membercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyGuildOperationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyGuildOperationReply_descriptor_;
  metadata.reflection = GuildRpcApplyGuildOperationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyGuildNotify::kGuildIDFieldNumber;
const int GuildRpcApplyGuildNotify::kGuildNameFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyGuildNotify::GuildRpcApplyGuildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyGuildNotify::InitAsDefaultInstance() {
}

GuildRpcApplyGuildNotify::GuildRpcApplyGuildNotify(const GuildRpcApplyGuildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyGuildNotify::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyGuildNotify::~GuildRpcApplyGuildNotify() {
  SharedDtor();
}

void GuildRpcApplyGuildNotify::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcApplyGuildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyGuildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyGuildNotify_descriptor_;
}

const GuildRpcApplyGuildNotify& GuildRpcApplyGuildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyGuildNotify* GuildRpcApplyGuildNotify::default_instance_ = NULL;

GuildRpcApplyGuildNotify* GuildRpcApplyGuildNotify::New() const {
  return new GuildRpcApplyGuildNotify;
}

void GuildRpcApplyGuildNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyGuildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyGuildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 GuildID = 1 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyGuildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 GuildID = 1 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyGuildNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildID = 1 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyGuildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyGuildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyGuildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyGuildNotify::MergeFrom(const GuildRpcApplyGuildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyGuildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyGuildNotify::CopyFrom(const GuildRpcApplyGuildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyGuildNotify::IsInitialized() const {

  return true;
}

void GuildRpcApplyGuildNotify::Swap(GuildRpcApplyGuildNotify* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyGuildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyGuildNotify_descriptor_;
  metadata.reflection = GuildRpcApplyGuildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyLimitSettingAsk::kIsAutoJoinFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyLimitSettingAsk::GuildRpcApplyLimitSettingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyLimitSettingAsk::InitAsDefaultInstance() {
}

GuildRpcApplyLimitSettingAsk::GuildRpcApplyLimitSettingAsk(const GuildRpcApplyLimitSettingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyLimitSettingAsk::SharedCtor() {
  _cached_size_ = 0;
  isautojoin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyLimitSettingAsk::~GuildRpcApplyLimitSettingAsk() {
  SharedDtor();
}

void GuildRpcApplyLimitSettingAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcApplyLimitSettingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyLimitSettingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyLimitSettingAsk_descriptor_;
}

const GuildRpcApplyLimitSettingAsk& GuildRpcApplyLimitSettingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyLimitSettingAsk* GuildRpcApplyLimitSettingAsk::default_instance_ = NULL;

GuildRpcApplyLimitSettingAsk* GuildRpcApplyLimitSettingAsk::New() const {
  return new GuildRpcApplyLimitSettingAsk;
}

void GuildRpcApplyLimitSettingAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isautojoin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyLimitSettingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsAutoJoin = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautojoin_)));
          set_has_isautojoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyLimitSettingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsAutoJoin = 1 [default = false];
  if (has_isautojoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isautojoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyLimitSettingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsAutoJoin = 1 [default = false];
  if (has_isautojoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isautojoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyLimitSettingAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsAutoJoin = 1 [default = false];
    if (has_isautojoin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyLimitSettingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyLimitSettingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyLimitSettingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyLimitSettingAsk::MergeFrom(const GuildRpcApplyLimitSettingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isautojoin()) {
      set_isautojoin(from.isautojoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyLimitSettingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyLimitSettingAsk::CopyFrom(const GuildRpcApplyLimitSettingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyLimitSettingAsk::IsInitialized() const {

  return true;
}

void GuildRpcApplyLimitSettingAsk::Swap(GuildRpcApplyLimitSettingAsk* other) {
  if (other != this) {
    std::swap(isautojoin_, other->isautojoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyLimitSettingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyLimitSettingAsk_descriptor_;
  metadata.reflection = GuildRpcApplyLimitSettingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyLimitSettingReply::kResultFieldNumber;
const int GuildRpcApplyLimitSettingReply::kIsAutoJoinFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyLimitSettingReply::GuildRpcApplyLimitSettingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyLimitSettingReply::InitAsDefaultInstance() {
}

GuildRpcApplyLimitSettingReply::GuildRpcApplyLimitSettingReply(const GuildRpcApplyLimitSettingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyLimitSettingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  isautojoin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyLimitSettingReply::~GuildRpcApplyLimitSettingReply() {
  SharedDtor();
}

void GuildRpcApplyLimitSettingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcApplyLimitSettingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyLimitSettingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyLimitSettingReply_descriptor_;
}

const GuildRpcApplyLimitSettingReply& GuildRpcApplyLimitSettingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyLimitSettingReply* GuildRpcApplyLimitSettingReply::default_instance_ = NULL;

GuildRpcApplyLimitSettingReply* GuildRpcApplyLimitSettingReply::New() const {
  return new GuildRpcApplyLimitSettingReply;
}

void GuildRpcApplyLimitSettingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    isautojoin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyLimitSettingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsAutoJoin;
        break;
      }

      // optional bool IsAutoJoin = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautojoin_)));
          set_has_isautojoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyLimitSettingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bool IsAutoJoin = 2 [default = false];
  if (has_isautojoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isautojoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyLimitSettingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bool IsAutoJoin = 2 [default = false];
  if (has_isautojoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isautojoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyLimitSettingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bool IsAutoJoin = 2 [default = false];
    if (has_isautojoin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyLimitSettingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyLimitSettingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyLimitSettingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyLimitSettingReply::MergeFrom(const GuildRpcApplyLimitSettingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isautojoin()) {
      set_isautojoin(from.isautojoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyLimitSettingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyLimitSettingReply::CopyFrom(const GuildRpcApplyLimitSettingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyLimitSettingReply::IsInitialized() const {

  return true;
}

void GuildRpcApplyLimitSettingReply::Swap(GuildRpcApplyLimitSettingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(isautojoin_, other->isautojoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyLimitSettingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyLimitSettingReply_descriptor_;
  metadata.reflection = GuildRpcApplyLimitSettingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskJurisdictionListAsk::GuildRpcAskJurisdictionListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskJurisdictionListAsk::InitAsDefaultInstance() {
}

GuildRpcAskJurisdictionListAsk::GuildRpcAskJurisdictionListAsk(const GuildRpcAskJurisdictionListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskJurisdictionListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskJurisdictionListAsk::~GuildRpcAskJurisdictionListAsk() {
  SharedDtor();
}

void GuildRpcAskJurisdictionListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskJurisdictionListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskJurisdictionListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskJurisdictionListAsk_descriptor_;
}

const GuildRpcAskJurisdictionListAsk& GuildRpcAskJurisdictionListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskJurisdictionListAsk* GuildRpcAskJurisdictionListAsk::default_instance_ = NULL;

GuildRpcAskJurisdictionListAsk* GuildRpcAskJurisdictionListAsk::New() const {
  return new GuildRpcAskJurisdictionListAsk;
}

void GuildRpcAskJurisdictionListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskJurisdictionListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskJurisdictionListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskJurisdictionListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskJurisdictionListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskJurisdictionListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskJurisdictionListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskJurisdictionListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskJurisdictionListAsk::MergeFrom(const GuildRpcAskJurisdictionListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskJurisdictionListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskJurisdictionListAsk::CopyFrom(const GuildRpcAskJurisdictionListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskJurisdictionListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskJurisdictionListAsk::Swap(GuildRpcAskJurisdictionListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskJurisdictionListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskJurisdictionListAsk_descriptor_;
  metadata.reflection = GuildRpcAskJurisdictionListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskJurisdictionListReply::kResultFieldNumber;
const int GuildRpcAskJurisdictionListReply::kJurisdictionListFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskJurisdictionListReply::GuildRpcAskJurisdictionListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskJurisdictionListReply::InitAsDefaultInstance() {
}

GuildRpcAskJurisdictionListReply::GuildRpcAskJurisdictionListReply(const GuildRpcAskJurisdictionListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskJurisdictionListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskJurisdictionListReply::~GuildRpcAskJurisdictionListReply() {
  SharedDtor();
}

void GuildRpcAskJurisdictionListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskJurisdictionListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskJurisdictionListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskJurisdictionListReply_descriptor_;
}

const GuildRpcAskJurisdictionListReply& GuildRpcAskJurisdictionListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskJurisdictionListReply* GuildRpcAskJurisdictionListReply::default_instance_ = NULL;

GuildRpcAskJurisdictionListReply* GuildRpcAskJurisdictionListReply::New() const {
  return new GuildRpcAskJurisdictionListReply;
}

void GuildRpcAskJurisdictionListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  jurisdictionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskJurisdictionListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JurisdictionList;
        break;
      }

      // repeated .GuildOfficeJurisdiction JurisdictionList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JurisdictionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jurisdictionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JurisdictionList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskJurisdictionListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildOfficeJurisdiction JurisdictionList = 2;
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jurisdictionlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskJurisdictionListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildOfficeJurisdiction JurisdictionList = 2;
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jurisdictionlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskJurisdictionListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildOfficeJurisdiction JurisdictionList = 2;
  total_size += 1 * this->jurisdictionlist_size();
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jurisdictionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskJurisdictionListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskJurisdictionListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskJurisdictionListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskJurisdictionListReply::MergeFrom(const GuildRpcAskJurisdictionListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  jurisdictionlist_.MergeFrom(from.jurisdictionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskJurisdictionListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskJurisdictionListReply::CopyFrom(const GuildRpcAskJurisdictionListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskJurisdictionListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskJurisdictionListReply::Swap(GuildRpcAskJurisdictionListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    jurisdictionlist_.Swap(&other->jurisdictionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskJurisdictionListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskJurisdictionListReply_descriptor_;
  metadata.reflection = GuildRpcAskJurisdictionListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSetJurisdictionAsk::kSetListFieldNumber;
#endif  // !_MSC_VER

GuildRpcSetJurisdictionAsk::GuildRpcSetJurisdictionAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSetJurisdictionAsk::InitAsDefaultInstance() {
  setlist_ = const_cast< ::GuildOfficeJurisdiction*>(&::GuildOfficeJurisdiction::default_instance());
}

GuildRpcSetJurisdictionAsk::GuildRpcSetJurisdictionAsk(const GuildRpcSetJurisdictionAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSetJurisdictionAsk::SharedCtor() {
  _cached_size_ = 0;
  setlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSetJurisdictionAsk::~GuildRpcSetJurisdictionAsk() {
  SharedDtor();
}

void GuildRpcSetJurisdictionAsk::SharedDtor() {
  if (this != default_instance_) {
    delete setlist_;
  }
}

void GuildRpcSetJurisdictionAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSetJurisdictionAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSetJurisdictionAsk_descriptor_;
}

const GuildRpcSetJurisdictionAsk& GuildRpcSetJurisdictionAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSetJurisdictionAsk* GuildRpcSetJurisdictionAsk::default_instance_ = NULL;

GuildRpcSetJurisdictionAsk* GuildRpcSetJurisdictionAsk::New() const {
  return new GuildRpcSetJurisdictionAsk;
}

void GuildRpcSetJurisdictionAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_setlist()) {
      if (setlist_ != NULL) setlist_->::GuildOfficeJurisdiction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSetJurisdictionAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildOfficeJurisdiction SetList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSetJurisdictionAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildOfficeJurisdiction SetList = 1;
  if (has_setlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->setlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSetJurisdictionAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildOfficeJurisdiction SetList = 1;
  if (has_setlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->setlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSetJurisdictionAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildOfficeJurisdiction SetList = 1;
    if (has_setlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSetJurisdictionAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSetJurisdictionAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSetJurisdictionAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSetJurisdictionAsk::MergeFrom(const GuildRpcSetJurisdictionAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setlist()) {
      mutable_setlist()->::GuildOfficeJurisdiction::MergeFrom(from.setlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSetJurisdictionAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSetJurisdictionAsk::CopyFrom(const GuildRpcSetJurisdictionAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSetJurisdictionAsk::IsInitialized() const {

  return true;
}

void GuildRpcSetJurisdictionAsk::Swap(GuildRpcSetJurisdictionAsk* other) {
  if (other != this) {
    std::swap(setlist_, other->setlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSetJurisdictionAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSetJurisdictionAsk_descriptor_;
  metadata.reflection = GuildRpcSetJurisdictionAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSetJurisdictionReply::kResultFieldNumber;
const int GuildRpcSetJurisdictionReply::kSetListFieldNumber;
#endif  // !_MSC_VER

GuildRpcSetJurisdictionReply::GuildRpcSetJurisdictionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSetJurisdictionReply::InitAsDefaultInstance() {
  setlist_ = const_cast< ::GuildOfficeJurisdiction*>(&::GuildOfficeJurisdiction::default_instance());
}

GuildRpcSetJurisdictionReply::GuildRpcSetJurisdictionReply(const GuildRpcSetJurisdictionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSetJurisdictionReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  setlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSetJurisdictionReply::~GuildRpcSetJurisdictionReply() {
  SharedDtor();
}

void GuildRpcSetJurisdictionReply::SharedDtor() {
  if (this != default_instance_) {
    delete setlist_;
  }
}

void GuildRpcSetJurisdictionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSetJurisdictionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSetJurisdictionReply_descriptor_;
}

const GuildRpcSetJurisdictionReply& GuildRpcSetJurisdictionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSetJurisdictionReply* GuildRpcSetJurisdictionReply::default_instance_ = NULL;

GuildRpcSetJurisdictionReply* GuildRpcSetJurisdictionReply::New() const {
  return new GuildRpcSetJurisdictionReply;
}

void GuildRpcSetJurisdictionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_setlist()) {
      if (setlist_ != NULL) setlist_->::GuildOfficeJurisdiction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSetJurisdictionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SetList;
        break;
      }

      // optional .GuildOfficeJurisdiction SetList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SetList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSetJurisdictionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GuildOfficeJurisdiction SetList = 2;
  if (has_setlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSetJurisdictionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GuildOfficeJurisdiction SetList = 2;
  if (has_setlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSetJurisdictionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GuildOfficeJurisdiction SetList = 2;
    if (has_setlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSetJurisdictionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSetJurisdictionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSetJurisdictionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSetJurisdictionReply::MergeFrom(const GuildRpcSetJurisdictionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_setlist()) {
      mutable_setlist()->::GuildOfficeJurisdiction::MergeFrom(from.setlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSetJurisdictionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSetJurisdictionReply::CopyFrom(const GuildRpcSetJurisdictionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSetJurisdictionReply::IsInitialized() const {

  return true;
}

void GuildRpcSetJurisdictionReply::Swap(GuildRpcSetJurisdictionReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(setlist_, other->setlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSetJurisdictionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSetJurisdictionReply_descriptor_;
  metadata.reflection = GuildRpcSetJurisdictionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskVacationListAsk::GuildRpcAskVacationListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskVacationListAsk::InitAsDefaultInstance() {
}

GuildRpcAskVacationListAsk::GuildRpcAskVacationListAsk(const GuildRpcAskVacationListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskVacationListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskVacationListAsk::~GuildRpcAskVacationListAsk() {
  SharedDtor();
}

void GuildRpcAskVacationListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskVacationListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskVacationListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskVacationListAsk_descriptor_;
}

const GuildRpcAskVacationListAsk& GuildRpcAskVacationListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskVacationListAsk* GuildRpcAskVacationListAsk::default_instance_ = NULL;

GuildRpcAskVacationListAsk* GuildRpcAskVacationListAsk::New() const {
  return new GuildRpcAskVacationListAsk;
}

void GuildRpcAskVacationListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskVacationListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskVacationListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskVacationListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskVacationListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskVacationListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskVacationListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskVacationListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskVacationListAsk::MergeFrom(const GuildRpcAskVacationListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskVacationListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskVacationListAsk::CopyFrom(const GuildRpcAskVacationListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskVacationListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskVacationListAsk::Swap(GuildRpcAskVacationListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskVacationListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskVacationListAsk_descriptor_;
  metadata.reflection = GuildRpcAskVacationListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskVacationListReply::kResultFieldNumber;
const int GuildRpcAskVacationListReply::kVacationListFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskVacationListReply::GuildRpcAskVacationListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskVacationListReply::InitAsDefaultInstance() {
}

GuildRpcAskVacationListReply::GuildRpcAskVacationListReply(const GuildRpcAskVacationListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskVacationListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskVacationListReply::~GuildRpcAskVacationListReply() {
  SharedDtor();
}

void GuildRpcAskVacationListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskVacationListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskVacationListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskVacationListReply_descriptor_;
}

const GuildRpcAskVacationListReply& GuildRpcAskVacationListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskVacationListReply* GuildRpcAskVacationListReply::default_instance_ = NULL;

GuildRpcAskVacationListReply* GuildRpcAskVacationListReply::New() const {
  return new GuildRpcAskVacationListReply;
}

void GuildRpcAskVacationListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  vacationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskVacationListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VacationList;
        break;
      }

      // repeated .GuildVacationInfo VacationList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VacationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vacationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VacationList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskVacationListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildVacationInfo VacationList = 2;
  for (int i = 0; i < this->vacationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vacationlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskVacationListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildVacationInfo VacationList = 2;
  for (int i = 0; i < this->vacationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vacationlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskVacationListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildVacationInfo VacationList = 2;
  total_size += 1 * this->vacationlist_size();
  for (int i = 0; i < this->vacationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vacationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskVacationListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskVacationListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskVacationListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskVacationListReply::MergeFrom(const GuildRpcAskVacationListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  vacationlist_.MergeFrom(from.vacationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskVacationListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskVacationListReply::CopyFrom(const GuildRpcAskVacationListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskVacationListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskVacationListReply::Swap(GuildRpcAskVacationListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    vacationlist_.Swap(&other->vacationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskVacationListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskVacationListReply_descriptor_;
  metadata.reflection = GuildRpcAskVacationListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcVacationGuildOperationAsk::kGuidFieldNumber;
const int GuildRpcVacationGuildOperationAsk::kOperationFieldNumber;
#endif  // !_MSC_VER

GuildRpcVacationGuildOperationAsk::GuildRpcVacationGuildOperationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcVacationGuildOperationAsk::InitAsDefaultInstance() {
}

GuildRpcVacationGuildOperationAsk::GuildRpcVacationGuildOperationAsk(const GuildRpcVacationGuildOperationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcVacationGuildOperationAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  operation_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcVacationGuildOperationAsk::~GuildRpcVacationGuildOperationAsk() {
  SharedDtor();
}

void GuildRpcVacationGuildOperationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcVacationGuildOperationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcVacationGuildOperationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcVacationGuildOperationAsk_descriptor_;
}

const GuildRpcVacationGuildOperationAsk& GuildRpcVacationGuildOperationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcVacationGuildOperationAsk* GuildRpcVacationGuildOperationAsk::default_instance_ = NULL;

GuildRpcVacationGuildOperationAsk* GuildRpcVacationGuildOperationAsk::New() const {
  return new GuildRpcVacationGuildOperationAsk;
}

void GuildRpcVacationGuildOperationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    operation_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcVacationGuildOperationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Operation;
        break;
      }

      // optional int32 Operation = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcVacationGuildOperationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcVacationGuildOperationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcVacationGuildOperationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 2 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 Operation = 3 [default = -1];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcVacationGuildOperationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcVacationGuildOperationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcVacationGuildOperationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcVacationGuildOperationAsk::MergeFrom(const GuildRpcVacationGuildOperationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcVacationGuildOperationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcVacationGuildOperationAsk::CopyFrom(const GuildRpcVacationGuildOperationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcVacationGuildOperationAsk::IsInitialized() const {

  return true;
}

void GuildRpcVacationGuildOperationAsk::Swap(GuildRpcVacationGuildOperationAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcVacationGuildOperationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcVacationGuildOperationAsk_descriptor_;
  metadata.reflection = GuildRpcVacationGuildOperationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcVacationGuildOperationReply::kResultFieldNumber;
const int GuildRpcVacationGuildOperationReply::kGuidFieldNumber;
const int GuildRpcVacationGuildOperationReply::kOperationFieldNumber;
#endif  // !_MSC_VER

GuildRpcVacationGuildOperationReply::GuildRpcVacationGuildOperationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcVacationGuildOperationReply::InitAsDefaultInstance() {
}

GuildRpcVacationGuildOperationReply::GuildRpcVacationGuildOperationReply(const GuildRpcVacationGuildOperationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcVacationGuildOperationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guid_ = GOOGLE_ULONGLONG(0);
  operation_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcVacationGuildOperationReply::~GuildRpcVacationGuildOperationReply() {
  SharedDtor();
}

void GuildRpcVacationGuildOperationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcVacationGuildOperationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcVacationGuildOperationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcVacationGuildOperationReply_descriptor_;
}

const GuildRpcVacationGuildOperationReply& GuildRpcVacationGuildOperationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcVacationGuildOperationReply* GuildRpcVacationGuildOperationReply::default_instance_ = NULL;

GuildRpcVacationGuildOperationReply* GuildRpcVacationGuildOperationReply::New() const {
  return new GuildRpcVacationGuildOperationReply;
}

void GuildRpcVacationGuildOperationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    guid_ = GOOGLE_ULONGLONG(0);
    operation_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcVacationGuildOperationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Guid;
        break;
      }

      // optional uint64 Guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Operation;
        break;
      }

      // optional int32 Operation = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcVacationGuildOperationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcVacationGuildOperationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 Operation = 3 [default = -1];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcVacationGuildOperationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 Guid = 2 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 Operation = 3 [default = -1];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcVacationGuildOperationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcVacationGuildOperationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcVacationGuildOperationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcVacationGuildOperationReply::MergeFrom(const GuildRpcVacationGuildOperationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcVacationGuildOperationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcVacationGuildOperationReply::CopyFrom(const GuildRpcVacationGuildOperationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcVacationGuildOperationReply::IsInitialized() const {

  return true;
}

void GuildRpcVacationGuildOperationReply::Swap(GuildRpcVacationGuildOperationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcVacationGuildOperationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcVacationGuildOperationReply_descriptor_;
  metadata.reflection = GuildRpcVacationGuildOperationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcApplyGuildToOfficeNotify::kGuildMemberTinyInfoFieldNumber;
#endif  // !_MSC_VER

GuildRpcApplyGuildToOfficeNotify::GuildRpcApplyGuildToOfficeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcApplyGuildToOfficeNotify::InitAsDefaultInstance() {
  guildmembertinyinfo_ = const_cast< ::GuildMemberTinyInfo*>(&::GuildMemberTinyInfo::default_instance());
}

GuildRpcApplyGuildToOfficeNotify::GuildRpcApplyGuildToOfficeNotify(const GuildRpcApplyGuildToOfficeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcApplyGuildToOfficeNotify::SharedCtor() {
  _cached_size_ = 0;
  guildmembertinyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcApplyGuildToOfficeNotify::~GuildRpcApplyGuildToOfficeNotify() {
  SharedDtor();
}

void GuildRpcApplyGuildToOfficeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete guildmembertinyinfo_;
  }
}

void GuildRpcApplyGuildToOfficeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcApplyGuildToOfficeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcApplyGuildToOfficeNotify_descriptor_;
}

const GuildRpcApplyGuildToOfficeNotify& GuildRpcApplyGuildToOfficeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcApplyGuildToOfficeNotify* GuildRpcApplyGuildToOfficeNotify::default_instance_ = NULL;

GuildRpcApplyGuildToOfficeNotify* GuildRpcApplyGuildToOfficeNotify::New() const {
  return new GuildRpcApplyGuildToOfficeNotify;
}

void GuildRpcApplyGuildToOfficeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildmembertinyinfo()) {
      if (guildmembertinyinfo_ != NULL) guildmembertinyinfo_->::GuildMemberTinyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcApplyGuildToOfficeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildmembertinyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcApplyGuildToOfficeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
  if (has_guildmembertinyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildmembertinyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcApplyGuildToOfficeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
  if (has_guildmembertinyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildmembertinyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcApplyGuildToOfficeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildMemberTinyInfo GuildMemberTinyInfo = 1;
    if (has_guildmembertinyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildmembertinyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcApplyGuildToOfficeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcApplyGuildToOfficeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcApplyGuildToOfficeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcApplyGuildToOfficeNotify::MergeFrom(const GuildRpcApplyGuildToOfficeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildmembertinyinfo()) {
      mutable_guildmembertinyinfo()->::GuildMemberTinyInfo::MergeFrom(from.guildmembertinyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcApplyGuildToOfficeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcApplyGuildToOfficeNotify::CopyFrom(const GuildRpcApplyGuildToOfficeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcApplyGuildToOfficeNotify::IsInitialized() const {

  return true;
}

void GuildRpcApplyGuildToOfficeNotify::Swap(GuildRpcApplyGuildToOfficeNotify* other) {
  if (other != this) {
    std::swap(guildmembertinyinfo_, other->guildmembertinyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcApplyGuildToOfficeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcApplyGuildToOfficeNotify_descriptor_;
  metadata.reflection = GuildRpcApplyGuildToOfficeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskBuildingInfoAsk::GuildRpcAskBuildingInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskBuildingInfoAsk::InitAsDefaultInstance() {
}

GuildRpcAskBuildingInfoAsk::GuildRpcAskBuildingInfoAsk(const GuildRpcAskBuildingInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskBuildingInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskBuildingInfoAsk::~GuildRpcAskBuildingInfoAsk() {
  SharedDtor();
}

void GuildRpcAskBuildingInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskBuildingInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskBuildingInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskBuildingInfoAsk_descriptor_;
}

const GuildRpcAskBuildingInfoAsk& GuildRpcAskBuildingInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskBuildingInfoAsk* GuildRpcAskBuildingInfoAsk::default_instance_ = NULL;

GuildRpcAskBuildingInfoAsk* GuildRpcAskBuildingInfoAsk::New() const {
  return new GuildRpcAskBuildingInfoAsk;
}

void GuildRpcAskBuildingInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskBuildingInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskBuildingInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskBuildingInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskBuildingInfoAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskBuildingInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskBuildingInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskBuildingInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskBuildingInfoAsk::MergeFrom(const GuildRpcAskBuildingInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskBuildingInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskBuildingInfoAsk::CopyFrom(const GuildRpcAskBuildingInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskBuildingInfoAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskBuildingInfoAsk::Swap(GuildRpcAskBuildingInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskBuildingInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskBuildingInfoAsk_descriptor_;
  metadata.reflection = GuildRpcAskBuildingInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskBuildingInfoReply::kResultFieldNumber;
const int GuildRpcAskBuildingInfoReply::kBuildingInfoListFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskBuildingInfoReply::GuildRpcAskBuildingInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskBuildingInfoReply::InitAsDefaultInstance() {
}

GuildRpcAskBuildingInfoReply::GuildRpcAskBuildingInfoReply(const GuildRpcAskBuildingInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskBuildingInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskBuildingInfoReply::~GuildRpcAskBuildingInfoReply() {
  SharedDtor();
}

void GuildRpcAskBuildingInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskBuildingInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskBuildingInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskBuildingInfoReply_descriptor_;
}

const GuildRpcAskBuildingInfoReply& GuildRpcAskBuildingInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskBuildingInfoReply* GuildRpcAskBuildingInfoReply::default_instance_ = NULL;

GuildRpcAskBuildingInfoReply* GuildRpcAskBuildingInfoReply::New() const {
  return new GuildRpcAskBuildingInfoReply;
}

void GuildRpcAskBuildingInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  buildinginfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskBuildingInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BuildingInfoList;
        break;
      }

      // repeated .GuildBuildingInfo BuildingInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuildingInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildinginfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BuildingInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskBuildingInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildBuildingInfo BuildingInfoList = 2;
  for (int i = 0; i < this->buildinginfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buildinginfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskBuildingInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildBuildingInfo BuildingInfoList = 2;
  for (int i = 0; i < this->buildinginfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buildinginfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskBuildingInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildBuildingInfo BuildingInfoList = 2;
  total_size += 1 * this->buildinginfolist_size();
  for (int i = 0; i < this->buildinginfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildinginfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskBuildingInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskBuildingInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskBuildingInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskBuildingInfoReply::MergeFrom(const GuildRpcAskBuildingInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildinginfolist_.MergeFrom(from.buildinginfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskBuildingInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskBuildingInfoReply::CopyFrom(const GuildRpcAskBuildingInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskBuildingInfoReply::IsInitialized() const {

  return true;
}

void GuildRpcAskBuildingInfoReply::Swap(GuildRpcAskBuildingInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    buildinginfolist_.Swap(&other->buildinginfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskBuildingInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskBuildingInfoReply_descriptor_;
  metadata.reflection = GuildRpcAskBuildingInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildingLvUpAsk::kBuildingTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildingLvUpAsk::GuildRpcBuildingLvUpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildingLvUpAsk::InitAsDefaultInstance() {
}

GuildRpcBuildingLvUpAsk::GuildRpcBuildingLvUpAsk(const GuildRpcBuildingLvUpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildingLvUpAsk::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildingLvUpAsk::~GuildRpcBuildingLvUpAsk() {
  SharedDtor();
}

void GuildRpcBuildingLvUpAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcBuildingLvUpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildingLvUpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildingLvUpAsk_descriptor_;
}

const GuildRpcBuildingLvUpAsk& GuildRpcBuildingLvUpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildingLvUpAsk* GuildRpcBuildingLvUpAsk::default_instance_ = NULL;

GuildRpcBuildingLvUpAsk* GuildRpcBuildingLvUpAsk::New() const {
  return new GuildRpcBuildingLvUpAsk;
}

void GuildRpcBuildingLvUpAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildingLvUpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BuildingType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildingLvUpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BuildingType = 2 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildingLvUpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BuildingType = 2 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildingLvUpAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BuildingType = 2 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildingLvUpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildingLvUpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildingLvUpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildingLvUpAsk::MergeFrom(const GuildRpcBuildingLvUpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildingLvUpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildingLvUpAsk::CopyFrom(const GuildRpcBuildingLvUpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildingLvUpAsk::IsInitialized() const {

  return true;
}

void GuildRpcBuildingLvUpAsk::Swap(GuildRpcBuildingLvUpAsk* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildingLvUpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildingLvUpAsk_descriptor_;
  metadata.reflection = GuildRpcBuildingLvUpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildingLvUpReply::kResultFieldNumber;
const int GuildRpcBuildingLvUpReply::kGuildBuildingInfoFieldNumber;
const int GuildRpcBuildingLvUpReply::kGuildMoneyFieldNumber;
const int GuildRpcBuildingLvUpReply::kGuildResourceFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildingLvUpReply::GuildRpcBuildingLvUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildingLvUpReply::InitAsDefaultInstance() {
  guildbuildinginfo_ = const_cast< ::GuildBuildingInfo*>(&::GuildBuildingInfo::default_instance());
}

GuildRpcBuildingLvUpReply::GuildRpcBuildingLvUpReply(const GuildRpcBuildingLvUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildingLvUpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildbuildinginfo_ = NULL;
  guildmoney_ = -1;
  guildresource_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildingLvUpReply::~GuildRpcBuildingLvUpReply() {
  SharedDtor();
}

void GuildRpcBuildingLvUpReply::SharedDtor() {
  if (this != default_instance_) {
    delete guildbuildinginfo_;
  }
}

void GuildRpcBuildingLvUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildingLvUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildingLvUpReply_descriptor_;
}

const GuildRpcBuildingLvUpReply& GuildRpcBuildingLvUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildingLvUpReply* GuildRpcBuildingLvUpReply::default_instance_ = NULL;

GuildRpcBuildingLvUpReply* GuildRpcBuildingLvUpReply::New() const {
  return new GuildRpcBuildingLvUpReply;
}

void GuildRpcBuildingLvUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_guildbuildinginfo()) {
      if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
    }
    guildmoney_ = -1;
    guildresource_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildingLvUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildBuildingInfo;
        break;
      }

      // optional .GuildBuildingInfo GuildBuildingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildBuildingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbuildinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GuildMoney;
        break;
      }

      // optional int32 GuildMoney = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildResource;
        break;
      }

      // optional int32 GuildResource = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildResource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildresource_)));
          set_has_guildresource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildingLvUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbuildinginfo(), output);
  }

  // optional int32 GuildMoney = 3 [default = -1];
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildmoney(), output);
  }

  // optional int32 GuildResource = 4 [default = -1];
  if (has_guildresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildresource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildingLvUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbuildinginfo(), target);
  }

  // optional int32 GuildMoney = 3 [default = -1];
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildmoney(), target);
  }

  // optional int32 GuildResource = 4 [default = -1];
  if (has_guildresource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildresource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildingLvUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GuildBuildingInfo GuildBuildingInfo = 2;
    if (has_guildbuildinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbuildinginfo());
    }

    // optional int32 GuildMoney = 3 [default = -1];
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

    // optional int32 GuildResource = 4 [default = -1];
    if (has_guildresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildresource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildingLvUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildingLvUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildingLvUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildingLvUpReply::MergeFrom(const GuildRpcBuildingLvUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildbuildinginfo()) {
      mutable_guildbuildinginfo()->::GuildBuildingInfo::MergeFrom(from.guildbuildinginfo());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
    if (from.has_guildresource()) {
      set_guildresource(from.guildresource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildingLvUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildingLvUpReply::CopyFrom(const GuildRpcBuildingLvUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildingLvUpReply::IsInitialized() const {

  return true;
}

void GuildRpcBuildingLvUpReply::Swap(GuildRpcBuildingLvUpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildbuildinginfo_, other->guildbuildinginfo_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(guildresource_, other->guildresource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildingLvUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildingLvUpReply_descriptor_;
  metadata.reflection = GuildRpcBuildingLvUpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildingLvSpeedUpAsk::kBuildingTypeFieldNumber;
const int GuildRpcBuildingLvSpeedUpAsk::kTimeFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildingLvSpeedUpAsk::GuildRpcBuildingLvSpeedUpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildingLvSpeedUpAsk::InitAsDefaultInstance() {
}

GuildRpcBuildingLvSpeedUpAsk::GuildRpcBuildingLvSpeedUpAsk(const GuildRpcBuildingLvSpeedUpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildingLvSpeedUpAsk::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = -1;
  time_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildingLvSpeedUpAsk::~GuildRpcBuildingLvSpeedUpAsk() {
  SharedDtor();
}

void GuildRpcBuildingLvSpeedUpAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcBuildingLvSpeedUpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildingLvSpeedUpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildingLvSpeedUpAsk_descriptor_;
}

const GuildRpcBuildingLvSpeedUpAsk& GuildRpcBuildingLvSpeedUpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildingLvSpeedUpAsk* GuildRpcBuildingLvSpeedUpAsk::default_instance_ = NULL;

GuildRpcBuildingLvSpeedUpAsk* GuildRpcBuildingLvSpeedUpAsk::New() const {
  return new GuildRpcBuildingLvSpeedUpAsk;
}

void GuildRpcBuildingLvSpeedUpAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = -1;
    time_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildingLvSpeedUpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BuildingType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // optional int32 Time = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildingLvSpeedUpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingtype(), output);
  }

  // optional int32 Time = 2 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildingLvSpeedUpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingtype(), target);
  }

  // optional int32 Time = 2 [default = -1];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildingLvSpeedUpAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BuildingType = 1 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

    // optional int32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildingLvSpeedUpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildingLvSpeedUpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildingLvSpeedUpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildingLvSpeedUpAsk::MergeFrom(const GuildRpcBuildingLvSpeedUpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildingLvSpeedUpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildingLvSpeedUpAsk::CopyFrom(const GuildRpcBuildingLvSpeedUpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildingLvSpeedUpAsk::IsInitialized() const {

  return true;
}

void GuildRpcBuildingLvSpeedUpAsk::Swap(GuildRpcBuildingLvSpeedUpAsk* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildingLvSpeedUpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildingLvSpeedUpAsk_descriptor_;
  metadata.reflection = GuildRpcBuildingLvSpeedUpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildingLvSpeedUpReply::kResultFieldNumber;
const int GuildRpcBuildingLvSpeedUpReply::kGuildBuildingInfoFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildingLvSpeedUpReply::GuildRpcBuildingLvSpeedUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildingLvSpeedUpReply::InitAsDefaultInstance() {
  guildbuildinginfo_ = const_cast< ::GuildBuildingInfo*>(&::GuildBuildingInfo::default_instance());
}

GuildRpcBuildingLvSpeedUpReply::GuildRpcBuildingLvSpeedUpReply(const GuildRpcBuildingLvSpeedUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildingLvSpeedUpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildbuildinginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildingLvSpeedUpReply::~GuildRpcBuildingLvSpeedUpReply() {
  SharedDtor();
}

void GuildRpcBuildingLvSpeedUpReply::SharedDtor() {
  if (this != default_instance_) {
    delete guildbuildinginfo_;
  }
}

void GuildRpcBuildingLvSpeedUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildingLvSpeedUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildingLvSpeedUpReply_descriptor_;
}

const GuildRpcBuildingLvSpeedUpReply& GuildRpcBuildingLvSpeedUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildingLvSpeedUpReply* GuildRpcBuildingLvSpeedUpReply::default_instance_ = NULL;

GuildRpcBuildingLvSpeedUpReply* GuildRpcBuildingLvSpeedUpReply::New() const {
  return new GuildRpcBuildingLvSpeedUpReply;
}

void GuildRpcBuildingLvSpeedUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_guildbuildinginfo()) {
      if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildingLvSpeedUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildBuildingInfo;
        break;
      }

      // optional .GuildBuildingInfo GuildBuildingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildBuildingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbuildinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildingLvSpeedUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbuildinginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildingLvSpeedUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbuildinginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildingLvSpeedUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GuildBuildingInfo GuildBuildingInfo = 2;
    if (has_guildbuildinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbuildinginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildingLvSpeedUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildingLvSpeedUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildingLvSpeedUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildingLvSpeedUpReply::MergeFrom(const GuildRpcBuildingLvSpeedUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildbuildinginfo()) {
      mutable_guildbuildinginfo()->::GuildBuildingInfo::MergeFrom(from.guildbuildinginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildingLvSpeedUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildingLvSpeedUpReply::CopyFrom(const GuildRpcBuildingLvSpeedUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildingLvSpeedUpReply::IsInitialized() const {

  return true;
}

void GuildRpcBuildingLvSpeedUpReply::Swap(GuildRpcBuildingLvSpeedUpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildbuildinginfo_, other->guildbuildinginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildingLvSpeedUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildingLvSpeedUpReply_descriptor_;
  metadata.reflection = GuildRpcBuildingLvSpeedUpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskBuildingContributionListAsk::kBuildingTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskBuildingContributionListAsk::GuildRpcAskBuildingContributionListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskBuildingContributionListAsk::InitAsDefaultInstance() {
}

GuildRpcAskBuildingContributionListAsk::GuildRpcAskBuildingContributionListAsk(const GuildRpcAskBuildingContributionListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskBuildingContributionListAsk::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskBuildingContributionListAsk::~GuildRpcAskBuildingContributionListAsk() {
  SharedDtor();
}

void GuildRpcAskBuildingContributionListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskBuildingContributionListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskBuildingContributionListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskBuildingContributionListAsk_descriptor_;
}

const GuildRpcAskBuildingContributionListAsk& GuildRpcAskBuildingContributionListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskBuildingContributionListAsk* GuildRpcAskBuildingContributionListAsk::default_instance_ = NULL;

GuildRpcAskBuildingContributionListAsk* GuildRpcAskBuildingContributionListAsk::New() const {
  return new GuildRpcAskBuildingContributionListAsk;
}

void GuildRpcAskBuildingContributionListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskBuildingContributionListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BuildingType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskBuildingContributionListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskBuildingContributionListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskBuildingContributionListAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BuildingType = 1 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskBuildingContributionListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskBuildingContributionListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskBuildingContributionListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskBuildingContributionListAsk::MergeFrom(const GuildRpcAskBuildingContributionListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskBuildingContributionListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskBuildingContributionListAsk::CopyFrom(const GuildRpcAskBuildingContributionListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskBuildingContributionListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskBuildingContributionListAsk::Swap(GuildRpcAskBuildingContributionListAsk* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskBuildingContributionListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskBuildingContributionListAsk_descriptor_;
  metadata.reflection = GuildRpcAskBuildingContributionListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskBuildingContributionListReply::kResultFieldNumber;
const int GuildRpcAskBuildingContributionListReply::kContributionListFieldNumber;
const int GuildRpcAskBuildingContributionListReply::kBuildingTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskBuildingContributionListReply::GuildRpcAskBuildingContributionListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskBuildingContributionListReply::InitAsDefaultInstance() {
}

GuildRpcAskBuildingContributionListReply::GuildRpcAskBuildingContributionListReply(const GuildRpcAskBuildingContributionListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskBuildingContributionListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  buildingtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskBuildingContributionListReply::~GuildRpcAskBuildingContributionListReply() {
  SharedDtor();
}

void GuildRpcAskBuildingContributionListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskBuildingContributionListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskBuildingContributionListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskBuildingContributionListReply_descriptor_;
}

const GuildRpcAskBuildingContributionListReply& GuildRpcAskBuildingContributionListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskBuildingContributionListReply* GuildRpcAskBuildingContributionListReply::default_instance_ = NULL;

GuildRpcAskBuildingContributionListReply* GuildRpcAskBuildingContributionListReply::New() const {
  return new GuildRpcAskBuildingContributionListReply;
}

void GuildRpcAskBuildingContributionListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    buildingtype_ = -1;
  }
  contributionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskBuildingContributionListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContributionList;
        break;
      }

      // repeated .GuildBuildingContributionInfo ContributionList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContributionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contributionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContributionList;
        if (input->ExpectTag(24)) goto parse_BuildingType;
        break;
      }

      // optional int32 BuildingType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuildingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskBuildingContributionListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildBuildingContributionInfo ContributionList = 2;
  for (int i = 0; i < this->contributionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contributionlist(i), output);
  }

  // optional int32 BuildingType = 3 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buildingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskBuildingContributionListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildBuildingContributionInfo ContributionList = 2;
  for (int i = 0; i < this->contributionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contributionlist(i), target);
  }

  // optional int32 BuildingType = 3 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buildingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskBuildingContributionListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 BuildingType = 3 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

  }
  // repeated .GuildBuildingContributionInfo ContributionList = 2;
  total_size += 1 * this->contributionlist_size();
  for (int i = 0; i < this->contributionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contributionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskBuildingContributionListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskBuildingContributionListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskBuildingContributionListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskBuildingContributionListReply::MergeFrom(const GuildRpcAskBuildingContributionListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  contributionlist_.MergeFrom(from.contributionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskBuildingContributionListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskBuildingContributionListReply::CopyFrom(const GuildRpcAskBuildingContributionListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskBuildingContributionListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskBuildingContributionListReply::Swap(GuildRpcAskBuildingContributionListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contributionlist_.Swap(&other->contributionlist_);
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskBuildingContributionListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskBuildingContributionListReply_descriptor_;
  metadata.reflection = GuildRpcAskBuildingContributionListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildingCanLvUpNotify::kBuildingTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildingCanLvUpNotify::GuildRpcBuildingCanLvUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildingCanLvUpNotify::InitAsDefaultInstance() {
}

GuildRpcBuildingCanLvUpNotify::GuildRpcBuildingCanLvUpNotify(const GuildRpcBuildingCanLvUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildingCanLvUpNotify::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildingCanLvUpNotify::~GuildRpcBuildingCanLvUpNotify() {
  SharedDtor();
}

void GuildRpcBuildingCanLvUpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcBuildingCanLvUpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildingCanLvUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildingCanLvUpNotify_descriptor_;
}

const GuildRpcBuildingCanLvUpNotify& GuildRpcBuildingCanLvUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildingCanLvUpNotify* GuildRpcBuildingCanLvUpNotify::default_instance_ = NULL;

GuildRpcBuildingCanLvUpNotify* GuildRpcBuildingCanLvUpNotify::New() const {
  return new GuildRpcBuildingCanLvUpNotify;
}

void GuildRpcBuildingCanLvUpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildingCanLvUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BuildingType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildingCanLvUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BuildingType = 2 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildingCanLvUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BuildingType = 2 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildingCanLvUpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BuildingType = 2 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildingCanLvUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildingCanLvUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildingCanLvUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildingCanLvUpNotify::MergeFrom(const GuildRpcBuildingCanLvUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildingCanLvUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildingCanLvUpNotify::CopyFrom(const GuildRpcBuildingCanLvUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildingCanLvUpNotify::IsInitialized() const {

  return true;
}

void GuildRpcBuildingCanLvUpNotify::Swap(GuildRpcBuildingCanLvUpNotify* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildingCanLvUpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildingCanLvUpNotify_descriptor_;
  metadata.reflection = GuildRpcBuildingCanLvUpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskGuildEventListAsk::GuildRpcAskGuildEventListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildEventListAsk::InitAsDefaultInstance() {
}

GuildRpcAskGuildEventListAsk::GuildRpcAskGuildEventListAsk(const GuildRpcAskGuildEventListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildEventListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildEventListAsk::~GuildRpcAskGuildEventListAsk() {
  SharedDtor();
}

void GuildRpcAskGuildEventListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildEventListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildEventListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildEventListAsk_descriptor_;
}

const GuildRpcAskGuildEventListAsk& GuildRpcAskGuildEventListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildEventListAsk* GuildRpcAskGuildEventListAsk::default_instance_ = NULL;

GuildRpcAskGuildEventListAsk* GuildRpcAskGuildEventListAsk::New() const {
  return new GuildRpcAskGuildEventListAsk;
}

void GuildRpcAskGuildEventListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildEventListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildEventListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildEventListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildEventListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildEventListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildEventListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildEventListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildEventListAsk::MergeFrom(const GuildRpcAskGuildEventListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildEventListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildEventListAsk::CopyFrom(const GuildRpcAskGuildEventListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildEventListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildEventListAsk::Swap(GuildRpcAskGuildEventListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildEventListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildEventListAsk_descriptor_;
  metadata.reflection = GuildRpcAskGuildEventListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskGuildEventListReply::kResultFieldNumber;
const int GuildRpcAskGuildEventListReply::kGuildEventListFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskGuildEventListReply::GuildRpcAskGuildEventListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildEventListReply::InitAsDefaultInstance() {
}

GuildRpcAskGuildEventListReply::GuildRpcAskGuildEventListReply(const GuildRpcAskGuildEventListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildEventListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildEventListReply::~GuildRpcAskGuildEventListReply() {
  SharedDtor();
}

void GuildRpcAskGuildEventListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildEventListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildEventListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildEventListReply_descriptor_;
}

const GuildRpcAskGuildEventListReply& GuildRpcAskGuildEventListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildEventListReply* GuildRpcAskGuildEventListReply::default_instance_ = NULL;

GuildRpcAskGuildEventListReply* GuildRpcAskGuildEventListReply::New() const {
  return new GuildRpcAskGuildEventListReply;
}

void GuildRpcAskGuildEventListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  guildeventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildEventListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildEventList;
        break;
      }

      // repeated .GuildEvent GuildEventList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildEventList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildeventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildEventList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildEventListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildEvent GuildEventList = 2;
  for (int i = 0; i < this->guildeventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildeventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildEventListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildEvent GuildEventList = 2;
  for (int i = 0; i < this->guildeventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildeventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildEventListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildEvent GuildEventList = 2;
  total_size += 1 * this->guildeventlist_size();
  for (int i = 0; i < this->guildeventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildeventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildEventListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildEventListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildEventListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildEventListReply::MergeFrom(const GuildRpcAskGuildEventListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildeventlist_.MergeFrom(from.guildeventlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildEventListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildEventListReply::CopyFrom(const GuildRpcAskGuildEventListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildEventListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildEventListReply::Swap(GuildRpcAskGuildEventListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    guildeventlist_.Swap(&other->guildeventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildEventListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildEventListReply_descriptor_;
  metadata.reflection = GuildRpcAskGuildEventListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskGuildInfoListAsk::kPageIndexFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskGuildInfoListAsk::GuildRpcAskGuildInfoListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildInfoListAsk::InitAsDefaultInstance() {
}

GuildRpcAskGuildInfoListAsk::GuildRpcAskGuildInfoListAsk(const GuildRpcAskGuildInfoListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildInfoListAsk::SharedCtor() {
  _cached_size_ = 0;
  pageindex_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildInfoListAsk::~GuildRpcAskGuildInfoListAsk() {
  SharedDtor();
}

void GuildRpcAskGuildInfoListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildInfoListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildInfoListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildInfoListAsk_descriptor_;
}

const GuildRpcAskGuildInfoListAsk& GuildRpcAskGuildInfoListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildInfoListAsk* GuildRpcAskGuildInfoListAsk::default_instance_ = NULL;

GuildRpcAskGuildInfoListAsk* GuildRpcAskGuildInfoListAsk::New() const {
  return new GuildRpcAskGuildInfoListAsk;
}

void GuildRpcAskGuildInfoListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pageindex_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildInfoListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PageIndex = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
          set_has_pageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildInfoListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PageIndex = 2 [default = -1];
  if (has_pageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pageindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildInfoListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PageIndex = 2 [default = -1];
  if (has_pageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pageindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildInfoListAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PageIndex = 2 [default = -1];
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildInfoListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildInfoListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildInfoListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildInfoListAsk::MergeFrom(const GuildRpcAskGuildInfoListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pageindex()) {
      set_pageindex(from.pageindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildInfoListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildInfoListAsk::CopyFrom(const GuildRpcAskGuildInfoListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildInfoListAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildInfoListAsk::Swap(GuildRpcAskGuildInfoListAsk* other) {
  if (other != this) {
    std::swap(pageindex_, other->pageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildInfoListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildInfoListAsk_descriptor_;
  metadata.reflection = GuildRpcAskGuildInfoListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskGuildInfoListReply::kResultFieldNumber;
const int GuildRpcAskGuildInfoListReply::kGuildInfoListFieldNumber;
const int GuildRpcAskGuildInfoListReply::kPageIndexFieldNumber;
const int GuildRpcAskGuildInfoListReply::kTotalGuildCountFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskGuildInfoListReply::GuildRpcAskGuildInfoListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildInfoListReply::InitAsDefaultInstance() {
}

GuildRpcAskGuildInfoListReply::GuildRpcAskGuildInfoListReply(const GuildRpcAskGuildInfoListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildInfoListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  pageindex_ = -1;
  totalguildcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildInfoListReply::~GuildRpcAskGuildInfoListReply() {
  SharedDtor();
}

void GuildRpcAskGuildInfoListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildInfoListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildInfoListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildInfoListReply_descriptor_;
}

const GuildRpcAskGuildInfoListReply& GuildRpcAskGuildInfoListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildInfoListReply* GuildRpcAskGuildInfoListReply::default_instance_ = NULL;

GuildRpcAskGuildInfoListReply* GuildRpcAskGuildInfoListReply::New() const {
  return new GuildRpcAskGuildInfoListReply;
}

void GuildRpcAskGuildInfoListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    pageindex_ = -1;
    totalguildcount_ = -1;
  }
  guildinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildInfoListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildInfoList;
        break;
      }

      // repeated .GuildInfo GuildInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildInfoList;
        if (input->ExpectTag(24)) goto parse_PageIndex;
        break;
      }

      // optional int32 PageIndex = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
          set_has_pageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalGuildCount;
        break;
      }

      // optional int32 TotalGuildCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalGuildCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalguildcount_)));
          set_has_totalguildcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildInfoListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildInfo GuildInfoList = 2;
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildinfolist(i), output);
  }

  // optional int32 PageIndex = 3 [default = -1];
  if (has_pageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pageindex(), output);
  }

  // optional int32 TotalGuildCount = 4 [default = -1];
  if (has_totalguildcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalguildcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildInfoListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildInfo GuildInfoList = 2;
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildinfolist(i), target);
  }

  // optional int32 PageIndex = 3 [default = -1];
  if (has_pageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pageindex(), target);
  }

  // optional int32 TotalGuildCount = 4 [default = -1];
  if (has_totalguildcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalguildcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildInfoListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 PageIndex = 3 [default = -1];
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageindex());
    }

    // optional int32 TotalGuildCount = 4 [default = -1];
    if (has_totalguildcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalguildcount());
    }

  }
  // repeated .GuildInfo GuildInfoList = 2;
  total_size += 1 * this->guildinfolist_size();
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildInfoListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildInfoListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildInfoListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildInfoListReply::MergeFrom(const GuildRpcAskGuildInfoListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildinfolist_.MergeFrom(from.guildinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pageindex()) {
      set_pageindex(from.pageindex());
    }
    if (from.has_totalguildcount()) {
      set_totalguildcount(from.totalguildcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildInfoListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildInfoListReply::CopyFrom(const GuildRpcAskGuildInfoListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildInfoListReply::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildInfoListReply::Swap(GuildRpcAskGuildInfoListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    guildinfolist_.Swap(&other->guildinfolist_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(totalguildcount_, other->totalguildcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildInfoListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildInfoListReply_descriptor_;
  metadata.reflection = GuildRpcAskGuildInfoListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSearchGuildAsk::kTextFieldNumber;
#endif  // !_MSC_VER

GuildRpcSearchGuildAsk::GuildRpcSearchGuildAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSearchGuildAsk::InitAsDefaultInstance() {
}

GuildRpcSearchGuildAsk::GuildRpcSearchGuildAsk(const GuildRpcSearchGuildAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSearchGuildAsk::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSearchGuildAsk::~GuildRpcSearchGuildAsk() {
  SharedDtor();
}

void GuildRpcSearchGuildAsk::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcSearchGuildAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSearchGuildAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSearchGuildAsk_descriptor_;
}

const GuildRpcSearchGuildAsk& GuildRpcSearchGuildAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSearchGuildAsk* GuildRpcSearchGuildAsk::default_instance_ = NULL;

GuildRpcSearchGuildAsk* GuildRpcSearchGuildAsk::New() const {
  return new GuildRpcSearchGuildAsk;
}

void GuildRpcSearchGuildAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSearchGuildAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSearchGuildAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSearchGuildAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSearchGuildAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSearchGuildAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSearchGuildAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSearchGuildAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSearchGuildAsk::MergeFrom(const GuildRpcSearchGuildAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSearchGuildAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSearchGuildAsk::CopyFrom(const GuildRpcSearchGuildAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSearchGuildAsk::IsInitialized() const {

  return true;
}

void GuildRpcSearchGuildAsk::Swap(GuildRpcSearchGuildAsk* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSearchGuildAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSearchGuildAsk_descriptor_;
  metadata.reflection = GuildRpcSearchGuildAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSearchGuildReply::kResultFieldNumber;
const int GuildRpcSearchGuildReply::kGuildInfoListFieldNumber;
#endif  // !_MSC_VER

GuildRpcSearchGuildReply::GuildRpcSearchGuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSearchGuildReply::InitAsDefaultInstance() {
}

GuildRpcSearchGuildReply::GuildRpcSearchGuildReply(const GuildRpcSearchGuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSearchGuildReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSearchGuildReply::~GuildRpcSearchGuildReply() {
  SharedDtor();
}

void GuildRpcSearchGuildReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcSearchGuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSearchGuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSearchGuildReply_descriptor_;
}

const GuildRpcSearchGuildReply& GuildRpcSearchGuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSearchGuildReply* GuildRpcSearchGuildReply::default_instance_ = NULL;

GuildRpcSearchGuildReply* GuildRpcSearchGuildReply::New() const {
  return new GuildRpcSearchGuildReply;
}

void GuildRpcSearchGuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  guildinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSearchGuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildInfoList;
        break;
      }

      // repeated .GuildInfo GuildInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSearchGuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildInfo GuildInfoList = 2;
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSearchGuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildInfo GuildInfoList = 2;
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSearchGuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GuildInfo GuildInfoList = 2;
  total_size += 1 * this->guildinfolist_size();
  for (int i = 0; i < this->guildinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSearchGuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSearchGuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSearchGuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSearchGuildReply::MergeFrom(const GuildRpcSearchGuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildinfolist_.MergeFrom(from.guildinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSearchGuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSearchGuildReply::CopyFrom(const GuildRpcSearchGuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSearchGuildReply::IsInitialized() const {

  return true;
}

void GuildRpcSearchGuildReply::Swap(GuildRpcSearchGuildReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    guildinfolist_.Swap(&other->guildinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSearchGuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSearchGuildReply_descriptor_;
  metadata.reflection = GuildRpcSearchGuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcJoinGuildAsk::kGuidFieldNumber;
const int GuildRpcJoinGuildAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcJoinGuildAsk::GuildRpcJoinGuildAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcJoinGuildAsk::InitAsDefaultInstance() {
}

GuildRpcJoinGuildAsk::GuildRpcJoinGuildAsk(const GuildRpcJoinGuildAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcJoinGuildAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcJoinGuildAsk::~GuildRpcJoinGuildAsk() {
  SharedDtor();
}

void GuildRpcJoinGuildAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcJoinGuildAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcJoinGuildAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcJoinGuildAsk_descriptor_;
}

const GuildRpcJoinGuildAsk& GuildRpcJoinGuildAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcJoinGuildAsk* GuildRpcJoinGuildAsk::default_instance_ = NULL;

GuildRpcJoinGuildAsk* GuildRpcJoinGuildAsk::New() const {
  return new GuildRpcJoinGuildAsk;
}

void GuildRpcJoinGuildAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcJoinGuildAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcJoinGuildAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 Type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcJoinGuildAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 Type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcJoinGuildAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 Type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcJoinGuildAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcJoinGuildAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcJoinGuildAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcJoinGuildAsk::MergeFrom(const GuildRpcJoinGuildAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcJoinGuildAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcJoinGuildAsk::CopyFrom(const GuildRpcJoinGuildAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcJoinGuildAsk::IsInitialized() const {

  return true;
}

void GuildRpcJoinGuildAsk::Swap(GuildRpcJoinGuildAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcJoinGuildAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcJoinGuildAsk_descriptor_;
  metadata.reflection = GuildRpcJoinGuildAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcJoinGuildReply::kResultFieldNumber;
const int GuildRpcJoinGuildReply::kGuidFieldNumber;
#endif  // !_MSC_VER

GuildRpcJoinGuildReply::GuildRpcJoinGuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcJoinGuildReply::InitAsDefaultInstance() {
}

GuildRpcJoinGuildReply::GuildRpcJoinGuildReply(const GuildRpcJoinGuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcJoinGuildReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcJoinGuildReply::~GuildRpcJoinGuildReply() {
  SharedDtor();
}

void GuildRpcJoinGuildReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcJoinGuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcJoinGuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcJoinGuildReply_descriptor_;
}

const GuildRpcJoinGuildReply& GuildRpcJoinGuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcJoinGuildReply* GuildRpcJoinGuildReply::default_instance_ = NULL;

GuildRpcJoinGuildReply* GuildRpcJoinGuildReply::New() const {
  return new GuildRpcJoinGuildReply;
}

void GuildRpcJoinGuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcJoinGuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Guid;
        break;
      }

      // optional uint64 Guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcJoinGuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcJoinGuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcJoinGuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 Guid = 2 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcJoinGuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcJoinGuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcJoinGuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcJoinGuildReply::MergeFrom(const GuildRpcJoinGuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcJoinGuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcJoinGuildReply::CopyFrom(const GuildRpcJoinGuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcJoinGuildReply::IsInitialized() const {

  return true;
}

void GuildRpcJoinGuildReply::Swap(GuildRpcJoinGuildReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcJoinGuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcJoinGuildReply_descriptor_;
  metadata.reflection = GuildRpcJoinGuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcCreateGuildAsk::kGuildNameFieldNumber;
const int GuildRpcCreateGuildAsk::kGuildCreedFieldNumber;
#endif  // !_MSC_VER

GuildRpcCreateGuildAsk::GuildRpcCreateGuildAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcCreateGuildAsk::InitAsDefaultInstance() {
}

GuildRpcCreateGuildAsk::GuildRpcCreateGuildAsk(const GuildRpcCreateGuildAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcCreateGuildAsk::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcCreateGuildAsk::~GuildRpcCreateGuildAsk() {
  SharedDtor();
}

void GuildRpcCreateGuildAsk::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreed_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcCreateGuildAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcCreateGuildAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcCreateGuildAsk_descriptor_;
}

const GuildRpcCreateGuildAsk& GuildRpcCreateGuildAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcCreateGuildAsk* GuildRpcCreateGuildAsk::default_instance_ = NULL;

GuildRpcCreateGuildAsk* GuildRpcCreateGuildAsk::New() const {
  return new GuildRpcCreateGuildAsk;
}

void GuildRpcCreateGuildAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildcreed()) {
      if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
        guildcreed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcCreateGuildAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GuildName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildCreed;
        break;
      }

      // optional string GuildCreed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildCreed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildcreed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildcreed().data(), this->guildcreed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcCreateGuildAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GuildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // optional string GuildCreed = 2;
  if (has_guildcreed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreed().data(), this->guildcreed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildcreed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcCreateGuildAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GuildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional string GuildCreed = 2;
  if (has_guildcreed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreed().data(), this->guildcreed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildcreed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcCreateGuildAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GuildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string GuildCreed = 2;
    if (has_guildcreed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildcreed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcCreateGuildAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcCreateGuildAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcCreateGuildAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcCreateGuildAsk::MergeFrom(const GuildRpcCreateGuildAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildcreed()) {
      set_guildcreed(from.guildcreed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcCreateGuildAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcCreateGuildAsk::CopyFrom(const GuildRpcCreateGuildAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcCreateGuildAsk::IsInitialized() const {

  return true;
}

void GuildRpcCreateGuildAsk::Swap(GuildRpcCreateGuildAsk* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(guildcreed_, other->guildcreed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcCreateGuildAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcCreateGuildAsk_descriptor_;
  metadata.reflection = GuildRpcCreateGuildAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcCreateGuildReply::kResultFieldNumber;
const int GuildRpcCreateGuildReply::kGuildBaseInfoFieldNumber;
#endif  // !_MSC_VER

GuildRpcCreateGuildReply::GuildRpcCreateGuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcCreateGuildReply::InitAsDefaultInstance() {
  guildbaseinfo_ = const_cast< ::GuildInfo*>(&::GuildInfo::default_instance());
}

GuildRpcCreateGuildReply::GuildRpcCreateGuildReply(const GuildRpcCreateGuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcCreateGuildReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildbaseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcCreateGuildReply::~GuildRpcCreateGuildReply() {
  SharedDtor();
}

void GuildRpcCreateGuildReply::SharedDtor() {
  if (this != default_instance_) {
    delete guildbaseinfo_;
  }
}

void GuildRpcCreateGuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcCreateGuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcCreateGuildReply_descriptor_;
}

const GuildRpcCreateGuildReply& GuildRpcCreateGuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcCreateGuildReply* GuildRpcCreateGuildReply::default_instance_ = NULL;

GuildRpcCreateGuildReply* GuildRpcCreateGuildReply::New() const {
  return new GuildRpcCreateGuildReply;
}

void GuildRpcCreateGuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_guildbaseinfo()) {
      if (guildbaseinfo_ != NULL) guildbaseinfo_->::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcCreateGuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildBaseInfo;
        break;
      }

      // optional .GuildInfo GuildBaseInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcCreateGuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GuildInfo GuildBaseInfo = 2;
  if (has_guildbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbaseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcCreateGuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GuildInfo GuildBaseInfo = 2;
  if (has_guildbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbaseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcCreateGuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GuildInfo GuildBaseInfo = 2;
    if (has_guildbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbaseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcCreateGuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcCreateGuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcCreateGuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcCreateGuildReply::MergeFrom(const GuildRpcCreateGuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildbaseinfo()) {
      mutable_guildbaseinfo()->::GuildInfo::MergeFrom(from.guildbaseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcCreateGuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcCreateGuildReply::CopyFrom(const GuildRpcCreateGuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcCreateGuildReply::IsInitialized() const {

  return true;
}

void GuildRpcCreateGuildReply::Swap(GuildRpcCreateGuildReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildbaseinfo_, other->guildbaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcCreateGuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcCreateGuildReply_descriptor_;
  metadata.reflection = GuildRpcCreateGuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcChangeFlagAsk::kFlagConfigIDFieldNumber;
#endif  // !_MSC_VER

GuildRpcChangeFlagAsk::GuildRpcChangeFlagAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcChangeFlagAsk::InitAsDefaultInstance() {
}

GuildRpcChangeFlagAsk::GuildRpcChangeFlagAsk(const GuildRpcChangeFlagAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcChangeFlagAsk::SharedCtor() {
  _cached_size_ = 0;
  flagconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcChangeFlagAsk::~GuildRpcChangeFlagAsk() {
  SharedDtor();
}

void GuildRpcChangeFlagAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcChangeFlagAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcChangeFlagAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcChangeFlagAsk_descriptor_;
}

const GuildRpcChangeFlagAsk& GuildRpcChangeFlagAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcChangeFlagAsk* GuildRpcChangeFlagAsk::default_instance_ = NULL;

GuildRpcChangeFlagAsk* GuildRpcChangeFlagAsk::New() const {
  return new GuildRpcChangeFlagAsk;
}

void GuildRpcChangeFlagAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flagconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcChangeFlagAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FlagConfigID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagconfigid_)));
          set_has_flagconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcChangeFlagAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FlagConfigID = 1 [default = -1];
  if (has_flagconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flagconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcChangeFlagAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FlagConfigID = 1 [default = -1];
  if (has_flagconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flagconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcChangeFlagAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FlagConfigID = 1 [default = -1];
    if (has_flagconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcChangeFlagAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcChangeFlagAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcChangeFlagAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcChangeFlagAsk::MergeFrom(const GuildRpcChangeFlagAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flagconfigid()) {
      set_flagconfigid(from.flagconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcChangeFlagAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcChangeFlagAsk::CopyFrom(const GuildRpcChangeFlagAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcChangeFlagAsk::IsInitialized() const {

  return true;
}

void GuildRpcChangeFlagAsk::Swap(GuildRpcChangeFlagAsk* other) {
  if (other != this) {
    std::swap(flagconfigid_, other->flagconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcChangeFlagAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcChangeFlagAsk_descriptor_;
  metadata.reflection = GuildRpcChangeFlagAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcChangeFlagReply::kResultFieldNumber;
const int GuildRpcChangeFlagReply::kGuildMoneyFieldNumber;
const int GuildRpcChangeFlagReply::kFlagFieldNumber;
#endif  // !_MSC_VER

GuildRpcChangeFlagReply::GuildRpcChangeFlagReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcChangeFlagReply::InitAsDefaultInstance() {
  flag_ = const_cast< ::GuildFlag*>(&::GuildFlag::default_instance());
}

GuildRpcChangeFlagReply::GuildRpcChangeFlagReply(const GuildRpcChangeFlagReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcChangeFlagReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildmoney_ = -1;
  flag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcChangeFlagReply::~GuildRpcChangeFlagReply() {
  SharedDtor();
}

void GuildRpcChangeFlagReply::SharedDtor() {
  if (this != default_instance_) {
    delete flag_;
  }
}

void GuildRpcChangeFlagReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcChangeFlagReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcChangeFlagReply_descriptor_;
}

const GuildRpcChangeFlagReply& GuildRpcChangeFlagReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcChangeFlagReply* GuildRpcChangeFlagReply::default_instance_ = NULL;

GuildRpcChangeFlagReply* GuildRpcChangeFlagReply::New() const {
  return new GuildRpcChangeFlagReply;
}

void GuildRpcChangeFlagReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    guildmoney_ = -1;
    if (has_flag()) {
      if (flag_ != NULL) flag_->::GuildFlag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcChangeFlagReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GuildMoney;
        break;
      }

      // optional int32 GuildMoney = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Flag;
        break;
      }

      // optional .GuildFlag Flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcChangeFlagReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 GuildMoney = 2 [default = -1];
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildmoney(), output);
  }

  // optional .GuildFlag Flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcChangeFlagReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 GuildMoney = 2 [default = -1];
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildmoney(), target);
  }

  // optional .GuildFlag Flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcChangeFlagReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 GuildMoney = 2 [default = -1];
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

    // optional .GuildFlag Flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcChangeFlagReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcChangeFlagReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcChangeFlagReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcChangeFlagReply::MergeFrom(const GuildRpcChangeFlagReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
    if (from.has_flag()) {
      mutable_flag()->::GuildFlag::MergeFrom(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcChangeFlagReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcChangeFlagReply::CopyFrom(const GuildRpcChangeFlagReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcChangeFlagReply::IsInitialized() const {

  return true;
}

void GuildRpcChangeFlagReply::Swap(GuildRpcChangeFlagReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcChangeFlagReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcChangeFlagReply_descriptor_;
  metadata.reflection = GuildRpcChangeFlagReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcGuildChangeNameAsk::kGuildNewNameFieldNumber;
#endif  // !_MSC_VER

GuildRpcGuildChangeNameAsk::GuildRpcGuildChangeNameAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcGuildChangeNameAsk::InitAsDefaultInstance() {
}

GuildRpcGuildChangeNameAsk::GuildRpcGuildChangeNameAsk(const GuildRpcGuildChangeNameAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcGuildChangeNameAsk::SharedCtor() {
  _cached_size_ = 0;
  guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcGuildChangeNameAsk::~GuildRpcGuildChangeNameAsk() {
  SharedDtor();
}

void GuildRpcGuildChangeNameAsk::SharedDtor() {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildnewname_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcGuildChangeNameAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcGuildChangeNameAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcGuildChangeNameAsk_descriptor_;
}

const GuildRpcGuildChangeNameAsk& GuildRpcGuildChangeNameAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcGuildChangeNameAsk* GuildRpcGuildChangeNameAsk::default_instance_ = NULL;

GuildRpcGuildChangeNameAsk* GuildRpcGuildChangeNameAsk::New() const {
  return new GuildRpcGuildChangeNameAsk;
}

void GuildRpcGuildChangeNameAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildnewname()) {
      if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
        guildnewname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcGuildChangeNameAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GuildNewName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildnewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildnewname().data(), this->guildnewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcGuildChangeNameAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GuildNewName = 1;
  if (has_guildnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildnewname().data(), this->guildnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildnewname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcGuildChangeNameAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GuildNewName = 1;
  if (has_guildnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildnewname().data(), this->guildnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildnewname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcGuildChangeNameAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GuildNewName = 1;
    if (has_guildnewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildnewname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcGuildChangeNameAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcGuildChangeNameAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcGuildChangeNameAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcGuildChangeNameAsk::MergeFrom(const GuildRpcGuildChangeNameAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildnewname()) {
      set_guildnewname(from.guildnewname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcGuildChangeNameAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcGuildChangeNameAsk::CopyFrom(const GuildRpcGuildChangeNameAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcGuildChangeNameAsk::IsInitialized() const {

  return true;
}

void GuildRpcGuildChangeNameAsk::Swap(GuildRpcGuildChangeNameAsk* other) {
  if (other != this) {
    std::swap(guildnewname_, other->guildnewname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcGuildChangeNameAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcGuildChangeNameAsk_descriptor_;
  metadata.reflection = GuildRpcGuildChangeNameAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcGuildChangeNameReply::kResultFieldNumber;
const int GuildRpcGuildChangeNameReply::kGuildNewNameFieldNumber;
const int GuildRpcGuildChangeNameReply::kGuildOldNameFieldNumber;
#endif  // !_MSC_VER

GuildRpcGuildChangeNameReply::GuildRpcGuildChangeNameReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcGuildChangeNameReply::InitAsDefaultInstance() {
}

GuildRpcGuildChangeNameReply::GuildRpcGuildChangeNameReply(const GuildRpcGuildChangeNameReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcGuildChangeNameReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  guildnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcGuildChangeNameReply::~GuildRpcGuildChangeNameReply() {
  SharedDtor();
}

void GuildRpcGuildChangeNameReply::SharedDtor() {
  if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildnewname_;
  }
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildoldname_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcGuildChangeNameReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcGuildChangeNameReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcGuildChangeNameReply_descriptor_;
}

const GuildRpcGuildChangeNameReply& GuildRpcGuildChangeNameReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcGuildChangeNameReply* GuildRpcGuildChangeNameReply::default_instance_ = NULL;

GuildRpcGuildChangeNameReply* GuildRpcGuildChangeNameReply::New() const {
  return new GuildRpcGuildChangeNameReply;
}

void GuildRpcGuildChangeNameReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_guildnewname()) {
      if (guildnewname_ != &::google::protobuf::internal::kEmptyString) {
        guildnewname_->clear();
      }
    }
    if (has_guildoldname()) {
      if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
        guildoldname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcGuildChangeNameReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildNewName;
        break;
      }

      // optional string GuildNewName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildNewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildnewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildnewname().data(), this->guildnewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GuildOldName;
        break;
      }

      // optional string GuildOldName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildOldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildoldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildoldname().data(), this->guildoldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcGuildChangeNameReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string GuildNewName = 2;
  if (has_guildnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildnewname().data(), this->guildnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildnewname(), output);
  }

  // optional string GuildOldName = 3;
  if (has_guildoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildoldname().data(), this->guildoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildoldname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcGuildChangeNameReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string GuildNewName = 2;
  if (has_guildnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildnewname().data(), this->guildnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildnewname(), target);
  }

  // optional string GuildOldName = 3;
  if (has_guildoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildoldname().data(), this->guildoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildoldname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcGuildChangeNameReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string GuildNewName = 2;
    if (has_guildnewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildnewname());
    }

    // optional string GuildOldName = 3;
    if (has_guildoldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildoldname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcGuildChangeNameReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcGuildChangeNameReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcGuildChangeNameReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcGuildChangeNameReply::MergeFrom(const GuildRpcGuildChangeNameReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildnewname()) {
      set_guildnewname(from.guildnewname());
    }
    if (from.has_guildoldname()) {
      set_guildoldname(from.guildoldname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcGuildChangeNameReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcGuildChangeNameReply::CopyFrom(const GuildRpcGuildChangeNameReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcGuildChangeNameReply::IsInitialized() const {

  return true;
}

void GuildRpcGuildChangeNameReply::Swap(GuildRpcGuildChangeNameReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildnewname_, other->guildnewname_);
    std::swap(guildoldname_, other->guildoldname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcGuildChangeNameReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcGuildChangeNameReply_descriptor_;
  metadata.reflection = GuildRpcGuildChangeNameReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcAskGuildMemberAsk::GuildRpcAskGuildMemberAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildMemberAsk::InitAsDefaultInstance() {
}

GuildRpcAskGuildMemberAsk::GuildRpcAskGuildMemberAsk(const GuildRpcAskGuildMemberAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildMemberAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildMemberAsk::~GuildRpcAskGuildMemberAsk() {
  SharedDtor();
}

void GuildRpcAskGuildMemberAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildMemberAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildMemberAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildMemberAsk_descriptor_;
}

const GuildRpcAskGuildMemberAsk& GuildRpcAskGuildMemberAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildMemberAsk* GuildRpcAskGuildMemberAsk::default_instance_ = NULL;

GuildRpcAskGuildMemberAsk* GuildRpcAskGuildMemberAsk::New() const {
  return new GuildRpcAskGuildMemberAsk;
}

void GuildRpcAskGuildMemberAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildMemberAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildMemberAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildMemberAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildMemberAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildMemberAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildMemberAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildMemberAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildMemberAsk::MergeFrom(const GuildRpcAskGuildMemberAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildMemberAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildMemberAsk::CopyFrom(const GuildRpcAskGuildMemberAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildMemberAsk::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildMemberAsk::Swap(GuildRpcAskGuildMemberAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildMemberAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildMemberAsk_descriptor_;
  metadata.reflection = GuildRpcAskGuildMemberAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcAskGuildMemberReply::kResultFieldNumber;
const int GuildRpcAskGuildMemberReply::kGuildMemberInfoListFieldNumber;
const int GuildRpcAskGuildMemberReply::kOnlineCountFieldNumber;
const int GuildRpcAskGuildMemberReply::kMemberCountFieldNumber;
#endif  // !_MSC_VER

GuildRpcAskGuildMemberReply::GuildRpcAskGuildMemberReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcAskGuildMemberReply::InitAsDefaultInstance() {
}

GuildRpcAskGuildMemberReply::GuildRpcAskGuildMemberReply(const GuildRpcAskGuildMemberReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcAskGuildMemberReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  onlinecount_ = -1;
  membercount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcAskGuildMemberReply::~GuildRpcAskGuildMemberReply() {
  SharedDtor();
}

void GuildRpcAskGuildMemberReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcAskGuildMemberReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcAskGuildMemberReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcAskGuildMemberReply_descriptor_;
}

const GuildRpcAskGuildMemberReply& GuildRpcAskGuildMemberReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcAskGuildMemberReply* GuildRpcAskGuildMemberReply::default_instance_ = NULL;

GuildRpcAskGuildMemberReply* GuildRpcAskGuildMemberReply::New() const {
  return new GuildRpcAskGuildMemberReply;
}

void GuildRpcAskGuildMemberReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    onlinecount_ = -1;
    membercount_ = -1;
  }
  guildmemberinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcAskGuildMemberReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberInfoList;
        break;
      }

      // repeated .GuildMemberInfo GuildMemberInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildMemberInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildmemberinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberInfoList;
        if (input->ExpectTag(24)) goto parse_OnlineCount;
        break;
      }

      // optional int32 OnlineCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));
          set_has_onlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MemberCount;
        break;
      }

      // optional int32 MemberCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcAskGuildMemberReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GuildMemberInfo GuildMemberInfoList = 2;
  for (int i = 0; i < this->guildmemberinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildmemberinfolist(i), output);
  }

  // optional int32 OnlineCount = 3 [default = -1];
  if (has_onlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->onlinecount(), output);
  }

  // optional int32 MemberCount = 4 [default = -1];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->membercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcAskGuildMemberReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GuildMemberInfo GuildMemberInfoList = 2;
  for (int i = 0; i < this->guildmemberinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildmemberinfolist(i), target);
  }

  // optional int32 OnlineCount = 3 [default = -1];
  if (has_onlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->onlinecount(), target);
  }

  // optional int32 MemberCount = 4 [default = -1];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->membercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcAskGuildMemberReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 OnlineCount = 3 [default = -1];
    if (has_onlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecount());
    }

    // optional int32 MemberCount = 4 [default = -1];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membercount());
    }

  }
  // repeated .GuildMemberInfo GuildMemberInfoList = 2;
  total_size += 1 * this->guildmemberinfolist_size();
  for (int i = 0; i < this->guildmemberinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildmemberinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcAskGuildMemberReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcAskGuildMemberReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcAskGuildMemberReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcAskGuildMemberReply::MergeFrom(const GuildRpcAskGuildMemberReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildmemberinfolist_.MergeFrom(from.guildmemberinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_onlinecount()) {
      set_onlinecount(from.onlinecount());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcAskGuildMemberReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcAskGuildMemberReply::CopyFrom(const GuildRpcAskGuildMemberReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcAskGuildMemberReply::IsInitialized() const {

  return true;
}

void GuildRpcAskGuildMemberReply::Swap(GuildRpcAskGuildMemberReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    guildmemberinfolist_.Swap(&other->guildmemberinfolist_);
    std::swap(onlinecount_, other->onlinecount_);
    std::swap(membercount_, other->membercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcAskGuildMemberReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcAskGuildMemberReply_descriptor_;
  metadata.reflection = GuildRpcAskGuildMemberReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildRpcQuiteGuildAsk::GuildRpcQuiteGuildAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcQuiteGuildAsk::InitAsDefaultInstance() {
}

GuildRpcQuiteGuildAsk::GuildRpcQuiteGuildAsk(const GuildRpcQuiteGuildAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcQuiteGuildAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcQuiteGuildAsk::~GuildRpcQuiteGuildAsk() {
  SharedDtor();
}

void GuildRpcQuiteGuildAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcQuiteGuildAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcQuiteGuildAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcQuiteGuildAsk_descriptor_;
}

const GuildRpcQuiteGuildAsk& GuildRpcQuiteGuildAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcQuiteGuildAsk* GuildRpcQuiteGuildAsk::default_instance_ = NULL;

GuildRpcQuiteGuildAsk* GuildRpcQuiteGuildAsk::New() const {
  return new GuildRpcQuiteGuildAsk;
}

void GuildRpcQuiteGuildAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcQuiteGuildAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildRpcQuiteGuildAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcQuiteGuildAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcQuiteGuildAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcQuiteGuildAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcQuiteGuildAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcQuiteGuildAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcQuiteGuildAsk::MergeFrom(const GuildRpcQuiteGuildAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcQuiteGuildAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcQuiteGuildAsk::CopyFrom(const GuildRpcQuiteGuildAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcQuiteGuildAsk::IsInitialized() const {

  return true;
}

void GuildRpcQuiteGuildAsk::Swap(GuildRpcQuiteGuildAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcQuiteGuildAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcQuiteGuildAsk_descriptor_;
  metadata.reflection = GuildRpcQuiteGuildAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcQuiteGuildReply::kResultFieldNumber;
#endif  // !_MSC_VER

GuildRpcQuiteGuildReply::GuildRpcQuiteGuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcQuiteGuildReply::InitAsDefaultInstance() {
}

GuildRpcQuiteGuildReply::GuildRpcQuiteGuildReply(const GuildRpcQuiteGuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcQuiteGuildReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcQuiteGuildReply::~GuildRpcQuiteGuildReply() {
  SharedDtor();
}

void GuildRpcQuiteGuildReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcQuiteGuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcQuiteGuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcQuiteGuildReply_descriptor_;
}

const GuildRpcQuiteGuildReply& GuildRpcQuiteGuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcQuiteGuildReply* GuildRpcQuiteGuildReply::default_instance_ = NULL;

GuildRpcQuiteGuildReply* GuildRpcQuiteGuildReply::New() const {
  return new GuildRpcQuiteGuildReply;
}

void GuildRpcQuiteGuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcQuiteGuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcQuiteGuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcQuiteGuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcQuiteGuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcQuiteGuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcQuiteGuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcQuiteGuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcQuiteGuildReply::MergeFrom(const GuildRpcQuiteGuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcQuiteGuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcQuiteGuildReply::CopyFrom(const GuildRpcQuiteGuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcQuiteGuildReply::IsInitialized() const {

  return true;
}

void GuildRpcQuiteGuildReply::Swap(GuildRpcQuiteGuildReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcQuiteGuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcQuiteGuildReply_descriptor_;
  metadata.reflection = GuildRpcQuiteGuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSetOfficeAsk::kGuidFieldNumber;
const int GuildRpcSetOfficeAsk::kTargetGuidFieldNumber;
const int GuildRpcSetOfficeAsk::kOfficeTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcSetOfficeAsk::GuildRpcSetOfficeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSetOfficeAsk::InitAsDefaultInstance() {
}

GuildRpcSetOfficeAsk::GuildRpcSetOfficeAsk(const GuildRpcSetOfficeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSetOfficeAsk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  targetguid_ = GOOGLE_ULONGLONG(0);
  officetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSetOfficeAsk::~GuildRpcSetOfficeAsk() {
  SharedDtor();
}

void GuildRpcSetOfficeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcSetOfficeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSetOfficeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSetOfficeAsk_descriptor_;
}

const GuildRpcSetOfficeAsk& GuildRpcSetOfficeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSetOfficeAsk* GuildRpcSetOfficeAsk::default_instance_ = NULL;

GuildRpcSetOfficeAsk* GuildRpcSetOfficeAsk::New() const {
  return new GuildRpcSetOfficeAsk;
}

void GuildRpcSetOfficeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    targetguid_ = GOOGLE_ULONGLONG(0);
    officetype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSetOfficeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TargetGuid;
        break;
      }

      // optional uint64 TargetGuid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetguid_)));
          set_has_targetguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OfficeType;
        break;
      }

      // optional int32 OfficeType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OfficeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officetype_)));
          set_has_officetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSetOfficeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint64 TargetGuid = 2 [default = 0];
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetguid(), output);
  }

  // optional int32 OfficeType = 3 [default = -1];
  if (has_officetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSetOfficeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint64 TargetGuid = 2 [default = 0];
  if (has_targetguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetguid(), target);
  }

  // optional int32 OfficeType = 3 [default = -1];
  if (has_officetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSetOfficeAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 TargetGuid = 2 [default = 0];
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetguid());
    }

    // optional int32 OfficeType = 3 [default = -1];
    if (has_officetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSetOfficeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSetOfficeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSetOfficeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSetOfficeAsk::MergeFrom(const GuildRpcSetOfficeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
    if (from.has_officetype()) {
      set_officetype(from.officetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSetOfficeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSetOfficeAsk::CopyFrom(const GuildRpcSetOfficeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSetOfficeAsk::IsInitialized() const {

  return true;
}

void GuildRpcSetOfficeAsk::Swap(GuildRpcSetOfficeAsk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(officetype_, other->officetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSetOfficeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSetOfficeAsk_descriptor_;
  metadata.reflection = GuildRpcSetOfficeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcSetOfficeReply::kResultFieldNumber;
const int GuildRpcSetOfficeReply::kSelfOfficeTypeFieldNumber;
const int GuildRpcSetOfficeReply::kTargetOfficeTypeFieldNumber;
const int GuildRpcSetOfficeReply::kTargetGuidFieldNumber;
#endif  // !_MSC_VER

GuildRpcSetOfficeReply::GuildRpcSetOfficeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcSetOfficeReply::InitAsDefaultInstance() {
}

GuildRpcSetOfficeReply::GuildRpcSetOfficeReply(const GuildRpcSetOfficeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcSetOfficeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  selfofficetype_ = -1;
  targetofficetype_ = -1;
  targetguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcSetOfficeReply::~GuildRpcSetOfficeReply() {
  SharedDtor();
}

void GuildRpcSetOfficeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcSetOfficeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcSetOfficeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcSetOfficeReply_descriptor_;
}

const GuildRpcSetOfficeReply& GuildRpcSetOfficeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcSetOfficeReply* GuildRpcSetOfficeReply::default_instance_ = NULL;

GuildRpcSetOfficeReply* GuildRpcSetOfficeReply::New() const {
  return new GuildRpcSetOfficeReply;
}

void GuildRpcSetOfficeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    selfofficetype_ = -1;
    targetofficetype_ = -1;
    targetguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcSetOfficeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SelfOfficeType;
        break;
      }

      // optional int32 SelfOfficeType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SelfOfficeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfofficetype_)));
          set_has_selfofficetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TargetOfficeType;
        break;
      }

      // optional int32 TargetOfficeType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetOfficeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetofficetype_)));
          set_has_targetofficetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TargetGuid;
        break;
      }

      // optional uint64 TargetGuid = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetguid_)));
          set_has_targetguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcSetOfficeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 SelfOfficeType = 2 [default = -1];
  if (has_selfofficetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfofficetype(), output);
  }

  // optional int32 TargetOfficeType = 4 [default = -1];
  if (has_targetofficetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetofficetype(), output);
  }

  // optional uint64 TargetGuid = 5 [default = 0];
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->targetguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcSetOfficeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 SelfOfficeType = 2 [default = -1];
  if (has_selfofficetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfofficetype(), target);
  }

  // optional int32 TargetOfficeType = 4 [default = -1];
  if (has_targetofficetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetofficetype(), target);
  }

  // optional uint64 TargetGuid = 5 [default = 0];
  if (has_targetguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->targetguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcSetOfficeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 SelfOfficeType = 2 [default = -1];
    if (has_selfofficetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfofficetype());
    }

    // optional int32 TargetOfficeType = 4 [default = -1];
    if (has_targetofficetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetofficetype());
    }

    // optional uint64 TargetGuid = 5 [default = 0];
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcSetOfficeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcSetOfficeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcSetOfficeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcSetOfficeReply::MergeFrom(const GuildRpcSetOfficeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_selfofficetype()) {
      set_selfofficetype(from.selfofficetype());
    }
    if (from.has_targetofficetype()) {
      set_targetofficetype(from.targetofficetype());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcSetOfficeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcSetOfficeReply::CopyFrom(const GuildRpcSetOfficeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcSetOfficeReply::IsInitialized() const {

  return true;
}

void GuildRpcSetOfficeReply::Swap(GuildRpcSetOfficeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(selfofficetype_, other->selfofficetype_);
    std::swap(targetofficetype_, other->targetofficetype_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcSetOfficeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcSetOfficeReply_descriptor_;
  metadata.reflection = GuildRpcSetOfficeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcOfficeChangeNotify::kOfficeTypeFieldNumber;
const int GuildRpcOfficeChangeNotify::kOptguidFieldNumber;
const int GuildRpcOfficeChangeNotify::kOptOfficeTypeFieldNumber;
#endif  // !_MSC_VER

GuildRpcOfficeChangeNotify::GuildRpcOfficeChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcOfficeChangeNotify::InitAsDefaultInstance() {
}

GuildRpcOfficeChangeNotify::GuildRpcOfficeChangeNotify(const GuildRpcOfficeChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcOfficeChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  officetype_ = -1;
  optguid_ = GOOGLE_ULONGLONG(0);
  optofficetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcOfficeChangeNotify::~GuildRpcOfficeChangeNotify() {
  SharedDtor();
}

void GuildRpcOfficeChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcOfficeChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcOfficeChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcOfficeChangeNotify_descriptor_;
}

const GuildRpcOfficeChangeNotify& GuildRpcOfficeChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcOfficeChangeNotify* GuildRpcOfficeChangeNotify::default_instance_ = NULL;

GuildRpcOfficeChangeNotify* GuildRpcOfficeChangeNotify::New() const {
  return new GuildRpcOfficeChangeNotify;
}

void GuildRpcOfficeChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officetype_ = -1;
    optguid_ = GOOGLE_ULONGLONG(0);
    optofficetype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcOfficeChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OfficeType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officetype_)));
          set_has_officetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Optguid;
        break;
      }

      // optional uint64 Optguid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Optguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optguid_)));
          set_has_optguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OptOfficeType;
        break;
      }

      // optional int32 OptOfficeType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OptOfficeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optofficetype_)));
          set_has_optofficetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcOfficeChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OfficeType = 1 [default = -1];
  if (has_officetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officetype(), output);
  }

  // optional uint64 Optguid = 2 [default = 0];
  if (has_optguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->optguid(), output);
  }

  // optional int32 OptOfficeType = 3 [default = -1];
  if (has_optofficetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optofficetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcOfficeChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OfficeType = 1 [default = -1];
  if (has_officetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officetype(), target);
  }

  // optional uint64 Optguid = 2 [default = 0];
  if (has_optguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->optguid(), target);
  }

  // optional int32 OptOfficeType = 3 [default = -1];
  if (has_optofficetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optofficetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcOfficeChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OfficeType = 1 [default = -1];
    if (has_officetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officetype());
    }

    // optional uint64 Optguid = 2 [default = 0];
    if (has_optguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->optguid());
    }

    // optional int32 OptOfficeType = 3 [default = -1];
    if (has_optofficetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optofficetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcOfficeChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcOfficeChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcOfficeChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcOfficeChangeNotify::MergeFrom(const GuildRpcOfficeChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officetype()) {
      set_officetype(from.officetype());
    }
    if (from.has_optguid()) {
      set_optguid(from.optguid());
    }
    if (from.has_optofficetype()) {
      set_optofficetype(from.optofficetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcOfficeChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcOfficeChangeNotify::CopyFrom(const GuildRpcOfficeChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcOfficeChangeNotify::IsInitialized() const {

  return true;
}

void GuildRpcOfficeChangeNotify::Swap(GuildRpcOfficeChangeNotify* other) {
  if (other != this) {
    std::swap(officetype_, other->officetype_);
    std::swap(optguid_, other->optguid_);
    std::swap(optofficetype_, other->optofficetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcOfficeChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcOfficeChangeNotify_descriptor_;
  metadata.reflection = GuildRpcOfficeChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcChangeCreedAsk::kContentFieldNumber;
#endif  // !_MSC_VER

GuildRpcChangeCreedAsk::GuildRpcChangeCreedAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcChangeCreedAsk::InitAsDefaultInstance() {
}

GuildRpcChangeCreedAsk::GuildRpcChangeCreedAsk(const GuildRpcChangeCreedAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcChangeCreedAsk::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcChangeCreedAsk::~GuildRpcChangeCreedAsk() {
  SharedDtor();
}

void GuildRpcChangeCreedAsk::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcChangeCreedAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcChangeCreedAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcChangeCreedAsk_descriptor_;
}

const GuildRpcChangeCreedAsk& GuildRpcChangeCreedAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcChangeCreedAsk* GuildRpcChangeCreedAsk::default_instance_ = NULL;

GuildRpcChangeCreedAsk* GuildRpcChangeCreedAsk::New() const {
  return new GuildRpcChangeCreedAsk;
}

void GuildRpcChangeCreedAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcChangeCreedAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcChangeCreedAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcChangeCreedAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcChangeCreedAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcChangeCreedAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcChangeCreedAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcChangeCreedAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcChangeCreedAsk::MergeFrom(const GuildRpcChangeCreedAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcChangeCreedAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcChangeCreedAsk::CopyFrom(const GuildRpcChangeCreedAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcChangeCreedAsk::IsInitialized() const {

  return true;
}

void GuildRpcChangeCreedAsk::Swap(GuildRpcChangeCreedAsk* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcChangeCreedAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcChangeCreedAsk_descriptor_;
  metadata.reflection = GuildRpcChangeCreedAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcChangeCreedReply::kResultFieldNumber;
const int GuildRpcChangeCreedReply::kContentFieldNumber;
#endif  // !_MSC_VER

GuildRpcChangeCreedReply::GuildRpcChangeCreedReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcChangeCreedReply::InitAsDefaultInstance() {
}

GuildRpcChangeCreedReply::GuildRpcChangeCreedReply(const GuildRpcChangeCreedReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcChangeCreedReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcChangeCreedReply::~GuildRpcChangeCreedReply() {
  SharedDtor();
}

void GuildRpcChangeCreedReply::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GuildRpcChangeCreedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcChangeCreedReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcChangeCreedReply_descriptor_;
}

const GuildRpcChangeCreedReply& GuildRpcChangeCreedReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcChangeCreedReply* GuildRpcChangeCreedReply::default_instance_ = NULL;

GuildRpcChangeCreedReply* GuildRpcChangeCreedReply::New() const {
  return new GuildRpcChangeCreedReply;
}

void GuildRpcChangeCreedReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcChangeCreedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcChangeCreedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcChangeCreedReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcChangeCreedReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcChangeCreedReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcChangeCreedReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcChangeCreedReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcChangeCreedReply::MergeFrom(const GuildRpcChangeCreedReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcChangeCreedReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcChangeCreedReply::CopyFrom(const GuildRpcChangeCreedReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcChangeCreedReply::IsInitialized() const {

  return true;
}

void GuildRpcChangeCreedReply::Swap(GuildRpcChangeCreedReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcChangeCreedReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcChangeCreedReply_descriptor_;
  metadata.reflection = GuildRpcChangeCreedReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcForbiddenChatAsk::kPlayerguidFieldNumber;
const int GuildRpcForbiddenChatAsk::kIsForbiddenFieldNumber;
#endif  // !_MSC_VER

GuildRpcForbiddenChatAsk::GuildRpcForbiddenChatAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcForbiddenChatAsk::InitAsDefaultInstance() {
}

GuildRpcForbiddenChatAsk::GuildRpcForbiddenChatAsk(const GuildRpcForbiddenChatAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcForbiddenChatAsk::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_LONGLONG(-1);
  isforbidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcForbiddenChatAsk::~GuildRpcForbiddenChatAsk() {
  SharedDtor();
}

void GuildRpcForbiddenChatAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcForbiddenChatAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcForbiddenChatAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcForbiddenChatAsk_descriptor_;
}

const GuildRpcForbiddenChatAsk& GuildRpcForbiddenChatAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcForbiddenChatAsk* GuildRpcForbiddenChatAsk::default_instance_ = NULL;

GuildRpcForbiddenChatAsk* GuildRpcForbiddenChatAsk::New() const {
  return new GuildRpcForbiddenChatAsk;
}

void GuildRpcForbiddenChatAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_LONGLONG(-1);
    isforbidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcForbiddenChatAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Playerguid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsForbidden;
        break;
      }

      // optional bool IsForbidden = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsForbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforbidden_)));
          set_has_isforbidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcForbiddenChatAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Playerguid = 1 [default = -1];
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerguid(), output);
  }

  // optional bool IsForbidden = 2 [default = false];
  if (has_isforbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isforbidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcForbiddenChatAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Playerguid = 1 [default = -1];
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerguid(), target);
  }

  // optional bool IsForbidden = 2 [default = false];
  if (has_isforbidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isforbidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcForbiddenChatAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Playerguid = 1 [default = -1];
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerguid());
    }

    // optional bool IsForbidden = 2 [default = false];
    if (has_isforbidden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcForbiddenChatAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcForbiddenChatAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcForbiddenChatAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcForbiddenChatAsk::MergeFrom(const GuildRpcForbiddenChatAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_isforbidden()) {
      set_isforbidden(from.isforbidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcForbiddenChatAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcForbiddenChatAsk::CopyFrom(const GuildRpcForbiddenChatAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcForbiddenChatAsk::IsInitialized() const {

  return true;
}

void GuildRpcForbiddenChatAsk::Swap(GuildRpcForbiddenChatAsk* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(isforbidden_, other->isforbidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcForbiddenChatAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcForbiddenChatAsk_descriptor_;
  metadata.reflection = GuildRpcForbiddenChatAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcForbiddenChatReply::kResultFieldNumber;
const int GuildRpcForbiddenChatReply::kPlayerguidFieldNumber;
const int GuildRpcForbiddenChatReply::kIsForbiddenFieldNumber;
#endif  // !_MSC_VER

GuildRpcForbiddenChatReply::GuildRpcForbiddenChatReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcForbiddenChatReply::InitAsDefaultInstance() {
}

GuildRpcForbiddenChatReply::GuildRpcForbiddenChatReply(const GuildRpcForbiddenChatReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcForbiddenChatReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  playerguid_ = GOOGLE_LONGLONG(-1);
  isforbidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcForbiddenChatReply::~GuildRpcForbiddenChatReply() {
  SharedDtor();
}

void GuildRpcForbiddenChatReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcForbiddenChatReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcForbiddenChatReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcForbiddenChatReply_descriptor_;
}

const GuildRpcForbiddenChatReply& GuildRpcForbiddenChatReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcForbiddenChatReply* GuildRpcForbiddenChatReply::default_instance_ = NULL;

GuildRpcForbiddenChatReply* GuildRpcForbiddenChatReply::New() const {
  return new GuildRpcForbiddenChatReply;
}

void GuildRpcForbiddenChatReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    playerguid_ = GOOGLE_LONGLONG(-1);
    isforbidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcForbiddenChatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Playerguid;
        break;
      }

      // optional int64 Playerguid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Playerguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsForbidden;
        break;
      }

      // optional bool IsForbidden = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsForbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforbidden_)));
          set_has_isforbidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcForbiddenChatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 Playerguid = 2 [default = -1];
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerguid(), output);
  }

  // optional bool IsForbidden = 3 [default = false];
  if (has_isforbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isforbidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcForbiddenChatReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 Playerguid = 2 [default = -1];
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerguid(), target);
  }

  // optional bool IsForbidden = 3 [default = false];
  if (has_isforbidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isforbidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcForbiddenChatReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 Playerguid = 2 [default = -1];
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerguid());
    }

    // optional bool IsForbidden = 3 [default = false];
    if (has_isforbidden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcForbiddenChatReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcForbiddenChatReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcForbiddenChatReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcForbiddenChatReply::MergeFrom(const GuildRpcForbiddenChatReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_isforbidden()) {
      set_isforbidden(from.isforbidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcForbiddenChatReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcForbiddenChatReply::CopyFrom(const GuildRpcForbiddenChatReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcForbiddenChatReply::IsInitialized() const {

  return true;
}

void GuildRpcForbiddenChatReply::Swap(GuildRpcForbiddenChatReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerguid_, other->playerguid_);
    std::swap(isforbidden_, other->isforbidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcForbiddenChatReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcForbiddenChatReply_descriptor_;
  metadata.reflection = GuildRpcForbiddenChatReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcBuildLvUpCompleteNotify::kGuildBuildingInfoFieldNumber;
#endif  // !_MSC_VER

GuildRpcBuildLvUpCompleteNotify::GuildRpcBuildLvUpCompleteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcBuildLvUpCompleteNotify::InitAsDefaultInstance() {
  guildbuildinginfo_ = const_cast< ::GuildBuildingInfo*>(&::GuildBuildingInfo::default_instance());
}

GuildRpcBuildLvUpCompleteNotify::GuildRpcBuildLvUpCompleteNotify(const GuildRpcBuildLvUpCompleteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcBuildLvUpCompleteNotify::SharedCtor() {
  _cached_size_ = 0;
  guildbuildinginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcBuildLvUpCompleteNotify::~GuildRpcBuildLvUpCompleteNotify() {
  SharedDtor();
}

void GuildRpcBuildLvUpCompleteNotify::SharedDtor() {
  if (this != default_instance_) {
    delete guildbuildinginfo_;
  }
}

void GuildRpcBuildLvUpCompleteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcBuildLvUpCompleteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcBuildLvUpCompleteNotify_descriptor_;
}

const GuildRpcBuildLvUpCompleteNotify& GuildRpcBuildLvUpCompleteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcBuildLvUpCompleteNotify* GuildRpcBuildLvUpCompleteNotify::default_instance_ = NULL;

GuildRpcBuildLvUpCompleteNotify* GuildRpcBuildLvUpCompleteNotify::New() const {
  return new GuildRpcBuildLvUpCompleteNotify;
}

void GuildRpcBuildLvUpCompleteNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildbuildinginfo()) {
      if (guildbuildinginfo_ != NULL) guildbuildinginfo_->::GuildBuildingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcBuildLvUpCompleteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildBuildingInfo GuildBuildingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbuildinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcBuildLvUpCompleteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbuildinginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcBuildLvUpCompleteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildBuildingInfo GuildBuildingInfo = 2;
  if (has_guildbuildinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbuildinginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcBuildLvUpCompleteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildBuildingInfo GuildBuildingInfo = 2;
    if (has_guildbuildinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbuildinginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcBuildLvUpCompleteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcBuildLvUpCompleteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcBuildLvUpCompleteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcBuildLvUpCompleteNotify::MergeFrom(const GuildRpcBuildLvUpCompleteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildbuildinginfo()) {
      mutable_guildbuildinginfo()->::GuildBuildingInfo::MergeFrom(from.guildbuildinginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcBuildLvUpCompleteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcBuildLvUpCompleteNotify::CopyFrom(const GuildRpcBuildLvUpCompleteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcBuildLvUpCompleteNotify::IsInitialized() const {

  return true;
}

void GuildRpcBuildLvUpCompleteNotify::Swap(GuildRpcBuildLvUpCompleteNotify* other) {
  if (other != this) {
    std::swap(guildbuildinginfo_, other->guildbuildinginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcBuildLvUpCompleteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcBuildLvUpCompleteNotify_descriptor_;
  metadata.reflection = GuildRpcBuildLvUpCompleteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRpcGuildCurrencyChangeNotify::kGuildProsperFieldNumber;
const int GuildRpcGuildCurrencyChangeNotify::kGuildMoneyFieldNumber;
const int GuildRpcGuildCurrencyChangeNotify::kGuildResourceFieldNumber;
const int GuildRpcGuildCurrencyChangeNotify::kGuildWelfareFieldNumber;
const int GuildRpcGuildCurrencyChangeNotify::kMaintainCostFieldNumber;
#endif  // !_MSC_VER

GuildRpcGuildCurrencyChangeNotify::GuildRpcGuildCurrencyChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRpcGuildCurrencyChangeNotify::InitAsDefaultInstance() {
}

GuildRpcGuildCurrencyChangeNotify::GuildRpcGuildCurrencyChangeNotify(const GuildRpcGuildCurrencyChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRpcGuildCurrencyChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  guildprosper_ = -1;
  guildmoney_ = -1;
  guildresource_ = -1;
  guildwelfare_ = -1;
  maintaincost_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRpcGuildCurrencyChangeNotify::~GuildRpcGuildCurrencyChangeNotify() {
  SharedDtor();
}

void GuildRpcGuildCurrencyChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRpcGuildCurrencyChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRpcGuildCurrencyChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRpcGuildCurrencyChangeNotify_descriptor_;
}

const GuildRpcGuildCurrencyChangeNotify& GuildRpcGuildCurrencyChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildRpc_2eproto();
  return *default_instance_;
}

GuildRpcGuildCurrencyChangeNotify* GuildRpcGuildCurrencyChangeNotify::default_instance_ = NULL;

GuildRpcGuildCurrencyChangeNotify* GuildRpcGuildCurrencyChangeNotify::New() const {
  return new GuildRpcGuildCurrencyChangeNotify;
}

void GuildRpcGuildCurrencyChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildprosper_ = -1;
    guildmoney_ = -1;
    guildresource_ = -1;
    guildwelfare_ = -1;
    maintaincost_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRpcGuildCurrencyChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GuildProsper = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildprosper_)));
          set_has_guildprosper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GuildMoney;
        break;
      }

      // optional int32 GuildMoney = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GuildResource;
        break;
      }

      // optional int32 GuildResource = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildResource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildresource_)));
          set_has_guildresource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildWelfare;
        break;
      }

      // optional int32 GuildWelfare = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildWelfare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwelfare_)));
          set_has_guildwelfare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaintainCost;
        break;
      }

      // optional int32 MaintainCost = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaintainCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintaincost_)));
          set_has_maintaincost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRpcGuildCurrencyChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GuildProsper = 1 [default = -1];
  if (has_guildprosper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildprosper(), output);
  }

  // optional int32 GuildMoney = 2 [default = -1];
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildmoney(), output);
  }

  // optional int32 GuildResource = 3 [default = -1];
  if (has_guildresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildresource(), output);
  }

  // optional int32 GuildWelfare = 4 [default = -1];
  if (has_guildwelfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildwelfare(), output);
  }

  // optional int32 MaintainCost = 5 [default = -1];
  if (has_maintaincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maintaincost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRpcGuildCurrencyChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GuildProsper = 1 [default = -1];
  if (has_guildprosper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildprosper(), target);
  }

  // optional int32 GuildMoney = 2 [default = -1];
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildmoney(), target);
  }

  // optional int32 GuildResource = 3 [default = -1];
  if (has_guildresource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildresource(), target);
  }

  // optional int32 GuildWelfare = 4 [default = -1];
  if (has_guildwelfare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildwelfare(), target);
  }

  // optional int32 MaintainCost = 5 [default = -1];
  if (has_maintaincost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maintaincost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRpcGuildCurrencyChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GuildProsper = 1 [default = -1];
    if (has_guildprosper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildprosper());
    }

    // optional int32 GuildMoney = 2 [default = -1];
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

    // optional int32 GuildResource = 3 [default = -1];
    if (has_guildresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildresource());
    }

    // optional int32 GuildWelfare = 4 [default = -1];
    if (has_guildwelfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwelfare());
    }

    // optional int32 MaintainCost = 5 [default = -1];
    if (has_maintaincost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintaincost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRpcGuildCurrencyChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRpcGuildCurrencyChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRpcGuildCurrencyChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRpcGuildCurrencyChangeNotify::MergeFrom(const GuildRpcGuildCurrencyChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildprosper()) {
      set_guildprosper(from.guildprosper());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
    if (from.has_guildresource()) {
      set_guildresource(from.guildresource());
    }
    if (from.has_guildwelfare()) {
      set_guildwelfare(from.guildwelfare());
    }
    if (from.has_maintaincost()) {
      set_maintaincost(from.maintaincost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRpcGuildCurrencyChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRpcGuildCurrencyChangeNotify::CopyFrom(const GuildRpcGuildCurrencyChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRpcGuildCurrencyChangeNotify::IsInitialized() const {

  return true;
}

void GuildRpcGuildCurrencyChangeNotify::Swap(GuildRpcGuildCurrencyChangeNotify* other) {
  if (other != this) {
    std::swap(guildprosper_, other->guildprosper_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(guildresource_, other->guildresource_);
    std::swap(guildwelfare_, other->guildwelfare_);
    std::swap(maintaincost_, other->maintaincost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRpcGuildCurrencyChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRpcGuildCurrencyChangeNotify_descriptor_;
  metadata.reflection = GuildRpcGuildCurrencyChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
