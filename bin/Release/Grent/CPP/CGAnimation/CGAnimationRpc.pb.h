// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGAnimationRpc.proto

#ifndef PROTOBUF_CGAnimationRpc_2eproto__INCLUDED
#define PROTOBUF_CGAnimationRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CGAnimationRpc_2eproto();
void protobuf_AssignDesc_CGAnimationRpc_2eproto();
void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

class CGAnimationRpcCgPlayAsk;
class CGAnimationRpcCgPlayReply;
class CGAnimationRpcCgPlayNotifyNotify;
class CGAnimationRpcCgOverNotifyNotify;
class CGAnimationRpcCgSkipAsk;
class CGAnimationRpcCgSkipReply;
class CGAnimationRpcScriptPlayNotify;

// ===================================================================

class CGAnimationRpcCgPlayAsk : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgPlayAsk();
  virtual ~CGAnimationRpcCgPlayAsk();

  CGAnimationRpcCgPlayAsk(const CGAnimationRpcCgPlayAsk& from);

  inline CGAnimationRpcCgPlayAsk& operator=(const CGAnimationRpcCgPlayAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgPlayAsk& default_instance();

  void Swap(CGAnimationRpcCgPlayAsk* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgPlayAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgPlayAsk& from);
  void MergeFrom(const CGAnimationRpcCgPlayAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CgId = 1 [default = -1];
  inline bool has_cgid() const;
  inline void clear_cgid();
  static const int kCgIdFieldNumber = 1;
  inline ::google::protobuf::int32 cgid() const;
  inline void set_cgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgPlayAsk)
 private:
  inline void set_has_cgid();
  inline void clear_has_cgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgPlayAsk* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcCgPlayReply : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgPlayReply();
  virtual ~CGAnimationRpcCgPlayReply();

  CGAnimationRpcCgPlayReply(const CGAnimationRpcCgPlayReply& from);

  inline CGAnimationRpcCgPlayReply& operator=(const CGAnimationRpcCgPlayReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgPlayReply& default_instance();

  void Swap(CGAnimationRpcCgPlayReply* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgPlayReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgPlayReply& from);
  void MergeFrom(const CGAnimationRpcCgPlayReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgPlayReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgPlayReply* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcCgPlayNotifyNotify : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgPlayNotifyNotify();
  virtual ~CGAnimationRpcCgPlayNotifyNotify();

  CGAnimationRpcCgPlayNotifyNotify(const CGAnimationRpcCgPlayNotifyNotify& from);

  inline CGAnimationRpcCgPlayNotifyNotify& operator=(const CGAnimationRpcCgPlayNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgPlayNotifyNotify& default_instance();

  void Swap(CGAnimationRpcCgPlayNotifyNotify* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgPlayNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgPlayNotifyNotify& from);
  void MergeFrom(const CGAnimationRpcCgPlayNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 CgId = 2 [default = -1];
  inline bool has_cgid() const;
  inline void clear_cgid();
  static const int kCgIdFieldNumber = 2;
  inline ::google::protobuf::int32 cgid() const;
  inline void set_cgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgPlayNotifyNotify)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_cgid();
  inline void clear_has_cgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 cgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgPlayNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcCgOverNotifyNotify : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgOverNotifyNotify();
  virtual ~CGAnimationRpcCgOverNotifyNotify();

  CGAnimationRpcCgOverNotifyNotify(const CGAnimationRpcCgOverNotifyNotify& from);

  inline CGAnimationRpcCgOverNotifyNotify& operator=(const CGAnimationRpcCgOverNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgOverNotifyNotify& default_instance();

  void Swap(CGAnimationRpcCgOverNotifyNotify* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgOverNotifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgOverNotifyNotify& from);
  void MergeFrom(const CGAnimationRpcCgOverNotifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 CgId = 2 [default = -1];
  inline bool has_cgid() const;
  inline void clear_cgid();
  static const int kCgIdFieldNumber = 2;
  inline ::google::protobuf::int32 cgid() const;
  inline void set_cgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgOverNotifyNotify)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_cgid();
  inline void clear_has_cgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 cgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgOverNotifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcCgSkipAsk : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgSkipAsk();
  virtual ~CGAnimationRpcCgSkipAsk();

  CGAnimationRpcCgSkipAsk(const CGAnimationRpcCgSkipAsk& from);

  inline CGAnimationRpcCgSkipAsk& operator=(const CGAnimationRpcCgSkipAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgSkipAsk& default_instance();

  void Swap(CGAnimationRpcCgSkipAsk* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgSkipAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgSkipAsk& from);
  void MergeFrom(const CGAnimationRpcCgSkipAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgSkipAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgSkipAsk* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcCgSkipReply : public ::google::protobuf::Message {
 public:
  CGAnimationRpcCgSkipReply();
  virtual ~CGAnimationRpcCgSkipReply();

  CGAnimationRpcCgSkipReply(const CGAnimationRpcCgSkipReply& from);

  inline CGAnimationRpcCgSkipReply& operator=(const CGAnimationRpcCgSkipReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcCgSkipReply& default_instance();

  void Swap(CGAnimationRpcCgSkipReply* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcCgSkipReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcCgSkipReply& from);
  void MergeFrom(const CGAnimationRpcCgSkipReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcCgSkipReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcCgSkipReply* default_instance_;
};
// -------------------------------------------------------------------

class CGAnimationRpcScriptPlayNotify : public ::google::protobuf::Message {
 public:
  CGAnimationRpcScriptPlayNotify();
  virtual ~CGAnimationRpcScriptPlayNotify();

  CGAnimationRpcScriptPlayNotify(const CGAnimationRpcScriptPlayNotify& from);

  inline CGAnimationRpcScriptPlayNotify& operator=(const CGAnimationRpcScriptPlayNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAnimationRpcScriptPlayNotify& default_instance();

  void Swap(CGAnimationRpcScriptPlayNotify* other);

  // implements Message ----------------------------------------------

  CGAnimationRpcScriptPlayNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAnimationRpcScriptPlayNotify& from);
  void MergeFrom(const CGAnimationRpcScriptPlayNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 CasterGuid = 1 [default = 0];
  inline bool has_casterguid() const;
  inline void clear_casterguid();
  static const int kCasterGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 casterguid() const;
  inline void set_casterguid(::google::protobuf::uint64 value);

  // optional string AnimantionName = 3;
  inline bool has_animantionname() const;
  inline void clear_animantionname();
  static const int kAnimantionNameFieldNumber = 3;
  inline const ::std::string& animantionname() const;
  inline void set_animantionname(const ::std::string& value);
  inline void set_animantionname(const char* value);
  inline void set_animantionname(const char* value, size_t size);
  inline ::std::string* mutable_animantionname();
  inline ::std::string* release_animantionname();
  inline void set_allocated_animantionname(::std::string* animantionname);

  // optional float Time = 4 [default = -1];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline float time() const;
  inline void set_time(float value);

  // optional int32 IsLoop = 5 [default = -1];
  inline bool has_isloop() const;
  inline void clear_isloop();
  static const int kIsLoopFieldNumber = 5;
  inline ::google::protobuf::int32 isloop() const;
  inline void set_isloop(::google::protobuf::int32 value);

  // optional int32 SingleTime = 6 [default = -1];
  inline bool has_singletime() const;
  inline void clear_singletime();
  static const int kSingleTimeFieldNumber = 6;
  inline ::google::protobuf::int32 singletime() const;
  inline void set_singletime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAnimationRpcScriptPlayNotify)
 private:
  inline void set_has_casterguid();
  inline void clear_has_casterguid();
  inline void set_has_animantionname();
  inline void clear_has_animantionname();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_isloop();
  inline void clear_has_isloop();
  inline void set_has_singletime();
  inline void clear_has_singletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 casterguid_;
  ::std::string* animantionname_;
  float time_;
  ::google::protobuf::int32 isloop_;
  ::google::protobuf::int32 singletime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CGAnimationRpc_2eproto();
  friend void protobuf_AssignDesc_CGAnimationRpc_2eproto();
  friend void protobuf_ShutdownFile_CGAnimationRpc_2eproto();

  void InitAsDefaultInstance();
  static CGAnimationRpcScriptPlayNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// CGAnimationRpcCgPlayAsk

// optional int32 CgId = 1 [default = -1];
inline bool CGAnimationRpcCgPlayAsk::has_cgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcCgPlayAsk::set_has_cgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcCgPlayAsk::clear_has_cgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcCgPlayAsk::clear_cgid() {
  cgid_ = -1;
  clear_has_cgid();
}
inline ::google::protobuf::int32 CGAnimationRpcCgPlayAsk::cgid() const {
  return cgid_;
}
inline void CGAnimationRpcCgPlayAsk::set_cgid(::google::protobuf::int32 value) {
  set_has_cgid();
  cgid_ = value;
}

// -------------------------------------------------------------------

// CGAnimationRpcCgPlayReply

// optional int32 Result = 1 [default = -1];
inline bool CGAnimationRpcCgPlayReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcCgPlayReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcCgPlayReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcCgPlayReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 CGAnimationRpcCgPlayReply::result() const {
  return result_;
}
inline void CGAnimationRpcCgPlayReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CGAnimationRpcCgPlayNotifyNotify

// optional uint64 RoleId = 1 [default = 0];
inline bool CGAnimationRpcCgPlayNotifyNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcCgPlayNotifyNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcCgPlayNotifyNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcCgPlayNotifyNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 CGAnimationRpcCgPlayNotifyNotify::roleid() const {
  return roleid_;
}
inline void CGAnimationRpcCgPlayNotifyNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 CgId = 2 [default = -1];
inline bool CGAnimationRpcCgPlayNotifyNotify::has_cgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGAnimationRpcCgPlayNotifyNotify::set_has_cgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGAnimationRpcCgPlayNotifyNotify::clear_has_cgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGAnimationRpcCgPlayNotifyNotify::clear_cgid() {
  cgid_ = -1;
  clear_has_cgid();
}
inline ::google::protobuf::int32 CGAnimationRpcCgPlayNotifyNotify::cgid() const {
  return cgid_;
}
inline void CGAnimationRpcCgPlayNotifyNotify::set_cgid(::google::protobuf::int32 value) {
  set_has_cgid();
  cgid_ = value;
}

// -------------------------------------------------------------------

// CGAnimationRpcCgOverNotifyNotify

// optional uint64 RoleId = 1 [default = 0];
inline bool CGAnimationRpcCgOverNotifyNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcCgOverNotifyNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcCgOverNotifyNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcCgOverNotifyNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 CGAnimationRpcCgOverNotifyNotify::roleid() const {
  return roleid_;
}
inline void CGAnimationRpcCgOverNotifyNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 CgId = 2 [default = -1];
inline bool CGAnimationRpcCgOverNotifyNotify::has_cgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGAnimationRpcCgOverNotifyNotify::set_has_cgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGAnimationRpcCgOverNotifyNotify::clear_has_cgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGAnimationRpcCgOverNotifyNotify::clear_cgid() {
  cgid_ = -1;
  clear_has_cgid();
}
inline ::google::protobuf::int32 CGAnimationRpcCgOverNotifyNotify::cgid() const {
  return cgid_;
}
inline void CGAnimationRpcCgOverNotifyNotify::set_cgid(::google::protobuf::int32 value) {
  set_has_cgid();
  cgid_ = value;
}

// -------------------------------------------------------------------

// CGAnimationRpcCgSkipAsk

// -------------------------------------------------------------------

// CGAnimationRpcCgSkipReply

// optional int32 Result = 1 [default = -1];
inline bool CGAnimationRpcCgSkipReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcCgSkipReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcCgSkipReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcCgSkipReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 CGAnimationRpcCgSkipReply::result() const {
  return result_;
}
inline void CGAnimationRpcCgSkipReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CGAnimationRpcScriptPlayNotify

// optional uint64 CasterGuid = 1 [default = 0];
inline bool CGAnimationRpcScriptPlayNotify::has_casterguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAnimationRpcScriptPlayNotify::set_has_casterguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_has_casterguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_casterguid() {
  casterguid_ = GOOGLE_ULONGLONG(0);
  clear_has_casterguid();
}
inline ::google::protobuf::uint64 CGAnimationRpcScriptPlayNotify::casterguid() const {
  return casterguid_;
}
inline void CGAnimationRpcScriptPlayNotify::set_casterguid(::google::protobuf::uint64 value) {
  set_has_casterguid();
  casterguid_ = value;
}

// optional string AnimantionName = 3;
inline bool CGAnimationRpcScriptPlayNotify::has_animantionname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGAnimationRpcScriptPlayNotify::set_has_animantionname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_has_animantionname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_animantionname() {
  if (animantionname_ != &::google::protobuf::internal::kEmptyString) {
    animantionname_->clear();
  }
  clear_has_animantionname();
}
inline const ::std::string& CGAnimationRpcScriptPlayNotify::animantionname() const {
  return *animantionname_;
}
inline void CGAnimationRpcScriptPlayNotify::set_animantionname(const ::std::string& value) {
  set_has_animantionname();
  if (animantionname_ == &::google::protobuf::internal::kEmptyString) {
    animantionname_ = new ::std::string;
  }
  animantionname_->assign(value);
}
inline void CGAnimationRpcScriptPlayNotify::set_animantionname(const char* value) {
  set_has_animantionname();
  if (animantionname_ == &::google::protobuf::internal::kEmptyString) {
    animantionname_ = new ::std::string;
  }
  animantionname_->assign(value);
}
inline void CGAnimationRpcScriptPlayNotify::set_animantionname(const char* value, size_t size) {
  set_has_animantionname();
  if (animantionname_ == &::google::protobuf::internal::kEmptyString) {
    animantionname_ = new ::std::string;
  }
  animantionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGAnimationRpcScriptPlayNotify::mutable_animantionname() {
  set_has_animantionname();
  if (animantionname_ == &::google::protobuf::internal::kEmptyString) {
    animantionname_ = new ::std::string;
  }
  return animantionname_;
}
inline ::std::string* CGAnimationRpcScriptPlayNotify::release_animantionname() {
  clear_has_animantionname();
  if (animantionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = animantionname_;
    animantionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CGAnimationRpcScriptPlayNotify::set_allocated_animantionname(::std::string* animantionname) {
  if (animantionname_ != &::google::protobuf::internal::kEmptyString) {
    delete animantionname_;
  }
  if (animantionname) {
    set_has_animantionname();
    animantionname_ = animantionname;
  } else {
    clear_has_animantionname();
    animantionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float Time = 4 [default = -1];
inline bool CGAnimationRpcScriptPlayNotify::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGAnimationRpcScriptPlayNotify::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline float CGAnimationRpcScriptPlayNotify::time() const {
  return time_;
}
inline void CGAnimationRpcScriptPlayNotify::set_time(float value) {
  set_has_time();
  time_ = value;
}

// optional int32 IsLoop = 5 [default = -1];
inline bool CGAnimationRpcScriptPlayNotify::has_isloop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGAnimationRpcScriptPlayNotify::set_has_isloop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_has_isloop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_isloop() {
  isloop_ = -1;
  clear_has_isloop();
}
inline ::google::protobuf::int32 CGAnimationRpcScriptPlayNotify::isloop() const {
  return isloop_;
}
inline void CGAnimationRpcScriptPlayNotify::set_isloop(::google::protobuf::int32 value) {
  set_has_isloop();
  isloop_ = value;
}

// optional int32 SingleTime = 6 [default = -1];
inline bool CGAnimationRpcScriptPlayNotify::has_singletime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGAnimationRpcScriptPlayNotify::set_has_singletime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_has_singletime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGAnimationRpcScriptPlayNotify::clear_singletime() {
  singletime_ = -1;
  clear_has_singletime();
}
inline ::google::protobuf::int32 CGAnimationRpcScriptPlayNotify::singletime() const {
  return singletime_;
}
inline void CGAnimationRpcScriptPlayNotify::set_singletime(::google::protobuf::int32 value) {
  set_has_singletime();
  singletime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CGAnimationRpc_2eproto__INCLUDED
