// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGAnimationRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CGAnimationRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgPlayAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgPlayReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgPlayNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcCgOverNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgOverNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcCgSkipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgSkipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcCgSkipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcCgSkipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnimationRpcScriptPlayNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnimationRpcScriptPlayNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CGAnimationRpc_2eproto() {
  protobuf_AddDesc_CGAnimationRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CGAnimationRpc.proto");
  GOOGLE_CHECK(file != NULL);
  CGAnimationRpcCgPlayAsk_descriptor_ = file->message_type(0);
  static const int CGAnimationRpcCgPlayAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayAsk, cgid_),
  };
  CGAnimationRpcCgPlayAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgPlayAsk_descriptor_,
      CGAnimationRpcCgPlayAsk::default_instance_,
      CGAnimationRpcCgPlayAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgPlayAsk));
  CGAnimationRpcCgPlayReply_descriptor_ = file->message_type(1);
  static const int CGAnimationRpcCgPlayReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayReply, result_),
  };
  CGAnimationRpcCgPlayReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgPlayReply_descriptor_,
      CGAnimationRpcCgPlayReply::default_instance_,
      CGAnimationRpcCgPlayReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgPlayReply));
  CGAnimationRpcCgPlayNotifyNotify_descriptor_ = file->message_type(2);
  static const int CGAnimationRpcCgPlayNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayNotifyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayNotifyNotify, cgid_),
  };
  CGAnimationRpcCgPlayNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgPlayNotifyNotify_descriptor_,
      CGAnimationRpcCgPlayNotifyNotify::default_instance_,
      CGAnimationRpcCgPlayNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgPlayNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgPlayNotifyNotify));
  CGAnimationRpcCgOverNotifyNotify_descriptor_ = file->message_type(3);
  static const int CGAnimationRpcCgOverNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgOverNotifyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgOverNotifyNotify, cgid_),
  };
  CGAnimationRpcCgOverNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgOverNotifyNotify_descriptor_,
      CGAnimationRpcCgOverNotifyNotify::default_instance_,
      CGAnimationRpcCgOverNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgOverNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgOverNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgOverNotifyNotify));
  CGAnimationRpcCgSkipAsk_descriptor_ = file->message_type(4);
  static const int CGAnimationRpcCgSkipAsk_offsets_[1] = {
  };
  CGAnimationRpcCgSkipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgSkipAsk_descriptor_,
      CGAnimationRpcCgSkipAsk::default_instance_,
      CGAnimationRpcCgSkipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgSkipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgSkipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgSkipAsk));
  CGAnimationRpcCgSkipReply_descriptor_ = file->message_type(5);
  static const int CGAnimationRpcCgSkipReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgSkipReply, result_),
  };
  CGAnimationRpcCgSkipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcCgSkipReply_descriptor_,
      CGAnimationRpcCgSkipReply::default_instance_,
      CGAnimationRpcCgSkipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgSkipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcCgSkipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcCgSkipReply));
  CGAnimationRpcScriptPlayNotify_descriptor_ = file->message_type(6);
  static const int CGAnimationRpcScriptPlayNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, casterguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, animantionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, isloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, singletime_),
  };
  CGAnimationRpcScriptPlayNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnimationRpcScriptPlayNotify_descriptor_,
      CGAnimationRpcScriptPlayNotify::default_instance_,
      CGAnimationRpcScriptPlayNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnimationRpcScriptPlayNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnimationRpcScriptPlayNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CGAnimationRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgPlayAsk_descriptor_, &CGAnimationRpcCgPlayAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgPlayReply_descriptor_, &CGAnimationRpcCgPlayReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgPlayNotifyNotify_descriptor_, &CGAnimationRpcCgPlayNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgOverNotifyNotify_descriptor_, &CGAnimationRpcCgOverNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgSkipAsk_descriptor_, &CGAnimationRpcCgSkipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcCgSkipReply_descriptor_, &CGAnimationRpcCgSkipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnimationRpcScriptPlayNotify_descriptor_, &CGAnimationRpcScriptPlayNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CGAnimationRpc_2eproto() {
  delete CGAnimationRpcCgPlayAsk::default_instance_;
  delete CGAnimationRpcCgPlayAsk_reflection_;
  delete CGAnimationRpcCgPlayReply::default_instance_;
  delete CGAnimationRpcCgPlayReply_reflection_;
  delete CGAnimationRpcCgPlayNotifyNotify::default_instance_;
  delete CGAnimationRpcCgPlayNotifyNotify_reflection_;
  delete CGAnimationRpcCgOverNotifyNotify::default_instance_;
  delete CGAnimationRpcCgOverNotifyNotify_reflection_;
  delete CGAnimationRpcCgSkipAsk::default_instance_;
  delete CGAnimationRpcCgSkipAsk_reflection_;
  delete CGAnimationRpcCgSkipReply::default_instance_;
  delete CGAnimationRpcCgSkipReply_reflection_;
  delete CGAnimationRpcScriptPlayNotify::default_instance_;
  delete CGAnimationRpcScriptPlayNotify_reflection_;
}

void protobuf_AddDesc_CGAnimationRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024CGAnimationRpc.proto\032\022PublicStruct.pro"
    "to\"+\n\027CGAnimationRpcCgPlayAsk\022\020\n\004CgId\030\001 "
    "\001(\005:\002-1\"/\n\031CGAnimationRpcCgPlayReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\"G\n CGAnimationRpcCgPlay"
    "NotifyNotify\022\021\n\006RoleId\030\001 \001(\004:\0010\022\020\n\004CgId\030"
    "\002 \001(\005:\002-1\"G\n CGAnimationRpcCgOverNotifyN"
    "otify\022\021\n\006RoleId\030\001 \001(\004:\0010\022\020\n\004CgId\030\002 \001(\005:\002"
    "-1\"\031\n\027CGAnimationRpcCgSkipAsk\"/\n\031CGAnima"
    "tionRpcCgSkipReply\022\022\n\006Result\030\001 \001(\005:\002-1\"\215"
    "\001\n\036CGAnimationRpcScriptPlayNotify\022\025\n\nCas"
    "terGuid\030\001 \001(\004:\0010\022\026\n\016AnimantionName\030\003 \001(\t"
    "\022\020\n\004Time\030\004 \001(\002:\002-1\022\022\n\006IsLoop\030\005 \001(\005:\002-1\022\026"
    "\n\nSingleTime\030\006 \001(\005:\002-1", 502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CGAnimationRpc.proto", &protobuf_RegisterTypes);
  CGAnimationRpcCgPlayAsk::default_instance_ = new CGAnimationRpcCgPlayAsk();
  CGAnimationRpcCgPlayReply::default_instance_ = new CGAnimationRpcCgPlayReply();
  CGAnimationRpcCgPlayNotifyNotify::default_instance_ = new CGAnimationRpcCgPlayNotifyNotify();
  CGAnimationRpcCgOverNotifyNotify::default_instance_ = new CGAnimationRpcCgOverNotifyNotify();
  CGAnimationRpcCgSkipAsk::default_instance_ = new CGAnimationRpcCgSkipAsk();
  CGAnimationRpcCgSkipReply::default_instance_ = new CGAnimationRpcCgSkipReply();
  CGAnimationRpcScriptPlayNotify::default_instance_ = new CGAnimationRpcScriptPlayNotify();
  CGAnimationRpcCgPlayAsk::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcCgPlayReply::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcCgPlayNotifyNotify::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcCgOverNotifyNotify::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcCgSkipAsk::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcCgSkipReply::default_instance_->InitAsDefaultInstance();
  CGAnimationRpcScriptPlayNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CGAnimationRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CGAnimationRpc_2eproto {
  StaticDescriptorInitializer_CGAnimationRpc_2eproto() {
    protobuf_AddDesc_CGAnimationRpc_2eproto();
  }
} static_descriptor_initializer_CGAnimationRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcCgPlayAsk::kCgIdFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcCgPlayAsk::CGAnimationRpcCgPlayAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgPlayAsk::InitAsDefaultInstance() {
}

CGAnimationRpcCgPlayAsk::CGAnimationRpcCgPlayAsk(const CGAnimationRpcCgPlayAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayAsk::SharedCtor() {
  _cached_size_ = 0;
  cgid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgPlayAsk::~CGAnimationRpcCgPlayAsk() {
  SharedDtor();
}

void CGAnimationRpcCgPlayAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgPlayAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgPlayAsk_descriptor_;
}

const CGAnimationRpcCgPlayAsk& CGAnimationRpcCgPlayAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgPlayAsk* CGAnimationRpcCgPlayAsk::default_instance_ = NULL;

CGAnimationRpcCgPlayAsk* CGAnimationRpcCgPlayAsk::New() const {
  return new CGAnimationRpcCgPlayAsk;
}

void CGAnimationRpcCgPlayAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cgid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgPlayAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CgId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgPlayAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CgId = 1 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgPlayAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CgId = 1 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgPlayAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CgId = 1 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgPlayAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgPlayAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgPlayAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgPlayAsk::MergeFrom(const CGAnimationRpcCgPlayAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgPlayAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayAsk::CopyFrom(const CGAnimationRpcCgPlayAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgPlayAsk::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgPlayAsk::Swap(CGAnimationRpcCgPlayAsk* other) {
  if (other != this) {
    std::swap(cgid_, other->cgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgPlayAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgPlayAsk_descriptor_;
  metadata.reflection = CGAnimationRpcCgPlayAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcCgPlayReply::kResultFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcCgPlayReply::CGAnimationRpcCgPlayReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgPlayReply::InitAsDefaultInstance() {
}

CGAnimationRpcCgPlayReply::CGAnimationRpcCgPlayReply(const CGAnimationRpcCgPlayReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgPlayReply::~CGAnimationRpcCgPlayReply() {
  SharedDtor();
}

void CGAnimationRpcCgPlayReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgPlayReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgPlayReply_descriptor_;
}

const CGAnimationRpcCgPlayReply& CGAnimationRpcCgPlayReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgPlayReply* CGAnimationRpcCgPlayReply::default_instance_ = NULL;

CGAnimationRpcCgPlayReply* CGAnimationRpcCgPlayReply::New() const {
  return new CGAnimationRpcCgPlayReply;
}

void CGAnimationRpcCgPlayReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgPlayReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgPlayReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgPlayReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgPlayReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgPlayReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgPlayReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgPlayReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgPlayReply::MergeFrom(const CGAnimationRpcCgPlayReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgPlayReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayReply::CopyFrom(const CGAnimationRpcCgPlayReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgPlayReply::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgPlayReply::Swap(CGAnimationRpcCgPlayReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgPlayReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgPlayReply_descriptor_;
  metadata.reflection = CGAnimationRpcCgPlayReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcCgPlayNotifyNotify::kRoleIdFieldNumber;
const int CGAnimationRpcCgPlayNotifyNotify::kCgIdFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcCgPlayNotifyNotify::CGAnimationRpcCgPlayNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgPlayNotifyNotify::InitAsDefaultInstance() {
}

CGAnimationRpcCgPlayNotifyNotify::CGAnimationRpcCgPlayNotifyNotify(const CGAnimationRpcCgPlayNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  cgid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgPlayNotifyNotify::~CGAnimationRpcCgPlayNotifyNotify() {
  SharedDtor();
}

void CGAnimationRpcCgPlayNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgPlayNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgPlayNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgPlayNotifyNotify_descriptor_;
}

const CGAnimationRpcCgPlayNotifyNotify& CGAnimationRpcCgPlayNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgPlayNotifyNotify* CGAnimationRpcCgPlayNotifyNotify::default_instance_ = NULL;

CGAnimationRpcCgPlayNotifyNotify* CGAnimationRpcCgPlayNotifyNotify::New() const {
  return new CGAnimationRpcCgPlayNotifyNotify;
}

void CGAnimationRpcCgPlayNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    cgid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgPlayNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CgId;
        break;
      }

      // optional int32 CgId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgPlayNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgPlayNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgPlayNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 CgId = 2 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgPlayNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgPlayNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgPlayNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgPlayNotifyNotify::MergeFrom(const CGAnimationRpcCgPlayNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgPlayNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgPlayNotifyNotify::CopyFrom(const CGAnimationRpcCgPlayNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgPlayNotifyNotify::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgPlayNotifyNotify::Swap(CGAnimationRpcCgPlayNotifyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(cgid_, other->cgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgPlayNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgPlayNotifyNotify_descriptor_;
  metadata.reflection = CGAnimationRpcCgPlayNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcCgOverNotifyNotify::kRoleIdFieldNumber;
const int CGAnimationRpcCgOverNotifyNotify::kCgIdFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcCgOverNotifyNotify::CGAnimationRpcCgOverNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgOverNotifyNotify::InitAsDefaultInstance() {
}

CGAnimationRpcCgOverNotifyNotify::CGAnimationRpcCgOverNotifyNotify(const CGAnimationRpcCgOverNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgOverNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  cgid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgOverNotifyNotify::~CGAnimationRpcCgOverNotifyNotify() {
  SharedDtor();
}

void CGAnimationRpcCgOverNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgOverNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgOverNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgOverNotifyNotify_descriptor_;
}

const CGAnimationRpcCgOverNotifyNotify& CGAnimationRpcCgOverNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgOverNotifyNotify* CGAnimationRpcCgOverNotifyNotify::default_instance_ = NULL;

CGAnimationRpcCgOverNotifyNotify* CGAnimationRpcCgOverNotifyNotify::New() const {
  return new CGAnimationRpcCgOverNotifyNotify;
}

void CGAnimationRpcCgOverNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    cgid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgOverNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CgId;
        break;
      }

      // optional int32 CgId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgOverNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgOverNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgOverNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 CgId = 2 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgOverNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgOverNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgOverNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgOverNotifyNotify::MergeFrom(const CGAnimationRpcCgOverNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgOverNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgOverNotifyNotify::CopyFrom(const CGAnimationRpcCgOverNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgOverNotifyNotify::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgOverNotifyNotify::Swap(CGAnimationRpcCgOverNotifyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(cgid_, other->cgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgOverNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgOverNotifyNotify_descriptor_;
  metadata.reflection = CGAnimationRpcCgOverNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGAnimationRpcCgSkipAsk::CGAnimationRpcCgSkipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgSkipAsk::InitAsDefaultInstance() {
}

CGAnimationRpcCgSkipAsk::CGAnimationRpcCgSkipAsk(const CGAnimationRpcCgSkipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgSkipAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgSkipAsk::~CGAnimationRpcCgSkipAsk() {
  SharedDtor();
}

void CGAnimationRpcCgSkipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgSkipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgSkipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgSkipAsk_descriptor_;
}

const CGAnimationRpcCgSkipAsk& CGAnimationRpcCgSkipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgSkipAsk* CGAnimationRpcCgSkipAsk::default_instance_ = NULL;

CGAnimationRpcCgSkipAsk* CGAnimationRpcCgSkipAsk::New() const {
  return new CGAnimationRpcCgSkipAsk;
}

void CGAnimationRpcCgSkipAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgSkipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgSkipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgSkipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgSkipAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgSkipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgSkipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgSkipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgSkipAsk::MergeFrom(const CGAnimationRpcCgSkipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgSkipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgSkipAsk::CopyFrom(const CGAnimationRpcCgSkipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgSkipAsk::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgSkipAsk::Swap(CGAnimationRpcCgSkipAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgSkipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgSkipAsk_descriptor_;
  metadata.reflection = CGAnimationRpcCgSkipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcCgSkipReply::kResultFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcCgSkipReply::CGAnimationRpcCgSkipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcCgSkipReply::InitAsDefaultInstance() {
}

CGAnimationRpcCgSkipReply::CGAnimationRpcCgSkipReply(const CGAnimationRpcCgSkipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcCgSkipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcCgSkipReply::~CGAnimationRpcCgSkipReply() {
  SharedDtor();
}

void CGAnimationRpcCgSkipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnimationRpcCgSkipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcCgSkipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcCgSkipReply_descriptor_;
}

const CGAnimationRpcCgSkipReply& CGAnimationRpcCgSkipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcCgSkipReply* CGAnimationRpcCgSkipReply::default_instance_ = NULL;

CGAnimationRpcCgSkipReply* CGAnimationRpcCgSkipReply::New() const {
  return new CGAnimationRpcCgSkipReply;
}

void CGAnimationRpcCgSkipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcCgSkipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcCgSkipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcCgSkipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcCgSkipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcCgSkipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcCgSkipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcCgSkipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcCgSkipReply::MergeFrom(const CGAnimationRpcCgSkipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcCgSkipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcCgSkipReply::CopyFrom(const CGAnimationRpcCgSkipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcCgSkipReply::IsInitialized() const {

  return true;
}

void CGAnimationRpcCgSkipReply::Swap(CGAnimationRpcCgSkipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcCgSkipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcCgSkipReply_descriptor_;
  metadata.reflection = CGAnimationRpcCgSkipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnimationRpcScriptPlayNotify::kCasterGuidFieldNumber;
const int CGAnimationRpcScriptPlayNotify::kAnimantionNameFieldNumber;
const int CGAnimationRpcScriptPlayNotify::kTimeFieldNumber;
const int CGAnimationRpcScriptPlayNotify::kIsLoopFieldNumber;
const int CGAnimationRpcScriptPlayNotify::kSingleTimeFieldNumber;
#endif  // !_MSC_VER

CGAnimationRpcScriptPlayNotify::CGAnimationRpcScriptPlayNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAnimationRpcScriptPlayNotify::InitAsDefaultInstance() {
}

CGAnimationRpcScriptPlayNotify::CGAnimationRpcScriptPlayNotify(const CGAnimationRpcScriptPlayNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAnimationRpcScriptPlayNotify::SharedCtor() {
  _cached_size_ = 0;
  casterguid_ = GOOGLE_ULONGLONG(0);
  animantionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = -1;
  isloop_ = -1;
  singletime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnimationRpcScriptPlayNotify::~CGAnimationRpcScriptPlayNotify() {
  SharedDtor();
}

void CGAnimationRpcScriptPlayNotify::SharedDtor() {
  if (animantionname_ != &::google::protobuf::internal::kEmptyString) {
    delete animantionname_;
  }
  if (this != default_instance_) {
  }
}

void CGAnimationRpcScriptPlayNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnimationRpcScriptPlayNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnimationRpcScriptPlayNotify_descriptor_;
}

const CGAnimationRpcScriptPlayNotify& CGAnimationRpcScriptPlayNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGAnimationRpc_2eproto();
  return *default_instance_;
}

CGAnimationRpcScriptPlayNotify* CGAnimationRpcScriptPlayNotify::default_instance_ = NULL;

CGAnimationRpcScriptPlayNotify* CGAnimationRpcScriptPlayNotify::New() const {
  return new CGAnimationRpcScriptPlayNotify;
}

void CGAnimationRpcScriptPlayNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    casterguid_ = GOOGLE_ULONGLONG(0);
    if (has_animantionname()) {
      if (animantionname_ != &::google::protobuf::internal::kEmptyString) {
        animantionname_->clear();
      }
    }
    time_ = -1;
    isloop_ = -1;
    singletime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnimationRpcScriptPlayNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 CasterGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &casterguid_)));
          set_has_casterguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AnimantionName;
        break;
      }

      // optional string AnimantionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnimantionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animantionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->animantionname().data(), this->animantionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Time;
        break;
      }

      // optional float Time = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsLoop;
        break;
      }

      // optional int32 IsLoop = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLoop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isloop_)));
          set_has_isloop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SingleTime;
        break;
      }

      // optional int32 SingleTime = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SingleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &singletime_)));
          set_has_singletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAnimationRpcScriptPlayNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 CasterGuid = 1 [default = 0];
  if (has_casterguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->casterguid(), output);
  }

  // optional string AnimantionName = 3;
  if (has_animantionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animantionname().data(), this->animantionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->animantionname(), output);
  }

  // optional float Time = 4 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time(), output);
  }

  // optional int32 IsLoop = 5 [default = -1];
  if (has_isloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isloop(), output);
  }

  // optional int32 SingleTime = 6 [default = -1];
  if (has_singletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->singletime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAnimationRpcScriptPlayNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 CasterGuid = 1 [default = 0];
  if (has_casterguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->casterguid(), target);
  }

  // optional string AnimantionName = 3;
  if (has_animantionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animantionname().data(), this->animantionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->animantionname(), target);
  }

  // optional float Time = 4 [default = -1];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time(), target);
  }

  // optional int32 IsLoop = 5 [default = -1];
  if (has_isloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isloop(), target);
  }

  // optional int32 SingleTime = 6 [default = -1];
  if (has_singletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->singletime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAnimationRpcScriptPlayNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 CasterGuid = 1 [default = 0];
    if (has_casterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->casterguid());
    }

    // optional string AnimantionName = 3;
    if (has_animantionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animantionname());
    }

    // optional float Time = 4 [default = -1];
    if (has_time()) {
      total_size += 1 + 4;
    }

    // optional int32 IsLoop = 5 [default = -1];
    if (has_isloop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isloop());
    }

    // optional int32 SingleTime = 6 [default = -1];
    if (has_singletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singletime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnimationRpcScriptPlayNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnimationRpcScriptPlayNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnimationRpcScriptPlayNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnimationRpcScriptPlayNotify::MergeFrom(const CGAnimationRpcScriptPlayNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_casterguid()) {
      set_casterguid(from.casterguid());
    }
    if (from.has_animantionname()) {
      set_animantionname(from.animantionname());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isloop()) {
      set_isloop(from.isloop());
    }
    if (from.has_singletime()) {
      set_singletime(from.singletime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnimationRpcScriptPlayNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnimationRpcScriptPlayNotify::CopyFrom(const CGAnimationRpcScriptPlayNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnimationRpcScriptPlayNotify::IsInitialized() const {

  return true;
}

void CGAnimationRpcScriptPlayNotify::Swap(CGAnimationRpcScriptPlayNotify* other) {
  if (other != this) {
    std::swap(casterguid_, other->casterguid_);
    std::swap(animantionname_, other->animantionname_);
    std::swap(time_, other->time_);
    std::swap(isloop_, other->isloop_);
    std::swap(singletime_, other->singletime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnimationRpcScriptPlayNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnimationRpcScriptPlayNotify_descriptor_;
  metadata.reflection = CGAnimationRpcScriptPlayNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
