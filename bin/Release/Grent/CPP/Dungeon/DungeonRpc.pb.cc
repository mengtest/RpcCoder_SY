// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DungeonRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcExitDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcExitDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcInformCreateDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcInformCreateDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcInformCreateDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcInformCreateDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcSettlementNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcSettlementNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcEnterDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcEnterDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcEnterDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcEnterDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonListInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonListInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonListInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonListInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcCreateTutorialAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateTutorialAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcCreateTutorialReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateTutorialReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcQuitTutorialAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcQuitTutorialAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcQuitTutorialReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcQuitTutorialReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeonTargetNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeonTargetNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcTargetContentChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcTargetContentChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcDungeon_NotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcDungeon_NotifyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DungeonRpc_2eproto() {
  protobuf_AddDesc_DungeonRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DungeonRpc.proto");
  GOOGLE_CHECK(file != NULL);
  DungeonRpcCreateDungeonAsk_descriptor_ = file->message_type(0);
  static const int DungeonRpcCreateDungeonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, dungeonconfigid_),
  };
  DungeonRpcCreateDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateDungeonAsk_descriptor_,
      DungeonRpcCreateDungeonAsk::default_instance_,
      DungeonRpcCreateDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateDungeonAsk));
  DungeonRpcCreateDungeonReply_descriptor_ = file->message_type(1);
  static const int DungeonRpcCreateDungeonReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, dungeonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, sceneconfigid_),
  };
  DungeonRpcCreateDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateDungeonReply_descriptor_,
      DungeonRpcCreateDungeonReply::default_instance_,
      DungeonRpcCreateDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateDungeonReply));
  DungeonRpcExitDungeonAsk_descriptor_ = file->message_type(2);
  static const int DungeonRpcExitDungeonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, sceneid_),
  };
  DungeonRpcExitDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcExitDungeonAsk_descriptor_,
      DungeonRpcExitDungeonAsk::default_instance_,
      DungeonRpcExitDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcExitDungeonAsk));
  DungeonRpcExitDungeonReply_descriptor_ = file->message_type(3);
  static const int DungeonRpcExitDungeonReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, sceneconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, sceneid_),
  };
  DungeonRpcExitDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcExitDungeonReply_descriptor_,
      DungeonRpcExitDungeonReply::default_instance_,
      DungeonRpcExitDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcExitDungeonReply));
  DungeonRpcInformCreateDungeonAsk_descriptor_ = file->message_type(4);
  static const int DungeonRpcInformCreateDungeonAsk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, targetsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, dungeonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, roleids_),
  };
  DungeonRpcInformCreateDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcInformCreateDungeonAsk_descriptor_,
      DungeonRpcInformCreateDungeonAsk::default_instance_,
      DungeonRpcInformCreateDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcInformCreateDungeonAsk));
  DungeonRpcInformCreateDungeonReply_descriptor_ = file->message_type(5);
  static const int DungeonRpcInformCreateDungeonReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonReply, result_),
  };
  DungeonRpcInformCreateDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcInformCreateDungeonReply_descriptor_,
      DungeonRpcInformCreateDungeonReply::default_instance_,
      DungeonRpcInformCreateDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcInformCreateDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcInformCreateDungeonReply));
  DungeonRpcSettlementNotify_descriptor_ = file->message_type(6);
  static const int DungeonRpcSettlementNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcSettlementNotify, settlementresult_),
  };
  DungeonRpcSettlementNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcSettlementNotify_descriptor_,
      DungeonRpcSettlementNotify::default_instance_,
      DungeonRpcSettlementNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcSettlementNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcSettlementNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcSettlementNotify));
  DungeonRpcEnterDungeonAsk_descriptor_ = file->message_type(7);
  static const int DungeonRpcEnterDungeonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonAsk, dungeonconfigid_),
  };
  DungeonRpcEnterDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcEnterDungeonAsk_descriptor_,
      DungeonRpcEnterDungeonAsk::default_instance_,
      DungeonRpcEnterDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcEnterDungeonAsk));
  DungeonRpcEnterDungeonReply_descriptor_ = file->message_type(8);
  static const int DungeonRpcEnterDungeonReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonReply, result_),
  };
  DungeonRpcEnterDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcEnterDungeonReply_descriptor_,
      DungeonRpcEnterDungeonReply::default_instance_,
      DungeonRpcEnterDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcEnterDungeonReply));
  DungeonRpcDungeonDataNotify_descriptor_ = file->message_type(9);
  static const int DungeonRpcDungeonDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonDataNotify, begintime_),
  };
  DungeonRpcDungeonDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonDataNotify_descriptor_,
      DungeonRpcDungeonDataNotify::default_instance_,
      DungeonRpcDungeonDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonDataNotify));
  DungeonRpcDungeonSyncAsk_descriptor_ = file->message_type(10);
  static const int DungeonRpcDungeonSyncAsk_offsets_[1] = {
  };
  DungeonRpcDungeonSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonSyncAsk_descriptor_,
      DungeonRpcDungeonSyncAsk::default_instance_,
      DungeonRpcDungeonSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonSyncAsk));
  DungeonRpcDungeonSyncReply_descriptor_ = file->message_type(11);
  static const int DungeonRpcDungeonSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncReply, data_),
  };
  DungeonRpcDungeonSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonSyncReply_descriptor_,
      DungeonRpcDungeonSyncReply::default_instance_,
      DungeonRpcDungeonSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonSyncReply));
  DungeonRpcDungeonListInfoAsk_descriptor_ = file->message_type(12);
  static const int DungeonRpcDungeonListInfoAsk_offsets_[1] = {
  };
  DungeonRpcDungeonListInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonListInfoAsk_descriptor_,
      DungeonRpcDungeonListInfoAsk::default_instance_,
      DungeonRpcDungeonListInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonListInfoAsk));
  DungeonRpcDungeonListInfoReply_descriptor_ = file->message_type(13);
  static const int DungeonRpcDungeonListInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoReply, dungeonbossdata_),
  };
  DungeonRpcDungeonListInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonListInfoReply_descriptor_,
      DungeonRpcDungeonListInfoReply::default_instance_,
      DungeonRpcDungeonListInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonListInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonListInfoReply));
  DungeonRpcCreateTutorialAsk_descriptor_ = file->message_type(14);
  static const int DungeonRpcCreateTutorialAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialAsk, dungeonconfigid_),
  };
  DungeonRpcCreateTutorialAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateTutorialAsk_descriptor_,
      DungeonRpcCreateTutorialAsk::default_instance_,
      DungeonRpcCreateTutorialAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateTutorialAsk));
  DungeonRpcCreateTutorialReply_descriptor_ = file->message_type(15);
  static const int DungeonRpcCreateTutorialReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialReply, dungeonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialReply, sceneconfigid_),
  };
  DungeonRpcCreateTutorialReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateTutorialReply_descriptor_,
      DungeonRpcCreateTutorialReply::default_instance_,
      DungeonRpcCreateTutorialReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateTutorialReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateTutorialReply));
  DungeonRpcQuitTutorialAsk_descriptor_ = file->message_type(16);
  static const int DungeonRpcQuitTutorialAsk_offsets_[1] = {
  };
  DungeonRpcQuitTutorialAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcQuitTutorialAsk_descriptor_,
      DungeonRpcQuitTutorialAsk::default_instance_,
      DungeonRpcQuitTutorialAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcQuitTutorialAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcQuitTutorialAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcQuitTutorialAsk));
  DungeonRpcQuitTutorialReply_descriptor_ = file->message_type(17);
  static const int DungeonRpcQuitTutorialReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcQuitTutorialReply, result_),
  };
  DungeonRpcQuitTutorialReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcQuitTutorialReply_descriptor_,
      DungeonRpcQuitTutorialReply::default_instance_,
      DungeonRpcQuitTutorialReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcQuitTutorialReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcQuitTutorialReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcQuitTutorialReply));
  DungeonRpcDungeonTargetNotify_descriptor_ = file->message_type(18);
  static const int DungeonRpcDungeonTargetNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonTargetNotify, dungeontarget_),
  };
  DungeonRpcDungeonTargetNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeonTargetNotify_descriptor_,
      DungeonRpcDungeonTargetNotify::default_instance_,
      DungeonRpcDungeonTargetNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonTargetNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeonTargetNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeonTargetNotify));
  DungeonRpcTargetContentChangeNotify_descriptor_ = file->message_type(19);
  static const int DungeonRpcTargetContentChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTargetContentChangeNotify, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTargetContentChangeNotify, subindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTargetContentChangeNotify, curcount_),
  };
  DungeonRpcTargetContentChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcTargetContentChangeNotify_descriptor_,
      DungeonRpcTargetContentChangeNotify::default_instance_,
      DungeonRpcTargetContentChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTargetContentChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTargetContentChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcTargetContentChangeNotify));
  DungeonRpcDungeon_NotifyNotify_descriptor_ = file->message_type(20);
  static const int DungeonRpcDungeon_NotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeon_NotifyNotify, textid_),
  };
  DungeonRpcDungeon_NotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcDungeon_NotifyNotify_descriptor_,
      DungeonRpcDungeon_NotifyNotify::default_instance_,
      DungeonRpcDungeon_NotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeon_NotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcDungeon_NotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcDungeon_NotifyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DungeonRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateDungeonAsk_descriptor_, &DungeonRpcCreateDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateDungeonReply_descriptor_, &DungeonRpcCreateDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcExitDungeonAsk_descriptor_, &DungeonRpcExitDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcExitDungeonReply_descriptor_, &DungeonRpcExitDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcInformCreateDungeonAsk_descriptor_, &DungeonRpcInformCreateDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcInformCreateDungeonReply_descriptor_, &DungeonRpcInformCreateDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcSettlementNotify_descriptor_, &DungeonRpcSettlementNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcEnterDungeonAsk_descriptor_, &DungeonRpcEnterDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcEnterDungeonReply_descriptor_, &DungeonRpcEnterDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonDataNotify_descriptor_, &DungeonRpcDungeonDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonSyncAsk_descriptor_, &DungeonRpcDungeonSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonSyncReply_descriptor_, &DungeonRpcDungeonSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonListInfoAsk_descriptor_, &DungeonRpcDungeonListInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonListInfoReply_descriptor_, &DungeonRpcDungeonListInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateTutorialAsk_descriptor_, &DungeonRpcCreateTutorialAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateTutorialReply_descriptor_, &DungeonRpcCreateTutorialReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcQuitTutorialAsk_descriptor_, &DungeonRpcQuitTutorialAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcQuitTutorialReply_descriptor_, &DungeonRpcQuitTutorialReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeonTargetNotify_descriptor_, &DungeonRpcDungeonTargetNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcTargetContentChangeNotify_descriptor_, &DungeonRpcTargetContentChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcDungeon_NotifyNotify_descriptor_, &DungeonRpcDungeon_NotifyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DungeonRpc_2eproto() {
  delete DungeonRpcCreateDungeonAsk::default_instance_;
  delete DungeonRpcCreateDungeonAsk_reflection_;
  delete DungeonRpcCreateDungeonReply::default_instance_;
  delete DungeonRpcCreateDungeonReply_reflection_;
  delete DungeonRpcExitDungeonAsk::default_instance_;
  delete DungeonRpcExitDungeonAsk_reflection_;
  delete DungeonRpcExitDungeonReply::default_instance_;
  delete DungeonRpcExitDungeonReply_reflection_;
  delete DungeonRpcInformCreateDungeonAsk::default_instance_;
  delete DungeonRpcInformCreateDungeonAsk_reflection_;
  delete DungeonRpcInformCreateDungeonReply::default_instance_;
  delete DungeonRpcInformCreateDungeonReply_reflection_;
  delete DungeonRpcSettlementNotify::default_instance_;
  delete DungeonRpcSettlementNotify_reflection_;
  delete DungeonRpcEnterDungeonAsk::default_instance_;
  delete DungeonRpcEnterDungeonAsk_reflection_;
  delete DungeonRpcEnterDungeonReply::default_instance_;
  delete DungeonRpcEnterDungeonReply_reflection_;
  delete DungeonRpcDungeonDataNotify::default_instance_;
  delete DungeonRpcDungeonDataNotify_reflection_;
  delete DungeonRpcDungeonSyncAsk::default_instance_;
  delete DungeonRpcDungeonSyncAsk_reflection_;
  delete DungeonRpcDungeonSyncReply::default_instance_;
  delete DungeonRpcDungeonSyncReply_reflection_;
  delete DungeonRpcDungeonListInfoAsk::default_instance_;
  delete DungeonRpcDungeonListInfoAsk_reflection_;
  delete DungeonRpcDungeonListInfoReply::default_instance_;
  delete DungeonRpcDungeonListInfoReply_reflection_;
  delete DungeonRpcCreateTutorialAsk::default_instance_;
  delete DungeonRpcCreateTutorialAsk_reflection_;
  delete DungeonRpcCreateTutorialReply::default_instance_;
  delete DungeonRpcCreateTutorialReply_reflection_;
  delete DungeonRpcQuitTutorialAsk::default_instance_;
  delete DungeonRpcQuitTutorialAsk_reflection_;
  delete DungeonRpcQuitTutorialReply::default_instance_;
  delete DungeonRpcQuitTutorialReply_reflection_;
  delete DungeonRpcDungeonTargetNotify::default_instance_;
  delete DungeonRpcDungeonTargetNotify_reflection_;
  delete DungeonRpcTargetContentChangeNotify::default_instance_;
  delete DungeonRpcTargetContentChangeNotify_reflection_;
  delete DungeonRpcDungeon_NotifyNotify::default_instance_;
  delete DungeonRpcDungeon_NotifyNotify_reflection_;
}

void protobuf_AddDesc_DungeonRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DungeonRpc.proto\032\022PublicStruct.proto\"L"
    "\n\032DungeonRpcCreateDungeonAsk\022\021\n\006RoleId\030\001"
    " \001(\004:\0010\022\033\n\017DungeonConfigId\030\002 \001(\005:\002-1\"m\n\034"
    "DungeonRpcCreateDungeonReply\022\025\n\006Result\030\001"
    " \001(\005:\005-9999\022\033\n\017DungeonConfigId\030\002 \001(\005:\002-1"
    "\022\031\n\rSceneConfigId\030\003 \001(\005:\002-1\"B\n\030DungeonRp"
    "cExitDungeonAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\022\023\n\007Sc"
    "eneId\030\002 \001(\005:\002-1\"c\n\032DungeonRpcExitDungeon"
    "Reply\022\025\n\006Result\030\001 \001(\005:\005-9999\022\031\n\rSceneCon"
    "figId\030\002 \001(\005:\002-1\022\023\n\007SceneId\030\003 \001(\005:\002-1\"\255\001\n"
    " DungeonRpcInformCreateDungeonAsk\022\021\n\006Rol"
    "eId\030\001 \001(\004:\0010\022\031\n\rTargetSceneId\030\002 \001(\005:\002-1\022"
    "\033\n\017DungeonConfigId\030\003 \001(\005:\002-1\022\026\n\nCurScene"
    "Id\030\004 \001(\005:\002-1\022\025\n\006Result\030\005 \001(\005:\005-9999\022\017\n\007R"
    "oleIds\030\006 \003(\004\";\n\"DungeonRpcInformCreateDu"
    "ngeonReply\022\025\n\006Result\030\001 \001(\005:\005-9999\":\n\032Dun"
    "geonRpcSettlementNotify\022\034\n\020SettlementRes"
    "ult\030\001 \001(\005:\002-1\"M\n\031DungeonRpcEnterDungeonA"
    "sk\022\023\n\007SceneId\030\001 \001(\005:\002-1\022\033\n\017DungeonConfig"
    "Id\030\002 \001(\005:\002-1\"4\n\033DungeonRpcEnterDungeonRe"
    "ply\022\025\n\006Result\030\001 \001(\005:\005-9999\"4\n\033DungeonRpc"
    "DungeonDataNotify\022\025\n\tBeginTime\030\001 \001(\005:\002-1"
    "\"\032\n\030DungeonRpcDungeonSyncAsk\"L\n\032DungeonR"
    "pcDungeonSyncReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\032"
    "\n\004Data\030\002 \001(\0132\014.DungeonData\"\036\n\034DungeonRpc"
    "DungeonListInfoAsk\"_\n\036DungeonRpcDungeonL"
    "istInfoReply\022\022\n\006Result\030\001 \001(\005:\002-1\022)\n\017Dung"
    "eonBossData\030\003 \003(\0132\020.DungeonBossInfo\"M\n\033D"
    "ungeonRpcCreateTutorialAsk\022\021\n\006RoleId\030\001 \001"
    "(\004:\0010\022\033\n\017DungeonConfigId\030\002 \001(\005:\002-1\"k\n\035Du"
    "ngeonRpcCreateTutorialReply\022\022\n\006Result\030\001 "
    "\001(\005:\002-1\022\033\n\017DungeonConfigId\030\003 \001(\005:\002-1\022\031\n\r"
    "SceneConfigId\030\004 \001(\005:\002-1\"\033\n\031DungeonRpcQui"
    "tTutorialAsk\"1\n\033DungeonRpcQuitTutorialRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\"F\n\035DungeonRpcDun"
    "geonTargetNotify\022%\n\rDungeonTarget\030\001 \003(\0132"
    "\016.DungeonTarget\"d\n#DungeonRpcTargetConte"
    "ntChangeNotify\022\021\n\005Index\030\001 \001(\005:\002-1\022\024\n\010Sub"
    "Index\030\002 \001(\005:\002-1\022\024\n\010CurCount\030\003 \001(\005:\002-1\"4\n"
    "\036DungeonRpcDungeon_NotifyNotify\022\022\n\006TextI"
    "d\030\001 \001(\005:\002-1", 1611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DungeonRpc.proto", &protobuf_RegisterTypes);
  DungeonRpcCreateDungeonAsk::default_instance_ = new DungeonRpcCreateDungeonAsk();
  DungeonRpcCreateDungeonReply::default_instance_ = new DungeonRpcCreateDungeonReply();
  DungeonRpcExitDungeonAsk::default_instance_ = new DungeonRpcExitDungeonAsk();
  DungeonRpcExitDungeonReply::default_instance_ = new DungeonRpcExitDungeonReply();
  DungeonRpcInformCreateDungeonAsk::default_instance_ = new DungeonRpcInformCreateDungeonAsk();
  DungeonRpcInformCreateDungeonReply::default_instance_ = new DungeonRpcInformCreateDungeonReply();
  DungeonRpcSettlementNotify::default_instance_ = new DungeonRpcSettlementNotify();
  DungeonRpcEnterDungeonAsk::default_instance_ = new DungeonRpcEnterDungeonAsk();
  DungeonRpcEnterDungeonReply::default_instance_ = new DungeonRpcEnterDungeonReply();
  DungeonRpcDungeonDataNotify::default_instance_ = new DungeonRpcDungeonDataNotify();
  DungeonRpcDungeonSyncAsk::default_instance_ = new DungeonRpcDungeonSyncAsk();
  DungeonRpcDungeonSyncReply::default_instance_ = new DungeonRpcDungeonSyncReply();
  DungeonRpcDungeonListInfoAsk::default_instance_ = new DungeonRpcDungeonListInfoAsk();
  DungeonRpcDungeonListInfoReply::default_instance_ = new DungeonRpcDungeonListInfoReply();
  DungeonRpcCreateTutorialAsk::default_instance_ = new DungeonRpcCreateTutorialAsk();
  DungeonRpcCreateTutorialReply::default_instance_ = new DungeonRpcCreateTutorialReply();
  DungeonRpcQuitTutorialAsk::default_instance_ = new DungeonRpcQuitTutorialAsk();
  DungeonRpcQuitTutorialReply::default_instance_ = new DungeonRpcQuitTutorialReply();
  DungeonRpcDungeonTargetNotify::default_instance_ = new DungeonRpcDungeonTargetNotify();
  DungeonRpcTargetContentChangeNotify::default_instance_ = new DungeonRpcTargetContentChangeNotify();
  DungeonRpcDungeon_NotifyNotify::default_instance_ = new DungeonRpcDungeon_NotifyNotify();
  DungeonRpcCreateDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcCreateDungeonReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcExitDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcExitDungeonReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcInformCreateDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcInformCreateDungeonReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcSettlementNotify::default_instance_->InitAsDefaultInstance();
  DungeonRpcEnterDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcEnterDungeonReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonDataNotify::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonSyncAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonSyncReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonListInfoAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonListInfoReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcCreateTutorialAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcCreateTutorialReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcQuitTutorialAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcQuitTutorialReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeonTargetNotify::default_instance_->InitAsDefaultInstance();
  DungeonRpcTargetContentChangeNotify::default_instance_->InitAsDefaultInstance();
  DungeonRpcDungeon_NotifyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DungeonRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DungeonRpc_2eproto {
  StaticDescriptorInitializer_DungeonRpc_2eproto() {
    protobuf_AddDesc_DungeonRpc_2eproto();
  }
} static_descriptor_initializer_DungeonRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateDungeonAsk::kRoleIdFieldNumber;
const int DungeonRpcCreateDungeonAsk::kDungeonConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateDungeonAsk::DungeonRpcCreateDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcCreateDungeonAsk::DungeonRpcCreateDungeonAsk(const DungeonRpcCreateDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  dungeonconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateDungeonAsk::~DungeonRpcCreateDungeonAsk() {
  SharedDtor();
}

void DungeonRpcCreateDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateDungeonAsk_descriptor_;
}

const DungeonRpcCreateDungeonAsk& DungeonRpcCreateDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateDungeonAsk* DungeonRpcCreateDungeonAsk::default_instance_ = NULL;

DungeonRpcCreateDungeonAsk* DungeonRpcCreateDungeonAsk::New() const {
  return new DungeonRpcCreateDungeonAsk;
}

void DungeonRpcCreateDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    dungeonconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeonconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeonconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateDungeonAsk::MergeFrom(const DungeonRpcCreateDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonAsk::CopyFrom(const DungeonRpcCreateDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcCreateDungeonAsk::Swap(DungeonRpcCreateDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcCreateDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateDungeonReply::kResultFieldNumber;
const int DungeonRpcCreateDungeonReply::kDungeonConfigIdFieldNumber;
const int DungeonRpcCreateDungeonReply::kSceneConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateDungeonReply::DungeonRpcCreateDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcCreateDungeonReply::DungeonRpcCreateDungeonReply(const DungeonRpcCreateDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  dungeonconfigid_ = -1;
  sceneconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateDungeonReply::~DungeonRpcCreateDungeonReply() {
  SharedDtor();
}

void DungeonRpcCreateDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateDungeonReply_descriptor_;
}

const DungeonRpcCreateDungeonReply& DungeonRpcCreateDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateDungeonReply* DungeonRpcCreateDungeonReply::default_instance_ = NULL;

DungeonRpcCreateDungeonReply* DungeonRpcCreateDungeonReply::New() const {
  return new DungeonRpcCreateDungeonReply;
}

void DungeonRpcCreateDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    dungeonconfigid_ = -1;
    sceneconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneConfigId;
        break;
      }

      // optional int32 SceneConfigId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneconfigid_)));
          set_has_sceneconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeonconfigid(), output);
  }

  // optional int32 SceneConfigId = 3 [default = -1];
  if (has_sceneconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeonconfigid(), target);
  }

  // optional int32 SceneConfigId = 3 [default = -1];
  if (has_sceneconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

    // optional int32 SceneConfigId = 3 [default = -1];
    if (has_sceneconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateDungeonReply::MergeFrom(const DungeonRpcCreateDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
    if (from.has_sceneconfigid()) {
      set_sceneconfigid(from.sceneconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonReply::CopyFrom(const DungeonRpcCreateDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcCreateDungeonReply::Swap(DungeonRpcCreateDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(sceneconfigid_, other->sceneconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcCreateDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcExitDungeonAsk::kRoleIdFieldNumber;
const int DungeonRpcExitDungeonAsk::kSceneIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcExitDungeonAsk::DungeonRpcExitDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcExitDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcExitDungeonAsk::DungeonRpcExitDungeonAsk(const DungeonRpcExitDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcExitDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcExitDungeonAsk::~DungeonRpcExitDungeonAsk() {
  SharedDtor();
}

void DungeonRpcExitDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcExitDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcExitDungeonAsk_descriptor_;
}

const DungeonRpcExitDungeonAsk& DungeonRpcExitDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcExitDungeonAsk* DungeonRpcExitDungeonAsk::default_instance_ = NULL;

DungeonRpcExitDungeonAsk* DungeonRpcExitDungeonAsk::New() const {
  return new DungeonRpcExitDungeonAsk;
}

void DungeonRpcExitDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcExitDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcExitDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcExitDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcExitDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcExitDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcExitDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcExitDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcExitDungeonAsk::MergeFrom(const DungeonRpcExitDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcExitDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcExitDungeonAsk::CopyFrom(const DungeonRpcExitDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcExitDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcExitDungeonAsk::Swap(DungeonRpcExitDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcExitDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcExitDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcExitDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcExitDungeonReply::kResultFieldNumber;
const int DungeonRpcExitDungeonReply::kSceneConfigIdFieldNumber;
const int DungeonRpcExitDungeonReply::kSceneIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcExitDungeonReply::DungeonRpcExitDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcExitDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcExitDungeonReply::DungeonRpcExitDungeonReply(const DungeonRpcExitDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcExitDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  sceneconfigid_ = -1;
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcExitDungeonReply::~DungeonRpcExitDungeonReply() {
  SharedDtor();
}

void DungeonRpcExitDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcExitDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcExitDungeonReply_descriptor_;
}

const DungeonRpcExitDungeonReply& DungeonRpcExitDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcExitDungeonReply* DungeonRpcExitDungeonReply::default_instance_ = NULL;

DungeonRpcExitDungeonReply* DungeonRpcExitDungeonReply::New() const {
  return new DungeonRpcExitDungeonReply;
}

void DungeonRpcExitDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    sceneconfigid_ = -1;
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcExitDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneConfigId;
        break;
      }

      // optional int32 SceneConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneconfigid_)));
          set_has_sceneconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcExitDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 SceneConfigId = 2 [default = -1];
  if (has_sceneconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneconfigid(), output);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcExitDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 SceneConfigId = 2 [default = -1];
  if (has_sceneconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneconfigid(), target);
  }

  // optional int32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcExitDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 SceneConfigId = 2 [default = -1];
    if (has_sceneconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneconfigid());
    }

    // optional int32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcExitDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcExitDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcExitDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcExitDungeonReply::MergeFrom(const DungeonRpcExitDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sceneconfigid()) {
      set_sceneconfigid(from.sceneconfigid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcExitDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcExitDungeonReply::CopyFrom(const DungeonRpcExitDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcExitDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcExitDungeonReply::Swap(DungeonRpcExitDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(sceneconfigid_, other->sceneconfigid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcExitDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcExitDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcExitDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcInformCreateDungeonAsk::kRoleIdFieldNumber;
const int DungeonRpcInformCreateDungeonAsk::kTargetSceneIdFieldNumber;
const int DungeonRpcInformCreateDungeonAsk::kDungeonConfigIdFieldNumber;
const int DungeonRpcInformCreateDungeonAsk::kCurSceneIdFieldNumber;
const int DungeonRpcInformCreateDungeonAsk::kResultFieldNumber;
const int DungeonRpcInformCreateDungeonAsk::kRoleIdsFieldNumber;
#endif  // !_MSC_VER

DungeonRpcInformCreateDungeonAsk::DungeonRpcInformCreateDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcInformCreateDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcInformCreateDungeonAsk::DungeonRpcInformCreateDungeonAsk(const DungeonRpcInformCreateDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcInformCreateDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  targetsceneid_ = -1;
  dungeonconfigid_ = -1;
  cursceneid_ = -1;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcInformCreateDungeonAsk::~DungeonRpcInformCreateDungeonAsk() {
  SharedDtor();
}

void DungeonRpcInformCreateDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcInformCreateDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcInformCreateDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcInformCreateDungeonAsk_descriptor_;
}

const DungeonRpcInformCreateDungeonAsk& DungeonRpcInformCreateDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcInformCreateDungeonAsk* DungeonRpcInformCreateDungeonAsk::default_instance_ = NULL;

DungeonRpcInformCreateDungeonAsk* DungeonRpcInformCreateDungeonAsk::New() const {
  return new DungeonRpcInformCreateDungeonAsk;
}

void DungeonRpcInformCreateDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    targetsceneid_ = -1;
    dungeonconfigid_ = -1;
    cursceneid_ = -1;
    result_ = -9999;
  }
  roleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcInformCreateDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TargetSceneId;
        break;
      }

      // optional int32 TargetSceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurSceneId;
        break;
      }

      // optional int32 CurSceneId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Result;
        break;
      }

      // optional int32 Result = 5 [default = -9999];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleIds;
        break;
      }

      // repeated uint64 RoleIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_roleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RoleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcInformCreateDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 TargetSceneId = 2 [default = -1];
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetsceneid(), output);
  }

  // optional int32 DungeonConfigId = 3 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dungeonconfigid(), output);
  }

  // optional int32 CurSceneId = 4 [default = -1];
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cursceneid(), output);
  }

  // optional int32 Result = 5 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // repeated uint64 RoleIds = 6;
  for (int i = 0; i < this->roleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->roleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcInformCreateDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 TargetSceneId = 2 [default = -1];
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetsceneid(), target);
  }

  // optional int32 DungeonConfigId = 3 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dungeonconfigid(), target);
  }

  // optional int32 CurSceneId = 4 [default = -1];
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cursceneid(), target);
  }

  // optional int32 Result = 5 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // repeated uint64 RoleIds = 6;
  for (int i = 0; i < this->roleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->roleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcInformCreateDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 TargetSceneId = 2 [default = -1];
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetsceneid());
    }

    // optional int32 DungeonConfigId = 3 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

    // optional int32 CurSceneId = 4 [default = -1];
    if (has_cursceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursceneid());
    }

    // optional int32 Result = 5 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated uint64 RoleIds = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleids(i));
    }
    total_size += 1 * this->roleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcInformCreateDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcInformCreateDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcInformCreateDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcInformCreateDungeonAsk::MergeFrom(const DungeonRpcInformCreateDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleids_.MergeFrom(from.roleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcInformCreateDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcInformCreateDungeonAsk::CopyFrom(const DungeonRpcInformCreateDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcInformCreateDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcInformCreateDungeonAsk::Swap(DungeonRpcInformCreateDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(result_, other->result_);
    roleids_.Swap(&other->roleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcInformCreateDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcInformCreateDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcInformCreateDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcInformCreateDungeonReply::kResultFieldNumber;
#endif  // !_MSC_VER

DungeonRpcInformCreateDungeonReply::DungeonRpcInformCreateDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcInformCreateDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcInformCreateDungeonReply::DungeonRpcInformCreateDungeonReply(const DungeonRpcInformCreateDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcInformCreateDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcInformCreateDungeonReply::~DungeonRpcInformCreateDungeonReply() {
  SharedDtor();
}

void DungeonRpcInformCreateDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcInformCreateDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcInformCreateDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcInformCreateDungeonReply_descriptor_;
}

const DungeonRpcInformCreateDungeonReply& DungeonRpcInformCreateDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcInformCreateDungeonReply* DungeonRpcInformCreateDungeonReply::default_instance_ = NULL;

DungeonRpcInformCreateDungeonReply* DungeonRpcInformCreateDungeonReply::New() const {
  return new DungeonRpcInformCreateDungeonReply;
}

void DungeonRpcInformCreateDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcInformCreateDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcInformCreateDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcInformCreateDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcInformCreateDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcInformCreateDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcInformCreateDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcInformCreateDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcInformCreateDungeonReply::MergeFrom(const DungeonRpcInformCreateDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcInformCreateDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcInformCreateDungeonReply::CopyFrom(const DungeonRpcInformCreateDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcInformCreateDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcInformCreateDungeonReply::Swap(DungeonRpcInformCreateDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcInformCreateDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcInformCreateDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcInformCreateDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcSettlementNotify::kSettlementResultFieldNumber;
#endif  // !_MSC_VER

DungeonRpcSettlementNotify::DungeonRpcSettlementNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcSettlementNotify::InitAsDefaultInstance() {
}

DungeonRpcSettlementNotify::DungeonRpcSettlementNotify(const DungeonRpcSettlementNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcSettlementNotify::SharedCtor() {
  _cached_size_ = 0;
  settlementresult_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcSettlementNotify::~DungeonRpcSettlementNotify() {
  SharedDtor();
}

void DungeonRpcSettlementNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcSettlementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcSettlementNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcSettlementNotify_descriptor_;
}

const DungeonRpcSettlementNotify& DungeonRpcSettlementNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcSettlementNotify* DungeonRpcSettlementNotify::default_instance_ = NULL;

DungeonRpcSettlementNotify* DungeonRpcSettlementNotify::New() const {
  return new DungeonRpcSettlementNotify;
}

void DungeonRpcSettlementNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    settlementresult_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcSettlementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SettlementResult = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementresult_)));
          set_has_settlementresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcSettlementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SettlementResult = 1 [default = -1];
  if (has_settlementresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->settlementresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcSettlementNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SettlementResult = 1 [default = -1];
  if (has_settlementresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->settlementresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcSettlementNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SettlementResult = 1 [default = -1];
    if (has_settlementresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcSettlementNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcSettlementNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcSettlementNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcSettlementNotify::MergeFrom(const DungeonRpcSettlementNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settlementresult()) {
      set_settlementresult(from.settlementresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcSettlementNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcSettlementNotify::CopyFrom(const DungeonRpcSettlementNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcSettlementNotify::IsInitialized() const {

  return true;
}

void DungeonRpcSettlementNotify::Swap(DungeonRpcSettlementNotify* other) {
  if (other != this) {
    std::swap(settlementresult_, other->settlementresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcSettlementNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcSettlementNotify_descriptor_;
  metadata.reflection = DungeonRpcSettlementNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcEnterDungeonAsk::kSceneIdFieldNumber;
const int DungeonRpcEnterDungeonAsk::kDungeonConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcEnterDungeonAsk::DungeonRpcEnterDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcEnterDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcEnterDungeonAsk::DungeonRpcEnterDungeonAsk(const DungeonRpcEnterDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcEnterDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = -1;
  dungeonconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcEnterDungeonAsk::~DungeonRpcEnterDungeonAsk() {
  SharedDtor();
}

void DungeonRpcEnterDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcEnterDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcEnterDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcEnterDungeonAsk_descriptor_;
}

const DungeonRpcEnterDungeonAsk& DungeonRpcEnterDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcEnterDungeonAsk* DungeonRpcEnterDungeonAsk::default_instance_ = NULL;

DungeonRpcEnterDungeonAsk* DungeonRpcEnterDungeonAsk::New() const {
  return new DungeonRpcEnterDungeonAsk;
}

void DungeonRpcEnterDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = -1;
    dungeonconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcEnterDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SceneId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcEnterDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeonconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcEnterDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeonconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcEnterDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SceneId = 1 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcEnterDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcEnterDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcEnterDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcEnterDungeonAsk::MergeFrom(const DungeonRpcEnterDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcEnterDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcEnterDungeonAsk::CopyFrom(const DungeonRpcEnterDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcEnterDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcEnterDungeonAsk::Swap(DungeonRpcEnterDungeonAsk* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcEnterDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcEnterDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcEnterDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcEnterDungeonReply::kResultFieldNumber;
#endif  // !_MSC_VER

DungeonRpcEnterDungeonReply::DungeonRpcEnterDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcEnterDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcEnterDungeonReply::DungeonRpcEnterDungeonReply(const DungeonRpcEnterDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcEnterDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcEnterDungeonReply::~DungeonRpcEnterDungeonReply() {
  SharedDtor();
}

void DungeonRpcEnterDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcEnterDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcEnterDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcEnterDungeonReply_descriptor_;
}

const DungeonRpcEnterDungeonReply& DungeonRpcEnterDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcEnterDungeonReply* DungeonRpcEnterDungeonReply::default_instance_ = NULL;

DungeonRpcEnterDungeonReply* DungeonRpcEnterDungeonReply::New() const {
  return new DungeonRpcEnterDungeonReply;
}

void DungeonRpcEnterDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcEnterDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcEnterDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcEnterDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcEnterDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcEnterDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcEnterDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcEnterDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcEnterDungeonReply::MergeFrom(const DungeonRpcEnterDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcEnterDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcEnterDungeonReply::CopyFrom(const DungeonRpcEnterDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcEnterDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcEnterDungeonReply::Swap(DungeonRpcEnterDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcEnterDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcEnterDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcEnterDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcDungeonDataNotify::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

DungeonRpcDungeonDataNotify::DungeonRpcDungeonDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonDataNotify::InitAsDefaultInstance() {
}

DungeonRpcDungeonDataNotify::DungeonRpcDungeonDataNotify(const DungeonRpcDungeonDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonDataNotify::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonDataNotify::~DungeonRpcDungeonDataNotify() {
  SharedDtor();
}

void DungeonRpcDungeonDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeonDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonDataNotify_descriptor_;
}

const DungeonRpcDungeonDataNotify& DungeonRpcDungeonDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonDataNotify* DungeonRpcDungeonDataNotify::default_instance_ = NULL;

DungeonRpcDungeonDataNotify* DungeonRpcDungeonDataNotify::New() const {
  return new DungeonRpcDungeonDataNotify;
}

void DungeonRpcDungeonDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BeginTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BeginTime = 1 [default = -1];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BeginTime = 1 [default = -1];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BeginTime = 1 [default = -1];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonDataNotify::MergeFrom(const DungeonRpcDungeonDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonDataNotify::CopyFrom(const DungeonRpcDungeonDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonDataNotify::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonDataNotify::Swap(DungeonRpcDungeonDataNotify* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonDataNotify_descriptor_;
  metadata.reflection = DungeonRpcDungeonDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DungeonRpcDungeonSyncAsk::DungeonRpcDungeonSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonSyncAsk::InitAsDefaultInstance() {
}

DungeonRpcDungeonSyncAsk::DungeonRpcDungeonSyncAsk(const DungeonRpcDungeonSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonSyncAsk::~DungeonRpcDungeonSyncAsk() {
  SharedDtor();
}

void DungeonRpcDungeonSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeonSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonSyncAsk_descriptor_;
}

const DungeonRpcDungeonSyncAsk& DungeonRpcDungeonSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonSyncAsk* DungeonRpcDungeonSyncAsk::default_instance_ = NULL;

DungeonRpcDungeonSyncAsk* DungeonRpcDungeonSyncAsk::New() const {
  return new DungeonRpcDungeonSyncAsk;
}

void DungeonRpcDungeonSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonSyncAsk::MergeFrom(const DungeonRpcDungeonSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonSyncAsk::CopyFrom(const DungeonRpcDungeonSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonSyncAsk::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonSyncAsk::Swap(DungeonRpcDungeonSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonSyncAsk_descriptor_;
  metadata.reflection = DungeonRpcDungeonSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcDungeonSyncReply::kResultFieldNumber;
const int DungeonRpcDungeonSyncReply::kDataFieldNumber;
#endif  // !_MSC_VER

DungeonRpcDungeonSyncReply::DungeonRpcDungeonSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonSyncReply::InitAsDefaultInstance() {
  data_ = const_cast< ::DungeonData*>(&::DungeonData::default_instance());
}

DungeonRpcDungeonSyncReply::DungeonRpcDungeonSyncReply(const DungeonRpcDungeonSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonSyncReply::~DungeonRpcDungeonSyncReply() {
  SharedDtor();
}

void DungeonRpcDungeonSyncReply::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DungeonRpcDungeonSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonSyncReply_descriptor_;
}

const DungeonRpcDungeonSyncReply& DungeonRpcDungeonSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonSyncReply* DungeonRpcDungeonSyncReply::default_instance_ = NULL;

DungeonRpcDungeonSyncReply* DungeonRpcDungeonSyncReply::New() const {
  return new DungeonRpcDungeonSyncReply;
}

void DungeonRpcDungeonSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_data()) {
      if (data_ != NULL) data_->::DungeonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // optional .DungeonData Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .DungeonData Data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .DungeonData Data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .DungeonData Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonSyncReply::MergeFrom(const DungeonRpcDungeonSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::DungeonData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonSyncReply::CopyFrom(const DungeonRpcDungeonSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonSyncReply::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonSyncReply::Swap(DungeonRpcDungeonSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonSyncReply_descriptor_;
  metadata.reflection = DungeonRpcDungeonSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DungeonRpcDungeonListInfoAsk::DungeonRpcDungeonListInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonListInfoAsk::InitAsDefaultInstance() {
}

DungeonRpcDungeonListInfoAsk::DungeonRpcDungeonListInfoAsk(const DungeonRpcDungeonListInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonListInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonListInfoAsk::~DungeonRpcDungeonListInfoAsk() {
  SharedDtor();
}

void DungeonRpcDungeonListInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeonListInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonListInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonListInfoAsk_descriptor_;
}

const DungeonRpcDungeonListInfoAsk& DungeonRpcDungeonListInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonListInfoAsk* DungeonRpcDungeonListInfoAsk::default_instance_ = NULL;

DungeonRpcDungeonListInfoAsk* DungeonRpcDungeonListInfoAsk::New() const {
  return new DungeonRpcDungeonListInfoAsk;
}

void DungeonRpcDungeonListInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonListInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonListInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonListInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonListInfoAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonListInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonListInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonListInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonListInfoAsk::MergeFrom(const DungeonRpcDungeonListInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonListInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonListInfoAsk::CopyFrom(const DungeonRpcDungeonListInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonListInfoAsk::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonListInfoAsk::Swap(DungeonRpcDungeonListInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonListInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonListInfoAsk_descriptor_;
  metadata.reflection = DungeonRpcDungeonListInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcDungeonListInfoReply::kResultFieldNumber;
const int DungeonRpcDungeonListInfoReply::kDungeonBossDataFieldNumber;
#endif  // !_MSC_VER

DungeonRpcDungeonListInfoReply::DungeonRpcDungeonListInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonListInfoReply::InitAsDefaultInstance() {
}

DungeonRpcDungeonListInfoReply::DungeonRpcDungeonListInfoReply(const DungeonRpcDungeonListInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonListInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonListInfoReply::~DungeonRpcDungeonListInfoReply() {
  SharedDtor();
}

void DungeonRpcDungeonListInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeonListInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonListInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonListInfoReply_descriptor_;
}

const DungeonRpcDungeonListInfoReply& DungeonRpcDungeonListInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonListInfoReply* DungeonRpcDungeonListInfoReply::default_instance_ = NULL;

DungeonRpcDungeonListInfoReply* DungeonRpcDungeonListInfoReply::New() const {
  return new DungeonRpcDungeonListInfoReply;
}

void DungeonRpcDungeonListInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  dungeonbossdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonListInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DungeonBossData;
        break;
      }

      // repeated .DungeonBossInfo DungeonBossData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DungeonBossData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeonbossdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DungeonBossData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonListInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .DungeonBossInfo DungeonBossData = 3;
  for (int i = 0; i < this->dungeonbossdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dungeonbossdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonListInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .DungeonBossInfo DungeonBossData = 3;
  for (int i = 0; i < this->dungeonbossdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dungeonbossdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonListInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .DungeonBossInfo DungeonBossData = 3;
  total_size += 1 * this->dungeonbossdata_size();
  for (int i = 0; i < this->dungeonbossdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dungeonbossdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonListInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonListInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonListInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonListInfoReply::MergeFrom(const DungeonRpcDungeonListInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  dungeonbossdata_.MergeFrom(from.dungeonbossdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonListInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonListInfoReply::CopyFrom(const DungeonRpcDungeonListInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonListInfoReply::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonListInfoReply::Swap(DungeonRpcDungeonListInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    dungeonbossdata_.Swap(&other->dungeonbossdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonListInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonListInfoReply_descriptor_;
  metadata.reflection = DungeonRpcDungeonListInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateTutorialAsk::kRoleIdFieldNumber;
const int DungeonRpcCreateTutorialAsk::kDungeonConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateTutorialAsk::DungeonRpcCreateTutorialAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateTutorialAsk::InitAsDefaultInstance() {
}

DungeonRpcCreateTutorialAsk::DungeonRpcCreateTutorialAsk(const DungeonRpcCreateTutorialAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateTutorialAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  dungeonconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateTutorialAsk::~DungeonRpcCreateTutorialAsk() {
  SharedDtor();
}

void DungeonRpcCreateTutorialAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateTutorialAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateTutorialAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateTutorialAsk_descriptor_;
}

const DungeonRpcCreateTutorialAsk& DungeonRpcCreateTutorialAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateTutorialAsk* DungeonRpcCreateTutorialAsk::default_instance_ = NULL;

DungeonRpcCreateTutorialAsk* DungeonRpcCreateTutorialAsk::New() const {
  return new DungeonRpcCreateTutorialAsk;
}

void DungeonRpcCreateTutorialAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    dungeonconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateTutorialAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateTutorialAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeonconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateTutorialAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeonconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateTutorialAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateTutorialAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateTutorialAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateTutorialAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateTutorialAsk::MergeFrom(const DungeonRpcCreateTutorialAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateTutorialAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateTutorialAsk::CopyFrom(const DungeonRpcCreateTutorialAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateTutorialAsk::IsInitialized() const {

  return true;
}

void DungeonRpcCreateTutorialAsk::Swap(DungeonRpcCreateTutorialAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateTutorialAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateTutorialAsk_descriptor_;
  metadata.reflection = DungeonRpcCreateTutorialAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateTutorialReply::kResultFieldNumber;
const int DungeonRpcCreateTutorialReply::kDungeonConfigIdFieldNumber;
const int DungeonRpcCreateTutorialReply::kSceneConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateTutorialReply::DungeonRpcCreateTutorialReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateTutorialReply::InitAsDefaultInstance() {
}

DungeonRpcCreateTutorialReply::DungeonRpcCreateTutorialReply(const DungeonRpcCreateTutorialReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateTutorialReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  dungeonconfigid_ = -1;
  sceneconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateTutorialReply::~DungeonRpcCreateTutorialReply() {
  SharedDtor();
}

void DungeonRpcCreateTutorialReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateTutorialReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateTutorialReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateTutorialReply_descriptor_;
}

const DungeonRpcCreateTutorialReply& DungeonRpcCreateTutorialReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateTutorialReply* DungeonRpcCreateTutorialReply::default_instance_ = NULL;

DungeonRpcCreateTutorialReply* DungeonRpcCreateTutorialReply::New() const {
  return new DungeonRpcCreateTutorialReply;
}

void DungeonRpcCreateTutorialReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    dungeonconfigid_ = -1;
    sceneconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateTutorialReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SceneConfigId;
        break;
      }

      // optional int32 SceneConfigId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneconfigid_)));
          set_has_sceneconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateTutorialReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 DungeonConfigId = 3 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dungeonconfigid(), output);
  }

  // optional int32 SceneConfigId = 4 [default = -1];
  if (has_sceneconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateTutorialReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 DungeonConfigId = 3 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dungeonconfigid(), target);
  }

  // optional int32 SceneConfigId = 4 [default = -1];
  if (has_sceneconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateTutorialReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 DungeonConfigId = 3 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

    // optional int32 SceneConfigId = 4 [default = -1];
    if (has_sceneconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateTutorialReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateTutorialReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateTutorialReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateTutorialReply::MergeFrom(const DungeonRpcCreateTutorialReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
    if (from.has_sceneconfigid()) {
      set_sceneconfigid(from.sceneconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateTutorialReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateTutorialReply::CopyFrom(const DungeonRpcCreateTutorialReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateTutorialReply::IsInitialized() const {

  return true;
}

void DungeonRpcCreateTutorialReply::Swap(DungeonRpcCreateTutorialReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(sceneconfigid_, other->sceneconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateTutorialReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateTutorialReply_descriptor_;
  metadata.reflection = DungeonRpcCreateTutorialReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DungeonRpcQuitTutorialAsk::DungeonRpcQuitTutorialAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcQuitTutorialAsk::InitAsDefaultInstance() {
}

DungeonRpcQuitTutorialAsk::DungeonRpcQuitTutorialAsk(const DungeonRpcQuitTutorialAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcQuitTutorialAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcQuitTutorialAsk::~DungeonRpcQuitTutorialAsk() {
  SharedDtor();
}

void DungeonRpcQuitTutorialAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcQuitTutorialAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcQuitTutorialAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcQuitTutorialAsk_descriptor_;
}

const DungeonRpcQuitTutorialAsk& DungeonRpcQuitTutorialAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcQuitTutorialAsk* DungeonRpcQuitTutorialAsk::default_instance_ = NULL;

DungeonRpcQuitTutorialAsk* DungeonRpcQuitTutorialAsk::New() const {
  return new DungeonRpcQuitTutorialAsk;
}

void DungeonRpcQuitTutorialAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcQuitTutorialAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DungeonRpcQuitTutorialAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcQuitTutorialAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcQuitTutorialAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcQuitTutorialAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcQuitTutorialAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcQuitTutorialAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcQuitTutorialAsk::MergeFrom(const DungeonRpcQuitTutorialAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcQuitTutorialAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcQuitTutorialAsk::CopyFrom(const DungeonRpcQuitTutorialAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcQuitTutorialAsk::IsInitialized() const {

  return true;
}

void DungeonRpcQuitTutorialAsk::Swap(DungeonRpcQuitTutorialAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcQuitTutorialAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcQuitTutorialAsk_descriptor_;
  metadata.reflection = DungeonRpcQuitTutorialAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcQuitTutorialReply::kResultFieldNumber;
#endif  // !_MSC_VER

DungeonRpcQuitTutorialReply::DungeonRpcQuitTutorialReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcQuitTutorialReply::InitAsDefaultInstance() {
}

DungeonRpcQuitTutorialReply::DungeonRpcQuitTutorialReply(const DungeonRpcQuitTutorialReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcQuitTutorialReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcQuitTutorialReply::~DungeonRpcQuitTutorialReply() {
  SharedDtor();
}

void DungeonRpcQuitTutorialReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcQuitTutorialReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcQuitTutorialReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcQuitTutorialReply_descriptor_;
}

const DungeonRpcQuitTutorialReply& DungeonRpcQuitTutorialReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcQuitTutorialReply* DungeonRpcQuitTutorialReply::default_instance_ = NULL;

DungeonRpcQuitTutorialReply* DungeonRpcQuitTutorialReply::New() const {
  return new DungeonRpcQuitTutorialReply;
}

void DungeonRpcQuitTutorialReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcQuitTutorialReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcQuitTutorialReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcQuitTutorialReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcQuitTutorialReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcQuitTutorialReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcQuitTutorialReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcQuitTutorialReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcQuitTutorialReply::MergeFrom(const DungeonRpcQuitTutorialReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcQuitTutorialReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcQuitTutorialReply::CopyFrom(const DungeonRpcQuitTutorialReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcQuitTutorialReply::IsInitialized() const {

  return true;
}

void DungeonRpcQuitTutorialReply::Swap(DungeonRpcQuitTutorialReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcQuitTutorialReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcQuitTutorialReply_descriptor_;
  metadata.reflection = DungeonRpcQuitTutorialReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcDungeonTargetNotify::kDungeonTargetFieldNumber;
#endif  // !_MSC_VER

DungeonRpcDungeonTargetNotify::DungeonRpcDungeonTargetNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeonTargetNotify::InitAsDefaultInstance() {
}

DungeonRpcDungeonTargetNotify::DungeonRpcDungeonTargetNotify(const DungeonRpcDungeonTargetNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeonTargetNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeonTargetNotify::~DungeonRpcDungeonTargetNotify() {
  SharedDtor();
}

void DungeonRpcDungeonTargetNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeonTargetNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeonTargetNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeonTargetNotify_descriptor_;
}

const DungeonRpcDungeonTargetNotify& DungeonRpcDungeonTargetNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeonTargetNotify* DungeonRpcDungeonTargetNotify::default_instance_ = NULL;

DungeonRpcDungeonTargetNotify* DungeonRpcDungeonTargetNotify::New() const {
  return new DungeonRpcDungeonTargetNotify;
}

void DungeonRpcDungeonTargetNotify::Clear() {
  dungeontarget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeonTargetNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DungeonTarget DungeonTarget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DungeonTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeontarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DungeonTarget;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcDungeonTargetNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DungeonTarget DungeonTarget = 1;
  for (int i = 0; i < this->dungeontarget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dungeontarget(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeonTargetNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DungeonTarget DungeonTarget = 1;
  for (int i = 0; i < this->dungeontarget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dungeontarget(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeonTargetNotify::ByteSize() const {
  int total_size = 0;

  // repeated .DungeonTarget DungeonTarget = 1;
  total_size += 1 * this->dungeontarget_size();
  for (int i = 0; i < this->dungeontarget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dungeontarget(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeonTargetNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeonTargetNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeonTargetNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeonTargetNotify::MergeFrom(const DungeonRpcDungeonTargetNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  dungeontarget_.MergeFrom(from.dungeontarget_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeonTargetNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeonTargetNotify::CopyFrom(const DungeonRpcDungeonTargetNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeonTargetNotify::IsInitialized() const {

  return true;
}

void DungeonRpcDungeonTargetNotify::Swap(DungeonRpcDungeonTargetNotify* other) {
  if (other != this) {
    dungeontarget_.Swap(&other->dungeontarget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeonTargetNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeonTargetNotify_descriptor_;
  metadata.reflection = DungeonRpcDungeonTargetNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcTargetContentChangeNotify::kIndexFieldNumber;
const int DungeonRpcTargetContentChangeNotify::kSubIndexFieldNumber;
const int DungeonRpcTargetContentChangeNotify::kCurCountFieldNumber;
#endif  // !_MSC_VER

DungeonRpcTargetContentChangeNotify::DungeonRpcTargetContentChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcTargetContentChangeNotify::InitAsDefaultInstance() {
}

DungeonRpcTargetContentChangeNotify::DungeonRpcTargetContentChangeNotify(const DungeonRpcTargetContentChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcTargetContentChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  index_ = -1;
  subindex_ = -1;
  curcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcTargetContentChangeNotify::~DungeonRpcTargetContentChangeNotify() {
  SharedDtor();
}

void DungeonRpcTargetContentChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcTargetContentChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcTargetContentChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcTargetContentChangeNotify_descriptor_;
}

const DungeonRpcTargetContentChangeNotify& DungeonRpcTargetContentChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcTargetContentChangeNotify* DungeonRpcTargetContentChangeNotify::default_instance_ = NULL;

DungeonRpcTargetContentChangeNotify* DungeonRpcTargetContentChangeNotify::New() const {
  return new DungeonRpcTargetContentChangeNotify;
}

void DungeonRpcTargetContentChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = -1;
    subindex_ = -1;
    curcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcTargetContentChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SubIndex;
        break;
      }

      // optional int32 SubIndex = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subindex_)));
          set_has_subindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurCount;
        break;
      }

      // optional int32 CurCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcount_)));
          set_has_curcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcTargetContentChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 SubIndex = 2 [default = -1];
  if (has_subindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subindex(), output);
  }

  // optional int32 CurCount = 3 [default = -1];
  if (has_curcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcTargetContentChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 SubIndex = 2 [default = -1];
  if (has_subindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subindex(), target);
  }

  // optional int32 CurCount = 3 [default = -1];
  if (has_curcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcTargetContentChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 SubIndex = 2 [default = -1];
    if (has_subindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subindex());
    }

    // optional int32 CurCount = 3 [default = -1];
    if (has_curcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcTargetContentChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcTargetContentChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcTargetContentChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcTargetContentChangeNotify::MergeFrom(const DungeonRpcTargetContentChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_subindex()) {
      set_subindex(from.subindex());
    }
    if (from.has_curcount()) {
      set_curcount(from.curcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcTargetContentChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcTargetContentChangeNotify::CopyFrom(const DungeonRpcTargetContentChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcTargetContentChangeNotify::IsInitialized() const {

  return true;
}

void DungeonRpcTargetContentChangeNotify::Swap(DungeonRpcTargetContentChangeNotify* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(subindex_, other->subindex_);
    std::swap(curcount_, other->curcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcTargetContentChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcTargetContentChangeNotify_descriptor_;
  metadata.reflection = DungeonRpcTargetContentChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcDungeon_NotifyNotify::kTextIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcDungeon_NotifyNotify::DungeonRpcDungeon_NotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcDungeon_NotifyNotify::InitAsDefaultInstance() {
}

DungeonRpcDungeon_NotifyNotify::DungeonRpcDungeon_NotifyNotify(const DungeonRpcDungeon_NotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcDungeon_NotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  textid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcDungeon_NotifyNotify::~DungeonRpcDungeon_NotifyNotify() {
  SharedDtor();
}

void DungeonRpcDungeon_NotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcDungeon_NotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcDungeon_NotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcDungeon_NotifyNotify_descriptor_;
}

const DungeonRpcDungeon_NotifyNotify& DungeonRpcDungeon_NotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcDungeon_NotifyNotify* DungeonRpcDungeon_NotifyNotify::default_instance_ = NULL;

DungeonRpcDungeon_NotifyNotify* DungeonRpcDungeon_NotifyNotify::New() const {
  return new DungeonRpcDungeon_NotifyNotify;
}

void DungeonRpcDungeon_NotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    textid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcDungeon_NotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TextId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcDungeon_NotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TextId = 1 [default = -1];
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->textid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcDungeon_NotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TextId = 1 [default = -1];
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->textid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcDungeon_NotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TextId = 1 [default = -1];
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcDungeon_NotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcDungeon_NotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcDungeon_NotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcDungeon_NotifyNotify::MergeFrom(const DungeonRpcDungeon_NotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_textid()) {
      set_textid(from.textid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcDungeon_NotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcDungeon_NotifyNotify::CopyFrom(const DungeonRpcDungeon_NotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcDungeon_NotifyNotify::IsInitialized() const {

  return true;
}

void DungeonRpcDungeon_NotifyNotify::Swap(DungeonRpcDungeon_NotifyNotify* other) {
  if (other != this) {
    std::swap(textid_, other->textid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcDungeon_NotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcDungeon_NotifyNotify_descriptor_;
  metadata.reflection = DungeonRpcDungeon_NotifyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
