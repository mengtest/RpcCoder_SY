// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BulletScreenRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BulletScreenRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BulletScreenRpcBulletScreenOptAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcBulletScreenOptAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletScreenRpcBulletScreenOptReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcBulletScreenOptReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletScreenRpcCGBulletScreenAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcCGBulletScreenAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletScreenRpcCGBulletScreenReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcCGBulletScreenReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletScreenRpcSendBulletScreenCGAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcSendBulletScreenCGAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletScreenRpcSendBulletScreenCGReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletScreenRpcSendBulletScreenCGReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BulletScreenRpc_2eproto() {
  protobuf_AddDesc_BulletScreenRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BulletScreenRpc.proto");
  GOOGLE_CHECK(file != NULL);
  BulletScreenRpcBulletScreenOptAsk_descriptor_ = file->message_type(0);
  static const int BulletScreenRpcBulletScreenOptAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptAsk, bulletscreentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptAsk, opttype_),
  };
  BulletScreenRpcBulletScreenOptAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcBulletScreenOptAsk_descriptor_,
      BulletScreenRpcBulletScreenOptAsk::default_instance_,
      BulletScreenRpcBulletScreenOptAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcBulletScreenOptAsk));
  BulletScreenRpcBulletScreenOptReply_descriptor_ = file->message_type(1);
  static const int BulletScreenRpcBulletScreenOptReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptReply, bulletscreentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptReply, opttype_),
  };
  BulletScreenRpcBulletScreenOptReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcBulletScreenOptReply_descriptor_,
      BulletScreenRpcBulletScreenOptReply::default_instance_,
      BulletScreenRpcBulletScreenOptReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcBulletScreenOptReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcBulletScreenOptReply));
  BulletScreenRpcCGBulletScreenAsk_descriptor_ = file->message_type(2);
  static const int BulletScreenRpcCGBulletScreenAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenAsk, cgid_),
  };
  BulletScreenRpcCGBulletScreenAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcCGBulletScreenAsk_descriptor_,
      BulletScreenRpcCGBulletScreenAsk::default_instance_,
      BulletScreenRpcCGBulletScreenAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcCGBulletScreenAsk));
  BulletScreenRpcCGBulletScreenReply_descriptor_ = file->message_type(3);
  static const int BulletScreenRpcCGBulletScreenReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenReply, bulletscreencontent_),
  };
  BulletScreenRpcCGBulletScreenReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcCGBulletScreenReply_descriptor_,
      BulletScreenRpcCGBulletScreenReply::default_instance_,
      BulletScreenRpcCGBulletScreenReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcCGBulletScreenReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcCGBulletScreenReply));
  BulletScreenRpcSendBulletScreenCGAsk_descriptor_ = file->message_type(4);
  static const int BulletScreenRpcSendBulletScreenCGAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGAsk, cgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGAsk, content_),
  };
  BulletScreenRpcSendBulletScreenCGAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcSendBulletScreenCGAsk_descriptor_,
      BulletScreenRpcSendBulletScreenCGAsk::default_instance_,
      BulletScreenRpcSendBulletScreenCGAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcSendBulletScreenCGAsk));
  BulletScreenRpcSendBulletScreenCGReply_descriptor_ = file->message_type(5);
  static const int BulletScreenRpcSendBulletScreenCGReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGReply, result_),
  };
  BulletScreenRpcSendBulletScreenCGReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulletScreenRpcSendBulletScreenCGReply_descriptor_,
      BulletScreenRpcSendBulletScreenCGReply::default_instance_,
      BulletScreenRpcSendBulletScreenCGReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletScreenRpcSendBulletScreenCGReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulletScreenRpcSendBulletScreenCGReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BulletScreenRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcBulletScreenOptAsk_descriptor_, &BulletScreenRpcBulletScreenOptAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcBulletScreenOptReply_descriptor_, &BulletScreenRpcBulletScreenOptReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcCGBulletScreenAsk_descriptor_, &BulletScreenRpcCGBulletScreenAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcCGBulletScreenReply_descriptor_, &BulletScreenRpcCGBulletScreenReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcSendBulletScreenCGAsk_descriptor_, &BulletScreenRpcSendBulletScreenCGAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulletScreenRpcSendBulletScreenCGReply_descriptor_, &BulletScreenRpcSendBulletScreenCGReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BulletScreenRpc_2eproto() {
  delete BulletScreenRpcBulletScreenOptAsk::default_instance_;
  delete BulletScreenRpcBulletScreenOptAsk_reflection_;
  delete BulletScreenRpcBulletScreenOptReply::default_instance_;
  delete BulletScreenRpcBulletScreenOptReply_reflection_;
  delete BulletScreenRpcCGBulletScreenAsk::default_instance_;
  delete BulletScreenRpcCGBulletScreenAsk_reflection_;
  delete BulletScreenRpcCGBulletScreenReply::default_instance_;
  delete BulletScreenRpcCGBulletScreenReply_reflection_;
  delete BulletScreenRpcSendBulletScreenCGAsk::default_instance_;
  delete BulletScreenRpcSendBulletScreenCGAsk_reflection_;
  delete BulletScreenRpcSendBulletScreenCGReply::default_instance_;
  delete BulletScreenRpcSendBulletScreenCGReply_reflection_;
}

void protobuf_AddDesc_BulletScreenRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025BulletScreenRpc.proto\032\022PublicStruct.pr"
    "oto\"V\n!BulletScreenRpcBulletScreenOptAsk"
    "\022\034\n\020BulletScreenType\030\001 \001(\005:\002-1\022\023\n\007OptTyp"
    "e\030\002 \001(\005:\002-1\"l\n#BulletScreenRpcBulletScre"
    "enOptReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\034\n\020Bullet"
    "ScreenType\030\002 \001(\005:\002-1\022\023\n\007OptType\030\003 \001(\005:\002-"
    "1\"4\n BulletScreenRpcCGBulletScreenAsk\022\020\n"
    "\004CGid\030\001 \001(\005:\002-1\"U\n\"BulletScreenRpcCGBull"
    "etScreenReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\033\n\023Bul"
    "letScreenContent\030\002 \003(\t\"I\n$BulletScreenRp"
    "cSendBulletScreenCGAsk\022\020\n\004CGid\030\001 \001(\005:\002-1"
    "\022\017\n\007Content\030\002 \001(\t\"<\n&BulletScreenRpcSend"
    "BulletScreenCGReply\022\022\n\006Result\030\001 \001(\005:\002-1", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BulletScreenRpc.proto", &protobuf_RegisterTypes);
  BulletScreenRpcBulletScreenOptAsk::default_instance_ = new BulletScreenRpcBulletScreenOptAsk();
  BulletScreenRpcBulletScreenOptReply::default_instance_ = new BulletScreenRpcBulletScreenOptReply();
  BulletScreenRpcCGBulletScreenAsk::default_instance_ = new BulletScreenRpcCGBulletScreenAsk();
  BulletScreenRpcCGBulletScreenReply::default_instance_ = new BulletScreenRpcCGBulletScreenReply();
  BulletScreenRpcSendBulletScreenCGAsk::default_instance_ = new BulletScreenRpcSendBulletScreenCGAsk();
  BulletScreenRpcSendBulletScreenCGReply::default_instance_ = new BulletScreenRpcSendBulletScreenCGReply();
  BulletScreenRpcBulletScreenOptAsk::default_instance_->InitAsDefaultInstance();
  BulletScreenRpcBulletScreenOptReply::default_instance_->InitAsDefaultInstance();
  BulletScreenRpcCGBulletScreenAsk::default_instance_->InitAsDefaultInstance();
  BulletScreenRpcCGBulletScreenReply::default_instance_->InitAsDefaultInstance();
  BulletScreenRpcSendBulletScreenCGAsk::default_instance_->InitAsDefaultInstance();
  BulletScreenRpcSendBulletScreenCGReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BulletScreenRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BulletScreenRpc_2eproto {
  StaticDescriptorInitializer_BulletScreenRpc_2eproto() {
    protobuf_AddDesc_BulletScreenRpc_2eproto();
  }
} static_descriptor_initializer_BulletScreenRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcBulletScreenOptAsk::kBulletScreenTypeFieldNumber;
const int BulletScreenRpcBulletScreenOptAsk::kOptTypeFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcBulletScreenOptAsk::BulletScreenRpcBulletScreenOptAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcBulletScreenOptAsk::InitAsDefaultInstance() {
}

BulletScreenRpcBulletScreenOptAsk::BulletScreenRpcBulletScreenOptAsk(const BulletScreenRpcBulletScreenOptAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcBulletScreenOptAsk::SharedCtor() {
  _cached_size_ = 0;
  bulletscreentype_ = -1;
  opttype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcBulletScreenOptAsk::~BulletScreenRpcBulletScreenOptAsk() {
  SharedDtor();
}

void BulletScreenRpcBulletScreenOptAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletScreenRpcBulletScreenOptAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcBulletScreenOptAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcBulletScreenOptAsk_descriptor_;
}

const BulletScreenRpcBulletScreenOptAsk& BulletScreenRpcBulletScreenOptAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcBulletScreenOptAsk* BulletScreenRpcBulletScreenOptAsk::default_instance_ = NULL;

BulletScreenRpcBulletScreenOptAsk* BulletScreenRpcBulletScreenOptAsk::New() const {
  return new BulletScreenRpcBulletScreenOptAsk;
}

void BulletScreenRpcBulletScreenOptAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bulletscreentype_ = -1;
    opttype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcBulletScreenOptAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BulletScreenType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletscreentype_)));
          set_has_bulletscreentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OptType;
        break;
      }

      // optional int32 OptType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OptType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opttype_)));
          set_has_opttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcBulletScreenOptAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BulletScreenType = 1 [default = -1];
  if (has_bulletscreentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bulletscreentype(), output);
  }

  // optional int32 OptType = 2 [default = -1];
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcBulletScreenOptAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BulletScreenType = 1 [default = -1];
  if (has_bulletscreentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bulletscreentype(), target);
  }

  // optional int32 OptType = 2 [default = -1];
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcBulletScreenOptAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BulletScreenType = 1 [default = -1];
    if (has_bulletscreentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletscreentype());
    }

    // optional int32 OptType = 2 [default = -1];
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcBulletScreenOptAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcBulletScreenOptAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcBulletScreenOptAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcBulletScreenOptAsk::MergeFrom(const BulletScreenRpcBulletScreenOptAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletscreentype()) {
      set_bulletscreentype(from.bulletscreentype());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcBulletScreenOptAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcBulletScreenOptAsk::CopyFrom(const BulletScreenRpcBulletScreenOptAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcBulletScreenOptAsk::IsInitialized() const {

  return true;
}

void BulletScreenRpcBulletScreenOptAsk::Swap(BulletScreenRpcBulletScreenOptAsk* other) {
  if (other != this) {
    std::swap(bulletscreentype_, other->bulletscreentype_);
    std::swap(opttype_, other->opttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcBulletScreenOptAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcBulletScreenOptAsk_descriptor_;
  metadata.reflection = BulletScreenRpcBulletScreenOptAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcBulletScreenOptReply::kResultFieldNumber;
const int BulletScreenRpcBulletScreenOptReply::kBulletScreenTypeFieldNumber;
const int BulletScreenRpcBulletScreenOptReply::kOptTypeFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcBulletScreenOptReply::BulletScreenRpcBulletScreenOptReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcBulletScreenOptReply::InitAsDefaultInstance() {
}

BulletScreenRpcBulletScreenOptReply::BulletScreenRpcBulletScreenOptReply(const BulletScreenRpcBulletScreenOptReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcBulletScreenOptReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  bulletscreentype_ = -1;
  opttype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcBulletScreenOptReply::~BulletScreenRpcBulletScreenOptReply() {
  SharedDtor();
}

void BulletScreenRpcBulletScreenOptReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletScreenRpcBulletScreenOptReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcBulletScreenOptReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcBulletScreenOptReply_descriptor_;
}

const BulletScreenRpcBulletScreenOptReply& BulletScreenRpcBulletScreenOptReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcBulletScreenOptReply* BulletScreenRpcBulletScreenOptReply::default_instance_ = NULL;

BulletScreenRpcBulletScreenOptReply* BulletScreenRpcBulletScreenOptReply::New() const {
  return new BulletScreenRpcBulletScreenOptReply;
}

void BulletScreenRpcBulletScreenOptReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    bulletscreentype_ = -1;
    opttype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcBulletScreenOptReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BulletScreenType;
        break;
      }

      // optional int32 BulletScreenType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletScreenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletscreentype_)));
          set_has_bulletscreentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OptType;
        break;
      }

      // optional int32 OptType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OptType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opttype_)));
          set_has_opttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcBulletScreenOptReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 BulletScreenType = 2 [default = -1];
  if (has_bulletscreentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletscreentype(), output);
  }

  // optional int32 OptType = 3 [default = -1];
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcBulletScreenOptReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 BulletScreenType = 2 [default = -1];
  if (has_bulletscreentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bulletscreentype(), target);
  }

  // optional int32 OptType = 3 [default = -1];
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcBulletScreenOptReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 BulletScreenType = 2 [default = -1];
    if (has_bulletscreentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletscreentype());
    }

    // optional int32 OptType = 3 [default = -1];
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcBulletScreenOptReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcBulletScreenOptReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcBulletScreenOptReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcBulletScreenOptReply::MergeFrom(const BulletScreenRpcBulletScreenOptReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bulletscreentype()) {
      set_bulletscreentype(from.bulletscreentype());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcBulletScreenOptReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcBulletScreenOptReply::CopyFrom(const BulletScreenRpcBulletScreenOptReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcBulletScreenOptReply::IsInitialized() const {

  return true;
}

void BulletScreenRpcBulletScreenOptReply::Swap(BulletScreenRpcBulletScreenOptReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bulletscreentype_, other->bulletscreentype_);
    std::swap(opttype_, other->opttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcBulletScreenOptReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcBulletScreenOptReply_descriptor_;
  metadata.reflection = BulletScreenRpcBulletScreenOptReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcCGBulletScreenAsk::kCGidFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcCGBulletScreenAsk::BulletScreenRpcCGBulletScreenAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcCGBulletScreenAsk::InitAsDefaultInstance() {
}

BulletScreenRpcCGBulletScreenAsk::BulletScreenRpcCGBulletScreenAsk(const BulletScreenRpcCGBulletScreenAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcCGBulletScreenAsk::SharedCtor() {
  _cached_size_ = 0;
  cgid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcCGBulletScreenAsk::~BulletScreenRpcCGBulletScreenAsk() {
  SharedDtor();
}

void BulletScreenRpcCGBulletScreenAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletScreenRpcCGBulletScreenAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcCGBulletScreenAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcCGBulletScreenAsk_descriptor_;
}

const BulletScreenRpcCGBulletScreenAsk& BulletScreenRpcCGBulletScreenAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcCGBulletScreenAsk* BulletScreenRpcCGBulletScreenAsk::default_instance_ = NULL;

BulletScreenRpcCGBulletScreenAsk* BulletScreenRpcCGBulletScreenAsk::New() const {
  return new BulletScreenRpcCGBulletScreenAsk;
}

void BulletScreenRpcCGBulletScreenAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cgid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcCGBulletScreenAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CGid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcCGBulletScreenAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CGid = 1 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcCGBulletScreenAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CGid = 1 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcCGBulletScreenAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CGid = 1 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcCGBulletScreenAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcCGBulletScreenAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcCGBulletScreenAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcCGBulletScreenAsk::MergeFrom(const BulletScreenRpcCGBulletScreenAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcCGBulletScreenAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcCGBulletScreenAsk::CopyFrom(const BulletScreenRpcCGBulletScreenAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcCGBulletScreenAsk::IsInitialized() const {

  return true;
}

void BulletScreenRpcCGBulletScreenAsk::Swap(BulletScreenRpcCGBulletScreenAsk* other) {
  if (other != this) {
    std::swap(cgid_, other->cgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcCGBulletScreenAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcCGBulletScreenAsk_descriptor_;
  metadata.reflection = BulletScreenRpcCGBulletScreenAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcCGBulletScreenReply::kResultFieldNumber;
const int BulletScreenRpcCGBulletScreenReply::kBulletScreenContentFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcCGBulletScreenReply::BulletScreenRpcCGBulletScreenReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcCGBulletScreenReply::InitAsDefaultInstance() {
}

BulletScreenRpcCGBulletScreenReply::BulletScreenRpcCGBulletScreenReply(const BulletScreenRpcCGBulletScreenReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcCGBulletScreenReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcCGBulletScreenReply::~BulletScreenRpcCGBulletScreenReply() {
  SharedDtor();
}

void BulletScreenRpcCGBulletScreenReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletScreenRpcCGBulletScreenReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcCGBulletScreenReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcCGBulletScreenReply_descriptor_;
}

const BulletScreenRpcCGBulletScreenReply& BulletScreenRpcCGBulletScreenReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcCGBulletScreenReply* BulletScreenRpcCGBulletScreenReply::default_instance_ = NULL;

BulletScreenRpcCGBulletScreenReply* BulletScreenRpcCGBulletScreenReply::New() const {
  return new BulletScreenRpcCGBulletScreenReply;
}

void BulletScreenRpcCGBulletScreenReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  bulletscreencontent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcCGBulletScreenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BulletScreenContent;
        break;
      }

      // repeated string BulletScreenContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletScreenContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bulletscreencontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulletscreencontent(this->bulletscreencontent_size() - 1).data(),
            this->bulletscreencontent(this->bulletscreencontent_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BulletScreenContent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcCGBulletScreenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated string BulletScreenContent = 2;
  for (int i = 0; i < this->bulletscreencontent_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bulletscreencontent(i).data(), this->bulletscreencontent(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bulletscreencontent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcCGBulletScreenReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated string BulletScreenContent = 2;
  for (int i = 0; i < this->bulletscreencontent_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletscreencontent(i).data(), this->bulletscreencontent(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bulletscreencontent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcCGBulletScreenReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated string BulletScreenContent = 2;
  total_size += 1 * this->bulletscreencontent_size();
  for (int i = 0; i < this->bulletscreencontent_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bulletscreencontent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcCGBulletScreenReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcCGBulletScreenReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcCGBulletScreenReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcCGBulletScreenReply::MergeFrom(const BulletScreenRpcCGBulletScreenReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bulletscreencontent_.MergeFrom(from.bulletscreencontent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcCGBulletScreenReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcCGBulletScreenReply::CopyFrom(const BulletScreenRpcCGBulletScreenReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcCGBulletScreenReply::IsInitialized() const {

  return true;
}

void BulletScreenRpcCGBulletScreenReply::Swap(BulletScreenRpcCGBulletScreenReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    bulletscreencontent_.Swap(&other->bulletscreencontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcCGBulletScreenReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcCGBulletScreenReply_descriptor_;
  metadata.reflection = BulletScreenRpcCGBulletScreenReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcSendBulletScreenCGAsk::kCGidFieldNumber;
const int BulletScreenRpcSendBulletScreenCGAsk::kContentFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcSendBulletScreenCGAsk::BulletScreenRpcSendBulletScreenCGAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcSendBulletScreenCGAsk::InitAsDefaultInstance() {
}

BulletScreenRpcSendBulletScreenCGAsk::BulletScreenRpcSendBulletScreenCGAsk(const BulletScreenRpcSendBulletScreenCGAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcSendBulletScreenCGAsk::SharedCtor() {
  _cached_size_ = 0;
  cgid_ = -1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcSendBulletScreenCGAsk::~BulletScreenRpcSendBulletScreenCGAsk() {
  SharedDtor();
}

void BulletScreenRpcSendBulletScreenCGAsk::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void BulletScreenRpcSendBulletScreenCGAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcSendBulletScreenCGAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcSendBulletScreenCGAsk_descriptor_;
}

const BulletScreenRpcSendBulletScreenCGAsk& BulletScreenRpcSendBulletScreenCGAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcSendBulletScreenCGAsk* BulletScreenRpcSendBulletScreenCGAsk::default_instance_ = NULL;

BulletScreenRpcSendBulletScreenCGAsk* BulletScreenRpcSendBulletScreenCGAsk::New() const {
  return new BulletScreenRpcSendBulletScreenCGAsk;
}

void BulletScreenRpcSendBulletScreenCGAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cgid_ = -1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcSendBulletScreenCGAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CGid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcSendBulletScreenCGAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CGid = 1 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cgid(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcSendBulletScreenCGAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CGid = 1 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cgid(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcSendBulletScreenCGAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CGid = 1 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcSendBulletScreenCGAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcSendBulletScreenCGAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcSendBulletScreenCGAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcSendBulletScreenCGAsk::MergeFrom(const BulletScreenRpcSendBulletScreenCGAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcSendBulletScreenCGAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcSendBulletScreenCGAsk::CopyFrom(const BulletScreenRpcSendBulletScreenCGAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcSendBulletScreenCGAsk::IsInitialized() const {

  return true;
}

void BulletScreenRpcSendBulletScreenCGAsk::Swap(BulletScreenRpcSendBulletScreenCGAsk* other) {
  if (other != this) {
    std::swap(cgid_, other->cgid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcSendBulletScreenCGAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcSendBulletScreenCGAsk_descriptor_;
  metadata.reflection = BulletScreenRpcSendBulletScreenCGAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulletScreenRpcSendBulletScreenCGReply::kResultFieldNumber;
#endif  // !_MSC_VER

BulletScreenRpcSendBulletScreenCGReply::BulletScreenRpcSendBulletScreenCGReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulletScreenRpcSendBulletScreenCGReply::InitAsDefaultInstance() {
}

BulletScreenRpcSendBulletScreenCGReply::BulletScreenRpcSendBulletScreenCGReply(const BulletScreenRpcSendBulletScreenCGReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulletScreenRpcSendBulletScreenCGReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletScreenRpcSendBulletScreenCGReply::~BulletScreenRpcSendBulletScreenCGReply() {
  SharedDtor();
}

void BulletScreenRpcSendBulletScreenCGReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulletScreenRpcSendBulletScreenCGReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletScreenRpcSendBulletScreenCGReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletScreenRpcSendBulletScreenCGReply_descriptor_;
}

const BulletScreenRpcSendBulletScreenCGReply& BulletScreenRpcSendBulletScreenCGReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BulletScreenRpc_2eproto();
  return *default_instance_;
}

BulletScreenRpcSendBulletScreenCGReply* BulletScreenRpcSendBulletScreenCGReply::default_instance_ = NULL;

BulletScreenRpcSendBulletScreenCGReply* BulletScreenRpcSendBulletScreenCGReply::New() const {
  return new BulletScreenRpcSendBulletScreenCGReply;
}

void BulletScreenRpcSendBulletScreenCGReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulletScreenRpcSendBulletScreenCGReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletScreenRpcSendBulletScreenCGReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulletScreenRpcSendBulletScreenCGReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulletScreenRpcSendBulletScreenCGReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletScreenRpcSendBulletScreenCGReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulletScreenRpcSendBulletScreenCGReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulletScreenRpcSendBulletScreenCGReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulletScreenRpcSendBulletScreenCGReply::MergeFrom(const BulletScreenRpcSendBulletScreenCGReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulletScreenRpcSendBulletScreenCGReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletScreenRpcSendBulletScreenCGReply::CopyFrom(const BulletScreenRpcSendBulletScreenCGReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletScreenRpcSendBulletScreenCGReply::IsInitialized() const {

  return true;
}

void BulletScreenRpcSendBulletScreenCGReply::Swap(BulletScreenRpcSendBulletScreenCGReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulletScreenRpcSendBulletScreenCGReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletScreenRpcSendBulletScreenCGReply_descriptor_;
  metadata.reflection = BulletScreenRpcSendBulletScreenCGReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
