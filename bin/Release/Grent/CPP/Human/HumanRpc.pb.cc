// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HumanRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HumanRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HumanRpcMoveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMoveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcStopMoveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcStopMoveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcStopMoveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcStopMoveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMoveCheckNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveCheckNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcRespawnAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcRespawnAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcRespawnReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcRespawnReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcRespawnOtherNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcRespawnOtherNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMovePosAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMovePosAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMovePosReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMovePosReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcRoleDieNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcRoleDieNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcChangeAnimationStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcChangeAnimationStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcFuncNoticeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcFuncNoticeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeChangeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcFuncNoticeChangeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeChangeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcFuncNoticeChangeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcClientAttributesNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcClientAttributesNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HumanRpc_2eproto() {
  protobuf_AddDesc_HumanRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HumanRpc.proto");
  GOOGLE_CHECK(file != NULL);
  HumanRpcMoveAsk_descriptor_ = file->message_type(0);
  static const int HumanRpcMoveAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, objid_),
  };
  HumanRpcMoveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveAsk_descriptor_,
      HumanRpcMoveAsk::default_instance_,
      HumanRpcMoveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveAsk));
  HumanRpcMoveReply_descriptor_ = file->message_type(1);
  static const int HumanRpcMoveReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, objid_),
  };
  HumanRpcMoveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveReply_descriptor_,
      HumanRpcMoveReply::default_instance_,
      HumanRpcMoveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveReply));
  HumanRpcStopMoveAsk_descriptor_ = file->message_type(2);
  static const int HumanRpcStopMoveAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, objid_),
  };
  HumanRpcStopMoveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcStopMoveAsk_descriptor_,
      HumanRpcStopMoveAsk::default_instance_,
      HumanRpcStopMoveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcStopMoveAsk));
  HumanRpcStopMoveReply_descriptor_ = file->message_type(3);
  static const int HumanRpcStopMoveReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, objid_),
  };
  HumanRpcStopMoveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcStopMoveReply_descriptor_,
      HumanRpcStopMoveReply::default_instance_,
      HumanRpcStopMoveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcStopMoveReply));
  HumanRpcMoveCheckNotify_descriptor_ = file->message_type(4);
  static const int HumanRpcMoveCheckNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, y_),
  };
  HumanRpcMoveCheckNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveCheckNotify_descriptor_,
      HumanRpcMoveCheckNotify::default_instance_,
      HumanRpcMoveCheckNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveCheckNotify));
  HumanRpcRespawnAsk_descriptor_ = file->message_type(5);
  static const int HumanRpcRespawnAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnAsk, revivetype_),
  };
  HumanRpcRespawnAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcRespawnAsk_descriptor_,
      HumanRpcRespawnAsk::default_instance_,
      HumanRpcRespawnAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcRespawnAsk));
  HumanRpcRespawnReply_descriptor_ = file->message_type(6);
  static const int HumanRpcRespawnReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnReply, revivetype_),
  };
  HumanRpcRespawnReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcRespawnReply_descriptor_,
      HumanRpcRespawnReply::default_instance_,
      HumanRpcRespawnReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcRespawnReply));
  HumanRpcRespawnOtherNotify_descriptor_ = file->message_type(7);
  static const int HumanRpcRespawnOtherNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnOtherNotify, objid_),
  };
  HumanRpcRespawnOtherNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcRespawnOtherNotify_descriptor_,
      HumanRpcRespawnOtherNotify::default_instance_,
      HumanRpcRespawnOtherNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnOtherNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRespawnOtherNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcRespawnOtherNotify));
  HumanRpcMovePosAsk_descriptor_ = file->message_type(8);
  static const int HumanRpcMovePosAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, poslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, isallowchangerunanimation_),
  };
  HumanRpcMovePosAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMovePosAsk_descriptor_,
      HumanRpcMovePosAsk::default_instance_,
      HumanRpcMovePosAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMovePosAsk));
  HumanRpcMovePosReply_descriptor_ = file->message_type(9);
  static const int HumanRpcMovePosReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, objid_),
  };
  HumanRpcMovePosReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMovePosReply_descriptor_,
      HumanRpcMovePosReply::default_instance_,
      HumanRpcMovePosReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMovePosReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMovePosReply));
  HumanRpcRoleDieNotify_descriptor_ = file->message_type(10);
  static const int HumanRpcRoleDieNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, killerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, killername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, killertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, reviecdtime_),
  };
  HumanRpcRoleDieNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcRoleDieNotify_descriptor_,
      HumanRpcRoleDieNotify::default_instance_,
      HumanRpcRoleDieNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcRoleDieNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcRoleDieNotify));
  HumanRpcChangeAnimationStateNotify_descriptor_ = file->message_type(11);
  static const int HumanRpcChangeAnimationStateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcChangeAnimationStateNotify, animationstate_),
  };
  HumanRpcChangeAnimationStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcChangeAnimationStateNotify_descriptor_,
      HumanRpcChangeAnimationStateNotify::default_instance_,
      HumanRpcChangeAnimationStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcChangeAnimationStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcChangeAnimationStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcChangeAnimationStateNotify));
  HumanRpcFuncNoticeAsk_descriptor_ = file->message_type(12);
  static const int HumanRpcFuncNoticeAsk_offsets_[1] = {
  };
  HumanRpcFuncNoticeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcFuncNoticeAsk_descriptor_,
      HumanRpcFuncNoticeAsk::default_instance_,
      HumanRpcFuncNoticeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcFuncNoticeAsk));
  HumanRpcFuncNoticeReply_descriptor_ = file->message_type(13);
  static const int HumanRpcFuncNoticeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeReply, funcindex_),
  };
  HumanRpcFuncNoticeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcFuncNoticeReply_descriptor_,
      HumanRpcFuncNoticeReply::default_instance_,
      HumanRpcFuncNoticeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcFuncNoticeReply));
  HumanRpcFuncNoticeChangeAsk_descriptor_ = file->message_type(14);
  static const int HumanRpcFuncNoticeChangeAsk_offsets_[1] = {
  };
  HumanRpcFuncNoticeChangeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcFuncNoticeChangeAsk_descriptor_,
      HumanRpcFuncNoticeChangeAsk::default_instance_,
      HumanRpcFuncNoticeChangeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeChangeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeChangeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcFuncNoticeChangeAsk));
  HumanRpcFuncNoticeChangeReply_descriptor_ = file->message_type(15);
  static const int HumanRpcFuncNoticeChangeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeChangeReply, result_),
  };
  HumanRpcFuncNoticeChangeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcFuncNoticeChangeReply_descriptor_,
      HumanRpcFuncNoticeChangeReply::default_instance_,
      HumanRpcFuncNoticeChangeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeChangeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcFuncNoticeChangeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcFuncNoticeChangeReply));
  HumanRpcClientAttributesNotify_descriptor_ = file->message_type(16);
  static const int HumanRpcClientAttributesNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcClientAttributesNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcClientAttributesNotify, istouchjoystick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcClientAttributesNotify, ishold_),
  };
  HumanRpcClientAttributesNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcClientAttributesNotify_descriptor_,
      HumanRpcClientAttributesNotify::default_instance_,
      HumanRpcClientAttributesNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcClientAttributesNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcClientAttributesNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcClientAttributesNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HumanRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveAsk_descriptor_, &HumanRpcMoveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveReply_descriptor_, &HumanRpcMoveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcStopMoveAsk_descriptor_, &HumanRpcStopMoveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcStopMoveReply_descriptor_, &HumanRpcStopMoveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveCheckNotify_descriptor_, &HumanRpcMoveCheckNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcRespawnAsk_descriptor_, &HumanRpcRespawnAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcRespawnReply_descriptor_, &HumanRpcRespawnReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcRespawnOtherNotify_descriptor_, &HumanRpcRespawnOtherNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMovePosAsk_descriptor_, &HumanRpcMovePosAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMovePosReply_descriptor_, &HumanRpcMovePosReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcRoleDieNotify_descriptor_, &HumanRpcRoleDieNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcChangeAnimationStateNotify_descriptor_, &HumanRpcChangeAnimationStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcFuncNoticeAsk_descriptor_, &HumanRpcFuncNoticeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcFuncNoticeReply_descriptor_, &HumanRpcFuncNoticeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcFuncNoticeChangeAsk_descriptor_, &HumanRpcFuncNoticeChangeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcFuncNoticeChangeReply_descriptor_, &HumanRpcFuncNoticeChangeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcClientAttributesNotify_descriptor_, &HumanRpcClientAttributesNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HumanRpc_2eproto() {
  delete HumanRpcMoveAsk::default_instance_;
  delete HumanRpcMoveAsk_reflection_;
  delete HumanRpcMoveReply::default_instance_;
  delete HumanRpcMoveReply_reflection_;
  delete HumanRpcStopMoveAsk::default_instance_;
  delete HumanRpcStopMoveAsk_reflection_;
  delete HumanRpcStopMoveReply::default_instance_;
  delete HumanRpcStopMoveReply_reflection_;
  delete HumanRpcMoveCheckNotify::default_instance_;
  delete HumanRpcMoveCheckNotify_reflection_;
  delete HumanRpcRespawnAsk::default_instance_;
  delete HumanRpcRespawnAsk_reflection_;
  delete HumanRpcRespawnReply::default_instance_;
  delete HumanRpcRespawnReply_reflection_;
  delete HumanRpcRespawnOtherNotify::default_instance_;
  delete HumanRpcRespawnOtherNotify_reflection_;
  delete HumanRpcMovePosAsk::default_instance_;
  delete HumanRpcMovePosAsk_reflection_;
  delete HumanRpcMovePosReply::default_instance_;
  delete HumanRpcMovePosReply_reflection_;
  delete HumanRpcRoleDieNotify::default_instance_;
  delete HumanRpcRoleDieNotify_reflection_;
  delete HumanRpcChangeAnimationStateNotify::default_instance_;
  delete HumanRpcChangeAnimationStateNotify_reflection_;
  delete HumanRpcFuncNoticeAsk::default_instance_;
  delete HumanRpcFuncNoticeAsk_reflection_;
  delete HumanRpcFuncNoticeReply::default_instance_;
  delete HumanRpcFuncNoticeReply_reflection_;
  delete HumanRpcFuncNoticeChangeAsk::default_instance_;
  delete HumanRpcFuncNoticeChangeAsk_reflection_;
  delete HumanRpcFuncNoticeChangeReply::default_instance_;
  delete HumanRpcFuncNoticeChangeReply_reflection_;
  delete HumanRpcClientAttributesNotify::default_instance_;
  delete HumanRpcClientAttributesNotify_reflection_;
}

void protobuf_AddDesc_HumanRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016HumanRpc.proto\032\022PublicStruct.proto\"S\n\017"
    "HumanRpcMoveAsk\022\017\n\003Dir\030\002 \001(\002:\002-1\022\r\n\001X\030\003 "
    "\001(\002:\002-1\022\r\n\001Z\030\004 \001(\002:\002-1\022\021\n\005ObjId\030\005 \001(\005:\002-"
    "1\"e\n\021HumanRpcMoveReply\022\025\n\006Result\030\001 \001(\005:\005"
    "-9999\022\025\n\003Pos\030\002 \001(\0132\010.Vector3\022\017\n\003Dir\030\003 \001("
    "\002:\002-1\022\021\n\005ObjId\030\004 \001(\005:\002-1\"W\n\023HumanRpcStop"
    "MoveAsk\022\017\n\003Dir\030\002 \001(\002:\002-1\022\r\n\001X\030\003 \001(\005:\002-1\022"
    "\r\n\001Z\030\004 \001(\005:\002-1\022\021\n\005ObjId\030\005 \001(\005:\002-1\"l\n\025Hum"
    "anRpcStopMoveReply\022\025\n\006Result\030\001 \001(\005:\005-999"
    "9\022\030\n\003Pos\030\002 \001(\0132\013.Vector3Int\022\017\n\003Dir\030\003 \001(\002"
    ":\002-1\022\021\n\005ObjId\030\004 \001(\005:\002-1\"[\n\027HumanRpcMoveC"
    "heckNotify\022\021\n\005ObjId\030\001 \001(\005:\002-1\022\017\n\003Dir\030\003 \001"
    "(\002:\002-1\022\r\n\001X\030\004 \001(\002:\002-1\022\r\n\001Y\030\005 \001(\002:\002-1\",\n\022"
    "HumanRpcRespawnAsk\022\026\n\nReviveType\030\001 \001(\005:\002"
    "-1\"E\n\024HumanRpcRespawnReply\022\025\n\006Result\030\001 \001"
    "(\005:\005-9999\022\026\n\nReviveType\030\002 \001(\005:\002-1\"/\n\032Hum"
    "anRpcRespawnOtherNotify\022\021\n\005ObjId\030\001 \001(\005:\002"
    "-1\"\177\n\022HumanRpcMovePosAsk\022\034\n\007PosList\030\001 \003("
    "\0132\013.Vector3Int\022\017\n\003Dir\030\002 \001(\002:\002-1\022\021\n\005ObjId"
    "\030\003 \001(\005:\002-1\022\'\n\031IsAllowChangeRunAnimation\030"
    "\004 \001(\010:\004true\"h\n\024HumanRpcMovePosReply\022\022\n\006R"
    "esult\030\001 \001(\005:\002-1\022\030\n\003Pos\030\002 \001(\0132\013.Vector3In"
    "t\022\017\n\003Dir\030\003 \001(\002:\002-1\022\021\n\005ObjId\030\004 \001(\005:\002-1\"t\n"
    "\025HumanRpcRoleDieNotify\022\026\n\nKillerGuid\030\001 \001"
    "(\003:\002-1\022\022\n\nKillerName\030\002 \001(\t\022\026\n\nKillerType"
    "\030\003 \001(\005:\002-1\022\027\n\013RevieCDTime\030\004 \001(\005:\002-1\"C\n\"H"
    "umanRpcChangeAnimationStateNotify\022\035\n\016Ani"
    "mationState\030\001 \001(\010:\005false\"\027\n\025HumanRpcFunc"
    "NoticeAsk\"D\n\027HumanRpcFuncNoticeReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\025\n\tFuncIndex\030\002 \001(\005:\002-1\""
    "\035\n\033HumanRpcFuncNoticeChangeAsk\"3\n\035HumanR"
    "pcFuncNoticeChangeReply\022\022\n\006Result\030\001 \001(\005:"
    "\002-1\"j\n\036HumanRpcClientAttributesNotify\022\021\n"
    "\005ObjId\030\002 \001(\005:\002-1\022\036\n\017IsTouchJoyStick\030\006 \001("
    "\010:\005false\022\025\n\006IsHold\030\007 \001(\010:\005false", 1391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HumanRpc.proto", &protobuf_RegisterTypes);
  HumanRpcMoveAsk::default_instance_ = new HumanRpcMoveAsk();
  HumanRpcMoveReply::default_instance_ = new HumanRpcMoveReply();
  HumanRpcStopMoveAsk::default_instance_ = new HumanRpcStopMoveAsk();
  HumanRpcStopMoveReply::default_instance_ = new HumanRpcStopMoveReply();
  HumanRpcMoveCheckNotify::default_instance_ = new HumanRpcMoveCheckNotify();
  HumanRpcRespawnAsk::default_instance_ = new HumanRpcRespawnAsk();
  HumanRpcRespawnReply::default_instance_ = new HumanRpcRespawnReply();
  HumanRpcRespawnOtherNotify::default_instance_ = new HumanRpcRespawnOtherNotify();
  HumanRpcMovePosAsk::default_instance_ = new HumanRpcMovePosAsk();
  HumanRpcMovePosReply::default_instance_ = new HumanRpcMovePosReply();
  HumanRpcRoleDieNotify::default_instance_ = new HumanRpcRoleDieNotify();
  HumanRpcChangeAnimationStateNotify::default_instance_ = new HumanRpcChangeAnimationStateNotify();
  HumanRpcFuncNoticeAsk::default_instance_ = new HumanRpcFuncNoticeAsk();
  HumanRpcFuncNoticeReply::default_instance_ = new HumanRpcFuncNoticeReply();
  HumanRpcFuncNoticeChangeAsk::default_instance_ = new HumanRpcFuncNoticeChangeAsk();
  HumanRpcFuncNoticeChangeReply::default_instance_ = new HumanRpcFuncNoticeChangeReply();
  HumanRpcClientAttributesNotify::default_instance_ = new HumanRpcClientAttributesNotify();
  HumanRpcMoveAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcMoveReply::default_instance_->InitAsDefaultInstance();
  HumanRpcStopMoveAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcStopMoveReply::default_instance_->InitAsDefaultInstance();
  HumanRpcMoveCheckNotify::default_instance_->InitAsDefaultInstance();
  HumanRpcRespawnAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcRespawnReply::default_instance_->InitAsDefaultInstance();
  HumanRpcRespawnOtherNotify::default_instance_->InitAsDefaultInstance();
  HumanRpcMovePosAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcMovePosReply::default_instance_->InitAsDefaultInstance();
  HumanRpcRoleDieNotify::default_instance_->InitAsDefaultInstance();
  HumanRpcChangeAnimationStateNotify::default_instance_->InitAsDefaultInstance();
  HumanRpcFuncNoticeAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcFuncNoticeReply::default_instance_->InitAsDefaultInstance();
  HumanRpcFuncNoticeChangeAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcFuncNoticeChangeReply::default_instance_->InitAsDefaultInstance();
  HumanRpcClientAttributesNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HumanRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HumanRpc_2eproto {
  StaticDescriptorInitializer_HumanRpc_2eproto() {
    protobuf_AddDesc_HumanRpc_2eproto();
  }
} static_descriptor_initializer_HumanRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveAsk::kDirFieldNumber;
const int HumanRpcMoveAsk::kXFieldNumber;
const int HumanRpcMoveAsk::kZFieldNumber;
const int HumanRpcMoveAsk::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveAsk::HumanRpcMoveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveAsk::InitAsDefaultInstance() {
}

HumanRpcMoveAsk::HumanRpcMoveAsk(const HumanRpcMoveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveAsk::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  x_ = -1;
  z_ = -1;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveAsk::~HumanRpcMoveAsk() {
  SharedDtor();
}

void HumanRpcMoveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcMoveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveAsk_descriptor_;
}

const HumanRpcMoveAsk& HumanRpcMoveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveAsk* HumanRpcMoveAsk::default_instance_ = NULL;

HumanRpcMoveAsk* HumanRpcMoveAsk::New() const {
  return new HumanRpcMoveAsk;
}

void HumanRpcMoveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = -1;
    x_ = -1;
    z_ = -1;
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Dir = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_X;
        break;
      }

      // optional float X = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Z;
        break;
      }

      // optional float Z = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Dir = 2 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float X = 3 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Z = 4 [default = -1];
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional int32 ObjId = 5 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveAsk::MergeFrom(const HumanRpcMoveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveAsk::CopyFrom(const HumanRpcMoveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveAsk::IsInitialized() const {

  return true;
}

void HumanRpcMoveAsk::Swap(HumanRpcMoveAsk* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveAsk_descriptor_;
  metadata.reflection = HumanRpcMoveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveReply::kResultFieldNumber;
const int HumanRpcMoveReply::kPosFieldNumber;
const int HumanRpcMoveReply::kDirFieldNumber;
const int HumanRpcMoveReply::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveReply::HumanRpcMoveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

HumanRpcMoveReply::HumanRpcMoveReply(const HumanRpcMoveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  pos_ = NULL;
  dir_ = -1;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveReply::~HumanRpcMoveReply() {
  SharedDtor();
}

void HumanRpcMoveReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HumanRpcMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveReply_descriptor_;
}

const HumanRpcMoveReply& HumanRpcMoveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveReply* HumanRpcMoveReply::default_instance_ = NULL;

HumanRpcMoveReply* HumanRpcMoveReply::New() const {
  return new HumanRpcMoveReply;
}

void HumanRpcMoveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
    dir_ = -1;
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Vector3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 ObjId = 4 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveReply::MergeFrom(const HumanRpcMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveReply::CopyFrom(const HumanRpcMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveReply::IsInitialized() const {

  return true;
}

void HumanRpcMoveReply::Swap(HumanRpcMoveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveReply_descriptor_;
  metadata.reflection = HumanRpcMoveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcStopMoveAsk::kDirFieldNumber;
const int HumanRpcStopMoveAsk::kXFieldNumber;
const int HumanRpcStopMoveAsk::kZFieldNumber;
const int HumanRpcStopMoveAsk::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcStopMoveAsk::HumanRpcStopMoveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcStopMoveAsk::InitAsDefaultInstance() {
}

HumanRpcStopMoveAsk::HumanRpcStopMoveAsk(const HumanRpcStopMoveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcStopMoveAsk::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  x_ = -1;
  z_ = -1;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcStopMoveAsk::~HumanRpcStopMoveAsk() {
  SharedDtor();
}

void HumanRpcStopMoveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcStopMoveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcStopMoveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcStopMoveAsk_descriptor_;
}

const HumanRpcStopMoveAsk& HumanRpcStopMoveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcStopMoveAsk* HumanRpcStopMoveAsk::default_instance_ = NULL;

HumanRpcStopMoveAsk* HumanRpcStopMoveAsk::New() const {
  return new HumanRpcStopMoveAsk;
}

void HumanRpcStopMoveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = -1;
    x_ = -1;
    z_ = -1;
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcStopMoveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Dir = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }

      // optional int32 X = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Z;
        break;
      }

      // optional int32 Z = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcStopMoveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional int32 X = 3 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 Z = 4 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->z(), output);
  }

  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcStopMoveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional int32 X = 3 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 Z = 4 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->z(), target);
  }

  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcStopMoveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Dir = 2 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 X = 3 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Z = 4 [default = -1];
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional int32 ObjId = 5 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcStopMoveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcStopMoveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcStopMoveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcStopMoveAsk::MergeFrom(const HumanRpcStopMoveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcStopMoveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcStopMoveAsk::CopyFrom(const HumanRpcStopMoveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcStopMoveAsk::IsInitialized() const {

  return true;
}

void HumanRpcStopMoveAsk::Swap(HumanRpcStopMoveAsk* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcStopMoveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcStopMoveAsk_descriptor_;
  metadata.reflection = HumanRpcStopMoveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcStopMoveReply::kResultFieldNumber;
const int HumanRpcStopMoveReply::kPosFieldNumber;
const int HumanRpcStopMoveReply::kDirFieldNumber;
const int HumanRpcStopMoveReply::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcStopMoveReply::HumanRpcStopMoveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcStopMoveReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Int*>(&::Vector3Int::default_instance());
}

HumanRpcStopMoveReply::HumanRpcStopMoveReply(const HumanRpcStopMoveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcStopMoveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  pos_ = NULL;
  dir_ = -1;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcStopMoveReply::~HumanRpcStopMoveReply() {
  SharedDtor();
}

void HumanRpcStopMoveReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HumanRpcStopMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcStopMoveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcStopMoveReply_descriptor_;
}

const HumanRpcStopMoveReply& HumanRpcStopMoveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcStopMoveReply* HumanRpcStopMoveReply::default_instance_ = NULL;

HumanRpcStopMoveReply* HumanRpcStopMoveReply::New() const {
  return new HumanRpcStopMoveReply;
}

void HumanRpcStopMoveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Int::Clear();
    }
    dir_ = -1;
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcStopMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3Int Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcStopMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Vector3Int Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcStopMoveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Vector3Int Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcStopMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Vector3Int Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 ObjId = 4 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcStopMoveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcStopMoveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcStopMoveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcStopMoveReply::MergeFrom(const HumanRpcStopMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Int::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcStopMoveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcStopMoveReply::CopyFrom(const HumanRpcStopMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcStopMoveReply::IsInitialized() const {

  return true;
}

void HumanRpcStopMoveReply::Swap(HumanRpcStopMoveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcStopMoveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcStopMoveReply_descriptor_;
  metadata.reflection = HumanRpcStopMoveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveCheckNotify::kObjIdFieldNumber;
const int HumanRpcMoveCheckNotify::kDirFieldNumber;
const int HumanRpcMoveCheckNotify::kXFieldNumber;
const int HumanRpcMoveCheckNotify::kYFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveCheckNotify::HumanRpcMoveCheckNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveCheckNotify::InitAsDefaultInstance() {
}

HumanRpcMoveCheckNotify::HumanRpcMoveCheckNotify(const HumanRpcMoveCheckNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveCheckNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  dir_ = -1;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveCheckNotify::~HumanRpcMoveCheckNotify() {
  SharedDtor();
}

void HumanRpcMoveCheckNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcMoveCheckNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveCheckNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveCheckNotify_descriptor_;
}

const HumanRpcMoveCheckNotify& HumanRpcMoveCheckNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveCheckNotify* HumanRpcMoveCheckNotify::default_instance_ = NULL;

HumanRpcMoveCheckNotify* HumanRpcMoveCheckNotify::New() const {
  return new HumanRpcMoveCheckNotify;
}

void HumanRpcMoveCheckNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    dir_ = -1;
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveCheckNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_X;
        break;
      }

      // optional float X = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Y;
        break;
      }

      // optional float Y = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveCheckNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional float X = 4 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float Y = 5 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveCheckNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional float X = 4 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float Y = 5 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveCheckNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float X = 4 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 5 [default = -1];
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveCheckNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveCheckNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveCheckNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveCheckNotify::MergeFrom(const HumanRpcMoveCheckNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveCheckNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveCheckNotify::CopyFrom(const HumanRpcMoveCheckNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveCheckNotify::IsInitialized() const {

  return true;
}

void HumanRpcMoveCheckNotify::Swap(HumanRpcMoveCheckNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveCheckNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveCheckNotify_descriptor_;
  metadata.reflection = HumanRpcMoveCheckNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcRespawnAsk::kReviveTypeFieldNumber;
#endif  // !_MSC_VER

HumanRpcRespawnAsk::HumanRpcRespawnAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcRespawnAsk::InitAsDefaultInstance() {
}

HumanRpcRespawnAsk::HumanRpcRespawnAsk(const HumanRpcRespawnAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcRespawnAsk::SharedCtor() {
  _cached_size_ = 0;
  revivetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcRespawnAsk::~HumanRpcRespawnAsk() {
  SharedDtor();
}

void HumanRpcRespawnAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcRespawnAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcRespawnAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcRespawnAsk_descriptor_;
}

const HumanRpcRespawnAsk& HumanRpcRespawnAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcRespawnAsk* HumanRpcRespawnAsk::default_instance_ = NULL;

HumanRpcRespawnAsk* HumanRpcRespawnAsk::New() const {
  return new HumanRpcRespawnAsk;
}

void HumanRpcRespawnAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    revivetype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcRespawnAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ReviveType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivetype_)));
          set_has_revivetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcRespawnAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ReviveType = 1 [default = -1];
  if (has_revivetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->revivetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcRespawnAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ReviveType = 1 [default = -1];
  if (has_revivetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->revivetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcRespawnAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ReviveType = 1 [default = -1];
    if (has_revivetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcRespawnAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcRespawnAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcRespawnAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcRespawnAsk::MergeFrom(const HumanRpcRespawnAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revivetype()) {
      set_revivetype(from.revivetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcRespawnAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcRespawnAsk::CopyFrom(const HumanRpcRespawnAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcRespawnAsk::IsInitialized() const {

  return true;
}

void HumanRpcRespawnAsk::Swap(HumanRpcRespawnAsk* other) {
  if (other != this) {
    std::swap(revivetype_, other->revivetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcRespawnAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcRespawnAsk_descriptor_;
  metadata.reflection = HumanRpcRespawnAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcRespawnReply::kResultFieldNumber;
const int HumanRpcRespawnReply::kReviveTypeFieldNumber;
#endif  // !_MSC_VER

HumanRpcRespawnReply::HumanRpcRespawnReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcRespawnReply::InitAsDefaultInstance() {
}

HumanRpcRespawnReply::HumanRpcRespawnReply(const HumanRpcRespawnReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcRespawnReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  revivetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcRespawnReply::~HumanRpcRespawnReply() {
  SharedDtor();
}

void HumanRpcRespawnReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcRespawnReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcRespawnReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcRespawnReply_descriptor_;
}

const HumanRpcRespawnReply& HumanRpcRespawnReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcRespawnReply* HumanRpcRespawnReply::default_instance_ = NULL;

HumanRpcRespawnReply* HumanRpcRespawnReply::New() const {
  return new HumanRpcRespawnReply;
}

void HumanRpcRespawnReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    revivetype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcRespawnReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReviveType;
        break;
      }

      // optional int32 ReviveType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReviveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivetype_)));
          set_has_revivetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcRespawnReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 ReviveType = 2 [default = -1];
  if (has_revivetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->revivetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcRespawnReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 ReviveType = 2 [default = -1];
  if (has_revivetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->revivetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcRespawnReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 ReviveType = 2 [default = -1];
    if (has_revivetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcRespawnReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcRespawnReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcRespawnReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcRespawnReply::MergeFrom(const HumanRpcRespawnReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_revivetype()) {
      set_revivetype(from.revivetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcRespawnReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcRespawnReply::CopyFrom(const HumanRpcRespawnReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcRespawnReply::IsInitialized() const {

  return true;
}

void HumanRpcRespawnReply::Swap(HumanRpcRespawnReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(revivetype_, other->revivetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcRespawnReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcRespawnReply_descriptor_;
  metadata.reflection = HumanRpcRespawnReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcRespawnOtherNotify::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcRespawnOtherNotify::HumanRpcRespawnOtherNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcRespawnOtherNotify::InitAsDefaultInstance() {
}

HumanRpcRespawnOtherNotify::HumanRpcRespawnOtherNotify(const HumanRpcRespawnOtherNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcRespawnOtherNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcRespawnOtherNotify::~HumanRpcRespawnOtherNotify() {
  SharedDtor();
}

void HumanRpcRespawnOtherNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcRespawnOtherNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcRespawnOtherNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcRespawnOtherNotify_descriptor_;
}

const HumanRpcRespawnOtherNotify& HumanRpcRespawnOtherNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcRespawnOtherNotify* HumanRpcRespawnOtherNotify::default_instance_ = NULL;

HumanRpcRespawnOtherNotify* HumanRpcRespawnOtherNotify::New() const {
  return new HumanRpcRespawnOtherNotify;
}

void HumanRpcRespawnOtherNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcRespawnOtherNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcRespawnOtherNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcRespawnOtherNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcRespawnOtherNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcRespawnOtherNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcRespawnOtherNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcRespawnOtherNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcRespawnOtherNotify::MergeFrom(const HumanRpcRespawnOtherNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcRespawnOtherNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcRespawnOtherNotify::CopyFrom(const HumanRpcRespawnOtherNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcRespawnOtherNotify::IsInitialized() const {

  return true;
}

void HumanRpcRespawnOtherNotify::Swap(HumanRpcRespawnOtherNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcRespawnOtherNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcRespawnOtherNotify_descriptor_;
  metadata.reflection = HumanRpcRespawnOtherNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMovePosAsk::kPosListFieldNumber;
const int HumanRpcMovePosAsk::kDirFieldNumber;
const int HumanRpcMovePosAsk::kObjIdFieldNumber;
const int HumanRpcMovePosAsk::kIsAllowChangeRunAnimationFieldNumber;
#endif  // !_MSC_VER

HumanRpcMovePosAsk::HumanRpcMovePosAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMovePosAsk::InitAsDefaultInstance() {
}

HumanRpcMovePosAsk::HumanRpcMovePosAsk(const HumanRpcMovePosAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMovePosAsk::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  objid_ = -1;
  isallowchangerunanimation_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMovePosAsk::~HumanRpcMovePosAsk() {
  SharedDtor();
}

void HumanRpcMovePosAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcMovePosAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMovePosAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMovePosAsk_descriptor_;
}

const HumanRpcMovePosAsk& HumanRpcMovePosAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMovePosAsk* HumanRpcMovePosAsk::default_instance_ = NULL;

HumanRpcMovePosAsk* HumanRpcMovePosAsk::New() const {
  return new HumanRpcMovePosAsk;
}

void HumanRpcMovePosAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dir_ = -1;
    objid_ = -1;
    isallowchangerunanimation_ = true;
  }
  poslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMovePosAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Vector3Int PosList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PosList;
        if (input->ExpectTag(21)) goto parse_Dir;
        break;
      }

      // optional float Dir = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsAllowChangeRunAnimation;
        break;
      }

      // optional bool IsAllowChangeRunAnimation = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAllowChangeRunAnimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isallowchangerunanimation_)));
          set_has_isallowchangerunanimation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMovePosAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Vector3Int PosList = 1;
  for (int i = 0; i < this->poslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poslist(i), output);
  }

  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional int32 ObjId = 3 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objid(), output);
  }

  // optional bool IsAllowChangeRunAnimation = 4 [default = true];
  if (has_isallowchangerunanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isallowchangerunanimation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMovePosAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Vector3Int PosList = 1;
  for (int i = 0; i < this->poslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poslist(i), target);
  }

  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional int32 ObjId = 3 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objid(), target);
  }

  // optional bool IsAllowChangeRunAnimation = 4 [default = true];
  if (has_isallowchangerunanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isallowchangerunanimation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMovePosAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float Dir = 2 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 ObjId = 3 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional bool IsAllowChangeRunAnimation = 4 [default = true];
    if (has_isallowchangerunanimation()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Vector3Int PosList = 1;
  total_size += 1 * this->poslist_size();
  for (int i = 0; i < this->poslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMovePosAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMovePosAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMovePosAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMovePosAsk::MergeFrom(const HumanRpcMovePosAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  poslist_.MergeFrom(from.poslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_isallowchangerunanimation()) {
      set_isallowchangerunanimation(from.isallowchangerunanimation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMovePosAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMovePosAsk::CopyFrom(const HumanRpcMovePosAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMovePosAsk::IsInitialized() const {

  return true;
}

void HumanRpcMovePosAsk::Swap(HumanRpcMovePosAsk* other) {
  if (other != this) {
    poslist_.Swap(&other->poslist_);
    std::swap(dir_, other->dir_);
    std::swap(objid_, other->objid_);
    std::swap(isallowchangerunanimation_, other->isallowchangerunanimation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMovePosAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMovePosAsk_descriptor_;
  metadata.reflection = HumanRpcMovePosAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMovePosReply::kResultFieldNumber;
const int HumanRpcMovePosReply::kPosFieldNumber;
const int HumanRpcMovePosReply::kDirFieldNumber;
const int HumanRpcMovePosReply::kObjIdFieldNumber;
#endif  // !_MSC_VER

HumanRpcMovePosReply::HumanRpcMovePosReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMovePosReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Int*>(&::Vector3Int::default_instance());
}

HumanRpcMovePosReply::HumanRpcMovePosReply(const HumanRpcMovePosReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMovePosReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  pos_ = NULL;
  dir_ = -1;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMovePosReply::~HumanRpcMovePosReply() {
  SharedDtor();
}

void HumanRpcMovePosReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HumanRpcMovePosReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMovePosReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMovePosReply_descriptor_;
}

const HumanRpcMovePosReply& HumanRpcMovePosReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMovePosReply* HumanRpcMovePosReply::default_instance_ = NULL;

HumanRpcMovePosReply* HumanRpcMovePosReply::New() const {
  return new HumanRpcMovePosReply;
}

void HumanRpcMovePosReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Int::Clear();
    }
    dir_ = -1;
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMovePosReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3Int Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ObjId;
        break;
      }

      // optional int32 ObjId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMovePosReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Vector3Int Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMovePosReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Vector3Int Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 ObjId = 4 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMovePosReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Vector3Int Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 ObjId = 4 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMovePosReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMovePosReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMovePosReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMovePosReply::MergeFrom(const HumanRpcMovePosReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Int::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMovePosReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMovePosReply::CopyFrom(const HumanRpcMovePosReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMovePosReply::IsInitialized() const {

  return true;
}

void HumanRpcMovePosReply::Swap(HumanRpcMovePosReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMovePosReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMovePosReply_descriptor_;
  metadata.reflection = HumanRpcMovePosReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcRoleDieNotify::kKillerGuidFieldNumber;
const int HumanRpcRoleDieNotify::kKillerNameFieldNumber;
const int HumanRpcRoleDieNotify::kKillerTypeFieldNumber;
const int HumanRpcRoleDieNotify::kRevieCDTimeFieldNumber;
#endif  // !_MSC_VER

HumanRpcRoleDieNotify::HumanRpcRoleDieNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcRoleDieNotify::InitAsDefaultInstance() {
}

HumanRpcRoleDieNotify::HumanRpcRoleDieNotify(const HumanRpcRoleDieNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcRoleDieNotify::SharedCtor() {
  _cached_size_ = 0;
  killerguid_ = GOOGLE_LONGLONG(-1);
  killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  killertype_ = -1;
  reviecdtime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcRoleDieNotify::~HumanRpcRoleDieNotify() {
  SharedDtor();
}

void HumanRpcRoleDieNotify::SharedDtor() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    delete killername_;
  }
  if (this != default_instance_) {
  }
}

void HumanRpcRoleDieNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcRoleDieNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcRoleDieNotify_descriptor_;
}

const HumanRpcRoleDieNotify& HumanRpcRoleDieNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcRoleDieNotify* HumanRpcRoleDieNotify::default_instance_ = NULL;

HumanRpcRoleDieNotify* HumanRpcRoleDieNotify::New() const {
  return new HumanRpcRoleDieNotify;
}

void HumanRpcRoleDieNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killerguid_ = GOOGLE_LONGLONG(-1);
    if (has_killername()) {
      if (killername_ != &::google::protobuf::internal::kEmptyString) {
        killername_->clear();
      }
    }
    killertype_ = -1;
    reviecdtime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcRoleDieNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 KillerGuid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killerguid_)));
          set_has_killerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_KillerName;
        break;
      }

      // optional string KillerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KillerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killername().data(), this->killername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_KillerType;
        break;
      }

      // optional int32 KillerType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killertype_)));
          set_has_killertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RevieCDTime;
        break;
      }

      // optional int32 RevieCDTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RevieCDTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reviecdtime_)));
          set_has_reviecdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcRoleDieNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 KillerGuid = 1 [default = -1];
  if (has_killerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->killerguid(), output);
  }

  // optional string KillerName = 2;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->killername(), output);
  }

  // optional int32 KillerType = 3 [default = -1];
  if (has_killertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killertype(), output);
  }

  // optional int32 RevieCDTime = 4 [default = -1];
  if (has_reviecdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reviecdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcRoleDieNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 KillerGuid = 1 [default = -1];
  if (has_killerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->killerguid(), target);
  }

  // optional string KillerName = 2;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->killername(), target);
  }

  // optional int32 KillerType = 3 [default = -1];
  if (has_killertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killertype(), target);
  }

  // optional int32 RevieCDTime = 4 [default = -1];
  if (has_reviecdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reviecdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcRoleDieNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 KillerGuid = 1 [default = -1];
    if (has_killerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killerguid());
    }

    // optional string KillerName = 2;
    if (has_killername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killername());
    }

    // optional int32 KillerType = 3 [default = -1];
    if (has_killertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killertype());
    }

    // optional int32 RevieCDTime = 4 [default = -1];
    if (has_reviecdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reviecdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcRoleDieNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcRoleDieNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcRoleDieNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcRoleDieNotify::MergeFrom(const HumanRpcRoleDieNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killerguid()) {
      set_killerguid(from.killerguid());
    }
    if (from.has_killername()) {
      set_killername(from.killername());
    }
    if (from.has_killertype()) {
      set_killertype(from.killertype());
    }
    if (from.has_reviecdtime()) {
      set_reviecdtime(from.reviecdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcRoleDieNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcRoleDieNotify::CopyFrom(const HumanRpcRoleDieNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcRoleDieNotify::IsInitialized() const {

  return true;
}

void HumanRpcRoleDieNotify::Swap(HumanRpcRoleDieNotify* other) {
  if (other != this) {
    std::swap(killerguid_, other->killerguid_);
    std::swap(killername_, other->killername_);
    std::swap(killertype_, other->killertype_);
    std::swap(reviecdtime_, other->reviecdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcRoleDieNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcRoleDieNotify_descriptor_;
  metadata.reflection = HumanRpcRoleDieNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcChangeAnimationStateNotify::kAnimationStateFieldNumber;
#endif  // !_MSC_VER

HumanRpcChangeAnimationStateNotify::HumanRpcChangeAnimationStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcChangeAnimationStateNotify::InitAsDefaultInstance() {
}

HumanRpcChangeAnimationStateNotify::HumanRpcChangeAnimationStateNotify(const HumanRpcChangeAnimationStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcChangeAnimationStateNotify::SharedCtor() {
  _cached_size_ = 0;
  animationstate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcChangeAnimationStateNotify::~HumanRpcChangeAnimationStateNotify() {
  SharedDtor();
}

void HumanRpcChangeAnimationStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcChangeAnimationStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcChangeAnimationStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcChangeAnimationStateNotify_descriptor_;
}

const HumanRpcChangeAnimationStateNotify& HumanRpcChangeAnimationStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcChangeAnimationStateNotify* HumanRpcChangeAnimationStateNotify::default_instance_ = NULL;

HumanRpcChangeAnimationStateNotify* HumanRpcChangeAnimationStateNotify::New() const {
  return new HumanRpcChangeAnimationStateNotify;
}

void HumanRpcChangeAnimationStateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    animationstate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcChangeAnimationStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool AnimationState = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animationstate_)));
          set_has_animationstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcChangeAnimationStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool AnimationState = 1 [default = false];
  if (has_animationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->animationstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcChangeAnimationStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool AnimationState = 1 [default = false];
  if (has_animationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->animationstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcChangeAnimationStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool AnimationState = 1 [default = false];
    if (has_animationstate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcChangeAnimationStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcChangeAnimationStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcChangeAnimationStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcChangeAnimationStateNotify::MergeFrom(const HumanRpcChangeAnimationStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animationstate()) {
      set_animationstate(from.animationstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcChangeAnimationStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcChangeAnimationStateNotify::CopyFrom(const HumanRpcChangeAnimationStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcChangeAnimationStateNotify::IsInitialized() const {

  return true;
}

void HumanRpcChangeAnimationStateNotify::Swap(HumanRpcChangeAnimationStateNotify* other) {
  if (other != this) {
    std::swap(animationstate_, other->animationstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcChangeAnimationStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcChangeAnimationStateNotify_descriptor_;
  metadata.reflection = HumanRpcChangeAnimationStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HumanRpcFuncNoticeAsk::HumanRpcFuncNoticeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcFuncNoticeAsk::InitAsDefaultInstance() {
}

HumanRpcFuncNoticeAsk::HumanRpcFuncNoticeAsk(const HumanRpcFuncNoticeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcFuncNoticeAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcFuncNoticeAsk::~HumanRpcFuncNoticeAsk() {
  SharedDtor();
}

void HumanRpcFuncNoticeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcFuncNoticeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcFuncNoticeAsk_descriptor_;
}

const HumanRpcFuncNoticeAsk& HumanRpcFuncNoticeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcFuncNoticeAsk* HumanRpcFuncNoticeAsk::default_instance_ = NULL;

HumanRpcFuncNoticeAsk* HumanRpcFuncNoticeAsk::New() const {
  return new HumanRpcFuncNoticeAsk;
}

void HumanRpcFuncNoticeAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcFuncNoticeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HumanRpcFuncNoticeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcFuncNoticeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcFuncNoticeAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcFuncNoticeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcFuncNoticeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcFuncNoticeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcFuncNoticeAsk::MergeFrom(const HumanRpcFuncNoticeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcFuncNoticeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcFuncNoticeAsk::CopyFrom(const HumanRpcFuncNoticeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcFuncNoticeAsk::IsInitialized() const {

  return true;
}

void HumanRpcFuncNoticeAsk::Swap(HumanRpcFuncNoticeAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcFuncNoticeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcFuncNoticeAsk_descriptor_;
  metadata.reflection = HumanRpcFuncNoticeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcFuncNoticeReply::kResultFieldNumber;
const int HumanRpcFuncNoticeReply::kFuncIndexFieldNumber;
#endif  // !_MSC_VER

HumanRpcFuncNoticeReply::HumanRpcFuncNoticeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcFuncNoticeReply::InitAsDefaultInstance() {
}

HumanRpcFuncNoticeReply::HumanRpcFuncNoticeReply(const HumanRpcFuncNoticeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcFuncNoticeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  funcindex_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcFuncNoticeReply::~HumanRpcFuncNoticeReply() {
  SharedDtor();
}

void HumanRpcFuncNoticeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcFuncNoticeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcFuncNoticeReply_descriptor_;
}

const HumanRpcFuncNoticeReply& HumanRpcFuncNoticeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcFuncNoticeReply* HumanRpcFuncNoticeReply::default_instance_ = NULL;

HumanRpcFuncNoticeReply* HumanRpcFuncNoticeReply::New() const {
  return new HumanRpcFuncNoticeReply;
}

void HumanRpcFuncNoticeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    funcindex_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcFuncNoticeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FuncIndex;
        break;
      }

      // optional int32 FuncIndex = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FuncIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcindex_)));
          set_has_funcindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcFuncNoticeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 FuncIndex = 2 [default = -1];
  if (has_funcindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->funcindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcFuncNoticeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 FuncIndex = 2 [default = -1];
  if (has_funcindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->funcindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcFuncNoticeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 FuncIndex = 2 [default = -1];
    if (has_funcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcFuncNoticeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcFuncNoticeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcFuncNoticeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcFuncNoticeReply::MergeFrom(const HumanRpcFuncNoticeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_funcindex()) {
      set_funcindex(from.funcindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcFuncNoticeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcFuncNoticeReply::CopyFrom(const HumanRpcFuncNoticeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcFuncNoticeReply::IsInitialized() const {

  return true;
}

void HumanRpcFuncNoticeReply::Swap(HumanRpcFuncNoticeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(funcindex_, other->funcindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcFuncNoticeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcFuncNoticeReply_descriptor_;
  metadata.reflection = HumanRpcFuncNoticeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HumanRpcFuncNoticeChangeAsk::HumanRpcFuncNoticeChangeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcFuncNoticeChangeAsk::InitAsDefaultInstance() {
}

HumanRpcFuncNoticeChangeAsk::HumanRpcFuncNoticeChangeAsk(const HumanRpcFuncNoticeChangeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcFuncNoticeChangeAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcFuncNoticeChangeAsk::~HumanRpcFuncNoticeChangeAsk() {
  SharedDtor();
}

void HumanRpcFuncNoticeChangeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcFuncNoticeChangeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeChangeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcFuncNoticeChangeAsk_descriptor_;
}

const HumanRpcFuncNoticeChangeAsk& HumanRpcFuncNoticeChangeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcFuncNoticeChangeAsk* HumanRpcFuncNoticeChangeAsk::default_instance_ = NULL;

HumanRpcFuncNoticeChangeAsk* HumanRpcFuncNoticeChangeAsk::New() const {
  return new HumanRpcFuncNoticeChangeAsk;
}

void HumanRpcFuncNoticeChangeAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcFuncNoticeChangeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HumanRpcFuncNoticeChangeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcFuncNoticeChangeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcFuncNoticeChangeAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcFuncNoticeChangeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcFuncNoticeChangeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcFuncNoticeChangeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcFuncNoticeChangeAsk::MergeFrom(const HumanRpcFuncNoticeChangeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcFuncNoticeChangeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcFuncNoticeChangeAsk::CopyFrom(const HumanRpcFuncNoticeChangeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcFuncNoticeChangeAsk::IsInitialized() const {

  return true;
}

void HumanRpcFuncNoticeChangeAsk::Swap(HumanRpcFuncNoticeChangeAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcFuncNoticeChangeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcFuncNoticeChangeAsk_descriptor_;
  metadata.reflection = HumanRpcFuncNoticeChangeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcFuncNoticeChangeReply::kResultFieldNumber;
#endif  // !_MSC_VER

HumanRpcFuncNoticeChangeReply::HumanRpcFuncNoticeChangeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcFuncNoticeChangeReply::InitAsDefaultInstance() {
}

HumanRpcFuncNoticeChangeReply::HumanRpcFuncNoticeChangeReply(const HumanRpcFuncNoticeChangeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcFuncNoticeChangeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcFuncNoticeChangeReply::~HumanRpcFuncNoticeChangeReply() {
  SharedDtor();
}

void HumanRpcFuncNoticeChangeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcFuncNoticeChangeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcFuncNoticeChangeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcFuncNoticeChangeReply_descriptor_;
}

const HumanRpcFuncNoticeChangeReply& HumanRpcFuncNoticeChangeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcFuncNoticeChangeReply* HumanRpcFuncNoticeChangeReply::default_instance_ = NULL;

HumanRpcFuncNoticeChangeReply* HumanRpcFuncNoticeChangeReply::New() const {
  return new HumanRpcFuncNoticeChangeReply;
}

void HumanRpcFuncNoticeChangeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcFuncNoticeChangeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcFuncNoticeChangeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcFuncNoticeChangeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcFuncNoticeChangeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcFuncNoticeChangeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcFuncNoticeChangeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcFuncNoticeChangeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcFuncNoticeChangeReply::MergeFrom(const HumanRpcFuncNoticeChangeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcFuncNoticeChangeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcFuncNoticeChangeReply::CopyFrom(const HumanRpcFuncNoticeChangeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcFuncNoticeChangeReply::IsInitialized() const {

  return true;
}

void HumanRpcFuncNoticeChangeReply::Swap(HumanRpcFuncNoticeChangeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcFuncNoticeChangeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcFuncNoticeChangeReply_descriptor_;
  metadata.reflection = HumanRpcFuncNoticeChangeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcClientAttributesNotify::kObjIdFieldNumber;
const int HumanRpcClientAttributesNotify::kIsTouchJoyStickFieldNumber;
const int HumanRpcClientAttributesNotify::kIsHoldFieldNumber;
#endif  // !_MSC_VER

HumanRpcClientAttributesNotify::HumanRpcClientAttributesNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcClientAttributesNotify::InitAsDefaultInstance() {
}

HumanRpcClientAttributesNotify::HumanRpcClientAttributesNotify(const HumanRpcClientAttributesNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcClientAttributesNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  istouchjoystick_ = false;
  ishold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcClientAttributesNotify::~HumanRpcClientAttributesNotify() {
  SharedDtor();
}

void HumanRpcClientAttributesNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcClientAttributesNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcClientAttributesNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcClientAttributesNotify_descriptor_;
}

const HumanRpcClientAttributesNotify& HumanRpcClientAttributesNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcClientAttributesNotify* HumanRpcClientAttributesNotify::default_instance_ = NULL;

HumanRpcClientAttributesNotify* HumanRpcClientAttributesNotify::New() const {
  return new HumanRpcClientAttributesNotify;
}

void HumanRpcClientAttributesNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    istouchjoystick_ = false;
    ishold_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcClientAttributesNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsTouchJoyStick;
        break;
      }

      // optional bool IsTouchJoyStick = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsTouchJoyStick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istouchjoystick_)));
          set_has_istouchjoystick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsHold;
        break;
      }

      // optional bool IsHold = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishold_)));
          set_has_ishold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcClientAttributesNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 2 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // optional bool IsTouchJoyStick = 6 [default = false];
  if (has_istouchjoystick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->istouchjoystick(), output);
  }

  // optional bool IsHold = 7 [default = false];
  if (has_ishold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ishold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcClientAttributesNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 2 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // optional bool IsTouchJoyStick = 6 [default = false];
  if (has_istouchjoystick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->istouchjoystick(), target);
  }

  // optional bool IsHold = 7 [default = false];
  if (has_ishold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ishold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcClientAttributesNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional bool IsTouchJoyStick = 6 [default = false];
    if (has_istouchjoystick()) {
      total_size += 1 + 1;
    }

    // optional bool IsHold = 7 [default = false];
    if (has_ishold()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcClientAttributesNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcClientAttributesNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcClientAttributesNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcClientAttributesNotify::MergeFrom(const HumanRpcClientAttributesNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_istouchjoystick()) {
      set_istouchjoystick(from.istouchjoystick());
    }
    if (from.has_ishold()) {
      set_ishold(from.ishold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcClientAttributesNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcClientAttributesNotify::CopyFrom(const HumanRpcClientAttributesNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcClientAttributesNotify::IsInitialized() const {

  return true;
}

void HumanRpcClientAttributesNotify::Swap(HumanRpcClientAttributesNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(istouchjoystick_, other->istouchjoystick_);
    std::swap(ishold_, other->ishold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcClientAttributesNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcClientAttributesNotify_descriptor_;
  metadata.reflection = HumanRpcClientAttributesNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
