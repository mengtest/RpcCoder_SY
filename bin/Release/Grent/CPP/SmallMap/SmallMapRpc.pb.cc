// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmallMapRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SmallMapRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SmallMapRpcNewObjNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmallMapRpcNewObjNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmallMapRpcDelObjNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmallMapRpcDelObjNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SmallMapRpc_2eproto() {
  protobuf_AddDesc_SmallMapRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SmallMapRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SmallMapRpcNewObjNotify_descriptor_ = file->message_type(0);
  static const int SmallMapRpcNewObjNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcNewObjNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcNewObjNotify, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcNewObjNotify, worldpos_),
  };
  SmallMapRpcNewObjNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmallMapRpcNewObjNotify_descriptor_,
      SmallMapRpcNewObjNotify::default_instance_,
      SmallMapRpcNewObjNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcNewObjNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcNewObjNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmallMapRpcNewObjNotify));
  SmallMapRpcDelObjNotify_descriptor_ = file->message_type(1);
  static const int SmallMapRpcDelObjNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcDelObjNotify, objid_),
  };
  SmallMapRpcDelObjNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmallMapRpcDelObjNotify_descriptor_,
      SmallMapRpcDelObjNotify::default_instance_,
      SmallMapRpcDelObjNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcDelObjNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallMapRpcDelObjNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmallMapRpcDelObjNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SmallMapRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmallMapRpcNewObjNotify_descriptor_, &SmallMapRpcNewObjNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmallMapRpcDelObjNotify_descriptor_, &SmallMapRpcDelObjNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SmallMapRpc_2eproto() {
  delete SmallMapRpcNewObjNotify::default_instance_;
  delete SmallMapRpcNewObjNotify_reflection_;
  delete SmallMapRpcDelObjNotify::default_instance_;
  delete SmallMapRpcDelObjNotify_reflection_;
}

void protobuf_AddDesc_SmallMapRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SmallMapRpc.proto\032\022PublicStruct.proto\""
    "\\\n\027SmallMapRpcNewObjNotify\022\021\n\005ObjId\030\002 \001("
    "\005:\002-1\022\022\n\006DataId\030\003 \001(\005:\002-1\022\032\n\010WorldPos\030\004 "
    "\001(\0132\010.Vector3\",\n\027SmallMapRpcDelObjNotify"
    "\022\021\n\005ObjId\030\001 \001(\005:\002-1", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SmallMapRpc.proto", &protobuf_RegisterTypes);
  SmallMapRpcNewObjNotify::default_instance_ = new SmallMapRpcNewObjNotify();
  SmallMapRpcDelObjNotify::default_instance_ = new SmallMapRpcDelObjNotify();
  SmallMapRpcNewObjNotify::default_instance_->InitAsDefaultInstance();
  SmallMapRpcDelObjNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SmallMapRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SmallMapRpc_2eproto {
  StaticDescriptorInitializer_SmallMapRpc_2eproto() {
    protobuf_AddDesc_SmallMapRpc_2eproto();
  }
} static_descriptor_initializer_SmallMapRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SmallMapRpcNewObjNotify::kObjIdFieldNumber;
const int SmallMapRpcNewObjNotify::kDataIdFieldNumber;
const int SmallMapRpcNewObjNotify::kWorldPosFieldNumber;
#endif  // !_MSC_VER

SmallMapRpcNewObjNotify::SmallMapRpcNewObjNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmallMapRpcNewObjNotify::InitAsDefaultInstance() {
  worldpos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

SmallMapRpcNewObjNotify::SmallMapRpcNewObjNotify(const SmallMapRpcNewObjNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmallMapRpcNewObjNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  dataid_ = -1;
  worldpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmallMapRpcNewObjNotify::~SmallMapRpcNewObjNotify() {
  SharedDtor();
}

void SmallMapRpcNewObjNotify::SharedDtor() {
  if (this != default_instance_) {
    delete worldpos_;
  }
}

void SmallMapRpcNewObjNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmallMapRpcNewObjNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmallMapRpcNewObjNotify_descriptor_;
}

const SmallMapRpcNewObjNotify& SmallMapRpcNewObjNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmallMapRpc_2eproto();
  return *default_instance_;
}

SmallMapRpcNewObjNotify* SmallMapRpcNewObjNotify::default_instance_ = NULL;

SmallMapRpcNewObjNotify* SmallMapRpcNewObjNotify::New() const {
  return new SmallMapRpcNewObjNotify;
}

void SmallMapRpcNewObjNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    dataid_ = -1;
    if (has_worldpos()) {
      if (worldpos_ != NULL) worldpos_->::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmallMapRpcNewObjNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DataId;
        break;
      }

      // optional int32 DataId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_WorldPos;
        break;
      }

      // optional .Vector3 WorldPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WorldPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmallMapRpcNewObjNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 2 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // optional int32 DataId = 3 [default = -1];
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dataid(), output);
  }

  // optional .Vector3 WorldPos = 4;
  if (has_worldpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->worldpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmallMapRpcNewObjNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 2 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // optional int32 DataId = 3 [default = -1];
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dataid(), target);
  }

  // optional .Vector3 WorldPos = 4;
  if (has_worldpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->worldpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmallMapRpcNewObjNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 DataId = 3 [default = -1];
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // optional .Vector3 WorldPos = 4;
    if (has_worldpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmallMapRpcNewObjNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmallMapRpcNewObjNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmallMapRpcNewObjNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmallMapRpcNewObjNotify::MergeFrom(const SmallMapRpcNewObjNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_worldpos()) {
      mutable_worldpos()->::Vector3::MergeFrom(from.worldpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmallMapRpcNewObjNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmallMapRpcNewObjNotify::CopyFrom(const SmallMapRpcNewObjNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmallMapRpcNewObjNotify::IsInitialized() const {

  return true;
}

void SmallMapRpcNewObjNotify::Swap(SmallMapRpcNewObjNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(dataid_, other->dataid_);
    std::swap(worldpos_, other->worldpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmallMapRpcNewObjNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmallMapRpcNewObjNotify_descriptor_;
  metadata.reflection = SmallMapRpcNewObjNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmallMapRpcDelObjNotify::kObjIdFieldNumber;
#endif  // !_MSC_VER

SmallMapRpcDelObjNotify::SmallMapRpcDelObjNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmallMapRpcDelObjNotify::InitAsDefaultInstance() {
}

SmallMapRpcDelObjNotify::SmallMapRpcDelObjNotify(const SmallMapRpcDelObjNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmallMapRpcDelObjNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmallMapRpcDelObjNotify::~SmallMapRpcDelObjNotify() {
  SharedDtor();
}

void SmallMapRpcDelObjNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmallMapRpcDelObjNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmallMapRpcDelObjNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmallMapRpcDelObjNotify_descriptor_;
}

const SmallMapRpcDelObjNotify& SmallMapRpcDelObjNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmallMapRpc_2eproto();
  return *default_instance_;
}

SmallMapRpcDelObjNotify* SmallMapRpcDelObjNotify::default_instance_ = NULL;

SmallMapRpcDelObjNotify* SmallMapRpcDelObjNotify::New() const {
  return new SmallMapRpcDelObjNotify;
}

void SmallMapRpcDelObjNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmallMapRpcDelObjNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmallMapRpcDelObjNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmallMapRpcDelObjNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmallMapRpcDelObjNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmallMapRpcDelObjNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmallMapRpcDelObjNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmallMapRpcDelObjNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmallMapRpcDelObjNotify::MergeFrom(const SmallMapRpcDelObjNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmallMapRpcDelObjNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmallMapRpcDelObjNotify::CopyFrom(const SmallMapRpcDelObjNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmallMapRpcDelObjNotify::IsInitialized() const {

  return true;
}

void SmallMapRpcDelObjNotify::Swap(SmallMapRpcDelObjNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmallMapRpcDelObjNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmallMapRpcDelObjNotify_descriptor_;
  metadata.reflection = SmallMapRpcDelObjNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
