// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldServerRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldServerRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcEnterSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcEnterSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcLoginGameServerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcLoginGameServerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcLogoutGameServerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcLogoutGameServerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcUpdateRoleInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcUpdateRoleInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcUpdateRoleInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcUpdateRoleInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcCreateDungeonNotifyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcCreateDungeonNotifyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcCreateDungeonNotifyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcCreateDungeonNotifyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcExitDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcExitDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcExitDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcExitDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcUpdateTeamInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcUpdateTeamInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcUpdateTeamInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcUpdateTeamInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcPlayCgTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcPlayCgTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcPlayCgTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcPlayCgTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcSendMailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcSendMailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcSendMailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcSendMailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcChangeTeamTypeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcChangeTeamTypeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcChangeTeamTypeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcChangeTeamTypeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcAutoMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcAutoMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcAutoMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcAutoMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcCancelMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcCancelMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcCancelMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcCancelMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcLoginGameServerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcLoginGameServerReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcLogoutGameServerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcLogoutGameServerReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcGetPlayerInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcGetPlayerInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcGetPlayerInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcGetPlayerInfoReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldServerRpc_2eproto() {
  protobuf_AddDesc_WorldServerRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldServerRpc.proto");
  GOOGLE_CHECK(file != NULL);
  WorldServerRpcEnterSceneAsk_descriptor_ = file->message_type(0);
  static const int WorldServerRpcEnterSceneAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, location_),
  };
  WorldServerRpcEnterSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcEnterSceneAsk_descriptor_,
      WorldServerRpcEnterSceneAsk::default_instance_,
      WorldServerRpcEnterSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcEnterSceneAsk));
  WorldServerRpcEnterSceneReply_descriptor_ = file->message_type(1);
  static const int WorldServerRpcEnterSceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, result_),
  };
  WorldServerRpcEnterSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcEnterSceneReply_descriptor_,
      WorldServerRpcEnterSceneReply::default_instance_,
      WorldServerRpcEnterSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcEnterSceneReply));
  WorldServerRpcLoginGameServerAsk_descriptor_ = file->message_type(2);
  static const int WorldServerRpcLoginGameServerAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerAsk, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerAsk, roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerAsk, location_),
  };
  WorldServerRpcLoginGameServerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcLoginGameServerAsk_descriptor_,
      WorldServerRpcLoginGameServerAsk::default_instance_,
      WorldServerRpcLoginGameServerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcLoginGameServerAsk));
  WorldServerRpcLogoutGameServerAsk_descriptor_ = file->message_type(3);
  static const int WorldServerRpcLogoutGameServerAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerAsk, roleinfo_),
  };
  WorldServerRpcLogoutGameServerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcLogoutGameServerAsk_descriptor_,
      WorldServerRpcLogoutGameServerAsk::default_instance_,
      WorldServerRpcLogoutGameServerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcLogoutGameServerAsk));
  WorldServerRpcUpdateRoleInfoAsk_descriptor_ = file->message_type(4);
  static const int WorldServerRpcUpdateRoleInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoAsk, roleinfo_),
  };
  WorldServerRpcUpdateRoleInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcUpdateRoleInfoAsk_descriptor_,
      WorldServerRpcUpdateRoleInfoAsk::default_instance_,
      WorldServerRpcUpdateRoleInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcUpdateRoleInfoAsk));
  WorldServerRpcUpdateRoleInfoReply_descriptor_ = file->message_type(5);
  static const int WorldServerRpcUpdateRoleInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoReply, result_),
  };
  WorldServerRpcUpdateRoleInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcUpdateRoleInfoReply_descriptor_,
      WorldServerRpcUpdateRoleInfoReply::default_instance_,
      WorldServerRpcUpdateRoleInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateRoleInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcUpdateRoleInfoReply));
  WorldServerRpcCreateDungeonNotifyAsk_descriptor_ = file->message_type(6);
  static const int WorldServerRpcCreateDungeonNotifyAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyAsk, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyAsk, targetsceneid_),
  };
  WorldServerRpcCreateDungeonNotifyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcCreateDungeonNotifyAsk_descriptor_,
      WorldServerRpcCreateDungeonNotifyAsk::default_instance_,
      WorldServerRpcCreateDungeonNotifyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcCreateDungeonNotifyAsk));
  WorldServerRpcCreateDungeonNotifyReply_descriptor_ = file->message_type(7);
  static const int WorldServerRpcCreateDungeonNotifyReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyReply, result_),
  };
  WorldServerRpcCreateDungeonNotifyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcCreateDungeonNotifyReply_descriptor_,
      WorldServerRpcCreateDungeonNotifyReply::default_instance_,
      WorldServerRpcCreateDungeonNotifyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCreateDungeonNotifyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcCreateDungeonNotifyReply));
  WorldServerRpcExitDungeonAsk_descriptor_ = file->message_type(8);
  static const int WorldServerRpcExitDungeonAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonAsk, roleid_),
  };
  WorldServerRpcExitDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcExitDungeonAsk_descriptor_,
      WorldServerRpcExitDungeonAsk::default_instance_,
      WorldServerRpcExitDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcExitDungeonAsk));
  WorldServerRpcExitDungeonReply_descriptor_ = file->message_type(9);
  static const int WorldServerRpcExitDungeonReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonReply, result_),
  };
  WorldServerRpcExitDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcExitDungeonReply_descriptor_,
      WorldServerRpcExitDungeonReply::default_instance_,
      WorldServerRpcExitDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcExitDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcExitDungeonReply));
  WorldServerRpcUpdateTeamInfoAsk_descriptor_ = file->message_type(10);
  static const int WorldServerRpcUpdateTeamInfoAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, teamtype_),
  };
  WorldServerRpcUpdateTeamInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcUpdateTeamInfoAsk_descriptor_,
      WorldServerRpcUpdateTeamInfoAsk::default_instance_,
      WorldServerRpcUpdateTeamInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcUpdateTeamInfoAsk));
  WorldServerRpcUpdateTeamInfoReply_descriptor_ = file->message_type(11);
  static const int WorldServerRpcUpdateTeamInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoReply, result_),
  };
  WorldServerRpcUpdateTeamInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcUpdateTeamInfoReply_descriptor_,
      WorldServerRpcUpdateTeamInfoReply::default_instance_,
      WorldServerRpcUpdateTeamInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcUpdateTeamInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcUpdateTeamInfoReply));
  WorldServerRpcPlayCgTeamAsk_descriptor_ = file->message_type(12);
  static const int WorldServerRpcPlayCgTeamAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, playroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, cgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, roleid_),
  };
  WorldServerRpcPlayCgTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcPlayCgTeamAsk_descriptor_,
      WorldServerRpcPlayCgTeamAsk::default_instance_,
      WorldServerRpcPlayCgTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcPlayCgTeamAsk));
  WorldServerRpcPlayCgTeamReply_descriptor_ = file->message_type(13);
  static const int WorldServerRpcPlayCgTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamReply, result_),
  };
  WorldServerRpcPlayCgTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcPlayCgTeamReply_descriptor_,
      WorldServerRpcPlayCgTeamReply::default_instance_,
      WorldServerRpcPlayCgTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcPlayCgTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcPlayCgTeamReply));
  WorldServerRpcSendMailAsk_descriptor_ = file->message_type(14);
  static const int WorldServerRpcSendMailAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailAsk, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailAsk, globalmailid_),
  };
  WorldServerRpcSendMailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcSendMailAsk_descriptor_,
      WorldServerRpcSendMailAsk::default_instance_,
      WorldServerRpcSendMailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcSendMailAsk));
  WorldServerRpcSendMailReply_descriptor_ = file->message_type(15);
  static const int WorldServerRpcSendMailReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailReply, result_),
  };
  WorldServerRpcSendMailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcSendMailReply_descriptor_,
      WorldServerRpcSendMailReply::default_instance_,
      WorldServerRpcSendMailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcSendMailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcSendMailReply));
  WorldServerRpcChangeTeamTypeAsk_descriptor_ = file->message_type(16);
  static const int WorldServerRpcChangeTeamTypeAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, target_),
  };
  WorldServerRpcChangeTeamTypeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcChangeTeamTypeAsk_descriptor_,
      WorldServerRpcChangeTeamTypeAsk::default_instance_,
      WorldServerRpcChangeTeamTypeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcChangeTeamTypeAsk));
  WorldServerRpcChangeTeamTypeReply_descriptor_ = file->message_type(17);
  static const int WorldServerRpcChangeTeamTypeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeReply, result_),
  };
  WorldServerRpcChangeTeamTypeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcChangeTeamTypeReply_descriptor_,
      WorldServerRpcChangeTeamTypeReply::default_instance_,
      WorldServerRpcChangeTeamTypeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeTeamTypeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcChangeTeamTypeReply));
  WorldServerRpcAutoMatchAsk_descriptor_ = file->message_type(18);
  static const int WorldServerRpcAutoMatchAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchAsk, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchAsk, matchinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchAsk, result_),
  };
  WorldServerRpcAutoMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcAutoMatchAsk_descriptor_,
      WorldServerRpcAutoMatchAsk::default_instance_,
      WorldServerRpcAutoMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcAutoMatchAsk));
  WorldServerRpcAutoMatchReply_descriptor_ = file->message_type(19);
  static const int WorldServerRpcAutoMatchReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchReply, result_),
  };
  WorldServerRpcAutoMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcAutoMatchReply_descriptor_,
      WorldServerRpcAutoMatchReply::default_instance_,
      WorldServerRpcAutoMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcAutoMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcAutoMatchReply));
  WorldServerRpcCancelMatchAsk_descriptor_ = file->message_type(20);
  static const int WorldServerRpcCancelMatchAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchAsk, isnotify_),
  };
  WorldServerRpcCancelMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcCancelMatchAsk_descriptor_,
      WorldServerRpcCancelMatchAsk::default_instance_,
      WorldServerRpcCancelMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcCancelMatchAsk));
  WorldServerRpcCancelMatchReply_descriptor_ = file->message_type(21);
  static const int WorldServerRpcCancelMatchReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchReply, result_),
  };
  WorldServerRpcCancelMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcCancelMatchReply_descriptor_,
      WorldServerRpcCancelMatchReply::default_instance_,
      WorldServerRpcCancelMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcCancelMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcCancelMatchReply));
  WorldServerRpcLoginGameServerReply_descriptor_ = file->message_type(22);
  static const int WorldServerRpcLoginGameServerReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, location_),
  };
  WorldServerRpcLoginGameServerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcLoginGameServerReply_descriptor_,
      WorldServerRpcLoginGameServerReply::default_instance_,
      WorldServerRpcLoginGameServerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLoginGameServerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcLoginGameServerReply));
  WorldServerRpcLogoutGameServerReply_descriptor_ = file->message_type(23);
  static const int WorldServerRpcLogoutGameServerReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerReply, result_),
  };
  WorldServerRpcLogoutGameServerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcLogoutGameServerReply_descriptor_,
      WorldServerRpcLogoutGameServerReply::default_instance_,
      WorldServerRpcLogoutGameServerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcLogoutGameServerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcLogoutGameServerReply));
  WorldServerRpcGetPlayerInfoAsk_descriptor_ = file->message_type(24);
  static const int WorldServerRpcGetPlayerInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoAsk, player_guid_),
  };
  WorldServerRpcGetPlayerInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcGetPlayerInfoAsk_descriptor_,
      WorldServerRpcGetPlayerInfoAsk::default_instance_,
      WorldServerRpcGetPlayerInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcGetPlayerInfoAsk));
  WorldServerRpcGetPlayerInfoReply_descriptor_ = file->message_type(25);
  static const int WorldServerRpcGetPlayerInfoReply_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, avatar_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, suit_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, equipslotdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, equipslotstarlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, jewelinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, pet_item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, treasurehair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, treasurehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, treasurebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, treasureweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, treasurewing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, teamid_),
  };
  WorldServerRpcGetPlayerInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcGetPlayerInfoReply_descriptor_,
      WorldServerRpcGetPlayerInfoReply::default_instance_,
      WorldServerRpcGetPlayerInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcGetPlayerInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcGetPlayerInfoReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldServerRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcEnterSceneAsk_descriptor_, &WorldServerRpcEnterSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcEnterSceneReply_descriptor_, &WorldServerRpcEnterSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcLoginGameServerAsk_descriptor_, &WorldServerRpcLoginGameServerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcLogoutGameServerAsk_descriptor_, &WorldServerRpcLogoutGameServerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcUpdateRoleInfoAsk_descriptor_, &WorldServerRpcUpdateRoleInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcUpdateRoleInfoReply_descriptor_, &WorldServerRpcUpdateRoleInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcCreateDungeonNotifyAsk_descriptor_, &WorldServerRpcCreateDungeonNotifyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcCreateDungeonNotifyReply_descriptor_, &WorldServerRpcCreateDungeonNotifyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcExitDungeonAsk_descriptor_, &WorldServerRpcExitDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcExitDungeonReply_descriptor_, &WorldServerRpcExitDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcUpdateTeamInfoAsk_descriptor_, &WorldServerRpcUpdateTeamInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcUpdateTeamInfoReply_descriptor_, &WorldServerRpcUpdateTeamInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcPlayCgTeamAsk_descriptor_, &WorldServerRpcPlayCgTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcPlayCgTeamReply_descriptor_, &WorldServerRpcPlayCgTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcSendMailAsk_descriptor_, &WorldServerRpcSendMailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcSendMailReply_descriptor_, &WorldServerRpcSendMailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcChangeTeamTypeAsk_descriptor_, &WorldServerRpcChangeTeamTypeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcChangeTeamTypeReply_descriptor_, &WorldServerRpcChangeTeamTypeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcAutoMatchAsk_descriptor_, &WorldServerRpcAutoMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcAutoMatchReply_descriptor_, &WorldServerRpcAutoMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcCancelMatchAsk_descriptor_, &WorldServerRpcCancelMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcCancelMatchReply_descriptor_, &WorldServerRpcCancelMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcLoginGameServerReply_descriptor_, &WorldServerRpcLoginGameServerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcLogoutGameServerReply_descriptor_, &WorldServerRpcLogoutGameServerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcGetPlayerInfoAsk_descriptor_, &WorldServerRpcGetPlayerInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcGetPlayerInfoReply_descriptor_, &WorldServerRpcGetPlayerInfoReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldServerRpc_2eproto() {
  delete WorldServerRpcEnterSceneAsk::default_instance_;
  delete WorldServerRpcEnterSceneAsk_reflection_;
  delete WorldServerRpcEnterSceneReply::default_instance_;
  delete WorldServerRpcEnterSceneReply_reflection_;
  delete WorldServerRpcLoginGameServerAsk::default_instance_;
  delete WorldServerRpcLoginGameServerAsk_reflection_;
  delete WorldServerRpcLogoutGameServerAsk::default_instance_;
  delete WorldServerRpcLogoutGameServerAsk_reflection_;
  delete WorldServerRpcUpdateRoleInfoAsk::default_instance_;
  delete WorldServerRpcUpdateRoleInfoAsk_reflection_;
  delete WorldServerRpcUpdateRoleInfoReply::default_instance_;
  delete WorldServerRpcUpdateRoleInfoReply_reflection_;
  delete WorldServerRpcCreateDungeonNotifyAsk::default_instance_;
  delete WorldServerRpcCreateDungeonNotifyAsk_reflection_;
  delete WorldServerRpcCreateDungeonNotifyReply::default_instance_;
  delete WorldServerRpcCreateDungeonNotifyReply_reflection_;
  delete WorldServerRpcExitDungeonAsk::default_instance_;
  delete WorldServerRpcExitDungeonAsk_reflection_;
  delete WorldServerRpcExitDungeonReply::default_instance_;
  delete WorldServerRpcExitDungeonReply_reflection_;
  delete WorldServerRpcUpdateTeamInfoAsk::default_instance_;
  delete WorldServerRpcUpdateTeamInfoAsk_reflection_;
  delete WorldServerRpcUpdateTeamInfoReply::default_instance_;
  delete WorldServerRpcUpdateTeamInfoReply_reflection_;
  delete WorldServerRpcPlayCgTeamAsk::default_instance_;
  delete WorldServerRpcPlayCgTeamAsk_reflection_;
  delete WorldServerRpcPlayCgTeamReply::default_instance_;
  delete WorldServerRpcPlayCgTeamReply_reflection_;
  delete WorldServerRpcSendMailAsk::default_instance_;
  delete WorldServerRpcSendMailAsk_reflection_;
  delete WorldServerRpcSendMailReply::default_instance_;
  delete WorldServerRpcSendMailReply_reflection_;
  delete WorldServerRpcChangeTeamTypeAsk::default_instance_;
  delete WorldServerRpcChangeTeamTypeAsk_reflection_;
  delete WorldServerRpcChangeTeamTypeReply::default_instance_;
  delete WorldServerRpcChangeTeamTypeReply_reflection_;
  delete WorldServerRpcAutoMatchAsk::default_instance_;
  delete WorldServerRpcAutoMatchAsk_reflection_;
  delete WorldServerRpcAutoMatchReply::default_instance_;
  delete WorldServerRpcAutoMatchReply_reflection_;
  delete WorldServerRpcCancelMatchAsk::default_instance_;
  delete WorldServerRpcCancelMatchAsk_reflection_;
  delete WorldServerRpcCancelMatchReply::default_instance_;
  delete WorldServerRpcCancelMatchReply_reflection_;
  delete WorldServerRpcLoginGameServerReply::default_instance_;
  delete WorldServerRpcLoginGameServerReply_reflection_;
  delete WorldServerRpcLogoutGameServerReply::default_instance_;
  delete WorldServerRpcLogoutGameServerReply_reflection_;
  delete WorldServerRpcGetPlayerInfoAsk::default_instance_;
  delete WorldServerRpcGetPlayerInfoAsk_reflection_;
  delete WorldServerRpcGetPlayerInfoReply::default_instance_;
  delete WorldServerRpcGetPlayerInfoReply_reflection_;
}

void protobuf_AddDesc_WorldServerRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WorldServerRpc.proto\032\022PublicStruct.pro"
    "to\"V\n\033WorldServerRpcEnterSceneAsk\022\021\n\006Rol"
    "eId\030\001 \001(\004:\0010\022$\n\010Location\030\006 \001(\0132\022.Charact"
    "erLocation\"6\n\035WorldServerRpcEnterSceneRe"
    "ply\022\025\n\006Result\030\001 \001(\005:\005-9999\"\204\001\n WorldServ"
    "erRpcLoginGameServerAsk\022\027\n\004Team\030\001 \001(\0132\t."
    "TeamInfo\022!\n\010RoleInfo\030\004 \001(\0132\017.OnlineUserI"
    "nfo\022$\n\010Location\030\005 \001(\0132\022.CharacterLocatio"
    "n\"]\n!WorldServerRpcLogoutGameServerAsk\022\025"
    "\n\006Result\030\001 \001(\005:\005-9999\022!\n\010RoleInfo\030\002 \001(\0132"
    "\017.OnlineUserInfo\"D\n\037WorldServerRpcUpdate"
    "RoleInfoAsk\022!\n\010RoleInfo\030\001 \001(\0132\017.OnlineUs"
    "erInfo\":\n!WorldServerRpcUpdateRoleInfoRe"
    "ply\022\025\n\006Result\030\001 \001(\005:\005-9999\"l\n$WorldServe"
    "rRpcCreateDungeonNotifyAsk\022\026\n\nCurSceneId"
    "\030\001 \001(\005:\002-1\022\021\n\006RoleId\030\002 \001(\004:\0010\022\031\n\rTargetS"
    "ceneId\030\005 \001(\005:\002-1\"\?\n&WorldServerRpcCreate"
    "DungeonNotifyReply\022\025\n\006Result\030\001 \001(\005:\005-999"
    "9\"1\n\034WorldServerRpcExitDungeonAsk\022\021\n\006Rol"
    "eId\030\001 \001(\004:\0010\"7\n\036WorldServerRpcExitDungeo"
    "nReply\022\025\n\006Result\030\001 \001(\005:\005-9999\"\210\001\n\037WorldS"
    "erverRpcUpdateTeamInfoAsk\022#\n\nTeamMember\030"
    "\001 \001(\0132\017.TeamMemberInfo\022\021\n\006RoleId\030\002 \001(\004:\001"
    "0\022\027\n\004Team\030\004 \001(\0132\t.TeamInfo\022\024\n\010TeamType\030\005"
    " \001(\005:\002-1\":\n!WorldServerRpcUpdateTeamInfo"
    "Reply\022\025\n\006Result\030\001 \001(\005:\005-9999\"l\n\033WorldSer"
    "verRpcPlayCgTeamAsk\022\025\n\nPlayRoleId\030\001 \001(\004:"
    "\0010\022\020\n\004CgId\030\002 \001(\005:\002-1\022\021\n\005State\030\003 \001(\005:\002-1\022"
    "\021\n\006RoleId\030\004 \001(\004:\0010\"3\n\035WorldServerRpcPlay"
    "CgTeamReply\022\022\n\006Result\030\001 \001(\005:\002-1\"M\n\031World"
    "ServerRpcSendMailAsk\022\027\n\004Mail\030\001 \001(\0132\t.Mai"
    "lInfo\022\027\n\014GlobalMailID\030\002 \001(\004:\0010\"1\n\033WorldS"
    "erverRpcSendMailReply\022\022\n\006Result\030\001 \001(\005:\002-"
    "1\"\216\001\n\037WorldServerRpcChangeTeamTypeAsk\022\021\n"
    "\006TeamId\030\001 \001(\004:\0010\022\021\n\006RoleId\030\002 \001(\004:\0010\022\022\n\006R"
    "esult\030\003 \001(\005:\002-1\022\024\n\010TeamType\030\004 \001(\005:\002-1\022\033\n"
    "\006Target\030\005 \001(\0132\013.TeamTarget\"7\n!WorldServe"
    "rRpcChangeTeamTypeReply\022\022\n\006Result\030\001 \001(\005:"
    "\002-1\"z\n\032WorldServerRpcAutoMatchAsk\022#\n\nMem"
    "berInfo\030\001 \001(\0132\017.TeamMemberInfo\022#\n\tMatchI"
    "nfo\030\003 \001(\0132\020.PlayerMatchData\022\022\n\006Result\030\004 "
    "\001(\005:\002-1\"2\n\034WorldServerRpcAutoMatchReply\022"
    "\022\n\006Result\030\001 \001(\005:\002-1\"Z\n\034WorldServerRpcCan"
    "celMatchAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\022\022\n\006Result"
    "\030\002 \001(\005:\002-1\022\023\n\010IsNotify\030\003 \001(\005:\0010\"4\n\036World"
    "ServerRpcCancelMatchReply\022\022\n\006Result\030\001 \001("
    "\005:\002-1\"\232\001\n\"WorldServerRpcLoginGameServerR"
    "eply\022\022\n\006Result\030\001 \001(\005:\002-1\022\027\n\004Team\030\002 \001(\0132\t"
    ".TeamInfo\022!\n\010RoleInfo\030\003 \001(\0132\017.OnlineUser"
    "Info\022$\n\010Location\030\004 \001(\0132\022.CharacterLocati"
    "on\"9\n#WorldServerRpcLogoutGameServerRepl"
    "y\022\022\n\006Result\030\001 \001(\005:\002-1\"8\n\036WorldServerRpcG"
    "etPlayerInfoAsk\022\026\n\013Player_guid\030\001 \001(\004:\0010\""
    "\367\004\n WorldServerRpcGetPlayerInfoReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\023\n\013Player_name\030\002 \001(\t\022\026\n"
    "\013Player_guid\030\003 \001(\004:\0010\022\025\n\tAvatar_id\030\004 \001(\005"
    ":\002-1\022\030\n\014Player_level\030\005 \001(\005:\002-1\022\033\n\017Avatar"
    "_frame_id\030\006 \001(\005:\002-1\022\025\n\tConfig_id\030\007 \001(\005:\002"
    "-1\022\023\n\010Guild_id\030\010 \001(\004:\0010\022\022\n\nGuild_name\030\t "
    "\001(\t\022\035\n\nEquip_data\030\n \003(\0132\t.ItemData\022\035\n\nSu"
    "it_infos\030\013 \003(\0132\t.SuitInfo\022%\n\rEquipSlotDa"
    "ta\030\014 \003(\0132\016.EquipSlotInfo\022-\n\021EquipSlotSta"
    "rList\030\r \003(\0132\022.EquipSlotStarInfo\022\036\n\nJewel"
    "Infos\030\016 \003(\0132\n.JewelInfo\022\027\n\013BattleScore\030\020"
    " \001(\005:\002-1\022 \n\rPet_item_data\030\022 \001(\0132\t.ItemDa"
    "ta\022\030\n\014TreasureHair\030\023 \001(\005:\002-1\022\030\n\014Treasure"
    "Head\030\024 \001(\005:\002-1\022\030\n\014TreasureBody\030\025 \001(\005:\002-1"
    "\022\032\n\016TreasureWeapon\030\026 \001(\005:\002-1\022\030\n\014Treasure"
    "Wing\030\027 \001(\005:\002-1\022\021\n\006TeamId\030\030 \001(\004:\0010", 2753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldServerRpc.proto", &protobuf_RegisterTypes);
  WorldServerRpcEnterSceneAsk::default_instance_ = new WorldServerRpcEnterSceneAsk();
  WorldServerRpcEnterSceneReply::default_instance_ = new WorldServerRpcEnterSceneReply();
  WorldServerRpcLoginGameServerAsk::default_instance_ = new WorldServerRpcLoginGameServerAsk();
  WorldServerRpcLogoutGameServerAsk::default_instance_ = new WorldServerRpcLogoutGameServerAsk();
  WorldServerRpcUpdateRoleInfoAsk::default_instance_ = new WorldServerRpcUpdateRoleInfoAsk();
  WorldServerRpcUpdateRoleInfoReply::default_instance_ = new WorldServerRpcUpdateRoleInfoReply();
  WorldServerRpcCreateDungeonNotifyAsk::default_instance_ = new WorldServerRpcCreateDungeonNotifyAsk();
  WorldServerRpcCreateDungeonNotifyReply::default_instance_ = new WorldServerRpcCreateDungeonNotifyReply();
  WorldServerRpcExitDungeonAsk::default_instance_ = new WorldServerRpcExitDungeonAsk();
  WorldServerRpcExitDungeonReply::default_instance_ = new WorldServerRpcExitDungeonReply();
  WorldServerRpcUpdateTeamInfoAsk::default_instance_ = new WorldServerRpcUpdateTeamInfoAsk();
  WorldServerRpcUpdateTeamInfoReply::default_instance_ = new WorldServerRpcUpdateTeamInfoReply();
  WorldServerRpcPlayCgTeamAsk::default_instance_ = new WorldServerRpcPlayCgTeamAsk();
  WorldServerRpcPlayCgTeamReply::default_instance_ = new WorldServerRpcPlayCgTeamReply();
  WorldServerRpcSendMailAsk::default_instance_ = new WorldServerRpcSendMailAsk();
  WorldServerRpcSendMailReply::default_instance_ = new WorldServerRpcSendMailReply();
  WorldServerRpcChangeTeamTypeAsk::default_instance_ = new WorldServerRpcChangeTeamTypeAsk();
  WorldServerRpcChangeTeamTypeReply::default_instance_ = new WorldServerRpcChangeTeamTypeReply();
  WorldServerRpcAutoMatchAsk::default_instance_ = new WorldServerRpcAutoMatchAsk();
  WorldServerRpcAutoMatchReply::default_instance_ = new WorldServerRpcAutoMatchReply();
  WorldServerRpcCancelMatchAsk::default_instance_ = new WorldServerRpcCancelMatchAsk();
  WorldServerRpcCancelMatchReply::default_instance_ = new WorldServerRpcCancelMatchReply();
  WorldServerRpcLoginGameServerReply::default_instance_ = new WorldServerRpcLoginGameServerReply();
  WorldServerRpcLogoutGameServerReply::default_instance_ = new WorldServerRpcLogoutGameServerReply();
  WorldServerRpcGetPlayerInfoAsk::default_instance_ = new WorldServerRpcGetPlayerInfoAsk();
  WorldServerRpcGetPlayerInfoReply::default_instance_ = new WorldServerRpcGetPlayerInfoReply();
  WorldServerRpcEnterSceneAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcEnterSceneReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcLoginGameServerAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcLogoutGameServerAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcUpdateRoleInfoAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcUpdateRoleInfoReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcCreateDungeonNotifyAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcCreateDungeonNotifyReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcExitDungeonAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcExitDungeonReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcUpdateTeamInfoAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcUpdateTeamInfoReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcPlayCgTeamAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcPlayCgTeamReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcSendMailAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcSendMailReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcChangeTeamTypeAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcChangeTeamTypeReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcAutoMatchAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcAutoMatchReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcCancelMatchAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcCancelMatchReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcLoginGameServerReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcLogoutGameServerReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcGetPlayerInfoAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcGetPlayerInfoReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldServerRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldServerRpc_2eproto {
  StaticDescriptorInitializer_WorldServerRpc_2eproto() {
    protobuf_AddDesc_WorldServerRpc_2eproto();
  }
} static_descriptor_initializer_WorldServerRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcEnterSceneAsk::kRoleIdFieldNumber;
const int WorldServerRpcEnterSceneAsk::kLocationFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcEnterSceneAsk::WorldServerRpcEnterSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcEnterSceneAsk::InitAsDefaultInstance() {
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
}

WorldServerRpcEnterSceneAsk::WorldServerRpcEnterSceneAsk(const WorldServerRpcEnterSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcEnterSceneAsk::~WorldServerRpcEnterSceneAsk() {
  SharedDtor();
}

void WorldServerRpcEnterSceneAsk::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void WorldServerRpcEnterSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcEnterSceneAsk_descriptor_;
}

const WorldServerRpcEnterSceneAsk& WorldServerRpcEnterSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcEnterSceneAsk* WorldServerRpcEnterSceneAsk::default_instance_ = NULL;

WorldServerRpcEnterSceneAsk* WorldServerRpcEnterSceneAsk::New() const {
  return new WorldServerRpcEnterSceneAsk;
}

void WorldServerRpcEnterSceneAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcEnterSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Location;
        break;
      }

      // optional .CharacterLocation Location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcEnterSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional .CharacterLocation Location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcEnterSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional .CharacterLocation Location = 6;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcEnterSceneAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional .CharacterLocation Location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcEnterSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcEnterSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcEnterSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcEnterSceneAsk::MergeFrom(const WorldServerRpcEnterSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcEnterSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneAsk::CopyFrom(const WorldServerRpcEnterSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcEnterSceneAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcEnterSceneAsk::Swap(WorldServerRpcEnterSceneAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcEnterSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcEnterSceneAsk_descriptor_;
  metadata.reflection = WorldServerRpcEnterSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcEnterSceneReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcEnterSceneReply::WorldServerRpcEnterSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcEnterSceneReply::InitAsDefaultInstance() {
}

WorldServerRpcEnterSceneReply::WorldServerRpcEnterSceneReply(const WorldServerRpcEnterSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcEnterSceneReply::~WorldServerRpcEnterSceneReply() {
  SharedDtor();
}

void WorldServerRpcEnterSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcEnterSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcEnterSceneReply_descriptor_;
}

const WorldServerRpcEnterSceneReply& WorldServerRpcEnterSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcEnterSceneReply* WorldServerRpcEnterSceneReply::default_instance_ = NULL;

WorldServerRpcEnterSceneReply* WorldServerRpcEnterSceneReply::New() const {
  return new WorldServerRpcEnterSceneReply;
}

void WorldServerRpcEnterSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcEnterSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcEnterSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcEnterSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcEnterSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcEnterSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcEnterSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcEnterSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcEnterSceneReply::MergeFrom(const WorldServerRpcEnterSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcEnterSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneReply::CopyFrom(const WorldServerRpcEnterSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcEnterSceneReply::IsInitialized() const {

  return true;
}

void WorldServerRpcEnterSceneReply::Swap(WorldServerRpcEnterSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcEnterSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcEnterSceneReply_descriptor_;
  metadata.reflection = WorldServerRpcEnterSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcLoginGameServerAsk::kTeamFieldNumber;
const int WorldServerRpcLoginGameServerAsk::kRoleInfoFieldNumber;
const int WorldServerRpcLoginGameServerAsk::kLocationFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcLoginGameServerAsk::WorldServerRpcLoginGameServerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcLoginGameServerAsk::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
  roleinfo_ = const_cast< ::OnlineUserInfo*>(&::OnlineUserInfo::default_instance());
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
}

WorldServerRpcLoginGameServerAsk::WorldServerRpcLoginGameServerAsk(const WorldServerRpcLoginGameServerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcLoginGameServerAsk::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  roleinfo_ = NULL;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcLoginGameServerAsk::~WorldServerRpcLoginGameServerAsk() {
  SharedDtor();
}

void WorldServerRpcLoginGameServerAsk::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
    delete roleinfo_;
    delete location_;
  }
}

void WorldServerRpcLoginGameServerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcLoginGameServerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcLoginGameServerAsk_descriptor_;
}

const WorldServerRpcLoginGameServerAsk& WorldServerRpcLoginGameServerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcLoginGameServerAsk* WorldServerRpcLoginGameServerAsk::default_instance_ = NULL;

WorldServerRpcLoginGameServerAsk* WorldServerRpcLoginGameServerAsk::New() const {
  return new WorldServerRpcLoginGameServerAsk;
}

void WorldServerRpcLoginGameServerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::OnlineUserInfo::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcLoginGameServerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleInfo;
        break;
      }

      // optional .OnlineUserInfo RoleInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Location;
        break;
      }

      // optional .CharacterLocation Location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcLoginGameServerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  // optional .OnlineUserInfo RoleInfo = 4;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roleinfo(), output);
  }

  // optional .CharacterLocation Location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcLoginGameServerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  // optional .OnlineUserInfo RoleInfo = 4;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roleinfo(), target);
  }

  // optional .CharacterLocation Location = 5;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcLoginGameServerAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional .OnlineUserInfo RoleInfo = 4;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

    // optional .CharacterLocation Location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcLoginGameServerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcLoginGameServerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcLoginGameServerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcLoginGameServerAsk::MergeFrom(const WorldServerRpcLoginGameServerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::OnlineUserInfo::MergeFrom(from.roleinfo());
    }
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcLoginGameServerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcLoginGameServerAsk::CopyFrom(const WorldServerRpcLoginGameServerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcLoginGameServerAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcLoginGameServerAsk::Swap(WorldServerRpcLoginGameServerAsk* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcLoginGameServerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcLoginGameServerAsk_descriptor_;
  metadata.reflection = WorldServerRpcLoginGameServerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcLogoutGameServerAsk::kResultFieldNumber;
const int WorldServerRpcLogoutGameServerAsk::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcLogoutGameServerAsk::WorldServerRpcLogoutGameServerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcLogoutGameServerAsk::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::OnlineUserInfo*>(&::OnlineUserInfo::default_instance());
}

WorldServerRpcLogoutGameServerAsk::WorldServerRpcLogoutGameServerAsk(const WorldServerRpcLogoutGameServerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcLogoutGameServerAsk::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcLogoutGameServerAsk::~WorldServerRpcLogoutGameServerAsk() {
  SharedDtor();
}

void WorldServerRpcLogoutGameServerAsk::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void WorldServerRpcLogoutGameServerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcLogoutGameServerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcLogoutGameServerAsk_descriptor_;
}

const WorldServerRpcLogoutGameServerAsk& WorldServerRpcLogoutGameServerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcLogoutGameServerAsk* WorldServerRpcLogoutGameServerAsk::default_instance_ = NULL;

WorldServerRpcLogoutGameServerAsk* WorldServerRpcLogoutGameServerAsk::New() const {
  return new WorldServerRpcLogoutGameServerAsk;
}

void WorldServerRpcLogoutGameServerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::OnlineUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcLogoutGameServerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleInfo;
        break;
      }

      // optional .OnlineUserInfo RoleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcLogoutGameServerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .OnlineUserInfo RoleInfo = 2;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcLogoutGameServerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .OnlineUserInfo RoleInfo = 2;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcLogoutGameServerAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .OnlineUserInfo RoleInfo = 2;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcLogoutGameServerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcLogoutGameServerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcLogoutGameServerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcLogoutGameServerAsk::MergeFrom(const WorldServerRpcLogoutGameServerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::OnlineUserInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcLogoutGameServerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcLogoutGameServerAsk::CopyFrom(const WorldServerRpcLogoutGameServerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcLogoutGameServerAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcLogoutGameServerAsk::Swap(WorldServerRpcLogoutGameServerAsk* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcLogoutGameServerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcLogoutGameServerAsk_descriptor_;
  metadata.reflection = WorldServerRpcLogoutGameServerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcUpdateRoleInfoAsk::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcUpdateRoleInfoAsk::WorldServerRpcUpdateRoleInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcUpdateRoleInfoAsk::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::OnlineUserInfo*>(&::OnlineUserInfo::default_instance());
}

WorldServerRpcUpdateRoleInfoAsk::WorldServerRpcUpdateRoleInfoAsk(const WorldServerRpcUpdateRoleInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcUpdateRoleInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcUpdateRoleInfoAsk::~WorldServerRpcUpdateRoleInfoAsk() {
  SharedDtor();
}

void WorldServerRpcUpdateRoleInfoAsk::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void WorldServerRpcUpdateRoleInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcUpdateRoleInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcUpdateRoleInfoAsk_descriptor_;
}

const WorldServerRpcUpdateRoleInfoAsk& WorldServerRpcUpdateRoleInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcUpdateRoleInfoAsk* WorldServerRpcUpdateRoleInfoAsk::default_instance_ = NULL;

WorldServerRpcUpdateRoleInfoAsk* WorldServerRpcUpdateRoleInfoAsk::New() const {
  return new WorldServerRpcUpdateRoleInfoAsk;
}

void WorldServerRpcUpdateRoleInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::OnlineUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcUpdateRoleInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OnlineUserInfo RoleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcUpdateRoleInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OnlineUserInfo RoleInfo = 1;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcUpdateRoleInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OnlineUserInfo RoleInfo = 1;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcUpdateRoleInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OnlineUserInfo RoleInfo = 1;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcUpdateRoleInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcUpdateRoleInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcUpdateRoleInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcUpdateRoleInfoAsk::MergeFrom(const WorldServerRpcUpdateRoleInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::OnlineUserInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcUpdateRoleInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcUpdateRoleInfoAsk::CopyFrom(const WorldServerRpcUpdateRoleInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcUpdateRoleInfoAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcUpdateRoleInfoAsk::Swap(WorldServerRpcUpdateRoleInfoAsk* other) {
  if (other != this) {
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcUpdateRoleInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcUpdateRoleInfoAsk_descriptor_;
  metadata.reflection = WorldServerRpcUpdateRoleInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcUpdateRoleInfoReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcUpdateRoleInfoReply::WorldServerRpcUpdateRoleInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcUpdateRoleInfoReply::InitAsDefaultInstance() {
}

WorldServerRpcUpdateRoleInfoReply::WorldServerRpcUpdateRoleInfoReply(const WorldServerRpcUpdateRoleInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcUpdateRoleInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcUpdateRoleInfoReply::~WorldServerRpcUpdateRoleInfoReply() {
  SharedDtor();
}

void WorldServerRpcUpdateRoleInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcUpdateRoleInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcUpdateRoleInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcUpdateRoleInfoReply_descriptor_;
}

const WorldServerRpcUpdateRoleInfoReply& WorldServerRpcUpdateRoleInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcUpdateRoleInfoReply* WorldServerRpcUpdateRoleInfoReply::default_instance_ = NULL;

WorldServerRpcUpdateRoleInfoReply* WorldServerRpcUpdateRoleInfoReply::New() const {
  return new WorldServerRpcUpdateRoleInfoReply;
}

void WorldServerRpcUpdateRoleInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcUpdateRoleInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcUpdateRoleInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcUpdateRoleInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcUpdateRoleInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcUpdateRoleInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcUpdateRoleInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcUpdateRoleInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcUpdateRoleInfoReply::MergeFrom(const WorldServerRpcUpdateRoleInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcUpdateRoleInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcUpdateRoleInfoReply::CopyFrom(const WorldServerRpcUpdateRoleInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcUpdateRoleInfoReply::IsInitialized() const {

  return true;
}

void WorldServerRpcUpdateRoleInfoReply::Swap(WorldServerRpcUpdateRoleInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcUpdateRoleInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcUpdateRoleInfoReply_descriptor_;
  metadata.reflection = WorldServerRpcUpdateRoleInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcCreateDungeonNotifyAsk::kCurSceneIdFieldNumber;
const int WorldServerRpcCreateDungeonNotifyAsk::kRoleIdFieldNumber;
const int WorldServerRpcCreateDungeonNotifyAsk::kTargetSceneIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcCreateDungeonNotifyAsk::WorldServerRpcCreateDungeonNotifyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcCreateDungeonNotifyAsk::InitAsDefaultInstance() {
}

WorldServerRpcCreateDungeonNotifyAsk::WorldServerRpcCreateDungeonNotifyAsk(const WorldServerRpcCreateDungeonNotifyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcCreateDungeonNotifyAsk::SharedCtor() {
  _cached_size_ = 0;
  cursceneid_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  targetsceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcCreateDungeonNotifyAsk::~WorldServerRpcCreateDungeonNotifyAsk() {
  SharedDtor();
}

void WorldServerRpcCreateDungeonNotifyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcCreateDungeonNotifyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcCreateDungeonNotifyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcCreateDungeonNotifyAsk_descriptor_;
}

const WorldServerRpcCreateDungeonNotifyAsk& WorldServerRpcCreateDungeonNotifyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcCreateDungeonNotifyAsk* WorldServerRpcCreateDungeonNotifyAsk::default_instance_ = NULL;

WorldServerRpcCreateDungeonNotifyAsk* WorldServerRpcCreateDungeonNotifyAsk::New() const {
  return new WorldServerRpcCreateDungeonNotifyAsk;
}

void WorldServerRpcCreateDungeonNotifyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursceneid_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
    targetsceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcCreateDungeonNotifyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CurSceneId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TargetSceneId;
        break;
      }

      // optional int32 TargetSceneId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcCreateDungeonNotifyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CurSceneId = 1 [default = -1];
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cursceneid(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional int32 TargetSceneId = 5 [default = -1];
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetsceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcCreateDungeonNotifyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CurSceneId = 1 [default = -1];
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cursceneid(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional int32 TargetSceneId = 5 [default = -1];
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetsceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcCreateDungeonNotifyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CurSceneId = 1 [default = -1];
    if (has_cursceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursceneid());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 TargetSceneId = 5 [default = -1];
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetsceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcCreateDungeonNotifyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcCreateDungeonNotifyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcCreateDungeonNotifyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcCreateDungeonNotifyAsk::MergeFrom(const WorldServerRpcCreateDungeonNotifyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcCreateDungeonNotifyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcCreateDungeonNotifyAsk::CopyFrom(const WorldServerRpcCreateDungeonNotifyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcCreateDungeonNotifyAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcCreateDungeonNotifyAsk::Swap(WorldServerRpcCreateDungeonNotifyAsk* other) {
  if (other != this) {
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(roleid_, other->roleid_);
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcCreateDungeonNotifyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcCreateDungeonNotifyAsk_descriptor_;
  metadata.reflection = WorldServerRpcCreateDungeonNotifyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcCreateDungeonNotifyReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcCreateDungeonNotifyReply::WorldServerRpcCreateDungeonNotifyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcCreateDungeonNotifyReply::InitAsDefaultInstance() {
}

WorldServerRpcCreateDungeonNotifyReply::WorldServerRpcCreateDungeonNotifyReply(const WorldServerRpcCreateDungeonNotifyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcCreateDungeonNotifyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcCreateDungeonNotifyReply::~WorldServerRpcCreateDungeonNotifyReply() {
  SharedDtor();
}

void WorldServerRpcCreateDungeonNotifyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcCreateDungeonNotifyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcCreateDungeonNotifyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcCreateDungeonNotifyReply_descriptor_;
}

const WorldServerRpcCreateDungeonNotifyReply& WorldServerRpcCreateDungeonNotifyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcCreateDungeonNotifyReply* WorldServerRpcCreateDungeonNotifyReply::default_instance_ = NULL;

WorldServerRpcCreateDungeonNotifyReply* WorldServerRpcCreateDungeonNotifyReply::New() const {
  return new WorldServerRpcCreateDungeonNotifyReply;
}

void WorldServerRpcCreateDungeonNotifyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcCreateDungeonNotifyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcCreateDungeonNotifyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcCreateDungeonNotifyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcCreateDungeonNotifyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcCreateDungeonNotifyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcCreateDungeonNotifyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcCreateDungeonNotifyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcCreateDungeonNotifyReply::MergeFrom(const WorldServerRpcCreateDungeonNotifyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcCreateDungeonNotifyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcCreateDungeonNotifyReply::CopyFrom(const WorldServerRpcCreateDungeonNotifyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcCreateDungeonNotifyReply::IsInitialized() const {

  return true;
}

void WorldServerRpcCreateDungeonNotifyReply::Swap(WorldServerRpcCreateDungeonNotifyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcCreateDungeonNotifyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcCreateDungeonNotifyReply_descriptor_;
  metadata.reflection = WorldServerRpcCreateDungeonNotifyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcExitDungeonAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcExitDungeonAsk::WorldServerRpcExitDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcExitDungeonAsk::InitAsDefaultInstance() {
}

WorldServerRpcExitDungeonAsk::WorldServerRpcExitDungeonAsk(const WorldServerRpcExitDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcExitDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcExitDungeonAsk::~WorldServerRpcExitDungeonAsk() {
  SharedDtor();
}

void WorldServerRpcExitDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcExitDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcExitDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcExitDungeonAsk_descriptor_;
}

const WorldServerRpcExitDungeonAsk& WorldServerRpcExitDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcExitDungeonAsk* WorldServerRpcExitDungeonAsk::default_instance_ = NULL;

WorldServerRpcExitDungeonAsk* WorldServerRpcExitDungeonAsk::New() const {
  return new WorldServerRpcExitDungeonAsk;
}

void WorldServerRpcExitDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcExitDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcExitDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcExitDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcExitDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcExitDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcExitDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcExitDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcExitDungeonAsk::MergeFrom(const WorldServerRpcExitDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcExitDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcExitDungeonAsk::CopyFrom(const WorldServerRpcExitDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcExitDungeonAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcExitDungeonAsk::Swap(WorldServerRpcExitDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcExitDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcExitDungeonAsk_descriptor_;
  metadata.reflection = WorldServerRpcExitDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcExitDungeonReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcExitDungeonReply::WorldServerRpcExitDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcExitDungeonReply::InitAsDefaultInstance() {
}

WorldServerRpcExitDungeonReply::WorldServerRpcExitDungeonReply(const WorldServerRpcExitDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcExitDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcExitDungeonReply::~WorldServerRpcExitDungeonReply() {
  SharedDtor();
}

void WorldServerRpcExitDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcExitDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcExitDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcExitDungeonReply_descriptor_;
}

const WorldServerRpcExitDungeonReply& WorldServerRpcExitDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcExitDungeonReply* WorldServerRpcExitDungeonReply::default_instance_ = NULL;

WorldServerRpcExitDungeonReply* WorldServerRpcExitDungeonReply::New() const {
  return new WorldServerRpcExitDungeonReply;
}

void WorldServerRpcExitDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcExitDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcExitDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcExitDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcExitDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcExitDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcExitDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcExitDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcExitDungeonReply::MergeFrom(const WorldServerRpcExitDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcExitDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcExitDungeonReply::CopyFrom(const WorldServerRpcExitDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcExitDungeonReply::IsInitialized() const {

  return true;
}

void WorldServerRpcExitDungeonReply::Swap(WorldServerRpcExitDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcExitDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcExitDungeonReply_descriptor_;
  metadata.reflection = WorldServerRpcExitDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcUpdateTeamInfoAsk::kTeamMemberFieldNumber;
const int WorldServerRpcUpdateTeamInfoAsk::kRoleIdFieldNumber;
const int WorldServerRpcUpdateTeamInfoAsk::kTeamFieldNumber;
const int WorldServerRpcUpdateTeamInfoAsk::kTeamTypeFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcUpdateTeamInfoAsk::WorldServerRpcUpdateTeamInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcUpdateTeamInfoAsk::InitAsDefaultInstance() {
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

WorldServerRpcUpdateTeamInfoAsk::WorldServerRpcUpdateTeamInfoAsk(const WorldServerRpcUpdateTeamInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcUpdateTeamInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  teammember_ = NULL;
  roleid_ = GOOGLE_ULONGLONG(0);
  team_ = NULL;
  teamtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcUpdateTeamInfoAsk::~WorldServerRpcUpdateTeamInfoAsk() {
  SharedDtor();
}

void WorldServerRpcUpdateTeamInfoAsk::SharedDtor() {
  if (this != default_instance_) {
    delete teammember_;
    delete team_;
  }
}

void WorldServerRpcUpdateTeamInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcUpdateTeamInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcUpdateTeamInfoAsk_descriptor_;
}

const WorldServerRpcUpdateTeamInfoAsk& WorldServerRpcUpdateTeamInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcUpdateTeamInfoAsk* WorldServerRpcUpdateTeamInfoAsk::default_instance_ = NULL;

WorldServerRpcUpdateTeamInfoAsk* WorldServerRpcUpdateTeamInfoAsk::New() const {
  return new WorldServerRpcUpdateTeamInfoAsk;
}

void WorldServerRpcUpdateTeamInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
    teamtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcUpdateTeamInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo TeamMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TeamType;
        break;
      }

      // optional int32 TeamType = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcUpdateTeamInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammember(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional .TeamInfo Team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->team(), output);
  }

  // optional int32 TeamType = 5 [default = -1];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcUpdateTeamInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammember(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional .TeamInfo Team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->team(), target);
  }

  // optional int32 TeamType = 5 [default = -1];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcUpdateTeamInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo TeamMember = 1;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional .TeamInfo Team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional int32 TeamType = 5 [default = -1];
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcUpdateTeamInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcUpdateTeamInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcUpdateTeamInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcUpdateTeamInfoAsk::MergeFrom(const WorldServerRpcUpdateTeamInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcUpdateTeamInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcUpdateTeamInfoAsk::CopyFrom(const WorldServerRpcUpdateTeamInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcUpdateTeamInfoAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcUpdateTeamInfoAsk::Swap(WorldServerRpcUpdateTeamInfoAsk* other) {
  if (other != this) {
    std::swap(teammember_, other->teammember_);
    std::swap(roleid_, other->roleid_);
    std::swap(team_, other->team_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcUpdateTeamInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcUpdateTeamInfoAsk_descriptor_;
  metadata.reflection = WorldServerRpcUpdateTeamInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcUpdateTeamInfoReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcUpdateTeamInfoReply::WorldServerRpcUpdateTeamInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcUpdateTeamInfoReply::InitAsDefaultInstance() {
}

WorldServerRpcUpdateTeamInfoReply::WorldServerRpcUpdateTeamInfoReply(const WorldServerRpcUpdateTeamInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcUpdateTeamInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcUpdateTeamInfoReply::~WorldServerRpcUpdateTeamInfoReply() {
  SharedDtor();
}

void WorldServerRpcUpdateTeamInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcUpdateTeamInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcUpdateTeamInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcUpdateTeamInfoReply_descriptor_;
}

const WorldServerRpcUpdateTeamInfoReply& WorldServerRpcUpdateTeamInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcUpdateTeamInfoReply* WorldServerRpcUpdateTeamInfoReply::default_instance_ = NULL;

WorldServerRpcUpdateTeamInfoReply* WorldServerRpcUpdateTeamInfoReply::New() const {
  return new WorldServerRpcUpdateTeamInfoReply;
}

void WorldServerRpcUpdateTeamInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcUpdateTeamInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcUpdateTeamInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcUpdateTeamInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcUpdateTeamInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcUpdateTeamInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcUpdateTeamInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcUpdateTeamInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcUpdateTeamInfoReply::MergeFrom(const WorldServerRpcUpdateTeamInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcUpdateTeamInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcUpdateTeamInfoReply::CopyFrom(const WorldServerRpcUpdateTeamInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcUpdateTeamInfoReply::IsInitialized() const {

  return true;
}

void WorldServerRpcUpdateTeamInfoReply::Swap(WorldServerRpcUpdateTeamInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcUpdateTeamInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcUpdateTeamInfoReply_descriptor_;
  metadata.reflection = WorldServerRpcUpdateTeamInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcPlayCgTeamAsk::kPlayRoleIdFieldNumber;
const int WorldServerRpcPlayCgTeamAsk::kCgIdFieldNumber;
const int WorldServerRpcPlayCgTeamAsk::kStateFieldNumber;
const int WorldServerRpcPlayCgTeamAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcPlayCgTeamAsk::WorldServerRpcPlayCgTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcPlayCgTeamAsk::InitAsDefaultInstance() {
}

WorldServerRpcPlayCgTeamAsk::WorldServerRpcPlayCgTeamAsk(const WorldServerRpcPlayCgTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcPlayCgTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  playroleid_ = GOOGLE_ULONGLONG(0);
  cgid_ = -1;
  state_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcPlayCgTeamAsk::~WorldServerRpcPlayCgTeamAsk() {
  SharedDtor();
}

void WorldServerRpcPlayCgTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcPlayCgTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcPlayCgTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcPlayCgTeamAsk_descriptor_;
}

const WorldServerRpcPlayCgTeamAsk& WorldServerRpcPlayCgTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcPlayCgTeamAsk* WorldServerRpcPlayCgTeamAsk::default_instance_ = NULL;

WorldServerRpcPlayCgTeamAsk* WorldServerRpcPlayCgTeamAsk::New() const {
  return new WorldServerRpcPlayCgTeamAsk;
}

void WorldServerRpcPlayCgTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playroleid_ = GOOGLE_ULONGLONG(0);
    cgid_ = -1;
    state_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcPlayCgTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PlayRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playroleid_)));
          set_has_playroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CgId;
        break;
      }

      // optional int32 CgId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cgid_)));
          set_has_cgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional int32 State = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcPlayCgTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 PlayRoleId = 1 [default = 0];
  if (has_playroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playroleid(), output);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cgid(), output);
  }

  // optional int32 State = 3 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional uint64 RoleId = 4 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcPlayCgTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 PlayRoleId = 1 [default = 0];
  if (has_playroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playroleid(), target);
  }

  // optional int32 CgId = 2 [default = -1];
  if (has_cgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cgid(), target);
  }

  // optional int32 State = 3 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional uint64 RoleId = 4 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcPlayCgTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PlayRoleId = 1 [default = 0];
    if (has_playroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playroleid());
    }

    // optional int32 CgId = 2 [default = -1];
    if (has_cgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cgid());
    }

    // optional int32 State = 3 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 RoleId = 4 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcPlayCgTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcPlayCgTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcPlayCgTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcPlayCgTeamAsk::MergeFrom(const WorldServerRpcPlayCgTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playroleid()) {
      set_playroleid(from.playroleid());
    }
    if (from.has_cgid()) {
      set_cgid(from.cgid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcPlayCgTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcPlayCgTeamAsk::CopyFrom(const WorldServerRpcPlayCgTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcPlayCgTeamAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcPlayCgTeamAsk::Swap(WorldServerRpcPlayCgTeamAsk* other) {
  if (other != this) {
    std::swap(playroleid_, other->playroleid_);
    std::swap(cgid_, other->cgid_);
    std::swap(state_, other->state_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcPlayCgTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcPlayCgTeamAsk_descriptor_;
  metadata.reflection = WorldServerRpcPlayCgTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcPlayCgTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcPlayCgTeamReply::WorldServerRpcPlayCgTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcPlayCgTeamReply::InitAsDefaultInstance() {
}

WorldServerRpcPlayCgTeamReply::WorldServerRpcPlayCgTeamReply(const WorldServerRpcPlayCgTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcPlayCgTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcPlayCgTeamReply::~WorldServerRpcPlayCgTeamReply() {
  SharedDtor();
}

void WorldServerRpcPlayCgTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcPlayCgTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcPlayCgTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcPlayCgTeamReply_descriptor_;
}

const WorldServerRpcPlayCgTeamReply& WorldServerRpcPlayCgTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcPlayCgTeamReply* WorldServerRpcPlayCgTeamReply::default_instance_ = NULL;

WorldServerRpcPlayCgTeamReply* WorldServerRpcPlayCgTeamReply::New() const {
  return new WorldServerRpcPlayCgTeamReply;
}

void WorldServerRpcPlayCgTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcPlayCgTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcPlayCgTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcPlayCgTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcPlayCgTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcPlayCgTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcPlayCgTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcPlayCgTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcPlayCgTeamReply::MergeFrom(const WorldServerRpcPlayCgTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcPlayCgTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcPlayCgTeamReply::CopyFrom(const WorldServerRpcPlayCgTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcPlayCgTeamReply::IsInitialized() const {

  return true;
}

void WorldServerRpcPlayCgTeamReply::Swap(WorldServerRpcPlayCgTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcPlayCgTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcPlayCgTeamReply_descriptor_;
  metadata.reflection = WorldServerRpcPlayCgTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcSendMailAsk::kMailFieldNumber;
const int WorldServerRpcSendMailAsk::kGlobalMailIDFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcSendMailAsk::WorldServerRpcSendMailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcSendMailAsk::InitAsDefaultInstance() {
  mail_ = const_cast< ::MailInfo*>(&::MailInfo::default_instance());
}

WorldServerRpcSendMailAsk::WorldServerRpcSendMailAsk(const WorldServerRpcSendMailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcSendMailAsk::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  globalmailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcSendMailAsk::~WorldServerRpcSendMailAsk() {
  SharedDtor();
}

void WorldServerRpcSendMailAsk::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void WorldServerRpcSendMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcSendMailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcSendMailAsk_descriptor_;
}

const WorldServerRpcSendMailAsk& WorldServerRpcSendMailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcSendMailAsk* WorldServerRpcSendMailAsk::default_instance_ = NULL;

WorldServerRpcSendMailAsk* WorldServerRpcSendMailAsk::New() const {
  return new WorldServerRpcSendMailAsk;
}

void WorldServerRpcSendMailAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::MailInfo::Clear();
    }
    globalmailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcSendMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MailInfo Mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GlobalMailID;
        break;
      }

      // optional uint64 GlobalMailID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GlobalMailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globalmailid_)));
          set_has_globalmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcSendMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MailInfo Mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  // optional uint64 GlobalMailID = 2 [default = 0];
  if (has_globalmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->globalmailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcSendMailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MailInfo Mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  // optional uint64 GlobalMailID = 2 [default = 0];
  if (has_globalmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->globalmailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcSendMailAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MailInfo Mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional uint64 GlobalMailID = 2 [default = 0];
    if (has_globalmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globalmailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcSendMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcSendMailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcSendMailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcSendMailAsk::MergeFrom(const WorldServerRpcSendMailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::MailInfo::MergeFrom(from.mail());
    }
    if (from.has_globalmailid()) {
      set_globalmailid(from.globalmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcSendMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcSendMailAsk::CopyFrom(const WorldServerRpcSendMailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcSendMailAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcSendMailAsk::Swap(WorldServerRpcSendMailAsk* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(globalmailid_, other->globalmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcSendMailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcSendMailAsk_descriptor_;
  metadata.reflection = WorldServerRpcSendMailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcSendMailReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcSendMailReply::WorldServerRpcSendMailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcSendMailReply::InitAsDefaultInstance() {
}

WorldServerRpcSendMailReply::WorldServerRpcSendMailReply(const WorldServerRpcSendMailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcSendMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcSendMailReply::~WorldServerRpcSendMailReply() {
  SharedDtor();
}

void WorldServerRpcSendMailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcSendMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcSendMailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcSendMailReply_descriptor_;
}

const WorldServerRpcSendMailReply& WorldServerRpcSendMailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcSendMailReply* WorldServerRpcSendMailReply::default_instance_ = NULL;

WorldServerRpcSendMailReply* WorldServerRpcSendMailReply::New() const {
  return new WorldServerRpcSendMailReply;
}

void WorldServerRpcSendMailReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcSendMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcSendMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcSendMailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcSendMailReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcSendMailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcSendMailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcSendMailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcSendMailReply::MergeFrom(const WorldServerRpcSendMailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcSendMailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcSendMailReply::CopyFrom(const WorldServerRpcSendMailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcSendMailReply::IsInitialized() const {

  return true;
}

void WorldServerRpcSendMailReply::Swap(WorldServerRpcSendMailReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcSendMailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcSendMailReply_descriptor_;
  metadata.reflection = WorldServerRpcSendMailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcChangeTeamTypeAsk::kTeamIdFieldNumber;
const int WorldServerRpcChangeTeamTypeAsk::kRoleIdFieldNumber;
const int WorldServerRpcChangeTeamTypeAsk::kResultFieldNumber;
const int WorldServerRpcChangeTeamTypeAsk::kTeamTypeFieldNumber;
const int WorldServerRpcChangeTeamTypeAsk::kTargetFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcChangeTeamTypeAsk::WorldServerRpcChangeTeamTypeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcChangeTeamTypeAsk::InitAsDefaultInstance() {
  target_ = const_cast< ::TeamTarget*>(&::TeamTarget::default_instance());
}

WorldServerRpcChangeTeamTypeAsk::WorldServerRpcChangeTeamTypeAsk(const WorldServerRpcChangeTeamTypeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcChangeTeamTypeAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  roleid_ = GOOGLE_ULONGLONG(0);
  result_ = -1;
  teamtype_ = -1;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcChangeTeamTypeAsk::~WorldServerRpcChangeTeamTypeAsk() {
  SharedDtor();
}

void WorldServerRpcChangeTeamTypeAsk::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void WorldServerRpcChangeTeamTypeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcChangeTeamTypeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcChangeTeamTypeAsk_descriptor_;
}

const WorldServerRpcChangeTeamTypeAsk& WorldServerRpcChangeTeamTypeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcChangeTeamTypeAsk* WorldServerRpcChangeTeamTypeAsk::default_instance_ = NULL;

WorldServerRpcChangeTeamTypeAsk* WorldServerRpcChangeTeamTypeAsk::New() const {
  return new WorldServerRpcChangeTeamTypeAsk;
}

void WorldServerRpcChangeTeamTypeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    roleid_ = GOOGLE_ULONGLONG(0);
    result_ = -1;
    teamtype_ = -1;
    if (has_target()) {
      if (target_ != NULL) target_->::TeamTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcChangeTeamTypeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional int32 Result = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TeamType;
        break;
      }

      // optional int32 TeamType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Target;
        break;
      }

      // optional .TeamTarget Target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcChangeTeamTypeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 TeamId = 1 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional int32 Result = 3 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 TeamType = 4 [default = -1];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamtype(), output);
  }

  // optional .TeamTarget Target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcChangeTeamTypeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 TeamId = 1 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional int32 Result = 3 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 TeamType = 4 [default = -1];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamtype(), target);
  }

  // optional .TeamTarget Target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcChangeTeamTypeAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Result = 3 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 TeamType = 4 [default = -1];
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // optional .TeamTarget Target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcChangeTeamTypeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcChangeTeamTypeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcChangeTeamTypeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcChangeTeamTypeAsk::MergeFrom(const WorldServerRpcChangeTeamTypeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_target()) {
      mutable_target()->::TeamTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcChangeTeamTypeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcChangeTeamTypeAsk::CopyFrom(const WorldServerRpcChangeTeamTypeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcChangeTeamTypeAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcChangeTeamTypeAsk::Swap(WorldServerRpcChangeTeamTypeAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcChangeTeamTypeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcChangeTeamTypeAsk_descriptor_;
  metadata.reflection = WorldServerRpcChangeTeamTypeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcChangeTeamTypeReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcChangeTeamTypeReply::WorldServerRpcChangeTeamTypeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcChangeTeamTypeReply::InitAsDefaultInstance() {
}

WorldServerRpcChangeTeamTypeReply::WorldServerRpcChangeTeamTypeReply(const WorldServerRpcChangeTeamTypeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcChangeTeamTypeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcChangeTeamTypeReply::~WorldServerRpcChangeTeamTypeReply() {
  SharedDtor();
}

void WorldServerRpcChangeTeamTypeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcChangeTeamTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcChangeTeamTypeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcChangeTeamTypeReply_descriptor_;
}

const WorldServerRpcChangeTeamTypeReply& WorldServerRpcChangeTeamTypeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcChangeTeamTypeReply* WorldServerRpcChangeTeamTypeReply::default_instance_ = NULL;

WorldServerRpcChangeTeamTypeReply* WorldServerRpcChangeTeamTypeReply::New() const {
  return new WorldServerRpcChangeTeamTypeReply;
}

void WorldServerRpcChangeTeamTypeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcChangeTeamTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcChangeTeamTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcChangeTeamTypeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcChangeTeamTypeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcChangeTeamTypeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcChangeTeamTypeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcChangeTeamTypeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcChangeTeamTypeReply::MergeFrom(const WorldServerRpcChangeTeamTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcChangeTeamTypeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcChangeTeamTypeReply::CopyFrom(const WorldServerRpcChangeTeamTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcChangeTeamTypeReply::IsInitialized() const {

  return true;
}

void WorldServerRpcChangeTeamTypeReply::Swap(WorldServerRpcChangeTeamTypeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcChangeTeamTypeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcChangeTeamTypeReply_descriptor_;
  metadata.reflection = WorldServerRpcChangeTeamTypeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcAutoMatchAsk::kMemberInfoFieldNumber;
const int WorldServerRpcAutoMatchAsk::kMatchInfoFieldNumber;
const int WorldServerRpcAutoMatchAsk::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcAutoMatchAsk::WorldServerRpcAutoMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcAutoMatchAsk::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
  matchinfo_ = const_cast< ::PlayerMatchData*>(&::PlayerMatchData::default_instance());
}

WorldServerRpcAutoMatchAsk::WorldServerRpcAutoMatchAsk(const WorldServerRpcAutoMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcAutoMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  memberinfo_ = NULL;
  matchinfo_ = NULL;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcAutoMatchAsk::~WorldServerRpcAutoMatchAsk() {
  SharedDtor();
}

void WorldServerRpcAutoMatchAsk::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
    delete matchinfo_;
  }
}

void WorldServerRpcAutoMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcAutoMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcAutoMatchAsk_descriptor_;
}

const WorldServerRpcAutoMatchAsk& WorldServerRpcAutoMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcAutoMatchAsk* WorldServerRpcAutoMatchAsk::default_instance_ = NULL;

WorldServerRpcAutoMatchAsk* WorldServerRpcAutoMatchAsk::New() const {
  return new WorldServerRpcAutoMatchAsk;
}

void WorldServerRpcAutoMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::TeamMemberInfo::Clear();
    }
    if (has_matchinfo()) {
      if (matchinfo_ != NULL) matchinfo_->::PlayerMatchData::Clear();
    }
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcAutoMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo MemberInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MatchInfo;
        break;
      }

      // optional .PlayerMatchData MatchInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Result;
        break;
      }

      // optional int32 Result = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcAutoMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo MemberInfo = 1;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberinfo(), output);
  }

  // optional .PlayerMatchData MatchInfo = 3;
  if (has_matchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matchinfo(), output);
  }

  // optional int32 Result = 4 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcAutoMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo MemberInfo = 1;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberinfo(), target);
  }

  // optional .PlayerMatchData MatchInfo = 3;
  if (has_matchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matchinfo(), target);
  }

  // optional int32 Result = 4 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcAutoMatchAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo MemberInfo = 1;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

    // optional .PlayerMatchData MatchInfo = 3;
    if (has_matchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchinfo());
    }

    // optional int32 Result = 4 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcAutoMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcAutoMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcAutoMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcAutoMatchAsk::MergeFrom(const WorldServerRpcAutoMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::TeamMemberInfo::MergeFrom(from.memberinfo());
    }
    if (from.has_matchinfo()) {
      mutable_matchinfo()->::PlayerMatchData::MergeFrom(from.matchinfo());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcAutoMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcAutoMatchAsk::CopyFrom(const WorldServerRpcAutoMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcAutoMatchAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcAutoMatchAsk::Swap(WorldServerRpcAutoMatchAsk* other) {
  if (other != this) {
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(matchinfo_, other->matchinfo_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcAutoMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcAutoMatchAsk_descriptor_;
  metadata.reflection = WorldServerRpcAutoMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcAutoMatchReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcAutoMatchReply::WorldServerRpcAutoMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcAutoMatchReply::InitAsDefaultInstance() {
}

WorldServerRpcAutoMatchReply::WorldServerRpcAutoMatchReply(const WorldServerRpcAutoMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcAutoMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcAutoMatchReply::~WorldServerRpcAutoMatchReply() {
  SharedDtor();
}

void WorldServerRpcAutoMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcAutoMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcAutoMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcAutoMatchReply_descriptor_;
}

const WorldServerRpcAutoMatchReply& WorldServerRpcAutoMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcAutoMatchReply* WorldServerRpcAutoMatchReply::default_instance_ = NULL;

WorldServerRpcAutoMatchReply* WorldServerRpcAutoMatchReply::New() const {
  return new WorldServerRpcAutoMatchReply;
}

void WorldServerRpcAutoMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcAutoMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcAutoMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcAutoMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcAutoMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcAutoMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcAutoMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcAutoMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcAutoMatchReply::MergeFrom(const WorldServerRpcAutoMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcAutoMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcAutoMatchReply::CopyFrom(const WorldServerRpcAutoMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcAutoMatchReply::IsInitialized() const {

  return true;
}

void WorldServerRpcAutoMatchReply::Swap(WorldServerRpcAutoMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcAutoMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcAutoMatchReply_descriptor_;
  metadata.reflection = WorldServerRpcAutoMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcCancelMatchAsk::kRoleIdFieldNumber;
const int WorldServerRpcCancelMatchAsk::kResultFieldNumber;
const int WorldServerRpcCancelMatchAsk::kIsNotifyFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcCancelMatchAsk::WorldServerRpcCancelMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcCancelMatchAsk::InitAsDefaultInstance() {
}

WorldServerRpcCancelMatchAsk::WorldServerRpcCancelMatchAsk(const WorldServerRpcCancelMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcCancelMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  result_ = -1;
  isnotify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcCancelMatchAsk::~WorldServerRpcCancelMatchAsk() {
  SharedDtor();
}

void WorldServerRpcCancelMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcCancelMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcCancelMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcCancelMatchAsk_descriptor_;
}

const WorldServerRpcCancelMatchAsk& WorldServerRpcCancelMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcCancelMatchAsk* WorldServerRpcCancelMatchAsk::default_instance_ = NULL;

WorldServerRpcCancelMatchAsk* WorldServerRpcCancelMatchAsk::New() const {
  return new WorldServerRpcCancelMatchAsk;
}

void WorldServerRpcCancelMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    result_ = -1;
    isnotify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcCancelMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional int32 Result = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsNotify;
        break;
      }

      // optional int32 IsNotify = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsNotify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnotify_)));
          set_has_isnotify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcCancelMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 Result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 IsNotify = 3 [default = 0];
  if (has_isnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isnotify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcCancelMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 Result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 IsNotify = 3 [default = 0];
  if (has_isnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isnotify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcCancelMatchAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 IsNotify = 3 [default = 0];
    if (has_isnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnotify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcCancelMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcCancelMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcCancelMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcCancelMatchAsk::MergeFrom(const WorldServerRpcCancelMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isnotify()) {
      set_isnotify(from.isnotify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcCancelMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcCancelMatchAsk::CopyFrom(const WorldServerRpcCancelMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcCancelMatchAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcCancelMatchAsk::Swap(WorldServerRpcCancelMatchAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(isnotify_, other->isnotify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcCancelMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcCancelMatchAsk_descriptor_;
  metadata.reflection = WorldServerRpcCancelMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcCancelMatchReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcCancelMatchReply::WorldServerRpcCancelMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcCancelMatchReply::InitAsDefaultInstance() {
}

WorldServerRpcCancelMatchReply::WorldServerRpcCancelMatchReply(const WorldServerRpcCancelMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcCancelMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcCancelMatchReply::~WorldServerRpcCancelMatchReply() {
  SharedDtor();
}

void WorldServerRpcCancelMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcCancelMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcCancelMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcCancelMatchReply_descriptor_;
}

const WorldServerRpcCancelMatchReply& WorldServerRpcCancelMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcCancelMatchReply* WorldServerRpcCancelMatchReply::default_instance_ = NULL;

WorldServerRpcCancelMatchReply* WorldServerRpcCancelMatchReply::New() const {
  return new WorldServerRpcCancelMatchReply;
}

void WorldServerRpcCancelMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcCancelMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcCancelMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcCancelMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcCancelMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcCancelMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcCancelMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcCancelMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcCancelMatchReply::MergeFrom(const WorldServerRpcCancelMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcCancelMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcCancelMatchReply::CopyFrom(const WorldServerRpcCancelMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcCancelMatchReply::IsInitialized() const {

  return true;
}

void WorldServerRpcCancelMatchReply::Swap(WorldServerRpcCancelMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcCancelMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcCancelMatchReply_descriptor_;
  metadata.reflection = WorldServerRpcCancelMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcLoginGameServerReply::kResultFieldNumber;
const int WorldServerRpcLoginGameServerReply::kTeamFieldNumber;
const int WorldServerRpcLoginGameServerReply::kRoleInfoFieldNumber;
const int WorldServerRpcLoginGameServerReply::kLocationFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcLoginGameServerReply::WorldServerRpcLoginGameServerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcLoginGameServerReply::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
  roleinfo_ = const_cast< ::OnlineUserInfo*>(&::OnlineUserInfo::default_instance());
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
}

WorldServerRpcLoginGameServerReply::WorldServerRpcLoginGameServerReply(const WorldServerRpcLoginGameServerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcLoginGameServerReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  team_ = NULL;
  roleinfo_ = NULL;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcLoginGameServerReply::~WorldServerRpcLoginGameServerReply() {
  SharedDtor();
}

void WorldServerRpcLoginGameServerReply::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
    delete roleinfo_;
    delete location_;
  }
}

void WorldServerRpcLoginGameServerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcLoginGameServerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcLoginGameServerReply_descriptor_;
}

const WorldServerRpcLoginGameServerReply& WorldServerRpcLoginGameServerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcLoginGameServerReply* WorldServerRpcLoginGameServerReply::default_instance_ = NULL;

WorldServerRpcLoginGameServerReply* WorldServerRpcLoginGameServerReply::New() const {
  return new WorldServerRpcLoginGameServerReply;
}

void WorldServerRpcLoginGameServerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::OnlineUserInfo::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcLoginGameServerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleInfo;
        break;
      }

      // optional .OnlineUserInfo RoleInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Location;
        break;
      }

      // optional .CharacterLocation Location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcLoginGameServerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  // optional .OnlineUserInfo RoleInfo = 3;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roleinfo(), output);
  }

  // optional .CharacterLocation Location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcLoginGameServerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  // optional .OnlineUserInfo RoleInfo = 3;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roleinfo(), target);
  }

  // optional .CharacterLocation Location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcLoginGameServerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .TeamInfo Team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional .OnlineUserInfo RoleInfo = 3;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

    // optional .CharacterLocation Location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcLoginGameServerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcLoginGameServerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcLoginGameServerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcLoginGameServerReply::MergeFrom(const WorldServerRpcLoginGameServerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::OnlineUserInfo::MergeFrom(from.roleinfo());
    }
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcLoginGameServerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcLoginGameServerReply::CopyFrom(const WorldServerRpcLoginGameServerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcLoginGameServerReply::IsInitialized() const {

  return true;
}

void WorldServerRpcLoginGameServerReply::Swap(WorldServerRpcLoginGameServerReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_, other->team_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcLoginGameServerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcLoginGameServerReply_descriptor_;
  metadata.reflection = WorldServerRpcLoginGameServerReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcLogoutGameServerReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcLogoutGameServerReply::WorldServerRpcLogoutGameServerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcLogoutGameServerReply::InitAsDefaultInstance() {
}

WorldServerRpcLogoutGameServerReply::WorldServerRpcLogoutGameServerReply(const WorldServerRpcLogoutGameServerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcLogoutGameServerReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcLogoutGameServerReply::~WorldServerRpcLogoutGameServerReply() {
  SharedDtor();
}

void WorldServerRpcLogoutGameServerReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcLogoutGameServerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcLogoutGameServerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcLogoutGameServerReply_descriptor_;
}

const WorldServerRpcLogoutGameServerReply& WorldServerRpcLogoutGameServerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcLogoutGameServerReply* WorldServerRpcLogoutGameServerReply::default_instance_ = NULL;

WorldServerRpcLogoutGameServerReply* WorldServerRpcLogoutGameServerReply::New() const {
  return new WorldServerRpcLogoutGameServerReply;
}

void WorldServerRpcLogoutGameServerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcLogoutGameServerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcLogoutGameServerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcLogoutGameServerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcLogoutGameServerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcLogoutGameServerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcLogoutGameServerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcLogoutGameServerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcLogoutGameServerReply::MergeFrom(const WorldServerRpcLogoutGameServerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcLogoutGameServerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcLogoutGameServerReply::CopyFrom(const WorldServerRpcLogoutGameServerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcLogoutGameServerReply::IsInitialized() const {

  return true;
}

void WorldServerRpcLogoutGameServerReply::Swap(WorldServerRpcLogoutGameServerReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcLogoutGameServerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcLogoutGameServerReply_descriptor_;
  metadata.reflection = WorldServerRpcLogoutGameServerReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcGetPlayerInfoAsk::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcGetPlayerInfoAsk::WorldServerRpcGetPlayerInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcGetPlayerInfoAsk::InitAsDefaultInstance() {
}

WorldServerRpcGetPlayerInfoAsk::WorldServerRpcGetPlayerInfoAsk(const WorldServerRpcGetPlayerInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcGetPlayerInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcGetPlayerInfoAsk::~WorldServerRpcGetPlayerInfoAsk() {
  SharedDtor();
}

void WorldServerRpcGetPlayerInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcGetPlayerInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcGetPlayerInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcGetPlayerInfoAsk_descriptor_;
}

const WorldServerRpcGetPlayerInfoAsk& WorldServerRpcGetPlayerInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcGetPlayerInfoAsk* WorldServerRpcGetPlayerInfoAsk::default_instance_ = NULL;

WorldServerRpcGetPlayerInfoAsk* WorldServerRpcGetPlayerInfoAsk::New() const {
  return new WorldServerRpcGetPlayerInfoAsk;
}

void WorldServerRpcGetPlayerInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcGetPlayerInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Player_guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcGetPlayerInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Player_guid = 1 [default = 0];
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcGetPlayerInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Player_guid = 1 [default = 0];
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcGetPlayerInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Player_guid = 1 [default = 0];
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcGetPlayerInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcGetPlayerInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcGetPlayerInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcGetPlayerInfoAsk::MergeFrom(const WorldServerRpcGetPlayerInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcGetPlayerInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcGetPlayerInfoAsk::CopyFrom(const WorldServerRpcGetPlayerInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcGetPlayerInfoAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcGetPlayerInfoAsk::Swap(WorldServerRpcGetPlayerInfoAsk* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcGetPlayerInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcGetPlayerInfoAsk_descriptor_;
  metadata.reflection = WorldServerRpcGetPlayerInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcGetPlayerInfoReply::kResultFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kPlayerNameFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kPlayerGuidFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kAvatarIdFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kPlayerLevelFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kAvatarFrameIdFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kConfigIdFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kGuildIdFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kGuildNameFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kEquipDataFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kSuitInfosFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kEquipSlotDataFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kEquipSlotStarListFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kJewelInfosFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kBattleScoreFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kPetItemDataFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTreasureHairFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTreasureHeadFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTreasureBodyFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTreasureWeaponFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTreasureWingFieldNumber;
const int WorldServerRpcGetPlayerInfoReply::kTeamIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcGetPlayerInfoReply::WorldServerRpcGetPlayerInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcGetPlayerInfoReply::InitAsDefaultInstance() {
  pet_item_data_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

WorldServerRpcGetPlayerInfoReply::WorldServerRpcGetPlayerInfoReply(const WorldServerRpcGetPlayerInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcGetPlayerInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_guid_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = -1;
  player_level_ = -1;
  avatar_frame_id_ = -1;
  config_id_ = -1;
  guild_id_ = GOOGLE_ULONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlescore_ = -1;
  pet_item_data_ = NULL;
  treasurehair_ = -1;
  treasurehead_ = -1;
  treasurebody_ = -1;
  treasureweapon_ = -1;
  treasurewing_ = -1;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcGetPlayerInfoReply::~WorldServerRpcGetPlayerInfoReply() {
  SharedDtor();
}

void WorldServerRpcGetPlayerInfoReply::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete pet_item_data_;
  }
}

void WorldServerRpcGetPlayerInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcGetPlayerInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcGetPlayerInfoReply_descriptor_;
}

const WorldServerRpcGetPlayerInfoReply& WorldServerRpcGetPlayerInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcGetPlayerInfoReply* WorldServerRpcGetPlayerInfoReply::default_instance_ = NULL;

WorldServerRpcGetPlayerInfoReply* WorldServerRpcGetPlayerInfoReply::New() const {
  return new WorldServerRpcGetPlayerInfoReply;
}

void WorldServerRpcGetPlayerInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_guid_ = GOOGLE_ULONGLONG(0);
    avatar_id_ = -1;
    player_level_ = -1;
    avatar_frame_id_ = -1;
    config_id_ = -1;
    guild_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    battlescore_ = -1;
    if (has_pet_item_data()) {
      if (pet_item_data_ != NULL) pet_item_data_->::ItemData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    treasurehair_ = -1;
    treasurehead_ = -1;
    treasurebody_ = -1;
    treasureweapon_ = -1;
    treasurewing_ = -1;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  equip_data_.Clear();
  suit_infos_.Clear();
  equipslotdata_.Clear();
  equipslotstarlist_.Clear();
  jewelinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcGetPlayerInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Player_name;
        break;
      }

      // optional string Player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Player_guid;
        break;
      }

      // optional uint64 Player_guid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Avatar_id;
        break;
      }

      // optional int32 Avatar_id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Player_level;
        break;
      }

      // optional int32 Player_level = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
          set_has_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Avatar_frame_id;
        break;
      }

      // optional int32 Avatar_frame_id = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_frame_id_)));
          set_has_avatar_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Config_id;
        break;
      }

      // optional int32 Config_id = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Guild_id;
        break;
      }

      // optional uint64 Guild_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Guild_name;
        break;
      }

      // optional string Guild_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Equip_data;
        break;
      }

      // repeated .ItemData Equip_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Equip_data;
        if (input->ExpectTag(90)) goto parse_Suit_infos;
        break;
      }

      // repeated .SuitInfo Suit_infos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suit_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Suit_infos;
        if (input->ExpectTag(98)) goto parse_EquipSlotData;
        break;
      }

      // repeated .EquipSlotInfo EquipSlotData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipSlotData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslotdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_EquipSlotData;
        if (input->ExpectTag(106)) goto parse_EquipSlotStarList;
        break;
      }

      // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipSlotStarList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslotstarlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EquipSlotStarList;
        if (input->ExpectTag(114)) goto parse_JewelInfos;
        break;
      }

      // repeated .JewelInfo JewelInfos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jewelinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_JewelInfos;
        if (input->ExpectTag(128)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Pet_item_data;
        break;
      }

      // optional .ItemData Pet_item_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pet_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_TreasureHair;
        break;
      }

      // optional int32 TreasureHair = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehair_)));
          set_has_treasurehair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_TreasureHead;
        break;
      }

      // optional int32 TreasureHead = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehead_)));
          set_has_treasurehead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_TreasureBody;
        break;
      }

      // optional int32 TreasureBody = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurebody_)));
          set_has_treasurebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_TreasureWeapon;
        break;
      }

      // optional int32 TreasureWeapon = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureweapon_)));
          set_has_treasureweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_TreasureWing;
        break;
      }

      // optional int32 TreasureWing = 23 [default = -1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurewing_)));
          set_has_treasurewing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcGetPlayerInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string Player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional uint64 Player_guid = 3 [default = 0];
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_guid(), output);
  }

  // optional int32 Avatar_id = 4 [default = -1];
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avatar_id(), output);
  }

  // optional int32 Player_level = 5 [default = -1];
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_level(), output);
  }

  // optional int32 Avatar_frame_id = 6 [default = -1];
  if (has_avatar_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->avatar_frame_id(), output);
  }

  // optional int32 Config_id = 7 [default = -1];
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->config_id(), output);
  }

  // optional uint64 Guild_id = 8 [default = 0];
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->guild_id(), output);
  }

  // optional string Guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guild_name(), output);
  }

  // repeated .ItemData Equip_data = 10;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equip_data(i), output);
  }

  // repeated .SuitInfo Suit_infos = 11;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->suit_infos(i), output);
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->equipslotdata(i), output);
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equipslotstarlist(i), output);
  }

  // repeated .JewelInfo JewelInfos = 14;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->jewelinfos(i), output);
  }

  // optional int32 BattleScore = 16 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->battlescore(), output);
  }

  // optional .ItemData Pet_item_data = 18;
  if (has_pet_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->pet_item_data(), output);
  }

  // optional int32 TreasureHair = 19 [default = -1];
  if (has_treasurehair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->treasurehair(), output);
  }

  // optional int32 TreasureHead = 20 [default = -1];
  if (has_treasurehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->treasurehead(), output);
  }

  // optional int32 TreasureBody = 21 [default = -1];
  if (has_treasurebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->treasurebody(), output);
  }

  // optional int32 TreasureWeapon = 22 [default = -1];
  if (has_treasureweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->treasureweapon(), output);
  }

  // optional int32 TreasureWing = 23 [default = -1];
  if (has_treasurewing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->treasurewing(), output);
  }

  // optional uint64 TeamId = 24 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcGetPlayerInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string Player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional uint64 Player_guid = 3 [default = 0];
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_guid(), target);
  }

  // optional int32 Avatar_id = 4 [default = -1];
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avatar_id(), target);
  }

  // optional int32 Player_level = 5 [default = -1];
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_level(), target);
  }

  // optional int32 Avatar_frame_id = 6 [default = -1];
  if (has_avatar_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->avatar_frame_id(), target);
  }

  // optional int32 Config_id = 7 [default = -1];
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->config_id(), target);
  }

  // optional uint64 Guild_id = 8 [default = 0];
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->guild_id(), target);
  }

  // optional string Guild_name = 9;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // repeated .ItemData Equip_data = 10;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equip_data(i), target);
  }

  // repeated .SuitInfo Suit_infos = 11;
  for (int i = 0; i < this->suit_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->suit_infos(i), target);
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->equipslotdata(i), target);
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->equipslotstarlist(i), target);
  }

  // repeated .JewelInfo JewelInfos = 14;
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->jewelinfos(i), target);
  }

  // optional int32 BattleScore = 16 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->battlescore(), target);
  }

  // optional .ItemData Pet_item_data = 18;
  if (has_pet_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->pet_item_data(), target);
  }

  // optional int32 TreasureHair = 19 [default = -1];
  if (has_treasurehair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->treasurehair(), target);
  }

  // optional int32 TreasureHead = 20 [default = -1];
  if (has_treasurehead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->treasurehead(), target);
  }

  // optional int32 TreasureBody = 21 [default = -1];
  if (has_treasurebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->treasurebody(), target);
  }

  // optional int32 TreasureWeapon = 22 [default = -1];
  if (has_treasureweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->treasureweapon(), target);
  }

  // optional int32 TreasureWing = 23 [default = -1];
  if (has_treasurewing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->treasurewing(), target);
  }

  // optional uint64 TeamId = 24 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcGetPlayerInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string Player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 Player_guid = 3 [default = 0];
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional int32 Avatar_id = 4 [default = -1];
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 Player_level = 5 [default = -1];
    if (has_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional int32 Avatar_frame_id = 6 [default = -1];
    if (has_avatar_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_frame_id());
    }

    // optional int32 Config_id = 7 [default = -1];
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional uint64 Guild_id = 8 [default = 0];
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional int32 BattleScore = 16 [default = -1];
    if (has_battlescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional .ItemData Pet_item_data = 18;
    if (has_pet_item_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_item_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 TreasureHair = 19 [default = -1];
    if (has_treasurehair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehair());
    }

    // optional int32 TreasureHead = 20 [default = -1];
    if (has_treasurehead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehead());
    }

    // optional int32 TreasureBody = 21 [default = -1];
    if (has_treasurebody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurebody());
    }

    // optional int32 TreasureWeapon = 22 [default = -1];
    if (has_treasureweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureweapon());
    }

    // optional int32 TreasureWing = 23 [default = -1];
    if (has_treasurewing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurewing());
    }

    // optional uint64 TeamId = 24 [default = 0];
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  // repeated .ItemData Equip_data = 10;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  // repeated .SuitInfo Suit_infos = 11;
  total_size += 1 * this->suit_infos_size();
  for (int i = 0; i < this->suit_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_infos(i));
  }

  // repeated .EquipSlotInfo EquipSlotData = 12;
  total_size += 1 * this->equipslotdata_size();
  for (int i = 0; i < this->equipslotdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslotdata(i));
  }

  // repeated .EquipSlotStarInfo EquipSlotStarList = 13;
  total_size += 1 * this->equipslotstarlist_size();
  for (int i = 0; i < this->equipslotstarlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslotstarlist(i));
  }

  // repeated .JewelInfo JewelInfos = 14;
  total_size += 1 * this->jewelinfos_size();
  for (int i = 0; i < this->jewelinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jewelinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcGetPlayerInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcGetPlayerInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcGetPlayerInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcGetPlayerInfoReply::MergeFrom(const WorldServerRpcGetPlayerInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  suit_infos_.MergeFrom(from.suit_infos_);
  equipslotdata_.MergeFrom(from.equipslotdata_);
  equipslotstarlist_.MergeFrom(from.equipslotstarlist_);
  jewelinfos_.MergeFrom(from.jewelinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
    if (from.has_avatar_frame_id()) {
      set_avatar_frame_id(from.avatar_frame_id());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_pet_item_data()) {
      mutable_pet_item_data()->::ItemData::MergeFrom(from.pet_item_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_treasurehair()) {
      set_treasurehair(from.treasurehair());
    }
    if (from.has_treasurehead()) {
      set_treasurehead(from.treasurehead());
    }
    if (from.has_treasurebody()) {
      set_treasurebody(from.treasurebody());
    }
    if (from.has_treasureweapon()) {
      set_treasureweapon(from.treasureweapon());
    }
    if (from.has_treasurewing()) {
      set_treasurewing(from.treasurewing());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcGetPlayerInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcGetPlayerInfoReply::CopyFrom(const WorldServerRpcGetPlayerInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcGetPlayerInfoReply::IsInitialized() const {

  return true;
}

void WorldServerRpcGetPlayerInfoReply::Swap(WorldServerRpcGetPlayerInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(player_level_, other->player_level_);
    std::swap(avatar_frame_id_, other->avatar_frame_id_);
    std::swap(config_id_, other->config_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    equip_data_.Swap(&other->equip_data_);
    suit_infos_.Swap(&other->suit_infos_);
    equipslotdata_.Swap(&other->equipslotdata_);
    equipslotstarlist_.Swap(&other->equipslotstarlist_);
    jewelinfos_.Swap(&other->jewelinfos_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(pet_item_data_, other->pet_item_data_);
    std::swap(treasurehair_, other->treasurehair_);
    std::swap(treasurehead_, other->treasurehead_);
    std::swap(treasurebody_, other->treasurebody_);
    std::swap(treasureweapon_, other->treasureweapon_);
    std::swap(treasurewing_, other->treasurewing_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcGetPlayerInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcGetPlayerInfoReply_descriptor_;
  metadata.reflection = WorldServerRpcGetPlayerInfoReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
