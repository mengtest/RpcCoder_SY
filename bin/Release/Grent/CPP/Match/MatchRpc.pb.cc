// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatchRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MatchRpcAutoMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcAutoMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcAutoMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcAutoMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcCancelMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcCancelMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcCancelMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcCancelMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcCancelMatchNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcCancelMatchNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcPrepareRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcPrepareRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcReadyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcReadyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcReadyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcReadyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcCancelReadyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcCancelReadyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcCancelReadyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcCancelReadyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcRoomCancelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcRoomCancelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRpcMemberReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRpcMemberReadyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MatchRpc_2eproto() {
  protobuf_AddDesc_MatchRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MatchRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MatchRpcAutoMatchAsk_descriptor_ = file->message_type(0);
  static const int MatchRpcAutoMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchAsk, matchinfo_),
  };
  MatchRpcAutoMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcAutoMatchAsk_descriptor_,
      MatchRpcAutoMatchAsk::default_instance_,
      MatchRpcAutoMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcAutoMatchAsk));
  MatchRpcAutoMatchReply_descriptor_ = file->message_type(1);
  static const int MatchRpcAutoMatchReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchReply, matchinfo_),
  };
  MatchRpcAutoMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcAutoMatchReply_descriptor_,
      MatchRpcAutoMatchReply::default_instance_,
      MatchRpcAutoMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcAutoMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcAutoMatchReply));
  MatchRpcCancelMatchAsk_descriptor_ = file->message_type(2);
  static const int MatchRpcCancelMatchAsk_offsets_[1] = {
  };
  MatchRpcCancelMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcCancelMatchAsk_descriptor_,
      MatchRpcCancelMatchAsk::default_instance_,
      MatchRpcCancelMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcCancelMatchAsk));
  MatchRpcCancelMatchReply_descriptor_ = file->message_type(3);
  static const int MatchRpcCancelMatchReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchReply, result_),
  };
  MatchRpcCancelMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcCancelMatchReply_descriptor_,
      MatchRpcCancelMatchReply::default_instance_,
      MatchRpcCancelMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcCancelMatchReply));
  MatchRpcCancelMatchNotifyNotify_descriptor_ = file->message_type(4);
  static const int MatchRpcCancelMatchNotifyNotify_offsets_[1] = {
  };
  MatchRpcCancelMatchNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcCancelMatchNotifyNotify_descriptor_,
      MatchRpcCancelMatchNotifyNotify::default_instance_,
      MatchRpcCancelMatchNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelMatchNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcCancelMatchNotifyNotify));
  MatchRpcPrepareRoomNotify_descriptor_ = file->message_type(5);
  static const int MatchRpcPrepareRoomNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcPrepareRoomNotify, readyroom_),
  };
  MatchRpcPrepareRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcPrepareRoomNotify_descriptor_,
      MatchRpcPrepareRoomNotify::default_instance_,
      MatchRpcPrepareRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcPrepareRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcPrepareRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcPrepareRoomNotify));
  MatchRpcReadyAsk_descriptor_ = file->message_type(6);
  static const int MatchRpcReadyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyAsk, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyAsk, roomid_),
  };
  MatchRpcReadyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcReadyAsk_descriptor_,
      MatchRpcReadyAsk::default_instance_,
      MatchRpcReadyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcReadyAsk));
  MatchRpcReadyReply_descriptor_ = file->message_type(7);
  static const int MatchRpcReadyReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyReply, roleid_),
  };
  MatchRpcReadyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcReadyReply_descriptor_,
      MatchRpcReadyReply::default_instance_,
      MatchRpcReadyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcReadyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcReadyReply));
  MatchRpcCancelReadyAsk_descriptor_ = file->message_type(8);
  static const int MatchRpcCancelReadyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyAsk, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyAsk, roomid_),
  };
  MatchRpcCancelReadyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcCancelReadyAsk_descriptor_,
      MatchRpcCancelReadyAsk::default_instance_,
      MatchRpcCancelReadyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcCancelReadyAsk));
  MatchRpcCancelReadyReply_descriptor_ = file->message_type(9);
  static const int MatchRpcCancelReadyReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyReply, roleid_),
  };
  MatchRpcCancelReadyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcCancelReadyReply_descriptor_,
      MatchRpcCancelReadyReply::default_instance_,
      MatchRpcCancelReadyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcCancelReadyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcCancelReadyReply));
  MatchRpcRoomCancelNotify_descriptor_ = file->message_type(10);
  static const int MatchRpcRoomCancelNotify_offsets_[1] = {
  };
  MatchRpcRoomCancelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcRoomCancelNotify_descriptor_,
      MatchRpcRoomCancelNotify::default_instance_,
      MatchRpcRoomCancelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcRoomCancelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcRoomCancelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcRoomCancelNotify));
  MatchRpcMemberReadyNotify_descriptor_ = file->message_type(11);
  static const int MatchRpcMemberReadyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcMemberReadyNotify, roleid_),
  };
  MatchRpcMemberReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRpcMemberReadyNotify_descriptor_,
      MatchRpcMemberReadyNotify::default_instance_,
      MatchRpcMemberReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcMemberReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRpcMemberReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRpcMemberReadyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MatchRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcAutoMatchAsk_descriptor_, &MatchRpcAutoMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcAutoMatchReply_descriptor_, &MatchRpcAutoMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcCancelMatchAsk_descriptor_, &MatchRpcCancelMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcCancelMatchReply_descriptor_, &MatchRpcCancelMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcCancelMatchNotifyNotify_descriptor_, &MatchRpcCancelMatchNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcPrepareRoomNotify_descriptor_, &MatchRpcPrepareRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcReadyAsk_descriptor_, &MatchRpcReadyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcReadyReply_descriptor_, &MatchRpcReadyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcCancelReadyAsk_descriptor_, &MatchRpcCancelReadyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcCancelReadyReply_descriptor_, &MatchRpcCancelReadyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcRoomCancelNotify_descriptor_, &MatchRpcRoomCancelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRpcMemberReadyNotify_descriptor_, &MatchRpcMemberReadyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MatchRpc_2eproto() {
  delete MatchRpcAutoMatchAsk::default_instance_;
  delete MatchRpcAutoMatchAsk_reflection_;
  delete MatchRpcAutoMatchReply::default_instance_;
  delete MatchRpcAutoMatchReply_reflection_;
  delete MatchRpcCancelMatchAsk::default_instance_;
  delete MatchRpcCancelMatchAsk_reflection_;
  delete MatchRpcCancelMatchReply::default_instance_;
  delete MatchRpcCancelMatchReply_reflection_;
  delete MatchRpcCancelMatchNotifyNotify::default_instance_;
  delete MatchRpcCancelMatchNotifyNotify_reflection_;
  delete MatchRpcPrepareRoomNotify::default_instance_;
  delete MatchRpcPrepareRoomNotify_reflection_;
  delete MatchRpcReadyAsk::default_instance_;
  delete MatchRpcReadyAsk_reflection_;
  delete MatchRpcReadyReply::default_instance_;
  delete MatchRpcReadyReply_reflection_;
  delete MatchRpcCancelReadyAsk::default_instance_;
  delete MatchRpcCancelReadyAsk_reflection_;
  delete MatchRpcCancelReadyReply::default_instance_;
  delete MatchRpcCancelReadyReply_reflection_;
  delete MatchRpcRoomCancelNotify::default_instance_;
  delete MatchRpcRoomCancelNotify_reflection_;
  delete MatchRpcMemberReadyNotify::default_instance_;
  delete MatchRpcMemberReadyNotify_reflection_;
}

void protobuf_AddDesc_MatchRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MatchRpc.proto\032\022PublicStruct.proto\";\n\024"
    "MatchRpcAutoMatchAsk\022#\n\tMatchInfo\030\001 \001(\0132"
    "\020.PlayerMatchData\"Q\n\026MatchRpcAutoMatchRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022#\n\tMatchInfo\030\002 \001"
    "(\0132\020.PlayerMatchData\"\030\n\026MatchRpcCancelMa"
    "tchAsk\".\n\030MatchRpcCancelMatchReply\022\022\n\006Re"
    "sult\030\001 \001(\005:\002-1\"!\n\037MatchRpcCancelMatchNot"
    "ifyNotify\"<\n\031MatchRpcPrepareRoomNotify\022\037"
    "\n\tReadyRoom\030\001 \001(\0132\014.PBMatchRoom\"<\n\020Match"
    "RpcReadyAsk\022\025\n\tMatchType\030\001 \001(\005:\002-1\022\021\n\006Ro"
    "omId\030\002 \001(\004:\0010\";\n\022MatchRpcReadyReply\022\022\n\006R"
    "esult\030\001 \001(\005:\002-1\022\021\n\006RoleId\030\002 \001(\004:\0010\"B\n\026Ma"
    "tchRpcCancelReadyAsk\022\025\n\tMatchType\030\001 \001(\005:"
    "\002-1\022\021\n\006RoomId\030\002 \001(\004:\0010\"A\n\030MatchRpcCancel"
    "ReadyReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\021\n\006RoleId"
    "\030\002 \001(\004:\0010\"\032\n\030MatchRpcRoomCancelNotify\".\n"
    "\031MatchRpcMemberReadyNotify\022\021\n\006RoleId\030\001 \001"
    "(\004:\0010", 685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatchRpc.proto", &protobuf_RegisterTypes);
  MatchRpcAutoMatchAsk::default_instance_ = new MatchRpcAutoMatchAsk();
  MatchRpcAutoMatchReply::default_instance_ = new MatchRpcAutoMatchReply();
  MatchRpcCancelMatchAsk::default_instance_ = new MatchRpcCancelMatchAsk();
  MatchRpcCancelMatchReply::default_instance_ = new MatchRpcCancelMatchReply();
  MatchRpcCancelMatchNotifyNotify::default_instance_ = new MatchRpcCancelMatchNotifyNotify();
  MatchRpcPrepareRoomNotify::default_instance_ = new MatchRpcPrepareRoomNotify();
  MatchRpcReadyAsk::default_instance_ = new MatchRpcReadyAsk();
  MatchRpcReadyReply::default_instance_ = new MatchRpcReadyReply();
  MatchRpcCancelReadyAsk::default_instance_ = new MatchRpcCancelReadyAsk();
  MatchRpcCancelReadyReply::default_instance_ = new MatchRpcCancelReadyReply();
  MatchRpcRoomCancelNotify::default_instance_ = new MatchRpcRoomCancelNotify();
  MatchRpcMemberReadyNotify::default_instance_ = new MatchRpcMemberReadyNotify();
  MatchRpcAutoMatchAsk::default_instance_->InitAsDefaultInstance();
  MatchRpcAutoMatchReply::default_instance_->InitAsDefaultInstance();
  MatchRpcCancelMatchAsk::default_instance_->InitAsDefaultInstance();
  MatchRpcCancelMatchReply::default_instance_->InitAsDefaultInstance();
  MatchRpcCancelMatchNotifyNotify::default_instance_->InitAsDefaultInstance();
  MatchRpcPrepareRoomNotify::default_instance_->InitAsDefaultInstance();
  MatchRpcReadyAsk::default_instance_->InitAsDefaultInstance();
  MatchRpcReadyReply::default_instance_->InitAsDefaultInstance();
  MatchRpcCancelReadyAsk::default_instance_->InitAsDefaultInstance();
  MatchRpcCancelReadyReply::default_instance_->InitAsDefaultInstance();
  MatchRpcRoomCancelNotify::default_instance_->InitAsDefaultInstance();
  MatchRpcMemberReadyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MatchRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MatchRpc_2eproto {
  StaticDescriptorInitializer_MatchRpc_2eproto() {
    protobuf_AddDesc_MatchRpc_2eproto();
  }
} static_descriptor_initializer_MatchRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MatchRpcAutoMatchAsk::kMatchInfoFieldNumber;
#endif  // !_MSC_VER

MatchRpcAutoMatchAsk::MatchRpcAutoMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcAutoMatchAsk::InitAsDefaultInstance() {
  matchinfo_ = const_cast< ::PlayerMatchData*>(&::PlayerMatchData::default_instance());
}

MatchRpcAutoMatchAsk::MatchRpcAutoMatchAsk(const MatchRpcAutoMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcAutoMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  matchinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcAutoMatchAsk::~MatchRpcAutoMatchAsk() {
  SharedDtor();
}

void MatchRpcAutoMatchAsk::SharedDtor() {
  if (this != default_instance_) {
    delete matchinfo_;
  }
}

void MatchRpcAutoMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcAutoMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcAutoMatchAsk_descriptor_;
}

const MatchRpcAutoMatchAsk& MatchRpcAutoMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcAutoMatchAsk* MatchRpcAutoMatchAsk::default_instance_ = NULL;

MatchRpcAutoMatchAsk* MatchRpcAutoMatchAsk::New() const {
  return new MatchRpcAutoMatchAsk;
}

void MatchRpcAutoMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_matchinfo()) {
      if (matchinfo_ != NULL) matchinfo_->::PlayerMatchData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcAutoMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerMatchData MatchInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcAutoMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerMatchData MatchInfo = 1;
  if (has_matchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matchinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcAutoMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerMatchData MatchInfo = 1;
  if (has_matchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matchinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcAutoMatchAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerMatchData MatchInfo = 1;
    if (has_matchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcAutoMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcAutoMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcAutoMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcAutoMatchAsk::MergeFrom(const MatchRpcAutoMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchinfo()) {
      mutable_matchinfo()->::PlayerMatchData::MergeFrom(from.matchinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcAutoMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcAutoMatchAsk::CopyFrom(const MatchRpcAutoMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcAutoMatchAsk::IsInitialized() const {

  return true;
}

void MatchRpcAutoMatchAsk::Swap(MatchRpcAutoMatchAsk* other) {
  if (other != this) {
    std::swap(matchinfo_, other->matchinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcAutoMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcAutoMatchAsk_descriptor_;
  metadata.reflection = MatchRpcAutoMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcAutoMatchReply::kResultFieldNumber;
const int MatchRpcAutoMatchReply::kMatchInfoFieldNumber;
#endif  // !_MSC_VER

MatchRpcAutoMatchReply::MatchRpcAutoMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcAutoMatchReply::InitAsDefaultInstance() {
  matchinfo_ = const_cast< ::PlayerMatchData*>(&::PlayerMatchData::default_instance());
}

MatchRpcAutoMatchReply::MatchRpcAutoMatchReply(const MatchRpcAutoMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcAutoMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  matchinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcAutoMatchReply::~MatchRpcAutoMatchReply() {
  SharedDtor();
}

void MatchRpcAutoMatchReply::SharedDtor() {
  if (this != default_instance_) {
    delete matchinfo_;
  }
}

void MatchRpcAutoMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcAutoMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcAutoMatchReply_descriptor_;
}

const MatchRpcAutoMatchReply& MatchRpcAutoMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcAutoMatchReply* MatchRpcAutoMatchReply::default_instance_ = NULL;

MatchRpcAutoMatchReply* MatchRpcAutoMatchReply::New() const {
  return new MatchRpcAutoMatchReply;
}

void MatchRpcAutoMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    if (has_matchinfo()) {
      if (matchinfo_ != NULL) matchinfo_->::PlayerMatchData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcAutoMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MatchInfo;
        break;
      }

      // optional .PlayerMatchData MatchInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcAutoMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .PlayerMatchData MatchInfo = 2;
  if (has_matchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcAutoMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .PlayerMatchData MatchInfo = 2;
  if (has_matchinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcAutoMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .PlayerMatchData MatchInfo = 2;
    if (has_matchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcAutoMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcAutoMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcAutoMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcAutoMatchReply::MergeFrom(const MatchRpcAutoMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_matchinfo()) {
      mutable_matchinfo()->::PlayerMatchData::MergeFrom(from.matchinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcAutoMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcAutoMatchReply::CopyFrom(const MatchRpcAutoMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcAutoMatchReply::IsInitialized() const {

  return true;
}

void MatchRpcAutoMatchReply::Swap(MatchRpcAutoMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(matchinfo_, other->matchinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcAutoMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcAutoMatchReply_descriptor_;
  metadata.reflection = MatchRpcAutoMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchRpcCancelMatchAsk::MatchRpcCancelMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcCancelMatchAsk::InitAsDefaultInstance() {
}

MatchRpcCancelMatchAsk::MatchRpcCancelMatchAsk(const MatchRpcCancelMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcCancelMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcCancelMatchAsk::~MatchRpcCancelMatchAsk() {
  SharedDtor();
}

void MatchRpcCancelMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcCancelMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcCancelMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcCancelMatchAsk_descriptor_;
}

const MatchRpcCancelMatchAsk& MatchRpcCancelMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcCancelMatchAsk* MatchRpcCancelMatchAsk::default_instance_ = NULL;

MatchRpcCancelMatchAsk* MatchRpcCancelMatchAsk::New() const {
  return new MatchRpcCancelMatchAsk;
}

void MatchRpcCancelMatchAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcCancelMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchRpcCancelMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcCancelMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcCancelMatchAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcCancelMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcCancelMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcCancelMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcCancelMatchAsk::MergeFrom(const MatchRpcCancelMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcCancelMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcCancelMatchAsk::CopyFrom(const MatchRpcCancelMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcCancelMatchAsk::IsInitialized() const {

  return true;
}

void MatchRpcCancelMatchAsk::Swap(MatchRpcCancelMatchAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcCancelMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcCancelMatchAsk_descriptor_;
  metadata.reflection = MatchRpcCancelMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcCancelMatchReply::kResultFieldNumber;
#endif  // !_MSC_VER

MatchRpcCancelMatchReply::MatchRpcCancelMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcCancelMatchReply::InitAsDefaultInstance() {
}

MatchRpcCancelMatchReply::MatchRpcCancelMatchReply(const MatchRpcCancelMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcCancelMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcCancelMatchReply::~MatchRpcCancelMatchReply() {
  SharedDtor();
}

void MatchRpcCancelMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcCancelMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcCancelMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcCancelMatchReply_descriptor_;
}

const MatchRpcCancelMatchReply& MatchRpcCancelMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcCancelMatchReply* MatchRpcCancelMatchReply::default_instance_ = NULL;

MatchRpcCancelMatchReply* MatchRpcCancelMatchReply::New() const {
  return new MatchRpcCancelMatchReply;
}

void MatchRpcCancelMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcCancelMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcCancelMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcCancelMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcCancelMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcCancelMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcCancelMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcCancelMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcCancelMatchReply::MergeFrom(const MatchRpcCancelMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcCancelMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcCancelMatchReply::CopyFrom(const MatchRpcCancelMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcCancelMatchReply::IsInitialized() const {

  return true;
}

void MatchRpcCancelMatchReply::Swap(MatchRpcCancelMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcCancelMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcCancelMatchReply_descriptor_;
  metadata.reflection = MatchRpcCancelMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchRpcCancelMatchNotifyNotify::MatchRpcCancelMatchNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcCancelMatchNotifyNotify::InitAsDefaultInstance() {
}

MatchRpcCancelMatchNotifyNotify::MatchRpcCancelMatchNotifyNotify(const MatchRpcCancelMatchNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcCancelMatchNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcCancelMatchNotifyNotify::~MatchRpcCancelMatchNotifyNotify() {
  SharedDtor();
}

void MatchRpcCancelMatchNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcCancelMatchNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcCancelMatchNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcCancelMatchNotifyNotify_descriptor_;
}

const MatchRpcCancelMatchNotifyNotify& MatchRpcCancelMatchNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcCancelMatchNotifyNotify* MatchRpcCancelMatchNotifyNotify::default_instance_ = NULL;

MatchRpcCancelMatchNotifyNotify* MatchRpcCancelMatchNotifyNotify::New() const {
  return new MatchRpcCancelMatchNotifyNotify;
}

void MatchRpcCancelMatchNotifyNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcCancelMatchNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchRpcCancelMatchNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcCancelMatchNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcCancelMatchNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcCancelMatchNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcCancelMatchNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcCancelMatchNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcCancelMatchNotifyNotify::MergeFrom(const MatchRpcCancelMatchNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcCancelMatchNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcCancelMatchNotifyNotify::CopyFrom(const MatchRpcCancelMatchNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcCancelMatchNotifyNotify::IsInitialized() const {

  return true;
}

void MatchRpcCancelMatchNotifyNotify::Swap(MatchRpcCancelMatchNotifyNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcCancelMatchNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcCancelMatchNotifyNotify_descriptor_;
  metadata.reflection = MatchRpcCancelMatchNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcPrepareRoomNotify::kReadyRoomFieldNumber;
#endif  // !_MSC_VER

MatchRpcPrepareRoomNotify::MatchRpcPrepareRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcPrepareRoomNotify::InitAsDefaultInstance() {
  readyroom_ = const_cast< ::PBMatchRoom*>(&::PBMatchRoom::default_instance());
}

MatchRpcPrepareRoomNotify::MatchRpcPrepareRoomNotify(const MatchRpcPrepareRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcPrepareRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  readyroom_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcPrepareRoomNotify::~MatchRpcPrepareRoomNotify() {
  SharedDtor();
}

void MatchRpcPrepareRoomNotify::SharedDtor() {
  if (this != default_instance_) {
    delete readyroom_;
  }
}

void MatchRpcPrepareRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcPrepareRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcPrepareRoomNotify_descriptor_;
}

const MatchRpcPrepareRoomNotify& MatchRpcPrepareRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcPrepareRoomNotify* MatchRpcPrepareRoomNotify::default_instance_ = NULL;

MatchRpcPrepareRoomNotify* MatchRpcPrepareRoomNotify::New() const {
  return new MatchRpcPrepareRoomNotify;
}

void MatchRpcPrepareRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_readyroom()) {
      if (readyroom_ != NULL) readyroom_->::PBMatchRoom::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcPrepareRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBMatchRoom ReadyRoom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readyroom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcPrepareRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBMatchRoom ReadyRoom = 1;
  if (has_readyroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->readyroom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcPrepareRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBMatchRoom ReadyRoom = 1;
  if (has_readyroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->readyroom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcPrepareRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBMatchRoom ReadyRoom = 1;
    if (has_readyroom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readyroom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcPrepareRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcPrepareRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcPrepareRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcPrepareRoomNotify::MergeFrom(const MatchRpcPrepareRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_readyroom()) {
      mutable_readyroom()->::PBMatchRoom::MergeFrom(from.readyroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcPrepareRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcPrepareRoomNotify::CopyFrom(const MatchRpcPrepareRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcPrepareRoomNotify::IsInitialized() const {

  return true;
}

void MatchRpcPrepareRoomNotify::Swap(MatchRpcPrepareRoomNotify* other) {
  if (other != this) {
    std::swap(readyroom_, other->readyroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcPrepareRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcPrepareRoomNotify_descriptor_;
  metadata.reflection = MatchRpcPrepareRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcReadyAsk::kMatchTypeFieldNumber;
const int MatchRpcReadyAsk::kRoomIdFieldNumber;
#endif  // !_MSC_VER

MatchRpcReadyAsk::MatchRpcReadyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcReadyAsk::InitAsDefaultInstance() {
}

MatchRpcReadyAsk::MatchRpcReadyAsk(const MatchRpcReadyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcReadyAsk::SharedCtor() {
  _cached_size_ = 0;
  matchtype_ = -1;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcReadyAsk::~MatchRpcReadyAsk() {
  SharedDtor();
}

void MatchRpcReadyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcReadyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcReadyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcReadyAsk_descriptor_;
}

const MatchRpcReadyAsk& MatchRpcReadyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcReadyAsk* MatchRpcReadyAsk::default_instance_ = NULL;

MatchRpcReadyAsk* MatchRpcReadyAsk::New() const {
  return new MatchRpcReadyAsk;
}

void MatchRpcReadyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchtype_ = -1;
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcReadyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MatchType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomId;
        break;
      }

      // optional uint64 RoomId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcReadyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MatchType = 1 [default = -1];
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchtype(), output);
  }

  // optional uint64 RoomId = 2 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcReadyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MatchType = 1 [default = -1];
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchtype(), target);
  }

  // optional uint64 RoomId = 2 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcReadyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MatchType = 1 [default = -1];
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

    // optional uint64 RoomId = 2 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcReadyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcReadyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcReadyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcReadyAsk::MergeFrom(const MatchRpcReadyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcReadyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcReadyAsk::CopyFrom(const MatchRpcReadyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcReadyAsk::IsInitialized() const {

  return true;
}

void MatchRpcReadyAsk::Swap(MatchRpcReadyAsk* other) {
  if (other != this) {
    std::swap(matchtype_, other->matchtype_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcReadyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcReadyAsk_descriptor_;
  metadata.reflection = MatchRpcReadyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcReadyReply::kResultFieldNumber;
const int MatchRpcReadyReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MatchRpcReadyReply::MatchRpcReadyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcReadyReply::InitAsDefaultInstance() {
}

MatchRpcReadyReply::MatchRpcReadyReply(const MatchRpcReadyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcReadyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcReadyReply::~MatchRpcReadyReply() {
  SharedDtor();
}

void MatchRpcReadyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcReadyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcReadyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcReadyReply_descriptor_;
}

const MatchRpcReadyReply& MatchRpcReadyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcReadyReply* MatchRpcReadyReply::default_instance_ = NULL;

MatchRpcReadyReply* MatchRpcReadyReply::New() const {
  return new MatchRpcReadyReply;
}

void MatchRpcReadyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcReadyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcReadyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcReadyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcReadyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcReadyReply::MergeFrom(const MatchRpcReadyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcReadyReply::CopyFrom(const MatchRpcReadyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcReadyReply::IsInitialized() const {

  return true;
}

void MatchRpcReadyReply::Swap(MatchRpcReadyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcReadyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcReadyReply_descriptor_;
  metadata.reflection = MatchRpcReadyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcCancelReadyAsk::kMatchTypeFieldNumber;
const int MatchRpcCancelReadyAsk::kRoomIdFieldNumber;
#endif  // !_MSC_VER

MatchRpcCancelReadyAsk::MatchRpcCancelReadyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcCancelReadyAsk::InitAsDefaultInstance() {
}

MatchRpcCancelReadyAsk::MatchRpcCancelReadyAsk(const MatchRpcCancelReadyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcCancelReadyAsk::SharedCtor() {
  _cached_size_ = 0;
  matchtype_ = -1;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcCancelReadyAsk::~MatchRpcCancelReadyAsk() {
  SharedDtor();
}

void MatchRpcCancelReadyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcCancelReadyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcCancelReadyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcCancelReadyAsk_descriptor_;
}

const MatchRpcCancelReadyAsk& MatchRpcCancelReadyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcCancelReadyAsk* MatchRpcCancelReadyAsk::default_instance_ = NULL;

MatchRpcCancelReadyAsk* MatchRpcCancelReadyAsk::New() const {
  return new MatchRpcCancelReadyAsk;
}

void MatchRpcCancelReadyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchtype_ = -1;
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcCancelReadyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MatchType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomId;
        break;
      }

      // optional uint64 RoomId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcCancelReadyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MatchType = 1 [default = -1];
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchtype(), output);
  }

  // optional uint64 RoomId = 2 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcCancelReadyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MatchType = 1 [default = -1];
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchtype(), target);
  }

  // optional uint64 RoomId = 2 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcCancelReadyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MatchType = 1 [default = -1];
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

    // optional uint64 RoomId = 2 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcCancelReadyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcCancelReadyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcCancelReadyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcCancelReadyAsk::MergeFrom(const MatchRpcCancelReadyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcCancelReadyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcCancelReadyAsk::CopyFrom(const MatchRpcCancelReadyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcCancelReadyAsk::IsInitialized() const {

  return true;
}

void MatchRpcCancelReadyAsk::Swap(MatchRpcCancelReadyAsk* other) {
  if (other != this) {
    std::swap(matchtype_, other->matchtype_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcCancelReadyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcCancelReadyAsk_descriptor_;
  metadata.reflection = MatchRpcCancelReadyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcCancelReadyReply::kResultFieldNumber;
const int MatchRpcCancelReadyReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MatchRpcCancelReadyReply::MatchRpcCancelReadyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcCancelReadyReply::InitAsDefaultInstance() {
}

MatchRpcCancelReadyReply::MatchRpcCancelReadyReply(const MatchRpcCancelReadyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcCancelReadyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcCancelReadyReply::~MatchRpcCancelReadyReply() {
  SharedDtor();
}

void MatchRpcCancelReadyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcCancelReadyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcCancelReadyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcCancelReadyReply_descriptor_;
}

const MatchRpcCancelReadyReply& MatchRpcCancelReadyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcCancelReadyReply* MatchRpcCancelReadyReply::default_instance_ = NULL;

MatchRpcCancelReadyReply* MatchRpcCancelReadyReply::New() const {
  return new MatchRpcCancelReadyReply;
}

void MatchRpcCancelReadyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcCancelReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcCancelReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcCancelReadyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcCancelReadyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcCancelReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcCancelReadyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcCancelReadyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcCancelReadyReply::MergeFrom(const MatchRpcCancelReadyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcCancelReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcCancelReadyReply::CopyFrom(const MatchRpcCancelReadyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcCancelReadyReply::IsInitialized() const {

  return true;
}

void MatchRpcCancelReadyReply::Swap(MatchRpcCancelReadyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcCancelReadyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcCancelReadyReply_descriptor_;
  metadata.reflection = MatchRpcCancelReadyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchRpcRoomCancelNotify::MatchRpcRoomCancelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcRoomCancelNotify::InitAsDefaultInstance() {
}

MatchRpcRoomCancelNotify::MatchRpcRoomCancelNotify(const MatchRpcRoomCancelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcRoomCancelNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcRoomCancelNotify::~MatchRpcRoomCancelNotify() {
  SharedDtor();
}

void MatchRpcRoomCancelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcRoomCancelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcRoomCancelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcRoomCancelNotify_descriptor_;
}

const MatchRpcRoomCancelNotify& MatchRpcRoomCancelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcRoomCancelNotify* MatchRpcRoomCancelNotify::default_instance_ = NULL;

MatchRpcRoomCancelNotify* MatchRpcRoomCancelNotify::New() const {
  return new MatchRpcRoomCancelNotify;
}

void MatchRpcRoomCancelNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcRoomCancelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchRpcRoomCancelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcRoomCancelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcRoomCancelNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcRoomCancelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcRoomCancelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcRoomCancelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcRoomCancelNotify::MergeFrom(const MatchRpcRoomCancelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcRoomCancelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcRoomCancelNotify::CopyFrom(const MatchRpcRoomCancelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcRoomCancelNotify::IsInitialized() const {

  return true;
}

void MatchRpcRoomCancelNotify::Swap(MatchRpcRoomCancelNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcRoomCancelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcRoomCancelNotify_descriptor_;
  metadata.reflection = MatchRpcRoomCancelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRpcMemberReadyNotify::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MatchRpcMemberReadyNotify::MatchRpcMemberReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRpcMemberReadyNotify::InitAsDefaultInstance() {
}

MatchRpcMemberReadyNotify::MatchRpcMemberReadyNotify(const MatchRpcMemberReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRpcMemberReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRpcMemberReadyNotify::~MatchRpcMemberReadyNotify() {
  SharedDtor();
}

void MatchRpcMemberReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRpcMemberReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRpcMemberReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRpcMemberReadyNotify_descriptor_;
}

const MatchRpcMemberReadyNotify& MatchRpcMemberReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchRpc_2eproto();
  return *default_instance_;
}

MatchRpcMemberReadyNotify* MatchRpcMemberReadyNotify::default_instance_ = NULL;

MatchRpcMemberReadyNotify* MatchRpcMemberReadyNotify::New() const {
  return new MatchRpcMemberReadyNotify;
}

void MatchRpcMemberReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRpcMemberReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRpcMemberReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRpcMemberReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRpcMemberReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRpcMemberReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRpcMemberReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRpcMemberReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRpcMemberReadyNotify::MergeFrom(const MatchRpcMemberReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRpcMemberReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRpcMemberReadyNotify::CopyFrom(const MatchRpcMemberReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRpcMemberReadyNotify::IsInitialized() const {

  return true;
}

void MatchRpcMemberReadyNotify::Swap(MatchRpcMemberReadyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRpcMemberReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRpcMemberReadyNotify_descriptor_;
  metadata.reflection = MatchRpcMemberReadyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
