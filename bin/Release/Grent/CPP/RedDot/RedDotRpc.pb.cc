// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedDotRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RedDotRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RedDotRpcSyncRedDotAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotRpcSyncRedDotAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDotRpcSyncRedDotReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotRpcSyncRedDotReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDotRpcRemoveRedDotAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotRpcRemoveRedDotAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDotRpcRemoveRedDotReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotRpcRemoveRedDotReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDotRpcUpdateRedDotNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotRpcUpdateRedDotNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RedDotRpc_2eproto() {
  protobuf_AddDesc_RedDotRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RedDotRpc.proto");
  GOOGLE_CHECK(file != NULL);
  RedDotRpcSyncRedDotAsk_descriptor_ = file->message_type(0);
  static const int RedDotRpcSyncRedDotAsk_offsets_[1] = {
  };
  RedDotRpcSyncRedDotAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotRpcSyncRedDotAsk_descriptor_,
      RedDotRpcSyncRedDotAsk::default_instance_,
      RedDotRpcSyncRedDotAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotRpcSyncRedDotAsk));
  RedDotRpcSyncRedDotReply_descriptor_ = file->message_type(1);
  static const int RedDotRpcSyncRedDotReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotReply, reddotinfolist_),
  };
  RedDotRpcSyncRedDotReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotRpcSyncRedDotReply_descriptor_,
      RedDotRpcSyncRedDotReply::default_instance_,
      RedDotRpcSyncRedDotReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcSyncRedDotReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotRpcSyncRedDotReply));
  RedDotRpcRemoveRedDotAsk_descriptor_ = file->message_type(2);
  static const int RedDotRpcRemoveRedDotAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotAsk, type_),
  };
  RedDotRpcRemoveRedDotAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotRpcRemoveRedDotAsk_descriptor_,
      RedDotRpcRemoveRedDotAsk::default_instance_,
      RedDotRpcRemoveRedDotAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotRpcRemoveRedDotAsk));
  RedDotRpcRemoveRedDotReply_descriptor_ = file->message_type(3);
  static const int RedDotRpcRemoveRedDotReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotReply, result_),
  };
  RedDotRpcRemoveRedDotReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotRpcRemoveRedDotReply_descriptor_,
      RedDotRpcRemoveRedDotReply::default_instance_,
      RedDotRpcRemoveRedDotReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcRemoveRedDotReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotRpcRemoveRedDotReply));
  RedDotRpcUpdateRedDotNotify_descriptor_ = file->message_type(4);
  static const int RedDotRpcUpdateRedDotNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcUpdateRedDotNotify, reddotinfo_),
  };
  RedDotRpcUpdateRedDotNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotRpcUpdateRedDotNotify_descriptor_,
      RedDotRpcUpdateRedDotNotify::default_instance_,
      RedDotRpcUpdateRedDotNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcUpdateRedDotNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotRpcUpdateRedDotNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotRpcUpdateRedDotNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RedDotRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotRpcSyncRedDotAsk_descriptor_, &RedDotRpcSyncRedDotAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotRpcSyncRedDotReply_descriptor_, &RedDotRpcSyncRedDotReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotRpcRemoveRedDotAsk_descriptor_, &RedDotRpcRemoveRedDotAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotRpcRemoveRedDotReply_descriptor_, &RedDotRpcRemoveRedDotReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotRpcUpdateRedDotNotify_descriptor_, &RedDotRpcUpdateRedDotNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RedDotRpc_2eproto() {
  delete RedDotRpcSyncRedDotAsk::default_instance_;
  delete RedDotRpcSyncRedDotAsk_reflection_;
  delete RedDotRpcSyncRedDotReply::default_instance_;
  delete RedDotRpcSyncRedDotReply_reflection_;
  delete RedDotRpcRemoveRedDotAsk::default_instance_;
  delete RedDotRpcRemoveRedDotAsk_reflection_;
  delete RedDotRpcRemoveRedDotReply::default_instance_;
  delete RedDotRpcRemoveRedDotReply_reflection_;
  delete RedDotRpcUpdateRedDotNotify::default_instance_;
  delete RedDotRpcUpdateRedDotNotify_reflection_;
}

void protobuf_AddDesc_RedDotRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RedDotRpc.proto\032\022PublicStruct.proto\"\030\n"
    "\026RedDotRpcSyncRedDotAsk\"S\n\030RedDotRpcSync"
    "RedDotReply\022\022\n\006Result\030\001 \001(\005:\002-1\022#\n\016RedDo"
    "tInfoList\030\002 \003(\0132\013.RedDotInfo\",\n\030RedDotRp"
    "cRemoveRedDotAsk\022\020\n\004Type\030\001 \001(\005:\002-1\"0\n\032Re"
    "dDotRpcRemoveRedDotReply\022\022\n\006Result\030\001 \001(\005"
    ":\002-1\">\n\033RedDotRpcUpdateRedDotNotify\022\037\n\nR"
    "edDotInfo\030\001 \001(\0132\013.RedDotInfo", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RedDotRpc.proto", &protobuf_RegisterTypes);
  RedDotRpcSyncRedDotAsk::default_instance_ = new RedDotRpcSyncRedDotAsk();
  RedDotRpcSyncRedDotReply::default_instance_ = new RedDotRpcSyncRedDotReply();
  RedDotRpcRemoveRedDotAsk::default_instance_ = new RedDotRpcRemoveRedDotAsk();
  RedDotRpcRemoveRedDotReply::default_instance_ = new RedDotRpcRemoveRedDotReply();
  RedDotRpcUpdateRedDotNotify::default_instance_ = new RedDotRpcUpdateRedDotNotify();
  RedDotRpcSyncRedDotAsk::default_instance_->InitAsDefaultInstance();
  RedDotRpcSyncRedDotReply::default_instance_->InitAsDefaultInstance();
  RedDotRpcRemoveRedDotAsk::default_instance_->InitAsDefaultInstance();
  RedDotRpcRemoveRedDotReply::default_instance_->InitAsDefaultInstance();
  RedDotRpcUpdateRedDotNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RedDotRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RedDotRpc_2eproto {
  StaticDescriptorInitializer_RedDotRpc_2eproto() {
    protobuf_AddDesc_RedDotRpc_2eproto();
  }
} static_descriptor_initializer_RedDotRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RedDotRpcSyncRedDotAsk::RedDotRpcSyncRedDotAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotRpcSyncRedDotAsk::InitAsDefaultInstance() {
}

RedDotRpcSyncRedDotAsk::RedDotRpcSyncRedDotAsk(const RedDotRpcSyncRedDotAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotRpcSyncRedDotAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotRpcSyncRedDotAsk::~RedDotRpcSyncRedDotAsk() {
  SharedDtor();
}

void RedDotRpcSyncRedDotAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDotRpcSyncRedDotAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotRpcSyncRedDotAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotRpcSyncRedDotAsk_descriptor_;
}

const RedDotRpcSyncRedDotAsk& RedDotRpcSyncRedDotAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedDotRpc_2eproto();
  return *default_instance_;
}

RedDotRpcSyncRedDotAsk* RedDotRpcSyncRedDotAsk::default_instance_ = NULL;

RedDotRpcSyncRedDotAsk* RedDotRpcSyncRedDotAsk::New() const {
  return new RedDotRpcSyncRedDotAsk;
}

void RedDotRpcSyncRedDotAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotRpcSyncRedDotAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RedDotRpcSyncRedDotAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotRpcSyncRedDotAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotRpcSyncRedDotAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotRpcSyncRedDotAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotRpcSyncRedDotAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotRpcSyncRedDotAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotRpcSyncRedDotAsk::MergeFrom(const RedDotRpcSyncRedDotAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotRpcSyncRedDotAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotRpcSyncRedDotAsk::CopyFrom(const RedDotRpcSyncRedDotAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotRpcSyncRedDotAsk::IsInitialized() const {

  return true;
}

void RedDotRpcSyncRedDotAsk::Swap(RedDotRpcSyncRedDotAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotRpcSyncRedDotAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotRpcSyncRedDotAsk_descriptor_;
  metadata.reflection = RedDotRpcSyncRedDotAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDotRpcSyncRedDotReply::kResultFieldNumber;
const int RedDotRpcSyncRedDotReply::kRedDotInfoListFieldNumber;
#endif  // !_MSC_VER

RedDotRpcSyncRedDotReply::RedDotRpcSyncRedDotReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotRpcSyncRedDotReply::InitAsDefaultInstance() {
}

RedDotRpcSyncRedDotReply::RedDotRpcSyncRedDotReply(const RedDotRpcSyncRedDotReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotRpcSyncRedDotReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotRpcSyncRedDotReply::~RedDotRpcSyncRedDotReply() {
  SharedDtor();
}

void RedDotRpcSyncRedDotReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDotRpcSyncRedDotReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotRpcSyncRedDotReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotRpcSyncRedDotReply_descriptor_;
}

const RedDotRpcSyncRedDotReply& RedDotRpcSyncRedDotReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedDotRpc_2eproto();
  return *default_instance_;
}

RedDotRpcSyncRedDotReply* RedDotRpcSyncRedDotReply::default_instance_ = NULL;

RedDotRpcSyncRedDotReply* RedDotRpcSyncRedDotReply::New() const {
  return new RedDotRpcSyncRedDotReply;
}

void RedDotRpcSyncRedDotReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  reddotinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotRpcSyncRedDotReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RedDotInfoList;
        break;
      }

      // repeated .RedDotInfo RedDotInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RedDotInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reddotinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RedDotInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDotRpcSyncRedDotReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .RedDotInfo RedDotInfoList = 2;
  for (int i = 0; i < this->reddotinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reddotinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotRpcSyncRedDotReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .RedDotInfo RedDotInfoList = 2;
  for (int i = 0; i < this->reddotinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reddotinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotRpcSyncRedDotReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .RedDotInfo RedDotInfoList = 2;
  total_size += 1 * this->reddotinfolist_size();
  for (int i = 0; i < this->reddotinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reddotinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotRpcSyncRedDotReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotRpcSyncRedDotReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotRpcSyncRedDotReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotRpcSyncRedDotReply::MergeFrom(const RedDotRpcSyncRedDotReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  reddotinfolist_.MergeFrom(from.reddotinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotRpcSyncRedDotReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotRpcSyncRedDotReply::CopyFrom(const RedDotRpcSyncRedDotReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotRpcSyncRedDotReply::IsInitialized() const {

  return true;
}

void RedDotRpcSyncRedDotReply::Swap(RedDotRpcSyncRedDotReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    reddotinfolist_.Swap(&other->reddotinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotRpcSyncRedDotReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotRpcSyncRedDotReply_descriptor_;
  metadata.reflection = RedDotRpcSyncRedDotReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDotRpcRemoveRedDotAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

RedDotRpcRemoveRedDotAsk::RedDotRpcRemoveRedDotAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotRpcRemoveRedDotAsk::InitAsDefaultInstance() {
}

RedDotRpcRemoveRedDotAsk::RedDotRpcRemoveRedDotAsk(const RedDotRpcRemoveRedDotAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotRpcRemoveRedDotAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotRpcRemoveRedDotAsk::~RedDotRpcRemoveRedDotAsk() {
  SharedDtor();
}

void RedDotRpcRemoveRedDotAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDotRpcRemoveRedDotAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotRpcRemoveRedDotAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotRpcRemoveRedDotAsk_descriptor_;
}

const RedDotRpcRemoveRedDotAsk& RedDotRpcRemoveRedDotAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedDotRpc_2eproto();
  return *default_instance_;
}

RedDotRpcRemoveRedDotAsk* RedDotRpcRemoveRedDotAsk::default_instance_ = NULL;

RedDotRpcRemoveRedDotAsk* RedDotRpcRemoveRedDotAsk::New() const {
  return new RedDotRpcRemoveRedDotAsk;
}

void RedDotRpcRemoveRedDotAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotRpcRemoveRedDotAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDotRpcRemoveRedDotAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotRpcRemoveRedDotAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotRpcRemoveRedDotAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotRpcRemoveRedDotAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotRpcRemoveRedDotAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotRpcRemoveRedDotAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotRpcRemoveRedDotAsk::MergeFrom(const RedDotRpcRemoveRedDotAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotRpcRemoveRedDotAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotRpcRemoveRedDotAsk::CopyFrom(const RedDotRpcRemoveRedDotAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotRpcRemoveRedDotAsk::IsInitialized() const {

  return true;
}

void RedDotRpcRemoveRedDotAsk::Swap(RedDotRpcRemoveRedDotAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotRpcRemoveRedDotAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotRpcRemoveRedDotAsk_descriptor_;
  metadata.reflection = RedDotRpcRemoveRedDotAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDotRpcRemoveRedDotReply::kResultFieldNumber;
#endif  // !_MSC_VER

RedDotRpcRemoveRedDotReply::RedDotRpcRemoveRedDotReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotRpcRemoveRedDotReply::InitAsDefaultInstance() {
}

RedDotRpcRemoveRedDotReply::RedDotRpcRemoveRedDotReply(const RedDotRpcRemoveRedDotReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotRpcRemoveRedDotReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotRpcRemoveRedDotReply::~RedDotRpcRemoveRedDotReply() {
  SharedDtor();
}

void RedDotRpcRemoveRedDotReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDotRpcRemoveRedDotReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotRpcRemoveRedDotReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotRpcRemoveRedDotReply_descriptor_;
}

const RedDotRpcRemoveRedDotReply& RedDotRpcRemoveRedDotReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedDotRpc_2eproto();
  return *default_instance_;
}

RedDotRpcRemoveRedDotReply* RedDotRpcRemoveRedDotReply::default_instance_ = NULL;

RedDotRpcRemoveRedDotReply* RedDotRpcRemoveRedDotReply::New() const {
  return new RedDotRpcRemoveRedDotReply;
}

void RedDotRpcRemoveRedDotReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotRpcRemoveRedDotReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDotRpcRemoveRedDotReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotRpcRemoveRedDotReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotRpcRemoveRedDotReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotRpcRemoveRedDotReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotRpcRemoveRedDotReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotRpcRemoveRedDotReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotRpcRemoveRedDotReply::MergeFrom(const RedDotRpcRemoveRedDotReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotRpcRemoveRedDotReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotRpcRemoveRedDotReply::CopyFrom(const RedDotRpcRemoveRedDotReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotRpcRemoveRedDotReply::IsInitialized() const {

  return true;
}

void RedDotRpcRemoveRedDotReply::Swap(RedDotRpcRemoveRedDotReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotRpcRemoveRedDotReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotRpcRemoveRedDotReply_descriptor_;
  metadata.reflection = RedDotRpcRemoveRedDotReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDotRpcUpdateRedDotNotify::kRedDotInfoFieldNumber;
#endif  // !_MSC_VER

RedDotRpcUpdateRedDotNotify::RedDotRpcUpdateRedDotNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotRpcUpdateRedDotNotify::InitAsDefaultInstance() {
  reddotinfo_ = const_cast< ::RedDotInfo*>(&::RedDotInfo::default_instance());
}

RedDotRpcUpdateRedDotNotify::RedDotRpcUpdateRedDotNotify(const RedDotRpcUpdateRedDotNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotRpcUpdateRedDotNotify::SharedCtor() {
  _cached_size_ = 0;
  reddotinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotRpcUpdateRedDotNotify::~RedDotRpcUpdateRedDotNotify() {
  SharedDtor();
}

void RedDotRpcUpdateRedDotNotify::SharedDtor() {
  if (this != default_instance_) {
    delete reddotinfo_;
  }
}

void RedDotRpcUpdateRedDotNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotRpcUpdateRedDotNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotRpcUpdateRedDotNotify_descriptor_;
}

const RedDotRpcUpdateRedDotNotify& RedDotRpcUpdateRedDotNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedDotRpc_2eproto();
  return *default_instance_;
}

RedDotRpcUpdateRedDotNotify* RedDotRpcUpdateRedDotNotify::default_instance_ = NULL;

RedDotRpcUpdateRedDotNotify* RedDotRpcUpdateRedDotNotify::New() const {
  return new RedDotRpcUpdateRedDotNotify;
}

void RedDotRpcUpdateRedDotNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reddotinfo()) {
      if (reddotinfo_ != NULL) reddotinfo_->::RedDotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotRpcUpdateRedDotNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RedDotInfo RedDotInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reddotinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDotRpcUpdateRedDotNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RedDotInfo RedDotInfo = 1;
  if (has_reddotinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reddotinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotRpcUpdateRedDotNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RedDotInfo RedDotInfo = 1;
  if (has_reddotinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reddotinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotRpcUpdateRedDotNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RedDotInfo RedDotInfo = 1;
    if (has_reddotinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reddotinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotRpcUpdateRedDotNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotRpcUpdateRedDotNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotRpcUpdateRedDotNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotRpcUpdateRedDotNotify::MergeFrom(const RedDotRpcUpdateRedDotNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reddotinfo()) {
      mutable_reddotinfo()->::RedDotInfo::MergeFrom(from.reddotinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotRpcUpdateRedDotNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotRpcUpdateRedDotNotify::CopyFrom(const RedDotRpcUpdateRedDotNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotRpcUpdateRedDotNotify::IsInitialized() const {

  return true;
}

void RedDotRpcUpdateRedDotNotify::Swap(RedDotRpcUpdateRedDotNotify* other) {
  if (other != this) {
    std::swap(reddotinfo_, other->reddotinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotRpcUpdateRedDotNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotRpcUpdateRedDotNotify_descriptor_;
  metadata.reflection = RedDotRpcUpdateRedDotNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
