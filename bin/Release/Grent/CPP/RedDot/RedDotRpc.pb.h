// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedDotRpc.proto

#ifndef PROTOBUF_RedDotRpc_2eproto__INCLUDED
#define PROTOBUF_RedDotRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RedDotRpc_2eproto();
void protobuf_AssignDesc_RedDotRpc_2eproto();
void protobuf_ShutdownFile_RedDotRpc_2eproto();

class RedDotRpcSyncRedDotAsk;
class RedDotRpcSyncRedDotReply;
class RedDotRpcRemoveRedDotAsk;
class RedDotRpcRemoveRedDotReply;
class RedDotRpcUpdateRedDotNotify;

// ===================================================================

class RedDotRpcSyncRedDotAsk : public ::google::protobuf::Message {
 public:
  RedDotRpcSyncRedDotAsk();
  virtual ~RedDotRpcSyncRedDotAsk();

  RedDotRpcSyncRedDotAsk(const RedDotRpcSyncRedDotAsk& from);

  inline RedDotRpcSyncRedDotAsk& operator=(const RedDotRpcSyncRedDotAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotRpcSyncRedDotAsk& default_instance();

  void Swap(RedDotRpcSyncRedDotAsk* other);

  // implements Message ----------------------------------------------

  RedDotRpcSyncRedDotAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotRpcSyncRedDotAsk& from);
  void MergeFrom(const RedDotRpcSyncRedDotAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RedDotRpcSyncRedDotAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_RedDotRpc_2eproto();
  friend void protobuf_AssignDesc_RedDotRpc_2eproto();
  friend void protobuf_ShutdownFile_RedDotRpc_2eproto();

  void InitAsDefaultInstance();
  static RedDotRpcSyncRedDotAsk* default_instance_;
};
// -------------------------------------------------------------------

class RedDotRpcSyncRedDotReply : public ::google::protobuf::Message {
 public:
  RedDotRpcSyncRedDotReply();
  virtual ~RedDotRpcSyncRedDotReply();

  RedDotRpcSyncRedDotReply(const RedDotRpcSyncRedDotReply& from);

  inline RedDotRpcSyncRedDotReply& operator=(const RedDotRpcSyncRedDotReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotRpcSyncRedDotReply& default_instance();

  void Swap(RedDotRpcSyncRedDotReply* other);

  // implements Message ----------------------------------------------

  RedDotRpcSyncRedDotReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotRpcSyncRedDotReply& from);
  void MergeFrom(const RedDotRpcSyncRedDotReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .RedDotInfo RedDotInfoList = 2;
  inline int reddotinfolist_size() const;
  inline void clear_reddotinfolist();
  static const int kRedDotInfoListFieldNumber = 2;
  inline const ::RedDotInfo& reddotinfolist(int index) const;
  inline ::RedDotInfo* mutable_reddotinfolist(int index);
  inline ::RedDotInfo* add_reddotinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::RedDotInfo >&
      reddotinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::RedDotInfo >*
      mutable_reddotinfolist();

  // @@protoc_insertion_point(class_scope:RedDotRpcSyncRedDotReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RedDotInfo > reddotinfolist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RedDotRpc_2eproto();
  friend void protobuf_AssignDesc_RedDotRpc_2eproto();
  friend void protobuf_ShutdownFile_RedDotRpc_2eproto();

  void InitAsDefaultInstance();
  static RedDotRpcSyncRedDotReply* default_instance_;
};
// -------------------------------------------------------------------

class RedDotRpcRemoveRedDotAsk : public ::google::protobuf::Message {
 public:
  RedDotRpcRemoveRedDotAsk();
  virtual ~RedDotRpcRemoveRedDotAsk();

  RedDotRpcRemoveRedDotAsk(const RedDotRpcRemoveRedDotAsk& from);

  inline RedDotRpcRemoveRedDotAsk& operator=(const RedDotRpcRemoveRedDotAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotRpcRemoveRedDotAsk& default_instance();

  void Swap(RedDotRpcRemoveRedDotAsk* other);

  // implements Message ----------------------------------------------

  RedDotRpcRemoveRedDotAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotRpcRemoveRedDotAsk& from);
  void MergeFrom(const RedDotRpcRemoveRedDotAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RedDotRpcRemoveRedDotAsk)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedDotRpc_2eproto();
  friend void protobuf_AssignDesc_RedDotRpc_2eproto();
  friend void protobuf_ShutdownFile_RedDotRpc_2eproto();

  void InitAsDefaultInstance();
  static RedDotRpcRemoveRedDotAsk* default_instance_;
};
// -------------------------------------------------------------------

class RedDotRpcRemoveRedDotReply : public ::google::protobuf::Message {
 public:
  RedDotRpcRemoveRedDotReply();
  virtual ~RedDotRpcRemoveRedDotReply();

  RedDotRpcRemoveRedDotReply(const RedDotRpcRemoveRedDotReply& from);

  inline RedDotRpcRemoveRedDotReply& operator=(const RedDotRpcRemoveRedDotReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotRpcRemoveRedDotReply& default_instance();

  void Swap(RedDotRpcRemoveRedDotReply* other);

  // implements Message ----------------------------------------------

  RedDotRpcRemoveRedDotReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotRpcRemoveRedDotReply& from);
  void MergeFrom(const RedDotRpcRemoveRedDotReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RedDotRpcRemoveRedDotReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedDotRpc_2eproto();
  friend void protobuf_AssignDesc_RedDotRpc_2eproto();
  friend void protobuf_ShutdownFile_RedDotRpc_2eproto();

  void InitAsDefaultInstance();
  static RedDotRpcRemoveRedDotReply* default_instance_;
};
// -------------------------------------------------------------------

class RedDotRpcUpdateRedDotNotify : public ::google::protobuf::Message {
 public:
  RedDotRpcUpdateRedDotNotify();
  virtual ~RedDotRpcUpdateRedDotNotify();

  RedDotRpcUpdateRedDotNotify(const RedDotRpcUpdateRedDotNotify& from);

  inline RedDotRpcUpdateRedDotNotify& operator=(const RedDotRpcUpdateRedDotNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotRpcUpdateRedDotNotify& default_instance();

  void Swap(RedDotRpcUpdateRedDotNotify* other);

  // implements Message ----------------------------------------------

  RedDotRpcUpdateRedDotNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotRpcUpdateRedDotNotify& from);
  void MergeFrom(const RedDotRpcUpdateRedDotNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RedDotInfo RedDotInfo = 1;
  inline bool has_reddotinfo() const;
  inline void clear_reddotinfo();
  static const int kRedDotInfoFieldNumber = 1;
  inline const ::RedDotInfo& reddotinfo() const;
  inline ::RedDotInfo* mutable_reddotinfo();
  inline ::RedDotInfo* release_reddotinfo();
  inline void set_allocated_reddotinfo(::RedDotInfo* reddotinfo);

  // @@protoc_insertion_point(class_scope:RedDotRpcUpdateRedDotNotify)
 private:
  inline void set_has_reddotinfo();
  inline void clear_has_reddotinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RedDotInfo* reddotinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedDotRpc_2eproto();
  friend void protobuf_AssignDesc_RedDotRpc_2eproto();
  friend void protobuf_ShutdownFile_RedDotRpc_2eproto();

  void InitAsDefaultInstance();
  static RedDotRpcUpdateRedDotNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// RedDotRpcSyncRedDotAsk

// -------------------------------------------------------------------

// RedDotRpcSyncRedDotReply

// optional int32 Result = 1 [default = -1];
inline bool RedDotRpcSyncRedDotReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDotRpcSyncRedDotReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDotRpcSyncRedDotReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDotRpcSyncRedDotReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RedDotRpcSyncRedDotReply::result() const {
  return result_;
}
inline void RedDotRpcSyncRedDotReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .RedDotInfo RedDotInfoList = 2;
inline int RedDotRpcSyncRedDotReply::reddotinfolist_size() const {
  return reddotinfolist_.size();
}
inline void RedDotRpcSyncRedDotReply::clear_reddotinfolist() {
  reddotinfolist_.Clear();
}
inline const ::RedDotInfo& RedDotRpcSyncRedDotReply::reddotinfolist(int index) const {
  return reddotinfolist_.Get(index);
}
inline ::RedDotInfo* RedDotRpcSyncRedDotReply::mutable_reddotinfolist(int index) {
  return reddotinfolist_.Mutable(index);
}
inline ::RedDotInfo* RedDotRpcSyncRedDotReply::add_reddotinfolist() {
  return reddotinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RedDotInfo >&
RedDotRpcSyncRedDotReply::reddotinfolist() const {
  return reddotinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::RedDotInfo >*
RedDotRpcSyncRedDotReply::mutable_reddotinfolist() {
  return &reddotinfolist_;
}

// -------------------------------------------------------------------

// RedDotRpcRemoveRedDotAsk

// optional int32 Type = 1 [default = -1];
inline bool RedDotRpcRemoveRedDotAsk::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDotRpcRemoveRedDotAsk::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDotRpcRemoveRedDotAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDotRpcRemoveRedDotAsk::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 RedDotRpcRemoveRedDotAsk::type() const {
  return type_;
}
inline void RedDotRpcRemoveRedDotAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RedDotRpcRemoveRedDotReply

// optional int32 Result = 1 [default = -1];
inline bool RedDotRpcRemoveRedDotReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDotRpcRemoveRedDotReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDotRpcRemoveRedDotReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDotRpcRemoveRedDotReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 RedDotRpcRemoveRedDotReply::result() const {
  return result_;
}
inline void RedDotRpcRemoveRedDotReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// RedDotRpcUpdateRedDotNotify

// optional .RedDotInfo RedDotInfo = 1;
inline bool RedDotRpcUpdateRedDotNotify::has_reddotinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDotRpcUpdateRedDotNotify::set_has_reddotinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDotRpcUpdateRedDotNotify::clear_has_reddotinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDotRpcUpdateRedDotNotify::clear_reddotinfo() {
  if (reddotinfo_ != NULL) reddotinfo_->::RedDotInfo::Clear();
  clear_has_reddotinfo();
}
inline const ::RedDotInfo& RedDotRpcUpdateRedDotNotify::reddotinfo() const {
  return reddotinfo_ != NULL ? *reddotinfo_ : *default_instance_->reddotinfo_;
}
inline ::RedDotInfo* RedDotRpcUpdateRedDotNotify::mutable_reddotinfo() {
  set_has_reddotinfo();
  if (reddotinfo_ == NULL) reddotinfo_ = new ::RedDotInfo;
  return reddotinfo_;
}
inline ::RedDotInfo* RedDotRpcUpdateRedDotNotify::release_reddotinfo() {
  clear_has_reddotinfo();
  ::RedDotInfo* temp = reddotinfo_;
  reddotinfo_ = NULL;
  return temp;
}
inline void RedDotRpcUpdateRedDotNotify::set_allocated_reddotinfo(::RedDotInfo* reddotinfo) {
  delete reddotinfo_;
  reddotinfo_ = reddotinfo;
  if (reddotinfo) {
    set_has_reddotinfo();
  } else {
    clear_has_reddotinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RedDotRpc_2eproto__INCLUDED
