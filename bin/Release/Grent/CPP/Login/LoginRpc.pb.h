// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginRpc.proto

#ifndef PROTOBUF_LoginRpc_2eproto__INCLUDED
#define PROTOBUF_LoginRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginRpc_2eproto();
void protobuf_AssignDesc_LoginRpc_2eproto();
void protobuf_ShutdownFile_LoginRpc_2eproto();

class LoginRpcLoginAsk;
class LoginRpcLoginReply;
class LoginRpcSelectCharacterAsk;
class LoginRpcSelectCharacterReply;
class LoginRpcCreateCharacterAsk;
class LoginRpcCreateCharacterReply;
class LoginRpcDeleteCharacterAsk;
class LoginRpcDeleteCharacterReply;
class LoginRpcTestAsk;
class LoginRpcTestReply;
class LoginRpcTest1Ask;
class LoginRpcTest1Reply;
class LoginRpcLoginLineUpNotify;
class LoginRpcLoginEnterGameNotify;

// ===================================================================

class LoginRpcLoginAsk : public ::google::protobuf::Message {
 public:
  LoginRpcLoginAsk();
  virtual ~LoginRpcLoginAsk();

  LoginRpcLoginAsk(const LoginRpcLoginAsk& from);

  inline LoginRpcLoginAsk& operator=(const LoginRpcLoginAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginAsk& default_instance();

  void Swap(LoginRpcLoginAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginAsk& from);
  void MergeFrom(const LoginRpcLoginAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string Passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // optional string SnId = 3;
  inline bool has_snid() const;
  inline void clear_snid();
  static const int kSnIdFieldNumber = 3;
  inline const ::std::string& snid() const;
  inline void set_snid(const ::std::string& value);
  inline void set_snid(const char* value);
  inline void set_snid(const char* value, size_t size);
  inline ::std::string* mutable_snid();
  inline ::std::string* release_snid();
  inline void set_allocated_snid(::std::string* snid);

  // optional string GameId = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 4;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // optional string Mac = 5;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 5;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string Token = 6;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 6;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginAsk)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_snid();
  inline void clear_has_snid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* passwd_;
  ::std::string* snid_;
  ::std::string* gameid_;
  ::std::string* mac_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcLoginReply : public ::google::protobuf::Message {
 public:
  LoginRpcLoginReply();
  virtual ~LoginRpcLoginReply();

  LoginRpcLoginReply(const LoginRpcLoginReply& from);

  inline LoginRpcLoginReply& operator=(const LoginRpcLoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginReply& default_instance();

  void Swap(LoginRpcLoginReply* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginReply& from);
  void MergeFrom(const LoginRpcLoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 RoleId = 2 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional .Vector3 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // repeated .CharacterInfo CharacterList = 4;
  inline int characterlist_size() const;
  inline void clear_characterlist();
  static const int kCharacterListFieldNumber = 4;
  inline const ::CharacterInfo& characterlist(int index) const;
  inline ::CharacterInfo* mutable_characterlist(int index);
  inline ::CharacterInfo* add_characterlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CharacterInfo >&
      characterlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharacterInfo >*
      mutable_characterlist();

  // optional uint64 LastSelectRoleId = 5 [default = 0];
  inline bool has_lastselectroleid() const;
  inline void clear_lastselectroleid();
  static const int kLastSelectRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 lastselectroleid() const;
  inline void set_lastselectroleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_lastselectroleid();
  inline void clear_has_lastselectroleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::Vector3* pos_;
  ::google::protobuf::RepeatedPtrField< ::CharacterInfo > characterlist_;
  ::google::protobuf::uint64 lastselectroleid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcSelectCharacterAsk : public ::google::protobuf::Message {
 public:
  LoginRpcSelectCharacterAsk();
  virtual ~LoginRpcSelectCharacterAsk();

  LoginRpcSelectCharacterAsk(const LoginRpcSelectCharacterAsk& from);

  inline LoginRpcSelectCharacterAsk& operator=(const LoginRpcSelectCharacterAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcSelectCharacterAsk& default_instance();

  void Swap(LoginRpcSelectCharacterAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcSelectCharacterAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcSelectCharacterAsk& from);
  void MergeFrom(const LoginRpcSelectCharacterAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LoginRpcSelectCharacterAsk)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcSelectCharacterAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcSelectCharacterReply : public ::google::protobuf::Message {
 public:
  LoginRpcSelectCharacterReply();
  virtual ~LoginRpcSelectCharacterReply();

  LoginRpcSelectCharacterReply(const LoginRpcSelectCharacterReply& from);

  inline LoginRpcSelectCharacterReply& operator=(const LoginRpcSelectCharacterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcSelectCharacterReply& default_instance();

  void Swap(LoginRpcSelectCharacterReply* other);

  // implements Message ----------------------------------------------

  LoginRpcSelectCharacterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcSelectCharacterReply& from);
  void MergeFrom(const LoginRpcSelectCharacterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 RoleId = 2 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 LastSceneID = 5 [default = -1];
  inline bool has_lastsceneid() const;
  inline void clear_lastsceneid();
  static const int kLastSceneIDFieldNumber = 5;
  inline ::google::protobuf::int32 lastsceneid() const;
  inline void set_lastsceneid(::google::protobuf::int32 value);

  // optional string Ban_Reason = 6;
  inline bool has_ban_reason() const;
  inline void clear_ban_reason();
  static const int kBanReasonFieldNumber = 6;
  inline const ::std::string& ban_reason() const;
  inline void set_ban_reason(const ::std::string& value);
  inline void set_ban_reason(const char* value);
  inline void set_ban_reason(const char* value, size_t size);
  inline ::std::string* mutable_ban_reason();
  inline ::std::string* release_ban_reason();
  inline void set_allocated_ban_reason(::std::string* ban_reason);

  // optional int32 LineId = 7 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIdFieldNumber = 7;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // optional int32 Ban_EndTime = 8 [default = -1];
  inline bool has_ban_endtime() const;
  inline void clear_ban_endtime();
  static const int kBanEndTimeFieldNumber = 8;
  inline ::google::protobuf::int32 ban_endtime() const;
  inline void set_ban_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcSelectCharacterReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_lastsceneid();
  inline void clear_has_lastsceneid();
  inline void set_has_ban_reason();
  inline void clear_has_ban_reason();
  inline void set_has_lineid();
  inline void clear_has_lineid();
  inline void set_has_ban_endtime();
  inline void clear_has_ban_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 lastsceneid_;
  ::std::string* ban_reason_;
  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 ban_endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcSelectCharacterReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcCreateCharacterAsk : public ::google::protobuf::Message {
 public:
  LoginRpcCreateCharacterAsk();
  virtual ~LoginRpcCreateCharacterAsk();

  LoginRpcCreateCharacterAsk(const LoginRpcCreateCharacterAsk& from);

  inline LoginRpcCreateCharacterAsk& operator=(const LoginRpcCreateCharacterAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcCreateCharacterAsk& default_instance();

  void Swap(LoginRpcCreateCharacterAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcCreateCharacterAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcCreateCharacterAsk& from);
  void MergeFrom(const LoginRpcCreateCharacterAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 ConfigId = 2 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcCreateCharacterAsk)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 configid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcCreateCharacterAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcCreateCharacterReply : public ::google::protobuf::Message {
 public:
  LoginRpcCreateCharacterReply();
  virtual ~LoginRpcCreateCharacterReply();

  LoginRpcCreateCharacterReply(const LoginRpcCreateCharacterReply& from);

  inline LoginRpcCreateCharacterReply& operator=(const LoginRpcCreateCharacterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcCreateCharacterReply& default_instance();

  void Swap(LoginRpcCreateCharacterReply* other);

  // implements Message ----------------------------------------------

  LoginRpcCreateCharacterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcCreateCharacterReply& from);
  void MergeFrom(const LoginRpcCreateCharacterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 RoleId = 2 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 TimeStamp = 3 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcCreateCharacterReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcCreateCharacterReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcDeleteCharacterAsk : public ::google::protobuf::Message {
 public:
  LoginRpcDeleteCharacterAsk();
  virtual ~LoginRpcDeleteCharacterAsk();

  LoginRpcDeleteCharacterAsk(const LoginRpcDeleteCharacterAsk& from);

  inline LoginRpcDeleteCharacterAsk& operator=(const LoginRpcDeleteCharacterAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcDeleteCharacterAsk& default_instance();

  void Swap(LoginRpcDeleteCharacterAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcDeleteCharacterAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcDeleteCharacterAsk& from);
  void MergeFrom(const LoginRpcDeleteCharacterAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:LoginRpcDeleteCharacterAsk)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcDeleteCharacterAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcDeleteCharacterReply : public ::google::protobuf::Message {
 public:
  LoginRpcDeleteCharacterReply();
  virtual ~LoginRpcDeleteCharacterReply();

  LoginRpcDeleteCharacterReply(const LoginRpcDeleteCharacterReply& from);

  inline LoginRpcDeleteCharacterReply& operator=(const LoginRpcDeleteCharacterReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcDeleteCharacterReply& default_instance();

  void Swap(LoginRpcDeleteCharacterReply* other);

  // implements Message ----------------------------------------------

  LoginRpcDeleteCharacterReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcDeleteCharacterReply& from);
  void MergeFrom(const LoginRpcDeleteCharacterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcDeleteCharacterReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcDeleteCharacterReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcTestAsk : public ::google::protobuf::Message {
 public:
  LoginRpcTestAsk();
  virtual ~LoginRpcTestAsk();

  LoginRpcTestAsk(const LoginRpcTestAsk& from);

  inline LoginRpcTestAsk& operator=(const LoginRpcTestAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcTestAsk& default_instance();

  void Swap(LoginRpcTestAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcTestAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcTestAsk& from);
  void MergeFrom(const LoginRpcTestAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 A = 1;
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int64 a(int index) const;
  inline void set_a(int index, ::google::protobuf::int64 value);
  inline void add_a(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      a() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_a();

  // repeated uint64 B = 3;
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint64 b(int index) const;
  inline void set_b(int index, ::google::protobuf::uint64 value);
  inline void add_b(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      b() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_b();

  // @@protoc_insertion_point(class_scope:LoginRpcTestAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > b_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcTestAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcTestReply : public ::google::protobuf::Message {
 public:
  LoginRpcTestReply();
  virtual ~LoginRpcTestReply();

  LoginRpcTestReply(const LoginRpcTestReply& from);

  inline LoginRpcTestReply& operator=(const LoginRpcTestReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcTestReply& default_instance();

  void Swap(LoginRpcTestReply* other);

  // implements Message ----------------------------------------------

  LoginRpcTestReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcTestReply& from);
  void MergeFrom(const LoginRpcTestReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int64 A = 2;
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 2;
  inline ::google::protobuf::int64 a(int index) const;
  inline void set_a(int index, ::google::protobuf::int64 value);
  inline void add_a(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      a() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_a();

  // repeated uint64 B = 3;
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint64 b(int index) const;
  inline void set_b(int index, ::google::protobuf::uint64 value);
  inline void add_b(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      b() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_b();

  // @@protoc_insertion_point(class_scope:LoginRpcTestReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > b_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcTestReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcTest1Ask : public ::google::protobuf::Message {
 public:
  LoginRpcTest1Ask();
  virtual ~LoginRpcTest1Ask();

  LoginRpcTest1Ask(const LoginRpcTest1Ask& from);

  inline LoginRpcTest1Ask& operator=(const LoginRpcTest1Ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcTest1Ask& default_instance();

  void Swap(LoginRpcTest1Ask* other);

  // implements Message ----------------------------------------------

  LoginRpcTest1Ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcTest1Ask& from);
  void MergeFrom(const LoginRpcTest1Ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 B = 1;
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 1;
  inline ::google::protobuf::uint64 b(int index) const;
  inline void set_b(int index, ::google::protobuf::uint64 value);
  inline void add_b(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      b() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_b();

  // @@protoc_insertion_point(class_scope:LoginRpcTest1Ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > b_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcTest1Ask* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcTest1Reply : public ::google::protobuf::Message {
 public:
  LoginRpcTest1Reply();
  virtual ~LoginRpcTest1Reply();

  LoginRpcTest1Reply(const LoginRpcTest1Reply& from);

  inline LoginRpcTest1Reply& operator=(const LoginRpcTest1Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcTest1Reply& default_instance();

  void Swap(LoginRpcTest1Reply* other);

  // implements Message ----------------------------------------------

  LoginRpcTest1Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcTest1Reply& from);
  void MergeFrom(const LoginRpcTest1Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcTest1Reply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcTest1Reply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcLoginLineUpNotify : public ::google::protobuf::Message {
 public:
  LoginRpcLoginLineUpNotify();
  virtual ~LoginRpcLoginLineUpNotify();

  LoginRpcLoginLineUpNotify(const LoginRpcLoginLineUpNotify& from);

  inline LoginRpcLoginLineUpNotify& operator=(const LoginRpcLoginLineUpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginLineUpNotify& default_instance();

  void Swap(LoginRpcLoginLineUpNotify* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginLineUpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginLineUpNotify& from);
  void MergeFrom(const LoginRpcLoginLineUpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LineUpIndex = 1 [default = -1];
  inline bool has_lineupindex() const;
  inline void clear_lineupindex();
  static const int kLineUpIndexFieldNumber = 1;
  inline ::google::protobuf::int32 lineupindex() const;
  inline void set_lineupindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginLineUpNotify)
 private:
  inline void set_has_lineupindex();
  inline void clear_has_lineupindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lineupindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginLineUpNotify* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcLoginEnterGameNotify : public ::google::protobuf::Message {
 public:
  LoginRpcLoginEnterGameNotify();
  virtual ~LoginRpcLoginEnterGameNotify();

  LoginRpcLoginEnterGameNotify(const LoginRpcLoginEnterGameNotify& from);

  inline LoginRpcLoginEnterGameNotify& operator=(const LoginRpcLoginEnterGameNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginEnterGameNotify& default_instance();

  void Swap(LoginRpcLoginEnterGameNotify* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginEnterGameNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginEnterGameNotify& from);
  void MergeFrom(const LoginRpcLoginEnterGameNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleID = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 LastSceneID = 2 [default = -1];
  inline bool has_lastsceneid() const;
  inline void clear_lastsceneid();
  static const int kLastSceneIDFieldNumber = 2;
  inline ::google::protobuf::int32 lastsceneid() const;
  inline void set_lastsceneid(::google::protobuf::int32 value);

  // optional int32 LineID = 3 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 3;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginEnterGameNotify)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_lastsceneid();
  inline void clear_has_lastsceneid();
  inline void set_has_lineid();
  inline void clear_has_lineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 lastsceneid_;
  ::google::protobuf::int32 lineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginEnterGameNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRpcLoginAsk

// optional string Username = 1;
inline bool LoginRpcLoginAsk::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginAsk::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginAsk::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginAsk::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRpcLoginAsk::username() const {
  return *username_;
}
inline void LoginRpcLoginAsk::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRpcLoginAsk::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRpcLoginAsk::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRpcLoginAsk::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Passwd = 2;
inline bool LoginRpcLoginAsk::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcLoginAsk::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcLoginAsk::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcLoginAsk::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginRpcLoginAsk::passwd() const {
  return *passwd_;
}
inline void LoginRpcLoginAsk::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRpcLoginAsk::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRpcLoginAsk::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* LoginRpcLoginAsk::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string SnId = 3;
inline bool LoginRpcLoginAsk::has_snid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcLoginAsk::set_has_snid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcLoginAsk::clear_has_snid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcLoginAsk::clear_snid() {
  if (snid_ != &::google::protobuf::internal::kEmptyString) {
    snid_->clear();
  }
  clear_has_snid();
}
inline const ::std::string& LoginRpcLoginAsk::snid() const {
  return *snid_;
}
inline void LoginRpcLoginAsk::set_snid(const ::std::string& value) {
  set_has_snid();
  if (snid_ == &::google::protobuf::internal::kEmptyString) {
    snid_ = new ::std::string;
  }
  snid_->assign(value);
}
inline void LoginRpcLoginAsk::set_snid(const char* value) {
  set_has_snid();
  if (snid_ == &::google::protobuf::internal::kEmptyString) {
    snid_ = new ::std::string;
  }
  snid_->assign(value);
}
inline void LoginRpcLoginAsk::set_snid(const char* value, size_t size) {
  set_has_snid();
  if (snid_ == &::google::protobuf::internal::kEmptyString) {
    snid_ = new ::std::string;
  }
  snid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_snid() {
  set_has_snid();
  if (snid_ == &::google::protobuf::internal::kEmptyString) {
    snid_ = new ::std::string;
  }
  return snid_;
}
inline ::std::string* LoginRpcLoginAsk::release_snid() {
  clear_has_snid();
  if (snid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snid_;
    snid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_snid(::std::string* snid) {
  if (snid_ != &::google::protobuf::internal::kEmptyString) {
    delete snid_;
  }
  if (snid) {
    set_has_snid();
    snid_ = snid;
  } else {
    clear_has_snid();
    snid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GameId = 4;
inline bool LoginRpcLoginAsk::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRpcLoginAsk::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRpcLoginAsk::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRpcLoginAsk::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& LoginRpcLoginAsk::gameid() const {
  return *gameid_;
}
inline void LoginRpcLoginAsk::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void LoginRpcLoginAsk::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void LoginRpcLoginAsk::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* LoginRpcLoginAsk::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Mac = 5;
inline bool LoginRpcLoginAsk::has_mac() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRpcLoginAsk::set_has_mac() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRpcLoginAsk::clear_has_mac() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRpcLoginAsk::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& LoginRpcLoginAsk::mac() const {
  return *mac_;
}
inline void LoginRpcLoginAsk::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void LoginRpcLoginAsk::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void LoginRpcLoginAsk::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* LoginRpcLoginAsk::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Token = 6;
inline bool LoginRpcLoginAsk::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginRpcLoginAsk::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginRpcLoginAsk::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginRpcLoginAsk::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& LoginRpcLoginAsk::token() const {
  return *token_;
}
inline void LoginRpcLoginAsk::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LoginRpcLoginAsk::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LoginRpcLoginAsk::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* LoginRpcLoginAsk::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRpcLoginReply

// optional int32 Result = 1 [default = -9999];
inline bool LoginRpcLoginReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcLoginReply::result() const {
  return result_;
}
inline void LoginRpcLoginReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 RoleId = 2 [default = 0];
inline bool LoginRpcLoginReply::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcLoginReply::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcLoginReply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcLoginReply::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcLoginReply::roleid() const {
  return roleid_;
}
inline void LoginRpcLoginReply::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional .Vector3 Pos = 3;
inline bool LoginRpcLoginReply::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcLoginReply::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcLoginReply::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcLoginReply::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& LoginRpcLoginReply::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* LoginRpcLoginReply::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* LoginRpcLoginReply::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void LoginRpcLoginReply::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// repeated .CharacterInfo CharacterList = 4;
inline int LoginRpcLoginReply::characterlist_size() const {
  return characterlist_.size();
}
inline void LoginRpcLoginReply::clear_characterlist() {
  characterlist_.Clear();
}
inline const ::CharacterInfo& LoginRpcLoginReply::characterlist(int index) const {
  return characterlist_.Get(index);
}
inline ::CharacterInfo* LoginRpcLoginReply::mutable_characterlist(int index) {
  return characterlist_.Mutable(index);
}
inline ::CharacterInfo* LoginRpcLoginReply::add_characterlist() {
  return characterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharacterInfo >&
LoginRpcLoginReply::characterlist() const {
  return characterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharacterInfo >*
LoginRpcLoginReply::mutable_characterlist() {
  return &characterlist_;
}

// optional uint64 LastSelectRoleId = 5 [default = 0];
inline bool LoginRpcLoginReply::has_lastselectroleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRpcLoginReply::set_has_lastselectroleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRpcLoginReply::clear_has_lastselectroleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRpcLoginReply::clear_lastselectroleid() {
  lastselectroleid_ = GOOGLE_ULONGLONG(0);
  clear_has_lastselectroleid();
}
inline ::google::protobuf::uint64 LoginRpcLoginReply::lastselectroleid() const {
  return lastselectroleid_;
}
inline void LoginRpcLoginReply::set_lastselectroleid(::google::protobuf::uint64 value) {
  set_has_lastselectroleid();
  lastselectroleid_ = value;
}

// -------------------------------------------------------------------

// LoginRpcSelectCharacterAsk

// optional uint64 RoleId = 1 [default = 0];
inline bool LoginRpcSelectCharacterAsk::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcSelectCharacterAsk::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcSelectCharacterAsk::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcSelectCharacterAsk::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcSelectCharacterAsk::roleid() const {
  return roleid_;
}
inline void LoginRpcSelectCharacterAsk::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// LoginRpcSelectCharacterReply

// optional int32 Result = 1 [default = -9999];
inline bool LoginRpcSelectCharacterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcSelectCharacterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcSelectCharacterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcSelectCharacterReply::result() const {
  return result_;
}
inline void LoginRpcSelectCharacterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 RoleId = 2 [default = 0];
inline bool LoginRpcSelectCharacterReply::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcSelectCharacterReply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcSelectCharacterReply::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcSelectCharacterReply::roleid() const {
  return roleid_;
}
inline void LoginRpcSelectCharacterReply::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 LastSceneID = 5 [default = -1];
inline bool LoginRpcSelectCharacterReply::has_lastsceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_lastsceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcSelectCharacterReply::clear_has_lastsceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcSelectCharacterReply::clear_lastsceneid() {
  lastsceneid_ = -1;
  clear_has_lastsceneid();
}
inline ::google::protobuf::int32 LoginRpcSelectCharacterReply::lastsceneid() const {
  return lastsceneid_;
}
inline void LoginRpcSelectCharacterReply::set_lastsceneid(::google::protobuf::int32 value) {
  set_has_lastsceneid();
  lastsceneid_ = value;
}

// optional string Ban_Reason = 6;
inline bool LoginRpcSelectCharacterReply::has_ban_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_ban_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRpcSelectCharacterReply::clear_has_ban_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRpcSelectCharacterReply::clear_ban_reason() {
  if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
    ban_reason_->clear();
  }
  clear_has_ban_reason();
}
inline const ::std::string& LoginRpcSelectCharacterReply::ban_reason() const {
  return *ban_reason_;
}
inline void LoginRpcSelectCharacterReply::set_ban_reason(const ::std::string& value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
}
inline void LoginRpcSelectCharacterReply::set_ban_reason(const char* value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
}
inline void LoginRpcSelectCharacterReply::set_ban_reason(const char* value, size_t size) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcSelectCharacterReply::mutable_ban_reason() {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  return ban_reason_;
}
inline ::std::string* LoginRpcSelectCharacterReply::release_ban_reason() {
  clear_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ban_reason_;
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcSelectCharacterReply::set_allocated_ban_reason(::std::string* ban_reason) {
  if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete ban_reason_;
  }
  if (ban_reason) {
    set_has_ban_reason();
    ban_reason_ = ban_reason;
  } else {
    clear_has_ban_reason();
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 LineId = 7 [default = -1];
inline bool LoginRpcSelectCharacterReply::has_lineid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_lineid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRpcSelectCharacterReply::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRpcSelectCharacterReply::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 LoginRpcSelectCharacterReply::lineid() const {
  return lineid_;
}
inline void LoginRpcSelectCharacterReply::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// optional int32 Ban_EndTime = 8 [default = -1];
inline bool LoginRpcSelectCharacterReply::has_ban_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginRpcSelectCharacterReply::set_has_ban_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginRpcSelectCharacterReply::clear_has_ban_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginRpcSelectCharacterReply::clear_ban_endtime() {
  ban_endtime_ = -1;
  clear_has_ban_endtime();
}
inline ::google::protobuf::int32 LoginRpcSelectCharacterReply::ban_endtime() const {
  return ban_endtime_;
}
inline void LoginRpcSelectCharacterReply::set_ban_endtime(::google::protobuf::int32 value) {
  set_has_ban_endtime();
  ban_endtime_ = value;
}

// -------------------------------------------------------------------

// LoginRpcCreateCharacterAsk

// optional string Nickname = 1;
inline bool LoginRpcCreateCharacterAsk::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcCreateCharacterAsk::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcCreateCharacterAsk::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcCreateCharacterAsk::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& LoginRpcCreateCharacterAsk::nickname() const {
  return *nickname_;
}
inline void LoginRpcCreateCharacterAsk::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void LoginRpcCreateCharacterAsk::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void LoginRpcCreateCharacterAsk::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcCreateCharacterAsk::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* LoginRpcCreateCharacterAsk::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcCreateCharacterAsk::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigId = 2 [default = -1];
inline bool LoginRpcCreateCharacterAsk::has_configid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcCreateCharacterAsk::set_has_configid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcCreateCharacterAsk::clear_has_configid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcCreateCharacterAsk::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 LoginRpcCreateCharacterAsk::configid() const {
  return configid_;
}
inline void LoginRpcCreateCharacterAsk::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// -------------------------------------------------------------------

// LoginRpcCreateCharacterReply

// optional int32 Result = 1 [default = -9999];
inline bool LoginRpcCreateCharacterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcCreateCharacterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcCreateCharacterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcCreateCharacterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcCreateCharacterReply::result() const {
  return result_;
}
inline void LoginRpcCreateCharacterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 RoleId = 2 [default = 0];
inline bool LoginRpcCreateCharacterReply::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcCreateCharacterReply::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcCreateCharacterReply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcCreateCharacterReply::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcCreateCharacterReply::roleid() const {
  return roleid_;
}
inline void LoginRpcCreateCharacterReply::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 TimeStamp = 3 [default = 0];
inline bool LoginRpcCreateCharacterReply::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcCreateCharacterReply::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcCreateCharacterReply::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcCreateCharacterReply::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 LoginRpcCreateCharacterReply::timestamp() const {
  return timestamp_;
}
inline void LoginRpcCreateCharacterReply::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// LoginRpcDeleteCharacterAsk

// optional uint64 RoleId = 1 [default = 0];
inline bool LoginRpcDeleteCharacterAsk::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcDeleteCharacterAsk::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcDeleteCharacterAsk::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcDeleteCharacterAsk::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcDeleteCharacterAsk::roleid() const {
  return roleid_;
}
inline void LoginRpcDeleteCharacterAsk::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// LoginRpcDeleteCharacterReply

// optional int32 Result = 1 [default = -9999];
inline bool LoginRpcDeleteCharacterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcDeleteCharacterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcDeleteCharacterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcDeleteCharacterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcDeleteCharacterReply::result() const {
  return result_;
}
inline void LoginRpcDeleteCharacterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// LoginRpcTestAsk

// repeated int64 A = 1;
inline int LoginRpcTestAsk::a_size() const {
  return a_.size();
}
inline void LoginRpcTestAsk::clear_a() {
  a_.Clear();
}
inline ::google::protobuf::int64 LoginRpcTestAsk::a(int index) const {
  return a_.Get(index);
}
inline void LoginRpcTestAsk::set_a(int index, ::google::protobuf::int64 value) {
  a_.Set(index, value);
}
inline void LoginRpcTestAsk::add_a(::google::protobuf::int64 value) {
  a_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoginRpcTestAsk::a() const {
  return a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoginRpcTestAsk::mutable_a() {
  return &a_;
}

// repeated uint64 B = 3;
inline int LoginRpcTestAsk::b_size() const {
  return b_.size();
}
inline void LoginRpcTestAsk::clear_b() {
  b_.Clear();
}
inline ::google::protobuf::uint64 LoginRpcTestAsk::b(int index) const {
  return b_.Get(index);
}
inline void LoginRpcTestAsk::set_b(int index, ::google::protobuf::uint64 value) {
  b_.Set(index, value);
}
inline void LoginRpcTestAsk::add_b(::google::protobuf::uint64 value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LoginRpcTestAsk::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LoginRpcTestAsk::mutable_b() {
  return &b_;
}

// -------------------------------------------------------------------

// LoginRpcTestReply

// optional int32 Result = 1 [default = -1];
inline bool LoginRpcTestReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcTestReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcTestReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcTestReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcTestReply::result() const {
  return result_;
}
inline void LoginRpcTestReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated int64 A = 2;
inline int LoginRpcTestReply::a_size() const {
  return a_.size();
}
inline void LoginRpcTestReply::clear_a() {
  a_.Clear();
}
inline ::google::protobuf::int64 LoginRpcTestReply::a(int index) const {
  return a_.Get(index);
}
inline void LoginRpcTestReply::set_a(int index, ::google::protobuf::int64 value) {
  a_.Set(index, value);
}
inline void LoginRpcTestReply::add_a(::google::protobuf::int64 value) {
  a_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoginRpcTestReply::a() const {
  return a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoginRpcTestReply::mutable_a() {
  return &a_;
}

// repeated uint64 B = 3;
inline int LoginRpcTestReply::b_size() const {
  return b_.size();
}
inline void LoginRpcTestReply::clear_b() {
  b_.Clear();
}
inline ::google::protobuf::uint64 LoginRpcTestReply::b(int index) const {
  return b_.Get(index);
}
inline void LoginRpcTestReply::set_b(int index, ::google::protobuf::uint64 value) {
  b_.Set(index, value);
}
inline void LoginRpcTestReply::add_b(::google::protobuf::uint64 value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LoginRpcTestReply::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LoginRpcTestReply::mutable_b() {
  return &b_;
}

// -------------------------------------------------------------------

// LoginRpcTest1Ask

// repeated uint64 B = 1;
inline int LoginRpcTest1Ask::b_size() const {
  return b_.size();
}
inline void LoginRpcTest1Ask::clear_b() {
  b_.Clear();
}
inline ::google::protobuf::uint64 LoginRpcTest1Ask::b(int index) const {
  return b_.Get(index);
}
inline void LoginRpcTest1Ask::set_b(int index, ::google::protobuf::uint64 value) {
  b_.Set(index, value);
}
inline void LoginRpcTest1Ask::add_b(::google::protobuf::uint64 value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LoginRpcTest1Ask::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LoginRpcTest1Ask::mutable_b() {
  return &b_;
}

// -------------------------------------------------------------------

// LoginRpcTest1Reply

// optional int32 Result = 1 [default = -1];
inline bool LoginRpcTest1Reply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcTest1Reply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcTest1Reply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcTest1Reply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcTest1Reply::result() const {
  return result_;
}
inline void LoginRpcTest1Reply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// LoginRpcLoginLineUpNotify

// optional int32 LineUpIndex = 1 [default = -1];
inline bool LoginRpcLoginLineUpNotify::has_lineupindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginLineUpNotify::set_has_lineupindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginLineUpNotify::clear_has_lineupindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginLineUpNotify::clear_lineupindex() {
  lineupindex_ = -1;
  clear_has_lineupindex();
}
inline ::google::protobuf::int32 LoginRpcLoginLineUpNotify::lineupindex() const {
  return lineupindex_;
}
inline void LoginRpcLoginLineUpNotify::set_lineupindex(::google::protobuf::int32 value) {
  set_has_lineupindex();
  lineupindex_ = value;
}

// -------------------------------------------------------------------

// LoginRpcLoginEnterGameNotify

// optional uint64 RoleID = 1 [default = 0];
inline bool LoginRpcLoginEnterGameNotify::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginEnterGameNotify::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginEnterGameNotify::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginEnterGameNotify::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 LoginRpcLoginEnterGameNotify::roleid() const {
  return roleid_;
}
inline void LoginRpcLoginEnterGameNotify::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 LastSceneID = 2 [default = -1];
inline bool LoginRpcLoginEnterGameNotify::has_lastsceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcLoginEnterGameNotify::set_has_lastsceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcLoginEnterGameNotify::clear_has_lastsceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcLoginEnterGameNotify::clear_lastsceneid() {
  lastsceneid_ = -1;
  clear_has_lastsceneid();
}
inline ::google::protobuf::int32 LoginRpcLoginEnterGameNotify::lastsceneid() const {
  return lastsceneid_;
}
inline void LoginRpcLoginEnterGameNotify::set_lastsceneid(::google::protobuf::int32 value) {
  set_has_lastsceneid();
  lastsceneid_ = value;
}

// optional int32 LineID = 3 [default = -1];
inline bool LoginRpcLoginEnterGameNotify::has_lineid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcLoginEnterGameNotify::set_has_lineid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcLoginEnterGameNotify::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcLoginEnterGameNotify::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 LoginRpcLoginEnterGameNotify::lineid() const {
  return lineid_;
}
inline void LoginRpcLoginEnterGameNotify::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginRpc_2eproto__INCLUDED
