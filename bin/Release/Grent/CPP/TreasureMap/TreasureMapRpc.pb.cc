// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TreasureMapRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TreasureMapRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureMapRpcTreasureMapSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureMapRpcTreasureMapSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureMapRpcTreasureMapChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TreasureMapRpc_2eproto() {
  protobuf_AddDesc_TreasureMapRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TreasureMapRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TreasureMapRpcTreasureMapSyncAsk_descriptor_ = file->message_type(0);
  static const int TreasureMapRpcTreasureMapSyncAsk_offsets_[1] = {
  };
  TreasureMapRpcTreasureMapSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureMapRpcTreasureMapSyncAsk_descriptor_,
      TreasureMapRpcTreasureMapSyncAsk::default_instance_,
      TreasureMapRpcTreasureMapSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureMapRpcTreasureMapSyncAsk));
  TreasureMapRpcTreasureMapSyncReply_descriptor_ = file->message_type(1);
  static const int TreasureMapRpcTreasureMapSyncReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncReply, treasuremapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncReply, hightreasuremapid_),
  };
  TreasureMapRpcTreasureMapSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureMapRpcTreasureMapSyncReply_descriptor_,
      TreasureMapRpcTreasureMapSyncReply::default_instance_,
      TreasureMapRpcTreasureMapSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureMapRpcTreasureMapSyncReply));
  TreasureMapRpcTreasureMapChangeNotify_descriptor_ = file->message_type(2);
  static const int TreasureMapRpcTreasureMapChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapChangeNotify, treasuremapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapChangeNotify, hightreasuremapid_),
  };
  TreasureMapRpcTreasureMapChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureMapRpcTreasureMapChangeNotify_descriptor_,
      TreasureMapRpcTreasureMapChangeNotify::default_instance_,
      TreasureMapRpcTreasureMapChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapRpcTreasureMapChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureMapRpcTreasureMapChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TreasureMapRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureMapRpcTreasureMapSyncAsk_descriptor_, &TreasureMapRpcTreasureMapSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureMapRpcTreasureMapSyncReply_descriptor_, &TreasureMapRpcTreasureMapSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureMapRpcTreasureMapChangeNotify_descriptor_, &TreasureMapRpcTreasureMapChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TreasureMapRpc_2eproto() {
  delete TreasureMapRpcTreasureMapSyncAsk::default_instance_;
  delete TreasureMapRpcTreasureMapSyncAsk_reflection_;
  delete TreasureMapRpcTreasureMapSyncReply::default_instance_;
  delete TreasureMapRpcTreasureMapSyncReply_reflection_;
  delete TreasureMapRpcTreasureMapChangeNotify::default_instance_;
  delete TreasureMapRpcTreasureMapChangeNotify_reflection_;
}

void protobuf_AddDesc_TreasureMapRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024TreasureMapRpc.proto\032\022PublicStruct.pro"
    "to\"\"\n TreasureMapRpcTreasureMapSyncAsk\"r"
    "\n\"TreasureMapRpcTreasureMapSyncReply\022\022\n\006"
    "Result\030\001 \001(\005:\002-1\022\031\n\rTreasureMapId\030\002 \001(\005:"
    "\002-1\022\035\n\021HighTreasureMapId\030\003 \001(\005:\002-1\"a\n%Tr"
    "easureMapRpcTreasureMapChangeNotify\022\031\n\rT"
    "reasureMapId\030\001 \001(\005:\002-1\022\035\n\021HighTreasureMa"
    "pId\030\002 \001(\005:\002-1", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TreasureMapRpc.proto", &protobuf_RegisterTypes);
  TreasureMapRpcTreasureMapSyncAsk::default_instance_ = new TreasureMapRpcTreasureMapSyncAsk();
  TreasureMapRpcTreasureMapSyncReply::default_instance_ = new TreasureMapRpcTreasureMapSyncReply();
  TreasureMapRpcTreasureMapChangeNotify::default_instance_ = new TreasureMapRpcTreasureMapChangeNotify();
  TreasureMapRpcTreasureMapSyncAsk::default_instance_->InitAsDefaultInstance();
  TreasureMapRpcTreasureMapSyncReply::default_instance_->InitAsDefaultInstance();
  TreasureMapRpcTreasureMapChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TreasureMapRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TreasureMapRpc_2eproto {
  StaticDescriptorInitializer_TreasureMapRpc_2eproto() {
    protobuf_AddDesc_TreasureMapRpc_2eproto();
  }
} static_descriptor_initializer_TreasureMapRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TreasureMapRpcTreasureMapSyncAsk::TreasureMapRpcTreasureMapSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureMapRpcTreasureMapSyncAsk::InitAsDefaultInstance() {
}

TreasureMapRpcTreasureMapSyncAsk::TreasureMapRpcTreasureMapSyncAsk(const TreasureMapRpcTreasureMapSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureMapRpcTreasureMapSyncAsk::~TreasureMapRpcTreasureMapSyncAsk() {
  SharedDtor();
}

void TreasureMapRpcTreasureMapSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureMapRpcTreasureMapSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureMapRpcTreasureMapSyncAsk_descriptor_;
}

const TreasureMapRpcTreasureMapSyncAsk& TreasureMapRpcTreasureMapSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureMapRpc_2eproto();
  return *default_instance_;
}

TreasureMapRpcTreasureMapSyncAsk* TreasureMapRpcTreasureMapSyncAsk::default_instance_ = NULL;

TreasureMapRpcTreasureMapSyncAsk* TreasureMapRpcTreasureMapSyncAsk::New() const {
  return new TreasureMapRpcTreasureMapSyncAsk;
}

void TreasureMapRpcTreasureMapSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureMapRpcTreasureMapSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TreasureMapRpcTreasureMapSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureMapRpcTreasureMapSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureMapRpcTreasureMapSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureMapRpcTreasureMapSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureMapRpcTreasureMapSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureMapRpcTreasureMapSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureMapRpcTreasureMapSyncAsk::MergeFrom(const TreasureMapRpcTreasureMapSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureMapRpcTreasureMapSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapSyncAsk::CopyFrom(const TreasureMapRpcTreasureMapSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureMapRpcTreasureMapSyncAsk::IsInitialized() const {

  return true;
}

void TreasureMapRpcTreasureMapSyncAsk::Swap(TreasureMapRpcTreasureMapSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureMapRpcTreasureMapSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureMapRpcTreasureMapSyncAsk_descriptor_;
  metadata.reflection = TreasureMapRpcTreasureMapSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureMapRpcTreasureMapSyncReply::kResultFieldNumber;
const int TreasureMapRpcTreasureMapSyncReply::kTreasureMapIdFieldNumber;
const int TreasureMapRpcTreasureMapSyncReply::kHighTreasureMapIdFieldNumber;
#endif  // !_MSC_VER

TreasureMapRpcTreasureMapSyncReply::TreasureMapRpcTreasureMapSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureMapRpcTreasureMapSyncReply::InitAsDefaultInstance() {
}

TreasureMapRpcTreasureMapSyncReply::TreasureMapRpcTreasureMapSyncReply(const TreasureMapRpcTreasureMapSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  treasuremapid_ = -1;
  hightreasuremapid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureMapRpcTreasureMapSyncReply::~TreasureMapRpcTreasureMapSyncReply() {
  SharedDtor();
}

void TreasureMapRpcTreasureMapSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureMapRpcTreasureMapSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureMapRpcTreasureMapSyncReply_descriptor_;
}

const TreasureMapRpcTreasureMapSyncReply& TreasureMapRpcTreasureMapSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureMapRpc_2eproto();
  return *default_instance_;
}

TreasureMapRpcTreasureMapSyncReply* TreasureMapRpcTreasureMapSyncReply::default_instance_ = NULL;

TreasureMapRpcTreasureMapSyncReply* TreasureMapRpcTreasureMapSyncReply::New() const {
  return new TreasureMapRpcTreasureMapSyncReply;
}

void TreasureMapRpcTreasureMapSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    treasuremapid_ = -1;
    hightreasuremapid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureMapRpcTreasureMapSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TreasureMapId;
        break;
      }

      // optional int32 TreasureMapId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasuremapid_)));
          set_has_treasuremapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HighTreasureMapId;
        break;
      }

      // optional int32 HighTreasureMapId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HighTreasureMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hightreasuremapid_)));
          set_has_hightreasuremapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureMapRpcTreasureMapSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 TreasureMapId = 2 [default = -1];
  if (has_treasuremapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treasuremapid(), output);
  }

  // optional int32 HighTreasureMapId = 3 [default = -1];
  if (has_hightreasuremapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hightreasuremapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureMapRpcTreasureMapSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 TreasureMapId = 2 [default = -1];
  if (has_treasuremapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treasuremapid(), target);
  }

  // optional int32 HighTreasureMapId = 3 [default = -1];
  if (has_hightreasuremapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hightreasuremapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureMapRpcTreasureMapSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 TreasureMapId = 2 [default = -1];
    if (has_treasuremapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasuremapid());
    }

    // optional int32 HighTreasureMapId = 3 [default = -1];
    if (has_hightreasuremapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hightreasuremapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureMapRpcTreasureMapSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureMapRpcTreasureMapSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureMapRpcTreasureMapSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureMapRpcTreasureMapSyncReply::MergeFrom(const TreasureMapRpcTreasureMapSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treasuremapid()) {
      set_treasuremapid(from.treasuremapid());
    }
    if (from.has_hightreasuremapid()) {
      set_hightreasuremapid(from.hightreasuremapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureMapRpcTreasureMapSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapSyncReply::CopyFrom(const TreasureMapRpcTreasureMapSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureMapRpcTreasureMapSyncReply::IsInitialized() const {

  return true;
}

void TreasureMapRpcTreasureMapSyncReply::Swap(TreasureMapRpcTreasureMapSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treasuremapid_, other->treasuremapid_);
    std::swap(hightreasuremapid_, other->hightreasuremapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureMapRpcTreasureMapSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureMapRpcTreasureMapSyncReply_descriptor_;
  metadata.reflection = TreasureMapRpcTreasureMapSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureMapRpcTreasureMapChangeNotify::kTreasureMapIdFieldNumber;
const int TreasureMapRpcTreasureMapChangeNotify::kHighTreasureMapIdFieldNumber;
#endif  // !_MSC_VER

TreasureMapRpcTreasureMapChangeNotify::TreasureMapRpcTreasureMapChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureMapRpcTreasureMapChangeNotify::InitAsDefaultInstance() {
}

TreasureMapRpcTreasureMapChangeNotify::TreasureMapRpcTreasureMapChangeNotify(const TreasureMapRpcTreasureMapChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  treasuremapid_ = -1;
  hightreasuremapid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureMapRpcTreasureMapChangeNotify::~TreasureMapRpcTreasureMapChangeNotify() {
  SharedDtor();
}

void TreasureMapRpcTreasureMapChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureMapRpcTreasureMapChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureMapRpcTreasureMapChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureMapRpcTreasureMapChangeNotify_descriptor_;
}

const TreasureMapRpcTreasureMapChangeNotify& TreasureMapRpcTreasureMapChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TreasureMapRpc_2eproto();
  return *default_instance_;
}

TreasureMapRpcTreasureMapChangeNotify* TreasureMapRpcTreasureMapChangeNotify::default_instance_ = NULL;

TreasureMapRpcTreasureMapChangeNotify* TreasureMapRpcTreasureMapChangeNotify::New() const {
  return new TreasureMapRpcTreasureMapChangeNotify;
}

void TreasureMapRpcTreasureMapChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasuremapid_ = -1;
    hightreasuremapid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureMapRpcTreasureMapChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TreasureMapId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasuremapid_)));
          set_has_treasuremapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HighTreasureMapId;
        break;
      }

      // optional int32 HighTreasureMapId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HighTreasureMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hightreasuremapid_)));
          set_has_hightreasuremapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureMapRpcTreasureMapChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TreasureMapId = 1 [default = -1];
  if (has_treasuremapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->treasuremapid(), output);
  }

  // optional int32 HighTreasureMapId = 2 [default = -1];
  if (has_hightreasuremapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hightreasuremapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureMapRpcTreasureMapChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TreasureMapId = 1 [default = -1];
  if (has_treasuremapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->treasuremapid(), target);
  }

  // optional int32 HighTreasureMapId = 2 [default = -1];
  if (has_hightreasuremapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hightreasuremapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureMapRpcTreasureMapChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TreasureMapId = 1 [default = -1];
    if (has_treasuremapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasuremapid());
    }

    // optional int32 HighTreasureMapId = 2 [default = -1];
    if (has_hightreasuremapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hightreasuremapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureMapRpcTreasureMapChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureMapRpcTreasureMapChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureMapRpcTreasureMapChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureMapRpcTreasureMapChangeNotify::MergeFrom(const TreasureMapRpcTreasureMapChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasuremapid()) {
      set_treasuremapid(from.treasuremapid());
    }
    if (from.has_hightreasuremapid()) {
      set_hightreasuremapid(from.hightreasuremapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureMapRpcTreasureMapChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureMapRpcTreasureMapChangeNotify::CopyFrom(const TreasureMapRpcTreasureMapChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureMapRpcTreasureMapChangeNotify::IsInitialized() const {

  return true;
}

void TreasureMapRpcTreasureMapChangeNotify::Swap(TreasureMapRpcTreasureMapChangeNotify* other) {
  if (other != this) {
    std::swap(treasuremapid_, other->treasuremapid_);
    std::swap(hightreasuremapid_, other->hightreasuremapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureMapRpcTreasureMapChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureMapRpcTreasureMapChangeNotify_descriptor_;
  metadata.reflection = TreasureMapRpcTreasureMapChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
