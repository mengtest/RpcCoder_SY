// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionRpc.proto

#ifndef PROTOBUF_AuctionRpc_2eproto__INCLUDED
#define PROTOBUF_AuctionRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AuctionRpc_2eproto();
void protobuf_AssignDesc_AuctionRpc_2eproto();
void protobuf_ShutdownFile_AuctionRpc_2eproto();

class AuctionRpcAuctionInfoAsk;
class AuctionRpcAuctionInfoReply;
class AuctionRpcSellItemAsk;
class AuctionRpcSellItemReply;
class AuctionRpcBuyAsk;
class AuctionRpcBuyReply;
class AuctionRpcSellAgainAsk;
class AuctionRpcSellAgainReply;
class AuctionRpcGetItemAsk;
class AuctionRpcGetItemReply;
class AuctionRpcRecordAsk;
class AuctionRpcRecordReply;
class AuctionRpcItemInfoByClassAsk;
class AuctionRpcItemInfoByClassReply;
class AuctionRpcSalePrepareAsk;
class AuctionRpcSalePrepareReply;
class AuctionRpcGetItemBackAsk;
class AuctionRpcGetItemBackReply;
class AuctionRpcGetMySaleListAsk;
class AuctionRpcGetMySaleListReply;

// ===================================================================

class AuctionRpcAuctionInfoAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcAuctionInfoAsk();
  virtual ~AuctionRpcAuctionInfoAsk();

  AuctionRpcAuctionInfoAsk(const AuctionRpcAuctionInfoAsk& from);

  inline AuctionRpcAuctionInfoAsk& operator=(const AuctionRpcAuctionInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcAuctionInfoAsk& default_instance();

  void Swap(AuctionRpcAuctionInfoAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcAuctionInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcAuctionInfoAsk& from);
  void MergeFrom(const AuctionRpcAuctionInfoAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 13 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 13;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 QueueType = 16 [default = -1];
  inline bool has_queuetype() const;
  inline void clear_queuetype();
  static const int kQueueTypeFieldNumber = 16;
  inline ::google::protobuf::int32 queuetype() const;
  inline void set_queuetype(::google::protobuf::int32 value);

  // optional int32 CurPage = 17 [default = -1];
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurPageFieldNumber = 17;
  inline ::google::protobuf::int32 curpage() const;
  inline void set_curpage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcAuctionInfoAsk)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_queuetype();
  inline void clear_has_queuetype();
  inline void set_has_curpage();
  inline void clear_has_curpage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 queuetype_;
  ::google::protobuf::int32 curpage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcAuctionInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcAuctionInfoReply : public ::google::protobuf::Message {
 public:
  AuctionRpcAuctionInfoReply();
  virtual ~AuctionRpcAuctionInfoReply();

  AuctionRpcAuctionInfoReply(const AuctionRpcAuctionInfoReply& from);

  inline AuctionRpcAuctionInfoReply& operator=(const AuctionRpcAuctionInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcAuctionInfoReply& default_instance();

  void Swap(AuctionRpcAuctionInfoReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcAuctionInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcAuctionInfoReply& from);
  void MergeFrom(const AuctionRpcAuctionInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .AuctionItem AuctionItem = 2;
  inline int auctionitem_size() const;
  inline void clear_auctionitem();
  static const int kAuctionItemFieldNumber = 2;
  inline const ::AuctionItem& auctionitem(int index) const;
  inline ::AuctionItem* mutable_auctionitem(int index);
  inline ::AuctionItem* add_auctionitem();
  inline const ::google::protobuf::RepeatedPtrField< ::AuctionItem >&
      auctionitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::AuctionItem >*
      mutable_auctionitem();

  // optional int32 TotalPage = 3 [default = 1];
  inline bool has_totalpage() const;
  inline void clear_totalpage();
  static const int kTotalPageFieldNumber = 3;
  inline ::google::protobuf::int32 totalpage() const;
  inline void set_totalpage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcAuctionInfoReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_totalpage();
  inline void clear_has_totalpage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AuctionItem > auctionitem_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 totalpage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcAuctionInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSellItemAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcSellItemAsk();
  virtual ~AuctionRpcSellItemAsk();

  AuctionRpcSellItemAsk(const AuctionRpcSellItemAsk& from);

  inline AuctionRpcSellItemAsk& operator=(const AuctionRpcSellItemAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSellItemAsk& default_instance();

  void Swap(AuctionRpcSellItemAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcSellItemAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSellItemAsk& from);
  void MergeFrom(const AuctionRpcSellItemAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ItemGuid = 1 [default = 0];
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 itemguid() const;
  inline void set_itemguid(::google::protobuf::uint64 value);

  // optional int32 ItemId = 2 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Price = 3 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 Currency = 4 [default = -1];
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional int32 Count = 5 [default = -1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcSellItemAsk)
 private:
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 itemguid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSellItemAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSellItemReply : public ::google::protobuf::Message {
 public:
  AuctionRpcSellItemReply();
  virtual ~AuctionRpcSellItemReply();

  AuctionRpcSellItemReply(const AuctionRpcSellItemReply& from);

  inline AuctionRpcSellItemReply& operator=(const AuctionRpcSellItemReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSellItemReply& default_instance();

  void Swap(AuctionRpcSellItemReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcSellItemReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSellItemReply& from);
  void MergeFrom(const AuctionRpcSellItemReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcSellItemReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSellItemReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcBuyAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcBuyAsk();
  virtual ~AuctionRpcBuyAsk();

  AuctionRpcBuyAsk(const AuctionRpcBuyAsk& from);

  inline AuctionRpcBuyAsk& operator=(const AuctionRpcBuyAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcBuyAsk& default_instance();

  void Swap(AuctionRpcBuyAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcBuyAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcBuyAsk& from);
  void MergeFrom(const AuctionRpcBuyAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ItemGuid = 1 [default = 0];
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 itemguid() const;
  inline void set_itemguid(::google::protobuf::uint64 value);

  // optional int32 Count = 2 [default = -1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcBuyAsk)
 private:
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 itemguid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcBuyAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcBuyReply : public ::google::protobuf::Message {
 public:
  AuctionRpcBuyReply();
  virtual ~AuctionRpcBuyReply();

  AuctionRpcBuyReply(const AuctionRpcBuyReply& from);

  inline AuctionRpcBuyReply& operator=(const AuctionRpcBuyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcBuyReply& default_instance();

  void Swap(AuctionRpcBuyReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcBuyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcBuyReply& from);
  void MergeFrom(const AuctionRpcBuyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcBuyReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcBuyReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSellAgainAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcSellAgainAsk();
  virtual ~AuctionRpcSellAgainAsk();

  AuctionRpcSellAgainAsk(const AuctionRpcSellAgainAsk& from);

  inline AuctionRpcSellAgainAsk& operator=(const AuctionRpcSellAgainAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSellAgainAsk& default_instance();

  void Swap(AuctionRpcSellAgainAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcSellAgainAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSellAgainAsk& from);
  void MergeFrom(const AuctionRpcSellAgainAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ItemGuid = 1 [default = 0];
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 itemguid() const;
  inline void set_itemguid(::google::protobuf::uint64 value);

  // optional int32 Price = 2 [default = -1];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcSellAgainAsk)
 private:
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 itemguid_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSellAgainAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSellAgainReply : public ::google::protobuf::Message {
 public:
  AuctionRpcSellAgainReply();
  virtual ~AuctionRpcSellAgainReply();

  AuctionRpcSellAgainReply(const AuctionRpcSellAgainReply& from);

  inline AuctionRpcSellAgainReply& operator=(const AuctionRpcSellAgainReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSellAgainReply& default_instance();

  void Swap(AuctionRpcSellAgainReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcSellAgainReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSellAgainReply& from);
  void MergeFrom(const AuctionRpcSellAgainReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcSellAgainReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSellAgainReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetItemAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcGetItemAsk();
  virtual ~AuctionRpcGetItemAsk();

  AuctionRpcGetItemAsk(const AuctionRpcGetItemAsk& from);

  inline AuctionRpcGetItemAsk& operator=(const AuctionRpcGetItemAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetItemAsk& default_instance();

  void Swap(AuctionRpcGetItemAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetItemAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetItemAsk& from);
  void MergeFrom(const AuctionRpcGetItemAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 BuyRecGuid = 1;
  inline int buyrecguid_size() const;
  inline void clear_buyrecguid();
  static const int kBuyRecGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 buyrecguid(int index) const;
  inline void set_buyrecguid(int index, ::google::protobuf::uint64 value);
  inline void add_buyrecguid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      buyrecguid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_buyrecguid();

  // repeated uint64 SaleRecGuid = 3;
  inline int salerecguid_size() const;
  inline void clear_salerecguid();
  static const int kSaleRecGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 salerecguid(int index) const;
  inline void set_salerecguid(int index, ::google::protobuf::uint64 value);
  inline void add_salerecguid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      salerecguid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_salerecguid();

  // @@protoc_insertion_point(class_scope:AuctionRpcGetItemAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > buyrecguid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > salerecguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetItemAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetItemReply : public ::google::protobuf::Message {
 public:
  AuctionRpcGetItemReply();
  virtual ~AuctionRpcGetItemReply();

  AuctionRpcGetItemReply(const AuctionRpcGetItemReply& from);

  inline AuctionRpcGetItemReply& operator=(const AuctionRpcGetItemReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetItemReply& default_instance();

  void Swap(AuctionRpcGetItemReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetItemReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetItemReply& from);
  void MergeFrom(const AuctionRpcGetItemReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 2 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .AuctionRecSimple Record = 3;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::AuctionRecSimple& record(int index) const;
  inline ::AuctionRecSimple* mutable_record(int index);
  inline ::AuctionRecSimple* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:AuctionRpcGetItemReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple > record_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetItemReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcRecordAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcRecordAsk();
  virtual ~AuctionRpcRecordAsk();

  AuctionRpcRecordAsk(const AuctionRpcRecordAsk& from);

  inline AuctionRpcRecordAsk& operator=(const AuctionRpcRecordAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcRecordAsk& default_instance();

  void Swap(AuctionRpcRecordAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcRecordAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcRecordAsk& from);
  void MergeFrom(const AuctionRpcRecordAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AuctionRpcRecordAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcRecordAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcRecordReply : public ::google::protobuf::Message {
 public:
  AuctionRpcRecordReply();
  virtual ~AuctionRpcRecordReply();

  AuctionRpcRecordReply(const AuctionRpcRecordReply& from);

  inline AuctionRpcRecordReply& operator=(const AuctionRpcRecordReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcRecordReply& default_instance();

  void Swap(AuctionRpcRecordReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcRecordReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcRecordReply& from);
  void MergeFrom(const AuctionRpcRecordReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .AuctionRecSimple Record = 3;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::AuctionRecSimple& record(int index) const;
  inline ::AuctionRecSimple* mutable_record(int index);
  inline ::AuctionRecSimple* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:AuctionRpcRecordReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple > record_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcRecordReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcItemInfoByClassAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcItemInfoByClassAsk();
  virtual ~AuctionRpcItemInfoByClassAsk();

  AuctionRpcItemInfoByClassAsk(const AuctionRpcItemInfoByClassAsk& from);

  inline AuctionRpcItemInfoByClassAsk& operator=(const AuctionRpcItemInfoByClassAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcItemInfoByClassAsk& default_instance();

  void Swap(AuctionRpcItemInfoByClassAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcItemInfoByClassAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcItemInfoByClassAsk& from);
  void MergeFrom(const AuctionRpcItemInfoByClassAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemClass = 1 [default = -1];
  inline bool has_itemclass() const;
  inline void clear_itemclass();
  static const int kItemClassFieldNumber = 1;
  inline ::google::protobuf::int32 itemclass() const;
  inline void set_itemclass(::google::protobuf::int32 value);

  // repeated int32 ItemId = 2;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // optional int32 ItemSubClass = 3 [default = -1];
  inline bool has_itemsubclass() const;
  inline void clear_itemsubclass();
  static const int kItemSubClassFieldNumber = 3;
  inline ::google::protobuf::int32 itemsubclass() const;
  inline void set_itemsubclass(::google::protobuf::int32 value);

  // optional int32 Prof = 5 [default = -1];
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 Level = 6 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcItemInfoByClassAsk)
 private:
  inline void set_has_itemclass();
  inline void clear_has_itemclass();
  inline void set_has_itemsubclass();
  inline void clear_has_itemsubclass();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::int32 itemclass_;
  ::google::protobuf::int32 itemsubclass_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcItemInfoByClassAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcItemInfoByClassReply : public ::google::protobuf::Message {
 public:
  AuctionRpcItemInfoByClassReply();
  virtual ~AuctionRpcItemInfoByClassReply();

  AuctionRpcItemInfoByClassReply(const AuctionRpcItemInfoByClassReply& from);

  inline AuctionRpcItemInfoByClassReply& operator=(const AuctionRpcItemInfoByClassReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcItemInfoByClassReply& default_instance();

  void Swap(AuctionRpcItemInfoByClassReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcItemInfoByClassReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcItemInfoByClassReply& from);
  void MergeFrom(const AuctionRpcItemInfoByClassReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .AuctionItemCnt ItemCount = 2;
  inline int itemcount_size() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  inline const ::AuctionItemCnt& itemcount(int index) const;
  inline ::AuctionItemCnt* mutable_itemcount(int index);
  inline ::AuctionItemCnt* add_itemcount();
  inline const ::google::protobuf::RepeatedPtrField< ::AuctionItemCnt >&
      itemcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::AuctionItemCnt >*
      mutable_itemcount();

  // @@protoc_insertion_point(class_scope:AuctionRpcItemInfoByClassReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AuctionItemCnt > itemcount_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcItemInfoByClassReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSalePrepareAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcSalePrepareAsk();
  virtual ~AuctionRpcSalePrepareAsk();

  AuctionRpcSalePrepareAsk(const AuctionRpcSalePrepareAsk& from);

  inline AuctionRpcSalePrepareAsk& operator=(const AuctionRpcSalePrepareAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSalePrepareAsk& default_instance();

  void Swap(AuctionRpcSalePrepareAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcSalePrepareAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSalePrepareAsk& from);
  void MergeFrom(const AuctionRpcSalePrepareAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcSalePrepareAsk)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSalePrepareAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcSalePrepareReply : public ::google::protobuf::Message {
 public:
  AuctionRpcSalePrepareReply();
  virtual ~AuctionRpcSalePrepareReply();

  AuctionRpcSalePrepareReply(const AuctionRpcSalePrepareReply& from);

  inline AuctionRpcSalePrepareReply& operator=(const AuctionRpcSalePrepareReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcSalePrepareReply& default_instance();

  void Swap(AuctionRpcSalePrepareReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcSalePrepareReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcSalePrepareReply& from);
  void MergeFrom(const AuctionRpcSalePrepareReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 ItemId = 2 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 BasePrice = 3 [default = 0];
  inline bool has_baseprice() const;
  inline void clear_baseprice();
  static const int kBasePriceFieldNumber = 3;
  inline ::google::protobuf::int32 baseprice() const;
  inline void set_baseprice(::google::protobuf::int32 value);

  // repeated int32 GoldGroup = 4;
  inline int goldgroup_size() const;
  inline void clear_goldgroup();
  static const int kGoldGroupFieldNumber = 4;
  inline ::google::protobuf::int32 goldgroup(int index) const;
  inline void set_goldgroup(int index, ::google::protobuf::int32 value);
  inline void add_goldgroup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      goldgroup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_goldgroup();

  // repeated int32 DiamondGroup = 5;
  inline int diamondgroup_size() const;
  inline void clear_diamondgroup();
  static const int kDiamondGroupFieldNumber = 5;
  inline ::google::protobuf::int32 diamondgroup(int index) const;
  inline void set_diamondgroup(int index, ::google::protobuf::int32 value);
  inline void add_diamondgroup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      diamondgroup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_diamondgroup();

  // @@protoc_insertion_point(class_scope:AuctionRpcSalePrepareReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_baseprice();
  inline void clear_has_baseprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > goldgroup_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > diamondgroup_;
  ::google::protobuf::int32 baseprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcSalePrepareReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetItemBackAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcGetItemBackAsk();
  virtual ~AuctionRpcGetItemBackAsk();

  AuctionRpcGetItemBackAsk(const AuctionRpcGetItemBackAsk& from);

  inline AuctionRpcGetItemBackAsk& operator=(const AuctionRpcGetItemBackAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetItemBackAsk& default_instance();

  void Swap(AuctionRpcGetItemBackAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetItemBackAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetItemBackAsk& from);
  void MergeFrom(const AuctionRpcGetItemBackAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ItemGuid = 1 [default = 0];
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 itemguid() const;
  inline void set_itemguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcGetItemBackAsk)
 private:
  inline void set_has_itemguid();
  inline void clear_has_itemguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 itemguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetItemBackAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetItemBackReply : public ::google::protobuf::Message {
 public:
  AuctionRpcGetItemBackReply();
  virtual ~AuctionRpcGetItemBackReply();

  AuctionRpcGetItemBackReply(const AuctionRpcGetItemBackReply& from);

  inline AuctionRpcGetItemBackReply& operator=(const AuctionRpcGetItemBackReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetItemBackReply& default_instance();

  void Swap(AuctionRpcGetItemBackReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetItemBackReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetItemBackReply& from);
  void MergeFrom(const AuctionRpcGetItemBackReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRpcGetItemBackReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetItemBackReply* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetMySaleListAsk : public ::google::protobuf::Message {
 public:
  AuctionRpcGetMySaleListAsk();
  virtual ~AuctionRpcGetMySaleListAsk();

  AuctionRpcGetMySaleListAsk(const AuctionRpcGetMySaleListAsk& from);

  inline AuctionRpcGetMySaleListAsk& operator=(const AuctionRpcGetMySaleListAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetMySaleListAsk& default_instance();

  void Swap(AuctionRpcGetMySaleListAsk* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetMySaleListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetMySaleListAsk& from);
  void MergeFrom(const AuctionRpcGetMySaleListAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AuctionRpcGetMySaleListAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetMySaleListAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRpcGetMySaleListReply : public ::google::protobuf::Message {
 public:
  AuctionRpcGetMySaleListReply();
  virtual ~AuctionRpcGetMySaleListReply();

  AuctionRpcGetMySaleListReply(const AuctionRpcGetMySaleListReply& from);

  inline AuctionRpcGetMySaleListReply& operator=(const AuctionRpcGetMySaleListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRpcGetMySaleListReply& default_instance();

  void Swap(AuctionRpcGetMySaleListReply* other);

  // implements Message ----------------------------------------------

  AuctionRpcGetMySaleListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRpcGetMySaleListReply& from);
  void MergeFrom(const AuctionRpcGetMySaleListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Result = 1 [default = -1];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .AuctionItem AuctionItem = 2;
  inline int auctionitem_size() const;
  inline void clear_auctionitem();
  static const int kAuctionItemFieldNumber = 2;
  inline const ::AuctionItem& auctionitem(int index) const;
  inline ::AuctionItem* mutable_auctionitem(int index);
  inline ::AuctionItem* add_auctionitem();
  inline const ::google::protobuf::RepeatedPtrField< ::AuctionItem >&
      auctionitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::AuctionItem >*
      mutable_auctionitem();

  // @@protoc_insertion_point(class_scope:AuctionRpcGetMySaleListReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AuctionItem > auctionitem_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuctionRpc_2eproto();
  friend void protobuf_AssignDesc_AuctionRpc_2eproto();
  friend void protobuf_ShutdownFile_AuctionRpc_2eproto();

  void InitAsDefaultInstance();
  static AuctionRpcGetMySaleListReply* default_instance_;
};
// ===================================================================


// ===================================================================

// AuctionRpcAuctionInfoAsk

// optional int32 ItemId = 13 [default = -1];
inline bool AuctionRpcAuctionInfoAsk::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcAuctionInfoAsk::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcAuctionInfoAsk::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcAuctionInfoAsk::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionRpcAuctionInfoAsk::itemid() const {
  return itemid_;
}
inline void AuctionRpcAuctionInfoAsk::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 QueueType = 16 [default = -1];
inline bool AuctionRpcAuctionInfoAsk::has_queuetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRpcAuctionInfoAsk::set_has_queuetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRpcAuctionInfoAsk::clear_has_queuetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRpcAuctionInfoAsk::clear_queuetype() {
  queuetype_ = -1;
  clear_has_queuetype();
}
inline ::google::protobuf::int32 AuctionRpcAuctionInfoAsk::queuetype() const {
  return queuetype_;
}
inline void AuctionRpcAuctionInfoAsk::set_queuetype(::google::protobuf::int32 value) {
  set_has_queuetype();
  queuetype_ = value;
}

// optional int32 CurPage = 17 [default = -1];
inline bool AuctionRpcAuctionInfoAsk::has_curpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRpcAuctionInfoAsk::set_has_curpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRpcAuctionInfoAsk::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRpcAuctionInfoAsk::clear_curpage() {
  curpage_ = -1;
  clear_has_curpage();
}
inline ::google::protobuf::int32 AuctionRpcAuctionInfoAsk::curpage() const {
  return curpage_;
}
inline void AuctionRpcAuctionInfoAsk::set_curpage(::google::protobuf::int32 value) {
  set_has_curpage();
  curpage_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcAuctionInfoReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcAuctionInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcAuctionInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcAuctionInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcAuctionInfoReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcAuctionInfoReply::result() const {
  return result_;
}
inline void AuctionRpcAuctionInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .AuctionItem AuctionItem = 2;
inline int AuctionRpcAuctionInfoReply::auctionitem_size() const {
  return auctionitem_.size();
}
inline void AuctionRpcAuctionInfoReply::clear_auctionitem() {
  auctionitem_.Clear();
}
inline const ::AuctionItem& AuctionRpcAuctionInfoReply::auctionitem(int index) const {
  return auctionitem_.Get(index);
}
inline ::AuctionItem* AuctionRpcAuctionInfoReply::mutable_auctionitem(int index) {
  return auctionitem_.Mutable(index);
}
inline ::AuctionItem* AuctionRpcAuctionInfoReply::add_auctionitem() {
  return auctionitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AuctionItem >&
AuctionRpcAuctionInfoReply::auctionitem() const {
  return auctionitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::AuctionItem >*
AuctionRpcAuctionInfoReply::mutable_auctionitem() {
  return &auctionitem_;
}

// optional int32 TotalPage = 3 [default = 1];
inline bool AuctionRpcAuctionInfoReply::has_totalpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRpcAuctionInfoReply::set_has_totalpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRpcAuctionInfoReply::clear_has_totalpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRpcAuctionInfoReply::clear_totalpage() {
  totalpage_ = 1;
  clear_has_totalpage();
}
inline ::google::protobuf::int32 AuctionRpcAuctionInfoReply::totalpage() const {
  return totalpage_;
}
inline void AuctionRpcAuctionInfoReply::set_totalpage(::google::protobuf::int32 value) {
  set_has_totalpage();
  totalpage_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcSellItemAsk

// optional uint64 ItemGuid = 1 [default = 0];
inline bool AuctionRpcSellItemAsk::has_itemguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSellItemAsk::set_has_itemguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSellItemAsk::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSellItemAsk::clear_itemguid() {
  itemguid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemguid();
}
inline ::google::protobuf::uint64 AuctionRpcSellItemAsk::itemguid() const {
  return itemguid_;
}
inline void AuctionRpcSellItemAsk::set_itemguid(::google::protobuf::uint64 value) {
  set_has_itemguid();
  itemguid_ = value;
}

// optional int32 ItemId = 2 [default = -1];
inline bool AuctionRpcSellItemAsk::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRpcSellItemAsk::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRpcSellItemAsk::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRpcSellItemAsk::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionRpcSellItemAsk::itemid() const {
  return itemid_;
}
inline void AuctionRpcSellItemAsk::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 Price = 3 [default = 0];
inline bool AuctionRpcSellItemAsk::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRpcSellItemAsk::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRpcSellItemAsk::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRpcSellItemAsk::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 AuctionRpcSellItemAsk::price() const {
  return price_;
}
inline void AuctionRpcSellItemAsk::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 Currency = 4 [default = -1];
inline bool AuctionRpcSellItemAsk::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionRpcSellItemAsk::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionRpcSellItemAsk::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionRpcSellItemAsk::clear_currency() {
  currency_ = -1;
  clear_has_currency();
}
inline ::google::protobuf::int32 AuctionRpcSellItemAsk::currency() const {
  return currency_;
}
inline void AuctionRpcSellItemAsk::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional int32 Count = 5 [default = -1];
inline bool AuctionRpcSellItemAsk::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionRpcSellItemAsk::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionRpcSellItemAsk::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionRpcSellItemAsk::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 AuctionRpcSellItemAsk::count() const {
  return count_;
}
inline void AuctionRpcSellItemAsk::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcSellItemReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcSellItemReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSellItemReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSellItemReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSellItemReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcSellItemReply::result() const {
  return result_;
}
inline void AuctionRpcSellItemReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcBuyAsk

// optional uint64 ItemGuid = 1 [default = 0];
inline bool AuctionRpcBuyAsk::has_itemguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcBuyAsk::set_has_itemguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcBuyAsk::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcBuyAsk::clear_itemguid() {
  itemguid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemguid();
}
inline ::google::protobuf::uint64 AuctionRpcBuyAsk::itemguid() const {
  return itemguid_;
}
inline void AuctionRpcBuyAsk::set_itemguid(::google::protobuf::uint64 value) {
  set_has_itemguid();
  itemguid_ = value;
}

// optional int32 Count = 2 [default = -1];
inline bool AuctionRpcBuyAsk::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRpcBuyAsk::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRpcBuyAsk::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRpcBuyAsk::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 AuctionRpcBuyAsk::count() const {
  return count_;
}
inline void AuctionRpcBuyAsk::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcBuyReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcBuyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcBuyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcBuyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcBuyReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcBuyReply::result() const {
  return result_;
}
inline void AuctionRpcBuyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcSellAgainAsk

// optional uint64 ItemGuid = 1 [default = 0];
inline bool AuctionRpcSellAgainAsk::has_itemguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSellAgainAsk::set_has_itemguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSellAgainAsk::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSellAgainAsk::clear_itemguid() {
  itemguid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemguid();
}
inline ::google::protobuf::uint64 AuctionRpcSellAgainAsk::itemguid() const {
  return itemguid_;
}
inline void AuctionRpcSellAgainAsk::set_itemguid(::google::protobuf::uint64 value) {
  set_has_itemguid();
  itemguid_ = value;
}

// optional int32 Price = 2 [default = -1];
inline bool AuctionRpcSellAgainAsk::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRpcSellAgainAsk::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRpcSellAgainAsk::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRpcSellAgainAsk::clear_price() {
  price_ = -1;
  clear_has_price();
}
inline ::google::protobuf::int32 AuctionRpcSellAgainAsk::price() const {
  return price_;
}
inline void AuctionRpcSellAgainAsk::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcSellAgainReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcSellAgainReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSellAgainReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSellAgainReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSellAgainReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcSellAgainReply::result() const {
  return result_;
}
inline void AuctionRpcSellAgainReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcGetItemAsk

// repeated uint64 BuyRecGuid = 1;
inline int AuctionRpcGetItemAsk::buyrecguid_size() const {
  return buyrecguid_.size();
}
inline void AuctionRpcGetItemAsk::clear_buyrecguid() {
  buyrecguid_.Clear();
}
inline ::google::protobuf::uint64 AuctionRpcGetItemAsk::buyrecguid(int index) const {
  return buyrecguid_.Get(index);
}
inline void AuctionRpcGetItemAsk::set_buyrecguid(int index, ::google::protobuf::uint64 value) {
  buyrecguid_.Set(index, value);
}
inline void AuctionRpcGetItemAsk::add_buyrecguid(::google::protobuf::uint64 value) {
  buyrecguid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AuctionRpcGetItemAsk::buyrecguid() const {
  return buyrecguid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AuctionRpcGetItemAsk::mutable_buyrecguid() {
  return &buyrecguid_;
}

// repeated uint64 SaleRecGuid = 3;
inline int AuctionRpcGetItemAsk::salerecguid_size() const {
  return salerecguid_.size();
}
inline void AuctionRpcGetItemAsk::clear_salerecguid() {
  salerecguid_.Clear();
}
inline ::google::protobuf::uint64 AuctionRpcGetItemAsk::salerecguid(int index) const {
  return salerecguid_.Get(index);
}
inline void AuctionRpcGetItemAsk::set_salerecguid(int index, ::google::protobuf::uint64 value) {
  salerecguid_.Set(index, value);
}
inline void AuctionRpcGetItemAsk::add_salerecguid(::google::protobuf::uint64 value) {
  salerecguid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AuctionRpcGetItemAsk::salerecguid() const {
  return salerecguid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AuctionRpcGetItemAsk::mutable_salerecguid() {
  return &salerecguid_;
}

// -------------------------------------------------------------------

// AuctionRpcGetItemReply

// optional int32 Result = 2 [default = -1];
inline bool AuctionRpcGetItemReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcGetItemReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcGetItemReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcGetItemReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcGetItemReply::result() const {
  return result_;
}
inline void AuctionRpcGetItemReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .AuctionRecSimple Record = 3;
inline int AuctionRpcGetItemReply::record_size() const {
  return record_.size();
}
inline void AuctionRpcGetItemReply::clear_record() {
  record_.Clear();
}
inline const ::AuctionRecSimple& AuctionRpcGetItemReply::record(int index) const {
  return record_.Get(index);
}
inline ::AuctionRecSimple* AuctionRpcGetItemReply::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::AuctionRecSimple* AuctionRpcGetItemReply::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >&
AuctionRpcGetItemReply::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >*
AuctionRpcGetItemReply::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// AuctionRpcRecordAsk

// -------------------------------------------------------------------

// AuctionRpcRecordReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcRecordReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcRecordReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcRecordReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcRecordReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcRecordReply::result() const {
  return result_;
}
inline void AuctionRpcRecordReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .AuctionRecSimple Record = 3;
inline int AuctionRpcRecordReply::record_size() const {
  return record_.size();
}
inline void AuctionRpcRecordReply::clear_record() {
  record_.Clear();
}
inline const ::AuctionRecSimple& AuctionRpcRecordReply::record(int index) const {
  return record_.Get(index);
}
inline ::AuctionRecSimple* AuctionRpcRecordReply::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::AuctionRecSimple* AuctionRpcRecordReply::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >&
AuctionRpcRecordReply::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::AuctionRecSimple >*
AuctionRpcRecordReply::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// AuctionRpcItemInfoByClassAsk

// optional int32 ItemClass = 1 [default = -1];
inline bool AuctionRpcItemInfoByClassAsk::has_itemclass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcItemInfoByClassAsk::set_has_itemclass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_has_itemclass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_itemclass() {
  itemclass_ = -1;
  clear_has_itemclass();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassAsk::itemclass() const {
  return itemclass_;
}
inline void AuctionRpcItemInfoByClassAsk::set_itemclass(::google::protobuf::int32 value) {
  set_has_itemclass();
  itemclass_ = value;
}

// repeated int32 ItemId = 2;
inline int AuctionRpcItemInfoByClassAsk::itemid_size() const {
  return itemid_.size();
}
inline void AuctionRpcItemInfoByClassAsk::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassAsk::itemid(int index) const {
  return itemid_.Get(index);
}
inline void AuctionRpcItemInfoByClassAsk::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void AuctionRpcItemInfoByClassAsk::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AuctionRpcItemInfoByClassAsk::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AuctionRpcItemInfoByClassAsk::mutable_itemid() {
  return &itemid_;
}

// optional int32 ItemSubClass = 3 [default = -1];
inline bool AuctionRpcItemInfoByClassAsk::has_itemsubclass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRpcItemInfoByClassAsk::set_has_itemsubclass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_has_itemsubclass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_itemsubclass() {
  itemsubclass_ = -1;
  clear_has_itemsubclass();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassAsk::itemsubclass() const {
  return itemsubclass_;
}
inline void AuctionRpcItemInfoByClassAsk::set_itemsubclass(::google::protobuf::int32 value) {
  set_has_itemsubclass();
  itemsubclass_ = value;
}

// optional int32 Prof = 5 [default = -1];
inline bool AuctionRpcItemInfoByClassAsk::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionRpcItemInfoByClassAsk::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassAsk::prof() const {
  return prof_;
}
inline void AuctionRpcItemInfoByClassAsk::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 Level = 6 [default = -1];
inline bool AuctionRpcItemInfoByClassAsk::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionRpcItemInfoByClassAsk::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionRpcItemInfoByClassAsk::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassAsk::level() const {
  return level_;
}
inline void AuctionRpcItemInfoByClassAsk::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcItemInfoByClassReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcItemInfoByClassReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcItemInfoByClassReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcItemInfoByClassReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcItemInfoByClassReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcItemInfoByClassReply::result() const {
  return result_;
}
inline void AuctionRpcItemInfoByClassReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .AuctionItemCnt ItemCount = 2;
inline int AuctionRpcItemInfoByClassReply::itemcount_size() const {
  return itemcount_.size();
}
inline void AuctionRpcItemInfoByClassReply::clear_itemcount() {
  itemcount_.Clear();
}
inline const ::AuctionItemCnt& AuctionRpcItemInfoByClassReply::itemcount(int index) const {
  return itemcount_.Get(index);
}
inline ::AuctionItemCnt* AuctionRpcItemInfoByClassReply::mutable_itemcount(int index) {
  return itemcount_.Mutable(index);
}
inline ::AuctionItemCnt* AuctionRpcItemInfoByClassReply::add_itemcount() {
  return itemcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AuctionItemCnt >&
AuctionRpcItemInfoByClassReply::itemcount() const {
  return itemcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::AuctionItemCnt >*
AuctionRpcItemInfoByClassReply::mutable_itemcount() {
  return &itemcount_;
}

// -------------------------------------------------------------------

// AuctionRpcSalePrepareAsk

// optional int32 ItemId = 1 [default = -1];
inline bool AuctionRpcSalePrepareAsk::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSalePrepareAsk::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSalePrepareAsk::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSalePrepareAsk::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareAsk::itemid() const {
  return itemid_;
}
inline void AuctionRpcSalePrepareAsk::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcSalePrepareReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcSalePrepareReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcSalePrepareReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcSalePrepareReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcSalePrepareReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareReply::result() const {
  return result_;
}
inline void AuctionRpcSalePrepareReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 ItemId = 2 [default = -1];
inline bool AuctionRpcSalePrepareReply::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRpcSalePrepareReply::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRpcSalePrepareReply::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRpcSalePrepareReply::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareReply::itemid() const {
  return itemid_;
}
inline void AuctionRpcSalePrepareReply::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 BasePrice = 3 [default = 0];
inline bool AuctionRpcSalePrepareReply::has_baseprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRpcSalePrepareReply::set_has_baseprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRpcSalePrepareReply::clear_has_baseprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRpcSalePrepareReply::clear_baseprice() {
  baseprice_ = 0;
  clear_has_baseprice();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareReply::baseprice() const {
  return baseprice_;
}
inline void AuctionRpcSalePrepareReply::set_baseprice(::google::protobuf::int32 value) {
  set_has_baseprice();
  baseprice_ = value;
}

// repeated int32 GoldGroup = 4;
inline int AuctionRpcSalePrepareReply::goldgroup_size() const {
  return goldgroup_.size();
}
inline void AuctionRpcSalePrepareReply::clear_goldgroup() {
  goldgroup_.Clear();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareReply::goldgroup(int index) const {
  return goldgroup_.Get(index);
}
inline void AuctionRpcSalePrepareReply::set_goldgroup(int index, ::google::protobuf::int32 value) {
  goldgroup_.Set(index, value);
}
inline void AuctionRpcSalePrepareReply::add_goldgroup(::google::protobuf::int32 value) {
  goldgroup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AuctionRpcSalePrepareReply::goldgroup() const {
  return goldgroup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AuctionRpcSalePrepareReply::mutable_goldgroup() {
  return &goldgroup_;
}

// repeated int32 DiamondGroup = 5;
inline int AuctionRpcSalePrepareReply::diamondgroup_size() const {
  return diamondgroup_.size();
}
inline void AuctionRpcSalePrepareReply::clear_diamondgroup() {
  diamondgroup_.Clear();
}
inline ::google::protobuf::int32 AuctionRpcSalePrepareReply::diamondgroup(int index) const {
  return diamondgroup_.Get(index);
}
inline void AuctionRpcSalePrepareReply::set_diamondgroup(int index, ::google::protobuf::int32 value) {
  diamondgroup_.Set(index, value);
}
inline void AuctionRpcSalePrepareReply::add_diamondgroup(::google::protobuf::int32 value) {
  diamondgroup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AuctionRpcSalePrepareReply::diamondgroup() const {
  return diamondgroup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AuctionRpcSalePrepareReply::mutable_diamondgroup() {
  return &diamondgroup_;
}

// -------------------------------------------------------------------

// AuctionRpcGetItemBackAsk

// optional uint64 ItemGuid = 1 [default = 0];
inline bool AuctionRpcGetItemBackAsk::has_itemguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcGetItemBackAsk::set_has_itemguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcGetItemBackAsk::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcGetItemBackAsk::clear_itemguid() {
  itemguid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemguid();
}
inline ::google::protobuf::uint64 AuctionRpcGetItemBackAsk::itemguid() const {
  return itemguid_;
}
inline void AuctionRpcGetItemBackAsk::set_itemguid(::google::protobuf::uint64 value) {
  set_has_itemguid();
  itemguid_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcGetItemBackReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcGetItemBackReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcGetItemBackReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcGetItemBackReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcGetItemBackReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcGetItemBackReply::result() const {
  return result_;
}
inline void AuctionRpcGetItemBackReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AuctionRpcGetMySaleListAsk

// -------------------------------------------------------------------

// AuctionRpcGetMySaleListReply

// optional int32 Result = 1 [default = -1];
inline bool AuctionRpcGetMySaleListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRpcGetMySaleListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRpcGetMySaleListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRpcGetMySaleListReply::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 AuctionRpcGetMySaleListReply::result() const {
  return result_;
}
inline void AuctionRpcGetMySaleListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .AuctionItem AuctionItem = 2;
inline int AuctionRpcGetMySaleListReply::auctionitem_size() const {
  return auctionitem_.size();
}
inline void AuctionRpcGetMySaleListReply::clear_auctionitem() {
  auctionitem_.Clear();
}
inline const ::AuctionItem& AuctionRpcGetMySaleListReply::auctionitem(int index) const {
  return auctionitem_.Get(index);
}
inline ::AuctionItem* AuctionRpcGetMySaleListReply::mutable_auctionitem(int index) {
  return auctionitem_.Mutable(index);
}
inline ::AuctionItem* AuctionRpcGetMySaleListReply::add_auctionitem() {
  return auctionitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AuctionItem >&
AuctionRpcGetMySaleListReply::auctionitem() const {
  return auctionitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::AuctionItem >*
AuctionRpcGetMySaleListReply::mutable_auctionitem() {
  return &auctionitem_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuctionRpc_2eproto__INCLUDED
