// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuctionRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AuctionRpcAuctionInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcAuctionInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcAuctionInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcAuctionInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSellItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSellItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSellItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSellItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcBuyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcBuyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcBuyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcBuyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSellAgainAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSellAgainAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSellAgainReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSellAgainReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcRecordAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcRecordAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcRecordReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcRecordReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcItemInfoByClassAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcItemInfoByClassAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcItemInfoByClassReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcItemInfoByClassReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSalePrepareAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSalePrepareAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcSalePrepareReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcSalePrepareReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetItemBackAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetItemBackAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetItemBackReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetItemBackReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetMySaleListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetMySaleListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRpcGetMySaleListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRpcGetMySaleListReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuctionRpc_2eproto() {
  protobuf_AddDesc_AuctionRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuctionRpc.proto");
  GOOGLE_CHECK(file != NULL);
  AuctionRpcAuctionInfoAsk_descriptor_ = file->message_type(0);
  static const int AuctionRpcAuctionInfoAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoAsk, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoAsk, queuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoAsk, curpage_),
  };
  AuctionRpcAuctionInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcAuctionInfoAsk_descriptor_,
      AuctionRpcAuctionInfoAsk::default_instance_,
      AuctionRpcAuctionInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcAuctionInfoAsk));
  AuctionRpcAuctionInfoReply_descriptor_ = file->message_type(1);
  static const int AuctionRpcAuctionInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoReply, auctionitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoReply, totalpage_),
  };
  AuctionRpcAuctionInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcAuctionInfoReply_descriptor_,
      AuctionRpcAuctionInfoReply::default_instance_,
      AuctionRpcAuctionInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcAuctionInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcAuctionInfoReply));
  AuctionRpcSellItemAsk_descriptor_ = file->message_type(2);
  static const int AuctionRpcSellItemAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, count_),
  };
  AuctionRpcSellItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSellItemAsk_descriptor_,
      AuctionRpcSellItemAsk::default_instance_,
      AuctionRpcSellItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSellItemAsk));
  AuctionRpcSellItemReply_descriptor_ = file->message_type(3);
  static const int AuctionRpcSellItemReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemReply, result_),
  };
  AuctionRpcSellItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSellItemReply_descriptor_,
      AuctionRpcSellItemReply::default_instance_,
      AuctionRpcSellItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSellItemReply));
  AuctionRpcBuyAsk_descriptor_ = file->message_type(4);
  static const int AuctionRpcBuyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyAsk, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyAsk, count_),
  };
  AuctionRpcBuyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcBuyAsk_descriptor_,
      AuctionRpcBuyAsk::default_instance_,
      AuctionRpcBuyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcBuyAsk));
  AuctionRpcBuyReply_descriptor_ = file->message_type(5);
  static const int AuctionRpcBuyReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyReply, result_),
  };
  AuctionRpcBuyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcBuyReply_descriptor_,
      AuctionRpcBuyReply::default_instance_,
      AuctionRpcBuyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcBuyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcBuyReply));
  AuctionRpcSellAgainAsk_descriptor_ = file->message_type(6);
  static const int AuctionRpcSellAgainAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainAsk, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainAsk, price_),
  };
  AuctionRpcSellAgainAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSellAgainAsk_descriptor_,
      AuctionRpcSellAgainAsk::default_instance_,
      AuctionRpcSellAgainAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSellAgainAsk));
  AuctionRpcSellAgainReply_descriptor_ = file->message_type(7);
  static const int AuctionRpcSellAgainReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainReply, result_),
  };
  AuctionRpcSellAgainReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSellAgainReply_descriptor_,
      AuctionRpcSellAgainReply::default_instance_,
      AuctionRpcSellAgainReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSellAgainReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSellAgainReply));
  AuctionRpcGetItemAsk_descriptor_ = file->message_type(8);
  static const int AuctionRpcGetItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemAsk, buyrecguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemAsk, salerecguid_),
  };
  AuctionRpcGetItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetItemAsk_descriptor_,
      AuctionRpcGetItemAsk::default_instance_,
      AuctionRpcGetItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetItemAsk));
  AuctionRpcGetItemReply_descriptor_ = file->message_type(9);
  static const int AuctionRpcGetItemReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemReply, record_),
  };
  AuctionRpcGetItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetItemReply_descriptor_,
      AuctionRpcGetItemReply::default_instance_,
      AuctionRpcGetItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetItemReply));
  AuctionRpcRecordAsk_descriptor_ = file->message_type(10);
  static const int AuctionRpcRecordAsk_offsets_[1] = {
  };
  AuctionRpcRecordAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcRecordAsk_descriptor_,
      AuctionRpcRecordAsk::default_instance_,
      AuctionRpcRecordAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcRecordAsk));
  AuctionRpcRecordReply_descriptor_ = file->message_type(11);
  static const int AuctionRpcRecordReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordReply, record_),
  };
  AuctionRpcRecordReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcRecordReply_descriptor_,
      AuctionRpcRecordReply::default_instance_,
      AuctionRpcRecordReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcRecordReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcRecordReply));
  AuctionRpcItemInfoByClassAsk_descriptor_ = file->message_type(12);
  static const int AuctionRpcItemInfoByClassAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, itemclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, itemsubclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, level_),
  };
  AuctionRpcItemInfoByClassAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcItemInfoByClassAsk_descriptor_,
      AuctionRpcItemInfoByClassAsk::default_instance_,
      AuctionRpcItemInfoByClassAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcItemInfoByClassAsk));
  AuctionRpcItemInfoByClassReply_descriptor_ = file->message_type(13);
  static const int AuctionRpcItemInfoByClassReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassReply, itemcount_),
  };
  AuctionRpcItemInfoByClassReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcItemInfoByClassReply_descriptor_,
      AuctionRpcItemInfoByClassReply::default_instance_,
      AuctionRpcItemInfoByClassReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcItemInfoByClassReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcItemInfoByClassReply));
  AuctionRpcSalePrepareAsk_descriptor_ = file->message_type(14);
  static const int AuctionRpcSalePrepareAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareAsk, itemid_),
  };
  AuctionRpcSalePrepareAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSalePrepareAsk_descriptor_,
      AuctionRpcSalePrepareAsk::default_instance_,
      AuctionRpcSalePrepareAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSalePrepareAsk));
  AuctionRpcSalePrepareReply_descriptor_ = file->message_type(15);
  static const int AuctionRpcSalePrepareReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, baseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, goldgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, diamondgroup_),
  };
  AuctionRpcSalePrepareReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcSalePrepareReply_descriptor_,
      AuctionRpcSalePrepareReply::default_instance_,
      AuctionRpcSalePrepareReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcSalePrepareReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcSalePrepareReply));
  AuctionRpcGetItemBackAsk_descriptor_ = file->message_type(16);
  static const int AuctionRpcGetItemBackAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackAsk, itemguid_),
  };
  AuctionRpcGetItemBackAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetItemBackAsk_descriptor_,
      AuctionRpcGetItemBackAsk::default_instance_,
      AuctionRpcGetItemBackAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetItemBackAsk));
  AuctionRpcGetItemBackReply_descriptor_ = file->message_type(17);
  static const int AuctionRpcGetItemBackReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackReply, result_),
  };
  AuctionRpcGetItemBackReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetItemBackReply_descriptor_,
      AuctionRpcGetItemBackReply::default_instance_,
      AuctionRpcGetItemBackReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetItemBackReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetItemBackReply));
  AuctionRpcGetMySaleListAsk_descriptor_ = file->message_type(18);
  static const int AuctionRpcGetMySaleListAsk_offsets_[1] = {
  };
  AuctionRpcGetMySaleListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetMySaleListAsk_descriptor_,
      AuctionRpcGetMySaleListAsk::default_instance_,
      AuctionRpcGetMySaleListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetMySaleListAsk));
  AuctionRpcGetMySaleListReply_descriptor_ = file->message_type(19);
  static const int AuctionRpcGetMySaleListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListReply, auctionitem_),
  };
  AuctionRpcGetMySaleListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRpcGetMySaleListReply_descriptor_,
      AuctionRpcGetMySaleListReply::default_instance_,
      AuctionRpcGetMySaleListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRpcGetMySaleListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRpcGetMySaleListReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuctionRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcAuctionInfoAsk_descriptor_, &AuctionRpcAuctionInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcAuctionInfoReply_descriptor_, &AuctionRpcAuctionInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSellItemAsk_descriptor_, &AuctionRpcSellItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSellItemReply_descriptor_, &AuctionRpcSellItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcBuyAsk_descriptor_, &AuctionRpcBuyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcBuyReply_descriptor_, &AuctionRpcBuyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSellAgainAsk_descriptor_, &AuctionRpcSellAgainAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSellAgainReply_descriptor_, &AuctionRpcSellAgainReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetItemAsk_descriptor_, &AuctionRpcGetItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetItemReply_descriptor_, &AuctionRpcGetItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcRecordAsk_descriptor_, &AuctionRpcRecordAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcRecordReply_descriptor_, &AuctionRpcRecordReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcItemInfoByClassAsk_descriptor_, &AuctionRpcItemInfoByClassAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcItemInfoByClassReply_descriptor_, &AuctionRpcItemInfoByClassReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSalePrepareAsk_descriptor_, &AuctionRpcSalePrepareAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcSalePrepareReply_descriptor_, &AuctionRpcSalePrepareReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetItemBackAsk_descriptor_, &AuctionRpcGetItemBackAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetItemBackReply_descriptor_, &AuctionRpcGetItemBackReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetMySaleListAsk_descriptor_, &AuctionRpcGetMySaleListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRpcGetMySaleListReply_descriptor_, &AuctionRpcGetMySaleListReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuctionRpc_2eproto() {
  delete AuctionRpcAuctionInfoAsk::default_instance_;
  delete AuctionRpcAuctionInfoAsk_reflection_;
  delete AuctionRpcAuctionInfoReply::default_instance_;
  delete AuctionRpcAuctionInfoReply_reflection_;
  delete AuctionRpcSellItemAsk::default_instance_;
  delete AuctionRpcSellItemAsk_reflection_;
  delete AuctionRpcSellItemReply::default_instance_;
  delete AuctionRpcSellItemReply_reflection_;
  delete AuctionRpcBuyAsk::default_instance_;
  delete AuctionRpcBuyAsk_reflection_;
  delete AuctionRpcBuyReply::default_instance_;
  delete AuctionRpcBuyReply_reflection_;
  delete AuctionRpcSellAgainAsk::default_instance_;
  delete AuctionRpcSellAgainAsk_reflection_;
  delete AuctionRpcSellAgainReply::default_instance_;
  delete AuctionRpcSellAgainReply_reflection_;
  delete AuctionRpcGetItemAsk::default_instance_;
  delete AuctionRpcGetItemAsk_reflection_;
  delete AuctionRpcGetItemReply::default_instance_;
  delete AuctionRpcGetItemReply_reflection_;
  delete AuctionRpcRecordAsk::default_instance_;
  delete AuctionRpcRecordAsk_reflection_;
  delete AuctionRpcRecordReply::default_instance_;
  delete AuctionRpcRecordReply_reflection_;
  delete AuctionRpcItemInfoByClassAsk::default_instance_;
  delete AuctionRpcItemInfoByClassAsk_reflection_;
  delete AuctionRpcItemInfoByClassReply::default_instance_;
  delete AuctionRpcItemInfoByClassReply_reflection_;
  delete AuctionRpcSalePrepareAsk::default_instance_;
  delete AuctionRpcSalePrepareAsk_reflection_;
  delete AuctionRpcSalePrepareReply::default_instance_;
  delete AuctionRpcSalePrepareReply_reflection_;
  delete AuctionRpcGetItemBackAsk::default_instance_;
  delete AuctionRpcGetItemBackAsk_reflection_;
  delete AuctionRpcGetItemBackReply::default_instance_;
  delete AuctionRpcGetItemBackReply_reflection_;
  delete AuctionRpcGetMySaleListAsk::default_instance_;
  delete AuctionRpcGetMySaleListAsk_reflection_;
  delete AuctionRpcGetMySaleListReply::default_instance_;
  delete AuctionRpcGetMySaleListReply_reflection_;
}

void protobuf_AddDesc_AuctionRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020AuctionRpc.proto\032\022PublicStruct.proto\"Z"
    "\n\030AuctionRpcAuctionInfoAsk\022\022\n\006ItemId\030\r \001"
    "(\005:\002-1\022\025\n\tQueueType\030\020 \001(\005:\002-1\022\023\n\007CurPage"
    "\030\021 \001(\005:\002-1\"i\n\032AuctionRpcAuctionInfoReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\013AuctionItem\030\002 \003("
    "\0132\014.AuctionItem\022\024\n\tTotalPage\030\003 \001(\005:\0011\"{\n"
    "\025AuctionRpcSellItemAsk\022\023\n\010ItemGuid\030\001 \001(\004"
    ":\0010\022\022\n\006ItemId\030\002 \001(\005:\002-1\022\020\n\005Price\030\003 \001(\005:\001"
    "0\022\024\n\010Currency\030\004 \001(\005:\002-1\022\021\n\005Count\030\005 \001(\005:\002"
    "-1\"-\n\027AuctionRpcSellItemReply\022\022\n\006Result\030"
    "\001 \001(\005:\002-1\":\n\020AuctionRpcBuyAsk\022\023\n\010ItemGui"
    "d\030\001 \001(\004:\0010\022\021\n\005Count\030\002 \001(\005:\002-1\"(\n\022Auction"
    "RpcBuyReply\022\022\n\006Result\030\001 \001(\005:\002-1\"@\n\026Aucti"
    "onRpcSellAgainAsk\022\023\n\010ItemGuid\030\001 \001(\004:\0010\022\021"
    "\n\005Price\030\002 \001(\005:\002-1\".\n\030AuctionRpcSellAgain"
    "Reply\022\022\n\006Result\030\001 \001(\005:\002-1\"\?\n\024AuctionRpcG"
    "etItemAsk\022\022\n\nBuyRecGuid\030\001 \003(\004\022\023\n\013SaleRec"
    "Guid\030\003 \003(\004\"O\n\026AuctionRpcGetItemReply\022\022\n\006"
    "Result\030\002 \001(\005:\002-1\022!\n\006Record\030\003 \003(\0132\021.Aucti"
    "onRecSimple\"\025\n\023AuctionRpcRecordAsk\"N\n\025Au"
    "ctionRpcRecordReply\022\022\n\006Result\030\001 \001(\005:\002-1\022"
    "!\n\006Record\030\003 \003(\0132\021.AuctionRecSimple\"\204\001\n\034A"
    "uctionRpcItemInfoByClassAsk\022\025\n\tItemClass"
    "\030\001 \001(\005:\002-1\022\016\n\006ItemId\030\002 \003(\005\022\030\n\014ItemSubCla"
    "ss\030\003 \001(\005:\002-1\022\020\n\004Prof\030\005 \001(\005:\002-1\022\021\n\005Level\030"
    "\006 \001(\005:\002-1\"X\n\036AuctionRpcItemInfoByClassRe"
    "ply\022\022\n\006Result\030\001 \001(\005:\002-1\022\"\n\tItemCount\030\002 \003"
    "(\0132\017.AuctionItemCnt\".\n\030AuctionRpcSalePre"
    "pareAsk\022\022\n\006ItemId\030\001 \001(\005:\002-1\"\203\001\n\032AuctionR"
    "pcSalePrepareReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\022"
    "\n\006ItemId\030\002 \001(\005:\002-1\022\024\n\tBasePrice\030\003 \001(\005:\0010"
    "\022\021\n\tGoldGroup\030\004 \003(\005\022\024\n\014DiamondGroup\030\005 \003("
    "\005\"/\n\030AuctionRpcGetItemBackAsk\022\023\n\010ItemGui"
    "d\030\001 \001(\004:\0010\"0\n\032AuctionRpcGetItemBackReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\"\034\n\032AuctionRpcGetMyS"
    "aleListAsk\"U\n\034AuctionRpcGetMySaleListRep"
    "ly\022\022\n\006Result\030\001 \001(\005:\002-1\022!\n\013AuctionItem\030\002 "
    "\003(\0132\014.AuctionItem", 1497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuctionRpc.proto", &protobuf_RegisterTypes);
  AuctionRpcAuctionInfoAsk::default_instance_ = new AuctionRpcAuctionInfoAsk();
  AuctionRpcAuctionInfoReply::default_instance_ = new AuctionRpcAuctionInfoReply();
  AuctionRpcSellItemAsk::default_instance_ = new AuctionRpcSellItemAsk();
  AuctionRpcSellItemReply::default_instance_ = new AuctionRpcSellItemReply();
  AuctionRpcBuyAsk::default_instance_ = new AuctionRpcBuyAsk();
  AuctionRpcBuyReply::default_instance_ = new AuctionRpcBuyReply();
  AuctionRpcSellAgainAsk::default_instance_ = new AuctionRpcSellAgainAsk();
  AuctionRpcSellAgainReply::default_instance_ = new AuctionRpcSellAgainReply();
  AuctionRpcGetItemAsk::default_instance_ = new AuctionRpcGetItemAsk();
  AuctionRpcGetItemReply::default_instance_ = new AuctionRpcGetItemReply();
  AuctionRpcRecordAsk::default_instance_ = new AuctionRpcRecordAsk();
  AuctionRpcRecordReply::default_instance_ = new AuctionRpcRecordReply();
  AuctionRpcItemInfoByClassAsk::default_instance_ = new AuctionRpcItemInfoByClassAsk();
  AuctionRpcItemInfoByClassReply::default_instance_ = new AuctionRpcItemInfoByClassReply();
  AuctionRpcSalePrepareAsk::default_instance_ = new AuctionRpcSalePrepareAsk();
  AuctionRpcSalePrepareReply::default_instance_ = new AuctionRpcSalePrepareReply();
  AuctionRpcGetItemBackAsk::default_instance_ = new AuctionRpcGetItemBackAsk();
  AuctionRpcGetItemBackReply::default_instance_ = new AuctionRpcGetItemBackReply();
  AuctionRpcGetMySaleListAsk::default_instance_ = new AuctionRpcGetMySaleListAsk();
  AuctionRpcGetMySaleListReply::default_instance_ = new AuctionRpcGetMySaleListReply();
  AuctionRpcAuctionInfoAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcAuctionInfoReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcSellItemAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcSellItemReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcBuyAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcBuyReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcSellAgainAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcSellAgainReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetItemAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetItemReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcRecordAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcRecordReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcItemInfoByClassAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcItemInfoByClassReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcSalePrepareAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcSalePrepareReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetItemBackAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetItemBackReply::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetMySaleListAsk::default_instance_->InitAsDefaultInstance();
  AuctionRpcGetMySaleListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuctionRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuctionRpc_2eproto {
  StaticDescriptorInitializer_AuctionRpc_2eproto() {
    protobuf_AddDesc_AuctionRpc_2eproto();
  }
} static_descriptor_initializer_AuctionRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcAuctionInfoAsk::kItemIdFieldNumber;
const int AuctionRpcAuctionInfoAsk::kQueueTypeFieldNumber;
const int AuctionRpcAuctionInfoAsk::kCurPageFieldNumber;
#endif  // !_MSC_VER

AuctionRpcAuctionInfoAsk::AuctionRpcAuctionInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcAuctionInfoAsk::InitAsDefaultInstance() {
}

AuctionRpcAuctionInfoAsk::AuctionRpcAuctionInfoAsk(const AuctionRpcAuctionInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcAuctionInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  queuetype_ = -1;
  curpage_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcAuctionInfoAsk::~AuctionRpcAuctionInfoAsk() {
  SharedDtor();
}

void AuctionRpcAuctionInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcAuctionInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcAuctionInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcAuctionInfoAsk_descriptor_;
}

const AuctionRpcAuctionInfoAsk& AuctionRpcAuctionInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcAuctionInfoAsk* AuctionRpcAuctionInfoAsk::default_instance_ = NULL;

AuctionRpcAuctionInfoAsk* AuctionRpcAuctionInfoAsk::New() const {
  return new AuctionRpcAuctionInfoAsk;
}

void AuctionRpcAuctionInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
    queuetype_ = -1;
    curpage_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcAuctionInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_QueueType;
        break;
      }

      // optional int32 QueueType = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QueueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuetype_)));
          set_has_queuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CurPage;
        break;
      }

      // optional int32 CurPage = 17 [default = -1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcAuctionInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemId = 13 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->itemid(), output);
  }

  // optional int32 QueueType = 16 [default = -1];
  if (has_queuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->queuetype(), output);
  }

  // optional int32 CurPage = 17 [default = -1];
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->curpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcAuctionInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemId = 13 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->itemid(), target);
  }

  // optional int32 QueueType = 16 [default = -1];
  if (has_queuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->queuetype(), target);
  }

  // optional int32 CurPage = 17 [default = -1];
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->curpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcAuctionInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 13 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 QueueType = 16 [default = -1];
    if (has_queuetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuetype());
    }

    // optional int32 CurPage = 17 [default = -1];
    if (has_curpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcAuctionInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcAuctionInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcAuctionInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcAuctionInfoAsk::MergeFrom(const AuctionRpcAuctionInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_queuetype()) {
      set_queuetype(from.queuetype());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcAuctionInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcAuctionInfoAsk::CopyFrom(const AuctionRpcAuctionInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcAuctionInfoAsk::IsInitialized() const {

  return true;
}

void AuctionRpcAuctionInfoAsk::Swap(AuctionRpcAuctionInfoAsk* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(queuetype_, other->queuetype_);
    std::swap(curpage_, other->curpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcAuctionInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcAuctionInfoAsk_descriptor_;
  metadata.reflection = AuctionRpcAuctionInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcAuctionInfoReply::kResultFieldNumber;
const int AuctionRpcAuctionInfoReply::kAuctionItemFieldNumber;
const int AuctionRpcAuctionInfoReply::kTotalPageFieldNumber;
#endif  // !_MSC_VER

AuctionRpcAuctionInfoReply::AuctionRpcAuctionInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcAuctionInfoReply::InitAsDefaultInstance() {
}

AuctionRpcAuctionInfoReply::AuctionRpcAuctionInfoReply(const AuctionRpcAuctionInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcAuctionInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  totalpage_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcAuctionInfoReply::~AuctionRpcAuctionInfoReply() {
  SharedDtor();
}

void AuctionRpcAuctionInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcAuctionInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcAuctionInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcAuctionInfoReply_descriptor_;
}

const AuctionRpcAuctionInfoReply& AuctionRpcAuctionInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcAuctionInfoReply* AuctionRpcAuctionInfoReply::default_instance_ = NULL;

AuctionRpcAuctionInfoReply* AuctionRpcAuctionInfoReply::New() const {
  return new AuctionRpcAuctionInfoReply;
}

void AuctionRpcAuctionInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    totalpage_ = 1;
  }
  auctionitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcAuctionInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AuctionItem;
        break;
      }

      // repeated .AuctionItem AuctionItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuctionItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auctionitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AuctionItem;
        if (input->ExpectTag(24)) goto parse_TotalPage;
        break;
      }

      // optional int32 TotalPage = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpage_)));
          set_has_totalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcAuctionInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .AuctionItem AuctionItem = 2;
  for (int i = 0; i < this->auctionitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auctionitem(i), output);
  }

  // optional int32 TotalPage = 3 [default = 1];
  if (has_totalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcAuctionInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .AuctionItem AuctionItem = 2;
  for (int i = 0; i < this->auctionitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->auctionitem(i), target);
  }

  // optional int32 TotalPage = 3 [default = 1];
  if (has_totalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcAuctionInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 TotalPage = 3 [default = 1];
    if (has_totalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpage());
    }

  }
  // repeated .AuctionItem AuctionItem = 2;
  total_size += 1 * this->auctionitem_size();
  for (int i = 0; i < this->auctionitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auctionitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcAuctionInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcAuctionInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcAuctionInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcAuctionInfoReply::MergeFrom(const AuctionRpcAuctionInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  auctionitem_.MergeFrom(from.auctionitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_totalpage()) {
      set_totalpage(from.totalpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcAuctionInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcAuctionInfoReply::CopyFrom(const AuctionRpcAuctionInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcAuctionInfoReply::IsInitialized() const {

  return true;
}

void AuctionRpcAuctionInfoReply::Swap(AuctionRpcAuctionInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    auctionitem_.Swap(&other->auctionitem_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcAuctionInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcAuctionInfoReply_descriptor_;
  metadata.reflection = AuctionRpcAuctionInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSellItemAsk::kItemGuidFieldNumber;
const int AuctionRpcSellItemAsk::kItemIdFieldNumber;
const int AuctionRpcSellItemAsk::kPriceFieldNumber;
const int AuctionRpcSellItemAsk::kCurrencyFieldNumber;
const int AuctionRpcSellItemAsk::kCountFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSellItemAsk::AuctionRpcSellItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSellItemAsk::InitAsDefaultInstance() {
}

AuctionRpcSellItemAsk::AuctionRpcSellItemAsk(const AuctionRpcSellItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSellItemAsk::SharedCtor() {
  _cached_size_ = 0;
  itemguid_ = GOOGLE_ULONGLONG(0);
  itemid_ = -1;
  price_ = 0;
  currency_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSellItemAsk::~AuctionRpcSellItemAsk() {
  SharedDtor();
}

void AuctionRpcSellItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSellItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSellItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSellItemAsk_descriptor_;
}

const AuctionRpcSellItemAsk& AuctionRpcSellItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSellItemAsk* AuctionRpcSellItemAsk::default_instance_ = NULL;

AuctionRpcSellItemAsk* AuctionRpcSellItemAsk::New() const {
  return new AuctionRpcSellItemAsk;
}

void AuctionRpcSellItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemguid_ = GOOGLE_ULONGLONG(0);
    itemid_ = -1;
    price_ = 0;
    currency_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSellItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ItemGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemId;
        break;
      }

      // optional int32 ItemId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Price;
        break;
      }

      // optional int32 Price = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Currency;
        break;
      }

      // optional int32 Currency = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Count;
        break;
      }

      // optional int32 Count = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSellItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemguid(), output);
  }

  // optional int32 ItemId = 2 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 Price = 3 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Currency = 4 [default = -1];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currency(), output);
  }

  // optional int32 Count = 5 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSellItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemguid(), target);
  }

  // optional int32 ItemId = 2 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 Price = 3 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Currency = 4 [default = -1];
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currency(), target);
  }

  // optional int32 Count = 5 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSellItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ItemGuid = 1 [default = 0];
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

    // optional int32 ItemId = 2 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Price = 3 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Currency = 4 [default = -1];
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 Count = 5 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSellItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSellItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSellItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSellItemAsk::MergeFrom(const AuctionRpcSellItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSellItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSellItemAsk::CopyFrom(const AuctionRpcSellItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSellItemAsk::IsInitialized() const {

  return true;
}

void AuctionRpcSellItemAsk::Swap(AuctionRpcSellItemAsk* other) {
  if (other != this) {
    std::swap(itemguid_, other->itemguid_);
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(currency_, other->currency_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSellItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSellItemAsk_descriptor_;
  metadata.reflection = AuctionRpcSellItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSellItemReply::kResultFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSellItemReply::AuctionRpcSellItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSellItemReply::InitAsDefaultInstance() {
}

AuctionRpcSellItemReply::AuctionRpcSellItemReply(const AuctionRpcSellItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSellItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSellItemReply::~AuctionRpcSellItemReply() {
  SharedDtor();
}

void AuctionRpcSellItemReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSellItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSellItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSellItemReply_descriptor_;
}

const AuctionRpcSellItemReply& AuctionRpcSellItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSellItemReply* AuctionRpcSellItemReply::default_instance_ = NULL;

AuctionRpcSellItemReply* AuctionRpcSellItemReply::New() const {
  return new AuctionRpcSellItemReply;
}

void AuctionRpcSellItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSellItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSellItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSellItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSellItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSellItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSellItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSellItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSellItemReply::MergeFrom(const AuctionRpcSellItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSellItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSellItemReply::CopyFrom(const AuctionRpcSellItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSellItemReply::IsInitialized() const {

  return true;
}

void AuctionRpcSellItemReply::Swap(AuctionRpcSellItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSellItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSellItemReply_descriptor_;
  metadata.reflection = AuctionRpcSellItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcBuyAsk::kItemGuidFieldNumber;
const int AuctionRpcBuyAsk::kCountFieldNumber;
#endif  // !_MSC_VER

AuctionRpcBuyAsk::AuctionRpcBuyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcBuyAsk::InitAsDefaultInstance() {
}

AuctionRpcBuyAsk::AuctionRpcBuyAsk(const AuctionRpcBuyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcBuyAsk::SharedCtor() {
  _cached_size_ = 0;
  itemguid_ = GOOGLE_ULONGLONG(0);
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcBuyAsk::~AuctionRpcBuyAsk() {
  SharedDtor();
}

void AuctionRpcBuyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcBuyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcBuyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcBuyAsk_descriptor_;
}

const AuctionRpcBuyAsk& AuctionRpcBuyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcBuyAsk* AuctionRpcBuyAsk::default_instance_ = NULL;

AuctionRpcBuyAsk* AuctionRpcBuyAsk::New() const {
  return new AuctionRpcBuyAsk;
}

void AuctionRpcBuyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemguid_ = GOOGLE_ULONGLONG(0);
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcBuyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ItemGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcBuyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemguid(), output);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcBuyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemguid(), target);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcBuyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ItemGuid = 1 [default = 0];
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

    // optional int32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcBuyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcBuyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcBuyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcBuyAsk::MergeFrom(const AuctionRpcBuyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcBuyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcBuyAsk::CopyFrom(const AuctionRpcBuyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcBuyAsk::IsInitialized() const {

  return true;
}

void AuctionRpcBuyAsk::Swap(AuctionRpcBuyAsk* other) {
  if (other != this) {
    std::swap(itemguid_, other->itemguid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcBuyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcBuyAsk_descriptor_;
  metadata.reflection = AuctionRpcBuyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcBuyReply::kResultFieldNumber;
#endif  // !_MSC_VER

AuctionRpcBuyReply::AuctionRpcBuyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcBuyReply::InitAsDefaultInstance() {
}

AuctionRpcBuyReply::AuctionRpcBuyReply(const AuctionRpcBuyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcBuyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcBuyReply::~AuctionRpcBuyReply() {
  SharedDtor();
}

void AuctionRpcBuyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcBuyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcBuyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcBuyReply_descriptor_;
}

const AuctionRpcBuyReply& AuctionRpcBuyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcBuyReply* AuctionRpcBuyReply::default_instance_ = NULL;

AuctionRpcBuyReply* AuctionRpcBuyReply::New() const {
  return new AuctionRpcBuyReply;
}

void AuctionRpcBuyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcBuyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcBuyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcBuyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcBuyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcBuyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcBuyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcBuyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcBuyReply::MergeFrom(const AuctionRpcBuyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcBuyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcBuyReply::CopyFrom(const AuctionRpcBuyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcBuyReply::IsInitialized() const {

  return true;
}

void AuctionRpcBuyReply::Swap(AuctionRpcBuyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcBuyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcBuyReply_descriptor_;
  metadata.reflection = AuctionRpcBuyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSellAgainAsk::kItemGuidFieldNumber;
const int AuctionRpcSellAgainAsk::kPriceFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSellAgainAsk::AuctionRpcSellAgainAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSellAgainAsk::InitAsDefaultInstance() {
}

AuctionRpcSellAgainAsk::AuctionRpcSellAgainAsk(const AuctionRpcSellAgainAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSellAgainAsk::SharedCtor() {
  _cached_size_ = 0;
  itemguid_ = GOOGLE_ULONGLONG(0);
  price_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSellAgainAsk::~AuctionRpcSellAgainAsk() {
  SharedDtor();
}

void AuctionRpcSellAgainAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSellAgainAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSellAgainAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSellAgainAsk_descriptor_;
}

const AuctionRpcSellAgainAsk& AuctionRpcSellAgainAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSellAgainAsk* AuctionRpcSellAgainAsk::default_instance_ = NULL;

AuctionRpcSellAgainAsk* AuctionRpcSellAgainAsk::New() const {
  return new AuctionRpcSellAgainAsk;
}

void AuctionRpcSellAgainAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemguid_ = GOOGLE_ULONGLONG(0);
    price_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSellAgainAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ItemGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSellAgainAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemguid(), output);
  }

  // optional int32 Price = 2 [default = -1];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSellAgainAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemguid(), target);
  }

  // optional int32 Price = 2 [default = -1];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSellAgainAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ItemGuid = 1 [default = 0];
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

    // optional int32 Price = 2 [default = -1];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSellAgainAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSellAgainAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSellAgainAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSellAgainAsk::MergeFrom(const AuctionRpcSellAgainAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSellAgainAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSellAgainAsk::CopyFrom(const AuctionRpcSellAgainAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSellAgainAsk::IsInitialized() const {

  return true;
}

void AuctionRpcSellAgainAsk::Swap(AuctionRpcSellAgainAsk* other) {
  if (other != this) {
    std::swap(itemguid_, other->itemguid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSellAgainAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSellAgainAsk_descriptor_;
  metadata.reflection = AuctionRpcSellAgainAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSellAgainReply::kResultFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSellAgainReply::AuctionRpcSellAgainReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSellAgainReply::InitAsDefaultInstance() {
}

AuctionRpcSellAgainReply::AuctionRpcSellAgainReply(const AuctionRpcSellAgainReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSellAgainReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSellAgainReply::~AuctionRpcSellAgainReply() {
  SharedDtor();
}

void AuctionRpcSellAgainReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSellAgainReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSellAgainReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSellAgainReply_descriptor_;
}

const AuctionRpcSellAgainReply& AuctionRpcSellAgainReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSellAgainReply* AuctionRpcSellAgainReply::default_instance_ = NULL;

AuctionRpcSellAgainReply* AuctionRpcSellAgainReply::New() const {
  return new AuctionRpcSellAgainReply;
}

void AuctionRpcSellAgainReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSellAgainReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSellAgainReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSellAgainReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSellAgainReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSellAgainReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSellAgainReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSellAgainReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSellAgainReply::MergeFrom(const AuctionRpcSellAgainReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSellAgainReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSellAgainReply::CopyFrom(const AuctionRpcSellAgainReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSellAgainReply::IsInitialized() const {

  return true;
}

void AuctionRpcSellAgainReply::Swap(AuctionRpcSellAgainReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSellAgainReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSellAgainReply_descriptor_;
  metadata.reflection = AuctionRpcSellAgainReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcGetItemAsk::kBuyRecGuidFieldNumber;
const int AuctionRpcGetItemAsk::kSaleRecGuidFieldNumber;
#endif  // !_MSC_VER

AuctionRpcGetItemAsk::AuctionRpcGetItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetItemAsk::InitAsDefaultInstance() {
}

AuctionRpcGetItemAsk::AuctionRpcGetItemAsk(const AuctionRpcGetItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetItemAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetItemAsk::~AuctionRpcGetItemAsk() {
  SharedDtor();
}

void AuctionRpcGetItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetItemAsk_descriptor_;
}

const AuctionRpcGetItemAsk& AuctionRpcGetItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetItemAsk* AuctionRpcGetItemAsk::default_instance_ = NULL;

AuctionRpcGetItemAsk* AuctionRpcGetItemAsk::New() const {
  return new AuctionRpcGetItemAsk;
}

void AuctionRpcGetItemAsk::Clear() {
  buyrecguid_.Clear();
  salerecguid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 BuyRecGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyRecGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_buyrecguid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_buyrecguid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_BuyRecGuid;
        if (input->ExpectTag(24)) goto parse_SaleRecGuid;
        break;
      }

      // repeated uint64 SaleRecGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SaleRecGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_salerecguid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_salerecguid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SaleRecGuid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcGetItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 BuyRecGuid = 1;
  for (int i = 0; i < this->buyrecguid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->buyrecguid(i), output);
  }

  // repeated uint64 SaleRecGuid = 3;
  for (int i = 0; i < this->salerecguid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->salerecguid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 BuyRecGuid = 1;
  for (int i = 0; i < this->buyrecguid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->buyrecguid(i), target);
  }

  // repeated uint64 SaleRecGuid = 3;
  for (int i = 0; i < this->salerecguid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->salerecguid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetItemAsk::ByteSize() const {
  int total_size = 0;

  // repeated uint64 BuyRecGuid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->buyrecguid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->buyrecguid(i));
    }
    total_size += 1 * this->buyrecguid_size() + data_size;
  }

  // repeated uint64 SaleRecGuid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->salerecguid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->salerecguid(i));
    }
    total_size += 1 * this->salerecguid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetItemAsk::MergeFrom(const AuctionRpcGetItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyrecguid_.MergeFrom(from.buyrecguid_);
  salerecguid_.MergeFrom(from.salerecguid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetItemAsk::CopyFrom(const AuctionRpcGetItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetItemAsk::IsInitialized() const {

  return true;
}

void AuctionRpcGetItemAsk::Swap(AuctionRpcGetItemAsk* other) {
  if (other != this) {
    buyrecguid_.Swap(&other->buyrecguid_);
    salerecguid_.Swap(&other->salerecguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetItemAsk_descriptor_;
  metadata.reflection = AuctionRpcGetItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcGetItemReply::kResultFieldNumber;
const int AuctionRpcGetItemReply::kRecordFieldNumber;
#endif  // !_MSC_VER

AuctionRpcGetItemReply::AuctionRpcGetItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetItemReply::InitAsDefaultInstance() {
}

AuctionRpcGetItemReply::AuctionRpcGetItemReply(const AuctionRpcGetItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetItemReply::~AuctionRpcGetItemReply() {
  SharedDtor();
}

void AuctionRpcGetItemReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetItemReply_descriptor_;
}

const AuctionRpcGetItemReply& AuctionRpcGetItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetItemReply* AuctionRpcGetItemReply::default_instance_ = NULL;

AuctionRpcGetItemReply* AuctionRpcGetItemReply::New() const {
  return new AuctionRpcGetItemReply;
}

void AuctionRpcGetItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Record;
        break;
      }

      // repeated .AuctionRecSimple Record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcGetItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 2 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .AuctionRecSimple Record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 2 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .AuctionRecSimple Record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 2 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .AuctionRecSimple Record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetItemReply::MergeFrom(const AuctionRpcGetItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetItemReply::CopyFrom(const AuctionRpcGetItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetItemReply::IsInitialized() const {

  return true;
}

void AuctionRpcGetItemReply::Swap(AuctionRpcGetItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetItemReply_descriptor_;
  metadata.reflection = AuctionRpcGetItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AuctionRpcRecordAsk::AuctionRpcRecordAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcRecordAsk::InitAsDefaultInstance() {
}

AuctionRpcRecordAsk::AuctionRpcRecordAsk(const AuctionRpcRecordAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcRecordAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcRecordAsk::~AuctionRpcRecordAsk() {
  SharedDtor();
}

void AuctionRpcRecordAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcRecordAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcRecordAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcRecordAsk_descriptor_;
}

const AuctionRpcRecordAsk& AuctionRpcRecordAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcRecordAsk* AuctionRpcRecordAsk::default_instance_ = NULL;

AuctionRpcRecordAsk* AuctionRpcRecordAsk::New() const {
  return new AuctionRpcRecordAsk;
}

void AuctionRpcRecordAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcRecordAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AuctionRpcRecordAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcRecordAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcRecordAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcRecordAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcRecordAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcRecordAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcRecordAsk::MergeFrom(const AuctionRpcRecordAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcRecordAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcRecordAsk::CopyFrom(const AuctionRpcRecordAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcRecordAsk::IsInitialized() const {

  return true;
}

void AuctionRpcRecordAsk::Swap(AuctionRpcRecordAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcRecordAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcRecordAsk_descriptor_;
  metadata.reflection = AuctionRpcRecordAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcRecordReply::kResultFieldNumber;
const int AuctionRpcRecordReply::kRecordFieldNumber;
#endif  // !_MSC_VER

AuctionRpcRecordReply::AuctionRpcRecordReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcRecordReply::InitAsDefaultInstance() {
}

AuctionRpcRecordReply::AuctionRpcRecordReply(const AuctionRpcRecordReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcRecordReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcRecordReply::~AuctionRpcRecordReply() {
  SharedDtor();
}

void AuctionRpcRecordReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcRecordReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcRecordReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcRecordReply_descriptor_;
}

const AuctionRpcRecordReply& AuctionRpcRecordReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcRecordReply* AuctionRpcRecordReply::default_instance_ = NULL;

AuctionRpcRecordReply* AuctionRpcRecordReply::New() const {
  return new AuctionRpcRecordReply;
}

void AuctionRpcRecordReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcRecordReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Record;
        break;
      }

      // repeated .AuctionRecSimple Record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcRecordReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .AuctionRecSimple Record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcRecordReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .AuctionRecSimple Record = 3;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcRecordReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .AuctionRecSimple Record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcRecordReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcRecordReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcRecordReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcRecordReply::MergeFrom(const AuctionRpcRecordReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcRecordReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcRecordReply::CopyFrom(const AuctionRpcRecordReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcRecordReply::IsInitialized() const {

  return true;
}

void AuctionRpcRecordReply::Swap(AuctionRpcRecordReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcRecordReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcRecordReply_descriptor_;
  metadata.reflection = AuctionRpcRecordReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcItemInfoByClassAsk::kItemClassFieldNumber;
const int AuctionRpcItemInfoByClassAsk::kItemIdFieldNumber;
const int AuctionRpcItemInfoByClassAsk::kItemSubClassFieldNumber;
const int AuctionRpcItemInfoByClassAsk::kProfFieldNumber;
const int AuctionRpcItemInfoByClassAsk::kLevelFieldNumber;
#endif  // !_MSC_VER

AuctionRpcItemInfoByClassAsk::AuctionRpcItemInfoByClassAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcItemInfoByClassAsk::InitAsDefaultInstance() {
}

AuctionRpcItemInfoByClassAsk::AuctionRpcItemInfoByClassAsk(const AuctionRpcItemInfoByClassAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcItemInfoByClassAsk::SharedCtor() {
  _cached_size_ = 0;
  itemclass_ = -1;
  itemsubclass_ = -1;
  prof_ = -1;
  level_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcItemInfoByClassAsk::~AuctionRpcItemInfoByClassAsk() {
  SharedDtor();
}

void AuctionRpcItemInfoByClassAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcItemInfoByClassAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcItemInfoByClassAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcItemInfoByClassAsk_descriptor_;
}

const AuctionRpcItemInfoByClassAsk& AuctionRpcItemInfoByClassAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcItemInfoByClassAsk* AuctionRpcItemInfoByClassAsk::default_instance_ = NULL;

AuctionRpcItemInfoByClassAsk* AuctionRpcItemInfoByClassAsk::New() const {
  return new AuctionRpcItemInfoByClassAsk;
}

void AuctionRpcItemInfoByClassAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemclass_ = -1;
    itemsubclass_ = -1;
    prof_ = -1;
    level_ = -1;
  }
  itemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcItemInfoByClassAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemClass = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemclass_)));
          set_has_itemclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemId;
        break;
      }

      // repeated int32 ItemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemId;
        if (input->ExpectTag(24)) goto parse_ItemSubClass;
        break;
      }

      // optional int32 ItemSubClass = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemSubClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsubclass_)));
          set_has_itemsubclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Prof;
        break;
      }

      // optional int32 Prof = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // optional int32 Level = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcItemInfoByClassAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemClass = 1 [default = -1];
  if (has_itemclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemclass(), output);
  }

  // repeated int32 ItemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // optional int32 ItemSubClass = 3 [default = -1];
  if (has_itemsubclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemsubclass(), output);
  }

  // optional int32 Prof = 5 [default = -1];
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  // optional int32 Level = 6 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcItemInfoByClassAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemClass = 1 [default = -1];
  if (has_itemclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemclass(), target);
  }

  // repeated int32 ItemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // optional int32 ItemSubClass = 3 [default = -1];
  if (has_itemsubclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemsubclass(), target);
  }

  // optional int32 Prof = 5 [default = -1];
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  // optional int32 Level = 6 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcItemInfoByClassAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemClass = 1 [default = -1];
    if (has_itemclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemclass());
    }

    // optional int32 ItemSubClass = 3 [default = -1];
    if (has_itemsubclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemsubclass());
    }

    // optional int32 Prof = 5 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 Level = 6 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated int32 ItemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcItemInfoByClassAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcItemInfoByClassAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcItemInfoByClassAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcItemInfoByClassAsk::MergeFrom(const AuctionRpcItemInfoByClassAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemclass()) {
      set_itemclass(from.itemclass());
    }
    if (from.has_itemsubclass()) {
      set_itemsubclass(from.itemsubclass());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcItemInfoByClassAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcItemInfoByClassAsk::CopyFrom(const AuctionRpcItemInfoByClassAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcItemInfoByClassAsk::IsInitialized() const {

  return true;
}

void AuctionRpcItemInfoByClassAsk::Swap(AuctionRpcItemInfoByClassAsk* other) {
  if (other != this) {
    std::swap(itemclass_, other->itemclass_);
    itemid_.Swap(&other->itemid_);
    std::swap(itemsubclass_, other->itemsubclass_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcItemInfoByClassAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcItemInfoByClassAsk_descriptor_;
  metadata.reflection = AuctionRpcItemInfoByClassAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcItemInfoByClassReply::kResultFieldNumber;
const int AuctionRpcItemInfoByClassReply::kItemCountFieldNumber;
#endif  // !_MSC_VER

AuctionRpcItemInfoByClassReply::AuctionRpcItemInfoByClassReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcItemInfoByClassReply::InitAsDefaultInstance() {
}

AuctionRpcItemInfoByClassReply::AuctionRpcItemInfoByClassReply(const AuctionRpcItemInfoByClassReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcItemInfoByClassReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcItemInfoByClassReply::~AuctionRpcItemInfoByClassReply() {
  SharedDtor();
}

void AuctionRpcItemInfoByClassReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcItemInfoByClassReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcItemInfoByClassReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcItemInfoByClassReply_descriptor_;
}

const AuctionRpcItemInfoByClassReply& AuctionRpcItemInfoByClassReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcItemInfoByClassReply* AuctionRpcItemInfoByClassReply::default_instance_ = NULL;

AuctionRpcItemInfoByClassReply* AuctionRpcItemInfoByClassReply::New() const {
  return new AuctionRpcItemInfoByClassReply;
}

void AuctionRpcItemInfoByClassReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  itemcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcItemInfoByClassReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemCount;
        break;
      }

      // repeated .AuctionItemCnt ItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemcount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcItemInfoByClassReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .AuctionItemCnt ItemCount = 2;
  for (int i = 0; i < this->itemcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcItemInfoByClassReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .AuctionItemCnt ItemCount = 2;
  for (int i = 0; i < this->itemcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcItemInfoByClassReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .AuctionItemCnt ItemCount = 2;
  total_size += 1 * this->itemcount_size();
  for (int i = 0; i < this->itemcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemcount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcItemInfoByClassReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcItemInfoByClassReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcItemInfoByClassReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcItemInfoByClassReply::MergeFrom(const AuctionRpcItemInfoByClassReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemcount_.MergeFrom(from.itemcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcItemInfoByClassReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcItemInfoByClassReply::CopyFrom(const AuctionRpcItemInfoByClassReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcItemInfoByClassReply::IsInitialized() const {

  return true;
}

void AuctionRpcItemInfoByClassReply::Swap(AuctionRpcItemInfoByClassReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    itemcount_.Swap(&other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcItemInfoByClassReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcItemInfoByClassReply_descriptor_;
  metadata.reflection = AuctionRpcItemInfoByClassReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSalePrepareAsk::kItemIdFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSalePrepareAsk::AuctionRpcSalePrepareAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSalePrepareAsk::InitAsDefaultInstance() {
}

AuctionRpcSalePrepareAsk::AuctionRpcSalePrepareAsk(const AuctionRpcSalePrepareAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSalePrepareAsk::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSalePrepareAsk::~AuctionRpcSalePrepareAsk() {
  SharedDtor();
}

void AuctionRpcSalePrepareAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSalePrepareAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSalePrepareAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSalePrepareAsk_descriptor_;
}

const AuctionRpcSalePrepareAsk& AuctionRpcSalePrepareAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSalePrepareAsk* AuctionRpcSalePrepareAsk::default_instance_ = NULL;

AuctionRpcSalePrepareAsk* AuctionRpcSalePrepareAsk::New() const {
  return new AuctionRpcSalePrepareAsk;
}

void AuctionRpcSalePrepareAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSalePrepareAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSalePrepareAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSalePrepareAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSalePrepareAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSalePrepareAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSalePrepareAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSalePrepareAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSalePrepareAsk::MergeFrom(const AuctionRpcSalePrepareAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSalePrepareAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSalePrepareAsk::CopyFrom(const AuctionRpcSalePrepareAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSalePrepareAsk::IsInitialized() const {

  return true;
}

void AuctionRpcSalePrepareAsk::Swap(AuctionRpcSalePrepareAsk* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSalePrepareAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSalePrepareAsk_descriptor_;
  metadata.reflection = AuctionRpcSalePrepareAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcSalePrepareReply::kResultFieldNumber;
const int AuctionRpcSalePrepareReply::kItemIdFieldNumber;
const int AuctionRpcSalePrepareReply::kBasePriceFieldNumber;
const int AuctionRpcSalePrepareReply::kGoldGroupFieldNumber;
const int AuctionRpcSalePrepareReply::kDiamondGroupFieldNumber;
#endif  // !_MSC_VER

AuctionRpcSalePrepareReply::AuctionRpcSalePrepareReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcSalePrepareReply::InitAsDefaultInstance() {
}

AuctionRpcSalePrepareReply::AuctionRpcSalePrepareReply(const AuctionRpcSalePrepareReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcSalePrepareReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  itemid_ = -1;
  baseprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcSalePrepareReply::~AuctionRpcSalePrepareReply() {
  SharedDtor();
}

void AuctionRpcSalePrepareReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcSalePrepareReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcSalePrepareReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcSalePrepareReply_descriptor_;
}

const AuctionRpcSalePrepareReply& AuctionRpcSalePrepareReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcSalePrepareReply* AuctionRpcSalePrepareReply::default_instance_ = NULL;

AuctionRpcSalePrepareReply* AuctionRpcSalePrepareReply::New() const {
  return new AuctionRpcSalePrepareReply;
}

void AuctionRpcSalePrepareReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    itemid_ = -1;
    baseprice_ = 0;
  }
  goldgroup_.Clear();
  diamondgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcSalePrepareReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemId;
        break;
      }

      // optional int32 ItemId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BasePrice;
        break;
      }

      // optional int32 BasePrice = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BasePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseprice_)));
          set_has_baseprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GoldGroup;
        break;
      }

      // repeated int32 GoldGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_goldgroup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_goldgroup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GoldGroup;
        if (input->ExpectTag(40)) goto parse_DiamondGroup;
        break;
      }

      // repeated int32 DiamondGroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DiamondGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_diamondgroup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_diamondgroup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DiamondGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcSalePrepareReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 ItemId = 2 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 BasePrice = 3 [default = 0];
  if (has_baseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseprice(), output);
  }

  // repeated int32 GoldGroup = 4;
  for (int i = 0; i < this->goldgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->goldgroup(i), output);
  }

  // repeated int32 DiamondGroup = 5;
  for (int i = 0; i < this->diamondgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->diamondgroup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcSalePrepareReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 ItemId = 2 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 BasePrice = 3 [default = 0];
  if (has_baseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseprice(), target);
  }

  // repeated int32 GoldGroup = 4;
  for (int i = 0; i < this->goldgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->goldgroup(i), target);
  }

  // repeated int32 DiamondGroup = 5;
  for (int i = 0; i < this->diamondgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->diamondgroup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcSalePrepareReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 ItemId = 2 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 BasePrice = 3 [default = 0];
    if (has_baseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseprice());
    }

  }
  // repeated int32 GoldGroup = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->goldgroup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->goldgroup(i));
    }
    total_size += 1 * this->goldgroup_size() + data_size;
  }

  // repeated int32 DiamondGroup = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->diamondgroup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->diamondgroup(i));
    }
    total_size += 1 * this->diamondgroup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcSalePrepareReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcSalePrepareReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcSalePrepareReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcSalePrepareReply::MergeFrom(const AuctionRpcSalePrepareReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldgroup_.MergeFrom(from.goldgroup_);
  diamondgroup_.MergeFrom(from.diamondgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_baseprice()) {
      set_baseprice(from.baseprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcSalePrepareReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcSalePrepareReply::CopyFrom(const AuctionRpcSalePrepareReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcSalePrepareReply::IsInitialized() const {

  return true;
}

void AuctionRpcSalePrepareReply::Swap(AuctionRpcSalePrepareReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(itemid_, other->itemid_);
    std::swap(baseprice_, other->baseprice_);
    goldgroup_.Swap(&other->goldgroup_);
    diamondgroup_.Swap(&other->diamondgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcSalePrepareReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcSalePrepareReply_descriptor_;
  metadata.reflection = AuctionRpcSalePrepareReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcGetItemBackAsk::kItemGuidFieldNumber;
#endif  // !_MSC_VER

AuctionRpcGetItemBackAsk::AuctionRpcGetItemBackAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetItemBackAsk::InitAsDefaultInstance() {
}

AuctionRpcGetItemBackAsk::AuctionRpcGetItemBackAsk(const AuctionRpcGetItemBackAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetItemBackAsk::SharedCtor() {
  _cached_size_ = 0;
  itemguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetItemBackAsk::~AuctionRpcGetItemBackAsk() {
  SharedDtor();
}

void AuctionRpcGetItemBackAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetItemBackAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetItemBackAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetItemBackAsk_descriptor_;
}

const AuctionRpcGetItemBackAsk& AuctionRpcGetItemBackAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetItemBackAsk* AuctionRpcGetItemBackAsk::default_instance_ = NULL;

AuctionRpcGetItemBackAsk* AuctionRpcGetItemBackAsk::New() const {
  return new AuctionRpcGetItemBackAsk;
}

void AuctionRpcGetItemBackAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetItemBackAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ItemGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcGetItemBackAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetItemBackAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ItemGuid = 1 [default = 0];
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetItemBackAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ItemGuid = 1 [default = 0];
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetItemBackAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetItemBackAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetItemBackAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetItemBackAsk::MergeFrom(const AuctionRpcGetItemBackAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetItemBackAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetItemBackAsk::CopyFrom(const AuctionRpcGetItemBackAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetItemBackAsk::IsInitialized() const {

  return true;
}

void AuctionRpcGetItemBackAsk::Swap(AuctionRpcGetItemBackAsk* other) {
  if (other != this) {
    std::swap(itemguid_, other->itemguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetItemBackAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetItemBackAsk_descriptor_;
  metadata.reflection = AuctionRpcGetItemBackAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcGetItemBackReply::kResultFieldNumber;
#endif  // !_MSC_VER

AuctionRpcGetItemBackReply::AuctionRpcGetItemBackReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetItemBackReply::InitAsDefaultInstance() {
}

AuctionRpcGetItemBackReply::AuctionRpcGetItemBackReply(const AuctionRpcGetItemBackReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetItemBackReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetItemBackReply::~AuctionRpcGetItemBackReply() {
  SharedDtor();
}

void AuctionRpcGetItemBackReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetItemBackReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetItemBackReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetItemBackReply_descriptor_;
}

const AuctionRpcGetItemBackReply& AuctionRpcGetItemBackReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetItemBackReply* AuctionRpcGetItemBackReply::default_instance_ = NULL;

AuctionRpcGetItemBackReply* AuctionRpcGetItemBackReply::New() const {
  return new AuctionRpcGetItemBackReply;
}

void AuctionRpcGetItemBackReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetItemBackReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcGetItemBackReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetItemBackReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetItemBackReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetItemBackReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetItemBackReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetItemBackReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetItemBackReply::MergeFrom(const AuctionRpcGetItemBackReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetItemBackReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetItemBackReply::CopyFrom(const AuctionRpcGetItemBackReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetItemBackReply::IsInitialized() const {

  return true;
}

void AuctionRpcGetItemBackReply::Swap(AuctionRpcGetItemBackReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetItemBackReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetItemBackReply_descriptor_;
  metadata.reflection = AuctionRpcGetItemBackReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AuctionRpcGetMySaleListAsk::AuctionRpcGetMySaleListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetMySaleListAsk::InitAsDefaultInstance() {
}

AuctionRpcGetMySaleListAsk::AuctionRpcGetMySaleListAsk(const AuctionRpcGetMySaleListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetMySaleListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetMySaleListAsk::~AuctionRpcGetMySaleListAsk() {
  SharedDtor();
}

void AuctionRpcGetMySaleListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetMySaleListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetMySaleListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetMySaleListAsk_descriptor_;
}

const AuctionRpcGetMySaleListAsk& AuctionRpcGetMySaleListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetMySaleListAsk* AuctionRpcGetMySaleListAsk::default_instance_ = NULL;

AuctionRpcGetMySaleListAsk* AuctionRpcGetMySaleListAsk::New() const {
  return new AuctionRpcGetMySaleListAsk;
}

void AuctionRpcGetMySaleListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetMySaleListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AuctionRpcGetMySaleListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetMySaleListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetMySaleListAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetMySaleListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetMySaleListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetMySaleListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetMySaleListAsk::MergeFrom(const AuctionRpcGetMySaleListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetMySaleListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetMySaleListAsk::CopyFrom(const AuctionRpcGetMySaleListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetMySaleListAsk::IsInitialized() const {

  return true;
}

void AuctionRpcGetMySaleListAsk::Swap(AuctionRpcGetMySaleListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetMySaleListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetMySaleListAsk_descriptor_;
  metadata.reflection = AuctionRpcGetMySaleListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRpcGetMySaleListReply::kResultFieldNumber;
const int AuctionRpcGetMySaleListReply::kAuctionItemFieldNumber;
#endif  // !_MSC_VER

AuctionRpcGetMySaleListReply::AuctionRpcGetMySaleListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRpcGetMySaleListReply::InitAsDefaultInstance() {
}

AuctionRpcGetMySaleListReply::AuctionRpcGetMySaleListReply(const AuctionRpcGetMySaleListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRpcGetMySaleListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRpcGetMySaleListReply::~AuctionRpcGetMySaleListReply() {
  SharedDtor();
}

void AuctionRpcGetMySaleListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRpcGetMySaleListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRpcGetMySaleListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRpcGetMySaleListReply_descriptor_;
}

const AuctionRpcGetMySaleListReply& AuctionRpcGetMySaleListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionRpc_2eproto();
  return *default_instance_;
}

AuctionRpcGetMySaleListReply* AuctionRpcGetMySaleListReply::default_instance_ = NULL;

AuctionRpcGetMySaleListReply* AuctionRpcGetMySaleListReply::New() const {
  return new AuctionRpcGetMySaleListReply;
}

void AuctionRpcGetMySaleListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  auctionitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRpcGetMySaleListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AuctionItem;
        break;
      }

      // repeated .AuctionItem AuctionItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuctionItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auctionitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AuctionItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRpcGetMySaleListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .AuctionItem AuctionItem = 2;
  for (int i = 0; i < this->auctionitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auctionitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRpcGetMySaleListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .AuctionItem AuctionItem = 2;
  for (int i = 0; i < this->auctionitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->auctionitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRpcGetMySaleListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .AuctionItem AuctionItem = 2;
  total_size += 1 * this->auctionitem_size();
  for (int i = 0; i < this->auctionitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auctionitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRpcGetMySaleListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRpcGetMySaleListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRpcGetMySaleListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRpcGetMySaleListReply::MergeFrom(const AuctionRpcGetMySaleListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  auctionitem_.MergeFrom(from.auctionitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRpcGetMySaleListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRpcGetMySaleListReply::CopyFrom(const AuctionRpcGetMySaleListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRpcGetMySaleListReply::IsInitialized() const {

  return true;
}

void AuctionRpcGetMySaleListReply::Swap(AuctionRpcGetMySaleListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    auctionitem_.Swap(&other->auctionitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRpcGetMySaleListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRpcGetMySaleListReply_descriptor_;
  metadata.reflection = AuctionRpcGetMySaleListReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
