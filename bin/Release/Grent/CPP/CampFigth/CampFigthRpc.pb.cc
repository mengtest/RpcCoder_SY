// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CampFigthRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CampFigthRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CampFigthRpcMilitaryBrokenAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcMilitaryBrokenAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcMilitaryBrokenReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcMilitaryBrokenReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcCampFightContributionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcCampFightContributionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcObjKillBroadcastNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcObjKillBroadcastNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcNpcBirthNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcNpcBirthNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcGetMilitaryValueAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcGetMilitaryValueAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcGetMilitaryValueReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcGetMilitaryValueReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcKillDeadInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcKillDeadInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcWorshipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcWorshipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcWorshipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcWorshipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcWorshipRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcWorshipRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcWorshipRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcWorshipRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcNewSeasonNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcNewSeasonNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcSyncRankRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcSyncRankRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcSyncRankRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcSyncRankRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcGetRankRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcGetRankRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcGetRankRewardReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcGetRankRewardReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcEnterBattleSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcEnterBattleSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampFigthRpcEnterBattleSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampFigthRpcEnterBattleSceneReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CampFigthRpc_2eproto() {
  protobuf_AddDesc_CampFigthRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CampFigthRpc.proto");
  GOOGLE_CHECK(file != NULL);
  CampFigthRpcMilitaryBrokenAsk_descriptor_ = file->message_type(0);
  static const int CampFigthRpcMilitaryBrokenAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenAsk, roleid_),
  };
  CampFigthRpcMilitaryBrokenAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcMilitaryBrokenAsk_descriptor_,
      CampFigthRpcMilitaryBrokenAsk::default_instance_,
      CampFigthRpcMilitaryBrokenAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcMilitaryBrokenAsk));
  CampFigthRpcMilitaryBrokenReply_descriptor_ = file->message_type(1);
  static const int CampFigthRpcMilitaryBrokenReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, exp_),
  };
  CampFigthRpcMilitaryBrokenReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcMilitaryBrokenReply_descriptor_,
      CampFigthRpcMilitaryBrokenReply::default_instance_,
      CampFigthRpcMilitaryBrokenReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcMilitaryBrokenReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcMilitaryBrokenReply));
  CampFigthRpcCampFightContributionNotify_descriptor_ = file->message_type(2);
  static const int CampFigthRpcCampFightContributionNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcCampFightContributionNotify, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcCampFightContributionNotify, contributionvalue_),
  };
  CampFigthRpcCampFightContributionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcCampFightContributionNotify_descriptor_,
      CampFigthRpcCampFightContributionNotify::default_instance_,
      CampFigthRpcCampFightContributionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcCampFightContributionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcCampFightContributionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcCampFightContributionNotify));
  CampFigthRpcObjKillBroadcastNotify_descriptor_ = file->message_type(3);
  static const int CampFigthRpcObjKillBroadcastNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, killerobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, killername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, deadobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, deadobjresid_),
  };
  CampFigthRpcObjKillBroadcastNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcObjKillBroadcastNotify_descriptor_,
      CampFigthRpcObjKillBroadcastNotify::default_instance_,
      CampFigthRpcObjKillBroadcastNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcObjKillBroadcastNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcObjKillBroadcastNotify));
  CampFigthRpcNpcBirthNotify_descriptor_ = file->message_type(4);
  static const int CampFigthRpcNpcBirthNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNpcBirthNotify, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNpcBirthNotify, birthobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNpcBirthNotify, birthobjresid_),
  };
  CampFigthRpcNpcBirthNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcNpcBirthNotify_descriptor_,
      CampFigthRpcNpcBirthNotify::default_instance_,
      CampFigthRpcNpcBirthNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNpcBirthNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNpcBirthNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcNpcBirthNotify));
  CampFigthRpcGetMilitaryValueAsk_descriptor_ = file->message_type(5);
  static const int CampFigthRpcGetMilitaryValueAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueAsk, roleid_),
  };
  CampFigthRpcGetMilitaryValueAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcGetMilitaryValueAsk_descriptor_,
      CampFigthRpcGetMilitaryValueAsk::default_instance_,
      CampFigthRpcGetMilitaryValueAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcGetMilitaryValueAsk));
  CampFigthRpcGetMilitaryValueReply_descriptor_ = file->message_type(6);
  static const int CampFigthRpcGetMilitaryValueReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, curseason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, todayhornor_),
  };
  CampFigthRpcGetMilitaryValueReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcGetMilitaryValueReply_descriptor_,
      CampFigthRpcGetMilitaryValueReply::default_instance_,
      CampFigthRpcGetMilitaryValueReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetMilitaryValueReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcGetMilitaryValueReply));
  CampFigthRpcKillDeadInfoNotify_descriptor_ = file->message_type(7);
  static const int CampFigthRpcKillDeadInfoNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, deadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, star_),
  };
  CampFigthRpcKillDeadInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcKillDeadInfoNotify_descriptor_,
      CampFigthRpcKillDeadInfoNotify::default_instance_,
      CampFigthRpcKillDeadInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcKillDeadInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcKillDeadInfoNotify));
  CampFigthRpcWorshipAsk_descriptor_ = file->message_type(8);
  static const int CampFigthRpcWorshipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipAsk, worshiproleid_),
  };
  CampFigthRpcWorshipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcWorshipAsk_descriptor_,
      CampFigthRpcWorshipAsk::default_instance_,
      CampFigthRpcWorshipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcWorshipAsk));
  CampFigthRpcWorshipReply_descriptor_ = file->message_type(9);
  static const int CampFigthRpcWorshipReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipReply, worshiproleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipReply, worshipcount_),
  };
  CampFigthRpcWorshipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcWorshipReply_descriptor_,
      CampFigthRpcWorshipReply::default_instance_,
      CampFigthRpcWorshipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcWorshipReply));
  CampFigthRpcWorshipRankAsk_descriptor_ = file->message_type(10);
  static const int CampFigthRpcWorshipRankAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankAsk, roleid_),
  };
  CampFigthRpcWorshipRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcWorshipRankAsk_descriptor_,
      CampFigthRpcWorshipRankAsk::default_instance_,
      CampFigthRpcWorshipRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcWorshipRankAsk));
  CampFigthRpcWorshipRankReply_descriptor_ = file->message_type(11);
  static const int CampFigthRpcWorshipRankReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankReply, roledatas_),
  };
  CampFigthRpcWorshipRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcWorshipRankReply_descriptor_,
      CampFigthRpcWorshipRankReply::default_instance_,
      CampFigthRpcWorshipRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcWorshipRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcWorshipRankReply));
  CampFigthRpcNewSeasonNotify_descriptor_ = file->message_type(12);
  static const int CampFigthRpcNewSeasonNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, rankindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, rewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, lastseason_),
  };
  CampFigthRpcNewSeasonNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcNewSeasonNotify_descriptor_,
      CampFigthRpcNewSeasonNotify::default_instance_,
      CampFigthRpcNewSeasonNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcNewSeasonNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcNewSeasonNotify));
  CampFigthRpcSyncRankRewardAsk_descriptor_ = file->message_type(13);
  static const int CampFigthRpcSyncRankRewardAsk_offsets_[1] = {
  };
  CampFigthRpcSyncRankRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcSyncRankRewardAsk_descriptor_,
      CampFigthRpcSyncRankRewardAsk::default_instance_,
      CampFigthRpcSyncRankRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcSyncRankRewardAsk));
  CampFigthRpcSyncRankRewardReply_descriptor_ = file->message_type(14);
  static const int CampFigthRpcSyncRankRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardReply, rankrewardlist_),
  };
  CampFigthRpcSyncRankRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcSyncRankRewardReply_descriptor_,
      CampFigthRpcSyncRankRewardReply::default_instance_,
      CampFigthRpcSyncRankRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcSyncRankRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcSyncRankRewardReply));
  CampFigthRpcGetRankRewardAsk_descriptor_ = file->message_type(15);
  static const int CampFigthRpcGetRankRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardAsk, rank_),
  };
  CampFigthRpcGetRankRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcGetRankRewardAsk_descriptor_,
      CampFigthRpcGetRankRewardAsk::default_instance_,
      CampFigthRpcGetRankRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcGetRankRewardAsk));
  CampFigthRpcGetRankRewardReply_descriptor_ = file->message_type(16);
  static const int CampFigthRpcGetRankRewardReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardReply, rank_),
  };
  CampFigthRpcGetRankRewardReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcGetRankRewardReply_descriptor_,
      CampFigthRpcGetRankRewardReply::default_instance_,
      CampFigthRpcGetRankRewardReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcGetRankRewardReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcGetRankRewardReply));
  CampFigthRpcEnterBattleSceneAsk_descriptor_ = file->message_type(17);
  static const int CampFigthRpcEnterBattleSceneAsk_offsets_[1] = {
  };
  CampFigthRpcEnterBattleSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcEnterBattleSceneAsk_descriptor_,
      CampFigthRpcEnterBattleSceneAsk::default_instance_,
      CampFigthRpcEnterBattleSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcEnterBattleSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcEnterBattleSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcEnterBattleSceneAsk));
  CampFigthRpcEnterBattleSceneReply_descriptor_ = file->message_type(18);
  static const int CampFigthRpcEnterBattleSceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcEnterBattleSceneReply, result_),
  };
  CampFigthRpcEnterBattleSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampFigthRpcEnterBattleSceneReply_descriptor_,
      CampFigthRpcEnterBattleSceneReply::default_instance_,
      CampFigthRpcEnterBattleSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcEnterBattleSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampFigthRpcEnterBattleSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampFigthRpcEnterBattleSceneReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CampFigthRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcMilitaryBrokenAsk_descriptor_, &CampFigthRpcMilitaryBrokenAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcMilitaryBrokenReply_descriptor_, &CampFigthRpcMilitaryBrokenReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcCampFightContributionNotify_descriptor_, &CampFigthRpcCampFightContributionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcObjKillBroadcastNotify_descriptor_, &CampFigthRpcObjKillBroadcastNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcNpcBirthNotify_descriptor_, &CampFigthRpcNpcBirthNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcGetMilitaryValueAsk_descriptor_, &CampFigthRpcGetMilitaryValueAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcGetMilitaryValueReply_descriptor_, &CampFigthRpcGetMilitaryValueReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcKillDeadInfoNotify_descriptor_, &CampFigthRpcKillDeadInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcWorshipAsk_descriptor_, &CampFigthRpcWorshipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcWorshipReply_descriptor_, &CampFigthRpcWorshipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcWorshipRankAsk_descriptor_, &CampFigthRpcWorshipRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcWorshipRankReply_descriptor_, &CampFigthRpcWorshipRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcNewSeasonNotify_descriptor_, &CampFigthRpcNewSeasonNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcSyncRankRewardAsk_descriptor_, &CampFigthRpcSyncRankRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcSyncRankRewardReply_descriptor_, &CampFigthRpcSyncRankRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcGetRankRewardAsk_descriptor_, &CampFigthRpcGetRankRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcGetRankRewardReply_descriptor_, &CampFigthRpcGetRankRewardReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcEnterBattleSceneAsk_descriptor_, &CampFigthRpcEnterBattleSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampFigthRpcEnterBattleSceneReply_descriptor_, &CampFigthRpcEnterBattleSceneReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CampFigthRpc_2eproto() {
  delete CampFigthRpcMilitaryBrokenAsk::default_instance_;
  delete CampFigthRpcMilitaryBrokenAsk_reflection_;
  delete CampFigthRpcMilitaryBrokenReply::default_instance_;
  delete CampFigthRpcMilitaryBrokenReply_reflection_;
  delete CampFigthRpcCampFightContributionNotify::default_instance_;
  delete CampFigthRpcCampFightContributionNotify_reflection_;
  delete CampFigthRpcObjKillBroadcastNotify::default_instance_;
  delete CampFigthRpcObjKillBroadcastNotify_reflection_;
  delete CampFigthRpcNpcBirthNotify::default_instance_;
  delete CampFigthRpcNpcBirthNotify_reflection_;
  delete CampFigthRpcGetMilitaryValueAsk::default_instance_;
  delete CampFigthRpcGetMilitaryValueAsk_reflection_;
  delete CampFigthRpcGetMilitaryValueReply::default_instance_;
  delete CampFigthRpcGetMilitaryValueReply_reflection_;
  delete CampFigthRpcKillDeadInfoNotify::default_instance_;
  delete CampFigthRpcKillDeadInfoNotify_reflection_;
  delete CampFigthRpcWorshipAsk::default_instance_;
  delete CampFigthRpcWorshipAsk_reflection_;
  delete CampFigthRpcWorshipReply::default_instance_;
  delete CampFigthRpcWorshipReply_reflection_;
  delete CampFigthRpcWorshipRankAsk::default_instance_;
  delete CampFigthRpcWorshipRankAsk_reflection_;
  delete CampFigthRpcWorshipRankReply::default_instance_;
  delete CampFigthRpcWorshipRankReply_reflection_;
  delete CampFigthRpcNewSeasonNotify::default_instance_;
  delete CampFigthRpcNewSeasonNotify_reflection_;
  delete CampFigthRpcSyncRankRewardAsk::default_instance_;
  delete CampFigthRpcSyncRankRewardAsk_reflection_;
  delete CampFigthRpcSyncRankRewardReply::default_instance_;
  delete CampFigthRpcSyncRankRewardReply_reflection_;
  delete CampFigthRpcGetRankRewardAsk::default_instance_;
  delete CampFigthRpcGetRankRewardAsk_reflection_;
  delete CampFigthRpcGetRankRewardReply::default_instance_;
  delete CampFigthRpcGetRankRewardReply_reflection_;
  delete CampFigthRpcEnterBattleSceneAsk::default_instance_;
  delete CampFigthRpcEnterBattleSceneAsk_reflection_;
  delete CampFigthRpcEnterBattleSceneReply::default_instance_;
  delete CampFigthRpcEnterBattleSceneReply_reflection_;
}

void protobuf_AddDesc_CampFigthRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CampFigthRpc.proto\032\022PublicStruct.proto"
    "\"3\n\035CampFigthRpcMilitaryBrokenAsk\022\022\n\006Rol"
    "eID\030\001 \001(\005:\002-1\"j\n\037CampFigthRpcMilitaryBro"
    "kenReply\022\022\n\006Result\030\001 \001(\005:\002-1\022\020\n\004Rank\030\002 \001"
    "(\005:\002-1\022\020\n\004Star\030\003 \001(\005:\002-1\022\017\n\003Exp\030\004 \001(\005:\002-"
    "1\"Z\n\'CampFigthRpcCampFightContributionNo"
    "tify\022\020\n\004Camp\030\001 \001(\005:\002-1\022\035\n\021ContributionVa"
    "lue\030\002 \001(\005:\002-1\"\206\001\n\"CampFigthRpcObjKillBro"
    "adcastNotify\022\027\n\013KillerObjID\030\001 \001(\005:\002-1\022\026\n"
    "\nKillerName\030\002 \001(\005:\002-1\022\025\n\tDeadObjID\030\003 \001(\005"
    ":\002-1\022\030\n\014DeadObjResID\030\004 \001(\005:\002-1\"a\n\032CampFi"
    "gthRpcNpcBirthNotify\022\020\n\004Camp\030\001 \001(\005:\002-1\022\026"
    "\n\nBirthObjID\030\002 \001(\005:\002-1\022\031\n\rBirthObjResID\030"
    "\003 \001(\005:\002-1\"5\n\037CampFigthRpcGetMilitaryValu"
    "eAsk\022\022\n\006RoleID\030\001 \001(\005:\002-1\"\234\001\n!CampFigthRp"
    "cGetMilitaryValueReply\022\022\n\006Result\030\001 \001(\005:\002"
    "-1\022\020\n\004Rank\030\002 \001(\005:\002-1\022\020\n\004Star\030\003 \001(\005:\002-1\022\017"
    "\n\003Exp\030\004 \001(\005:\002-1\022\025\n\tCurseason\030\005 \001(\005:\002-1\022\027"
    "\n\013TodayHornor\030\006 \001(\005:\002-1\"\177\n\036CampFigthRpcK"
    "illDeadInfoNotify\022\023\n\007KillNum\030\001 \001(\005:\002-1\022\023"
    "\n\007DeadNum\030\002 \001(\005:\002-1\022\020\n\004Rank\030\004 \001(\005:\002-1\022\017\n"
    "\003Exp\030\005 \001(\005:\002-1\022\020\n\004Star\030\006 \001(\005:\002-1\"3\n\026Camp"
    "FigthRpcWorshipAsk\022\031\n\rWorshipRoleID\030\001 \001("
    "\005:\002-1\"c\n\030CampFigthRpcWorshipReply\022\022\n\006Res"
    "ult\030\001 \001(\005:\002-1\022\031\n\rWorshipRoleID\030\002 \001(\005:\002-1"
    "\022\030\n\014WorshipCount\030\003 \001(\005:\002-1\"0\n\032CampFigthR"
    "pcWorshipRankAsk\022\022\n\006RoleID\030\001 \001(\005:\002-1\"Y\n\034"
    "CampFigthRpcWorshipRankReply\022\022\n\006Result\030\001"
    " \001(\005:\002-1\022%\n\tRoleDatas\030\002 \003(\0132\022.WorshipPla"
    "yerData\"\232\001\n\033CampFigthRpcNewSeasonNotify\022"
    "\020\n\004Rank\030\001 \001(\005:\002-1\022\020\n\004Star\030\002 \001(\005:\002-1\022\025\n\tR"
    "ankIndex\030\003 \001(\005:\002-1\022(\n\nRewardList\030\004 \003(\0132\024"
    ".PvpBattleRewardInfo\022\026\n\nLastseason\030\005 \001(\005"
    ":\002-1\"\037\n\035CampFigthRpcSyncRankRewardAsk\"M\n"
    "\037CampFigthRpcSyncRankRewardReply\022\022\n\006Resu"
    "lt\030\001 \001(\005:\002-1\022\026\n\016RankRewardList\030\002 \003(\005\"0\n\034"
    "CampFigthRpcGetRankRewardAsk\022\020\n\004Rank\030\001 \001"
    "(\005:\002-1\"F\n\036CampFigthRpcGetRankRewardReply"
    "\022\022\n\006Result\030\001 \001(\005:\002-1\022\020\n\004Rank\030\003 \001(\005:\002-1\"!"
    "\n\037CampFigthRpcEnterBattleSceneAsk\"7\n!Cam"
    "pFigthRpcEnterBattleSceneReply\022\022\n\006Result"
    "\030\001 \001(\005:\002-1", 1650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CampFigthRpc.proto", &protobuf_RegisterTypes);
  CampFigthRpcMilitaryBrokenAsk::default_instance_ = new CampFigthRpcMilitaryBrokenAsk();
  CampFigthRpcMilitaryBrokenReply::default_instance_ = new CampFigthRpcMilitaryBrokenReply();
  CampFigthRpcCampFightContributionNotify::default_instance_ = new CampFigthRpcCampFightContributionNotify();
  CampFigthRpcObjKillBroadcastNotify::default_instance_ = new CampFigthRpcObjKillBroadcastNotify();
  CampFigthRpcNpcBirthNotify::default_instance_ = new CampFigthRpcNpcBirthNotify();
  CampFigthRpcGetMilitaryValueAsk::default_instance_ = new CampFigthRpcGetMilitaryValueAsk();
  CampFigthRpcGetMilitaryValueReply::default_instance_ = new CampFigthRpcGetMilitaryValueReply();
  CampFigthRpcKillDeadInfoNotify::default_instance_ = new CampFigthRpcKillDeadInfoNotify();
  CampFigthRpcWorshipAsk::default_instance_ = new CampFigthRpcWorshipAsk();
  CampFigthRpcWorshipReply::default_instance_ = new CampFigthRpcWorshipReply();
  CampFigthRpcWorshipRankAsk::default_instance_ = new CampFigthRpcWorshipRankAsk();
  CampFigthRpcWorshipRankReply::default_instance_ = new CampFigthRpcWorshipRankReply();
  CampFigthRpcNewSeasonNotify::default_instance_ = new CampFigthRpcNewSeasonNotify();
  CampFigthRpcSyncRankRewardAsk::default_instance_ = new CampFigthRpcSyncRankRewardAsk();
  CampFigthRpcSyncRankRewardReply::default_instance_ = new CampFigthRpcSyncRankRewardReply();
  CampFigthRpcGetRankRewardAsk::default_instance_ = new CampFigthRpcGetRankRewardAsk();
  CampFigthRpcGetRankRewardReply::default_instance_ = new CampFigthRpcGetRankRewardReply();
  CampFigthRpcEnterBattleSceneAsk::default_instance_ = new CampFigthRpcEnterBattleSceneAsk();
  CampFigthRpcEnterBattleSceneReply::default_instance_ = new CampFigthRpcEnterBattleSceneReply();
  CampFigthRpcMilitaryBrokenAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcMilitaryBrokenReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcCampFightContributionNotify::default_instance_->InitAsDefaultInstance();
  CampFigthRpcObjKillBroadcastNotify::default_instance_->InitAsDefaultInstance();
  CampFigthRpcNpcBirthNotify::default_instance_->InitAsDefaultInstance();
  CampFigthRpcGetMilitaryValueAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcGetMilitaryValueReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcKillDeadInfoNotify::default_instance_->InitAsDefaultInstance();
  CampFigthRpcWorshipAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcWorshipReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcWorshipRankAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcWorshipRankReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcNewSeasonNotify::default_instance_->InitAsDefaultInstance();
  CampFigthRpcSyncRankRewardAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcSyncRankRewardReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcGetRankRewardAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcGetRankRewardReply::default_instance_->InitAsDefaultInstance();
  CampFigthRpcEnterBattleSceneAsk::default_instance_->InitAsDefaultInstance();
  CampFigthRpcEnterBattleSceneReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CampFigthRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CampFigthRpc_2eproto {
  StaticDescriptorInitializer_CampFigthRpc_2eproto() {
    protobuf_AddDesc_CampFigthRpc_2eproto();
  }
} static_descriptor_initializer_CampFigthRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcMilitaryBrokenAsk::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcMilitaryBrokenAsk::CampFigthRpcMilitaryBrokenAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcMilitaryBrokenAsk::InitAsDefaultInstance() {
}

CampFigthRpcMilitaryBrokenAsk::CampFigthRpcMilitaryBrokenAsk(const CampFigthRpcMilitaryBrokenAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcMilitaryBrokenAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcMilitaryBrokenAsk::~CampFigthRpcMilitaryBrokenAsk() {
  SharedDtor();
}

void CampFigthRpcMilitaryBrokenAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcMilitaryBrokenAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcMilitaryBrokenAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcMilitaryBrokenAsk_descriptor_;
}

const CampFigthRpcMilitaryBrokenAsk& CampFigthRpcMilitaryBrokenAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcMilitaryBrokenAsk* CampFigthRpcMilitaryBrokenAsk::default_instance_ = NULL;

CampFigthRpcMilitaryBrokenAsk* CampFigthRpcMilitaryBrokenAsk::New() const {
  return new CampFigthRpcMilitaryBrokenAsk;
}

void CampFigthRpcMilitaryBrokenAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcMilitaryBrokenAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcMilitaryBrokenAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcMilitaryBrokenAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcMilitaryBrokenAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcMilitaryBrokenAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcMilitaryBrokenAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcMilitaryBrokenAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcMilitaryBrokenAsk::MergeFrom(const CampFigthRpcMilitaryBrokenAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcMilitaryBrokenAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcMilitaryBrokenAsk::CopyFrom(const CampFigthRpcMilitaryBrokenAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcMilitaryBrokenAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcMilitaryBrokenAsk::Swap(CampFigthRpcMilitaryBrokenAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcMilitaryBrokenAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcMilitaryBrokenAsk_descriptor_;
  metadata.reflection = CampFigthRpcMilitaryBrokenAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcMilitaryBrokenReply::kResultFieldNumber;
const int CampFigthRpcMilitaryBrokenReply::kRankFieldNumber;
const int CampFigthRpcMilitaryBrokenReply::kStarFieldNumber;
const int CampFigthRpcMilitaryBrokenReply::kExpFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcMilitaryBrokenReply::CampFigthRpcMilitaryBrokenReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcMilitaryBrokenReply::InitAsDefaultInstance() {
}

CampFigthRpcMilitaryBrokenReply::CampFigthRpcMilitaryBrokenReply(const CampFigthRpcMilitaryBrokenReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcMilitaryBrokenReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rank_ = -1;
  star_ = -1;
  exp_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcMilitaryBrokenReply::~CampFigthRpcMilitaryBrokenReply() {
  SharedDtor();
}

void CampFigthRpcMilitaryBrokenReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcMilitaryBrokenReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcMilitaryBrokenReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcMilitaryBrokenReply_descriptor_;
}

const CampFigthRpcMilitaryBrokenReply& CampFigthRpcMilitaryBrokenReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcMilitaryBrokenReply* CampFigthRpcMilitaryBrokenReply::default_instance_ = NULL;

CampFigthRpcMilitaryBrokenReply* CampFigthRpcMilitaryBrokenReply::New() const {
  return new CampFigthRpcMilitaryBrokenReply;
}

void CampFigthRpcMilitaryBrokenReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rank_ = -1;
    star_ = -1;
    exp_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcMilitaryBrokenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Star;
        break;
      }

      // optional int32 Star = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }

      // optional int32 Exp = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcMilitaryBrokenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 Star = 3 [default = -1];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 Exp = 4 [default = -1];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcMilitaryBrokenReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 Star = 3 [default = -1];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 Exp = 4 [default = -1];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcMilitaryBrokenReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Rank = 2 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Star = 3 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 Exp = 4 [default = -1];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcMilitaryBrokenReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcMilitaryBrokenReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcMilitaryBrokenReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcMilitaryBrokenReply::MergeFrom(const CampFigthRpcMilitaryBrokenReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcMilitaryBrokenReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcMilitaryBrokenReply::CopyFrom(const CampFigthRpcMilitaryBrokenReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcMilitaryBrokenReply::IsInitialized() const {

  return true;
}

void CampFigthRpcMilitaryBrokenReply::Swap(CampFigthRpcMilitaryBrokenReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_, other->rank_);
    std::swap(star_, other->star_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcMilitaryBrokenReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcMilitaryBrokenReply_descriptor_;
  metadata.reflection = CampFigthRpcMilitaryBrokenReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcCampFightContributionNotify::kCampFieldNumber;
const int CampFigthRpcCampFightContributionNotify::kContributionValueFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcCampFightContributionNotify::CampFigthRpcCampFightContributionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcCampFightContributionNotify::InitAsDefaultInstance() {
}

CampFigthRpcCampFightContributionNotify::CampFigthRpcCampFightContributionNotify(const CampFigthRpcCampFightContributionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcCampFightContributionNotify::SharedCtor() {
  _cached_size_ = 0;
  camp_ = -1;
  contributionvalue_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcCampFightContributionNotify::~CampFigthRpcCampFightContributionNotify() {
  SharedDtor();
}

void CampFigthRpcCampFightContributionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcCampFightContributionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcCampFightContributionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcCampFightContributionNotify_descriptor_;
}

const CampFigthRpcCampFightContributionNotify& CampFigthRpcCampFightContributionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcCampFightContributionNotify* CampFigthRpcCampFightContributionNotify::default_instance_ = NULL;

CampFigthRpcCampFightContributionNotify* CampFigthRpcCampFightContributionNotify::New() const {
  return new CampFigthRpcCampFightContributionNotify;
}

void CampFigthRpcCampFightContributionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = -1;
    contributionvalue_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcCampFightContributionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Camp = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ContributionValue;
        break;
      }

      // optional int32 ContributionValue = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContributionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contributionvalue_)));
          set_has_contributionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcCampFightContributionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Camp = 1 [default = -1];
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }

  // optional int32 ContributionValue = 2 [default = -1];
  if (has_contributionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contributionvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcCampFightContributionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Camp = 1 [default = -1];
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }

  // optional int32 ContributionValue = 2 [default = -1];
  if (has_contributionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contributionvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcCampFightContributionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Camp = 1 [default = -1];
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 ContributionValue = 2 [default = -1];
    if (has_contributionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contributionvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcCampFightContributionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcCampFightContributionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcCampFightContributionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcCampFightContributionNotify::MergeFrom(const CampFigthRpcCampFightContributionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_contributionvalue()) {
      set_contributionvalue(from.contributionvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcCampFightContributionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcCampFightContributionNotify::CopyFrom(const CampFigthRpcCampFightContributionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcCampFightContributionNotify::IsInitialized() const {

  return true;
}

void CampFigthRpcCampFightContributionNotify::Swap(CampFigthRpcCampFightContributionNotify* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(contributionvalue_, other->contributionvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcCampFightContributionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcCampFightContributionNotify_descriptor_;
  metadata.reflection = CampFigthRpcCampFightContributionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcObjKillBroadcastNotify::kKillerObjIDFieldNumber;
const int CampFigthRpcObjKillBroadcastNotify::kKillerNameFieldNumber;
const int CampFigthRpcObjKillBroadcastNotify::kDeadObjIDFieldNumber;
const int CampFigthRpcObjKillBroadcastNotify::kDeadObjResIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcObjKillBroadcastNotify::CampFigthRpcObjKillBroadcastNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcObjKillBroadcastNotify::InitAsDefaultInstance() {
}

CampFigthRpcObjKillBroadcastNotify::CampFigthRpcObjKillBroadcastNotify(const CampFigthRpcObjKillBroadcastNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcObjKillBroadcastNotify::SharedCtor() {
  _cached_size_ = 0;
  killerobjid_ = -1;
  killername_ = -1;
  deadobjid_ = -1;
  deadobjresid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcObjKillBroadcastNotify::~CampFigthRpcObjKillBroadcastNotify() {
  SharedDtor();
}

void CampFigthRpcObjKillBroadcastNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcObjKillBroadcastNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcObjKillBroadcastNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcObjKillBroadcastNotify_descriptor_;
}

const CampFigthRpcObjKillBroadcastNotify& CampFigthRpcObjKillBroadcastNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcObjKillBroadcastNotify* CampFigthRpcObjKillBroadcastNotify::default_instance_ = NULL;

CampFigthRpcObjKillBroadcastNotify* CampFigthRpcObjKillBroadcastNotify::New() const {
  return new CampFigthRpcObjKillBroadcastNotify;
}

void CampFigthRpcObjKillBroadcastNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killerobjid_ = -1;
    killername_ = -1;
    deadobjid_ = -1;
    deadobjresid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcObjKillBroadcastNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 KillerObjID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killerobjid_)));
          set_has_killerobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KillerName;
        break;
      }

      // optional int32 KillerName = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillerName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killername_)));
          set_has_killername();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DeadObjID;
        break;
      }

      // optional int32 DeadObjID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadobjid_)));
          set_has_deadobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DeadObjResID;
        break;
      }

      // optional int32 DeadObjResID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadObjResID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadobjresid_)));
          set_has_deadobjresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcObjKillBroadcastNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 KillerObjID = 1 [default = -1];
  if (has_killerobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killerobjid(), output);
  }

  // optional int32 KillerName = 2 [default = -1];
  if (has_killername()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killername(), output);
  }

  // optional int32 DeadObjID = 3 [default = -1];
  if (has_deadobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deadobjid(), output);
  }

  // optional int32 DeadObjResID = 4 [default = -1];
  if (has_deadobjresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deadobjresid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcObjKillBroadcastNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 KillerObjID = 1 [default = -1];
  if (has_killerobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killerobjid(), target);
  }

  // optional int32 KillerName = 2 [default = -1];
  if (has_killername()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killername(), target);
  }

  // optional int32 DeadObjID = 3 [default = -1];
  if (has_deadobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deadobjid(), target);
  }

  // optional int32 DeadObjResID = 4 [default = -1];
  if (has_deadobjresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deadobjresid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcObjKillBroadcastNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 KillerObjID = 1 [default = -1];
    if (has_killerobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killerobjid());
    }

    // optional int32 KillerName = 2 [default = -1];
    if (has_killername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killername());
    }

    // optional int32 DeadObjID = 3 [default = -1];
    if (has_deadobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadobjid());
    }

    // optional int32 DeadObjResID = 4 [default = -1];
    if (has_deadobjresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadobjresid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcObjKillBroadcastNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcObjKillBroadcastNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcObjKillBroadcastNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcObjKillBroadcastNotify::MergeFrom(const CampFigthRpcObjKillBroadcastNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killerobjid()) {
      set_killerobjid(from.killerobjid());
    }
    if (from.has_killername()) {
      set_killername(from.killername());
    }
    if (from.has_deadobjid()) {
      set_deadobjid(from.deadobjid());
    }
    if (from.has_deadobjresid()) {
      set_deadobjresid(from.deadobjresid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcObjKillBroadcastNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcObjKillBroadcastNotify::CopyFrom(const CampFigthRpcObjKillBroadcastNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcObjKillBroadcastNotify::IsInitialized() const {

  return true;
}

void CampFigthRpcObjKillBroadcastNotify::Swap(CampFigthRpcObjKillBroadcastNotify* other) {
  if (other != this) {
    std::swap(killerobjid_, other->killerobjid_);
    std::swap(killername_, other->killername_);
    std::swap(deadobjid_, other->deadobjid_);
    std::swap(deadobjresid_, other->deadobjresid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcObjKillBroadcastNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcObjKillBroadcastNotify_descriptor_;
  metadata.reflection = CampFigthRpcObjKillBroadcastNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcNpcBirthNotify::kCampFieldNumber;
const int CampFigthRpcNpcBirthNotify::kBirthObjIDFieldNumber;
const int CampFigthRpcNpcBirthNotify::kBirthObjResIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcNpcBirthNotify::CampFigthRpcNpcBirthNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcNpcBirthNotify::InitAsDefaultInstance() {
}

CampFigthRpcNpcBirthNotify::CampFigthRpcNpcBirthNotify(const CampFigthRpcNpcBirthNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcNpcBirthNotify::SharedCtor() {
  _cached_size_ = 0;
  camp_ = -1;
  birthobjid_ = -1;
  birthobjresid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcNpcBirthNotify::~CampFigthRpcNpcBirthNotify() {
  SharedDtor();
}

void CampFigthRpcNpcBirthNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcNpcBirthNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcNpcBirthNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcNpcBirthNotify_descriptor_;
}

const CampFigthRpcNpcBirthNotify& CampFigthRpcNpcBirthNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcNpcBirthNotify* CampFigthRpcNpcBirthNotify::default_instance_ = NULL;

CampFigthRpcNpcBirthNotify* CampFigthRpcNpcBirthNotify::New() const {
  return new CampFigthRpcNpcBirthNotify;
}

void CampFigthRpcNpcBirthNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = -1;
    birthobjid_ = -1;
    birthobjresid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcNpcBirthNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Camp = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BirthObjID;
        break;
      }

      // optional int32 BirthObjID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BirthObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birthobjid_)));
          set_has_birthobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BirthObjResID;
        break;
      }

      // optional int32 BirthObjResID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BirthObjResID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birthobjresid_)));
          set_has_birthobjresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcNpcBirthNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Camp = 1 [default = -1];
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }

  // optional int32 BirthObjID = 2 [default = -1];
  if (has_birthobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->birthobjid(), output);
  }

  // optional int32 BirthObjResID = 3 [default = -1];
  if (has_birthobjresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->birthobjresid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcNpcBirthNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Camp = 1 [default = -1];
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }

  // optional int32 BirthObjID = 2 [default = -1];
  if (has_birthobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->birthobjid(), target);
  }

  // optional int32 BirthObjResID = 3 [default = -1];
  if (has_birthobjresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->birthobjresid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcNpcBirthNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Camp = 1 [default = -1];
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 BirthObjID = 2 [default = -1];
    if (has_birthobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birthobjid());
    }

    // optional int32 BirthObjResID = 3 [default = -1];
    if (has_birthobjresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birthobjresid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcNpcBirthNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcNpcBirthNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcNpcBirthNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcNpcBirthNotify::MergeFrom(const CampFigthRpcNpcBirthNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_birthobjid()) {
      set_birthobjid(from.birthobjid());
    }
    if (from.has_birthobjresid()) {
      set_birthobjresid(from.birthobjresid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcNpcBirthNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcNpcBirthNotify::CopyFrom(const CampFigthRpcNpcBirthNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcNpcBirthNotify::IsInitialized() const {

  return true;
}

void CampFigthRpcNpcBirthNotify::Swap(CampFigthRpcNpcBirthNotify* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(birthobjid_, other->birthobjid_);
    std::swap(birthobjresid_, other->birthobjresid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcNpcBirthNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcNpcBirthNotify_descriptor_;
  metadata.reflection = CampFigthRpcNpcBirthNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcGetMilitaryValueAsk::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcGetMilitaryValueAsk::CampFigthRpcGetMilitaryValueAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcGetMilitaryValueAsk::InitAsDefaultInstance() {
}

CampFigthRpcGetMilitaryValueAsk::CampFigthRpcGetMilitaryValueAsk(const CampFigthRpcGetMilitaryValueAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcGetMilitaryValueAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcGetMilitaryValueAsk::~CampFigthRpcGetMilitaryValueAsk() {
  SharedDtor();
}

void CampFigthRpcGetMilitaryValueAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcGetMilitaryValueAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcGetMilitaryValueAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcGetMilitaryValueAsk_descriptor_;
}

const CampFigthRpcGetMilitaryValueAsk& CampFigthRpcGetMilitaryValueAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcGetMilitaryValueAsk* CampFigthRpcGetMilitaryValueAsk::default_instance_ = NULL;

CampFigthRpcGetMilitaryValueAsk* CampFigthRpcGetMilitaryValueAsk::New() const {
  return new CampFigthRpcGetMilitaryValueAsk;
}

void CampFigthRpcGetMilitaryValueAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcGetMilitaryValueAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcGetMilitaryValueAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcGetMilitaryValueAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcGetMilitaryValueAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcGetMilitaryValueAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcGetMilitaryValueAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcGetMilitaryValueAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcGetMilitaryValueAsk::MergeFrom(const CampFigthRpcGetMilitaryValueAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcGetMilitaryValueAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcGetMilitaryValueAsk::CopyFrom(const CampFigthRpcGetMilitaryValueAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcGetMilitaryValueAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcGetMilitaryValueAsk::Swap(CampFigthRpcGetMilitaryValueAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcGetMilitaryValueAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcGetMilitaryValueAsk_descriptor_;
  metadata.reflection = CampFigthRpcGetMilitaryValueAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcGetMilitaryValueReply::kResultFieldNumber;
const int CampFigthRpcGetMilitaryValueReply::kRankFieldNumber;
const int CampFigthRpcGetMilitaryValueReply::kStarFieldNumber;
const int CampFigthRpcGetMilitaryValueReply::kExpFieldNumber;
const int CampFigthRpcGetMilitaryValueReply::kCurseasonFieldNumber;
const int CampFigthRpcGetMilitaryValueReply::kTodayHornorFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcGetMilitaryValueReply::CampFigthRpcGetMilitaryValueReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcGetMilitaryValueReply::InitAsDefaultInstance() {
}

CampFigthRpcGetMilitaryValueReply::CampFigthRpcGetMilitaryValueReply(const CampFigthRpcGetMilitaryValueReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcGetMilitaryValueReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rank_ = -1;
  star_ = -1;
  exp_ = -1;
  curseason_ = -1;
  todayhornor_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcGetMilitaryValueReply::~CampFigthRpcGetMilitaryValueReply() {
  SharedDtor();
}

void CampFigthRpcGetMilitaryValueReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcGetMilitaryValueReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcGetMilitaryValueReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcGetMilitaryValueReply_descriptor_;
}

const CampFigthRpcGetMilitaryValueReply& CampFigthRpcGetMilitaryValueReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcGetMilitaryValueReply* CampFigthRpcGetMilitaryValueReply::default_instance_ = NULL;

CampFigthRpcGetMilitaryValueReply* CampFigthRpcGetMilitaryValueReply::New() const {
  return new CampFigthRpcGetMilitaryValueReply;
}

void CampFigthRpcGetMilitaryValueReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rank_ = -1;
    star_ = -1;
    exp_ = -1;
    curseason_ = -1;
    todayhornor_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcGetMilitaryValueReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Star;
        break;
      }

      // optional int32 Star = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }

      // optional int32 Exp = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Curseason;
        break;
      }

      // optional int32 Curseason = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Curseason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curseason_)));
          set_has_curseason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TodayHornor;
        break;
      }

      // optional int32 TodayHornor = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayHornor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayhornor_)));
          set_has_todayhornor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcGetMilitaryValueReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 Star = 3 [default = -1];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 Exp = 4 [default = -1];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 Curseason = 5 [default = -1];
  if (has_curseason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curseason(), output);
  }

  // optional int32 TodayHornor = 6 [default = -1];
  if (has_todayhornor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->todayhornor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcGetMilitaryValueReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Rank = 2 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 Star = 3 [default = -1];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 Exp = 4 [default = -1];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 Curseason = 5 [default = -1];
  if (has_curseason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curseason(), target);
  }

  // optional int32 TodayHornor = 6 [default = -1];
  if (has_todayhornor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->todayhornor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcGetMilitaryValueReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Rank = 2 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Star = 3 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 Exp = 4 [default = -1];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 Curseason = 5 [default = -1];
    if (has_curseason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curseason());
    }

    // optional int32 TodayHornor = 6 [default = -1];
    if (has_todayhornor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayhornor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcGetMilitaryValueReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcGetMilitaryValueReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcGetMilitaryValueReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcGetMilitaryValueReply::MergeFrom(const CampFigthRpcGetMilitaryValueReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_curseason()) {
      set_curseason(from.curseason());
    }
    if (from.has_todayhornor()) {
      set_todayhornor(from.todayhornor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcGetMilitaryValueReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcGetMilitaryValueReply::CopyFrom(const CampFigthRpcGetMilitaryValueReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcGetMilitaryValueReply::IsInitialized() const {

  return true;
}

void CampFigthRpcGetMilitaryValueReply::Swap(CampFigthRpcGetMilitaryValueReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_, other->rank_);
    std::swap(star_, other->star_);
    std::swap(exp_, other->exp_);
    std::swap(curseason_, other->curseason_);
    std::swap(todayhornor_, other->todayhornor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcGetMilitaryValueReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcGetMilitaryValueReply_descriptor_;
  metadata.reflection = CampFigthRpcGetMilitaryValueReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcKillDeadInfoNotify::kKillNumFieldNumber;
const int CampFigthRpcKillDeadInfoNotify::kDeadNumFieldNumber;
const int CampFigthRpcKillDeadInfoNotify::kRankFieldNumber;
const int CampFigthRpcKillDeadInfoNotify::kExpFieldNumber;
const int CampFigthRpcKillDeadInfoNotify::kStarFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcKillDeadInfoNotify::CampFigthRpcKillDeadInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcKillDeadInfoNotify::InitAsDefaultInstance() {
}

CampFigthRpcKillDeadInfoNotify::CampFigthRpcKillDeadInfoNotify(const CampFigthRpcKillDeadInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcKillDeadInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  killnum_ = -1;
  deadnum_ = -1;
  rank_ = -1;
  exp_ = -1;
  star_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcKillDeadInfoNotify::~CampFigthRpcKillDeadInfoNotify() {
  SharedDtor();
}

void CampFigthRpcKillDeadInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcKillDeadInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcKillDeadInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcKillDeadInfoNotify_descriptor_;
}

const CampFigthRpcKillDeadInfoNotify& CampFigthRpcKillDeadInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcKillDeadInfoNotify* CampFigthRpcKillDeadInfoNotify::default_instance_ = NULL;

CampFigthRpcKillDeadInfoNotify* CampFigthRpcKillDeadInfoNotify::New() const {
  return new CampFigthRpcKillDeadInfoNotify;
}

void CampFigthRpcKillDeadInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killnum_ = -1;
    deadnum_ = -1;
    rank_ = -1;
    exp_ = -1;
    star_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcKillDeadInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 KillNum = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeadNum;
        break;
      }

      // optional int32 DeadNum = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadnum_)));
          set_has_deadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // optional int32 Exp = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Star;
        break;
      }

      // optional int32 Star = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcKillDeadInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 KillNum = 1 [default = -1];
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killnum(), output);
  }

  // optional int32 DeadNum = 2 [default = -1];
  if (has_deadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deadnum(), output);
  }

  // optional int32 Rank = 4 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 Exp = 5 [default = -1];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 Star = 6 [default = -1];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcKillDeadInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 KillNum = 1 [default = -1];
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killnum(), target);
  }

  // optional int32 DeadNum = 2 [default = -1];
  if (has_deadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deadnum(), target);
  }

  // optional int32 Rank = 4 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 Exp = 5 [default = -1];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int32 Star = 6 [default = -1];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcKillDeadInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 KillNum = 1 [default = -1];
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 DeadNum = 2 [default = -1];
    if (has_deadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadnum());
    }

    // optional int32 Rank = 4 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Exp = 5 [default = -1];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 Star = 6 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcKillDeadInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcKillDeadInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcKillDeadInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcKillDeadInfoNotify::MergeFrom(const CampFigthRpcKillDeadInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_deadnum()) {
      set_deadnum(from.deadnum());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcKillDeadInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcKillDeadInfoNotify::CopyFrom(const CampFigthRpcKillDeadInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcKillDeadInfoNotify::IsInitialized() const {

  return true;
}

void CampFigthRpcKillDeadInfoNotify::Swap(CampFigthRpcKillDeadInfoNotify* other) {
  if (other != this) {
    std::swap(killnum_, other->killnum_);
    std::swap(deadnum_, other->deadnum_);
    std::swap(rank_, other->rank_);
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcKillDeadInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcKillDeadInfoNotify_descriptor_;
  metadata.reflection = CampFigthRpcKillDeadInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcWorshipAsk::kWorshipRoleIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcWorshipAsk::CampFigthRpcWorshipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcWorshipAsk::InitAsDefaultInstance() {
}

CampFigthRpcWorshipAsk::CampFigthRpcWorshipAsk(const CampFigthRpcWorshipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcWorshipAsk::SharedCtor() {
  _cached_size_ = 0;
  worshiproleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcWorshipAsk::~CampFigthRpcWorshipAsk() {
  SharedDtor();
}

void CampFigthRpcWorshipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcWorshipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcWorshipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcWorshipAsk_descriptor_;
}

const CampFigthRpcWorshipAsk& CampFigthRpcWorshipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcWorshipAsk* CampFigthRpcWorshipAsk::default_instance_ = NULL;

CampFigthRpcWorshipAsk* CampFigthRpcWorshipAsk::New() const {
  return new CampFigthRpcWorshipAsk;
}

void CampFigthRpcWorshipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worshiproleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcWorshipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 WorshipRoleID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worshiproleid_)));
          set_has_worshiproleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcWorshipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 WorshipRoleID = 1 [default = -1];
  if (has_worshiproleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->worshiproleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcWorshipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 WorshipRoleID = 1 [default = -1];
  if (has_worshiproleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->worshiproleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcWorshipAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 WorshipRoleID = 1 [default = -1];
    if (has_worshiproleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worshiproleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcWorshipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcWorshipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcWorshipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcWorshipAsk::MergeFrom(const CampFigthRpcWorshipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worshiproleid()) {
      set_worshiproleid(from.worshiproleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcWorshipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcWorshipAsk::CopyFrom(const CampFigthRpcWorshipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcWorshipAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcWorshipAsk::Swap(CampFigthRpcWorshipAsk* other) {
  if (other != this) {
    std::swap(worshiproleid_, other->worshiproleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcWorshipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcWorshipAsk_descriptor_;
  metadata.reflection = CampFigthRpcWorshipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcWorshipReply::kResultFieldNumber;
const int CampFigthRpcWorshipReply::kWorshipRoleIDFieldNumber;
const int CampFigthRpcWorshipReply::kWorshipCountFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcWorshipReply::CampFigthRpcWorshipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcWorshipReply::InitAsDefaultInstance() {
}

CampFigthRpcWorshipReply::CampFigthRpcWorshipReply(const CampFigthRpcWorshipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcWorshipReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  worshiproleid_ = -1;
  worshipcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcWorshipReply::~CampFigthRpcWorshipReply() {
  SharedDtor();
}

void CampFigthRpcWorshipReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcWorshipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcWorshipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcWorshipReply_descriptor_;
}

const CampFigthRpcWorshipReply& CampFigthRpcWorshipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcWorshipReply* CampFigthRpcWorshipReply::default_instance_ = NULL;

CampFigthRpcWorshipReply* CampFigthRpcWorshipReply::New() const {
  return new CampFigthRpcWorshipReply;
}

void CampFigthRpcWorshipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    worshiproleid_ = -1;
    worshipcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcWorshipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WorshipRoleID;
        break;
      }

      // optional int32 WorshipRoleID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorshipRoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worshiproleid_)));
          set_has_worshiproleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WorshipCount;
        break;
      }

      // optional int32 WorshipCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorshipCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worshipcount_)));
          set_has_worshipcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcWorshipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 WorshipRoleID = 2 [default = -1];
  if (has_worshiproleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worshiproleid(), output);
  }

  // optional int32 WorshipCount = 3 [default = -1];
  if (has_worshipcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->worshipcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcWorshipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 WorshipRoleID = 2 [default = -1];
  if (has_worshiproleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worshiproleid(), target);
  }

  // optional int32 WorshipCount = 3 [default = -1];
  if (has_worshipcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->worshipcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcWorshipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 WorshipRoleID = 2 [default = -1];
    if (has_worshiproleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worshiproleid());
    }

    // optional int32 WorshipCount = 3 [default = -1];
    if (has_worshipcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worshipcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcWorshipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcWorshipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcWorshipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcWorshipReply::MergeFrom(const CampFigthRpcWorshipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_worshiproleid()) {
      set_worshiproleid(from.worshiproleid());
    }
    if (from.has_worshipcount()) {
      set_worshipcount(from.worshipcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcWorshipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcWorshipReply::CopyFrom(const CampFigthRpcWorshipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcWorshipReply::IsInitialized() const {

  return true;
}

void CampFigthRpcWorshipReply::Swap(CampFigthRpcWorshipReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(worshiproleid_, other->worshiproleid_);
    std::swap(worshipcount_, other->worshipcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcWorshipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcWorshipReply_descriptor_;
  metadata.reflection = CampFigthRpcWorshipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcWorshipRankAsk::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcWorshipRankAsk::CampFigthRpcWorshipRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcWorshipRankAsk::InitAsDefaultInstance() {
}

CampFigthRpcWorshipRankAsk::CampFigthRpcWorshipRankAsk(const CampFigthRpcWorshipRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcWorshipRankAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcWorshipRankAsk::~CampFigthRpcWorshipRankAsk() {
  SharedDtor();
}

void CampFigthRpcWorshipRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcWorshipRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcWorshipRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcWorshipRankAsk_descriptor_;
}

const CampFigthRpcWorshipRankAsk& CampFigthRpcWorshipRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcWorshipRankAsk* CampFigthRpcWorshipRankAsk::default_instance_ = NULL;

CampFigthRpcWorshipRankAsk* CampFigthRpcWorshipRankAsk::New() const {
  return new CampFigthRpcWorshipRankAsk;
}

void CampFigthRpcWorshipRankAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcWorshipRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcWorshipRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcWorshipRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcWorshipRankAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcWorshipRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcWorshipRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcWorshipRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcWorshipRankAsk::MergeFrom(const CampFigthRpcWorshipRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcWorshipRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcWorshipRankAsk::CopyFrom(const CampFigthRpcWorshipRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcWorshipRankAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcWorshipRankAsk::Swap(CampFigthRpcWorshipRankAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcWorshipRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcWorshipRankAsk_descriptor_;
  metadata.reflection = CampFigthRpcWorshipRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcWorshipRankReply::kResultFieldNumber;
const int CampFigthRpcWorshipRankReply::kRoleDatasFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcWorshipRankReply::CampFigthRpcWorshipRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcWorshipRankReply::InitAsDefaultInstance() {
}

CampFigthRpcWorshipRankReply::CampFigthRpcWorshipRankReply(const CampFigthRpcWorshipRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcWorshipRankReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcWorshipRankReply::~CampFigthRpcWorshipRankReply() {
  SharedDtor();
}

void CampFigthRpcWorshipRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcWorshipRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcWorshipRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcWorshipRankReply_descriptor_;
}

const CampFigthRpcWorshipRankReply& CampFigthRpcWorshipRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcWorshipRankReply* CampFigthRpcWorshipRankReply::default_instance_ = NULL;

CampFigthRpcWorshipRankReply* CampFigthRpcWorshipRankReply::New() const {
  return new CampFigthRpcWorshipRankReply;
}

void CampFigthRpcWorshipRankReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  roledatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcWorshipRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleDatas;
        break;
      }

      // repeated .WorshipPlayerData RoleDatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roledatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcWorshipRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .WorshipPlayerData RoleDatas = 2;
  for (int i = 0; i < this->roledatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roledatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcWorshipRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .WorshipPlayerData RoleDatas = 2;
  for (int i = 0; i < this->roledatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roledatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcWorshipRankReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .WorshipPlayerData RoleDatas = 2;
  total_size += 1 * this->roledatas_size();
  for (int i = 0; i < this->roledatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roledatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcWorshipRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcWorshipRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcWorshipRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcWorshipRankReply::MergeFrom(const CampFigthRpcWorshipRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  roledatas_.MergeFrom(from.roledatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcWorshipRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcWorshipRankReply::CopyFrom(const CampFigthRpcWorshipRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcWorshipRankReply::IsInitialized() const {

  return true;
}

void CampFigthRpcWorshipRankReply::Swap(CampFigthRpcWorshipRankReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    roledatas_.Swap(&other->roledatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcWorshipRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcWorshipRankReply_descriptor_;
  metadata.reflection = CampFigthRpcWorshipRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcNewSeasonNotify::kRankFieldNumber;
const int CampFigthRpcNewSeasonNotify::kStarFieldNumber;
const int CampFigthRpcNewSeasonNotify::kRankIndexFieldNumber;
const int CampFigthRpcNewSeasonNotify::kRewardListFieldNumber;
const int CampFigthRpcNewSeasonNotify::kLastseasonFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcNewSeasonNotify::CampFigthRpcNewSeasonNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcNewSeasonNotify::InitAsDefaultInstance() {
}

CampFigthRpcNewSeasonNotify::CampFigthRpcNewSeasonNotify(const CampFigthRpcNewSeasonNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcNewSeasonNotify::SharedCtor() {
  _cached_size_ = 0;
  rank_ = -1;
  star_ = -1;
  rankindex_ = -1;
  lastseason_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcNewSeasonNotify::~CampFigthRpcNewSeasonNotify() {
  SharedDtor();
}

void CampFigthRpcNewSeasonNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcNewSeasonNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcNewSeasonNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcNewSeasonNotify_descriptor_;
}

const CampFigthRpcNewSeasonNotify& CampFigthRpcNewSeasonNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcNewSeasonNotify* CampFigthRpcNewSeasonNotify::default_instance_ = NULL;

CampFigthRpcNewSeasonNotify* CampFigthRpcNewSeasonNotify::New() const {
  return new CampFigthRpcNewSeasonNotify;
}

void CampFigthRpcNewSeasonNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = -1;
    star_ = -1;
    rankindex_ = -1;
    lastseason_ = -1;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcNewSeasonNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Rank = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Star;
        break;
      }

      // optional int32 Star = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RankIndex;
        break;
      }

      // optional int32 RankIndex = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankindex_)));
          set_has_rankindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardList;
        break;
      }

      // repeated .PvpBattleRewardInfo RewardList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardList;
        if (input->ExpectTag(40)) goto parse_Lastseason;
        break;
      }

      // optional int32 Lastseason = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lastseason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastseason_)));
          set_has_lastseason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcNewSeasonNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 Star = 2 [default = -1];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 RankIndex = 3 [default = -1];
  if (has_rankindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankindex(), output);
  }

  // repeated .PvpBattleRewardInfo RewardList = 4;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardlist(i), output);
  }

  // optional int32 Lastseason = 5 [default = -1];
  if (has_lastseason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastseason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcNewSeasonNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 Star = 2 [default = -1];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 RankIndex = 3 [default = -1];
  if (has_rankindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankindex(), target);
  }

  // repeated .PvpBattleRewardInfo RewardList = 4;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardlist(i), target);
  }

  // optional int32 Lastseason = 5 [default = -1];
  if (has_lastseason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastseason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcNewSeasonNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Rank = 1 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Star = 2 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 RankIndex = 3 [default = -1];
    if (has_rankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankindex());
    }

    // optional int32 Lastseason = 5 [default = -1];
    if (has_lastseason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastseason());
    }

  }
  // repeated .PvpBattleRewardInfo RewardList = 4;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcNewSeasonNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcNewSeasonNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcNewSeasonNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcNewSeasonNotify::MergeFrom(const CampFigthRpcNewSeasonNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_rankindex()) {
      set_rankindex(from.rankindex());
    }
    if (from.has_lastseason()) {
      set_lastseason(from.lastseason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcNewSeasonNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcNewSeasonNotify::CopyFrom(const CampFigthRpcNewSeasonNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcNewSeasonNotify::IsInitialized() const {

  return true;
}

void CampFigthRpcNewSeasonNotify::Swap(CampFigthRpcNewSeasonNotify* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(star_, other->star_);
    std::swap(rankindex_, other->rankindex_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(lastseason_, other->lastseason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcNewSeasonNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcNewSeasonNotify_descriptor_;
  metadata.reflection = CampFigthRpcNewSeasonNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CampFigthRpcSyncRankRewardAsk::CampFigthRpcSyncRankRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcSyncRankRewardAsk::InitAsDefaultInstance() {
}

CampFigthRpcSyncRankRewardAsk::CampFigthRpcSyncRankRewardAsk(const CampFigthRpcSyncRankRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcSyncRankRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcSyncRankRewardAsk::~CampFigthRpcSyncRankRewardAsk() {
  SharedDtor();
}

void CampFigthRpcSyncRankRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcSyncRankRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcSyncRankRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcSyncRankRewardAsk_descriptor_;
}

const CampFigthRpcSyncRankRewardAsk& CampFigthRpcSyncRankRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcSyncRankRewardAsk* CampFigthRpcSyncRankRewardAsk::default_instance_ = NULL;

CampFigthRpcSyncRankRewardAsk* CampFigthRpcSyncRankRewardAsk::New() const {
  return new CampFigthRpcSyncRankRewardAsk;
}

void CampFigthRpcSyncRankRewardAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcSyncRankRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CampFigthRpcSyncRankRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcSyncRankRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcSyncRankRewardAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcSyncRankRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcSyncRankRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcSyncRankRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcSyncRankRewardAsk::MergeFrom(const CampFigthRpcSyncRankRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcSyncRankRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcSyncRankRewardAsk::CopyFrom(const CampFigthRpcSyncRankRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcSyncRankRewardAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcSyncRankRewardAsk::Swap(CampFigthRpcSyncRankRewardAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcSyncRankRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcSyncRankRewardAsk_descriptor_;
  metadata.reflection = CampFigthRpcSyncRankRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcSyncRankRewardReply::kResultFieldNumber;
const int CampFigthRpcSyncRankRewardReply::kRankRewardListFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcSyncRankRewardReply::CampFigthRpcSyncRankRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcSyncRankRewardReply::InitAsDefaultInstance() {
}

CampFigthRpcSyncRankRewardReply::CampFigthRpcSyncRankRewardReply(const CampFigthRpcSyncRankRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcSyncRankRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcSyncRankRewardReply::~CampFigthRpcSyncRankRewardReply() {
  SharedDtor();
}

void CampFigthRpcSyncRankRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcSyncRankRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcSyncRankRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcSyncRankRewardReply_descriptor_;
}

const CampFigthRpcSyncRankRewardReply& CampFigthRpcSyncRankRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcSyncRankRewardReply* CampFigthRpcSyncRankRewardReply::default_instance_ = NULL;

CampFigthRpcSyncRankRewardReply* CampFigthRpcSyncRankRewardReply::New() const {
  return new CampFigthRpcSyncRankRewardReply;
}

void CampFigthRpcSyncRankRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  rankrewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcSyncRankRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RankRewardList;
        break;
      }

      // repeated int32 RankRewardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankRewardList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rankrewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rankrewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RankRewardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcSyncRankRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 RankRewardList = 2;
  for (int i = 0; i < this->rankrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rankrewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcSyncRankRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 RankRewardList = 2;
  for (int i = 0; i < this->rankrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rankrewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcSyncRankRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 RankRewardList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankrewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rankrewardlist(i));
    }
    total_size += 1 * this->rankrewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcSyncRankRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcSyncRankRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcSyncRankRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcSyncRankRewardReply::MergeFrom(const CampFigthRpcSyncRankRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankrewardlist_.MergeFrom(from.rankrewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcSyncRankRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcSyncRankRewardReply::CopyFrom(const CampFigthRpcSyncRankRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcSyncRankRewardReply::IsInitialized() const {

  return true;
}

void CampFigthRpcSyncRankRewardReply::Swap(CampFigthRpcSyncRankRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rankrewardlist_.Swap(&other->rankrewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcSyncRankRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcSyncRankRewardReply_descriptor_;
  metadata.reflection = CampFigthRpcSyncRankRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcGetRankRewardAsk::kRankFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcGetRankRewardAsk::CampFigthRpcGetRankRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcGetRankRewardAsk::InitAsDefaultInstance() {
}

CampFigthRpcGetRankRewardAsk::CampFigthRpcGetRankRewardAsk(const CampFigthRpcGetRankRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcGetRankRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  rank_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcGetRankRewardAsk::~CampFigthRpcGetRankRewardAsk() {
  SharedDtor();
}

void CampFigthRpcGetRankRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcGetRankRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcGetRankRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcGetRankRewardAsk_descriptor_;
}

const CampFigthRpcGetRankRewardAsk& CampFigthRpcGetRankRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcGetRankRewardAsk* CampFigthRpcGetRankRewardAsk::default_instance_ = NULL;

CampFigthRpcGetRankRewardAsk* CampFigthRpcGetRankRewardAsk::New() const {
  return new CampFigthRpcGetRankRewardAsk;
}

void CampFigthRpcGetRankRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcGetRankRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Rank = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcGetRankRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcGetRankRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcGetRankRewardAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Rank = 1 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcGetRankRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcGetRankRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcGetRankRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcGetRankRewardAsk::MergeFrom(const CampFigthRpcGetRankRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcGetRankRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcGetRankRewardAsk::CopyFrom(const CampFigthRpcGetRankRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcGetRankRewardAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcGetRankRewardAsk::Swap(CampFigthRpcGetRankRewardAsk* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcGetRankRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcGetRankRewardAsk_descriptor_;
  metadata.reflection = CampFigthRpcGetRankRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcGetRankRewardReply::kResultFieldNumber;
const int CampFigthRpcGetRankRewardReply::kRankFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcGetRankRewardReply::CampFigthRpcGetRankRewardReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcGetRankRewardReply::InitAsDefaultInstance() {
}

CampFigthRpcGetRankRewardReply::CampFigthRpcGetRankRewardReply(const CampFigthRpcGetRankRewardReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcGetRankRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  rank_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcGetRankRewardReply::~CampFigthRpcGetRankRewardReply() {
  SharedDtor();
}

void CampFigthRpcGetRankRewardReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcGetRankRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcGetRankRewardReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcGetRankRewardReply_descriptor_;
}

const CampFigthRpcGetRankRewardReply& CampFigthRpcGetRankRewardReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcGetRankRewardReply* CampFigthRpcGetRankRewardReply::default_instance_ = NULL;

CampFigthRpcGetRankRewardReply* CampFigthRpcGetRankRewardReply::New() const {
  return new CampFigthRpcGetRankRewardReply;
}

void CampFigthRpcGetRankRewardReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    rank_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcGetRankRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcGetRankRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Rank = 3 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcGetRankRewardReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Rank = 3 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcGetRankRewardReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Rank = 3 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcGetRankRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcGetRankRewardReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcGetRankRewardReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcGetRankRewardReply::MergeFrom(const CampFigthRpcGetRankRewardReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcGetRankRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcGetRankRewardReply::CopyFrom(const CampFigthRpcGetRankRewardReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcGetRankRewardReply::IsInitialized() const {

  return true;
}

void CampFigthRpcGetRankRewardReply::Swap(CampFigthRpcGetRankRewardReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcGetRankRewardReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcGetRankRewardReply_descriptor_;
  metadata.reflection = CampFigthRpcGetRankRewardReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CampFigthRpcEnterBattleSceneAsk::CampFigthRpcEnterBattleSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcEnterBattleSceneAsk::InitAsDefaultInstance() {
}

CampFigthRpcEnterBattleSceneAsk::CampFigthRpcEnterBattleSceneAsk(const CampFigthRpcEnterBattleSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcEnterBattleSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcEnterBattleSceneAsk::~CampFigthRpcEnterBattleSceneAsk() {
  SharedDtor();
}

void CampFigthRpcEnterBattleSceneAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcEnterBattleSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcEnterBattleSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcEnterBattleSceneAsk_descriptor_;
}

const CampFigthRpcEnterBattleSceneAsk& CampFigthRpcEnterBattleSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcEnterBattleSceneAsk* CampFigthRpcEnterBattleSceneAsk::default_instance_ = NULL;

CampFigthRpcEnterBattleSceneAsk* CampFigthRpcEnterBattleSceneAsk::New() const {
  return new CampFigthRpcEnterBattleSceneAsk;
}

void CampFigthRpcEnterBattleSceneAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcEnterBattleSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CampFigthRpcEnterBattleSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcEnterBattleSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcEnterBattleSceneAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcEnterBattleSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcEnterBattleSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcEnterBattleSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcEnterBattleSceneAsk::MergeFrom(const CampFigthRpcEnterBattleSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcEnterBattleSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcEnterBattleSceneAsk::CopyFrom(const CampFigthRpcEnterBattleSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcEnterBattleSceneAsk::IsInitialized() const {

  return true;
}

void CampFigthRpcEnterBattleSceneAsk::Swap(CampFigthRpcEnterBattleSceneAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcEnterBattleSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcEnterBattleSceneAsk_descriptor_;
  metadata.reflection = CampFigthRpcEnterBattleSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampFigthRpcEnterBattleSceneReply::kResultFieldNumber;
#endif  // !_MSC_VER

CampFigthRpcEnterBattleSceneReply::CampFigthRpcEnterBattleSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampFigthRpcEnterBattleSceneReply::InitAsDefaultInstance() {
}

CampFigthRpcEnterBattleSceneReply::CampFigthRpcEnterBattleSceneReply(const CampFigthRpcEnterBattleSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampFigthRpcEnterBattleSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampFigthRpcEnterBattleSceneReply::~CampFigthRpcEnterBattleSceneReply() {
  SharedDtor();
}

void CampFigthRpcEnterBattleSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampFigthRpcEnterBattleSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampFigthRpcEnterBattleSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampFigthRpcEnterBattleSceneReply_descriptor_;
}

const CampFigthRpcEnterBattleSceneReply& CampFigthRpcEnterBattleSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CampFigthRpc_2eproto();
  return *default_instance_;
}

CampFigthRpcEnterBattleSceneReply* CampFigthRpcEnterBattleSceneReply::default_instance_ = NULL;

CampFigthRpcEnterBattleSceneReply* CampFigthRpcEnterBattleSceneReply::New() const {
  return new CampFigthRpcEnterBattleSceneReply;
}

void CampFigthRpcEnterBattleSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampFigthRpcEnterBattleSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampFigthRpcEnterBattleSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampFigthRpcEnterBattleSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampFigthRpcEnterBattleSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampFigthRpcEnterBattleSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampFigthRpcEnterBattleSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampFigthRpcEnterBattleSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampFigthRpcEnterBattleSceneReply::MergeFrom(const CampFigthRpcEnterBattleSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampFigthRpcEnterBattleSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampFigthRpcEnterBattleSceneReply::CopyFrom(const CampFigthRpcEnterBattleSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampFigthRpcEnterBattleSceneReply::IsInitialized() const {

  return true;
}

void CampFigthRpcEnterBattleSceneReply::Swap(CampFigthRpcEnterBattleSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampFigthRpcEnterBattleSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampFigthRpcEnterBattleSceneReply_descriptor_;
  metadata.reflection = CampFigthRpcEnterBattleSceneReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
