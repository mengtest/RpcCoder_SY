// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicStruct.proto

#ifndef PROTOBUF_PublicStruct_2eproto__INCLUDED
#define PROTOBUF_PublicStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PublicStruct_2eproto();
void protobuf_AssignDesc_PublicStruct_2eproto();
void protobuf_ShutdownFile_PublicStruct_2eproto();

class CharacterInfo;
class Vector3;
class TeamMemberInfo;
class TeamInfo;
class OnlineUserInfo;
class ItemData;
class AttrKeyValue;
class BagData;
class EquipAttr;
class ItemObj;
class ChatMsg;
class ChatInfo;
class ChatChannelData;
class CharacterLocation;
class QuestData;
class CustomSkiData;
class QuestStepData;
class QuestListData;
class DBBags;
class ItemResolveData;
class ItemSimpleData;
class ItemAutoOperatorData;
class SkillContainer;
class SkillData;
class SkillObj;
class SuitInfo;
class WorldBossInfo;
class WorldBossRankInfo;
class EquipResonanceInfo;
class EquipResonanceData;
class EquipWashInfo;
class EquipWashData;
class Resource;
class BuinessSkillData;
class BuinessUnlockInfo;
class CompletedQuestList;
class EliteMonsterInfo;
class JewelSlot;
class JewelInfo;
class EquipSlotInfo;
class WorshipPlayerData;
class RecoverMedicament;
class MailInfo;
class EquipSlotStarInfo;
class DropItem;
class PetData;
class EquipBuildAtf;
class TreasureData;
class TreasureExtraInfo;
class TreasureDepotData;
class ShopItem;
class RandomQuestData;
class RandomQuestListData;
class PvpBattleInfo;
class PvpPlayerInfo;
class PvpPlayerState;
class PvpEndPlayer;
class DailyQuest;
class DailyQuestList;
class DungeonSituationData;
class DungeonData;
class TeamTarget;
class BuffInfo;
class MatchInfo;
class TreasureEquipedID;
class ServerInfo;
class GuildInfo;
class GuildFlag;
class GuildNews;
class GuildMemberTinyInfo;
class GuildMemberInfo;
class GuildJurisdiction;
class GuildOfficeJurisdiction;
class GuildVacationInfo;
class GuildBuildingInfo;
class GuildBuildingContributionInfo;
class GuildEvent;
class PBMatchRoom;
class MatchRoomCamps;
class PlayerMatchData;
class MaxQuestCompleteId;
class QuestMaxQuestList;
class LineStats;
class SceneStats;
class DungeonBossInfo;
class SkillPosInfo;
class WelfareReward;
class AccumulateSignInfo;
class OnlineInfo;
class LevelInfo;
class MonthSignInInfo;
class TeamMemberQuickUpdateInfo;
class WorldBossScoreInfo;
class WorldBossRank;
class PetSkill;
class PvpBattleEndInfo;
class PvpBattleRewardInfo;
class ContactData;
class ContactGroup;
class DailyCount;
class ClimTowerInfo;
class ContactSetting;
class FirstVicGet;
class ExpressionActionInfo;
class IntPair;
class AddressBook;
class AuctionItem;
class AuctionRecSimple;
class AuctionRecDetail;
class MercenaryInfo;
class RankInfo;
class AuctionItemCnt;
class RedDotInfo;
class FriendGiftPoint;
class FriendGifPointList;
class DungeonTargetContent;
class DungeonTarget;
class MailItem;
class ObjCreateInfo;
class ObjDeleteInfo;
class MatchLimit;
class MatchRankInfo;
class MatchTargetInfo;
class ActivityTime;
class ProfessionInfo;
class SpecLoginReward;
class SpecLoginInfo;
class ContactsChatMsg;
class Vector3Int;
class AppendString;
class AppendStringList;
class StarBattlePlayerInfo;
class StarBattleInfo;
class StarBattleTeamInfo;
class ObjPosInfo;

// ===================================================================

class CharacterInfo : public ::google::protobuf::Message {
 public:
  CharacterInfo();
  virtual ~CharacterInfo();

  CharacterInfo(const CharacterInfo& from);

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterInfo& default_instance();

  void Swap(CharacterInfo* other);

  // implements Message ----------------------------------------------

  CharacterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterInfo& from);
  void MergeFrom(const CharacterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string Nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 ConfigId = 3 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 Hp = 4 [default = -1];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 HpMax = 5 [default = -1];
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpMaxFieldNumber = 5;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 Level = 6 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional .TreasureEquipedID TreasureEquiped = 8;
  inline bool has_treasureequiped() const;
  inline void clear_treasureequiped();
  static const int kTreasureEquipedFieldNumber = 8;
  inline const ::TreasureEquipedID& treasureequiped() const;
  inline ::TreasureEquipedID* mutable_treasureequiped();
  inline ::TreasureEquipedID* release_treasureequiped();
  inline void set_allocated_treasureequiped(::TreasureEquipedID* treasureequiped);

  // @@protoc_insertion_point(class_scope:CharacterInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_treasureequiped();
  inline void clear_has_treasureequiped();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 level_;
  ::TreasureEquipedID* treasureequiped_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static CharacterInfo* default_instance_;
};
// -------------------------------------------------------------------

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1 [default = -1];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float Y = 2 [default = -1];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float Z = 3 [default = -1];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class TeamMemberInfo : public ::google::protobuf::Message {
 public:
  TeamMemberInfo();
  virtual ~TeamMemberInfo();

  TeamMemberInfo(const TeamMemberInfo& from);

  inline TeamMemberInfo& operator=(const TeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMemberInfo& default_instance();

  void Swap(TeamMemberInfo* other);

  // implements Message ----------------------------------------------

  TeamMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamMemberInfo& from);
  void MergeFrom(const TeamMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 Level = 3 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string Name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 ConfigId = 5 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 5;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 Hp = 6 [default = -1];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 Status = 8 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int64 MaxHp = 11 [default = -1];
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 11;
  inline ::google::protobuf::int64 maxhp() const;
  inline void set_maxhp(::google::protobuf::int64 value);

  // optional .CharacterLocation Location = 15;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 15;
  inline const ::CharacterLocation& location() const;
  inline ::CharacterLocation* mutable_location();
  inline ::CharacterLocation* release_location();
  inline void set_allocated_location(::CharacterLocation* location);

  // optional int32 ProfessionId = 16 [default = -1];
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 16;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional int32 OnLine = 17 [default = 1];
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnLineFieldNumber = 17;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // optional int32 FollowTeam = 18 [default = -1];
  inline bool has_followteam() const;
  inline void clear_followteam();
  static const int kFollowTeamFieldNumber = 18;
  inline ::google::protobuf::int32 followteam() const;
  inline void set_followteam(::google::protobuf::int32 value);

  // repeated int32 BuffIdList = 19;
  inline int buffidlist_size() const;
  inline void clear_buffidlist();
  static const int kBuffIdListFieldNumber = 19;
  inline ::google::protobuf::int32 buffidlist(int index) const;
  inline void set_buffidlist(int index, ::google::protobuf::int32 value);
  inline void add_buffidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffidlist();

  // @@protoc_insertion_point(class_scope:TeamMemberInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_followteam();
  inline void clear_has_followteam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 maxhp_;
  ::CharacterLocation* location_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffidlist_;
  ::google::protobuf::int32 followteam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TeamMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfo : public ::google::protobuf::Message {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  void Swap(TeamInfo* other);

  // implements Message ----------------------------------------------

  TeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeamMemberInfo Members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline const ::TeamMemberInfo& members(int index) const;
  inline ::TeamMemberInfo* mutable_members(int index);
  inline ::TeamMemberInfo* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamMemberInfo >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamMemberInfo >*
      mutable_members();

  // optional uint64 LeaderRoleId = 2 [default = 0];
  inline bool has_leaderroleid() const;
  inline void clear_leaderroleid();
  static const int kLeaderRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 leaderroleid() const;
  inline void set_leaderroleid(::google::protobuf::uint64 value);

  // optional uint64 TeamId = 3 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional int32 TeamType = 4 [default = -1];
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamTypeFieldNumber = 4;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // optional .TeamTarget TeamTarget = 5;
  inline bool has_teamtarget() const;
  inline void clear_teamtarget();
  static const int kTeamTargetFieldNumber = 5;
  inline const ::TeamTarget& teamtarget() const;
  inline ::TeamTarget* mutable_teamtarget();
  inline ::TeamTarget* release_teamtarget();
  inline void set_allocated_teamtarget(::TeamTarget* teamtarget);

  // @@protoc_insertion_point(class_scope:TeamInfo)
 private:
  inline void set_has_leaderroleid();
  inline void clear_has_leaderroleid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();
  inline void set_has_teamtarget();
  inline void clear_has_teamtarget();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TeamMemberInfo > members_;
  ::google::protobuf::uint64 leaderroleid_;
  ::google::protobuf::uint64 teamid_;
  ::TeamTarget* teamtarget_;
  ::google::protobuf::int32 teamtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class OnlineUserInfo : public ::google::protobuf::Message {
 public:
  OnlineUserInfo();
  virtual ~OnlineUserInfo();

  OnlineUserInfo(const OnlineUserInfo& from);

  inline OnlineUserInfo& operator=(const OnlineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineUserInfo& default_instance();

  void Swap(OnlineUserInfo* other);

  // implements Message ----------------------------------------------

  OnlineUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineUserInfo& from);
  void MergeFrom(const OnlineUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 Level = 2 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional .CharacterLocation Location = 5;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 5;
  inline const ::CharacterLocation& location() const;
  inline ::CharacterLocation* mutable_location();
  inline ::CharacterLocation* release_location();
  inline void set_allocated_location(::CharacterLocation* location);

  // optional uint64 Guildguid = 6 [default = 0];
  inline bool has_guildguid() const;
  inline void clear_guildguid();
  static const int kGuildguidFieldNumber = 6;
  inline ::google::protobuf::uint64 guildguid() const;
  inline void set_guildguid(::google::protobuf::uint64 value);

  // optional .PlayerMatchData PlayerMatchData = 7;
  inline bool has_playermatchdata() const;
  inline void clear_playermatchdata();
  static const int kPlayerMatchDataFieldNumber = 7;
  inline const ::PlayerMatchData& playermatchdata() const;
  inline ::PlayerMatchData* mutable_playermatchdata();
  inline ::PlayerMatchData* release_playermatchdata();
  inline void set_allocated_playermatchdata(::PlayerMatchData* playermatchdata);

  // optional string RoleName = 8;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 8;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 ConfigID = 9 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 9;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 TreasureCount = 10 [default = -1];
  inline bool has_treasurecount() const;
  inline void clear_treasurecount();
  static const int kTreasureCountFieldNumber = 10;
  inline ::google::protobuf::int32 treasurecount() const;
  inline void set_treasurecount(::google::protobuf::int32 value);

  // optional int32 TreasureLevel = 11 [default = -1];
  inline bool has_treasurelevel() const;
  inline void clear_treasurelevel();
  static const int kTreasureLevelFieldNumber = 11;
  inline ::google::protobuf::int32 treasurelevel() const;
  inline void set_treasurelevel(::google::protobuf::int32 value);

  // optional int32 PetConfigID = 12 [default = -1];
  inline bool has_petconfigid() const;
  inline void clear_petconfigid();
  static const int kPetConfigIDFieldNumber = 12;
  inline ::google::protobuf::int32 petconfigid() const;
  inline void set_petconfigid(::google::protobuf::int32 value);

  // optional int32 PetLevel = 13 [default = -1];
  inline bool has_petlevel() const;
  inline void clear_petlevel();
  static const int kPetLevelFieldNumber = 13;
  inline ::google::protobuf::int32 petlevel() const;
  inline void set_petlevel(::google::protobuf::int32 value);

  // optional int32 PvP3v3WinCount = 14 [default = -1];
  inline bool has_pvp3v3wincount() const;
  inline void clear_pvp3v3wincount();
  static const int kPvP3V3WinCountFieldNumber = 14;
  inline ::google::protobuf::int32 pvp3v3wincount() const;
  inline void set_pvp3v3wincount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OnlineUserInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_guildguid();
  inline void clear_has_guildguid();
  inline void set_has_playermatchdata();
  inline void clear_has_playermatchdata();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_treasurecount();
  inline void clear_has_treasurecount();
  inline void set_has_treasurelevel();
  inline void clear_has_treasurelevel();
  inline void set_has_petconfigid();
  inline void clear_has_petconfigid();
  inline void set_has_petlevel();
  inline void clear_has_petlevel();
  inline void set_has_pvp3v3wincount();
  inline void clear_has_pvp3v3wincount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::CharacterLocation* location_;
  ::google::protobuf::uint64 guildguid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 configid_;
  ::PlayerMatchData* playermatchdata_;
  ::std::string* rolename_;
  ::google::protobuf::int32 treasurecount_;
  ::google::protobuf::int32 treasurelevel_;
  ::google::protobuf::int32 petconfigid_;
  ::google::protobuf::int32 petlevel_;
  ::google::protobuf::int32 pvp3v3wincount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static OnlineUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemData : public ::google::protobuf::Message {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemData& default_instance();

  void Swap(ItemData* other);

  // implements Message ----------------------------------------------

  ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsLock = 2 [default = false];
  inline bool has_islock() const;
  inline void clear_islock();
  static const int kIsLockFieldNumber = 2;
  inline bool islock() const;
  inline void set_islock(bool value);

  // optional int32 OverlayCount = 3 [default = -1];
  inline bool has_overlaycount() const;
  inline void clear_overlaycount();
  static const int kOverlayCountFieldNumber = 3;
  inline ::google::protobuf::int32 overlaycount() const;
  inline void set_overlaycount(::google::protobuf::int32 value);

  // optional int32 ConfigId = 4 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 4;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional .EquipAttr EquipAttr = 5;
  inline bool has_equipattr() const;
  inline void clear_equipattr();
  static const int kEquipAttrFieldNumber = 5;
  inline const ::EquipAttr& equipattr() const;
  inline ::EquipAttr* mutable_equipattr();
  inline ::EquipAttr* release_equipattr();
  inline void set_allocated_equipattr(::EquipAttr* equipattr);

  // optional bool IsBind = 12 [default = true];
  inline bool has_isbind() const;
  inline void clear_isbind();
  static const int kIsBindFieldNumber = 12;
  inline bool isbind() const;
  inline void set_isbind(bool value);

  // optional uint64 Guid = 13 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 13;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional .PetData PetData = 14;
  inline bool has_petdata() const;
  inline void clear_petdata();
  static const int kPetDataFieldNumber = 14;
  inline const ::PetData& petdata() const;
  inline ::PetData* mutable_petdata();
  inline ::PetData* release_petdata();
  inline void set_allocated_petdata(::PetData* petdata);

  // optional int32 BindRule = 15 [default = 1];
  inline bool has_bindrule() const;
  inline void clear_bindrule();
  static const int kBindRuleFieldNumber = 15;
  inline ::google::protobuf::int32 bindrule() const;
  inline void set_bindrule(::google::protobuf::int32 value);

  // optional int32 SaleCD = 16 [default = 0];
  inline bool has_salecd() const;
  inline void clear_salecd();
  static const int kSaleCDFieldNumber = 16;
  inline ::google::protobuf::int32 salecd() const;
  inline void set_salecd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ItemData)
 private:
  inline void set_has_islock();
  inline void clear_has_islock();
  inline void set_has_overlaycount();
  inline void clear_has_overlaycount();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_equipattr();
  inline void clear_has_equipattr();
  inline void set_has_isbind();
  inline void clear_has_isbind();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_petdata();
  inline void clear_has_petdata();
  inline void set_has_bindrule();
  inline void clear_has_bindrule();
  inline void set_has_salecd();
  inline void clear_has_salecd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 overlaycount_;
  ::google::protobuf::int32 configid_;
  ::EquipAttr* equipattr_;
  bool islock_;
  bool isbind_;
  ::google::protobuf::int32 bindrule_;
  ::google::protobuf::uint64 guid_;
  ::PetData* petdata_;
  ::google::protobuf::int32 salecd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ItemData* default_instance_;
};
// -------------------------------------------------------------------

class AttrKeyValue : public ::google::protobuf::Message {
 public:
  AttrKeyValue();
  virtual ~AttrKeyValue();

  AttrKeyValue(const AttrKeyValue& from);

  inline AttrKeyValue& operator=(const AttrKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrKeyValue& default_instance();

  void Swap(AttrKeyValue* other);

  // implements Message ----------------------------------------------

  AttrKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrKeyValue& from);
  void MergeFrom(const AttrKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Key = 1 [default = -1];
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int64 Value = 2 [default = -1];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int32 Quality = 3 [default = -1];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AttrKeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AttrKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class BagData : public ::google::protobuf::Message {
 public:
  BagData();
  virtual ~BagData();

  BagData(const BagData& from);

  inline BagData& operator=(const BagData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BagData& default_instance();

  void Swap(BagData* other);

  // implements Message ----------------------------------------------

  BagData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BagData& from);
  void MergeFrom(const BagData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ItemObj Items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ItemObj& items(int index) const;
  inline ::ItemObj* mutable_items(int index);
  inline ::ItemObj* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemObj >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemObj >*
      mutable_items();

  // optional int32 BagType = 2 [default = -1];
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 2;
  inline ::google::protobuf::int32 bagtype() const;
  inline void set_bagtype(::google::protobuf::int32 value);

  // optional int32 CurCapacity = 3 [default = -1];
  inline bool has_curcapacity() const;
  inline void clear_curcapacity();
  static const int kCurCapacityFieldNumber = 3;
  inline ::google::protobuf::int32 curcapacity() const;
  inline void set_curcapacity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BagData)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_curcapacity();
  inline void clear_has_curcapacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemObj > items_;
  ::google::protobuf::int32 bagtype_;
  ::google::protobuf::int32 curcapacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static BagData* default_instance_;
};
// -------------------------------------------------------------------

class EquipAttr : public ::google::protobuf::Message {
 public:
  EquipAttr();
  virtual ~EquipAttr();

  EquipAttr(const EquipAttr& from);

  inline EquipAttr& operator=(const EquipAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipAttr& default_instance();

  void Swap(EquipAttr* other);

  // implements Message ----------------------------------------------

  EquipAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipAttr& from);
  void MergeFrom(const EquipAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AttrKeyValue BaseAttr = 1;
  inline int baseattr_size() const;
  inline void clear_baseattr();
  static const int kBaseAttrFieldNumber = 1;
  inline const ::AttrKeyValue& baseattr(int index) const;
  inline ::AttrKeyValue* mutable_baseattr(int index);
  inline ::AttrKeyValue* add_baseattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      baseattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_baseattr();

  // repeated .AttrKeyValue ExtraAttr = 2;
  inline int extraattr_size() const;
  inline void clear_extraattr();
  static const int kExtraAttrFieldNumber = 2;
  inline const ::AttrKeyValue& extraattr(int index) const;
  inline ::AttrKeyValue* mutable_extraattr(int index);
  inline ::AttrKeyValue* add_extraattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      extraattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_extraattr();

  // optional int32 BattleScore = 3 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 3;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipAttr)
 private:
  inline void set_has_battlescore();
  inline void clear_has_battlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > baseattr_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > extraattr_;
  ::google::protobuf::int32 battlescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipAttr* default_instance_;
};
// -------------------------------------------------------------------

class ItemObj : public ::google::protobuf::Message {
 public:
  ItemObj();
  virtual ~ItemObj();

  ItemObj(const ItemObj& from);

  inline ItemObj& operator=(const ItemObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemObj& default_instance();

  void Swap(ItemObj* other);

  // implements Message ----------------------------------------------

  ItemObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemObj& from);
  void MergeFrom(const ItemObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Pos = 1 [default = -1];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional .ItemData ItemData = 2;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 2;
  inline const ::ItemData& itemdata() const;
  inline ::ItemData* mutable_itemdata();
  inline ::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::ItemData* itemdata);

  // optional bool RedPoint = 3 [default = false];
  inline bool has_redpoint() const;
  inline void clear_redpoint();
  static const int kRedPointFieldNumber = 3;
  inline bool redpoint() const;
  inline void set_redpoint(bool value);

  // @@protoc_insertion_point(class_scope:ItemObj)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_redpoint();
  inline void clear_has_redpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ItemData* itemdata_;
  ::google::protobuf::int32 pos_;
  bool redpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ItemObj* default_instance_;
};
// -------------------------------------------------------------------

class ChatMsg : public ::google::protobuf::Message {
 public:
  ChatMsg();
  virtual ~ChatMsg();

  ChatMsg(const ChatMsg& from);

  inline ChatMsg& operator=(const ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMsg& default_instance();

  void Swap(ChatMsg* other);

  // implements Message ----------------------------------------------

  ChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMsg& from);
  void MergeFrom(const ChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Chat_content = 1;
  inline bool has_chat_content() const;
  inline void clear_chat_content();
  static const int kChatContentFieldNumber = 1;
  inline const ::std::string& chat_content() const;
  inline void set_chat_content(const ::std::string& value);
  inline void set_chat_content(const char* value);
  inline void set_chat_content(const char* value, size_t size);
  inline ::std::string* mutable_chat_content();
  inline ::std::string* release_chat_content();
  inline void set_allocated_chat_content(::std::string* chat_content);

  // optional string Chat_voice_url = 2;
  inline bool has_chat_voice_url() const;
  inline void clear_chat_voice_url();
  static const int kChatVoiceUrlFieldNumber = 2;
  inline const ::std::string& chat_voice_url() const;
  inline void set_chat_voice_url(const ::std::string& value);
  inline void set_chat_voice_url(const char* value);
  inline void set_chat_voice_url(const char* value, size_t size);
  inline ::std::string* mutable_chat_voice_url();
  inline ::std::string* release_chat_voice_url();
  inline void set_allocated_chat_voice_url(::std::string* chat_voice_url);

  // optional int32 Chat_voice_secs = 3 [default = -1];
  inline bool has_chat_voice_secs() const;
  inline void clear_chat_voice_secs();
  static const int kChatVoiceSecsFieldNumber = 3;
  inline ::google::protobuf::int32 chat_voice_secs() const;
  inline void set_chat_voice_secs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChatMsg)
 private:
  inline void set_has_chat_content();
  inline void clear_has_chat_content();
  inline void set_has_chat_voice_url();
  inline void clear_has_chat_voice_url();
  inline void set_has_chat_voice_secs();
  inline void clear_has_chat_voice_secs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* chat_content_;
  ::std::string* chat_voice_url_;
  ::google::protobuf::int32 chat_voice_secs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class ChatInfo : public ::google::protobuf::Message {
 public:
  ChatInfo();
  virtual ~ChatInfo();

  ChatInfo(const ChatInfo& from);

  inline ChatInfo& operator=(const ChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfo& default_instance();

  void Swap(ChatInfo* other);

  // implements Message ----------------------------------------------

  ChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatInfo& from);
  void MergeFrom(const ChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Player_name = 1;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint64 Player_guid = 2 [default = 0];
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // optional int32 Avatar_id = 3 [default = -1];
  inline bool has_avatar_id() const;
  inline void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 3;
  inline ::google::protobuf::int32 avatar_id() const;
  inline void set_avatar_id(::google::protobuf::int32 value);

  // optional int32 Player_level = 4 [default = -1];
  inline bool has_player_level() const;
  inline void clear_player_level();
  static const int kPlayerLevelFieldNumber = 4;
  inline ::google::protobuf::int32 player_level() const;
  inline void set_player_level(::google::protobuf::int32 value);

  // optional int32 Avatar_frame_id = 5 [default = -1];
  inline bool has_avatar_frame_id() const;
  inline void clear_avatar_frame_id();
  static const int kAvatarFrameIdFieldNumber = 5;
  inline ::google::protobuf::int32 avatar_frame_id() const;
  inline void set_avatar_frame_id(::google::protobuf::int32 value);

  // optional int32 Config_id = 6 [default = -1];
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 6;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional uint64 Timestamp = 7 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional .ChatMsg Chat_msg = 8;
  inline bool has_chat_msg() const;
  inline void clear_chat_msg();
  static const int kChatMsgFieldNumber = 8;
  inline const ::ChatMsg& chat_msg() const;
  inline ::ChatMsg* mutable_chat_msg();
  inline ::ChatMsg* release_chat_msg();
  inline void set_allocated_chat_msg(::ChatMsg* chat_msg);

  // optional uint64 Team_id = 9 [default = 0];
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 9;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 Guild_guid = 10 [default = 0];
  inline bool has_guild_guid() const;
  inline void clear_guild_guid();
  static const int kGuildGuidFieldNumber = 10;
  inline ::google::protobuf::uint64 guild_guid() const;
  inline void set_guild_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ChatInfo)
 private:
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_avatar_id();
  inline void clear_has_avatar_id();
  inline void set_has_player_level();
  inline void clear_has_player_level();
  inline void set_has_avatar_frame_id();
  inline void clear_has_avatar_frame_id();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_chat_msg();
  inline void clear_has_chat_msg();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_guild_guid();
  inline void clear_has_guild_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 avatar_id_;
  ::google::protobuf::int32 player_level_;
  ::google::protobuf::int32 avatar_frame_id_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::uint64 timestamp_;
  ::ChatMsg* chat_msg_;
  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::uint64 guild_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChatChannelData : public ::google::protobuf::Message {
 public:
  ChatChannelData();
  virtual ~ChatChannelData();

  ChatChannelData(const ChatChannelData& from);

  inline ChatChannelData& operator=(const ChatChannelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatChannelData& default_instance();

  void Swap(ChatChannelData* other);

  // implements Message ----------------------------------------------

  ChatChannelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatChannelData& from);
  void MergeFrom(const ChatChannelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Chat_channel = 1 [default = -1];
  inline bool has_chat_channel() const;
  inline void clear_chat_channel();
  static const int kChatChannelFieldNumber = 1;
  inline ::google::protobuf::int32 chat_channel() const;
  inline void set_chat_channel(::google::protobuf::int32 value);

  // repeated .ChatInfo Chat_infos = 2;
  inline int chat_infos_size() const;
  inline void clear_chat_infos();
  static const int kChatInfosFieldNumber = 2;
  inline const ::ChatInfo& chat_infos(int index) const;
  inline ::ChatInfo* mutable_chat_infos(int index);
  inline ::ChatInfo* add_chat_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
      chat_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
      mutable_chat_infos();

  // @@protoc_insertion_point(class_scope:ChatChannelData)
 private:
  inline void set_has_chat_channel();
  inline void clear_has_chat_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ChatInfo > chat_infos_;
  ::google::protobuf::int32 chat_channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ChatChannelData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterLocation : public ::google::protobuf::Message {
 public:
  CharacterLocation();
  virtual ~CharacterLocation();

  CharacterLocation(const CharacterLocation& from);

  inline CharacterLocation& operator=(const CharacterLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterLocation& default_instance();

  void Swap(CharacterLocation* other);

  // implements Message ----------------------------------------------

  CharacterLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterLocation& from);
  void MergeFrom(const CharacterLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SceneId = 2 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional .Vector3 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // optional int32 MapId = 5 [default = -1];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 5;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 DungeonConfigId = 6 [default = -1];
  inline bool has_dungeonconfigid() const;
  inline void clear_dungeonconfigid();
  static const int kDungeonConfigIdFieldNumber = 6;
  inline ::google::protobuf::int32 dungeonconfigid() const;
  inline void set_dungeonconfigid(::google::protobuf::int32 value);

  // optional int32 LineId = 7 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIdFieldNumber = 7;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // optional int32 SceneConfigId = 8 [default = -1];
  inline bool has_sceneconfigid() const;
  inline void clear_sceneconfigid();
  static const int kSceneConfigIdFieldNumber = 8;
  inline ::google::protobuf::int32 sceneconfigid() const;
  inline void set_sceneconfigid(::google::protobuf::int32 value);

  // optional int32 MirrorId = 9 [default = -1];
  inline bool has_mirrorid() const;
  inline void clear_mirrorid();
  static const int kMirrorIdFieldNumber = 9;
  inline ::google::protobuf::int32 mirrorid() const;
  inline void set_mirrorid(::google::protobuf::int32 value);

  // optional int32 ServerId = 10 [default = -1];
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 10;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharacterLocation)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_dungeonconfigid();
  inline void clear_has_dungeonconfigid();
  inline void set_has_lineid();
  inline void clear_has_lineid();
  inline void set_has_sceneconfigid();
  inline void clear_has_sceneconfigid();
  inline void set_has_mirrorid();
  inline void clear_has_mirrorid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Vector3* pos_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 dungeonconfigid_;
  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 sceneconfigid_;
  ::google::protobuf::int32 mirrorid_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static CharacterLocation* default_instance_;
};
// -------------------------------------------------------------------

class QuestData : public ::google::protobuf::Message {
 public:
  QuestData();
  virtual ~QuestData();

  QuestData(const QuestData& from);

  inline QuestData& operator=(const QuestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestData& default_instance();

  void Swap(QuestData* other);

  // implements Message ----------------------------------------------

  QuestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestData& from);
  void MergeFrom(const QuestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfigId = 1 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 Status = 2 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .QuestStepData QuestSteps = 4;
  inline int queststeps_size() const;
  inline void clear_queststeps();
  static const int kQuestStepsFieldNumber = 4;
  inline const ::QuestStepData& queststeps(int index) const;
  inline ::QuestStepData* mutable_queststeps(int index);
  inline ::QuestStepData* add_queststeps();
  inline const ::google::protobuf::RepeatedPtrField< ::QuestStepData >&
      queststeps() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuestStepData >*
      mutable_queststeps();

  // optional int32 QuestIndex = 6 [default = -1];
  inline bool has_questindex() const;
  inline void clear_questindex();
  static const int kQuestIndexFieldNumber = 6;
  inline ::google::protobuf::int32 questindex() const;
  inline void set_questindex(::google::protobuf::int32 value);

  // optional int32 QuestMaxIndex = 7 [default = -1];
  inline bool has_questmaxindex() const;
  inline void clear_questmaxindex();
  static const int kQuestMaxIndexFieldNumber = 7;
  inline ::google::protobuf::int32 questmaxindex() const;
  inline void set_questmaxindex(::google::protobuf::int32 value);

  // optional int64 QuestBeginTime = 8 [default = -1];
  inline bool has_questbegintime() const;
  inline void clear_questbegintime();
  static const int kQuestBeginTimeFieldNumber = 8;
  inline ::google::protobuf::int64 questbegintime() const;
  inline void set_questbegintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:QuestData)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_questindex();
  inline void clear_has_questindex();
  inline void set_has_questmaxindex();
  inline void clear_has_questmaxindex();
  inline void set_has_questbegintime();
  inline void clear_has_questbegintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::QuestStepData > queststeps_;
  ::google::protobuf::int32 questindex_;
  ::google::protobuf::int32 questmaxindex_;
  ::google::protobuf::int64 questbegintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static QuestData* default_instance_;
};
// -------------------------------------------------------------------

class CustomSkiData : public ::google::protobuf::Message {
 public:
  CustomSkiData();
  virtual ~CustomSkiData();

  CustomSkiData(const CustomSkiData& from);

  inline CustomSkiData& operator=(const CustomSkiData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomSkiData& default_instance();

  void Swap(CustomSkiData* other);

  // implements Message ----------------------------------------------

  CustomSkiData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CustomSkiData& from);
  void MergeFrom(const CustomSkiData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 KeyType = 3 [default = -1];
  inline bool has_keytype() const;
  inline void clear_keytype();
  static const int kKeyTypeFieldNumber = 3;
  inline ::google::protobuf::int32 keytype() const;
  inline void set_keytype(::google::protobuf::int32 value);

  // optional int32 IntV = 4 [default = 0];
  inline bool has_intv() const;
  inline void clear_intv();
  static const int kIntVFieldNumber = 4;
  inline ::google::protobuf::int32 intv() const;
  inline void set_intv(::google::protobuf::int32 value);

  // optional bool BoolV = 5 [default = false];
  inline bool has_boolv() const;
  inline void clear_boolv();
  static const int kBoolVFieldNumber = 5;
  inline bool boolv() const;
  inline void set_boolv(bool value);

  // @@protoc_insertion_point(class_scope:CustomSkiData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_keytype();
  inline void clear_has_keytype();
  inline void set_has_intv();
  inline void clear_has_intv();
  inline void set_has_boolv();
  inline void clear_has_boolv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 keytype_;
  ::google::protobuf::int32 intv_;
  bool boolv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static CustomSkiData* default_instance_;
};
// -------------------------------------------------------------------

class QuestStepData : public ::google::protobuf::Message {
 public:
  QuestStepData();
  virtual ~QuestStepData();

  QuestStepData(const QuestStepData& from);

  inline QuestStepData& operator=(const QuestStepData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestStepData& default_instance();

  void Swap(QuestStepData* other);

  // implements Message ----------------------------------------------

  QuestStepData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestStepData& from);
  void MergeFrom(const QuestStepData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Status = 2 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 Progress = 3 [default = -1];
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::int32 progress() const;
  inline void set_progress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QuestStepData)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static QuestStepData* default_instance_;
};
// -------------------------------------------------------------------

class QuestListData : public ::google::protobuf::Message {
 public:
  QuestListData();
  virtual ~QuestListData();

  QuestListData(const QuestListData& from);

  inline QuestListData& operator=(const QuestListData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestListData& default_instance();

  void Swap(QuestListData* other);

  // implements Message ----------------------------------------------

  QuestListData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestListData& from);
  void MergeFrom(const QuestListData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QuestData QuestsList = 1;
  inline int questslist_size() const;
  inline void clear_questslist();
  static const int kQuestsListFieldNumber = 1;
  inline const ::QuestData& questslist(int index) const;
  inline ::QuestData* mutable_questslist(int index);
  inline ::QuestData* add_questslist();
  inline const ::google::protobuf::RepeatedPtrField< ::QuestData >&
      questslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuestData >*
      mutable_questslist();

  // @@protoc_insertion_point(class_scope:QuestListData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::QuestData > questslist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static QuestListData* default_instance_;
};
// -------------------------------------------------------------------

class DBBags : public ::google::protobuf::Message {
 public:
  DBBags();
  virtual ~DBBags();

  DBBags(const DBBags& from);

  inline DBBags& operator=(const DBBags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBBags& default_instance();

  void Swap(DBBags* other);

  // implements Message ----------------------------------------------

  DBBags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBBags& from);
  void MergeFrom(const DBBags& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BagData Bags = 1;
  inline int bags_size() const;
  inline void clear_bags();
  static const int kBagsFieldNumber = 1;
  inline const ::BagData& bags(int index) const;
  inline ::BagData* mutable_bags(int index);
  inline ::BagData* add_bags();
  inline const ::google::protobuf::RepeatedPtrField< ::BagData >&
      bags() const;
  inline ::google::protobuf::RepeatedPtrField< ::BagData >*
      mutable_bags();

  // repeated uint64 RedPointGuids = 2;
  inline int redpointguids_size() const;
  inline void clear_redpointguids();
  static const int kRedPointGuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 redpointguids(int index) const;
  inline void set_redpointguids(int index, ::google::protobuf::uint64 value);
  inline void add_redpointguids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      redpointguids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_redpointguids();

  // @@protoc_insertion_point(class_scope:DBBags)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BagData > bags_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > redpointguids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DBBags* default_instance_;
};
// -------------------------------------------------------------------

class ItemResolveData : public ::google::protobuf::Message {
 public:
  ItemResolveData();
  virtual ~ItemResolveData();

  ItemResolveData(const ItemResolveData& from);

  inline ItemResolveData& operator=(const ItemResolveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemResolveData& default_instance();

  void Swap(ItemResolveData* other);

  // implements Message ----------------------------------------------

  ItemResolveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemResolveData& from);
  void MergeFrom(const ItemResolveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Qulity = 1 [default = -1];
  inline bool has_qulity() const;
  inline void clear_qulity();
  static const int kQulityFieldNumber = 1;
  inline ::google::protobuf::int32 qulity() const;
  inline void set_qulity(::google::protobuf::int32 value);

  // optional int32 IsResolve = 2 [default = 0];
  inline bool has_isresolve() const;
  inline void clear_isresolve();
  static const int kIsResolveFieldNumber = 2;
  inline ::google::protobuf::int32 isresolve() const;
  inline void set_isresolve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ItemResolveData)
 private:
  inline void set_has_qulity();
  inline void clear_has_qulity();
  inline void set_has_isresolve();
  inline void clear_has_isresolve();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 qulity_;
  ::google::protobuf::int32 isresolve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ItemResolveData* default_instance_;
};
// -------------------------------------------------------------------

class ItemSimpleData : public ::google::protobuf::Message {
 public:
  ItemSimpleData();
  virtual ~ItemSimpleData();

  ItemSimpleData(const ItemSimpleData& from);

  inline ItemSimpleData& operator=(const ItemSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSimpleData& default_instance();

  void Swap(ItemSimpleData* other);

  // implements Message ----------------------------------------------

  ItemSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSimpleData& from);
  void MergeFrom(const ItemSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfID = 1 [default = -1];
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfIDFieldNumber = 1;
  inline ::google::protobuf::int32 confid() const;
  inline void set_confid(::google::protobuf::int32 value);

  // optional int32 Count = 2 [default = -1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ItemSimpleData)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 confid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ItemSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class ItemAutoOperatorData : public ::google::protobuf::Message {
 public:
  ItemAutoOperatorData();
  virtual ~ItemAutoOperatorData();

  ItemAutoOperatorData(const ItemAutoOperatorData& from);

  inline ItemAutoOperatorData& operator=(const ItemAutoOperatorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemAutoOperatorData& default_instance();

  void Swap(ItemAutoOperatorData* other);

  // implements Message ----------------------------------------------

  ItemAutoOperatorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemAutoOperatorData& from);
  void MergeFrom(const ItemAutoOperatorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ItemResolveData AutoSaleDisassemble = 1;
  inline int autosaledisassemble_size() const;
  inline void clear_autosaledisassemble();
  static const int kAutoSaleDisassembleFieldNumber = 1;
  inline const ::ItemResolveData& autosaledisassemble(int index) const;
  inline ::ItemResolveData* mutable_autosaledisassemble(int index);
  inline ::ItemResolveData* add_autosaledisassemble();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemResolveData >&
      autosaledisassemble() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemResolveData >*
      mutable_autosaledisassemble();

  // @@protoc_insertion_point(class_scope:ItemAutoOperatorData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ItemResolveData > autosaledisassemble_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ItemAutoOperatorData* default_instance_;
};
// -------------------------------------------------------------------

class SkillContainer : public ::google::protobuf::Message {
 public:
  SkillContainer();
  virtual ~SkillContainer();

  SkillContainer(const SkillContainer& from);

  inline SkillContainer& operator=(const SkillContainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillContainer& default_instance();

  void Swap(SkillContainer* other);

  // implements Message ----------------------------------------------

  SkillContainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillContainer& from);
  void MergeFrom(const SkillContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SkillObj SkillObjList = 1;
  inline int skillobjlist_size() const;
  inline void clear_skillobjlist();
  static const int kSkillObjListFieldNumber = 1;
  inline const ::SkillObj& skillobjlist(int index) const;
  inline ::SkillObj* mutable_skillobjlist(int index);
  inline ::SkillObj* add_skillobjlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillObj >&
      skillobjlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillObj >*
      mutable_skillobjlist();

  // @@protoc_insertion_point(class_scope:SkillContainer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SkillObj > skillobjlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SkillContainer* default_instance_;
};
// -------------------------------------------------------------------

class SkillData : public ::google::protobuf::Message {
 public:
  SkillData();
  virtual ~SkillData();

  SkillData(const SkillData& from);

  inline SkillData& operator=(const SkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillData& default_instance();

  void Swap(SkillData* other);

  // implements Message ----------------------------------------------

  SkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillData& from);
  void MergeFrom(const SkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SkillContainer SkillContainerList = 1;
  inline int skillcontainerlist_size() const;
  inline void clear_skillcontainerlist();
  static const int kSkillContainerListFieldNumber = 1;
  inline const ::SkillContainer& skillcontainerlist(int index) const;
  inline ::SkillContainer* mutable_skillcontainerlist(int index);
  inline ::SkillContainer* add_skillcontainerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillContainer >&
      skillcontainerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillContainer >*
      mutable_skillcontainerlist();

  // optional int32 CurUseContainer = 2 [default = -1];
  inline bool has_curusecontainer() const;
  inline void clear_curusecontainer();
  static const int kCurUseContainerFieldNumber = 2;
  inline ::google::protobuf::int32 curusecontainer() const;
  inline void set_curusecontainer(::google::protobuf::int32 value);

  // repeated int32 SkillSlotLevel = 3;
  inline int skillslotlevel_size() const;
  inline void clear_skillslotlevel();
  static const int kSkillSlotLevelFieldNumber = 3;
  inline ::google::protobuf::int32 skillslotlevel(int index) const;
  inline void set_skillslotlevel(int index, ::google::protobuf::int32 value);
  inline void add_skillslotlevel(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillslotlevel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillslotlevel();

  // @@protoc_insertion_point(class_scope:SkillData)
 private:
  inline void set_has_curusecontainer();
  inline void clear_has_curusecontainer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SkillContainer > skillcontainerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillslotlevel_;
  ::google::protobuf::int32 curusecontainer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SkillData* default_instance_;
};
// -------------------------------------------------------------------

class SkillObj : public ::google::protobuf::Message {
 public:
  SkillObj();
  virtual ~SkillObj();

  SkillObj(const SkillObj& from);

  inline SkillObj& operator=(const SkillObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillObj& default_instance();

  void Swap(SkillObj* other);

  // implements Message ----------------------------------------------

  SkillObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillObj& from);
  void MergeFrom(const SkillObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Pos = 1 [default = -1];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 SkillId = 2 [default = -1];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SkillObj)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SkillObj* default_instance_;
};
// -------------------------------------------------------------------

class SuitInfo : public ::google::protobuf::Message {
 public:
  SuitInfo();
  virtual ~SuitInfo();

  SuitInfo(const SuitInfo& from);

  inline SuitInfo& operator=(const SuitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuitInfo& default_instance();

  void Swap(SuitInfo* other);

  // implements Message ----------------------------------------------

  SuitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuitInfo& from);
  void MergeFrom(const SuitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Suit_id = 1 [default = -1];
  inline bool has_suit_id() const;
  inline void clear_suit_id();
  static const int kSuitIdFieldNumber = 1;
  inline ::google::protobuf::int32 suit_id() const;
  inline void set_suit_id(::google::protobuf::int32 value);

  // optional int32 Collect_num = 2 [default = -1];
  inline bool has_collect_num() const;
  inline void clear_collect_num();
  static const int kCollectNumFieldNumber = 2;
  inline ::google::protobuf::int32 collect_num() const;
  inline void set_collect_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SuitInfo)
 private:
  inline void set_has_suit_id();
  inline void clear_has_suit_id();
  inline void set_has_collect_num();
  inline void clear_has_collect_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 suit_id_;
  ::google::protobuf::int32 collect_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SuitInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossInfo : public ::google::protobuf::Message {
 public:
  WorldBossInfo();
  virtual ~WorldBossInfo();

  WorldBossInfo(const WorldBossInfo& from);

  inline WorldBossInfo& operator=(const WorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossInfo& default_instance();

  void Swap(WorldBossInfo* other);

  // implements Message ----------------------------------------------

  WorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossInfo& from);
  void MergeFrom(const WorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LineID = 1 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIDFieldNumber = 1;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // optional int32 HPRate = 2 [default = -1];
  inline bool has_hprate() const;
  inline void clear_hprate();
  static const int kHPRateFieldNumber = 2;
  inline ::google::protobuf::int32 hprate() const;
  inline void set_hprate(::google::protobuf::int32 value);

  // optional .WorldBossScoreInfo LastDamage = 3;
  inline bool has_lastdamage() const;
  inline void clear_lastdamage();
  static const int kLastDamageFieldNumber = 3;
  inline const ::WorldBossScoreInfo& lastdamage() const;
  inline ::WorldBossScoreInfo* mutable_lastdamage();
  inline ::WorldBossScoreInfo* release_lastdamage();
  inline void set_allocated_lastdamage(::WorldBossScoreInfo* lastdamage);

  // optional .WorldBossScoreInfo MaxDamage = 4;
  inline bool has_maxdamage() const;
  inline void clear_maxdamage();
  static const int kMaxDamageFieldNumber = 4;
  inline const ::WorldBossScoreInfo& maxdamage() const;
  inline ::WorldBossScoreInfo* mutable_maxdamage();
  inline ::WorldBossScoreInfo* release_maxdamage();
  inline void set_allocated_maxdamage(::WorldBossScoreInfo* maxdamage);

  // @@protoc_insertion_point(class_scope:WorldBossInfo)
 private:
  inline void set_has_lineid();
  inline void clear_has_lineid();
  inline void set_has_hprate();
  inline void clear_has_hprate();
  inline void set_has_lastdamage();
  inline void clear_has_lastdamage();
  inline void set_has_maxdamage();
  inline void clear_has_maxdamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 hprate_;
  ::WorldBossScoreInfo* lastdamage_;
  ::WorldBossScoreInfo* maxdamage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossRankInfo : public ::google::protobuf::Message {
 public:
  WorldBossRankInfo();
  virtual ~WorldBossRankInfo();

  WorldBossRankInfo(const WorldBossRankInfo& from);

  inline WorldBossRankInfo& operator=(const WorldBossRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossRankInfo& default_instance();

  void Swap(WorldBossRankInfo* other);

  // implements Message ----------------------------------------------

  WorldBossRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossRankInfo& from);
  void MergeFrom(const WorldBossRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Rank = 1 [default = -1];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Level = 3 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Score = 4 [default = -1];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WorldBossRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipResonanceInfo : public ::google::protobuf::Message {
 public:
  EquipResonanceInfo();
  virtual ~EquipResonanceInfo();

  EquipResonanceInfo(const EquipResonanceInfo& from);

  inline EquipResonanceInfo& operator=(const EquipResonanceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipResonanceInfo& default_instance();

  void Swap(EquipResonanceInfo* other);

  // implements Message ----------------------------------------------

  EquipResonanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipResonanceInfo& from);
  void MergeFrom(const EquipResonanceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfId = 2 [default = -1];
  inline bool has_confid() const;
  inline void clear_confid();
  static const int kConfIdFieldNumber = 2;
  inline ::google::protobuf::int32 confid() const;
  inline void set_confid(::google::protobuf::int32 value);

  // repeated .AttrKeyValue ResonanceAttr = 3;
  inline int resonanceattr_size() const;
  inline void clear_resonanceattr();
  static const int kResonanceAttrFieldNumber = 3;
  inline const ::AttrKeyValue& resonanceattr(int index) const;
  inline ::AttrKeyValue* mutable_resonanceattr(int index);
  inline ::AttrKeyValue* add_resonanceattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      resonanceattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_resonanceattr();

  // repeated .AttrKeyValue NewResonanceAttr = 4;
  inline int newresonanceattr_size() const;
  inline void clear_newresonanceattr();
  static const int kNewResonanceAttrFieldNumber = 4;
  inline const ::AttrKeyValue& newresonanceattr(int index) const;
  inline ::AttrKeyValue* mutable_newresonanceattr(int index);
  inline ::AttrKeyValue* add_newresonanceattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      newresonanceattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_newresonanceattr();

  // optional int32 BattleScore = 5 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 5;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // optional int32 NewBattleScore = 6 [default = -1];
  inline bool has_newbattlescore() const;
  inline void clear_newbattlescore();
  static const int kNewBattleScoreFieldNumber = 6;
  inline ::google::protobuf::int32 newbattlescore() const;
  inline void set_newbattlescore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipResonanceInfo)
 private:
  inline void set_has_confid();
  inline void clear_has_confid();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_newbattlescore();
  inline void clear_has_newbattlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > resonanceattr_;
  ::google::protobuf::int32 confid_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > newresonanceattr_;
  ::google::protobuf::int32 newbattlescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipResonanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipResonanceData : public ::google::protobuf::Message {
 public:
  EquipResonanceData();
  virtual ~EquipResonanceData();

  EquipResonanceData(const EquipResonanceData& from);

  inline EquipResonanceData& operator=(const EquipResonanceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipResonanceData& default_instance();

  void Swap(EquipResonanceData* other);

  // implements Message ----------------------------------------------

  EquipResonanceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipResonanceData& from);
  void MergeFrom(const EquipResonanceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EquipResonanceInfo ResonanceList = 1;
  inline int resonancelist_size() const;
  inline void clear_resonancelist();
  static const int kResonanceListFieldNumber = 1;
  inline const ::EquipResonanceInfo& resonancelist(int index) const;
  inline ::EquipResonanceInfo* mutable_resonancelist(int index);
  inline ::EquipResonanceInfo* add_resonancelist();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipResonanceInfo >&
      resonancelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipResonanceInfo >*
      mutable_resonancelist();

  // @@protoc_insertion_point(class_scope:EquipResonanceData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EquipResonanceInfo > resonancelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipResonanceData* default_instance_;
};
// -------------------------------------------------------------------

class EquipWashInfo : public ::google::protobuf::Message {
 public:
  EquipWashInfo();
  virtual ~EquipWashInfo();

  EquipWashInfo(const EquipWashInfo& from);

  inline EquipWashInfo& operator=(const EquipWashInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipWashInfo& default_instance();

  void Swap(EquipWashInfo* other);

  // implements Message ----------------------------------------------

  EquipWashInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipWashInfo& from);
  void MergeFrom(const EquipWashInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EquipGuid = 1 [default = 0];
  inline bool has_equipguid() const;
  inline void clear_equipguid();
  static const int kEquipGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 equipguid() const;
  inline void set_equipguid(::google::protobuf::uint64 value);

  // repeated .AttrKeyValue ExtraAttr = 2;
  inline int extraattr_size() const;
  inline void clear_extraattr();
  static const int kExtraAttrFieldNumber = 2;
  inline const ::AttrKeyValue& extraattr(int index) const;
  inline ::AttrKeyValue* mutable_extraattr(int index);
  inline ::AttrKeyValue* add_extraattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      extraattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_extraattr();

  // repeated int32 LockedIndex = 3;
  inline int lockedindex_size() const;
  inline void clear_lockedindex();
  static const int kLockedIndexFieldNumber = 3;
  inline ::google::protobuf::int32 lockedindex(int index) const;
  inline void set_lockedindex(int index, ::google::protobuf::int32 value);
  inline void add_lockedindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lockedindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lockedindex();

  // optional int32 BattleScore = 4 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 4;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipWashInfo)
 private:
  inline void set_has_equipguid();
  inline void clear_has_equipguid();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 equipguid_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > extraattr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lockedindex_;
  ::google::protobuf::int32 battlescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipWashInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipWashData : public ::google::protobuf::Message {
 public:
  EquipWashData();
  virtual ~EquipWashData();

  EquipWashData(const EquipWashData& from);

  inline EquipWashData& operator=(const EquipWashData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipWashData& default_instance();

  void Swap(EquipWashData* other);

  // implements Message ----------------------------------------------

  EquipWashData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipWashData& from);
  void MergeFrom(const EquipWashData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EquipWashInfo EquipWashInfoList = 1;
  inline int equipwashinfolist_size() const;
  inline void clear_equipwashinfolist();
  static const int kEquipWashInfoListFieldNumber = 1;
  inline const ::EquipWashInfo& equipwashinfolist(int index) const;
  inline ::EquipWashInfo* mutable_equipwashinfolist(int index);
  inline ::EquipWashInfo* add_equipwashinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipWashInfo >&
      equipwashinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipWashInfo >*
      mutable_equipwashinfolist();

  // optional int32 LeftTimes = 2 [default = -1];
  inline bool has_lefttimes() const;
  inline void clear_lefttimes();
  static const int kLeftTimesFieldNumber = 2;
  inline ::google::protobuf::int32 lefttimes() const;
  inline void set_lefttimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipWashData)
 private:
  inline void set_has_lefttimes();
  inline void clear_has_lefttimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EquipWashInfo > equipwashinfolist_;
  ::google::protobuf::int32 lefttimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipWashData* default_instance_;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  void Swap(Resource* other);

  // implements Message ----------------------------------------------

  Resource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 Value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int64 TodayValue = 3 [default = -1];
  inline bool has_todayvalue() const;
  inline void clear_todayvalue();
  static const int kTodayValueFieldNumber = 3;
  inline ::google::protobuf::int64 todayvalue() const;
  inline void set_todayvalue(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Resource)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_todayvalue();
  inline void clear_has_todayvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 todayvalue_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Resource* default_instance_;
};
// -------------------------------------------------------------------

class BuinessSkillData : public ::google::protobuf::Message {
 public:
  BuinessSkillData();
  virtual ~BuinessSkillData();

  BuinessSkillData(const BuinessSkillData& from);

  inline BuinessSkillData& operator=(const BuinessSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuinessSkillData& default_instance();

  void Swap(BuinessSkillData* other);

  // implements Message ----------------------------------------------

  BuinessSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuinessSkillData& from);
  void MergeFrom(const BuinessSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SkillID = 1 [default = -1];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 SkillLv = 2 [default = -1];
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 2;
  inline ::google::protobuf::int32 skilllv() const;
  inline void set_skilllv(::google::protobuf::int32 value);

  // optional int32 Locked = 3 [default = -1];
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 3;
  inline ::google::protobuf::int32 locked() const;
  inline void set_locked(::google::protobuf::int32 value);

  // optional int32 SkillExp = 4 [default = -1];
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 4;
  inline ::google::protobuf::int32 skillexp() const;
  inline void set_skillexp(::google::protobuf::int32 value);

  // optional int32 UseCount = 5 [default = -1];
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUseCountFieldNumber = 5;
  inline ::google::protobuf::int32 usecount() const;
  inline void set_usecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BuinessSkillData)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();
  inline void set_has_locked();
  inline void clear_has_locked();
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  inline void set_has_usecount();
  inline void clear_has_usecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 skilllv_;
  ::google::protobuf::int32 locked_;
  ::google::protobuf::int32 skillexp_;
  ::google::protobuf::int32 usecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static BuinessSkillData* default_instance_;
};
// -------------------------------------------------------------------

class BuinessUnlockInfo : public ::google::protobuf::Message {
 public:
  BuinessUnlockInfo();
  virtual ~BuinessUnlockInfo();

  BuinessUnlockInfo(const BuinessUnlockInfo& from);

  inline BuinessUnlockInfo& operator=(const BuinessUnlockInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuinessUnlockInfo& default_instance();

  void Swap(BuinessUnlockInfo* other);

  // implements Message ----------------------------------------------

  BuinessUnlockInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuinessUnlockInfo& from);
  void MergeFrom(const BuinessUnlockInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Mutual = 1 [default = -1];
  inline bool has_mutual() const;
  inline void clear_mutual();
  static const int kMutualFieldNumber = 1;
  inline ::google::protobuf::int32 mutual() const;
  inline void set_mutual(::google::protobuf::int32 value);

  // optional int64 EndTime = 2 [default = -1];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BuinessUnlockInfo)
 private:
  inline void set_has_mutual();
  inline void clear_has_mutual();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 mutual_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static BuinessUnlockInfo* default_instance_;
};
// -------------------------------------------------------------------

class CompletedQuestList : public ::google::protobuf::Message {
 public:
  CompletedQuestList();
  virtual ~CompletedQuestList();

  CompletedQuestList(const CompletedQuestList& from);

  inline CompletedQuestList& operator=(const CompletedQuestList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompletedQuestList& default_instance();

  void Swap(CompletedQuestList* other);

  // implements Message ----------------------------------------------

  CompletedQuestList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompletedQuestList& from);
  void MergeFrom(const CompletedQuestList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 IdList = 1;
  inline int idlist_size() const;
  inline void clear_idlist();
  static const int kIdListFieldNumber = 1;
  inline ::google::protobuf::int32 idlist(int index) const;
  inline void set_idlist(int index, ::google::protobuf::int32 value);
  inline void add_idlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      idlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_idlist();

  // repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
  inline int maxcompleteidlist_size() const;
  inline void clear_maxcompleteidlist();
  static const int kMaxCompleteIdListFieldNumber = 2;
  inline const ::MaxQuestCompleteId& maxcompleteidlist(int index) const;
  inline ::MaxQuestCompleteId* mutable_maxcompleteidlist(int index);
  inline ::MaxQuestCompleteId* add_maxcompleteidlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MaxQuestCompleteId >&
      maxcompleteidlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MaxQuestCompleteId >*
      mutable_maxcompleteidlist();

  // @@protoc_insertion_point(class_scope:CompletedQuestList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > idlist_;
  ::google::protobuf::RepeatedPtrField< ::MaxQuestCompleteId > maxcompleteidlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static CompletedQuestList* default_instance_;
};
// -------------------------------------------------------------------

class EliteMonsterInfo : public ::google::protobuf::Message {
 public:
  EliteMonsterInfo();
  virtual ~EliteMonsterInfo();

  EliteMonsterInfo(const EliteMonsterInfo& from);

  inline EliteMonsterInfo& operator=(const EliteMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteMonsterInfo& default_instance();

  void Swap(EliteMonsterInfo* other);

  // implements Message ----------------------------------------------

  EliteMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteMonsterInfo& from);
  void MergeFrom(const EliteMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FinishTime = 3 [default = -1];
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::int32 finishtime() const;
  inline void set_finishtime(::google::protobuf::int32 value);

  // optional int32 CommonId = 4 [default = -1];
  inline bool has_commonid() const;
  inline void clear_commonid();
  static const int kCommonIdFieldNumber = 4;
  inline ::google::protobuf::int32 commonid() const;
  inline void set_commonid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EliteMonsterInfo)
 private:
  inline void set_has_finishtime();
  inline void clear_has_finishtime();
  inline void set_has_commonid();
  inline void clear_has_commonid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 finishtime_;
  ::google::protobuf::int32 commonid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EliteMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class JewelSlot : public ::google::protobuf::Message {
 public:
  JewelSlot();
  virtual ~JewelSlot();

  JewelSlot(const JewelSlot& from);

  inline JewelSlot& operator=(const JewelSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelSlot& default_instance();

  void Swap(JewelSlot* other);

  // implements Message ----------------------------------------------

  JewelSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelSlot& from);
  void MergeFrom(const JewelSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional bool Unlocked = 2 [default = false];
  inline bool has_unlocked() const;
  inline void clear_unlocked();
  static const int kUnlockedFieldNumber = 2;
  inline bool unlocked() const;
  inline void set_unlocked(bool value);

  // @@protoc_insertion_point(class_scope:JewelSlot)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_unlocked();
  inline void clear_has_unlocked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  bool unlocked_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static JewelSlot* default_instance_;
};
// -------------------------------------------------------------------

class JewelInfo : public ::google::protobuf::Message {
 public:
  JewelInfo();
  virtual ~JewelInfo();

  JewelInfo(const JewelInfo& from);

  inline JewelInfo& operator=(const JewelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JewelInfo& default_instance();

  void Swap(JewelInfo* other);

  // implements Message ----------------------------------------------

  JewelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JewelInfo& from);
  void MergeFrom(const JewelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EquipSlot = 1 [default = -1];
  inline bool has_equipslot() const;
  inline void clear_equipslot();
  static const int kEquipSlotFieldNumber = 1;
  inline ::google::protobuf::int32 equipslot() const;
  inline void set_equipslot(::google::protobuf::int32 value);

  // repeated .JewelSlot JewelSlots = 2;
  inline int jewelslots_size() const;
  inline void clear_jewelslots();
  static const int kJewelSlotsFieldNumber = 2;
  inline const ::JewelSlot& jewelslots(int index) const;
  inline ::JewelSlot* mutable_jewelslots(int index);
  inline ::JewelSlot* add_jewelslots();
  inline const ::google::protobuf::RepeatedPtrField< ::JewelSlot >&
      jewelslots() const;
  inline ::google::protobuf::RepeatedPtrField< ::JewelSlot >*
      mutable_jewelslots();

  // @@protoc_insertion_point(class_scope:JewelInfo)
 private:
  inline void set_has_equipslot();
  inline void clear_has_equipslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::JewelSlot > jewelslots_;
  ::google::protobuf::int32 equipslot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static JewelInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipSlotInfo : public ::google::protobuf::Message {
 public:
  EquipSlotInfo();
  virtual ~EquipSlotInfo();

  EquipSlotInfo(const EquipSlotInfo& from);

  inline EquipSlotInfo& operator=(const EquipSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipSlotInfo& default_instance();

  void Swap(EquipSlotInfo* other);

  // implements Message ----------------------------------------------

  EquipSlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipSlotInfo& from);
  void MergeFrom(const EquipSlotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Enhance_Level = 1 [default = -1];
  inline bool has_enhance_level() const;
  inline void clear_enhance_level();
  static const int kEnhanceLevelFieldNumber = 1;
  inline ::google::protobuf::int32 enhance_level() const;
  inline void set_enhance_level(::google::protobuf::int32 value);

  // optional int32 Enhance_Exp = 2 [default = -1];
  inline bool has_enhance_exp() const;
  inline void clear_enhance_exp();
  static const int kEnhanceExpFieldNumber = 2;
  inline ::google::protobuf::int32 enhance_exp() const;
  inline void set_enhance_exp(::google::protobuf::int32 value);

  // repeated .AttrKeyValue Enhance_Attr = 3;
  inline int enhance_attr_size() const;
  inline void clear_enhance_attr();
  static const int kEnhanceAttrFieldNumber = 3;
  inline const ::AttrKeyValue& enhance_attr(int index) const;
  inline ::AttrKeyValue* mutable_enhance_attr(int index);
  inline ::AttrKeyValue* add_enhance_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      enhance_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_enhance_attr();

  // optional int32 BattleScore = 4 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 4;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // optional int32 Slot_Type = 5 [default = -1];
  inline bool has_slot_type() const;
  inline void clear_slot_type();
  static const int kSlotTypeFieldNumber = 5;
  inline ::google::protobuf::int32 slot_type() const;
  inline void set_slot_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipSlotInfo)
 private:
  inline void set_has_enhance_level();
  inline void clear_has_enhance_level();
  inline void set_has_enhance_exp();
  inline void clear_has_enhance_exp();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_slot_type();
  inline void clear_has_slot_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 enhance_level_;
  ::google::protobuf::int32 enhance_exp_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > enhance_attr_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::int32 slot_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipSlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorshipPlayerData : public ::google::protobuf::Message {
 public:
  WorshipPlayerData();
  virtual ~WorshipPlayerData();

  WorshipPlayerData(const WorshipPlayerData& from);

  inline WorshipPlayerData& operator=(const WorshipPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorshipPlayerData& default_instance();

  void Swap(WorshipPlayerData* other);

  // implements Message ----------------------------------------------

  WorshipPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorshipPlayerData& from);
  void MergeFrom(const WorshipPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Role_id = 1 [default = -1];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // optional string Role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional int32 Rank_level = 3 [default = -1];
  inline bool has_rank_level() const;
  inline void clear_rank_level();
  static const int kRankLevelFieldNumber = 3;
  inline ::google::protobuf::int32 rank_level() const;
  inline void set_rank_level(::google::protobuf::int32 value);

  // optional int32 Worship_cout = 4 [default = -1];
  inline bool has_worship_cout() const;
  inline void clear_worship_cout();
  static const int kWorshipCoutFieldNumber = 4;
  inline ::google::protobuf::int32 worship_cout() const;
  inline void set_worship_cout(::google::protobuf::int32 value);

  // optional int32 Rank = 5 [default = -1];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorshipPlayerData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_rank_level();
  inline void clear_has_rank_level();
  inline void set_has_worship_cout();
  inline void clear_has_worship_cout();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 rank_level_;
  ::google::protobuf::int32 worship_cout_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WorshipPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class RecoverMedicament : public ::google::protobuf::Message {
 public:
  RecoverMedicament();
  virtual ~RecoverMedicament();

  RecoverMedicament(const RecoverMedicament& from);

  inline RecoverMedicament& operator=(const RecoverMedicament& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverMedicament& default_instance();

  void Swap(RecoverMedicament* other);

  // implements Message ----------------------------------------------

  RecoverMedicament* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecoverMedicament& from);
  void MergeFrom(const RecoverMedicament& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 HpMedicamentList = 1;
  inline int hpmedicamentlist_size() const;
  inline void clear_hpmedicamentlist();
  static const int kHpMedicamentListFieldNumber = 1;
  inline ::google::protobuf::int32 hpmedicamentlist(int index) const;
  inline void set_hpmedicamentlist(int index, ::google::protobuf::int32 value);
  inline void add_hpmedicamentlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hpmedicamentlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hpmedicamentlist();

  // optional int32 AutoHpMedicament = 2 [default = -1];
  inline bool has_autohpmedicament() const;
  inline void clear_autohpmedicament();
  static const int kAutoHpMedicamentFieldNumber = 2;
  inline ::google::protobuf::int32 autohpmedicament() const;
  inline void set_autohpmedicament(::google::protobuf::int32 value);

  // optional int32 HpPercentage = 3 [default = -1];
  inline bool has_hppercentage() const;
  inline void clear_hppercentage();
  static const int kHpPercentageFieldNumber = 3;
  inline ::google::protobuf::int32 hppercentage() const;
  inline void set_hppercentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RecoverMedicament)
 private:
  inline void set_has_autohpmedicament();
  inline void clear_has_autohpmedicament();
  inline void set_has_hppercentage();
  inline void clear_has_hppercentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hpmedicamentlist_;
  ::google::protobuf::int32 autohpmedicament_;
  ::google::protobuf::int32 hppercentage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static RecoverMedicament* default_instance_;
};
// -------------------------------------------------------------------

class MailInfo : public ::google::protobuf::Message {
 public:
  MailInfo();
  virtual ~MailInfo();

  MailInfo(const MailInfo& from);

  inline MailInfo& operator=(const MailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailInfo& default_instance();

  void Swap(MailInfo* other);

  // implements Message ----------------------------------------------

  MailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailInfo& from);
  void MergeFrom(const MailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Mail_type = 1 [default = 0];
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 1;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);

  // optional int32 Mail_id = 2 [default = 0];
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // optional bool IsRead = 3 [default = false];
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 3;
  inline bool isread() const;
  inline void set_isread(bool value);

  // optional bool IsGet = 4 [default = false];
  inline bool has_isget() const;
  inline void clear_isget();
  static const int kIsGetFieldNumber = 4;
  inline bool isget() const;
  inline void set_isget(bool value);

  // optional string Title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string Salutation = 6;
  inline bool has_salutation() const;
  inline void clear_salutation();
  static const int kSalutationFieldNumber = 6;
  inline const ::std::string& salutation() const;
  inline void set_salutation(const ::std::string& value);
  inline void set_salutation(const char* value);
  inline void set_salutation(const char* value, size_t size);
  inline ::std::string* mutable_salutation();
  inline ::std::string* release_salutation();
  inline void set_allocated_salutation(::std::string* salutation);

  // optional string Content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string Sender_name = 8;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 8;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // repeated .MailItem ItemList = 9;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 9;
  inline const ::MailItem& itemlist(int index) const;
  inline ::MailItem* mutable_itemlist(int index);
  inline ::MailItem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MailItem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MailItem >*
      mutable_itemlist();

  // optional uint64 Sender_id = 10 [default = 0];
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 10;
  inline ::google::protobuf::uint64 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint64 value);

  // optional int32 Start_time = 11 [default = -1];
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 11;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // optional int32 Expire_time = 12 [default = -1];
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 12;
  inline ::google::protobuf::int32 expire_time() const;
  inline void set_expire_time(::google::protobuf::int32 value);

  // optional uint64 Receiver_id = 13 [default = 0];
  inline bool has_receiver_id() const;
  inline void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 13;
  inline ::google::protobuf::uint64 receiver_id() const;
  inline void set_receiver_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MailInfo)
 private:
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_isget();
  inline void clear_has_isget();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_salutation();
  inline void clear_has_salutation();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mail_type_;
  ::google::protobuf::int32 mail_id_;
  ::std::string* title_;
  ::std::string* salutation_;
  bool isread_;
  bool isget_;
  ::google::protobuf::int32 start_time_;
  ::std::string* content_;
  ::std::string* sender_name_;
  ::google::protobuf::RepeatedPtrField< ::MailItem > itemlist_;
  ::google::protobuf::uint64 sender_id_;
  ::google::protobuf::uint64 receiver_id_;
  ::google::protobuf::int32 expire_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MailInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipSlotStarInfo : public ::google::protobuf::Message {
 public:
  EquipSlotStarInfo();
  virtual ~EquipSlotStarInfo();

  EquipSlotStarInfo(const EquipSlotStarInfo& from);

  inline EquipSlotStarInfo& operator=(const EquipSlotStarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipSlotStarInfo& default_instance();

  void Swap(EquipSlotStarInfo* other);

  // implements Message ----------------------------------------------

  EquipSlotStarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipSlotStarInfo& from);
  void MergeFrom(const EquipSlotStarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RankUp_Level = 1 [default = -1];
  inline bool has_rankup_level() const;
  inline void clear_rankup_level();
  static const int kRankUpLevelFieldNumber = 1;
  inline ::google::protobuf::int32 rankup_level() const;
  inline void set_rankup_level(::google::protobuf::int32 value);

  // optional int32 Slot_Type = 3 [default = -1];
  inline bool has_slot_type() const;
  inline void clear_slot_type();
  static const int kSlotTypeFieldNumber = 3;
  inline ::google::protobuf::int32 slot_type() const;
  inline void set_slot_type(::google::protobuf::int32 value);

  // optional int32 BattleScore = 4 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 4;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // optional int32 NextBattleScore = 6 [default = -1];
  inline bool has_nextbattlescore() const;
  inline void clear_nextbattlescore();
  static const int kNextBattleScoreFieldNumber = 6;
  inline ::google::protobuf::int32 nextbattlescore() const;
  inline void set_nextbattlescore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipSlotStarInfo)
 private:
  inline void set_has_rankup_level();
  inline void clear_has_rankup_level();
  inline void set_has_slot_type();
  inline void clear_has_slot_type();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_nextbattlescore();
  inline void clear_has_nextbattlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rankup_level_;
  ::google::protobuf::int32 slot_type_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::int32 nextbattlescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipSlotStarInfo* default_instance_;
};
// -------------------------------------------------------------------

class DropItem : public ::google::protobuf::Message {
 public:
  DropItem();
  virtual ~DropItem();

  DropItem(const DropItem& from);

  inline DropItem& operator=(const DropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropItem& default_instance();

  void Swap(DropItem* other);

  // implements Message ----------------------------------------------

  DropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropItem& from);
  void MergeFrom(const DropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemType = 1 [default = -1];
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 1;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);

  // optional int32 ItemID = 2 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 ItemNum = 3 [default = -1];
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // optional bool Bind = 4 [default = false];
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 4;
  inline bool bind() const;
  inline void set_bind(bool value);

  // optional bool Transit = 5 [default = false];
  inline bool has_transit() const;
  inline void clear_transit();
  static const int kTransitFieldNumber = 5;
  inline bool transit() const;
  inline void set_transit(bool value);

  // @@protoc_insertion_point(class_scope:DropItem)
 private:
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_transit();
  inline void clear_has_transit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  bool bind_;
  bool transit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DropItem* default_instance_;
};
// -------------------------------------------------------------------

class PetData : public ::google::protobuf::Message {
 public:
  PetData();
  virtual ~PetData();

  PetData(const PetData& from);

  inline PetData& operator=(const PetData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetData& default_instance();

  void Swap(PetData* other);

  // implements Message ----------------------------------------------

  PetData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetData& from);
  void MergeFrom(const PetData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Exp = 1 [default = -1];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 Level = 2 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .AttrKeyValue Attrs = 5;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  inline const ::AttrKeyValue& attrs(int index) const;
  inline ::AttrKeyValue* mutable_attrs(int index);
  inline ::AttrKeyValue* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_attrs();

  // optional int32 BattleScore = 6 [default = -1];
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 6;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // repeated .AttrKeyValue Talent = 7;
  inline int talent_size() const;
  inline void clear_talent();
  static const int kTalentFieldNumber = 7;
  inline const ::AttrKeyValue& talent(int index) const;
  inline ::AttrKeyValue* mutable_talent(int index);
  inline ::AttrKeyValue* add_talent();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      talent() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_talent();

  // repeated .PetSkill SkillList = 8;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 8;
  inline const ::PetSkill& skilllist(int index) const;
  inline ::PetSkill* mutable_skilllist(int index);
  inline ::PetSkill* add_skilllist();
  inline const ::google::protobuf::RepeatedPtrField< ::PetSkill >&
      skilllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PetSkill >*
      mutable_skilllist();

  // optional bool IsActive = 9 [default = false];
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 9;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional int32 TalentScore = 10 [default = -1];
  inline bool has_talentscore() const;
  inline void clear_talentscore();
  static const int kTalentScoreFieldNumber = 10;
  inline ::google::protobuf::int32 talentscore() const;
  inline void set_talentscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetData)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_talentscore();
  inline void clear_has_talentscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > attrs_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > talent_;
  ::google::protobuf::int32 battlescore_;
  bool isactive_;
  ::google::protobuf::RepeatedPtrField< ::PetSkill > skilllist_;
  ::google::protobuf::int32 talentscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PetData* default_instance_;
};
// -------------------------------------------------------------------

class EquipBuildAtf : public ::google::protobuf::Message {
 public:
  EquipBuildAtf();
  virtual ~EquipBuildAtf();

  EquipBuildAtf(const EquipBuildAtf& from);

  inline EquipBuildAtf& operator=(const EquipBuildAtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipBuildAtf& default_instance();

  void Swap(EquipBuildAtf* other);

  // implements Message ----------------------------------------------

  EquipBuildAtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipBuildAtf& from);
  void MergeFrom(const EquipBuildAtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Level = 1 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Atf_value = 2 [default = -1];
  inline bool has_atf_value() const;
  inline void clear_atf_value();
  static const int kAtfValueFieldNumber = 2;
  inline ::google::protobuf::int32 atf_value() const;
  inline void set_atf_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipBuildAtf)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_atf_value();
  inline void clear_has_atf_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 atf_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static EquipBuildAtf* default_instance_;
};
// -------------------------------------------------------------------

class TreasureData : public ::google::protobuf::Message {
 public:
  TreasureData();
  virtual ~TreasureData();

  TreasureData(const TreasureData& from);

  inline TreasureData& operator=(const TreasureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureData& default_instance();

  void Swap(TreasureData* other);

  // implements Message ----------------------------------------------

  TreasureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureData& from);
  void MergeFrom(const TreasureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .TreasureExtraInfo Extra_Info = 2;
  inline int extra_info_size() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 2;
  inline const ::TreasureExtraInfo& extra_info(int index) const;
  inline ::TreasureExtraInfo* mutable_extra_info(int index);
  inline ::TreasureExtraInfo* add_extra_info();
  inline const ::google::protobuf::RepeatedPtrField< ::TreasureExtraInfo >&
      extra_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::TreasureExtraInfo >*
      mutable_extra_info();

  // @@protoc_insertion_point(class_scope:TreasureData)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TreasureExtraInfo > extra_info_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TreasureData* default_instance_;
};
// -------------------------------------------------------------------

class TreasureExtraInfo : public ::google::protobuf::Message {
 public:
  TreasureExtraInfo();
  virtual ~TreasureExtraInfo();

  TreasureExtraInfo(const TreasureExtraInfo& from);

  inline TreasureExtraInfo& operator=(const TreasureExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureExtraInfo& default_instance();

  void Swap(TreasureExtraInfo* other);

  // implements Message ----------------------------------------------

  TreasureExtraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureExtraInfo& from);
  void MergeFrom(const TreasureExtraInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Color_Type = 1 [default = -1];
  inline bool has_color_type() const;
  inline void clear_color_type();
  static const int kColorTypeFieldNumber = 1;
  inline ::google::protobuf::int32 color_type() const;
  inline void set_color_type(::google::protobuf::int32 value);

  // optional int32 Time_Type = 2 [default = -1];
  inline bool has_time_type() const;
  inline void clear_time_type();
  static const int kTimeTypeFieldNumber = 2;
  inline ::google::protobuf::int32 time_type() const;
  inline void set_time_type(::google::protobuf::int32 value);

  // optional int32 State = 3 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int64 Expier_Time = 4 [default = -1];
  inline bool has_expier_time() const;
  inline void clear_expier_time();
  static const int kExpierTimeFieldNumber = 4;
  inline ::google::protobuf::int64 expier_time() const;
  inline void set_expier_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TreasureExtraInfo)
 private:
  inline void set_has_color_type();
  inline void clear_has_color_type();
  inline void set_has_time_type();
  inline void clear_has_time_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_expier_time();
  inline void clear_has_expier_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 color_type_;
  ::google::protobuf::int32 time_type_;
  ::google::protobuf::int64 expier_time_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TreasureExtraInfo* default_instance_;
};
// -------------------------------------------------------------------

class TreasureDepotData : public ::google::protobuf::Message {
 public:
  TreasureDepotData();
  virtual ~TreasureDepotData();

  TreasureDepotData(const TreasureDepotData& from);

  inline TreasureDepotData& operator=(const TreasureDepotData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureDepotData& default_instance();

  void Swap(TreasureDepotData* other);

  // implements Message ----------------------------------------------

  TreasureDepotData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureDepotData& from);
  void MergeFrom(const TreasureDepotData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Level = 1 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Point = 2 [default = 0];
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // repeated .TreasureData Treasure_Data = 3;
  inline int treasure_data_size() const;
  inline void clear_treasure_data();
  static const int kTreasureDataFieldNumber = 3;
  inline const ::TreasureData& treasure_data(int index) const;
  inline ::TreasureData* mutable_treasure_data(int index);
  inline ::TreasureData* add_treasure_data();
  inline const ::google::protobuf::RepeatedPtrField< ::TreasureData >&
      treasure_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::TreasureData >*
      mutable_treasure_data();

  // @@protoc_insertion_point(class_scope:TreasureDepotData)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::RepeatedPtrField< ::TreasureData > treasure_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TreasureDepotData* default_instance_;
};
// -------------------------------------------------------------------

class ShopItem : public ::google::protobuf::Message {
 public:
  ShopItem();
  virtual ~ShopItem();

  ShopItem(const ShopItem& from);

  inline ShopItem& operator=(const ShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopItem& default_instance();

  void Swap(ShopItem* other);

  // implements Message ----------------------------------------------

  ShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopItem& from);
  void MergeFrom(const ShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ShopItemID = 1 [default = -1];
  inline bool has_shopitemid() const;
  inline void clear_shopitemid();
  static const int kShopItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 shopitemid() const;
  inline void set_shopitemid(::google::protobuf::int32 value);

  // optional int32 TotalBuyCount = 2 [default = -1];
  inline bool has_totalbuycount() const;
  inline void clear_totalbuycount();
  static const int kTotalBuyCountFieldNumber = 2;
  inline ::google::protobuf::int32 totalbuycount() const;
  inline void set_totalbuycount(::google::protobuf::int32 value);

  // optional int32 BuyCount = 3 [default = -1];
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 3;
  inline ::google::protobuf::int32 buycount() const;
  inline void set_buycount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ShopItem)
 private:
  inline void set_has_shopitemid();
  inline void clear_has_shopitemid();
  inline void set_has_totalbuycount();
  inline void clear_has_totalbuycount();
  inline void set_has_buycount();
  inline void clear_has_buycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shopitemid_;
  ::google::protobuf::int32 totalbuycount_;
  ::google::protobuf::int32 buycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ShopItem* default_instance_;
};
// -------------------------------------------------------------------

class RandomQuestData : public ::google::protobuf::Message {
 public:
  RandomQuestData();
  virtual ~RandomQuestData();

  RandomQuestData(const RandomQuestData& from);

  inline RandomQuestData& operator=(const RandomQuestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomQuestData& default_instance();

  void Swap(RandomQuestData* other);

  // implements Message ----------------------------------------------

  RandomQuestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomQuestData& from);
  void MergeFrom(const RandomQuestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 QuestType = 1 [default = -1];
  inline bool has_questtype() const;
  inline void clear_questtype();
  static const int kQuestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 questtype() const;
  inline void set_questtype(::google::protobuf::int32 value);

  // repeated int32 QuestIdList = 2;
  inline int questidlist_size() const;
  inline void clear_questidlist();
  static const int kQuestIdListFieldNumber = 2;
  inline ::google::protobuf::int32 questidlist(int index) const;
  inline void set_questidlist(int index, ::google::protobuf::int32 value);
  inline void add_questidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      questidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_questidlist();

  // optional int32 DayPorgress = 6 [default = -1];
  inline bool has_dayporgress() const;
  inline void clear_dayporgress();
  static const int kDayPorgressFieldNumber = 6;
  inline ::google::protobuf::int32 dayporgress() const;
  inline void set_dayporgress(::google::protobuf::int32 value);

  // optional int64 LastCompleteTime = 7 [default = -1];
  inline bool has_lastcompletetime() const;
  inline void clear_lastcompletetime();
  static const int kLastCompleteTimeFieldNumber = 7;
  inline ::google::protobuf::int64 lastcompletetime() const;
  inline void set_lastcompletetime(::google::protobuf::int64 value);

  // repeated int32 RandomListQuestId = 8;
  inline int randomlistquestid_size() const;
  inline void clear_randomlistquestid();
  static const int kRandomListQuestIdFieldNumber = 8;
  inline ::google::protobuf::int32 randomlistquestid(int index) const;
  inline void set_randomlistquestid(int index, ::google::protobuf::int32 value);
  inline void add_randomlistquestid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      randomlistquestid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_randomlistquestid();

  // @@protoc_insertion_point(class_scope:RandomQuestData)
 private:
  inline void set_has_questtype();
  inline void clear_has_questtype();
  inline void set_has_dayporgress();
  inline void clear_has_dayporgress();
  inline void set_has_lastcompletetime();
  inline void clear_has_lastcompletetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > questidlist_;
  ::google::protobuf::int32 questtype_;
  ::google::protobuf::int32 dayporgress_;
  ::google::protobuf::int64 lastcompletetime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > randomlistquestid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static RandomQuestData* default_instance_;
};
// -------------------------------------------------------------------

class RandomQuestListData : public ::google::protobuf::Message {
 public:
  RandomQuestListData();
  virtual ~RandomQuestListData();

  RandomQuestListData(const RandomQuestListData& from);

  inline RandomQuestListData& operator=(const RandomQuestListData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomQuestListData& default_instance();

  void Swap(RandomQuestListData* other);

  // implements Message ----------------------------------------------

  RandomQuestListData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomQuestListData& from);
  void MergeFrom(const RandomQuestListData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RandomQuestData QuestList = 1;
  inline int questlist_size() const;
  inline void clear_questlist();
  static const int kQuestListFieldNumber = 1;
  inline const ::RandomQuestData& questlist(int index) const;
  inline ::RandomQuestData* mutable_questlist(int index);
  inline ::RandomQuestData* add_questlist();
  inline const ::google::protobuf::RepeatedPtrField< ::RandomQuestData >&
      questlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::RandomQuestData >*
      mutable_questlist();

  // @@protoc_insertion_point(class_scope:RandomQuestListData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RandomQuestData > questlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static RandomQuestListData* default_instance_;
};
// -------------------------------------------------------------------

class PvpBattleInfo : public ::google::protobuf::Message {
 public:
  PvpBattleInfo();
  virtual ~PvpBattleInfo();

  PvpBattleInfo(const PvpBattleInfo& from);

  inline PvpBattleInfo& operator=(const PvpBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpBattleInfo& default_instance();

  void Swap(PvpBattleInfo* other);

  // implements Message ----------------------------------------------

  PvpBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpBattleInfo& from);
  void MergeFrom(const PvpBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 WinCount = 1 [default = -1];
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWinCountFieldNumber = 1;
  inline ::google::protobuf::int32 wincount() const;
  inline void set_wincount(::google::protobuf::int32 value);

  // optional int32 LoseCount = 2 [default = -1];
  inline bool has_losecount() const;
  inline void clear_losecount();
  static const int kLoseCountFieldNumber = 2;
  inline ::google::protobuf::int32 losecount() const;
  inline void set_losecount(::google::protobuf::int32 value);

  // optional int32 DrawCount = 3 [default = -1];
  inline bool has_drawcount() const;
  inline void clear_drawcount();
  static const int kDrawCountFieldNumber = 3;
  inline ::google::protobuf::int32 drawcount() const;
  inline void set_drawcount(::google::protobuf::int32 value);

  // optional int32 ContinuityWinCount = 4 [default = -1];
  inline bool has_continuitywincount() const;
  inline void clear_continuitywincount();
  static const int kContinuityWinCountFieldNumber = 4;
  inline ::google::protobuf::int32 continuitywincount() const;
  inline void set_continuitywincount(::google::protobuf::int32 value);

  // optional int32 Rank = 5 [default = -1];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 Star = 6 [default = -1];
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 6;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 Elo = 7 [default = -1];
  inline bool has_elo() const;
  inline void clear_elo();
  static const int kEloFieldNumber = 7;
  inline ::google::protobuf::int32 elo() const;
  inline void set_elo(::google::protobuf::int32 value);

  // optional int32 BattleCount = 8 [default = -1];
  inline bool has_battlecount() const;
  inline void clear_battlecount();
  static const int kBattleCountFieldNumber = 8;
  inline ::google::protobuf::int32 battlecount() const;
  inline void set_battlecount(::google::protobuf::int32 value);

  // repeated int32 RewardList = 9;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 9;
  inline ::google::protobuf::int32 rewardlist(int index) const;
  inline void set_rewardlist(int index, ::google::protobuf::int32 value);
  inline void add_rewardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardlist();

  // optional int32 HistoryRank = 10 [default = -1];
  inline bool has_historyrank() const;
  inline void clear_historyrank();
  static const int kHistoryRankFieldNumber = 10;
  inline ::google::protobuf::int32 historyrank() const;
  inline void set_historyrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpBattleInfo)
 private:
  inline void set_has_wincount();
  inline void clear_has_wincount();
  inline void set_has_losecount();
  inline void clear_has_losecount();
  inline void set_has_drawcount();
  inline void clear_has_drawcount();
  inline void set_has_continuitywincount();
  inline void clear_has_continuitywincount();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_elo();
  inline void clear_has_elo();
  inline void set_has_battlecount();
  inline void clear_has_battlecount();
  inline void set_has_historyrank();
  inline void clear_has_historyrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wincount_;
  ::google::protobuf::int32 losecount_;
  ::google::protobuf::int32 drawcount_;
  ::google::protobuf::int32 continuitywincount_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 elo_;
  ::google::protobuf::int32 battlecount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardlist_;
  ::google::protobuf::int32 historyrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpPlayerInfo : public ::google::protobuf::Message {
 public:
  PvpPlayerInfo();
  virtual ~PvpPlayerInfo();

  PvpPlayerInfo(const PvpPlayerInfo& from);

  inline PvpPlayerInfo& operator=(const PvpPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpPlayerInfo& default_instance();

  void Swap(PvpPlayerInfo* other);

  // implements Message ----------------------------------------------

  PvpPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpPlayerInfo& from);
  void MergeFrom(const PvpPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleID = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string RoleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 Level = 3 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Rank = 5 [default = -1];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional .PvpBattleInfo PvpInfo = 6;
  inline bool has_pvpinfo() const;
  inline void clear_pvpinfo();
  static const int kPvpInfoFieldNumber = 6;
  inline const ::PvpBattleInfo& pvpinfo() const;
  inline ::PvpBattleInfo* mutable_pvpinfo();
  inline ::PvpBattleInfo* release_pvpinfo();
  inline void set_allocated_pvpinfo(::PvpBattleInfo* pvpinfo);

  // optional string GuildName = 7;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 7;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional int32 ConfigID = 8 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 8;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpPlayerInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_pvpinfo();
  inline void clear_has_pvpinfo();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rank_;
  ::PvpBattleInfo* pvpinfo_;
  ::std::string* guildname_;
  ::google::protobuf::int32 configid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpPlayerState : public ::google::protobuf::Message {
 public:
  PvpPlayerState();
  virtual ~PvpPlayerState();

  PvpPlayerState(const PvpPlayerState& from);

  inline PvpPlayerState& operator=(const PvpPlayerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpPlayerState& default_instance();

  void Swap(PvpPlayerState* other);

  // implements Message ----------------------------------------------

  PvpPlayerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpPlayerState& from);
  void MergeFrom(const PvpPlayerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleID = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 State = 2 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpPlayerState)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpPlayerState* default_instance_;
};
// -------------------------------------------------------------------

class PvpEndPlayer : public ::google::protobuf::Message {
 public:
  PvpEndPlayer();
  virtual ~PvpEndPlayer();

  PvpEndPlayer(const PvpEndPlayer& from);

  inline PvpEndPlayer& operator=(const PvpEndPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpEndPlayer& default_instance();

  void Swap(PvpEndPlayer* other);

  // implements Message ----------------------------------------------

  PvpEndPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpEndPlayer& from);
  void MergeFrom(const PvpEndPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleID = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string RoleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 DeadCount = 3 [default = -1];
  inline bool has_deadcount() const;
  inline void clear_deadcount();
  static const int kDeadCountFieldNumber = 3;
  inline ::google::protobuf::int32 deadcount() const;
  inline void set_deadcount(::google::protobuf::int32 value);

  // optional int32 KillCount = 4 [default = -1];
  inline bool has_killcount() const;
  inline void clear_killcount();
  static const int kKillCountFieldNumber = 4;
  inline ::google::protobuf::int32 killcount() const;
  inline void set_killcount(::google::protobuf::int32 value);

  // optional int32 LiveCount = 5 [default = -1];
  inline bool has_livecount() const;
  inline void clear_livecount();
  static const int kLiveCountFieldNumber = 5;
  inline ::google::protobuf::int32 livecount() const;
  inline void set_livecount(::google::protobuf::int32 value);

  // optional int32 ConfigId = 6 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 6;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 DamageCount = 7 [default = -1];
  inline bool has_damagecount() const;
  inline void clear_damagecount();
  static const int kDamageCountFieldNumber = 7;
  inline ::google::protobuf::int32 damagecount() const;
  inline void set_damagecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpEndPlayer)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_deadcount();
  inline void clear_has_deadcount();
  inline void set_has_killcount();
  inline void clear_has_killcount();
  inline void set_has_livecount();
  inline void clear_has_livecount();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_damagecount();
  inline void clear_has_damagecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 deadcount_;
  ::google::protobuf::int32 killcount_;
  ::google::protobuf::int32 livecount_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 damagecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpEndPlayer* default_instance_;
};
// -------------------------------------------------------------------

class DailyQuest : public ::google::protobuf::Message {
 public:
  DailyQuest();
  virtual ~DailyQuest();

  DailyQuest(const DailyQuest& from);

  inline DailyQuest& operator=(const DailyQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyQuest& default_instance();

  void Swap(DailyQuest* other);

  // implements Message ----------------------------------------------

  DailyQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyQuest& from);
  void MergeFrom(const DailyQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QuestData MainQuest = 1;
  inline bool has_mainquest() const;
  inline void clear_mainquest();
  static const int kMainQuestFieldNumber = 1;
  inline const ::QuestData& mainquest() const;
  inline ::QuestData* mutable_mainquest();
  inline ::QuestData* release_mainquest();
  inline void set_allocated_mainquest(::QuestData* mainquest);

  // optional .QuestData AtivityQuest = 2;
  inline bool has_ativityquest() const;
  inline void clear_ativityquest();
  static const int kAtivityQuestFieldNumber = 2;
  inline const ::QuestData& ativityquest() const;
  inline ::QuestData* mutable_ativityquest();
  inline ::QuestData* release_ativityquest();
  inline void set_allocated_ativityquest(::QuestData* ativityquest);

  // optional int32 RewardTimes = 3 [default = -1];
  inline bool has_rewardtimes() const;
  inline void clear_rewardtimes();
  static const int kRewardTimesFieldNumber = 3;
  inline ::google::protobuf::int32 rewardtimes() const;
  inline void set_rewardtimes(::google::protobuf::int32 value);

  // optional int32 ActivityId = 4 [default = -1];
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 4;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DailyQuest)
 private:
  inline void set_has_mainquest();
  inline void clear_has_mainquest();
  inline void set_has_ativityquest();
  inline void clear_has_ativityquest();
  inline void set_has_rewardtimes();
  inline void clear_has_rewardtimes();
  inline void set_has_activityid();
  inline void clear_has_activityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::QuestData* mainquest_;
  ::QuestData* ativityquest_;
  ::google::protobuf::int32 rewardtimes_;
  ::google::protobuf::int32 activityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DailyQuest* default_instance_;
};
// -------------------------------------------------------------------

class DailyQuestList : public ::google::protobuf::Message {
 public:
  DailyQuestList();
  virtual ~DailyQuestList();

  DailyQuestList(const DailyQuestList& from);

  inline DailyQuestList& operator=(const DailyQuestList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyQuestList& default_instance();

  void Swap(DailyQuestList* other);

  // implements Message ----------------------------------------------

  DailyQuestList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyQuestList& from);
  void MergeFrom(const DailyQuestList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DailyQuest DailyQuestList = 1;
  inline int dailyquestlist_size() const;
  inline void clear_dailyquestlist();
  static const int kDailyQuestListFieldNumber = 1;
  inline const ::DailyQuest& dailyquestlist(int index) const;
  inline ::DailyQuest* mutable_dailyquestlist(int index);
  inline ::DailyQuest* add_dailyquestlist();
  inline const ::google::protobuf::RepeatedPtrField< ::DailyQuest >&
      dailyquestlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DailyQuest >*
      mutable_dailyquestlist();

  // @@protoc_insertion_point(class_scope:DailyQuestList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DailyQuest > dailyquestlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DailyQuestList* default_instance_;
};
// -------------------------------------------------------------------

class DungeonSituationData : public ::google::protobuf::Message {
 public:
  DungeonSituationData();
  virtual ~DungeonSituationData();

  DungeonSituationData(const DungeonSituationData& from);

  inline DungeonSituationData& operator=(const DungeonSituationData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonSituationData& default_instance();

  void Swap(DungeonSituationData* other);

  // implements Message ----------------------------------------------

  DungeonSituationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonSituationData& from);
  void MergeFrom(const DungeonSituationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Name = 1 [default = -1];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::google::protobuf::int32 name() const;
  inline void set_name(::google::protobuf::int32 value);

  // repeated int32 PlayerData = 2;
  inline int playerdata_size() const;
  inline void clear_playerdata();
  static const int kPlayerDataFieldNumber = 2;
  inline ::google::protobuf::int32 playerdata(int index) const;
  inline void set_playerdata(int index, ::google::protobuf::int32 value);
  inline void add_playerdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerdata();

  // @@protoc_insertion_point(class_scope:DungeonSituationData)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerdata_;
  ::google::protobuf::int32 name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DungeonSituationData* default_instance_;
};
// -------------------------------------------------------------------

class DungeonData : public ::google::protobuf::Message {
 public:
  DungeonData();
  virtual ~DungeonData();

  DungeonData(const DungeonData& from);

  inline DungeonData& operator=(const DungeonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonData& default_instance();

  void Swap(DungeonData* other);

  // implements Message ----------------------------------------------

  DungeonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonData& from);
  void MergeFrom(const DungeonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DungeonSituationData Data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DungeonSituationData& data(int index) const;
  inline ::DungeonSituationData* mutable_data(int index);
  inline ::DungeonSituationData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::DungeonSituationData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::DungeonSituationData >*
      mutable_data();

  // optional int64 DurationMentTime = 2 [default = -1];
  inline bool has_durationmenttime() const;
  inline void clear_durationmenttime();
  static const int kDurationMentTimeFieldNumber = 2;
  inline ::google::protobuf::int64 durationmenttime() const;
  inline void set_durationmenttime(::google::protobuf::int64 value);

  // optional int64 ConclusionTime = 3 [default = -1];
  inline bool has_conclusiontime() const;
  inline void clear_conclusiontime();
  static const int kConclusionTimeFieldNumber = 3;
  inline ::google::protobuf::int64 conclusiontime() const;
  inline void set_conclusiontime(::google::protobuf::int64 value);

  // optional int32 PrepareTime = 4 [default = -1];
  inline bool has_preparetime() const;
  inline void clear_preparetime();
  static const int kPrepareTimeFieldNumber = 4;
  inline ::google::protobuf::int32 preparetime() const;
  inline void set_preparetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DungeonData)
 private:
  inline void set_has_durationmenttime();
  inline void clear_has_durationmenttime();
  inline void set_has_conclusiontime();
  inline void clear_has_conclusiontime();
  inline void set_has_preparetime();
  inline void clear_has_preparetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DungeonSituationData > data_;
  ::google::protobuf::int64 durationmenttime_;
  ::google::protobuf::int64 conclusiontime_;
  ::google::protobuf::int32 preparetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DungeonData* default_instance_;
};
// -------------------------------------------------------------------

class TeamTarget : public ::google::protobuf::Message {
 public:
  TeamTarget();
  virtual ~TeamTarget();

  TeamTarget(const TeamTarget& from);

  inline TeamTarget& operator=(const TeamTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamTarget& default_instance();

  void Swap(TeamTarget* other);

  // implements Message ----------------------------------------------

  TeamTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamTarget& from);
  void MergeFrom(const TeamTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 MinLevel = 2 [default = 0];
  inline bool has_minlevel() const;
  inline void clear_minlevel();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 minlevel() const;
  inline void set_minlevel(::google::protobuf::int32 value);

  // optional int32 MaxLevel = 3 [default = 0];
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // repeated int32 Function = 4;
  inline int function_size() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 4;
  inline ::google::protobuf::int32 function(int index) const;
  inline void set_function(int index, ::google::protobuf::int32 value);
  inline void add_function(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      function() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_function();

  // optional int32 TargetType = 5 [default = 0];
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 5;
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamTarget)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_minlevel();
  inline void clear_has_minlevel();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_targettype();
  inline void clear_has_targettype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 minlevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > function_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 targettype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TeamTarget* default_instance_;
};
// -------------------------------------------------------------------

class BuffInfo : public ::google::protobuf::Message {
 public:
  BuffInfo();
  virtual ~BuffInfo();

  BuffInfo(const BuffInfo& from);

  inline BuffInfo& operator=(const BuffInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffInfo& default_instance();

  void Swap(BuffInfo* other);

  // implements Message ----------------------------------------------

  BuffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffInfo& from);
  void MergeFrom(const BuffInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ObjId = 5 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 5;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional int32 CasterId = 6 [default = -1];
  inline bool has_casterid() const;
  inline void clear_casterid();
  static const int kCasterIdFieldNumber = 6;
  inline ::google::protobuf::int32 casterid() const;
  inline void set_casterid(::google::protobuf::int32 value);

  // optional int32 OpType = 7 [default = -1];
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 7;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 BufId = 8 [default = -1];
  inline bool has_bufid() const;
  inline void clear_bufid();
  static const int kBufIdFieldNumber = 8;
  inline ::google::protobuf::int32 bufid() const;
  inline void set_bufid(::google::protobuf::int32 value);

  // optional int32 RemainTime = 9 [default = -1];
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 9;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // optional int32 BuffLv = 10 [default = -1];
  inline bool has_bufflv() const;
  inline void clear_bufflv();
  static const int kBuffLvFieldNumber = 10;
  inline ::google::protobuf::int32 bufflv() const;
  inline void set_bufflv(::google::protobuf::int32 value);

  // optional int32 Sn = 11 [default = -1];
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 11;
  inline ::google::protobuf::int32 sn() const;
  inline void set_sn(::google::protobuf::int32 value);

  // optional int32 LayerCount = 12 [default = 0];
  inline bool has_layercount() const;
  inline void clear_layercount();
  static const int kLayerCountFieldNumber = 12;
  inline ::google::protobuf::int32 layercount() const;
  inline void set_layercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BuffInfo)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_casterid();
  inline void clear_has_casterid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_bufid();
  inline void clear_has_bufid();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_bufflv();
  inline void clear_has_bufflv();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_layercount();
  inline void clear_has_layercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 casterid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 bufid_;
  ::google::protobuf::int32 remaintime_;
  ::google::protobuf::int32 bufflv_;
  ::google::protobuf::int32 sn_;
  ::google::protobuf::int32 layercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static BuffInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchInfo : public ::google::protobuf::Message {
 public:
  MatchInfo();
  virtual ~MatchInfo();

  MatchInfo(const MatchInfo& from);

  inline MatchInfo& operator=(const MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchInfo& default_instance();

  void Swap(MatchInfo* other);

  // implements Message ----------------------------------------------

  MatchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchInfo& from);
  void MergeFrom(const MatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional int32 Level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 ConfigId = 3 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 ProfessionId = 4 [default = -1];
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 4;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Ready = 6 [default = -1];
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 6;
  inline ::google::protobuf::int32 ready() const;
  inline void set_ready(::google::protobuf::int32 value);

  // optional int32 Camp = 7 [default = 0];
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 7;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int32 Integral = 12 [default = 0];
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 12;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 Section = 13 [default = 0];
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 13;
  inline ::google::protobuf::int32 section() const;
  inline void set_section(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_section();
  inline void clear_has_section();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 configid_;
  ::std::string* name_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 section_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class TreasureEquipedID : public ::google::protobuf::Message {
 public:
  TreasureEquipedID();
  virtual ~TreasureEquipedID();

  TreasureEquipedID(const TreasureEquipedID& from);

  inline TreasureEquipedID& operator=(const TreasureEquipedID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureEquipedID& default_instance();

  void Swap(TreasureEquipedID* other);

  // implements Message ----------------------------------------------

  TreasureEquipedID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureEquipedID& from);
  void MergeFrom(const TreasureEquipedID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TreasureHair = 1 [default = -1];
  inline bool has_treasurehair() const;
  inline void clear_treasurehair();
  static const int kTreasureHairFieldNumber = 1;
  inline ::google::protobuf::int32 treasurehair() const;
  inline void set_treasurehair(::google::protobuf::int32 value);

  // optional int32 TreasureHead = 2 [default = -1];
  inline bool has_treasurehead() const;
  inline void clear_treasurehead();
  static const int kTreasureHeadFieldNumber = 2;
  inline ::google::protobuf::int32 treasurehead() const;
  inline void set_treasurehead(::google::protobuf::int32 value);

  // optional int32 TreasureBody = 3 [default = -1];
  inline bool has_treasurebody() const;
  inline void clear_treasurebody();
  static const int kTreasureBodyFieldNumber = 3;
  inline ::google::protobuf::int32 treasurebody() const;
  inline void set_treasurebody(::google::protobuf::int32 value);

  // optional int32 TreasureWeapon = 4 [default = -1];
  inline bool has_treasureweapon() const;
  inline void clear_treasureweapon();
  static const int kTreasureWeaponFieldNumber = 4;
  inline ::google::protobuf::int32 treasureweapon() const;
  inline void set_treasureweapon(::google::protobuf::int32 value);

  // optional int32 TreasureWing = 5 [default = -1];
  inline bool has_treasurewing() const;
  inline void clear_treasurewing();
  static const int kTreasureWingFieldNumber = 5;
  inline ::google::protobuf::int32 treasurewing() const;
  inline void set_treasurewing(::google::protobuf::int32 value);

  // optional int32 TreasureRiding = 6 [default = -1];
  inline bool has_treasureriding() const;
  inline void clear_treasureriding();
  static const int kTreasureRidingFieldNumber = 6;
  inline ::google::protobuf::int32 treasureriding() const;
  inline void set_treasureriding(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TreasureEquipedID)
 private:
  inline void set_has_treasurehair();
  inline void clear_has_treasurehair();
  inline void set_has_treasurehead();
  inline void clear_has_treasurehead();
  inline void set_has_treasurebody();
  inline void clear_has_treasurebody();
  inline void set_has_treasureweapon();
  inline void clear_has_treasureweapon();
  inline void set_has_treasurewing();
  inline void clear_has_treasurewing();
  inline void set_has_treasureriding();
  inline void clear_has_treasureriding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 treasurehair_;
  ::google::protobuf::int32 treasurehead_;
  ::google::protobuf::int32 treasurebody_;
  ::google::protobuf::int32 treasureweapon_;
  ::google::protobuf::int32 treasurewing_;
  ::google::protobuf::int32 treasureriding_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TreasureEquipedID* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Region = 3 [default = -1];
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 3;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);

  // optional int32 Status = 4 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 Promo = 5 [default = -1];
  inline bool has_promo() const;
  inline void clear_promo();
  static const int kPromoFieldNumber = 5;
  inline ::google::protobuf::int32 promo() const;
  inline void set_promo(::google::protobuf::int32 value);

  // optional string Ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 Port = 7 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_promo();
  inline void clear_has_promo();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 region_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 promo_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildInfo : public ::google::protobuf::Message {
 public:
  GuildInfo();
  virtual ~GuildInfo();

  GuildInfo(const GuildInfo& from);

  inline GuildInfo& operator=(const GuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildInfo& default_instance();

  void Swap(GuildInfo* other);

  // implements Message ----------------------------------------------

  GuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildInfo& from);
  void MergeFrom(const GuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string GuildLeader = 3;
  inline bool has_guildleader() const;
  inline void clear_guildleader();
  static const int kGuildLeaderFieldNumber = 3;
  inline const ::std::string& guildleader() const;
  inline void set_guildleader(const ::std::string& value);
  inline void set_guildleader(const char* value);
  inline void set_guildleader(const char* value, size_t size);
  inline ::std::string* mutable_guildleader();
  inline ::std::string* release_guildleader();
  inline void set_allocated_guildleader(::std::string* guildleader);

  // optional int32 GuildLevel = 4 [default = -1];
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildLevelFieldNumber = 4;
  inline ::google::protobuf::int32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::int32 value);

  // optional int32 MemberCount = 5 [default = -1];
  inline bool has_membercount() const;
  inline void clear_membercount();
  static const int kMemberCountFieldNumber = 5;
  inline ::google::protobuf::int32 membercount() const;
  inline void set_membercount(::google::protobuf::int32 value);

  // optional int32 OnlineCount = 6 [default = -1];
  inline bool has_onlinecount() const;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 6;
  inline ::google::protobuf::int32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::int32 value);

  // optional int32 GuildProsper = 7 [default = -1];
  inline bool has_guildprosper() const;
  inline void clear_guildprosper();
  static const int kGuildProsperFieldNumber = 7;
  inline ::google::protobuf::int32 guildprosper() const;
  inline void set_guildprosper(::google::protobuf::int32 value);

  // optional int32 GuildMoney = 8 [default = -1];
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // optional int32 GuildResource = 9 [default = -1];
  inline bool has_guildresource() const;
  inline void clear_guildresource();
  static const int kGuildResourceFieldNumber = 9;
  inline ::google::protobuf::int32 guildresource() const;
  inline void set_guildresource(::google::protobuf::int32 value);

  // optional string GuildCreed = 10;
  inline bool has_guildcreed() const;
  inline void clear_guildcreed();
  static const int kGuildCreedFieldNumber = 10;
  inline const ::std::string& guildcreed() const;
  inline void set_guildcreed(const ::std::string& value);
  inline void set_guildcreed(const char* value);
  inline void set_guildcreed(const char* value, size_t size);
  inline ::std::string* mutable_guildcreed();
  inline ::std::string* release_guildcreed();
  inline void set_allocated_guildcreed(::std::string* guildcreed);

  // optional .GuildFlag Flag = 11;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 11;
  inline const ::GuildFlag& flag() const;
  inline ::GuildFlag* mutable_flag();
  inline ::GuildFlag* release_flag();
  inline void set_allocated_flag(::GuildFlag* flag);

  // repeated .GuildNews News = 12;
  inline int news_size() const;
  inline void clear_news();
  static const int kNewsFieldNumber = 12;
  inline const ::GuildNews& news(int index) const;
  inline ::GuildNews* mutable_news(int index);
  inline ::GuildNews* add_news();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildNews >&
      news() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildNews >*
      mutable_news();

  // optional bool IsAutoJoin = 13 [default = false];
  inline bool has_isautojoin() const;
  inline void clear_isautojoin();
  static const int kIsAutoJoinFieldNumber = 13;
  inline bool isautojoin() const;
  inline void set_isautojoin(bool value);

  // optional string GuildOldName = 15;
  inline bool has_guildoldname() const;
  inline void clear_guildoldname();
  static const int kGuildOldNameFieldNumber = 15;
  inline const ::std::string& guildoldname() const;
  inline void set_guildoldname(const ::std::string& value);
  inline void set_guildoldname(const char* value);
  inline void set_guildoldname(const char* value, size_t size);
  inline ::std::string* mutable_guildoldname();
  inline ::std::string* release_guildoldname();
  inline void set_allocated_guildoldname(::std::string* guildoldname);

  // optional string GuildCreater = 16;
  inline bool has_guildcreater() const;
  inline void clear_guildcreater();
  static const int kGuildCreaterFieldNumber = 16;
  inline const ::std::string& guildcreater() const;
  inline void set_guildcreater(const ::std::string& value);
  inline void set_guildcreater(const char* value);
  inline void set_guildcreater(const char* value, size_t size);
  inline ::std::string* mutable_guildcreater();
  inline ::std::string* release_guildcreater();
  inline void set_allocated_guildcreater(::std::string* guildcreater);

  // optional int32 SelfOffice = 17 [default = -1];
  inline bool has_selfoffice() const;
  inline void clear_selfoffice();
  static const int kSelfOfficeFieldNumber = 17;
  inline ::google::protobuf::int32 selfoffice() const;
  inline void set_selfoffice(::google::protobuf::int32 value);

  // optional int32 TotalCount = 18 [default = -1];
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 18;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // optional bool IsVacation = 19 [default = false];
  inline bool has_isvacation() const;
  inline void clear_isvacation();
  static const int kIsVacationFieldNumber = 19;
  inline bool isvacation() const;
  inline void set_isvacation(bool value);

  // optional bool HaveApplied = 20 [default = false];
  inline bool has_haveapplied() const;
  inline void clear_haveapplied();
  static const int kHaveAppliedFieldNumber = 20;
  inline bool haveapplied() const;
  inline void set_haveapplied(bool value);

  // optional int32 MaintainCost = 21 [default = -1];
  inline bool has_maintaincost() const;
  inline void clear_maintaincost();
  static const int kMaintainCostFieldNumber = 21;
  inline ::google::protobuf::int32 maintaincost() const;
  inline void set_maintaincost(::google::protobuf::int32 value);

  // optional int32 GuildWelfare = 22 [default = -1];
  inline bool has_guildwelfare() const;
  inline void clear_guildwelfare();
  static const int kGuildWelfareFieldNumber = 22;
  inline ::google::protobuf::int32 guildwelfare() const;
  inline void set_guildwelfare(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildleader();
  inline void clear_has_guildleader();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();
  inline void set_has_membercount();
  inline void clear_has_membercount();
  inline void set_has_onlinecount();
  inline void clear_has_onlinecount();
  inline void set_has_guildprosper();
  inline void clear_has_guildprosper();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_guildresource();
  inline void clear_has_guildresource();
  inline void set_has_guildcreed();
  inline void clear_has_guildcreed();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_isautojoin();
  inline void clear_has_isautojoin();
  inline void set_has_guildoldname();
  inline void clear_has_guildoldname();
  inline void set_has_guildcreater();
  inline void clear_has_guildcreater();
  inline void set_has_selfoffice();
  inline void clear_has_selfoffice();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_isvacation();
  inline void clear_has_isvacation();
  inline void set_has_haveapplied();
  inline void clear_has_haveapplied();
  inline void set_has_maintaincost();
  inline void clear_has_maintaincost();
  inline void set_has_guildwelfare();
  inline void clear_has_guildwelfare();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* guildname_;
  ::std::string* guildleader_;
  ::google::protobuf::int32 guildlevel_;
  ::google::protobuf::int32 membercount_;
  ::google::protobuf::int32 onlinecount_;
  ::google::protobuf::int32 guildprosper_;
  ::google::protobuf::int32 guildmoney_;
  ::google::protobuf::int32 guildresource_;
  ::std::string* guildcreed_;
  ::GuildFlag* flag_;
  ::google::protobuf::RepeatedPtrField< ::GuildNews > news_;
  ::std::string* guildoldname_;
  ::std::string* guildcreater_;
  ::google::protobuf::int32 selfoffice_;
  bool isautojoin_;
  bool isvacation_;
  bool haveapplied_;
  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::int32 maintaincost_;
  ::google::protobuf::int32 guildwelfare_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildFlag : public ::google::protobuf::Message {
 public:
  GuildFlag();
  virtual ~GuildFlag();

  GuildFlag(const GuildFlag& from);

  inline GuildFlag& operator=(const GuildFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildFlag& default_instance();

  void Swap(GuildFlag* other);

  // implements Message ----------------------------------------------

  GuildFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildFlag& from);
  void MergeFrom(const GuildFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FlagEquiped = 1 [default = -1];
  inline bool has_flagequiped() const;
  inline void clear_flagequiped();
  static const int kFlagEquipedFieldNumber = 1;
  inline ::google::protobuf::int32 flagequiped() const;
  inline void set_flagequiped(::google::protobuf::int32 value);

  // repeated int32 FlagUnlocked = 2;
  inline int flagunlocked_size() const;
  inline void clear_flagunlocked();
  static const int kFlagUnlockedFieldNumber = 2;
  inline ::google::protobuf::int32 flagunlocked(int index) const;
  inline void set_flagunlocked(int index, ::google::protobuf::int32 value);
  inline void add_flagunlocked(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      flagunlocked() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_flagunlocked();

  // @@protoc_insertion_point(class_scope:GuildFlag)
 private:
  inline void set_has_flagequiped();
  inline void clear_has_flagequiped();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > flagunlocked_;
  ::google::protobuf::int32 flagequiped_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildFlag* default_instance_;
};
// -------------------------------------------------------------------

class GuildNews : public ::google::protobuf::Message {
 public:
  GuildNews();
  virtual ~GuildNews();

  GuildNews(const GuildNews& from);

  inline GuildNews& operator=(const GuildNews& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildNews& default_instance();

  void Swap(GuildNews* other);

  // implements Message ----------------------------------------------

  GuildNews* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildNews& from);
  void MergeFrom(const GuildNews& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OptionType = 3 [default = -1];
  inline bool has_optiontype() const;
  inline void clear_optiontype();
  static const int kOptionTypeFieldNumber = 3;
  inline ::google::protobuf::int32 optiontype() const;
  inline void set_optiontype(::google::protobuf::int32 value);

  // repeated string EventsParm = 4;
  inline int eventsparm_size() const;
  inline void clear_eventsparm();
  static const int kEventsParmFieldNumber = 4;
  inline const ::std::string& eventsparm(int index) const;
  inline ::std::string* mutable_eventsparm(int index);
  inline void set_eventsparm(int index, const ::std::string& value);
  inline void set_eventsparm(int index, const char* value);
  inline void set_eventsparm(int index, const char* value, size_t size);
  inline ::std::string* add_eventsparm();
  inline void add_eventsparm(const ::std::string& value);
  inline void add_eventsparm(const char* value);
  inline void add_eventsparm(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& eventsparm() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eventsparm();

  // @@protoc_insertion_point(class_scope:GuildNews)
 private:
  inline void set_has_optiontype();
  inline void clear_has_optiontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> eventsparm_;
  ::google::protobuf::int32 optiontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildNews* default_instance_;
};
// -------------------------------------------------------------------

class GuildMemberTinyInfo : public ::google::protobuf::Message {
 public:
  GuildMemberTinyInfo();
  virtual ~GuildMemberTinyInfo();

  GuildMemberTinyInfo(const GuildMemberTinyInfo& from);

  inline GuildMemberTinyInfo& operator=(const GuildMemberTinyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMemberTinyInfo& default_instance();

  void Swap(GuildMemberTinyInfo* other);

  // implements Message ----------------------------------------------

  GuildMemberTinyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMemberTinyInfo& from);
  void MergeFrom(const GuildMemberTinyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 Occupition = 3 [default = -1];
  inline bool has_occupition() const;
  inline void clear_occupition();
  static const int kOccupitionFieldNumber = 3;
  inline ::google::protobuf::int32 occupition() const;
  inline void set_occupition(::google::protobuf::int32 value);

  // optional int32 Level = 4 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 FightScore = 5 [default = -1];
  inline bool has_fightscore() const;
  inline void clear_fightscore();
  static const int kFightScoreFieldNumber = 5;
  inline ::google::protobuf::int32 fightscore() const;
  inline void set_fightscore(::google::protobuf::int32 value);

  // optional int32 TotalContribute = 6 [default = -1];
  inline bool has_totalcontribute() const;
  inline void clear_totalcontribute();
  static const int kTotalContributeFieldNumber = 6;
  inline ::google::protobuf::int32 totalcontribute() const;
  inline void set_totalcontribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GuildMemberTinyInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_occupition();
  inline void clear_has_occupition();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightscore();
  inline void clear_has_fightscore();
  inline void set_has_totalcontribute();
  inline void clear_has_totalcontribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* playername_;
  ::google::protobuf::int32 occupition_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fightscore_;
  ::google::protobuf::int32 totalcontribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildMemberTinyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildMemberInfo : public ::google::protobuf::Message {
 public:
  GuildMemberInfo();
  virtual ~GuildMemberInfo();

  GuildMemberInfo(const GuildMemberInfo& from);

  inline GuildMemberInfo& operator=(const GuildMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMemberInfo& default_instance();

  void Swap(GuildMemberInfo* other);

  // implements Message ----------------------------------------------

  GuildMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMemberInfo& from);
  void MergeFrom(const GuildMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OfficeType = 3 [default = -1];
  inline bool has_officetype() const;
  inline void clear_officetype();
  static const int kOfficeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 officetype() const;
  inline void set_officetype(::google::protobuf::int32 value);

  // optional int32 WeekContribute = 4 [default = -1];
  inline bool has_weekcontribute() const;
  inline void clear_weekcontribute();
  static const int kWeekContributeFieldNumber = 4;
  inline ::google::protobuf::int32 weekcontribute() const;
  inline void set_weekcontribute(::google::protobuf::int32 value);

  // optional int32 HistoryContribute = 5 [default = -1];
  inline bool has_historycontribute() const;
  inline void clear_historycontribute();
  static const int kHistoryContributeFieldNumber = 5;
  inline ::google::protobuf::int32 historycontribute() const;
  inline void set_historycontribute(::google::protobuf::int32 value);

  // optional int32 TotalContribute = 6 [default = -1];
  inline bool has_totalcontribute() const;
  inline void clear_totalcontribute();
  static const int kTotalContributeFieldNumber = 6;
  inline ::google::protobuf::int32 totalcontribute() const;
  inline void set_totalcontribute(::google::protobuf::int32 value);

  // optional int32 WeekQuestCount = 7 [default = -1];
  inline bool has_weekquestcount() const;
  inline void clear_weekquestcount();
  static const int kWeekQuestCountFieldNumber = 7;
  inline ::google::protobuf::int32 weekquestcount() const;
  inline void set_weekquestcount(::google::protobuf::int32 value);

  // optional int32 WeekCampCount = 8 [default = -1];
  inline bool has_weekcampcount() const;
  inline void clear_weekcampcount();
  static const int kWeekCampCountFieldNumber = 8;
  inline ::google::protobuf::int32 weekcampcount() const;
  inline void set_weekcampcount(::google::protobuf::int32 value);

  // optional int64 InTime = 9 [default = -1];
  inline bool has_intime() const;
  inline void clear_intime();
  static const int kInTimeFieldNumber = 9;
  inline ::google::protobuf::int64 intime() const;
  inline void set_intime(::google::protobuf::int64 value);

  // optional .GuildMemberTinyInfo GuildTinyInfo = 11;
  inline bool has_guildtinyinfo() const;
  inline void clear_guildtinyinfo();
  static const int kGuildTinyInfoFieldNumber = 11;
  inline const ::GuildMemberTinyInfo& guildtinyinfo() const;
  inline ::GuildMemberTinyInfo* mutable_guildtinyinfo();
  inline ::GuildMemberTinyInfo* release_guildtinyinfo();
  inline void set_allocated_guildtinyinfo(::GuildMemberTinyInfo* guildtinyinfo);

  // optional uint64 LeaveTime = 12 [default = 0];
  inline bool has_leavetime() const;
  inline void clear_leavetime();
  static const int kLeaveTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 leavetime() const;
  inline void set_leavetime(::google::protobuf::uint64 value);

  // optional bool IsVacation = 13 [default = false];
  inline bool has_isvacation() const;
  inline void clear_isvacation();
  static const int kIsVacationFieldNumber = 13;
  inline bool isvacation() const;
  inline void set_isvacation(bool value);

  // optional bool IsForbiddenChat = 14 [default = false];
  inline bool has_isforbiddenchat() const;
  inline void clear_isforbiddenchat();
  static const int kIsForbiddenChatFieldNumber = 14;
  inline bool isforbiddenchat() const;
  inline void set_isforbiddenchat(bool value);

  // @@protoc_insertion_point(class_scope:GuildMemberInfo)
 private:
  inline void set_has_officetype();
  inline void clear_has_officetype();
  inline void set_has_weekcontribute();
  inline void clear_has_weekcontribute();
  inline void set_has_historycontribute();
  inline void clear_has_historycontribute();
  inline void set_has_totalcontribute();
  inline void clear_has_totalcontribute();
  inline void set_has_weekquestcount();
  inline void clear_has_weekquestcount();
  inline void set_has_weekcampcount();
  inline void clear_has_weekcampcount();
  inline void set_has_intime();
  inline void clear_has_intime();
  inline void set_has_guildtinyinfo();
  inline void clear_has_guildtinyinfo();
  inline void set_has_leavetime();
  inline void clear_has_leavetime();
  inline void set_has_isvacation();
  inline void clear_has_isvacation();
  inline void set_has_isforbiddenchat();
  inline void clear_has_isforbiddenchat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 officetype_;
  ::google::protobuf::int32 weekcontribute_;
  ::google::protobuf::int32 historycontribute_;
  ::google::protobuf::int32 totalcontribute_;
  ::google::protobuf::int32 weekquestcount_;
  ::google::protobuf::int32 weekcampcount_;
  ::google::protobuf::int64 intime_;
  ::GuildMemberTinyInfo* guildtinyinfo_;
  ::google::protobuf::uint64 leavetime_;
  bool isvacation_;
  bool isforbiddenchat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildJurisdiction : public ::google::protobuf::Message {
 public:
  GuildJurisdiction();
  virtual ~GuildJurisdiction();

  GuildJurisdiction(const GuildJurisdiction& from);

  inline GuildJurisdiction& operator=(const GuildJurisdiction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildJurisdiction& default_instance();

  void Swap(GuildJurisdiction* other);

  // implements Message ----------------------------------------------

  GuildJurisdiction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildJurisdiction& from);
  void MergeFrom(const GuildJurisdiction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfigID = 1 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 1;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional bool CurState = 2 [default = false];
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurStateFieldNumber = 2;
  inline bool curstate() const;
  inline void set_curstate(bool value);

  // optional bool IsCanSet = 3 [default = false];
  inline bool has_iscanset() const;
  inline void clear_iscanset();
  static const int kIsCanSetFieldNumber = 3;
  inline bool iscanset() const;
  inline void set_iscanset(bool value);

  // @@protoc_insertion_point(class_scope:GuildJurisdiction)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_iscanset();
  inline void clear_has_iscanset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 configid_;
  bool curstate_;
  bool iscanset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildJurisdiction* default_instance_;
};
// -------------------------------------------------------------------

class GuildOfficeJurisdiction : public ::google::protobuf::Message {
 public:
  GuildOfficeJurisdiction();
  virtual ~GuildOfficeJurisdiction();

  GuildOfficeJurisdiction(const GuildOfficeJurisdiction& from);

  inline GuildOfficeJurisdiction& operator=(const GuildOfficeJurisdiction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildOfficeJurisdiction& default_instance();

  void Swap(GuildOfficeJurisdiction* other);

  // implements Message ----------------------------------------------

  GuildOfficeJurisdiction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildOfficeJurisdiction& from);
  void MergeFrom(const GuildOfficeJurisdiction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OfficeType = 1 [default = -1];
  inline bool has_officetype() const;
  inline void clear_officetype();
  static const int kOfficeTypeFieldNumber = 1;
  inline ::google::protobuf::int32 officetype() const;
  inline void set_officetype(::google::protobuf::int32 value);

  // repeated .GuildJurisdiction JurisdictionList = 2;
  inline int jurisdictionlist_size() const;
  inline void clear_jurisdictionlist();
  static const int kJurisdictionListFieldNumber = 2;
  inline const ::GuildJurisdiction& jurisdictionlist(int index) const;
  inline ::GuildJurisdiction* mutable_jurisdictionlist(int index);
  inline ::GuildJurisdiction* add_jurisdictionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GuildJurisdiction >&
      jurisdictionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GuildJurisdiction >*
      mutable_jurisdictionlist();

  // @@protoc_insertion_point(class_scope:GuildOfficeJurisdiction)
 private:
  inline void set_has_officetype();
  inline void clear_has_officetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GuildJurisdiction > jurisdictionlist_;
  ::google::protobuf::int32 officetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildOfficeJurisdiction* default_instance_;
};
// -------------------------------------------------------------------

class GuildVacationInfo : public ::google::protobuf::Message {
 public:
  GuildVacationInfo();
  virtual ~GuildVacationInfo();

  GuildVacationInfo(const GuildVacationInfo& from);

  inline GuildVacationInfo& operator=(const GuildVacationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildVacationInfo& default_instance();

  void Swap(GuildVacationInfo* other);

  // implements Message ----------------------------------------------

  GuildVacationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildVacationInfo& from);
  void MergeFrom(const GuildVacationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 Level = 4 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string Reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional uint64 LeftTime = 6 [default = 0];
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GuildVacationInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* playername_;
  ::std::string* reason_;
  ::google::protobuf::uint64 lefttime_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildVacationInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBuildingInfo : public ::google::protobuf::Message {
 public:
  GuildBuildingInfo();
  virtual ~GuildBuildingInfo();

  GuildBuildingInfo(const GuildBuildingInfo& from);

  inline GuildBuildingInfo& operator=(const GuildBuildingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBuildingInfo& default_instance();

  void Swap(GuildBuildingInfo* other);

  // implements Message ----------------------------------------------

  GuildBuildingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBuildingInfo& from);
  void MergeFrom(const GuildBuildingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BuildingType = 1 [default = -1];
  inline bool has_buildingtype() const;
  inline void clear_buildingtype();
  static const int kBuildingTypeFieldNumber = 1;
  inline ::google::protobuf::int32 buildingtype() const;
  inline void set_buildingtype(::google::protobuf::int32 value);

  // optional int32 BuildingLv = 2 [default = -1];
  inline bool has_buildinglv() const;
  inline void clear_buildinglv();
  static const int kBuildingLvFieldNumber = 2;
  inline ::google::protobuf::int32 buildinglv() const;
  inline void set_buildinglv(::google::protobuf::int32 value);

  // optional uint64 LeftTime = 3 [default = 0];
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GuildBuildingInfo)
 private:
  inline void set_has_buildingtype();
  inline void clear_has_buildingtype();
  inline void set_has_buildinglv();
  inline void clear_has_buildinglv();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildingtype_;
  ::google::protobuf::int32 buildinglv_;
  ::google::protobuf::uint64 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildBuildingInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBuildingContributionInfo : public ::google::protobuf::Message {
 public:
  GuildBuildingContributionInfo();
  virtual ~GuildBuildingContributionInfo();

  GuildBuildingContributionInfo(const GuildBuildingContributionInfo& from);

  inline GuildBuildingContributionInfo& operator=(const GuildBuildingContributionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBuildingContributionInfo& default_instance();

  void Swap(GuildBuildingContributionInfo* other);

  // implements Message ----------------------------------------------

  GuildBuildingContributionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBuildingContributionInfo& from);
  void MergeFrom(const GuildBuildingContributionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 2 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 SpeedTime = 4 [default = -1];
  inline bool has_speedtime() const;
  inline void clear_speedtime();
  static const int kSpeedTimeFieldNumber = 4;
  inline ::google::protobuf::int32 speedtime() const;
  inline void set_speedtime(::google::protobuf::int32 value);

  // optional uint64 Date = 5 [default = 0];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 5;
  inline ::google::protobuf::uint64 date() const;
  inline void set_date(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GuildBuildingContributionInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_speedtime();
  inline void clear_has_speedtime();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* playername_;
  ::google::protobuf::uint64 date_;
  ::google::protobuf::int32 speedtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildBuildingContributionInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildEvent : public ::google::protobuf::Message {
 public:
  GuildEvent();
  virtual ~GuildEvent();

  GuildEvent(const GuildEvent& from);

  inline GuildEvent& operator=(const GuildEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildEvent& default_instance();

  void Swap(GuildEvent* other);

  // implements Message ----------------------------------------------

  GuildEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildEvent& from);
  void MergeFrom(const GuildEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 2 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint64 Date = 4 [default = 0];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline ::google::protobuf::uint64 date() const;
  inline void set_date(::google::protobuf::uint64 value);

  // optional int32 OptionType = 5 [default = -1];
  inline bool has_optiontype() const;
  inline void clear_optiontype();
  static const int kOptionTypeFieldNumber = 5;
  inline ::google::protobuf::int32 optiontype() const;
  inline void set_optiontype(::google::protobuf::int32 value);

  // repeated string EventsParm = 6;
  inline int eventsparm_size() const;
  inline void clear_eventsparm();
  static const int kEventsParmFieldNumber = 6;
  inline const ::std::string& eventsparm(int index) const;
  inline ::std::string* mutable_eventsparm(int index);
  inline void set_eventsparm(int index, const ::std::string& value);
  inline void set_eventsparm(int index, const char* value);
  inline void set_eventsparm(int index, const char* value, size_t size);
  inline ::std::string* add_eventsparm();
  inline void add_eventsparm(const ::std::string& value);
  inline void add_eventsparm(const char* value);
  inline void add_eventsparm(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& eventsparm() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eventsparm();

  // @@protoc_insertion_point(class_scope:GuildEvent)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_optiontype();
  inline void clear_has_optiontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 date_;
  ::google::protobuf::RepeatedPtrField< ::std::string> eventsparm_;
  ::google::protobuf::int32 optiontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static GuildEvent* default_instance_;
};
// -------------------------------------------------------------------

class PBMatchRoom : public ::google::protobuf::Message {
 public:
  PBMatchRoom();
  virtual ~PBMatchRoom();

  PBMatchRoom(const PBMatchRoom& from);

  inline PBMatchRoom& operator=(const PBMatchRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMatchRoom& default_instance();

  void Swap(PBMatchRoom* other);

  // implements Message ----------------------------------------------

  PBMatchRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMatchRoom& from);
  void MergeFrom(const PBMatchRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchRoomCamps Camps = 1;
  inline int camps_size() const;
  inline void clear_camps();
  static const int kCampsFieldNumber = 1;
  inline const ::MatchRoomCamps& camps(int index) const;
  inline ::MatchRoomCamps* mutable_camps(int index);
  inline ::MatchRoomCamps* add_camps();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchRoomCamps >&
      camps() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchRoomCamps >*
      mutable_camps();

  // optional .MatchTargetInfo MatchTarget = 6;
  inline bool has_matchtarget() const;
  inline void clear_matchtarget();
  static const int kMatchTargetFieldNumber = 6;
  inline const ::MatchTargetInfo& matchtarget() const;
  inline ::MatchTargetInfo* mutable_matchtarget();
  inline ::MatchTargetInfo* release_matchtarget();
  inline void set_allocated_matchtarget(::MatchTargetInfo* matchtarget);

  // optional uint64 RoomId = 7 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 7;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional int32 MatchType = 8 [default = -1];
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchTypeFieldNumber = 8;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBMatchRoom)
 private:
  inline void set_has_matchtarget();
  inline void clear_has_matchtarget();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MatchRoomCamps > camps_;
  ::MatchTargetInfo* matchtarget_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::int32 matchtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PBMatchRoom* default_instance_;
};
// -------------------------------------------------------------------

class MatchRoomCamps : public ::google::protobuf::Message {
 public:
  MatchRoomCamps();
  virtual ~MatchRoomCamps();

  MatchRoomCamps(const MatchRoomCamps& from);

  inline MatchRoomCamps& operator=(const MatchRoomCamps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchRoomCamps& default_instance();

  void Swap(MatchRoomCamps* other);

  // implements Message ----------------------------------------------

  MatchRoomCamps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchRoomCamps& from);
  void MergeFrom(const MatchRoomCamps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchInfo Players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::MatchInfo& players(int index) const;
  inline ::MatchInfo* mutable_players(int index);
  inline ::MatchInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchInfo >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:MatchRoomCamps)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MatchInfo > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MatchRoomCamps* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMatchData : public ::google::protobuf::Message {
 public:
  PlayerMatchData();
  virtual ~PlayerMatchData();

  PlayerMatchData(const PlayerMatchData& from);

  inline PlayerMatchData& operator=(const PlayerMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMatchData& default_instance();

  void Swap(PlayerMatchData* other);

  // implements Message ----------------------------------------------

  PlayerMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMatchData& from);
  void MergeFrom(const PlayerMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MatchType = 1 [default = 0];
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchTypeFieldNumber = 1;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // optional int32 Elo = 2 [default = 0];
  inline bool has_elo() const;
  inline void clear_elo();
  static const int kEloFieldNumber = 2;
  inline ::google::protobuf::int32 elo() const;
  inline void set_elo(::google::protobuf::int32 value);

  // optional int32 Auto = 3 [default = 0];
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 3;
  inline ::google::protobuf::int32 auto_() const;
  inline void set_auto_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerMatchData)
 private:
  inline void set_has_matchtype();
  inline void clear_has_matchtype();
  inline void set_has_elo();
  inline void clear_has_elo();
  inline void set_has_auto_();
  inline void clear_has_auto_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 matchtype_;
  ::google::protobuf::int32 elo_;
  ::google::protobuf::int32 auto__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PlayerMatchData* default_instance_;
};
// -------------------------------------------------------------------

class MaxQuestCompleteId : public ::google::protobuf::Message {
 public:
  MaxQuestCompleteId();
  virtual ~MaxQuestCompleteId();

  MaxQuestCompleteId(const MaxQuestCompleteId& from);

  inline MaxQuestCompleteId& operator=(const MaxQuestCompleteId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxQuestCompleteId& default_instance();

  void Swap(MaxQuestCompleteId* other);

  // implements Message ----------------------------------------------

  MaxQuestCompleteId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxQuestCompleteId& from);
  void MergeFrom(const MaxQuestCompleteId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 QuestType = 1 [default = -1];
  inline bool has_questtype() const;
  inline void clear_questtype();
  static const int kQuestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 questtype() const;
  inline void set_questtype(::google::protobuf::int32 value);

  // optional int32 MaxConfigId = 2 [default = -1];
  inline bool has_maxconfigid() const;
  inline void clear_maxconfigid();
  static const int kMaxConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 maxconfigid() const;
  inline void set_maxconfigid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MaxQuestCompleteId)
 private:
  inline void set_has_questtype();
  inline void clear_has_questtype();
  inline void set_has_maxconfigid();
  inline void clear_has_maxconfigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 questtype_;
  ::google::protobuf::int32 maxconfigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MaxQuestCompleteId* default_instance_;
};
// -------------------------------------------------------------------

class QuestMaxQuestList : public ::google::protobuf::Message {
 public:
  QuestMaxQuestList();
  virtual ~QuestMaxQuestList();

  QuestMaxQuestList(const QuestMaxQuestList& from);

  inline QuestMaxQuestList& operator=(const QuestMaxQuestList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestMaxQuestList& default_instance();

  void Swap(QuestMaxQuestList* other);

  // implements Message ----------------------------------------------

  QuestMaxQuestList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestMaxQuestList& from);
  void MergeFrom(const QuestMaxQuestList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CompletedQuestList QuestList = 1;
  inline int questlist_size() const;
  inline void clear_questlist();
  static const int kQuestListFieldNumber = 1;
  inline const ::CompletedQuestList& questlist(int index) const;
  inline ::CompletedQuestList* mutable_questlist(int index);
  inline ::CompletedQuestList* add_questlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CompletedQuestList >&
      questlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompletedQuestList >*
      mutable_questlist();

  // @@protoc_insertion_point(class_scope:QuestMaxQuestList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CompletedQuestList > questlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static QuestMaxQuestList* default_instance_;
};
// -------------------------------------------------------------------

class LineStats : public ::google::protobuf::Message {
 public:
  LineStats();
  virtual ~LineStats();

  LineStats(const LineStats& from);

  inline LineStats& operator=(const LineStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineStats& default_instance();

  void Swap(LineStats* other);

  // implements Message ----------------------------------------------

  LineStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineStats& from);
  void MergeFrom(const LineStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LineId = 1 [default = -1];
  inline bool has_lineid() const;
  inline void clear_lineid();
  static const int kLineIdFieldNumber = 1;
  inline ::google::protobuf::int32 lineid() const;
  inline void set_lineid(::google::protobuf::int32 value);

  // optional int32 LineStats = 2 [default = -1];
  inline bool has_linestats() const;
  inline void clear_linestats();
  static const int kLineStatsFieldNumber = 2;
  inline ::google::protobuf::int32 linestats() const;
  inline void set_linestats(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LineStats)
 private:
  inline void set_has_lineid();
  inline void clear_has_lineid();
  inline void set_has_linestats();
  inline void clear_has_linestats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lineid_;
  ::google::protobuf::int32 linestats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static LineStats* default_instance_;
};
// -------------------------------------------------------------------

class SceneStats : public ::google::protobuf::Message {
 public:
  SceneStats();
  virtual ~SceneStats();

  SceneStats(const SceneStats& from);

  inline SceneStats& operator=(const SceneStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneStats& default_instance();

  void Swap(SceneStats* other);

  // implements Message ----------------------------------------------

  SceneStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneStats& from);
  void MergeFrom(const SceneStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LineStats Lines = 1;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 1;
  inline const ::LineStats& lines(int index) const;
  inline ::LineStats* mutable_lines(int index);
  inline ::LineStats* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::LineStats >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::LineStats >*
      mutable_lines();

  // optional int32 SceneId = 2 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneStats)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::LineStats > lines_;
  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SceneStats* default_instance_;
};
// -------------------------------------------------------------------

class DungeonBossInfo : public ::google::protobuf::Message {
 public:
  DungeonBossInfo();
  virtual ~DungeonBossInfo();

  DungeonBossInfo(const DungeonBossInfo& from);

  inline DungeonBossInfo& operator=(const DungeonBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonBossInfo& default_instance();

  void Swap(DungeonBossInfo* other);

  // implements Message ----------------------------------------------

  DungeonBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonBossInfo& from);
  void MergeFrom(const DungeonBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Bossid = 1 [default = -1];
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // optional int32 Number = 2 [default = -1];
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional int32 Dungeonid = 3 [default = -1];
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonidFieldNumber = 3;
  inline ::google::protobuf::int32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::int32 value);

  // optional int32 MaxNumber = 4 [default = -1];
  inline bool has_maxnumber() const;
  inline void clear_maxnumber();
  static const int kMaxNumberFieldNumber = 4;
  inline ::google::protobuf::int32 maxnumber() const;
  inline void set_maxnumber(::google::protobuf::int32 value);

  // optional int32 RefreshType = 5 [default = -1];
  inline bool has_refreshtype() const;
  inline void clear_refreshtype();
  static const int kRefreshTypeFieldNumber = 5;
  inline ::google::protobuf::int32 refreshtype() const;
  inline void set_refreshtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DungeonBossInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();
  inline void set_has_maxnumber();
  inline void clear_has_maxnumber();
  inline void set_has_refreshtype();
  inline void clear_has_refreshtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 maxnumber_;
  ::google::protobuf::int32 refreshtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DungeonBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillPosInfo : public ::google::protobuf::Message {
 public:
  SkillPosInfo();
  virtual ~SkillPosInfo();

  SkillPosInfo(const SkillPosInfo& from);

  inline SkillPosInfo& operator=(const SkillPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillPosInfo& default_instance();

  void Swap(SkillPosInfo* other);

  // implements Message ----------------------------------------------

  SkillPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillPosInfo& from);
  void MergeFrom(const SkillPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Pos = 1 [default = -1];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 CurLevel = 3 [default = -1];
  inline bool has_curlevel() const;
  inline void clear_curlevel();
  static const int kCurLevelFieldNumber = 3;
  inline ::google::protobuf::int32 curlevel() const;
  inline void set_curlevel(::google::protobuf::int32 value);

  // optional int32 NextLevel = 4 [default = -1];
  inline bool has_nextlevel() const;
  inline void clear_nextlevel();
  static const int kNextLevelFieldNumber = 4;
  inline ::google::protobuf::int32 nextlevel() const;
  inline void set_nextlevel(::google::protobuf::int32 value);

  // repeated .AttrKeyValue CurLevelAttr = 5;
  inline int curlevelattr_size() const;
  inline void clear_curlevelattr();
  static const int kCurLevelAttrFieldNumber = 5;
  inline const ::AttrKeyValue& curlevelattr(int index) const;
  inline ::AttrKeyValue* mutable_curlevelattr(int index);
  inline ::AttrKeyValue* add_curlevelattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      curlevelattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_curlevelattr();

  // repeated .AttrKeyValue NextLevelAttr = 6;
  inline int nextlevelattr_size() const;
  inline void clear_nextlevelattr();
  static const int kNextLevelAttrFieldNumber = 6;
  inline const ::AttrKeyValue& nextlevelattr(int index) const;
  inline ::AttrKeyValue* mutable_nextlevelattr(int index);
  inline ::AttrKeyValue* add_nextlevelattr();
  inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
      nextlevelattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
      mutable_nextlevelattr();

  // @@protoc_insertion_point(class_scope:SkillPosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_curlevel();
  inline void clear_has_curlevel();
  inline void set_has_nextlevel();
  inline void clear_has_nextlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 curlevel_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > curlevelattr_;
  ::google::protobuf::RepeatedPtrField< ::AttrKeyValue > nextlevelattr_;
  ::google::protobuf::int32 nextlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SkillPosInfo* default_instance_;
};
// -------------------------------------------------------------------

class WelfareReward : public ::google::protobuf::Message {
 public:
  WelfareReward();
  virtual ~WelfareReward();

  WelfareReward(const WelfareReward& from);

  inline WelfareReward& operator=(const WelfareReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WelfareReward& default_instance();

  void Swap(WelfareReward* other);

  // implements Message ----------------------------------------------

  WelfareReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WelfareReward& from);
  void MergeFrom(const WelfareReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RewardID = 1 [default = -1];
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIDFieldNumber = 1;
  inline ::google::protobuf::int32 rewardid() const;
  inline void set_rewardid(::google::protobuf::int32 value);

  // optional int32 RewardNum = 2 [default = -1];
  inline bool has_rewardnum() const;
  inline void clear_rewardnum();
  static const int kRewardNumFieldNumber = 2;
  inline ::google::protobuf::int32 rewardnum() const;
  inline void set_rewardnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WelfareReward)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_rewardnum();
  inline void clear_has_rewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rewardid_;
  ::google::protobuf::int32 rewardnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WelfareReward* default_instance_;
};
// -------------------------------------------------------------------

class AccumulateSignInfo : public ::google::protobuf::Message {
 public:
  AccumulateSignInfo();
  virtual ~AccumulateSignInfo();

  AccumulateSignInfo(const AccumulateSignInfo& from);

  inline AccumulateSignInfo& operator=(const AccumulateSignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccumulateSignInfo& default_instance();

  void Swap(AccumulateSignInfo* other);

  // implements Message ----------------------------------------------

  AccumulateSignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccumulateSignInfo& from);
  void MergeFrom(const AccumulateSignInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool State = 2 [default = false];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline bool state() const;
  inline void set_state(bool value);

  // optional .WelfareReward RewardInfo = 3;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 3;
  inline const ::WelfareReward& rewardinfo() const;
  inline ::WelfareReward* mutable_rewardinfo();
  inline ::WelfareReward* release_rewardinfo();
  inline void set_allocated_rewardinfo(::WelfareReward* rewardinfo);

  // @@protoc_insertion_point(class_scope:AccumulateSignInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  bool state_;
  ::WelfareReward* rewardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AccumulateSignInfo* default_instance_;
};
// -------------------------------------------------------------------

class OnlineInfo : public ::google::protobuf::Message {
 public:
  OnlineInfo();
  virtual ~OnlineInfo();

  OnlineInfo(const OnlineInfo& from);

  inline OnlineInfo& operator=(const OnlineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineInfo& default_instance();

  void Swap(OnlineInfo* other);

  // implements Message ----------------------------------------------

  OnlineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineInfo& from);
  void MergeFrom(const OnlineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool State = 2 [default = false];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline bool state() const;
  inline void set_state(bool value);

  // optional .WelfareReward RewardInfo = 3;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 3;
  inline const ::WelfareReward& rewardinfo() const;
  inline ::WelfareReward* mutable_rewardinfo();
  inline ::WelfareReward* release_rewardinfo();
  inline void set_allocated_rewardinfo(::WelfareReward* rewardinfo);

  // @@protoc_insertion_point(class_scope:OnlineInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  bool state_;
  ::WelfareReward* rewardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static OnlineInfo* default_instance_;
};
// -------------------------------------------------------------------

class LevelInfo : public ::google::protobuf::Message {
 public:
  LevelInfo();
  virtual ~LevelInfo();

  LevelInfo(const LevelInfo& from);

  inline LevelInfo& operator=(const LevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelInfo& default_instance();

  void Swap(LevelInfo* other);

  // implements Message ----------------------------------------------

  LevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelInfo& from);
  void MergeFrom(const LevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 2 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool State = 3 [default = false];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline bool state() const;
  inline void set_state(bool value);

  // repeated .WelfareReward RewardInfo = 4;
  inline int rewardinfo_size() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 4;
  inline const ::WelfareReward& rewardinfo(int index) const;
  inline ::WelfareReward* mutable_rewardinfo(int index);
  inline ::WelfareReward* add_rewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::WelfareReward >&
      rewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::WelfareReward >*
      mutable_rewardinfo();

  // @@protoc_insertion_point(class_scope:LevelInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  bool state_;
  ::google::protobuf::RepeatedPtrField< ::WelfareReward > rewardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static LevelInfo* default_instance_;
};
// -------------------------------------------------------------------

class MonthSignInInfo : public ::google::protobuf::Message {
 public:
  MonthSignInInfo();
  virtual ~MonthSignInInfo();

  MonthSignInInfo(const MonthSignInInfo& from);

  inline MonthSignInInfo& operator=(const MonthSignInInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonthSignInInfo& default_instance();

  void Swap(MonthSignInInfo* other);

  // implements Message ----------------------------------------------

  MonthSignInInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonthSignInInfo& from);
  void MergeFrom(const MonthSignInInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool State = 2 [default = false];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline bool state() const;
  inline void set_state(bool value);

  // optional .WelfareReward RewardInfo = 3;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 3;
  inline const ::WelfareReward& rewardinfo() const;
  inline ::WelfareReward* mutable_rewardinfo();
  inline ::WelfareReward* release_rewardinfo();
  inline void set_allocated_rewardinfo(::WelfareReward* rewardinfo);

  // @@protoc_insertion_point(class_scope:MonthSignInInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  bool state_;
  ::WelfareReward* rewardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MonthSignInInfo* default_instance_;
};
// -------------------------------------------------------------------

class TeamMemberQuickUpdateInfo : public ::google::protobuf::Message {
 public:
  TeamMemberQuickUpdateInfo();
  virtual ~TeamMemberQuickUpdateInfo();

  TeamMemberQuickUpdateInfo(const TeamMemberQuickUpdateInfo& from);

  inline TeamMemberQuickUpdateInfo& operator=(const TeamMemberQuickUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMemberQuickUpdateInfo& default_instance();

  void Swap(TeamMemberQuickUpdateInfo* other);

  // implements Message ----------------------------------------------

  TeamMemberQuickUpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamMemberQuickUpdateInfo& from);
  void MergeFrom(const TeamMemberQuickUpdateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CharacterLocation Location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::CharacterLocation& location() const;
  inline ::CharacterLocation* mutable_location();
  inline ::CharacterLocation* release_location();
  inline void set_allocated_location(::CharacterLocation* location);

  // optional int64 MaxMp = 2 [default = -1];
  inline bool has_maxmp() const;
  inline void clear_maxmp();
  static const int kMaxMpFieldNumber = 2;
  inline ::google::protobuf::int64 maxmp() const;
  inline void set_maxmp(::google::protobuf::int64 value);

  // optional int64 MaxHp = 4 [default = -1];
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  inline ::google::protobuf::int64 maxhp() const;
  inline void set_maxhp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamMemberQuickUpdateInfo)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_maxmp();
  inline void clear_has_maxmp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CharacterLocation* location_;
  ::google::protobuf::int64 maxmp_;
  ::google::protobuf::int64 maxhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static TeamMemberQuickUpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossScoreInfo : public ::google::protobuf::Message {
 public:
  WorldBossScoreInfo();
  virtual ~WorldBossScoreInfo();

  WorldBossScoreInfo(const WorldBossScoreInfo& from);

  inline WorldBossScoreInfo& operator=(const WorldBossScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossScoreInfo& default_instance();

  void Swap(WorldBossScoreInfo* other);

  // implements Message ----------------------------------------------

  WorldBossScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossScoreInfo& from);
  void MergeFrom(const WorldBossScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Playerguid = 1 [default = 0];
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // optional int32 Level = 2 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Occupation = 4 [default = -1];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 4;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // optional int32 RankAll = 5 [default = -1];
  inline bool has_rankall() const;
  inline void clear_rankall();
  static const int kRankAllFieldNumber = 5;
  inline ::google::protobuf::int32 rankall() const;
  inline void set_rankall(::google::protobuf::int32 value);

  // optional int32 RankOccupation = 6 [default = -1];
  inline bool has_rankoccupation() const;
  inline void clear_rankoccupation();
  static const int kRankOccupationFieldNumber = 6;
  inline ::google::protobuf::int32 rankoccupation() const;
  inline void set_rankoccupation(::google::protobuf::int32 value);

  // optional int32 Score = 7 [default = -1];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossScoreInfo)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_rankall();
  inline void clear_has_rankall();
  inline void set_has_rankoccupation();
  inline void clear_has_rankoccupation();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 rankall_;
  ::google::protobuf::int32 rankoccupation_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WorldBossScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossRank : public ::google::protobuf::Message {
 public:
  WorldBossRank();
  virtual ~WorldBossRank();

  WorldBossRank(const WorldBossRank& from);

  inline WorldBossRank& operator=(const WorldBossRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossRank& default_instance();

  void Swap(WorldBossRank* other);

  // implements Message ----------------------------------------------

  WorldBossRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossRank& from);
  void MergeFrom(const WorldBossRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WorldBossScoreInfo ScoreInfo = 1;
  inline int scoreinfo_size() const;
  inline void clear_scoreinfo();
  static const int kScoreInfoFieldNumber = 1;
  inline const ::WorldBossScoreInfo& scoreinfo(int index) const;
  inline ::WorldBossScoreInfo* mutable_scoreinfo(int index);
  inline ::WorldBossScoreInfo* add_scoreinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBossScoreInfo >&
      scoreinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBossScoreInfo >*
      mutable_scoreinfo();

  // optional int32 Occupation = 2 [default = -1];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 2;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossRank)
 private:
  inline void set_has_occupation();
  inline void clear_has_occupation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::WorldBossScoreInfo > scoreinfo_;
  ::google::protobuf::int32 occupation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static WorldBossRank* default_instance_;
};
// -------------------------------------------------------------------

class PetSkill : public ::google::protobuf::Message {
 public:
  PetSkill();
  virtual ~PetSkill();

  PetSkill(const PetSkill& from);

  inline PetSkill& operator=(const PetSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetSkill& default_instance();

  void Swap(PetSkill* other);

  // implements Message ----------------------------------------------

  PetSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetSkill& from);
  void MergeFrom(const PetSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SkillId = 3 [default = -1];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 Lock = 4 [default = -1];
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 4;
  inline ::google::protobuf::int32 lock() const;
  inline void set_lock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PetSkill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 lock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PetSkill* default_instance_;
};
// -------------------------------------------------------------------

class PvpBattleEndInfo : public ::google::protobuf::Message {
 public:
  PvpBattleEndInfo();
  virtual ~PvpBattleEndInfo();

  PvpBattleEndInfo(const PvpBattleEndInfo& from);

  inline PvpBattleEndInfo& operator=(const PvpBattleEndInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpBattleEndInfo& default_instance();

  void Swap(PvpBattleEndInfo* other);

  // implements Message ----------------------------------------------

  PvpBattleEndInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpBattleEndInfo& from);
  void MergeFrom(const PvpBattleEndInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 WinState = 1 [default = -1];
  inline bool has_winstate() const;
  inline void clear_winstate();
  static const int kWinStateFieldNumber = 1;
  inline ::google::protobuf::int32 winstate() const;
  inline void set_winstate(::google::protobuf::int32 value);

  // optional int32 BeforeRank = 2 [default = -1];
  inline bool has_beforerank() const;
  inline void clear_beforerank();
  static const int kBeforeRankFieldNumber = 2;
  inline ::google::protobuf::int32 beforerank() const;
  inline void set_beforerank(::google::protobuf::int32 value);

  // optional int32 BeforeStar = 3 [default = -1];
  inline bool has_beforestar() const;
  inline void clear_beforestar();
  static const int kBeforeStarFieldNumber = 3;
  inline ::google::protobuf::int32 beforestar() const;
  inline void set_beforestar(::google::protobuf::int32 value);

  // optional int32 AfterRank = 4 [default = -1];
  inline bool has_afterrank() const;
  inline void clear_afterrank();
  static const int kAfterRankFieldNumber = 4;
  inline ::google::protobuf::int32 afterrank() const;
  inline void set_afterrank(::google::protobuf::int32 value);

  // optional int32 AfterStar = 5 [default = -1];
  inline bool has_afterstar() const;
  inline void clear_afterstar();
  static const int kAfterStarFieldNumber = 5;
  inline ::google::protobuf::int32 afterstar() const;
  inline void set_afterstar(::google::protobuf::int32 value);

  // repeated .PvpBattleRewardInfo RewardList = 7;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 7;
  inline const ::PvpBattleRewardInfo& rewardlist(int index) const;
  inline ::PvpBattleRewardInfo* mutable_rewardlist(int index);
  inline ::PvpBattleRewardInfo* add_rewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >&
      rewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >*
      mutable_rewardlist();

  // repeated .PvpEndPlayer LeftPlayerList = 8;
  inline int leftplayerlist_size() const;
  inline void clear_leftplayerlist();
  static const int kLeftPlayerListFieldNumber = 8;
  inline const ::PvpEndPlayer& leftplayerlist(int index) const;
  inline ::PvpEndPlayer* mutable_leftplayerlist(int index);
  inline ::PvpEndPlayer* add_leftplayerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >&
      leftplayerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >*
      mutable_leftplayerlist();

  // repeated .PvpEndPlayer RightPlayerList = 9;
  inline int rightplayerlist_size() const;
  inline void clear_rightplayerlist();
  static const int kRightPlayerListFieldNumber = 9;
  inline const ::PvpEndPlayer& rightplayerlist(int index) const;
  inline ::PvpEndPlayer* mutable_rightplayerlist(int index);
  inline ::PvpEndPlayer* add_rightplayerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >&
      rightplayerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >*
      mutable_rightplayerlist();

  // optional int32 BattleTime = 10 [default = -1];
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattleTimeFieldNumber = 10;
  inline ::google::protobuf::int32 battletime() const;
  inline void set_battletime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpBattleEndInfo)
 private:
  inline void set_has_winstate();
  inline void clear_has_winstate();
  inline void set_has_beforerank();
  inline void clear_has_beforerank();
  inline void set_has_beforestar();
  inline void clear_has_beforestar();
  inline void set_has_afterrank();
  inline void clear_has_afterrank();
  inline void set_has_afterstar();
  inline void clear_has_afterstar();
  inline void set_has_battletime();
  inline void clear_has_battletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 winstate_;
  ::google::protobuf::int32 beforerank_;
  ::google::protobuf::int32 beforestar_;
  ::google::protobuf::int32 afterrank_;
  ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo > rewardlist_;
  ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer > leftplayerlist_;
  ::google::protobuf::int32 afterstar_;
  ::google::protobuf::int32 battletime_;
  ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer > rightplayerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpBattleEndInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpBattleRewardInfo : public ::google::protobuf::Message {
 public:
  PvpBattleRewardInfo();
  virtual ~PvpBattleRewardInfo();

  PvpBattleRewardInfo(const PvpBattleRewardInfo& from);

  inline PvpBattleRewardInfo& operator=(const PvpBattleRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpBattleRewardInfo& default_instance();

  void Swap(PvpBattleRewardInfo* other);

  // implements Message ----------------------------------------------

  PvpBattleRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpBattleRewardInfo& from);
  void MergeFrom(const PvpBattleRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemID = 1 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 ItemCout = 2 [default = -1];
  inline bool has_itemcout() const;
  inline void clear_itemcout();
  static const int kItemCoutFieldNumber = 2;
  inline ::google::protobuf::int32 itemcout() const;
  inline void set_itemcout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvpBattleRewardInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcout();
  inline void clear_has_itemcout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static PvpBattleRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ContactData : public ::google::protobuf::Message {
 public:
  ContactData();
  virtual ~ContactData();

  ContactData(const ContactData& from);

  inline ContactData& operator=(const ContactData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactData& default_instance();

  void Swap(ContactData* other);

  // implements Message ----------------------------------------------

  ContactData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactData& from);
  void MergeFrom(const ContactData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 TeamId = 2 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional string Nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 ConfigId = 4 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 4;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 Level = 5 [default = 1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 ResourceId = 6 [default = -1];
  inline bool has_resourceid() const;
  inline void clear_resourceid();
  static const int kResourceIdFieldNumber = 6;
  inline ::google::protobuf::int32 resourceid() const;
  inline void set_resourceid(::google::protobuf::int32 value);

  // optional string Alias = 8;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 8;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional int32 FamiliarPoint = 10 [default = 0];
  inline bool has_familiarpoint() const;
  inline void clear_familiarpoint();
  static const int kFamiliarPointFieldNumber = 10;
  inline ::google::protobuf::int32 familiarpoint() const;
  inline void set_familiarpoint(::google::protobuf::int32 value);

  // optional int32 OnLine = 11 [default = 0];
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnLineFieldNumber = 11;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // optional int32 CombatValue = 12 [default = -1];
  inline bool has_combatvalue() const;
  inline void clear_combatvalue();
  static const int kCombatValueFieldNumber = 12;
  inline ::google::protobuf::int32 combatvalue() const;
  inline void set_combatvalue(::google::protobuf::int32 value);

  // optional int64 LastLoginTime = 13 [default = -1];
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 13;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ContactData)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_resourceid();
  inline void clear_has_resourceid();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_familiarpoint();
  inline void clear_has_familiarpoint();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_combatvalue();
  inline void clear_has_combatvalue();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 teamid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 level_;
  ::std::string* alias_;
  ::google::protobuf::int32 resourceid_;
  ::google::protobuf::int32 familiarpoint_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::int32 combatvalue_;
  ::google::protobuf::int64 lastlogintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ContactData* default_instance_;
};
// -------------------------------------------------------------------

class ContactGroup : public ::google::protobuf::Message {
 public:
  ContactGroup();
  virtual ~ContactGroup();

  ContactGroup(const ContactGroup& from);

  inline ContactGroup& operator=(const ContactGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactGroup& default_instance();

  void Swap(ContactGroup* other);

  // implements Message ----------------------------------------------

  ContactGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactGroup& from);
  void MergeFrom(const ContactGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GroupName = 1;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 1;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // repeated uint64 GroupRoleIds = 2;
  inline int grouproleids_size() const;
  inline void clear_grouproleids();
  static const int kGroupRoleIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 grouproleids(int index) const;
  inline void set_grouproleids(int index, ::google::protobuf::uint64 value);
  inline void add_grouproleids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      grouproleids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_grouproleids();

  // optional int32 GroupId = 3 [default = -1];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContactGroup)
 private:
  inline void set_has_groupname();
  inline void clear_has_groupname();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* groupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > grouproleids_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ContactGroup* default_instance_;
};
// -------------------------------------------------------------------

class DailyCount : public ::google::protobuf::Message {
 public:
  DailyCount();
  virtual ~DailyCount();

  DailyCount(const DailyCount& from);

  inline DailyCount& operator=(const DailyCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyCount& default_instance();

  void Swap(DailyCount* other);

  // implements Message ----------------------------------------------

  DailyCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyCount& from);
  void MergeFrom(const DailyCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int64 Time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 TimeId = 4 [default = 0];
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeIdFieldNumber = 4;
  inline ::google::protobuf::int32 timeid() const;
  inline void set_timeid(::google::protobuf::int32 value);

  // optional int32 Flag = 5 [default = -1];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DailyCount)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 timeid_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DailyCount* default_instance_;
};
// -------------------------------------------------------------------

class ClimTowerInfo : public ::google::protobuf::Message {
 public:
  ClimTowerInfo();
  virtual ~ClimTowerInfo();

  ClimTowerInfo(const ClimTowerInfo& from);

  inline ClimTowerInfo& operator=(const ClimTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClimTowerInfo& default_instance();

  void Swap(ClimTowerInfo* other);

  // implements Message ----------------------------------------------

  ClimTowerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClimTowerInfo& from);
  void MergeFrom(const ClimTowerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 LastTime = 1 [default = 0];
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 1;
  inline ::google::protobuf::int64 lasttime() const;
  inline void set_lasttime(::google::protobuf::int64 value);

  // optional int32 CurLayer = 2 [default = 1];
  inline bool has_curlayer() const;
  inline void clear_curlayer();
  static const int kCurLayerFieldNumber = 2;
  inline ::google::protobuf::int32 curlayer() const;
  inline void set_curlayer(::google::protobuf::int32 value);

  // optional int32 MaxLayer = 3 [default = 0];
  inline bool has_maxlayer() const;
  inline void clear_maxlayer();
  static const int kMaxLayerFieldNumber = 3;
  inline ::google::protobuf::int32 maxlayer() const;
  inline void set_maxlayer(::google::protobuf::int32 value);

  // optional int64 ResetLayerTime = 12 [default = 0];
  inline bool has_resetlayertime() const;
  inline void clear_resetlayertime();
  static const int kResetLayerTimeFieldNumber = 12;
  inline ::google::protobuf::int64 resetlayertime() const;
  inline void set_resetlayertime(::google::protobuf::int64 value);

  // repeated .FirstVicGet FirstGet = 14;
  inline int firstget_size() const;
  inline void clear_firstget();
  static const int kFirstGetFieldNumber = 14;
  inline const ::FirstVicGet& firstget(int index) const;
  inline ::FirstVicGet* mutable_firstget(int index);
  inline ::FirstVicGet* add_firstget();
  inline const ::google::protobuf::RepeatedPtrField< ::FirstVicGet >&
      firstget() const;
  inline ::google::protobuf::RepeatedPtrField< ::FirstVicGet >*
      mutable_firstget();

  // @@protoc_insertion_point(class_scope:ClimTowerInfo)
 private:
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_curlayer();
  inline void clear_has_curlayer();
  inline void set_has_maxlayer();
  inline void clear_has_maxlayer();
  inline void set_has_resetlayertime();
  inline void clear_has_resetlayertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 lasttime_;
  ::google::protobuf::int32 curlayer_;
  ::google::protobuf::int32 maxlayer_;
  ::google::protobuf::int64 resetlayertime_;
  ::google::protobuf::RepeatedPtrField< ::FirstVicGet > firstget_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ClimTowerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ContactSetting : public ::google::protobuf::Message {
 public:
  ContactSetting();
  virtual ~ContactSetting();

  ContactSetting(const ContactSetting& from);

  inline ContactSetting& operator=(const ContactSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactSetting& default_instance();

  void Swap(ContactSetting* other);

  // implements Message ----------------------------------------------

  ContactSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactSetting& from);
  void MergeFrom(const ContactSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CloseApplyFriend = 1 [default = -1];
  inline bool has_closeapplyfriend() const;
  inline void clear_closeapplyfriend();
  static const int kCloseApplyFriendFieldNumber = 1;
  inline ::google::protobuf::int32 closeapplyfriend() const;
  inline void set_closeapplyfriend(::google::protobuf::int32 value);

  // optional int32 ClearFirend = 2 [default = -1];
  inline bool has_clearfirend() const;
  inline void clear_clearfirend();
  static const int kClearFirendFieldNumber = 2;
  inline ::google::protobuf::int32 clearfirend() const;
  inline void set_clearfirend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContactSetting)
 private:
  inline void set_has_closeapplyfriend();
  inline void clear_has_closeapplyfriend();
  inline void set_has_clearfirend();
  inline void clear_has_clearfirend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 closeapplyfriend_;
  ::google::protobuf::int32 clearfirend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ContactSetting* default_instance_;
};
// -------------------------------------------------------------------

class FirstVicGet : public ::google::protobuf::Message {
 public:
  FirstVicGet();
  virtual ~FirstVicGet();

  FirstVicGet(const FirstVicGet& from);

  inline FirstVicGet& operator=(const FirstVicGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstVicGet& default_instance();

  void Swap(FirstVicGet* other);

  // implements Message ----------------------------------------------

  FirstVicGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstVicGet& from);
  void MergeFrom(const FirstVicGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Get = 2 [default = 0];
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline ::google::protobuf::int32 get() const;
  inline void set_get(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FirstVicGet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_get();
  inline void clear_has_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 get_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static FirstVicGet* default_instance_;
};
// -------------------------------------------------------------------

class ExpressionActionInfo : public ::google::protobuf::Message {
 public:
  ExpressionActionInfo();
  virtual ~ExpressionActionInfo();

  ExpressionActionInfo(const ExpressionActionInfo& from);

  inline ExpressionActionInfo& operator=(const ExpressionActionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpressionActionInfo& default_instance();

  void Swap(ExpressionActionInfo* other);

  // implements Message ----------------------------------------------

  ExpressionActionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpressionActionInfo& from);
  void MergeFrom(const ExpressionActionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ActionId = 1 [default = -1];
  inline bool has_actionid() const;
  inline void clear_actionid();
  static const int kActionIdFieldNumber = 1;
  inline ::google::protobuf::int32 actionid() const;
  inline void set_actionid(::google::protobuf::int32 value);

  // optional bool UnLock = 2 [default = false];
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnLockFieldNumber = 2;
  inline bool unlock() const;
  inline void set_unlock(bool value);

  // @@protoc_insertion_point(class_scope:ExpressionActionInfo)
 private:
  inline void set_has_actionid();
  inline void clear_has_actionid();
  inline void set_has_unlock();
  inline void clear_has_unlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 actionid_;
  bool unlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ExpressionActionInfo* default_instance_;
};
// -------------------------------------------------------------------

class IntPair : public ::google::protobuf::Message {
 public:
  IntPair();
  virtual ~IntPair();

  IntPair(const IntPair& from);

  inline IntPair& operator=(const IntPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntPair& default_instance();

  void Swap(IntPair* other);

  // implements Message ----------------------------------------------

  IntPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntPair& from);
  void MergeFrom(const IntPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Key = 1 [default = -1];
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 Value = 2 [default = -1];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IntPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static IntPair* default_instance_;
};
// -------------------------------------------------------------------

class AddressBook : public ::google::protobuf::Message {
 public:
  AddressBook();
  virtual ~AddressBook();

  AddressBook(const AddressBook& from);

  inline AddressBook& operator=(const AddressBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBook& default_instance();

  void Swap(AddressBook* other);

  // implements Message ----------------------------------------------

  AddressBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBook& from);
  void MergeFrom(const AddressBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ContactData ContactDataList = 1;
  inline int contactdatalist_size() const;
  inline void clear_contactdatalist();
  static const int kContactDataListFieldNumber = 1;
  inline const ::ContactData& contactdatalist(int index) const;
  inline ::ContactData* mutable_contactdatalist(int index);
  inline ::ContactData* add_contactdatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::ContactData >&
      contactdatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContactData >*
      mutable_contactdatalist();

  // repeated .ContactGroup ContactGroups = 2;
  inline int contactgroups_size() const;
  inline void clear_contactgroups();
  static const int kContactGroupsFieldNumber = 2;
  inline const ::ContactGroup& contactgroups(int index) const;
  inline ::ContactGroup* mutable_contactgroups(int index);
  inline ::ContactGroup* add_contactgroups();
  inline const ::google::protobuf::RepeatedPtrField< ::ContactGroup >&
      contactgroups() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContactGroup >*
      mutable_contactgroups();

  // optional .ContactSetting Setting = 3;
  inline bool has_setting() const;
  inline void clear_setting();
  static const int kSettingFieldNumber = 3;
  inline const ::ContactSetting& setting() const;
  inline ::ContactSetting* mutable_setting();
  inline ::ContactSetting* release_setting();
  inline void set_allocated_setting(::ContactSetting* setting);

  // optional .ContactData MyRoleData = 4;
  inline bool has_myroledata() const;
  inline void clear_myroledata();
  static const int kMyRoleDataFieldNumber = 4;
  inline const ::ContactData& myroledata() const;
  inline ::ContactData* mutable_myroledata();
  inline ::ContactData* release_myroledata();
  inline void set_allocated_myroledata(::ContactData* myroledata);

  // repeated int32 SortGroupId = 5;
  inline int sortgroupid_size() const;
  inline void clear_sortgroupid();
  static const int kSortGroupIdFieldNumber = 5;
  inline ::google::protobuf::int32 sortgroupid(int index) const;
  inline void set_sortgroupid(int index, ::google::protobuf::int32 value);
  inline void add_sortgroupid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sortgroupid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sortgroupid();

  // optional .FriendGifPointList GiftPointList = 6;
  inline bool has_giftpointlist() const;
  inline void clear_giftpointlist();
  static const int kGiftPointListFieldNumber = 6;
  inline const ::FriendGifPointList& giftpointlist() const;
  inline ::FriendGifPointList* mutable_giftpointlist();
  inline ::FriendGifPointList* release_giftpointlist();
  inline void set_allocated_giftpointlist(::FriendGifPointList* giftpointlist);

  // repeated .ContactsChatMsg ChatMsgList = 7;
  inline int chatmsglist_size() const;
  inline void clear_chatmsglist();
  static const int kChatMsgListFieldNumber = 7;
  inline const ::ContactsChatMsg& chatmsglist(int index) const;
  inline ::ContactsChatMsg* mutable_chatmsglist(int index);
  inline ::ContactsChatMsg* add_chatmsglist();
  inline const ::google::protobuf::RepeatedPtrField< ::ContactsChatMsg >&
      chatmsglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContactsChatMsg >*
      mutable_chatmsglist();

  // @@protoc_insertion_point(class_scope:AddressBook)
 private:
  inline void set_has_setting();
  inline void clear_has_setting();
  inline void set_has_myroledata();
  inline void clear_has_myroledata();
  inline void set_has_giftpointlist();
  inline void clear_has_giftpointlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ContactData > contactdatalist_;
  ::google::protobuf::RepeatedPtrField< ::ContactGroup > contactgroups_;
  ::ContactSetting* setting_;
  ::ContactData* myroledata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sortgroupid_;
  ::FriendGifPointList* giftpointlist_;
  ::google::protobuf::RepeatedPtrField< ::ContactsChatMsg > chatmsglist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AddressBook* default_instance_;
};
// -------------------------------------------------------------------

class AuctionItem : public ::google::protobuf::Message {
 public:
  AuctionItem();
  virtual ~AuctionItem();

  AuctionItem(const AuctionItem& from);

  inline AuctionItem& operator=(const AuctionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionItem& default_instance();

  void Swap(AuctionItem* other);

  // implements Message ----------------------------------------------

  AuctionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionItem& from);
  void MergeFrom(const AuctionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 OwnerGuid = 1 [default = 0];
  inline bool has_ownerguid() const;
  inline void clear_ownerguid();
  static const int kOwnerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 ownerguid() const;
  inline void set_ownerguid(::google::protobuf::uint64 value);

  // optional int32 Price = 2 [default = 1];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 Currency = 3 [default = 1];
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 3;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional .ItemData ItemData = 4;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 4;
  inline const ::ItemData& itemdata() const;
  inline ::ItemData* mutable_itemdata();
  inline ::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::ItemData* itemdata);

  // optional int32 Status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 SaleTS = 6 [default = -1];
  inline bool has_salets() const;
  inline void clear_salets();
  static const int kSaleTSFieldNumber = 6;
  inline ::google::protobuf::int32 salets() const;
  inline void set_salets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionItem)
 private:
  inline void set_has_ownerguid();
  inline void clear_has_ownerguid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_salets();
  inline void clear_has_salets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ownerguid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 currency_;
  ::ItemData* itemdata_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 salets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AuctionItem* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRecSimple : public ::google::protobuf::Message {
 public:
  AuctionRecSimple();
  virtual ~AuctionRecSimple();

  AuctionRecSimple(const AuctionRecSimple& from);

  inline AuctionRecSimple& operator=(const AuctionRecSimple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRecSimple& default_instance();

  void Swap(AuctionRecSimple* other);

  // implements Message ----------------------------------------------

  AuctionRecSimple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRecSimple& from);
  void MergeFrom(const AuctionRecSimple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecGuid = 1 [default = 0];
  inline bool has_recguid() const;
  inline void clear_recguid();
  static const int kRecGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 recguid() const;
  inline void set_recguid(::google::protobuf::uint64 value);

  // optional int32 SoldTS = 2 [default = -1];
  inline bool has_soldts() const;
  inline void clear_soldts();
  static const int kSoldTSFieldNumber = 2;
  inline ::google::protobuf::int32 soldts() const;
  inline void set_soldts(::google::protobuf::int32 value);

  // optional int32 ItemId = 3 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Count = 7 [default = -1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 Currency = 8 [default = -1];
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 8;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional int32 Cost = 9 [default = -1];
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 9;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 SoldType = 10 [default = -1];
  inline bool has_soldtype() const;
  inline void clear_soldtype();
  static const int kSoldTypeFieldNumber = 10;
  inline ::google::protobuf::int32 soldtype() const;
  inline void set_soldtype(::google::protobuf::int32 value);

  // optional int32 Tax = 11 [default = -1];
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 11;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // optional bool IsGot = 12 [default = false];
  inline bool has_isgot() const;
  inline void clear_isgot();
  static const int kIsGotFieldNumber = 12;
  inline bool isgot() const;
  inline void set_isgot(bool value);

  // @@protoc_insertion_point(class_scope:AuctionRecSimple)
 private:
  inline void set_has_recguid();
  inline void clear_has_recguid();
  inline void set_has_soldts();
  inline void clear_has_soldts();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_soldtype();
  inline void clear_has_soldtype();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_isgot();
  inline void clear_has_isgot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 recguid_;
  ::google::protobuf::int32 soldts_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 soldtype_;
  ::google::protobuf::int32 tax_;
  bool isgot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AuctionRecSimple* default_instance_;
};
// -------------------------------------------------------------------

class AuctionRecDetail : public ::google::protobuf::Message {
 public:
  AuctionRecDetail();
  virtual ~AuctionRecDetail();

  AuctionRecDetail(const AuctionRecDetail& from);

  inline AuctionRecDetail& operator=(const AuctionRecDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionRecDetail& default_instance();

  void Swap(AuctionRecDetail* other);

  // implements Message ----------------------------------------------

  AuctionRecDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionRecDetail& from);
  void MergeFrom(const AuctionRecDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BuyGuid = 1 [default = 0];
  inline bool has_buyguid() const;
  inline void clear_buyguid();
  static const int kBuyGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 buyguid() const;
  inline void set_buyguid(::google::protobuf::uint64 value);

  // optional int32 SoldTS = 2 [default = -1];
  inline bool has_soldts() const;
  inline void clear_soldts();
  static const int kSoldTSFieldNumber = 2;
  inline ::google::protobuf::int32 soldts() const;
  inline void set_soldts(::google::protobuf::int32 value);

  // optional .AuctionItem AuctionItem = 3;
  inline bool has_auctionitem() const;
  inline void clear_auctionitem();
  static const int kAuctionItemFieldNumber = 3;
  inline const ::AuctionItem& auctionitem() const;
  inline ::AuctionItem* mutable_auctionitem();
  inline ::AuctionItem* release_auctionitem();
  inline void set_allocated_auctionitem(::AuctionItem* auctionitem);

  // optional bool IsGot = 4 [default = false];
  inline bool has_isgot() const;
  inline void clear_isgot();
  static const int kIsGotFieldNumber = 4;
  inline bool isgot() const;
  inline void set_isgot(bool value);

  // optional int32 Cost = 6 [default = -1];
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 6;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 Tax = 7 [default = -1];
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 7;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // optional int32 Currency = 8 [default = -1];
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 8;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional uint64 RecGuid = 9 [default = 0];
  inline bool has_recguid() const;
  inline void clear_recguid();
  static const int kRecGuidFieldNumber = 9;
  inline ::google::protobuf::uint64 recguid() const;
  inline void set_recguid(::google::protobuf::uint64 value);

  // optional bool NewItemGuid = 10 [default = false];
  inline bool has_newitemguid() const;
  inline void clear_newitemguid();
  static const int kNewItemGuidFieldNumber = 10;
  inline bool newitemguid() const;
  inline void set_newitemguid(bool value);

  // optional int32 SoldType = 11 [default = -1];
  inline bool has_soldtype() const;
  inline void clear_soldtype();
  static const int kSoldTypeFieldNumber = 11;
  inline ::google::protobuf::int32 soldtype() const;
  inline void set_soldtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionRecDetail)
 private:
  inline void set_has_buyguid();
  inline void clear_has_buyguid();
  inline void set_has_soldts();
  inline void clear_has_soldts();
  inline void set_has_auctionitem();
  inline void clear_has_auctionitem();
  inline void set_has_isgot();
  inline void clear_has_isgot();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_recguid();
  inline void clear_has_recguid();
  inline void set_has_newitemguid();
  inline void clear_has_newitemguid();
  inline void set_has_soldtype();
  inline void clear_has_soldtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 buyguid_;
  ::AuctionItem* auctionitem_;
  ::google::protobuf::int32 soldts_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 tax_;
  bool isgot_;
  bool newitemguid_;
  ::google::protobuf::uint64 recguid_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 soldtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AuctionRecDetail* default_instance_;
};
// -------------------------------------------------------------------

class MercenaryInfo : public ::google::protobuf::Message {
 public:
  MercenaryInfo();
  virtual ~MercenaryInfo();

  MercenaryInfo(const MercenaryInfo& from);

  inline MercenaryInfo& operator=(const MercenaryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MercenaryInfo& default_instance();

  void Swap(MercenaryInfo* other);

  // implements Message ----------------------------------------------

  MercenaryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MercenaryInfo& from);
  void MergeFrom(const MercenaryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MercenaryInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MercenaryInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleID = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string RoleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 ConfigID = 3 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 3;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional uint64 GuildID = 4 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIDFieldNumber = 4;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 5;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 5;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional int32 PetID = 6 [default = -1];
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 6;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional int32 PetLevel = 7 [default = -1];
  inline bool has_petlevel() const;
  inline void clear_petlevel();
  static const int kPetLevelFieldNumber = 7;
  inline ::google::protobuf::int32 petlevel() const;
  inline void set_petlevel(::google::protobuf::int32 value);

  // optional int32 TreasureCount = 8 [default = -1];
  inline bool has_treasurecount() const;
  inline void clear_treasurecount();
  static const int kTreasureCountFieldNumber = 8;
  inline ::google::protobuf::int32 treasurecount() const;
  inline void set_treasurecount(::google::protobuf::int32 value);

  // optional int32 TreasureLevel = 9 [default = -1];
  inline bool has_treasurelevel() const;
  inline void clear_treasurelevel();
  static const int kTreasureLevelFieldNumber = 9;
  inline ::google::protobuf::int32 treasurelevel() const;
  inline void set_treasurelevel(::google::protobuf::int32 value);

  // optional int32 Score = 10 [default = -1];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 10;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 Level = 11 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 GuildFlagID = 12 [default = -1];
  inline bool has_guildflagid() const;
  inline void clear_guildflagid();
  static const int kGuildFlagIDFieldNumber = 12;
  inline ::google::protobuf::int32 guildflagid() const;
  inline void set_guildflagid(::google::protobuf::int32 value);

  // optional int32 WinCount = 13 [default = -1];
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWinCountFieldNumber = 13;
  inline ::google::protobuf::int32 wincount() const;
  inline void set_wincount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_petlevel();
  inline void clear_has_petlevel();
  inline void set_has_treasurecount();
  inline void clear_has_treasurecount();
  inline void set_has_treasurelevel();
  inline void clear_has_treasurelevel();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_guildflagid();
  inline void clear_has_guildflagid();
  inline void set_has_wincount();
  inline void clear_has_wincount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 petid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 petlevel_;
  ::google::protobuf::int32 treasurecount_;
  ::google::protobuf::int32 treasurelevel_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 guildflagid_;
  ::google::protobuf::int32 wincount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class AuctionItemCnt : public ::google::protobuf::Message {
 public:
  AuctionItemCnt();
  virtual ~AuctionItemCnt();

  AuctionItemCnt(const AuctionItemCnt& from);

  inline AuctionItemCnt& operator=(const AuctionItemCnt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionItemCnt& default_instance();

  void Swap(AuctionItemCnt* other);

  // implements Message ----------------------------------------------

  AuctionItemCnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionItemCnt& from);
  void MergeFrom(const AuctionItemCnt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Count = 2 [default = -1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AuctionItemCnt)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AuctionItemCnt* default_instance_;
};
// -------------------------------------------------------------------

class RedDotInfo : public ::google::protobuf::Message {
 public:
  RedDotInfo();
  virtual ~RedDotInfo();

  RedDotInfo(const RedDotInfo& from);

  inline RedDotInfo& operator=(const RedDotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDotInfo& default_instance();

  void Swap(RedDotInfo* other);

  // implements Message ----------------------------------------------

  RedDotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDotInfo& from);
  void MergeFrom(const RedDotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 IsLight = 2 [default = -1];
  inline bool has_islight() const;
  inline void clear_islight();
  static const int kIsLightFieldNumber = 2;
  inline ::google::protobuf::int32 islight() const;
  inline void set_islight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RedDotInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_islight();
  inline void clear_has_islight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 islight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static RedDotInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendGiftPoint : public ::google::protobuf::Message {
 public:
  FriendGiftPoint();
  virtual ~FriendGiftPoint();

  FriendGiftPoint(const FriendGiftPoint& from);

  inline FriendGiftPoint& operator=(const FriendGiftPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendGiftPoint& default_instance();

  void Swap(FriendGiftPoint* other);

  // implements Message ----------------------------------------------

  FriendGiftPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendGiftPoint& from);
  void MergeFrom(const FriendGiftPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 Point = 2 [default = 0];
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendGiftPoint)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static FriendGiftPoint* default_instance_;
};
// -------------------------------------------------------------------

class FriendGifPointList : public ::google::protobuf::Message {
 public:
  FriendGifPointList();
  virtual ~FriendGifPointList();

  FriendGifPointList(const FriendGifPointList& from);

  inline FriendGifPointList& operator=(const FriendGifPointList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendGifPointList& default_instance();

  void Swap(FriendGifPointList* other);

  // implements Message ----------------------------------------------

  FriendGifPointList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendGifPointList& from);
  void MergeFrom(const FriendGifPointList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FriendGiftPoint SentGiftList = 1;
  inline int sentgiftlist_size() const;
  inline void clear_sentgiftlist();
  static const int kSentGiftListFieldNumber = 1;
  inline const ::FriendGiftPoint& sentgiftlist(int index) const;
  inline ::FriendGiftPoint* mutable_sentgiftlist(int index);
  inline ::FriendGiftPoint* add_sentgiftlist();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
      sentgiftlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
      mutable_sentgiftlist();

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  inline int acquiregiftlist_size() const;
  inline void clear_acquiregiftlist();
  static const int kAcquireGiftListFieldNumber = 2;
  inline const ::FriendGiftPoint& acquiregiftlist(int index) const;
  inline ::FriendGiftPoint* mutable_acquiregiftlist(int index);
  inline ::FriendGiftPoint* add_acquiregiftlist();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
      acquiregiftlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
      mutable_acquiregiftlist();

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  inline int unacquiregiftlist_size() const;
  inline void clear_unacquiregiftlist();
  static const int kUnAcquireGiftListFieldNumber = 3;
  inline const ::FriendGiftPoint& unacquiregiftlist(int index) const;
  inline ::FriendGiftPoint* mutable_unacquiregiftlist(int index);
  inline ::FriendGiftPoint* add_unacquiregiftlist();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
      unacquiregiftlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
      mutable_unacquiregiftlist();

  // @@protoc_insertion_point(class_scope:FriendGifPointList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint > sentgiftlist_;
  ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint > acquiregiftlist_;
  ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint > unacquiregiftlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static FriendGifPointList* default_instance_;
};
// -------------------------------------------------------------------

class DungeonTargetContent : public ::google::protobuf::Message {
 public:
  DungeonTargetContent();
  virtual ~DungeonTargetContent();

  DungeonTargetContent(const DungeonTargetContent& from);

  inline DungeonTargetContent& operator=(const DungeonTargetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonTargetContent& default_instance();

  void Swap(DungeonTargetContent* other);

  // implements Message ----------------------------------------------

  DungeonTargetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonTargetContent& from);
  void MergeFrom(const DungeonTargetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = -1];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 TemplateId = 2 [default = -1];
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // optional int32 MaxCount = 3 [default = -1];
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxCountFieldNumber = 3;
  inline ::google::protobuf::int32 maxcount() const;
  inline void set_maxcount(::google::protobuf::int32 value);

  // optional int32 CurCount = 4 [default = -1];
  inline bool has_curcount() const;
  inline void clear_curcount();
  static const int kCurCountFieldNumber = 4;
  inline ::google::protobuf::int32 curcount() const;
  inline void set_curcount(::google::protobuf::int32 value);

  // optional int32 Description = 5 [default = -1];
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline ::google::protobuf::int32 description() const;
  inline void set_description(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DungeonTargetContent)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_templateid();
  inline void clear_has_templateid();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_curcount();
  inline void clear_has_curcount();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 maxcount_;
  ::google::protobuf::int32 curcount_;
  ::google::protobuf::int32 description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DungeonTargetContent* default_instance_;
};
// -------------------------------------------------------------------

class DungeonTarget : public ::google::protobuf::Message {
 public:
  DungeonTarget();
  virtual ~DungeonTarget();

  DungeonTarget(const DungeonTarget& from);

  inline DungeonTarget& operator=(const DungeonTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonTarget& default_instance();

  void Swap(DungeonTarget* other);

  // implements Message ----------------------------------------------

  DungeonTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DungeonTarget& from);
  void MergeFrom(const DungeonTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TypeId = 1 [default = -1];
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 Index = 2 [default = -1];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .DungeonTargetContent TargetContent = 3;
  inline int targetcontent_size() const;
  inline void clear_targetcontent();
  static const int kTargetContentFieldNumber = 3;
  inline const ::DungeonTargetContent& targetcontent(int index) const;
  inline ::DungeonTargetContent* mutable_targetcontent(int index);
  inline ::DungeonTargetContent* add_targetcontent();
  inline const ::google::protobuf::RepeatedPtrField< ::DungeonTargetContent >&
      targetcontent() const;
  inline ::google::protobuf::RepeatedPtrField< ::DungeonTargetContent >*
      mutable_targetcontent();

  // optional int32 Description = 4 [default = -1];
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline ::google::protobuf::int32 description() const;
  inline void set_description(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DungeonTarget)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 index_;
  ::google::protobuf::RepeatedPtrField< ::DungeonTargetContent > targetcontent_;
  ::google::protobuf::int32 description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static DungeonTarget* default_instance_;
};
// -------------------------------------------------------------------

class MailItem : public ::google::protobuf::Message {
 public:
  MailItem();
  virtual ~MailItem();

  MailItem(const MailItem& from);

  inline MailItem& operator=(const MailItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailItem& default_instance();

  void Swap(MailItem* other);

  // implements Message ----------------------------------------------

  MailItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailItem& from);
  void MergeFrom(const MailItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemID = 1 [default = -1];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 ItemCount = 2 [default = -1];
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // optional bool Transit = 3 [default = false];
  inline bool has_transit() const;
  inline void clear_transit();
  static const int kTransitFieldNumber = 3;
  inline bool transit() const;
  inline void set_transit(bool value);

  // @@protoc_insertion_point(class_scope:MailItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_transit();
  inline void clear_has_transit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcount_;
  bool transit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MailItem* default_instance_;
};
// -------------------------------------------------------------------

class ObjCreateInfo : public ::google::protobuf::Message {
 public:
  ObjCreateInfo();
  virtual ~ObjCreateInfo();

  ObjCreateInfo(const ObjCreateInfo& from);

  inline ObjCreateInfo& operator=(const ObjCreateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCreateInfo& default_instance();

  void Swap(ObjCreateInfo* other);

  // implements Message ----------------------------------------------

  ObjCreateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCreateInfo& from);
  void MergeFrom(const ObjCreateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ObjId = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional .Vector3 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // optional float Dir = 3 [default = -1];
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional int32 Status = 4 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional .Vector3 TargetPos = 5;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 5;
  inline const ::Vector3& targetpos() const;
  inline ::Vector3* mutable_targetpos();
  inline ::Vector3* release_targetpos();
  inline void set_allocated_targetpos(::Vector3* targetpos);

  // optional bytes ObjData = 6;
  inline bool has_objdata() const;
  inline void clear_objdata();
  static const int kObjDataFieldNumber = 6;
  inline const ::std::string& objdata() const;
  inline void set_objdata(const ::std::string& value);
  inline void set_objdata(const char* value);
  inline void set_objdata(const void* value, size_t size);
  inline ::std::string* mutable_objdata();
  inline ::std::string* release_objdata();
  inline void set_allocated_objdata(::std::string* objdata);

  // @@protoc_insertion_point(class_scope:ObjCreateInfo)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_objdata();
  inline void clear_has_objdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Vector3* pos_;
  ::google::protobuf::int32 objid_;
  float dir_;
  ::Vector3* targetpos_;
  ::std::string* objdata_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ObjCreateInfo* default_instance_;
};
// -------------------------------------------------------------------

class ObjDeleteInfo : public ::google::protobuf::Message {
 public:
  ObjDeleteInfo();
  virtual ~ObjDeleteInfo();

  ObjDeleteInfo(const ObjDeleteInfo& from);

  inline ObjDeleteInfo& operator=(const ObjDeleteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjDeleteInfo& default_instance();

  void Swap(ObjDeleteInfo* other);

  // implements Message ----------------------------------------------

  ObjDeleteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjDeleteInfo& from);
  void MergeFrom(const ObjDeleteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ObjId = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional int32 SceneId = 2 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ObjDeleteInfo)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ObjDeleteInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchLimit : public ::google::protobuf::Message {
 public:
  MatchLimit();
  virtual ~MatchLimit();

  MatchLimit(const MatchLimit& from);

  inline MatchLimit& operator=(const MatchLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchLimit& default_instance();

  void Swap(MatchLimit* other);

  // implements Message ----------------------------------------------

  MatchLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchLimit& from);
  void MergeFrom(const MatchLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MinIntegral = 1 [default = 0];
  inline bool has_minintegral() const;
  inline void clear_minintegral();
  static const int kMinIntegralFieldNumber = 1;
  inline ::google::protobuf::int32 minintegral() const;
  inline void set_minintegral(::google::protobuf::int32 value);

  // optional int32 MinSection = 2 [default = 0];
  inline bool has_minsection() const;
  inline void clear_minsection();
  static const int kMinSectionFieldNumber = 2;
  inline ::google::protobuf::int32 minsection() const;
  inline void set_minsection(::google::protobuf::int32 value);

  // optional int32 MinLevel = 3 [default = 0];
  inline bool has_minlevel() const;
  inline void clear_minlevel();
  static const int kMinLevelFieldNumber = 3;
  inline ::google::protobuf::int32 minlevel() const;
  inline void set_minlevel(::google::protobuf::int32 value);

  // optional int32 MaxLevel = 4 [default = 0];
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 4;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 MaxIntegral = 5 [default = 0];
  inline bool has_maxintegral() const;
  inline void clear_maxintegral();
  static const int kMaxIntegralFieldNumber = 5;
  inline ::google::protobuf::int32 maxintegral() const;
  inline void set_maxintegral(::google::protobuf::int32 value);

  // optional int32 MaxSection = 6 [default = 0];
  inline bool has_maxsection() const;
  inline void clear_maxsection();
  static const int kMaxSectionFieldNumber = 6;
  inline ::google::protobuf::int32 maxsection() const;
  inline void set_maxsection(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchLimit)
 private:
  inline void set_has_minintegral();
  inline void clear_has_minintegral();
  inline void set_has_minsection();
  inline void clear_has_minsection();
  inline void set_has_minlevel();
  inline void clear_has_minlevel();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_maxintegral();
  inline void clear_has_maxintegral();
  inline void set_has_maxsection();
  inline void clear_has_maxsection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 minintegral_;
  ::google::protobuf::int32 minsection_;
  ::google::protobuf::int32 minlevel_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 maxintegral_;
  ::google::protobuf::int32 maxsection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MatchLimit* default_instance_;
};
// -------------------------------------------------------------------

class MatchRankInfo : public ::google::protobuf::Message {
 public:
  MatchRankInfo();
  virtual ~MatchRankInfo();

  MatchRankInfo(const MatchRankInfo& from);

  inline MatchRankInfo& operator=(const MatchRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchRankInfo& default_instance();

  void Swap(MatchRankInfo* other);

  // implements Message ----------------------------------------------

  MatchRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchRankInfo& from);
  void MergeFrom(const MatchRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Integral = 1 [default = 0];
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 1;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 Section = 2 [default = 0];
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 2;
  inline ::google::protobuf::int32 section() const;
  inline void set_section(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchRankInfo)
 private:
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_section();
  inline void clear_has_section();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 section_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MatchRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchTargetInfo : public ::google::protobuf::Message {
 public:
  MatchTargetInfo();
  virtual ~MatchTargetInfo();

  MatchTargetInfo(const MatchTargetInfo& from);

  inline MatchTargetInfo& operator=(const MatchTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchTargetInfo& default_instance();

  void Swap(MatchTargetInfo* other);

  // implements Message ----------------------------------------------

  MatchTargetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchTargetInfo& from);
  void MergeFrom(const MatchTargetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 DungeonConfigId = 1 [default = -1];
  inline bool has_dungeonconfigid() const;
  inline void clear_dungeonconfigid();
  static const int kDungeonConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 dungeonconfigid() const;
  inline void set_dungeonconfigid(::google::protobuf::int32 value);

  // optional int32 SceneConfigId = 2 [default = -1];
  inline bool has_sceneconfigid() const;
  inline void clear_sceneconfigid();
  static const int kSceneConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneconfigid() const;
  inline void set_sceneconfigid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchTargetInfo)
 private:
  inline void set_has_dungeonconfigid();
  inline void clear_has_dungeonconfigid();
  inline void set_has_sceneconfigid();
  inline void clear_has_sceneconfigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dungeonconfigid_;
  ::google::protobuf::int32 sceneconfigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static MatchTargetInfo* default_instance_;
};
// -------------------------------------------------------------------

class ActivityTime : public ::google::protobuf::Message {
 public:
  ActivityTime();
  virtual ~ActivityTime();

  ActivityTime(const ActivityTime& from);

  inline ActivityTime& operator=(const ActivityTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityTime& default_instance();

  void Swap(ActivityTime* other);

  // implements Message ----------------------------------------------

  ActivityTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityTime& from);
  void MergeFrom(const ActivityTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Begin = 1 [default = -1];
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::google::protobuf::int64 begin() const;
  inline void set_begin(::google::protobuf::int64 value);

  // optional int64 End = 2 [default = -1];
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::int64 end() const;
  inline void set_end(::google::protobuf::int64 value);

  // optional int32 Id = 3 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivityTime)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ActivityTime* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionInfo : public ::google::protobuf::Message {
 public:
  ProfessionInfo();
  virtual ~ProfessionInfo();

  ProfessionInfo(const ProfessionInfo& from);

  inline ProfessionInfo& operator=(const ProfessionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionInfo& default_instance();

  void Swap(ProfessionInfo* other);

  // implements Message ----------------------------------------------

  ProfessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionInfo& from);
  void MergeFrom(const ProfessionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = -1];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated int32 SkillList = 2;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 2;
  inline ::google::protobuf::int32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::int32 value);
  inline void add_skilllist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skilllist();

  // @@protoc_insertion_point(class_scope:ProfessionInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skilllist_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ProfessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class SpecLoginReward : public ::google::protobuf::Message {
 public:
  SpecLoginReward();
  virtual ~SpecLoginReward();

  SpecLoginReward(const SpecLoginReward& from);

  inline SpecLoginReward& operator=(const SpecLoginReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecLoginReward& default_instance();

  void Swap(SpecLoginReward* other);

  // implements Message ----------------------------------------------

  SpecLoginReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecLoginReward& from);
  void MergeFrom(const SpecLoginReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = -1];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 Get = 2 [default = -1];
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline ::google::protobuf::int32 get() const;
  inline void set_get(::google::protobuf::int32 value);

  // optional int64 SetTime = 3 [default = -1];
  inline bool has_settime() const;
  inline void clear_settime();
  static const int kSetTimeFieldNumber = 3;
  inline ::google::protobuf::int64 settime() const;
  inline void set_settime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SpecLoginReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_settime();
  inline void clear_has_settime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 get_;
  ::google::protobuf::int64 settime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SpecLoginReward* default_instance_;
};
// -------------------------------------------------------------------

class SpecLoginInfo : public ::google::protobuf::Message {
 public:
  SpecLoginInfo();
  virtual ~SpecLoginInfo();

  SpecLoginInfo(const SpecLoginInfo& from);

  inline SpecLoginInfo& operator=(const SpecLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecLoginInfo& default_instance();

  void Swap(SpecLoginInfo* other);

  // implements Message ----------------------------------------------

  SpecLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecLoginInfo& from);
  void MergeFrom(const SpecLoginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 BeginTime = 2 [default = -1];
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 EndTime = 3 [default = -1];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // repeated .SpecLoginReward RewardInfo = 4;
  inline int rewardinfo_size() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 4;
  inline const ::SpecLoginReward& rewardinfo(int index) const;
  inline ::SpecLoginReward* mutable_rewardinfo(int index);
  inline ::SpecLoginReward* add_rewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SpecLoginReward >&
      rewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SpecLoginReward >*
      mutable_rewardinfo();

  // optional int32 State = 5 [default = -1];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SpecLoginInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedPtrField< ::SpecLoginReward > rewardinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SpecLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class ContactsChatMsg : public ::google::protobuf::Message {
 public:
  ContactsChatMsg();
  virtual ~ContactsChatMsg();

  ContactsChatMsg(const ContactsChatMsg& from);

  inline ContactsChatMsg& operator=(const ContactsChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactsChatMsg& default_instance();

  void Swap(ContactsChatMsg* other);

  // implements Message ----------------------------------------------

  ContactsChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactsChatMsg& from);
  void MergeFrom(const ContactsChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional bool HasNewMsg = 2 [default = false];
  inline bool has_hasnewmsg() const;
  inline void clear_hasnewmsg();
  static const int kHasNewMsgFieldNumber = 2;
  inline bool hasnewmsg() const;
  inline void set_hasnewmsg(bool value);

  // repeated .ChatInfo CharInfoList = 3;
  inline int charinfolist_size() const;
  inline void clear_charinfolist();
  static const int kCharInfoListFieldNumber = 3;
  inline const ::ChatInfo& charinfolist(int index) const;
  inline ::ChatInfo* mutable_charinfolist(int index);
  inline ::ChatInfo* add_charinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
      charinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
      mutable_charinfolist();

  // @@protoc_insertion_point(class_scope:ContactsChatMsg)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_hasnewmsg();
  inline void clear_has_hasnewmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::RepeatedPtrField< ::ChatInfo > charinfolist_;
  bool hasnewmsg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ContactsChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class Vector3Int : public ::google::protobuf::Message {
 public:
  Vector3Int();
  virtual ~Vector3Int();

  Vector3Int(const Vector3Int& from);

  inline Vector3Int& operator=(const Vector3Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3Int& default_instance();

  void Swap(Vector3Int* other);

  // implements Message ----------------------------------------------

  Vector3Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3Int& from);
  void MergeFrom(const Vector3Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 X = 1 [default = -1];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Z = 2 [default = -1];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 2;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Vector3Int)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Vector3Int* default_instance_;
};
// -------------------------------------------------------------------

class AppendString : public ::google::protobuf::Message {
 public:
  AppendString();
  virtual ~AppendString();

  AppendString(const AppendString& from);

  inline AppendString& operator=(const AppendString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendString& default_instance();

  void Swap(AppendString* other);

  // implements Message ----------------------------------------------

  AppendString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendString& from);
  void MergeFrom(const AppendString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TransID = 1 [default = -1];
  inline bool has_transid() const;
  inline void clear_transid();
  static const int kTransIDFieldNumber = 1;
  inline ::google::protobuf::int32 transid() const;
  inline void set_transid(::google::protobuf::int32 value);

  // optional int32 Key = 2 [default = -1];
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // repeated string StringList = 3;
  inline int stringlist_size() const;
  inline void clear_stringlist();
  static const int kStringListFieldNumber = 3;
  inline const ::std::string& stringlist(int index) const;
  inline ::std::string* mutable_stringlist(int index);
  inline void set_stringlist(int index, const ::std::string& value);
  inline void set_stringlist(int index, const char* value);
  inline void set_stringlist(int index, const char* value, size_t size);
  inline ::std::string* add_stringlist();
  inline void add_stringlist(const ::std::string& value);
  inline void add_stringlist(const char* value);
  inline void add_stringlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stringlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stringlist();

  // @@protoc_insertion_point(class_scope:AppendString)
 private:
  inline void set_has_transid();
  inline void clear_has_transid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 transid_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stringlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AppendString* default_instance_;
};
// -------------------------------------------------------------------

class AppendStringList : public ::google::protobuf::Message {
 public:
  AppendStringList();
  virtual ~AppendStringList();

  AppendStringList(const AppendStringList& from);

  inline AppendStringList& operator=(const AppendStringList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendStringList& default_instance();

  void Swap(AppendStringList* other);

  // implements Message ----------------------------------------------

  AppendStringList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendStringList& from);
  void MergeFrom(const AppendStringList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AppendString StringAppendList = 1;
  inline int stringappendlist_size() const;
  inline void clear_stringappendlist();
  static const int kStringAppendListFieldNumber = 1;
  inline const ::AppendString& stringappendlist(int index) const;
  inline ::AppendString* mutable_stringappendlist(int index);
  inline ::AppendString* add_stringappendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::AppendString >&
      stringappendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::AppendString >*
      mutable_stringappendlist();

  // @@protoc_insertion_point(class_scope:AppendStringList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AppendString > stringappendlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static AppendStringList* default_instance_;
};
// -------------------------------------------------------------------

class StarBattlePlayerInfo : public ::google::protobuf::Message {
 public:
  StarBattlePlayerInfo();
  virtual ~StarBattlePlayerInfo();

  StarBattlePlayerInfo(const StarBattlePlayerInfo& from);

  inline StarBattlePlayerInfo& operator=(const StarBattlePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarBattlePlayerInfo& default_instance();

  void Swap(StarBattlePlayerInfo* other);

  // implements Message ----------------------------------------------

  StarBattlePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarBattlePlayerInfo& from);
  void MergeFrom(const StarBattlePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Playerguid = 1 [default = 0];
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // optional string Playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 Level = 3 [default = -1];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 RoleID = 5 [default = -1];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StarBattlePlayerInfo)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::std::string* playername_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static StarBattlePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class StarBattleInfo : public ::google::protobuf::Message {
 public:
  StarBattleInfo();
  virtual ~StarBattleInfo();

  StarBattleInfo(const StarBattleInfo& from);

  inline StarBattleInfo& operator=(const StarBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarBattleInfo& default_instance();

  void Swap(StarBattleInfo* other);

  // implements Message ----------------------------------------------

  StarBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarBattleInfo& from);
  void MergeFrom(const StarBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .StarBattleTeamInfo ServerFast = 3;
  inline bool has_serverfast() const;
  inline void clear_serverfast();
  static const int kServerFastFieldNumber = 3;
  inline const ::StarBattleTeamInfo& serverfast() const;
  inline ::StarBattleTeamInfo* mutable_serverfast();
  inline ::StarBattleTeamInfo* release_serverfast();
  inline void set_allocated_serverfast(::StarBattleTeamInfo* serverfast);

  // optional .StarBattleTeamInfo ServerFirst = 4;
  inline bool has_serverfirst() const;
  inline void clear_serverfirst();
  static const int kServerFirstFieldNumber = 4;
  inline const ::StarBattleTeamInfo& serverfirst() const;
  inline ::StarBattleTeamInfo* mutable_serverfirst();
  inline ::StarBattleTeamInfo* release_serverfirst();
  inline void set_allocated_serverfirst(::StarBattleTeamInfo* serverfirst);

  // optional .StarBattleTeamInfo ServerWeekFast = 5;
  inline bool has_serverweekfast() const;
  inline void clear_serverweekfast();
  static const int kServerWeekFastFieldNumber = 5;
  inline const ::StarBattleTeamInfo& serverweekfast() const;
  inline ::StarBattleTeamInfo* mutable_serverweekfast();
  inline ::StarBattleTeamInfo* release_serverweekfast();
  inline void set_allocated_serverweekfast(::StarBattleTeamInfo* serverweekfast);

  // optional int32 Id = 6 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Npcid = 7 [default = -1];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 7;
  inline ::google::protobuf::int32 npcid() const;
  inline void set_npcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StarBattleInfo)
 private:
  inline void set_has_serverfast();
  inline void clear_has_serverfast();
  inline void set_has_serverfirst();
  inline void clear_has_serverfirst();
  inline void set_has_serverweekfast();
  inline void clear_has_serverweekfast();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::StarBattleTeamInfo* serverfast_;
  ::StarBattleTeamInfo* serverfirst_;
  ::StarBattleTeamInfo* serverweekfast_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 npcid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static StarBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class StarBattleTeamInfo : public ::google::protobuf::Message {
 public:
  StarBattleTeamInfo();
  virtual ~StarBattleTeamInfo();

  StarBattleTeamInfo(const StarBattleTeamInfo& from);

  inline StarBattleTeamInfo& operator=(const StarBattleTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarBattleTeamInfo& default_instance();

  void Swap(StarBattleTeamInfo* other);

  // implements Message ----------------------------------------------

  StarBattleTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarBattleTeamInfo& from);
  void MergeFrom(const StarBattleTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 PassTime = 1 [default = -1];
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 1;
  inline ::google::protobuf::int64 passtime() const;
  inline void set_passtime(::google::protobuf::int64 value);

  // optional int32 PassUseTime = 2 [default = -1];
  inline bool has_passusetime() const;
  inline void clear_passusetime();
  static const int kPassUseTimeFieldNumber = 2;
  inline ::google::protobuf::int32 passusetime() const;
  inline void set_passusetime(::google::protobuf::int32 value);

  // repeated .StarBattlePlayerInfo MemberInfo = 3;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 3;
  inline const ::StarBattlePlayerInfo& memberinfo(int index) const;
  inline ::StarBattlePlayerInfo* mutable_memberinfo(int index);
  inline ::StarBattlePlayerInfo* add_memberinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::StarBattlePlayerInfo >&
      memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::StarBattlePlayerInfo >*
      mutable_memberinfo();

  // @@protoc_insertion_point(class_scope:StarBattleTeamInfo)
 private:
  inline void set_has_passtime();
  inline void clear_has_passtime();
  inline void set_has_passusetime();
  inline void clear_has_passusetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 passtime_;
  ::google::protobuf::RepeatedPtrField< ::StarBattlePlayerInfo > memberinfo_;
  ::google::protobuf::int32 passusetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static StarBattleTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class ObjPosInfo : public ::google::protobuf::Message {
 public:
  ObjPosInfo();
  virtual ~ObjPosInfo();

  ObjPosInfo(const ObjPosInfo& from);

  inline ObjPosInfo& operator=(const ObjPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjPosInfo& default_instance();

  void Swap(ObjPosInfo* other);

  // implements Message ----------------------------------------------

  ObjPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjPosInfo& from);
  void MergeFrom(const ObjPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ObjId = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional int32 Id = 2 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 X = 3 [default = -1];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Z = 4 [default = -1];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ObjPosInfo)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static ObjPosInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CharacterInfo

// optional uint64 RoleId = 1 [default = 0];
inline bool CharacterInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 CharacterInfo::roleid() const {
  return roleid_;
}
inline void CharacterInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string Nickname = 2;
inline bool CharacterInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CharacterInfo::nickname() const {
  return *nickname_;
}
inline void CharacterInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CharacterInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CharacterInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CharacterInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigId = 3 [default = -1];
inline bool CharacterInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 CharacterInfo::configid() const {
  return configid_;
}
inline void CharacterInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 Hp = 4 [default = -1];
inline bool CharacterInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterInfo::clear_hp() {
  hp_ = -1;
  clear_has_hp();
}
inline ::google::protobuf::int32 CharacterInfo::hp() const {
  return hp_;
}
inline void CharacterInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 HpMax = 5 [default = -1];
inline bool CharacterInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterInfo::clear_hpmax() {
  hpmax_ = -1;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 CharacterInfo::hpmax() const {
  return hpmax_;
}
inline void CharacterInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 Level = 6 [default = -1];
inline bool CharacterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 CharacterInfo::level() const {
  return level_;
}
inline void CharacterInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional .TreasureEquipedID TreasureEquiped = 8;
inline bool CharacterInfo::has_treasureequiped() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterInfo::set_has_treasureequiped() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterInfo::clear_has_treasureequiped() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterInfo::clear_treasureequiped() {
  if (treasureequiped_ != NULL) treasureequiped_->::TreasureEquipedID::Clear();
  clear_has_treasureequiped();
}
inline const ::TreasureEquipedID& CharacterInfo::treasureequiped() const {
  return treasureequiped_ != NULL ? *treasureequiped_ : *default_instance_->treasureequiped_;
}
inline ::TreasureEquipedID* CharacterInfo::mutable_treasureequiped() {
  set_has_treasureequiped();
  if (treasureequiped_ == NULL) treasureequiped_ = new ::TreasureEquipedID;
  return treasureequiped_;
}
inline ::TreasureEquipedID* CharacterInfo::release_treasureequiped() {
  clear_has_treasureequiped();
  ::TreasureEquipedID* temp = treasureequiped_;
  treasureequiped_ = NULL;
  return temp;
}
inline void CharacterInfo::set_allocated_treasureequiped(::TreasureEquipedID* treasureequiped) {
  delete treasureequiped_;
  treasureequiped_ = treasureequiped;
  if (treasureequiped) {
    set_has_treasureequiped();
  } else {
    clear_has_treasureequiped();
  }
}

// -------------------------------------------------------------------

// Vector3

// optional float X = 1 [default = -1];
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = -1;
  clear_has_x();
}
inline float Vector3::x() const {
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float Y = 2 [default = -1];
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = -1;
  clear_has_y();
}
inline float Vector3::y() const {
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float Z = 3 [default = -1];
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = -1;
  clear_has_z();
}
inline float Vector3::z() const {
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// TeamMemberInfo

// optional uint64 RoleId = 1 [default = 0];
inline bool TeamMemberInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMemberInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMemberInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMemberInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 TeamMemberInfo::roleid() const {
  return roleid_;
}
inline void TeamMemberInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 Level = 3 [default = 0];
inline bool TeamMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMemberInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamMemberInfo::level() const {
  return level_;
}
inline void TeamMemberInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string Name = 4;
inline bool TeamMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamMemberInfo::name() const {
  return *name_;
}
inline void TeamMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TeamMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamMemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigId = 5 [default = -1];
inline bool TeamMemberInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamMemberInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamMemberInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamMemberInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 TeamMemberInfo::configid() const {
  return configid_;
}
inline void TeamMemberInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 Hp = 6 [default = -1];
inline bool TeamMemberInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamMemberInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamMemberInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamMemberInfo::clear_hp() {
  hp_ = -1;
  clear_has_hp();
}
inline ::google::protobuf::int32 TeamMemberInfo::hp() const {
  return hp_;
}
inline void TeamMemberInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 Status = 8 [default = -1];
inline bool TeamMemberInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamMemberInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamMemberInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamMemberInfo::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 TeamMemberInfo::status() const {
  return status_;
}
inline void TeamMemberInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int64 MaxHp = 11 [default = -1];
inline bool TeamMemberInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamMemberInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamMemberInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamMemberInfo::clear_maxhp() {
  maxhp_ = GOOGLE_LONGLONG(-1);
  clear_has_maxhp();
}
inline ::google::protobuf::int64 TeamMemberInfo::maxhp() const {
  return maxhp_;
}
inline void TeamMemberInfo::set_maxhp(::google::protobuf::int64 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional .CharacterLocation Location = 15;
inline bool TeamMemberInfo::has_location() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamMemberInfo::set_has_location() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamMemberInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamMemberInfo::clear_location() {
  if (location_ != NULL) location_->::CharacterLocation::Clear();
  clear_has_location();
}
inline const ::CharacterLocation& TeamMemberInfo::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::CharacterLocation* TeamMemberInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::CharacterLocation;
  return location_;
}
inline ::CharacterLocation* TeamMemberInfo::release_location() {
  clear_has_location();
  ::CharacterLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void TeamMemberInfo::set_allocated_location(::CharacterLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// optional int32 ProfessionId = 16 [default = -1];
inline bool TeamMemberInfo::has_professionid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamMemberInfo::set_has_professionid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamMemberInfo::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamMemberInfo::clear_professionid() {
  professionid_ = -1;
  clear_has_professionid();
}
inline ::google::protobuf::int32 TeamMemberInfo::professionid() const {
  return professionid_;
}
inline void TeamMemberInfo::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
}

// optional int32 OnLine = 17 [default = 1];
inline bool TeamMemberInfo::has_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamMemberInfo::set_has_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamMemberInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamMemberInfo::clear_online() {
  online_ = 1;
  clear_has_online();
}
inline ::google::protobuf::int32 TeamMemberInfo::online() const {
  return online_;
}
inline void TeamMemberInfo::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// optional int32 FollowTeam = 18 [default = -1];
inline bool TeamMemberInfo::has_followteam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamMemberInfo::set_has_followteam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamMemberInfo::clear_has_followteam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamMemberInfo::clear_followteam() {
  followteam_ = -1;
  clear_has_followteam();
}
inline ::google::protobuf::int32 TeamMemberInfo::followteam() const {
  return followteam_;
}
inline void TeamMemberInfo::set_followteam(::google::protobuf::int32 value) {
  set_has_followteam();
  followteam_ = value;
}

// repeated int32 BuffIdList = 19;
inline int TeamMemberInfo::buffidlist_size() const {
  return buffidlist_.size();
}
inline void TeamMemberInfo::clear_buffidlist() {
  buffidlist_.Clear();
}
inline ::google::protobuf::int32 TeamMemberInfo::buffidlist(int index) const {
  return buffidlist_.Get(index);
}
inline void TeamMemberInfo::set_buffidlist(int index, ::google::protobuf::int32 value) {
  buffidlist_.Set(index, value);
}
inline void TeamMemberInfo::add_buffidlist(::google::protobuf::int32 value) {
  buffidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TeamMemberInfo::buffidlist() const {
  return buffidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TeamMemberInfo::mutable_buffidlist() {
  return &buffidlist_;
}

// -------------------------------------------------------------------

// TeamInfo

// repeated .TeamMemberInfo Members = 1;
inline int TeamInfo::members_size() const {
  return members_.size();
}
inline void TeamInfo::clear_members() {
  members_.Clear();
}
inline const ::TeamMemberInfo& TeamInfo::members(int index) const {
  return members_.Get(index);
}
inline ::TeamMemberInfo* TeamInfo::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::TeamMemberInfo* TeamInfo::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamMemberInfo >&
TeamInfo::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamMemberInfo >*
TeamInfo::mutable_members() {
  return &members_;
}

// optional uint64 LeaderRoleId = 2 [default = 0];
inline bool TeamInfo::has_leaderroleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_leaderroleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_leaderroleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_leaderroleid() {
  leaderroleid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderroleid();
}
inline ::google::protobuf::uint64 TeamInfo::leaderroleid() const {
  return leaderroleid_;
}
inline void TeamInfo::set_leaderroleid(::google::protobuf::uint64 value) {
  set_has_leaderroleid();
  leaderroleid_ = value;
}

// optional uint64 TeamId = 3 [default = 0];
inline bool TeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TeamInfo::teamid() const {
  return teamid_;
}
inline void TeamInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 TeamType = 4 [default = -1];
inline bool TeamInfo::has_teamtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_teamtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfo::clear_teamtype() {
  teamtype_ = -1;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 TeamInfo::teamtype() const {
  return teamtype_;
}
inline void TeamInfo::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// optional .TeamTarget TeamTarget = 5;
inline bool TeamInfo::has_teamtarget() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_teamtarget() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_teamtarget() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfo::clear_teamtarget() {
  if (teamtarget_ != NULL) teamtarget_->::TeamTarget::Clear();
  clear_has_teamtarget();
}
inline const ::TeamTarget& TeamInfo::teamtarget() const {
  return teamtarget_ != NULL ? *teamtarget_ : *default_instance_->teamtarget_;
}
inline ::TeamTarget* TeamInfo::mutable_teamtarget() {
  set_has_teamtarget();
  if (teamtarget_ == NULL) teamtarget_ = new ::TeamTarget;
  return teamtarget_;
}
inline ::TeamTarget* TeamInfo::release_teamtarget() {
  clear_has_teamtarget();
  ::TeamTarget* temp = teamtarget_;
  teamtarget_ = NULL;
  return temp;
}
inline void TeamInfo::set_allocated_teamtarget(::TeamTarget* teamtarget) {
  delete teamtarget_;
  teamtarget_ = teamtarget;
  if (teamtarget) {
    set_has_teamtarget();
  } else {
    clear_has_teamtarget();
  }
}

// -------------------------------------------------------------------

// OnlineUserInfo

// optional uint64 RoleId = 1 [default = 0];
inline bool OnlineUserInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineUserInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineUserInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineUserInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 OnlineUserInfo::roleid() const {
  return roleid_;
}
inline void OnlineUserInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 Level = 2 [default = -1];
inline bool OnlineUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineUserInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 OnlineUserInfo::level() const {
  return level_;
}
inline void OnlineUserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional .CharacterLocation Location = 5;
inline bool OnlineUserInfo::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineUserInfo::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineUserInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineUserInfo::clear_location() {
  if (location_ != NULL) location_->::CharacterLocation::Clear();
  clear_has_location();
}
inline const ::CharacterLocation& OnlineUserInfo::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::CharacterLocation* OnlineUserInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::CharacterLocation;
  return location_;
}
inline ::CharacterLocation* OnlineUserInfo::release_location() {
  clear_has_location();
  ::CharacterLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void OnlineUserInfo::set_allocated_location(::CharacterLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// optional uint64 Guildguid = 6 [default = 0];
inline bool OnlineUserInfo::has_guildguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OnlineUserInfo::set_has_guildguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OnlineUserInfo::clear_has_guildguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OnlineUserInfo::clear_guildguid() {
  guildguid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildguid();
}
inline ::google::protobuf::uint64 OnlineUserInfo::guildguid() const {
  return guildguid_;
}
inline void OnlineUserInfo::set_guildguid(::google::protobuf::uint64 value) {
  set_has_guildguid();
  guildguid_ = value;
}

// optional .PlayerMatchData PlayerMatchData = 7;
inline bool OnlineUserInfo::has_playermatchdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OnlineUserInfo::set_has_playermatchdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OnlineUserInfo::clear_has_playermatchdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OnlineUserInfo::clear_playermatchdata() {
  if (playermatchdata_ != NULL) playermatchdata_->::PlayerMatchData::Clear();
  clear_has_playermatchdata();
}
inline const ::PlayerMatchData& OnlineUserInfo::playermatchdata() const {
  return playermatchdata_ != NULL ? *playermatchdata_ : *default_instance_->playermatchdata_;
}
inline ::PlayerMatchData* OnlineUserInfo::mutable_playermatchdata() {
  set_has_playermatchdata();
  if (playermatchdata_ == NULL) playermatchdata_ = new ::PlayerMatchData;
  return playermatchdata_;
}
inline ::PlayerMatchData* OnlineUserInfo::release_playermatchdata() {
  clear_has_playermatchdata();
  ::PlayerMatchData* temp = playermatchdata_;
  playermatchdata_ = NULL;
  return temp;
}
inline void OnlineUserInfo::set_allocated_playermatchdata(::PlayerMatchData* playermatchdata) {
  delete playermatchdata_;
  playermatchdata_ = playermatchdata;
  if (playermatchdata) {
    set_has_playermatchdata();
  } else {
    clear_has_playermatchdata();
  }
}

// optional string RoleName = 8;
inline bool OnlineUserInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OnlineUserInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OnlineUserInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OnlineUserInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& OnlineUserInfo::rolename() const {
  return *rolename_;
}
inline void OnlineUserInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OnlineUserInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void OnlineUserInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OnlineUserInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* OnlineUserInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OnlineUserInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigID = 9 [default = -1];
inline bool OnlineUserInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OnlineUserInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OnlineUserInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OnlineUserInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 OnlineUserInfo::configid() const {
  return configid_;
}
inline void OnlineUserInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 TreasureCount = 10 [default = -1];
inline bool OnlineUserInfo::has_treasurecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OnlineUserInfo::set_has_treasurecount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OnlineUserInfo::clear_has_treasurecount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OnlineUserInfo::clear_treasurecount() {
  treasurecount_ = -1;
  clear_has_treasurecount();
}
inline ::google::protobuf::int32 OnlineUserInfo::treasurecount() const {
  return treasurecount_;
}
inline void OnlineUserInfo::set_treasurecount(::google::protobuf::int32 value) {
  set_has_treasurecount();
  treasurecount_ = value;
}

// optional int32 TreasureLevel = 11 [default = -1];
inline bool OnlineUserInfo::has_treasurelevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OnlineUserInfo::set_has_treasurelevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OnlineUserInfo::clear_has_treasurelevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OnlineUserInfo::clear_treasurelevel() {
  treasurelevel_ = -1;
  clear_has_treasurelevel();
}
inline ::google::protobuf::int32 OnlineUserInfo::treasurelevel() const {
  return treasurelevel_;
}
inline void OnlineUserInfo::set_treasurelevel(::google::protobuf::int32 value) {
  set_has_treasurelevel();
  treasurelevel_ = value;
}

// optional int32 PetConfigID = 12 [default = -1];
inline bool OnlineUserInfo::has_petconfigid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OnlineUserInfo::set_has_petconfigid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OnlineUserInfo::clear_has_petconfigid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OnlineUserInfo::clear_petconfigid() {
  petconfigid_ = -1;
  clear_has_petconfigid();
}
inline ::google::protobuf::int32 OnlineUserInfo::petconfigid() const {
  return petconfigid_;
}
inline void OnlineUserInfo::set_petconfigid(::google::protobuf::int32 value) {
  set_has_petconfigid();
  petconfigid_ = value;
}

// optional int32 PetLevel = 13 [default = -1];
inline bool OnlineUserInfo::has_petlevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OnlineUserInfo::set_has_petlevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OnlineUserInfo::clear_has_petlevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OnlineUserInfo::clear_petlevel() {
  petlevel_ = -1;
  clear_has_petlevel();
}
inline ::google::protobuf::int32 OnlineUserInfo::petlevel() const {
  return petlevel_;
}
inline void OnlineUserInfo::set_petlevel(::google::protobuf::int32 value) {
  set_has_petlevel();
  petlevel_ = value;
}

// optional int32 PvP3v3WinCount = 14 [default = -1];
inline bool OnlineUserInfo::has_pvp3v3wincount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OnlineUserInfo::set_has_pvp3v3wincount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OnlineUserInfo::clear_has_pvp3v3wincount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OnlineUserInfo::clear_pvp3v3wincount() {
  pvp3v3wincount_ = -1;
  clear_has_pvp3v3wincount();
}
inline ::google::protobuf::int32 OnlineUserInfo::pvp3v3wincount() const {
  return pvp3v3wincount_;
}
inline void OnlineUserInfo::set_pvp3v3wincount(::google::protobuf::int32 value) {
  set_has_pvp3v3wincount();
  pvp3v3wincount_ = value;
}

// -------------------------------------------------------------------

// ItemData

// optional bool IsLock = 2 [default = false];
inline bool ItemData::has_islock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemData::set_has_islock() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemData::clear_has_islock() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemData::clear_islock() {
  islock_ = false;
  clear_has_islock();
}
inline bool ItemData::islock() const {
  return islock_;
}
inline void ItemData::set_islock(bool value) {
  set_has_islock();
  islock_ = value;
}

// optional int32 OverlayCount = 3 [default = -1];
inline bool ItemData::has_overlaycount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemData::set_has_overlaycount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemData::clear_has_overlaycount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemData::clear_overlaycount() {
  overlaycount_ = -1;
  clear_has_overlaycount();
}
inline ::google::protobuf::int32 ItemData::overlaycount() const {
  return overlaycount_;
}
inline void ItemData::set_overlaycount(::google::protobuf::int32 value) {
  set_has_overlaycount();
  overlaycount_ = value;
}

// optional int32 ConfigId = 4 [default = -1];
inline bool ItemData::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemData::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemData::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemData::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 ItemData::configid() const {
  return configid_;
}
inline void ItemData::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional .EquipAttr EquipAttr = 5;
inline bool ItemData::has_equipattr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemData::set_has_equipattr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemData::clear_has_equipattr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemData::clear_equipattr() {
  if (equipattr_ != NULL) equipattr_->::EquipAttr::Clear();
  clear_has_equipattr();
}
inline const ::EquipAttr& ItemData::equipattr() const {
  return equipattr_ != NULL ? *equipattr_ : *default_instance_->equipattr_;
}
inline ::EquipAttr* ItemData::mutable_equipattr() {
  set_has_equipattr();
  if (equipattr_ == NULL) equipattr_ = new ::EquipAttr;
  return equipattr_;
}
inline ::EquipAttr* ItemData::release_equipattr() {
  clear_has_equipattr();
  ::EquipAttr* temp = equipattr_;
  equipattr_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_equipattr(::EquipAttr* equipattr) {
  delete equipattr_;
  equipattr_ = equipattr;
  if (equipattr) {
    set_has_equipattr();
  } else {
    clear_has_equipattr();
  }
}

// optional bool IsBind = 12 [default = true];
inline bool ItemData::has_isbind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemData::set_has_isbind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemData::clear_has_isbind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemData::clear_isbind() {
  isbind_ = true;
  clear_has_isbind();
}
inline bool ItemData::isbind() const {
  return isbind_;
}
inline void ItemData::set_isbind(bool value) {
  set_has_isbind();
  isbind_ = value;
}

// optional uint64 Guid = 13 [default = 0];
inline bool ItemData::has_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemData::set_has_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemData::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 ItemData::guid() const {
  return guid_;
}
inline void ItemData::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional .PetData PetData = 14;
inline bool ItemData::has_petdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemData::set_has_petdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemData::clear_has_petdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemData::clear_petdata() {
  if (petdata_ != NULL) petdata_->::PetData::Clear();
  clear_has_petdata();
}
inline const ::PetData& ItemData::petdata() const {
  return petdata_ != NULL ? *petdata_ : *default_instance_->petdata_;
}
inline ::PetData* ItemData::mutable_petdata() {
  set_has_petdata();
  if (petdata_ == NULL) petdata_ = new ::PetData;
  return petdata_;
}
inline ::PetData* ItemData::release_petdata() {
  clear_has_petdata();
  ::PetData* temp = petdata_;
  petdata_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_petdata(::PetData* petdata) {
  delete petdata_;
  petdata_ = petdata;
  if (petdata) {
    set_has_petdata();
  } else {
    clear_has_petdata();
  }
}

// optional int32 BindRule = 15 [default = 1];
inline bool ItemData::has_bindrule() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemData::set_has_bindrule() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemData::clear_has_bindrule() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemData::clear_bindrule() {
  bindrule_ = 1;
  clear_has_bindrule();
}
inline ::google::protobuf::int32 ItemData::bindrule() const {
  return bindrule_;
}
inline void ItemData::set_bindrule(::google::protobuf::int32 value) {
  set_has_bindrule();
  bindrule_ = value;
}

// optional int32 SaleCD = 16 [default = 0];
inline bool ItemData::has_salecd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemData::set_has_salecd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemData::clear_has_salecd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemData::clear_salecd() {
  salecd_ = 0;
  clear_has_salecd();
}
inline ::google::protobuf::int32 ItemData::salecd() const {
  return salecd_;
}
inline void ItemData::set_salecd(::google::protobuf::int32 value) {
  set_has_salecd();
  salecd_ = value;
}

// -------------------------------------------------------------------

// AttrKeyValue

// optional int32 Key = 1 [default = -1];
inline bool AttrKeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttrKeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttrKeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttrKeyValue::clear_key() {
  key_ = -1;
  clear_has_key();
}
inline ::google::protobuf::int32 AttrKeyValue::key() const {
  return key_;
}
inline void AttrKeyValue::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int64 Value = 2 [default = -1];
inline bool AttrKeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttrKeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttrKeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttrKeyValue::clear_value() {
  value_ = GOOGLE_LONGLONG(-1);
  clear_has_value();
}
inline ::google::protobuf::int64 AttrKeyValue::value() const {
  return value_;
}
inline void AttrKeyValue::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int32 Quality = 3 [default = -1];
inline bool AttrKeyValue::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttrKeyValue::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttrKeyValue::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttrKeyValue::clear_quality() {
  quality_ = -1;
  clear_has_quality();
}
inline ::google::protobuf::int32 AttrKeyValue::quality() const {
  return quality_;
}
inline void AttrKeyValue::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// BagData

// repeated .ItemObj Items = 1;
inline int BagData::items_size() const {
  return items_.size();
}
inline void BagData::clear_items() {
  items_.Clear();
}
inline const ::ItemObj& BagData::items(int index) const {
  return items_.Get(index);
}
inline ::ItemObj* BagData::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::ItemObj* BagData::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemObj >&
BagData::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemObj >*
BagData::mutable_items() {
  return &items_;
}

// optional int32 BagType = 2 [default = -1];
inline bool BagData::has_bagtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BagData::set_has_bagtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BagData::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BagData::clear_bagtype() {
  bagtype_ = -1;
  clear_has_bagtype();
}
inline ::google::protobuf::int32 BagData::bagtype() const {
  return bagtype_;
}
inline void BagData::set_bagtype(::google::protobuf::int32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional int32 CurCapacity = 3 [default = -1];
inline bool BagData::has_curcapacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BagData::set_has_curcapacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BagData::clear_has_curcapacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BagData::clear_curcapacity() {
  curcapacity_ = -1;
  clear_has_curcapacity();
}
inline ::google::protobuf::int32 BagData::curcapacity() const {
  return curcapacity_;
}
inline void BagData::set_curcapacity(::google::protobuf::int32 value) {
  set_has_curcapacity();
  curcapacity_ = value;
}

// -------------------------------------------------------------------

// EquipAttr

// repeated .AttrKeyValue BaseAttr = 1;
inline int EquipAttr::baseattr_size() const {
  return baseattr_.size();
}
inline void EquipAttr::clear_baseattr() {
  baseattr_.Clear();
}
inline const ::AttrKeyValue& EquipAttr::baseattr(int index) const {
  return baseattr_.Get(index);
}
inline ::AttrKeyValue* EquipAttr::mutable_baseattr(int index) {
  return baseattr_.Mutable(index);
}
inline ::AttrKeyValue* EquipAttr::add_baseattr() {
  return baseattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipAttr::baseattr() const {
  return baseattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipAttr::mutable_baseattr() {
  return &baseattr_;
}

// repeated .AttrKeyValue ExtraAttr = 2;
inline int EquipAttr::extraattr_size() const {
  return extraattr_.size();
}
inline void EquipAttr::clear_extraattr() {
  extraattr_.Clear();
}
inline const ::AttrKeyValue& EquipAttr::extraattr(int index) const {
  return extraattr_.Get(index);
}
inline ::AttrKeyValue* EquipAttr::mutable_extraattr(int index) {
  return extraattr_.Mutable(index);
}
inline ::AttrKeyValue* EquipAttr::add_extraattr() {
  return extraattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipAttr::extraattr() const {
  return extraattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipAttr::mutable_extraattr() {
  return &extraattr_;
}

// optional int32 BattleScore = 3 [default = -1];
inline bool EquipAttr::has_battlescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipAttr::set_has_battlescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipAttr::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipAttr::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipAttr::battlescore() const {
  return battlescore_;
}
inline void EquipAttr::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// -------------------------------------------------------------------

// ItemObj

// optional int32 Pos = 1 [default = -1];
inline bool ItemObj::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemObj::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemObj::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemObj::clear_pos() {
  pos_ = -1;
  clear_has_pos();
}
inline ::google::protobuf::int32 ItemObj::pos() const {
  return pos_;
}
inline void ItemObj::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .ItemData ItemData = 2;
inline bool ItemObj::has_itemdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemObj::set_has_itemdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemObj::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemObj::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::ItemData& ItemObj::itemdata() const {
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::ItemData* ItemObj::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::ItemData;
  return itemdata_;
}
inline ::ItemData* ItemObj::release_itemdata() {
  clear_has_itemdata();
  ::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void ItemObj::set_allocated_itemdata(::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
}

// optional bool RedPoint = 3 [default = false];
inline bool ItemObj::has_redpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemObj::set_has_redpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemObj::clear_has_redpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemObj::clear_redpoint() {
  redpoint_ = false;
  clear_has_redpoint();
}
inline bool ItemObj::redpoint() const {
  return redpoint_;
}
inline void ItemObj::set_redpoint(bool value) {
  set_has_redpoint();
  redpoint_ = value;
}

// -------------------------------------------------------------------

// ChatMsg

// optional string Chat_content = 1;
inline bool ChatMsg::has_chat_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMsg::set_has_chat_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMsg::clear_has_chat_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMsg::clear_chat_content() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    chat_content_->clear();
  }
  clear_has_chat_content();
}
inline const ::std::string& ChatMsg::chat_content() const {
  return *chat_content_;
}
inline void ChatMsg::set_chat_content(const ::std::string& value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void ChatMsg::set_chat_content(const char* value) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(value);
}
inline void ChatMsg::set_chat_content(const char* value, size_t size) {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  chat_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMsg::mutable_chat_content() {
  set_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    chat_content_ = new ::std::string;
  }
  return chat_content_;
}
inline ::std::string* ChatMsg::release_chat_content() {
  clear_has_chat_content();
  if (chat_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_content_;
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMsg::set_allocated_chat_content(::std::string* chat_content) {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (chat_content) {
    set_has_chat_content();
    chat_content_ = chat_content;
  } else {
    clear_has_chat_content();
    chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Chat_voice_url = 2;
inline bool ChatMsg::has_chat_voice_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMsg::set_has_chat_voice_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMsg::clear_has_chat_voice_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMsg::clear_chat_voice_url() {
  if (chat_voice_url_ != &::google::protobuf::internal::kEmptyString) {
    chat_voice_url_->clear();
  }
  clear_has_chat_voice_url();
}
inline const ::std::string& ChatMsg::chat_voice_url() const {
  return *chat_voice_url_;
}
inline void ChatMsg::set_chat_voice_url(const ::std::string& value) {
  set_has_chat_voice_url();
  if (chat_voice_url_ == &::google::protobuf::internal::kEmptyString) {
    chat_voice_url_ = new ::std::string;
  }
  chat_voice_url_->assign(value);
}
inline void ChatMsg::set_chat_voice_url(const char* value) {
  set_has_chat_voice_url();
  if (chat_voice_url_ == &::google::protobuf::internal::kEmptyString) {
    chat_voice_url_ = new ::std::string;
  }
  chat_voice_url_->assign(value);
}
inline void ChatMsg::set_chat_voice_url(const char* value, size_t size) {
  set_has_chat_voice_url();
  if (chat_voice_url_ == &::google::protobuf::internal::kEmptyString) {
    chat_voice_url_ = new ::std::string;
  }
  chat_voice_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMsg::mutable_chat_voice_url() {
  set_has_chat_voice_url();
  if (chat_voice_url_ == &::google::protobuf::internal::kEmptyString) {
    chat_voice_url_ = new ::std::string;
  }
  return chat_voice_url_;
}
inline ::std::string* ChatMsg::release_chat_voice_url() {
  clear_has_chat_voice_url();
  if (chat_voice_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_voice_url_;
    chat_voice_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMsg::set_allocated_chat_voice_url(::std::string* chat_voice_url) {
  if (chat_voice_url_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_voice_url_;
  }
  if (chat_voice_url) {
    set_has_chat_voice_url();
    chat_voice_url_ = chat_voice_url;
  } else {
    clear_has_chat_voice_url();
    chat_voice_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Chat_voice_secs = 3 [default = -1];
inline bool ChatMsg::has_chat_voice_secs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMsg::set_has_chat_voice_secs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMsg::clear_has_chat_voice_secs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMsg::clear_chat_voice_secs() {
  chat_voice_secs_ = -1;
  clear_has_chat_voice_secs();
}
inline ::google::protobuf::int32 ChatMsg::chat_voice_secs() const {
  return chat_voice_secs_;
}
inline void ChatMsg::set_chat_voice_secs(::google::protobuf::int32 value) {
  set_has_chat_voice_secs();
  chat_voice_secs_ = value;
}

// -------------------------------------------------------------------

// ChatInfo

// optional string Player_name = 1;
inline bool ChatInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& ChatInfo::player_name() const {
  return *player_name_;
}
inline void ChatInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ChatInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ChatInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* ChatInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 Player_guid = 2 [default = 0];
inline bool ChatInfo::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatInfo::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatInfo::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatInfo::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 ChatInfo::player_guid() const {
  return player_guid_;
}
inline void ChatInfo::set_player_guid(::google::protobuf::uint64 value) {
  set_has_player_guid();
  player_guid_ = value;
}

// optional int32 Avatar_id = 3 [default = -1];
inline bool ChatInfo::has_avatar_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatInfo::set_has_avatar_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatInfo::clear_has_avatar_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatInfo::clear_avatar_id() {
  avatar_id_ = -1;
  clear_has_avatar_id();
}
inline ::google::protobuf::int32 ChatInfo::avatar_id() const {
  return avatar_id_;
}
inline void ChatInfo::set_avatar_id(::google::protobuf::int32 value) {
  set_has_avatar_id();
  avatar_id_ = value;
}

// optional int32 Player_level = 4 [default = -1];
inline bool ChatInfo::has_player_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatInfo::set_has_player_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatInfo::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatInfo::clear_player_level() {
  player_level_ = -1;
  clear_has_player_level();
}
inline ::google::protobuf::int32 ChatInfo::player_level() const {
  return player_level_;
}
inline void ChatInfo::set_player_level(::google::protobuf::int32 value) {
  set_has_player_level();
  player_level_ = value;
}

// optional int32 Avatar_frame_id = 5 [default = -1];
inline bool ChatInfo::has_avatar_frame_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatInfo::set_has_avatar_frame_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatInfo::clear_has_avatar_frame_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatInfo::clear_avatar_frame_id() {
  avatar_frame_id_ = -1;
  clear_has_avatar_frame_id();
}
inline ::google::protobuf::int32 ChatInfo::avatar_frame_id() const {
  return avatar_frame_id_;
}
inline void ChatInfo::set_avatar_frame_id(::google::protobuf::int32 value) {
  set_has_avatar_frame_id();
  avatar_frame_id_ = value;
}

// optional int32 Config_id = 6 [default = -1];
inline bool ChatInfo::has_config_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatInfo::set_has_config_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatInfo::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatInfo::clear_config_id() {
  config_id_ = -1;
  clear_has_config_id();
}
inline ::google::protobuf::int32 ChatInfo::config_id() const {
  return config_id_;
}
inline void ChatInfo::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint64 Timestamp = 7 [default = 0];
inline bool ChatInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ChatInfo::timestamp() const {
  return timestamp_;
}
inline void ChatInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .ChatMsg Chat_msg = 8;
inline bool ChatInfo::has_chat_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatInfo::set_has_chat_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatInfo::clear_has_chat_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatInfo::clear_chat_msg() {
  if (chat_msg_ != NULL) chat_msg_->::ChatMsg::Clear();
  clear_has_chat_msg();
}
inline const ::ChatMsg& ChatInfo::chat_msg() const {
  return chat_msg_ != NULL ? *chat_msg_ : *default_instance_->chat_msg_;
}
inline ::ChatMsg* ChatInfo::mutable_chat_msg() {
  set_has_chat_msg();
  if (chat_msg_ == NULL) chat_msg_ = new ::ChatMsg;
  return chat_msg_;
}
inline ::ChatMsg* ChatInfo::release_chat_msg() {
  clear_has_chat_msg();
  ::ChatMsg* temp = chat_msg_;
  chat_msg_ = NULL;
  return temp;
}
inline void ChatInfo::set_allocated_chat_msg(::ChatMsg* chat_msg) {
  delete chat_msg_;
  chat_msg_ = chat_msg;
  if (chat_msg) {
    set_has_chat_msg();
  } else {
    clear_has_chat_msg();
  }
}

// optional uint64 Team_id = 9 [default = 0];
inline bool ChatInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatInfo::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ChatInfo::team_id() const {
  return team_id_;
}
inline void ChatInfo::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 Guild_guid = 10 [default = 0];
inline bool ChatInfo::has_guild_guid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatInfo::set_has_guild_guid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatInfo::clear_has_guild_guid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatInfo::clear_guild_guid() {
  guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_guid();
}
inline ::google::protobuf::uint64 ChatInfo::guild_guid() const {
  return guild_guid_;
}
inline void ChatInfo::set_guild_guid(::google::protobuf::uint64 value) {
  set_has_guild_guid();
  guild_guid_ = value;
}

// -------------------------------------------------------------------

// ChatChannelData

// optional int32 Chat_channel = 1 [default = -1];
inline bool ChatChannelData::has_chat_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatChannelData::set_has_chat_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatChannelData::clear_has_chat_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatChannelData::clear_chat_channel() {
  chat_channel_ = -1;
  clear_has_chat_channel();
}
inline ::google::protobuf::int32 ChatChannelData::chat_channel() const {
  return chat_channel_;
}
inline void ChatChannelData::set_chat_channel(::google::protobuf::int32 value) {
  set_has_chat_channel();
  chat_channel_ = value;
}

// repeated .ChatInfo Chat_infos = 2;
inline int ChatChannelData::chat_infos_size() const {
  return chat_infos_.size();
}
inline void ChatChannelData::clear_chat_infos() {
  chat_infos_.Clear();
}
inline const ::ChatInfo& ChatChannelData::chat_infos(int index) const {
  return chat_infos_.Get(index);
}
inline ::ChatInfo* ChatChannelData::mutable_chat_infos(int index) {
  return chat_infos_.Mutable(index);
}
inline ::ChatInfo* ChatChannelData::add_chat_infos() {
  return chat_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
ChatChannelData::chat_infos() const {
  return chat_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
ChatChannelData::mutable_chat_infos() {
  return &chat_infos_;
}

// -------------------------------------------------------------------

// CharacterLocation

// optional int32 SceneId = 2 [default = -1];
inline bool CharacterLocation::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterLocation::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterLocation::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterLocation::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 CharacterLocation::sceneid() const {
  return sceneid_;
}
inline void CharacterLocation::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional .Vector3 Pos = 3;
inline bool CharacterLocation::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterLocation::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterLocation::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterLocation::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& CharacterLocation::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* CharacterLocation::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* CharacterLocation::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CharacterLocation::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 MapId = 5 [default = -1];
inline bool CharacterLocation::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterLocation::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterLocation::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterLocation::clear_mapid() {
  mapid_ = -1;
  clear_has_mapid();
}
inline ::google::protobuf::int32 CharacterLocation::mapid() const {
  return mapid_;
}
inline void CharacterLocation::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 DungeonConfigId = 6 [default = -1];
inline bool CharacterLocation::has_dungeonconfigid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterLocation::set_has_dungeonconfigid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterLocation::clear_has_dungeonconfigid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterLocation::clear_dungeonconfigid() {
  dungeonconfigid_ = -1;
  clear_has_dungeonconfigid();
}
inline ::google::protobuf::int32 CharacterLocation::dungeonconfigid() const {
  return dungeonconfigid_;
}
inline void CharacterLocation::set_dungeonconfigid(::google::protobuf::int32 value) {
  set_has_dungeonconfigid();
  dungeonconfigid_ = value;
}

// optional int32 LineId = 7 [default = -1];
inline bool CharacterLocation::has_lineid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterLocation::set_has_lineid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterLocation::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterLocation::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 CharacterLocation::lineid() const {
  return lineid_;
}
inline void CharacterLocation::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// optional int32 SceneConfigId = 8 [default = -1];
inline bool CharacterLocation::has_sceneconfigid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterLocation::set_has_sceneconfigid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterLocation::clear_has_sceneconfigid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterLocation::clear_sceneconfigid() {
  sceneconfigid_ = -1;
  clear_has_sceneconfigid();
}
inline ::google::protobuf::int32 CharacterLocation::sceneconfigid() const {
  return sceneconfigid_;
}
inline void CharacterLocation::set_sceneconfigid(::google::protobuf::int32 value) {
  set_has_sceneconfigid();
  sceneconfigid_ = value;
}

// optional int32 MirrorId = 9 [default = -1];
inline bool CharacterLocation::has_mirrorid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterLocation::set_has_mirrorid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterLocation::clear_has_mirrorid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterLocation::clear_mirrorid() {
  mirrorid_ = -1;
  clear_has_mirrorid();
}
inline ::google::protobuf::int32 CharacterLocation::mirrorid() const {
  return mirrorid_;
}
inline void CharacterLocation::set_mirrorid(::google::protobuf::int32 value) {
  set_has_mirrorid();
  mirrorid_ = value;
}

// optional int32 ServerId = 10 [default = -1];
inline bool CharacterLocation::has_serverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterLocation::set_has_serverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterLocation::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterLocation::clear_serverid() {
  serverid_ = -1;
  clear_has_serverid();
}
inline ::google::protobuf::int32 CharacterLocation::serverid() const {
  return serverid_;
}
inline void CharacterLocation::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// QuestData

// optional int32 ConfigId = 1 [default = -1];
inline bool QuestData::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestData::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestData::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestData::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 QuestData::configid() const {
  return configid_;
}
inline void QuestData::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 Status = 2 [default = -1];
inline bool QuestData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestData::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 QuestData::status() const {
  return status_;
}
inline void QuestData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated .QuestStepData QuestSteps = 4;
inline int QuestData::queststeps_size() const {
  return queststeps_.size();
}
inline void QuestData::clear_queststeps() {
  queststeps_.Clear();
}
inline const ::QuestStepData& QuestData::queststeps(int index) const {
  return queststeps_.Get(index);
}
inline ::QuestStepData* QuestData::mutable_queststeps(int index) {
  return queststeps_.Mutable(index);
}
inline ::QuestStepData* QuestData::add_queststeps() {
  return queststeps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuestStepData >&
QuestData::queststeps() const {
  return queststeps_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuestStepData >*
QuestData::mutable_queststeps() {
  return &queststeps_;
}

// optional int32 QuestIndex = 6 [default = -1];
inline bool QuestData::has_questindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestData::set_has_questindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestData::clear_has_questindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestData::clear_questindex() {
  questindex_ = -1;
  clear_has_questindex();
}
inline ::google::protobuf::int32 QuestData::questindex() const {
  return questindex_;
}
inline void QuestData::set_questindex(::google::protobuf::int32 value) {
  set_has_questindex();
  questindex_ = value;
}

// optional int32 QuestMaxIndex = 7 [default = -1];
inline bool QuestData::has_questmaxindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestData::set_has_questmaxindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestData::clear_has_questmaxindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestData::clear_questmaxindex() {
  questmaxindex_ = -1;
  clear_has_questmaxindex();
}
inline ::google::protobuf::int32 QuestData::questmaxindex() const {
  return questmaxindex_;
}
inline void QuestData::set_questmaxindex(::google::protobuf::int32 value) {
  set_has_questmaxindex();
  questmaxindex_ = value;
}

// optional int64 QuestBeginTime = 8 [default = -1];
inline bool QuestData::has_questbegintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestData::set_has_questbegintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestData::clear_has_questbegintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestData::clear_questbegintime() {
  questbegintime_ = GOOGLE_LONGLONG(-1);
  clear_has_questbegintime();
}
inline ::google::protobuf::int64 QuestData::questbegintime() const {
  return questbegintime_;
}
inline void QuestData::set_questbegintime(::google::protobuf::int64 value) {
  set_has_questbegintime();
  questbegintime_ = value;
}

// -------------------------------------------------------------------

// CustomSkiData

// optional string Key = 2;
inline bool CustomSkiData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomSkiData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomSkiData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomSkiData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CustomSkiData::key() const {
  return *key_;
}
inline void CustomSkiData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CustomSkiData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CustomSkiData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CustomSkiData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CustomSkiData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CustomSkiData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 KeyType = 3 [default = -1];
inline bool CustomSkiData::has_keytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomSkiData::set_has_keytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomSkiData::clear_has_keytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomSkiData::clear_keytype() {
  keytype_ = -1;
  clear_has_keytype();
}
inline ::google::protobuf::int32 CustomSkiData::keytype() const {
  return keytype_;
}
inline void CustomSkiData::set_keytype(::google::protobuf::int32 value) {
  set_has_keytype();
  keytype_ = value;
}

// optional int32 IntV = 4 [default = 0];
inline bool CustomSkiData::has_intv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomSkiData::set_has_intv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomSkiData::clear_has_intv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomSkiData::clear_intv() {
  intv_ = 0;
  clear_has_intv();
}
inline ::google::protobuf::int32 CustomSkiData::intv() const {
  return intv_;
}
inline void CustomSkiData::set_intv(::google::protobuf::int32 value) {
  set_has_intv();
  intv_ = value;
}

// optional bool BoolV = 5 [default = false];
inline bool CustomSkiData::has_boolv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomSkiData::set_has_boolv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomSkiData::clear_has_boolv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomSkiData::clear_boolv() {
  boolv_ = false;
  clear_has_boolv();
}
inline bool CustomSkiData::boolv() const {
  return boolv_;
}
inline void CustomSkiData::set_boolv(bool value) {
  set_has_boolv();
  boolv_ = value;
}

// -------------------------------------------------------------------

// QuestStepData

// optional int32 Status = 2 [default = -1];
inline bool QuestStepData::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestStepData::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestStepData::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestStepData::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 QuestStepData::status() const {
  return status_;
}
inline void QuestStepData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 Progress = 3 [default = -1];
inline bool QuestStepData::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestStepData::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestStepData::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestStepData::clear_progress() {
  progress_ = -1;
  clear_has_progress();
}
inline ::google::protobuf::int32 QuestStepData::progress() const {
  return progress_;
}
inline void QuestStepData::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
}

// -------------------------------------------------------------------

// QuestListData

// repeated .QuestData QuestsList = 1;
inline int QuestListData::questslist_size() const {
  return questslist_.size();
}
inline void QuestListData::clear_questslist() {
  questslist_.Clear();
}
inline const ::QuestData& QuestListData::questslist(int index) const {
  return questslist_.Get(index);
}
inline ::QuestData* QuestListData::mutable_questslist(int index) {
  return questslist_.Mutable(index);
}
inline ::QuestData* QuestListData::add_questslist() {
  return questslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuestData >&
QuestListData::questslist() const {
  return questslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuestData >*
QuestListData::mutable_questslist() {
  return &questslist_;
}

// -------------------------------------------------------------------

// DBBags

// repeated .BagData Bags = 1;
inline int DBBags::bags_size() const {
  return bags_.size();
}
inline void DBBags::clear_bags() {
  bags_.Clear();
}
inline const ::BagData& DBBags::bags(int index) const {
  return bags_.Get(index);
}
inline ::BagData* DBBags::mutable_bags(int index) {
  return bags_.Mutable(index);
}
inline ::BagData* DBBags::add_bags() {
  return bags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BagData >&
DBBags::bags() const {
  return bags_;
}
inline ::google::protobuf::RepeatedPtrField< ::BagData >*
DBBags::mutable_bags() {
  return &bags_;
}

// repeated uint64 RedPointGuids = 2;
inline int DBBags::redpointguids_size() const {
  return redpointguids_.size();
}
inline void DBBags::clear_redpointguids() {
  redpointguids_.Clear();
}
inline ::google::protobuf::uint64 DBBags::redpointguids(int index) const {
  return redpointguids_.Get(index);
}
inline void DBBags::set_redpointguids(int index, ::google::protobuf::uint64 value) {
  redpointguids_.Set(index, value);
}
inline void DBBags::add_redpointguids(::google::protobuf::uint64 value) {
  redpointguids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DBBags::redpointguids() const {
  return redpointguids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DBBags::mutable_redpointguids() {
  return &redpointguids_;
}

// -------------------------------------------------------------------

// ItemResolveData

// optional int32 Qulity = 1 [default = -1];
inline bool ItemResolveData::has_qulity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemResolveData::set_has_qulity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemResolveData::clear_has_qulity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemResolveData::clear_qulity() {
  qulity_ = -1;
  clear_has_qulity();
}
inline ::google::protobuf::int32 ItemResolveData::qulity() const {
  return qulity_;
}
inline void ItemResolveData::set_qulity(::google::protobuf::int32 value) {
  set_has_qulity();
  qulity_ = value;
}

// optional int32 IsResolve = 2 [default = 0];
inline bool ItemResolveData::has_isresolve() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemResolveData::set_has_isresolve() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemResolveData::clear_has_isresolve() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemResolveData::clear_isresolve() {
  isresolve_ = 0;
  clear_has_isresolve();
}
inline ::google::protobuf::int32 ItemResolveData::isresolve() const {
  return isresolve_;
}
inline void ItemResolveData::set_isresolve(::google::protobuf::int32 value) {
  set_has_isresolve();
  isresolve_ = value;
}

// -------------------------------------------------------------------

// ItemSimpleData

// optional int32 ConfID = 1 [default = -1];
inline bool ItemSimpleData::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemSimpleData::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemSimpleData::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemSimpleData::clear_confid() {
  confid_ = -1;
  clear_has_confid();
}
inline ::google::protobuf::int32 ItemSimpleData::confid() const {
  return confid_;
}
inline void ItemSimpleData::set_confid(::google::protobuf::int32 value) {
  set_has_confid();
  confid_ = value;
}

// optional int32 Count = 2 [default = -1];
inline bool ItemSimpleData::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemSimpleData::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemSimpleData::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemSimpleData::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 ItemSimpleData::count() const {
  return count_;
}
inline void ItemSimpleData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ItemAutoOperatorData

// repeated .ItemResolveData AutoSaleDisassemble = 1;
inline int ItemAutoOperatorData::autosaledisassemble_size() const {
  return autosaledisassemble_.size();
}
inline void ItemAutoOperatorData::clear_autosaledisassemble() {
  autosaledisassemble_.Clear();
}
inline const ::ItemResolveData& ItemAutoOperatorData::autosaledisassemble(int index) const {
  return autosaledisassemble_.Get(index);
}
inline ::ItemResolveData* ItemAutoOperatorData::mutable_autosaledisassemble(int index) {
  return autosaledisassemble_.Mutable(index);
}
inline ::ItemResolveData* ItemAutoOperatorData::add_autosaledisassemble() {
  return autosaledisassemble_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemResolveData >&
ItemAutoOperatorData::autosaledisassemble() const {
  return autosaledisassemble_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemResolveData >*
ItemAutoOperatorData::mutable_autosaledisassemble() {
  return &autosaledisassemble_;
}

// -------------------------------------------------------------------

// SkillContainer

// repeated .SkillObj SkillObjList = 1;
inline int SkillContainer::skillobjlist_size() const {
  return skillobjlist_.size();
}
inline void SkillContainer::clear_skillobjlist() {
  skillobjlist_.Clear();
}
inline const ::SkillObj& SkillContainer::skillobjlist(int index) const {
  return skillobjlist_.Get(index);
}
inline ::SkillObj* SkillContainer::mutable_skillobjlist(int index) {
  return skillobjlist_.Mutable(index);
}
inline ::SkillObj* SkillContainer::add_skillobjlist() {
  return skillobjlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillObj >&
SkillContainer::skillobjlist() const {
  return skillobjlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillObj >*
SkillContainer::mutable_skillobjlist() {
  return &skillobjlist_;
}

// -------------------------------------------------------------------

// SkillData

// repeated .SkillContainer SkillContainerList = 1;
inline int SkillData::skillcontainerlist_size() const {
  return skillcontainerlist_.size();
}
inline void SkillData::clear_skillcontainerlist() {
  skillcontainerlist_.Clear();
}
inline const ::SkillContainer& SkillData::skillcontainerlist(int index) const {
  return skillcontainerlist_.Get(index);
}
inline ::SkillContainer* SkillData::mutable_skillcontainerlist(int index) {
  return skillcontainerlist_.Mutable(index);
}
inline ::SkillContainer* SkillData::add_skillcontainerlist() {
  return skillcontainerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillContainer >&
SkillData::skillcontainerlist() const {
  return skillcontainerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillContainer >*
SkillData::mutable_skillcontainerlist() {
  return &skillcontainerlist_;
}

// optional int32 CurUseContainer = 2 [default = -1];
inline bool SkillData::has_curusecontainer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillData::set_has_curusecontainer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillData::clear_has_curusecontainer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillData::clear_curusecontainer() {
  curusecontainer_ = -1;
  clear_has_curusecontainer();
}
inline ::google::protobuf::int32 SkillData::curusecontainer() const {
  return curusecontainer_;
}
inline void SkillData::set_curusecontainer(::google::protobuf::int32 value) {
  set_has_curusecontainer();
  curusecontainer_ = value;
}

// repeated int32 SkillSlotLevel = 3;
inline int SkillData::skillslotlevel_size() const {
  return skillslotlevel_.size();
}
inline void SkillData::clear_skillslotlevel() {
  skillslotlevel_.Clear();
}
inline ::google::protobuf::int32 SkillData::skillslotlevel(int index) const {
  return skillslotlevel_.Get(index);
}
inline void SkillData::set_skillslotlevel(int index, ::google::protobuf::int32 value) {
  skillslotlevel_.Set(index, value);
}
inline void SkillData::add_skillslotlevel(::google::protobuf::int32 value) {
  skillslotlevel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillData::skillslotlevel() const {
  return skillslotlevel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillData::mutable_skillslotlevel() {
  return &skillslotlevel_;
}

// -------------------------------------------------------------------

// SkillObj

// optional int32 Pos = 1 [default = -1];
inline bool SkillObj::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillObj::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillObj::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillObj::clear_pos() {
  pos_ = -1;
  clear_has_pos();
}
inline ::google::protobuf::int32 SkillObj::pos() const {
  return pos_;
}
inline void SkillObj::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 SkillId = 2 [default = -1];
inline bool SkillObj::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillObj::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillObj::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillObj::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 SkillObj::skillid() const {
  return skillid_;
}
inline void SkillObj::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// SuitInfo

// optional int32 Suit_id = 1 [default = -1];
inline bool SuitInfo::has_suit_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuitInfo::set_has_suit_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuitInfo::clear_has_suit_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuitInfo::clear_suit_id() {
  suit_id_ = -1;
  clear_has_suit_id();
}
inline ::google::protobuf::int32 SuitInfo::suit_id() const {
  return suit_id_;
}
inline void SuitInfo::set_suit_id(::google::protobuf::int32 value) {
  set_has_suit_id();
  suit_id_ = value;
}

// optional int32 Collect_num = 2 [default = -1];
inline bool SuitInfo::has_collect_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuitInfo::set_has_collect_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuitInfo::clear_has_collect_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuitInfo::clear_collect_num() {
  collect_num_ = -1;
  clear_has_collect_num();
}
inline ::google::protobuf::int32 SuitInfo::collect_num() const {
  return collect_num_;
}
inline void SuitInfo::set_collect_num(::google::protobuf::int32 value) {
  set_has_collect_num();
  collect_num_ = value;
}

// -------------------------------------------------------------------

// WorldBossInfo

// optional int32 LineID = 1 [default = -1];
inline bool WorldBossInfo::has_lineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossInfo::set_has_lineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossInfo::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossInfo::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 WorldBossInfo::lineid() const {
  return lineid_;
}
inline void WorldBossInfo::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// optional int32 HPRate = 2 [default = -1];
inline bool WorldBossInfo::has_hprate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossInfo::set_has_hprate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossInfo::clear_has_hprate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossInfo::clear_hprate() {
  hprate_ = -1;
  clear_has_hprate();
}
inline ::google::protobuf::int32 WorldBossInfo::hprate() const {
  return hprate_;
}
inline void WorldBossInfo::set_hprate(::google::protobuf::int32 value) {
  set_has_hprate();
  hprate_ = value;
}

// optional .WorldBossScoreInfo LastDamage = 3;
inline bool WorldBossInfo::has_lastdamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossInfo::set_has_lastdamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossInfo::clear_has_lastdamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossInfo::clear_lastdamage() {
  if (lastdamage_ != NULL) lastdamage_->::WorldBossScoreInfo::Clear();
  clear_has_lastdamage();
}
inline const ::WorldBossScoreInfo& WorldBossInfo::lastdamage() const {
  return lastdamage_ != NULL ? *lastdamage_ : *default_instance_->lastdamage_;
}
inline ::WorldBossScoreInfo* WorldBossInfo::mutable_lastdamage() {
  set_has_lastdamage();
  if (lastdamage_ == NULL) lastdamage_ = new ::WorldBossScoreInfo;
  return lastdamage_;
}
inline ::WorldBossScoreInfo* WorldBossInfo::release_lastdamage() {
  clear_has_lastdamage();
  ::WorldBossScoreInfo* temp = lastdamage_;
  lastdamage_ = NULL;
  return temp;
}
inline void WorldBossInfo::set_allocated_lastdamage(::WorldBossScoreInfo* lastdamage) {
  delete lastdamage_;
  lastdamage_ = lastdamage;
  if (lastdamage) {
    set_has_lastdamage();
  } else {
    clear_has_lastdamage();
  }
}

// optional .WorldBossScoreInfo MaxDamage = 4;
inline bool WorldBossInfo::has_maxdamage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBossInfo::set_has_maxdamage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBossInfo::clear_has_maxdamage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBossInfo::clear_maxdamage() {
  if (maxdamage_ != NULL) maxdamage_->::WorldBossScoreInfo::Clear();
  clear_has_maxdamage();
}
inline const ::WorldBossScoreInfo& WorldBossInfo::maxdamage() const {
  return maxdamage_ != NULL ? *maxdamage_ : *default_instance_->maxdamage_;
}
inline ::WorldBossScoreInfo* WorldBossInfo::mutable_maxdamage() {
  set_has_maxdamage();
  if (maxdamage_ == NULL) maxdamage_ = new ::WorldBossScoreInfo;
  return maxdamage_;
}
inline ::WorldBossScoreInfo* WorldBossInfo::release_maxdamage() {
  clear_has_maxdamage();
  ::WorldBossScoreInfo* temp = maxdamage_;
  maxdamage_ = NULL;
  return temp;
}
inline void WorldBossInfo::set_allocated_maxdamage(::WorldBossScoreInfo* maxdamage) {
  delete maxdamage_;
  maxdamage_ = maxdamage;
  if (maxdamage) {
    set_has_maxdamage();
  } else {
    clear_has_maxdamage();
  }
}

// -------------------------------------------------------------------

// WorldBossRankInfo

// optional int32 Rank = 1 [default = -1];
inline bool WorldBossRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossRankInfo::clear_rank() {
  rank_ = -1;
  clear_has_rank();
}
inline ::google::protobuf::int32 WorldBossRankInfo::rank() const {
  return rank_;
}
inline void WorldBossRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string Name = 2;
inline bool WorldBossRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WorldBossRankInfo::name() const {
  return *name_;
}
inline void WorldBossRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WorldBossRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WorldBossRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorldBossRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WorldBossRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WorldBossRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 3 [default = -1];
inline bool WorldBossRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossRankInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 WorldBossRankInfo::level() const {
  return level_;
}
inline void WorldBossRankInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Score = 4 [default = -1];
inline bool WorldBossRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBossRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBossRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBossRankInfo::clear_score() {
  score_ = -1;
  clear_has_score();
}
inline ::google::protobuf::int32 WorldBossRankInfo::score() const {
  return score_;
}
inline void WorldBossRankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// EquipResonanceInfo

// optional int32 ConfId = 2 [default = -1];
inline bool EquipResonanceInfo::has_confid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipResonanceInfo::set_has_confid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipResonanceInfo::clear_has_confid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipResonanceInfo::clear_confid() {
  confid_ = -1;
  clear_has_confid();
}
inline ::google::protobuf::int32 EquipResonanceInfo::confid() const {
  return confid_;
}
inline void EquipResonanceInfo::set_confid(::google::protobuf::int32 value) {
  set_has_confid();
  confid_ = value;
}

// repeated .AttrKeyValue ResonanceAttr = 3;
inline int EquipResonanceInfo::resonanceattr_size() const {
  return resonanceattr_.size();
}
inline void EquipResonanceInfo::clear_resonanceattr() {
  resonanceattr_.Clear();
}
inline const ::AttrKeyValue& EquipResonanceInfo::resonanceattr(int index) const {
  return resonanceattr_.Get(index);
}
inline ::AttrKeyValue* EquipResonanceInfo::mutable_resonanceattr(int index) {
  return resonanceattr_.Mutable(index);
}
inline ::AttrKeyValue* EquipResonanceInfo::add_resonanceattr() {
  return resonanceattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipResonanceInfo::resonanceattr() const {
  return resonanceattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipResonanceInfo::mutable_resonanceattr() {
  return &resonanceattr_;
}

// repeated .AttrKeyValue NewResonanceAttr = 4;
inline int EquipResonanceInfo::newresonanceattr_size() const {
  return newresonanceattr_.size();
}
inline void EquipResonanceInfo::clear_newresonanceattr() {
  newresonanceattr_.Clear();
}
inline const ::AttrKeyValue& EquipResonanceInfo::newresonanceattr(int index) const {
  return newresonanceattr_.Get(index);
}
inline ::AttrKeyValue* EquipResonanceInfo::mutable_newresonanceattr(int index) {
  return newresonanceattr_.Mutable(index);
}
inline ::AttrKeyValue* EquipResonanceInfo::add_newresonanceattr() {
  return newresonanceattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipResonanceInfo::newresonanceattr() const {
  return newresonanceattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipResonanceInfo::mutable_newresonanceattr() {
  return &newresonanceattr_;
}

// optional int32 BattleScore = 5 [default = -1];
inline bool EquipResonanceInfo::has_battlescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipResonanceInfo::set_has_battlescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipResonanceInfo::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipResonanceInfo::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipResonanceInfo::battlescore() const {
  return battlescore_;
}
inline void EquipResonanceInfo::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// optional int32 NewBattleScore = 6 [default = -1];
inline bool EquipResonanceInfo::has_newbattlescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipResonanceInfo::set_has_newbattlescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipResonanceInfo::clear_has_newbattlescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipResonanceInfo::clear_newbattlescore() {
  newbattlescore_ = -1;
  clear_has_newbattlescore();
}
inline ::google::protobuf::int32 EquipResonanceInfo::newbattlescore() const {
  return newbattlescore_;
}
inline void EquipResonanceInfo::set_newbattlescore(::google::protobuf::int32 value) {
  set_has_newbattlescore();
  newbattlescore_ = value;
}

// -------------------------------------------------------------------

// EquipResonanceData

// repeated .EquipResonanceInfo ResonanceList = 1;
inline int EquipResonanceData::resonancelist_size() const {
  return resonancelist_.size();
}
inline void EquipResonanceData::clear_resonancelist() {
  resonancelist_.Clear();
}
inline const ::EquipResonanceInfo& EquipResonanceData::resonancelist(int index) const {
  return resonancelist_.Get(index);
}
inline ::EquipResonanceInfo* EquipResonanceData::mutable_resonancelist(int index) {
  return resonancelist_.Mutable(index);
}
inline ::EquipResonanceInfo* EquipResonanceData::add_resonancelist() {
  return resonancelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipResonanceInfo >&
EquipResonanceData::resonancelist() const {
  return resonancelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipResonanceInfo >*
EquipResonanceData::mutable_resonancelist() {
  return &resonancelist_;
}

// -------------------------------------------------------------------

// EquipWashInfo

// optional uint64 EquipGuid = 1 [default = 0];
inline bool EquipWashInfo::has_equipguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipWashInfo::set_has_equipguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipWashInfo::clear_has_equipguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipWashInfo::clear_equipguid() {
  equipguid_ = GOOGLE_ULONGLONG(0);
  clear_has_equipguid();
}
inline ::google::protobuf::uint64 EquipWashInfo::equipguid() const {
  return equipguid_;
}
inline void EquipWashInfo::set_equipguid(::google::protobuf::uint64 value) {
  set_has_equipguid();
  equipguid_ = value;
}

// repeated .AttrKeyValue ExtraAttr = 2;
inline int EquipWashInfo::extraattr_size() const {
  return extraattr_.size();
}
inline void EquipWashInfo::clear_extraattr() {
  extraattr_.Clear();
}
inline const ::AttrKeyValue& EquipWashInfo::extraattr(int index) const {
  return extraattr_.Get(index);
}
inline ::AttrKeyValue* EquipWashInfo::mutable_extraattr(int index) {
  return extraattr_.Mutable(index);
}
inline ::AttrKeyValue* EquipWashInfo::add_extraattr() {
  return extraattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipWashInfo::extraattr() const {
  return extraattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipWashInfo::mutable_extraattr() {
  return &extraattr_;
}

// repeated int32 LockedIndex = 3;
inline int EquipWashInfo::lockedindex_size() const {
  return lockedindex_.size();
}
inline void EquipWashInfo::clear_lockedindex() {
  lockedindex_.Clear();
}
inline ::google::protobuf::int32 EquipWashInfo::lockedindex(int index) const {
  return lockedindex_.Get(index);
}
inline void EquipWashInfo::set_lockedindex(int index, ::google::protobuf::int32 value) {
  lockedindex_.Set(index, value);
}
inline void EquipWashInfo::add_lockedindex(::google::protobuf::int32 value) {
  lockedindex_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipWashInfo::lockedindex() const {
  return lockedindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipWashInfo::mutable_lockedindex() {
  return &lockedindex_;
}

// optional int32 BattleScore = 4 [default = -1];
inline bool EquipWashInfo::has_battlescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipWashInfo::set_has_battlescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipWashInfo::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipWashInfo::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipWashInfo::battlescore() const {
  return battlescore_;
}
inline void EquipWashInfo::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// -------------------------------------------------------------------

// EquipWashData

// repeated .EquipWashInfo EquipWashInfoList = 1;
inline int EquipWashData::equipwashinfolist_size() const {
  return equipwashinfolist_.size();
}
inline void EquipWashData::clear_equipwashinfolist() {
  equipwashinfolist_.Clear();
}
inline const ::EquipWashInfo& EquipWashData::equipwashinfolist(int index) const {
  return equipwashinfolist_.Get(index);
}
inline ::EquipWashInfo* EquipWashData::mutable_equipwashinfolist(int index) {
  return equipwashinfolist_.Mutable(index);
}
inline ::EquipWashInfo* EquipWashData::add_equipwashinfolist() {
  return equipwashinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipWashInfo >&
EquipWashData::equipwashinfolist() const {
  return equipwashinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipWashInfo >*
EquipWashData::mutable_equipwashinfolist() {
  return &equipwashinfolist_;
}

// optional int32 LeftTimes = 2 [default = -1];
inline bool EquipWashData::has_lefttimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipWashData::set_has_lefttimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipWashData::clear_has_lefttimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipWashData::clear_lefttimes() {
  lefttimes_ = -1;
  clear_has_lefttimes();
}
inline ::google::protobuf::int32 EquipWashData::lefttimes() const {
  return lefttimes_;
}
inline void EquipWashData::set_lefttimes(::google::protobuf::int32 value) {
  set_has_lefttimes();
  lefttimes_ = value;
}

// -------------------------------------------------------------------

// Resource

// optional int32 Type = 1 [default = 0];
inline bool Resource::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Resource::type() const {
  return type_;
}
inline void Resource::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 Value = 2 [default = 0];
inline bool Resource::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 Resource::value() const {
  return value_;
}
inline void Resource::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int64 TodayValue = 3 [default = -1];
inline bool Resource::has_todayvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resource::set_has_todayvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Resource::clear_has_todayvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Resource::clear_todayvalue() {
  todayvalue_ = GOOGLE_LONGLONG(-1);
  clear_has_todayvalue();
}
inline ::google::protobuf::int64 Resource::todayvalue() const {
  return todayvalue_;
}
inline void Resource::set_todayvalue(::google::protobuf::int64 value) {
  set_has_todayvalue();
  todayvalue_ = value;
}

// -------------------------------------------------------------------

// BuinessSkillData

// optional int32 SkillID = 1 [default = -1];
inline bool BuinessSkillData::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuinessSkillData::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuinessSkillData::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuinessSkillData::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuinessSkillData::skillid() const {
  return skillid_;
}
inline void BuinessSkillData::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 SkillLv = 2 [default = -1];
inline bool BuinessSkillData::has_skilllv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuinessSkillData::set_has_skilllv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuinessSkillData::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuinessSkillData::clear_skilllv() {
  skilllv_ = -1;
  clear_has_skilllv();
}
inline ::google::protobuf::int32 BuinessSkillData::skilllv() const {
  return skilllv_;
}
inline void BuinessSkillData::set_skilllv(::google::protobuf::int32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// optional int32 Locked = 3 [default = -1];
inline bool BuinessSkillData::has_locked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuinessSkillData::set_has_locked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuinessSkillData::clear_has_locked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuinessSkillData::clear_locked() {
  locked_ = -1;
  clear_has_locked();
}
inline ::google::protobuf::int32 BuinessSkillData::locked() const {
  return locked_;
}
inline void BuinessSkillData::set_locked(::google::protobuf::int32 value) {
  set_has_locked();
  locked_ = value;
}

// optional int32 SkillExp = 4 [default = -1];
inline bool BuinessSkillData::has_skillexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuinessSkillData::set_has_skillexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuinessSkillData::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuinessSkillData::clear_skillexp() {
  skillexp_ = -1;
  clear_has_skillexp();
}
inline ::google::protobuf::int32 BuinessSkillData::skillexp() const {
  return skillexp_;
}
inline void BuinessSkillData::set_skillexp(::google::protobuf::int32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// optional int32 UseCount = 5 [default = -1];
inline bool BuinessSkillData::has_usecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuinessSkillData::set_has_usecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuinessSkillData::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuinessSkillData::clear_usecount() {
  usecount_ = -1;
  clear_has_usecount();
}
inline ::google::protobuf::int32 BuinessSkillData::usecount() const {
  return usecount_;
}
inline void BuinessSkillData::set_usecount(::google::protobuf::int32 value) {
  set_has_usecount();
  usecount_ = value;
}

// -------------------------------------------------------------------

// BuinessUnlockInfo

// optional int32 Mutual = 1 [default = -1];
inline bool BuinessUnlockInfo::has_mutual() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuinessUnlockInfo::set_has_mutual() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuinessUnlockInfo::clear_has_mutual() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuinessUnlockInfo::clear_mutual() {
  mutual_ = -1;
  clear_has_mutual();
}
inline ::google::protobuf::int32 BuinessUnlockInfo::mutual() const {
  return mutual_;
}
inline void BuinessUnlockInfo::set_mutual(::google::protobuf::int32 value) {
  set_has_mutual();
  mutual_ = value;
}

// optional int64 EndTime = 2 [default = -1];
inline bool BuinessUnlockInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuinessUnlockInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuinessUnlockInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuinessUnlockInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(-1);
  clear_has_endtime();
}
inline ::google::protobuf::int64 BuinessUnlockInfo::endtime() const {
  return endtime_;
}
inline void BuinessUnlockInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// CompletedQuestList

// repeated int32 IdList = 1;
inline int CompletedQuestList::idlist_size() const {
  return idlist_.size();
}
inline void CompletedQuestList::clear_idlist() {
  idlist_.Clear();
}
inline ::google::protobuf::int32 CompletedQuestList::idlist(int index) const {
  return idlist_.Get(index);
}
inline void CompletedQuestList::set_idlist(int index, ::google::protobuf::int32 value) {
  idlist_.Set(index, value);
}
inline void CompletedQuestList::add_idlist(::google::protobuf::int32 value) {
  idlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompletedQuestList::idlist() const {
  return idlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompletedQuestList::mutable_idlist() {
  return &idlist_;
}

// repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
inline int CompletedQuestList::maxcompleteidlist_size() const {
  return maxcompleteidlist_.size();
}
inline void CompletedQuestList::clear_maxcompleteidlist() {
  maxcompleteidlist_.Clear();
}
inline const ::MaxQuestCompleteId& CompletedQuestList::maxcompleteidlist(int index) const {
  return maxcompleteidlist_.Get(index);
}
inline ::MaxQuestCompleteId* CompletedQuestList::mutable_maxcompleteidlist(int index) {
  return maxcompleteidlist_.Mutable(index);
}
inline ::MaxQuestCompleteId* CompletedQuestList::add_maxcompleteidlist() {
  return maxcompleteidlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MaxQuestCompleteId >&
CompletedQuestList::maxcompleteidlist() const {
  return maxcompleteidlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MaxQuestCompleteId >*
CompletedQuestList::mutable_maxcompleteidlist() {
  return &maxcompleteidlist_;
}

// -------------------------------------------------------------------

// EliteMonsterInfo

// optional int32 FinishTime = 3 [default = -1];
inline bool EliteMonsterInfo::has_finishtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EliteMonsterInfo::set_has_finishtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EliteMonsterInfo::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EliteMonsterInfo::clear_finishtime() {
  finishtime_ = -1;
  clear_has_finishtime();
}
inline ::google::protobuf::int32 EliteMonsterInfo::finishtime() const {
  return finishtime_;
}
inline void EliteMonsterInfo::set_finishtime(::google::protobuf::int32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// optional int32 CommonId = 4 [default = -1];
inline bool EliteMonsterInfo::has_commonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EliteMonsterInfo::set_has_commonid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EliteMonsterInfo::clear_has_commonid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EliteMonsterInfo::clear_commonid() {
  commonid_ = -1;
  clear_has_commonid();
}
inline ::google::protobuf::int32 EliteMonsterInfo::commonid() const {
  return commonid_;
}
inline void EliteMonsterInfo::set_commonid(::google::protobuf::int32 value) {
  set_has_commonid();
  commonid_ = value;
}

// -------------------------------------------------------------------

// JewelSlot

// optional int32 ItemId = 1 [default = -1];
inline bool JewelSlot::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelSlot::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelSlot::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelSlot::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 JewelSlot::itemid() const {
  return itemid_;
}
inline void JewelSlot::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional bool Unlocked = 2 [default = false];
inline bool JewelSlot::has_unlocked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JewelSlot::set_has_unlocked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JewelSlot::clear_has_unlocked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JewelSlot::clear_unlocked() {
  unlocked_ = false;
  clear_has_unlocked();
}
inline bool JewelSlot::unlocked() const {
  return unlocked_;
}
inline void JewelSlot::set_unlocked(bool value) {
  set_has_unlocked();
  unlocked_ = value;
}

// -------------------------------------------------------------------

// JewelInfo

// optional int32 EquipSlot = 1 [default = -1];
inline bool JewelInfo::has_equipslot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JewelInfo::set_has_equipslot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JewelInfo::clear_has_equipslot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JewelInfo::clear_equipslot() {
  equipslot_ = -1;
  clear_has_equipslot();
}
inline ::google::protobuf::int32 JewelInfo::equipslot() const {
  return equipslot_;
}
inline void JewelInfo::set_equipslot(::google::protobuf::int32 value) {
  set_has_equipslot();
  equipslot_ = value;
}

// repeated .JewelSlot JewelSlots = 2;
inline int JewelInfo::jewelslots_size() const {
  return jewelslots_.size();
}
inline void JewelInfo::clear_jewelslots() {
  jewelslots_.Clear();
}
inline const ::JewelSlot& JewelInfo::jewelslots(int index) const {
  return jewelslots_.Get(index);
}
inline ::JewelSlot* JewelInfo::mutable_jewelslots(int index) {
  return jewelslots_.Mutable(index);
}
inline ::JewelSlot* JewelInfo::add_jewelslots() {
  return jewelslots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JewelSlot >&
JewelInfo::jewelslots() const {
  return jewelslots_;
}
inline ::google::protobuf::RepeatedPtrField< ::JewelSlot >*
JewelInfo::mutable_jewelslots() {
  return &jewelslots_;
}

// -------------------------------------------------------------------

// EquipSlotInfo

// optional int32 Enhance_Level = 1 [default = -1];
inline bool EquipSlotInfo::has_enhance_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipSlotInfo::set_has_enhance_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipSlotInfo::clear_has_enhance_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipSlotInfo::clear_enhance_level() {
  enhance_level_ = -1;
  clear_has_enhance_level();
}
inline ::google::protobuf::int32 EquipSlotInfo::enhance_level() const {
  return enhance_level_;
}
inline void EquipSlotInfo::set_enhance_level(::google::protobuf::int32 value) {
  set_has_enhance_level();
  enhance_level_ = value;
}

// optional int32 Enhance_Exp = 2 [default = -1];
inline bool EquipSlotInfo::has_enhance_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipSlotInfo::set_has_enhance_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipSlotInfo::clear_has_enhance_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipSlotInfo::clear_enhance_exp() {
  enhance_exp_ = -1;
  clear_has_enhance_exp();
}
inline ::google::protobuf::int32 EquipSlotInfo::enhance_exp() const {
  return enhance_exp_;
}
inline void EquipSlotInfo::set_enhance_exp(::google::protobuf::int32 value) {
  set_has_enhance_exp();
  enhance_exp_ = value;
}

// repeated .AttrKeyValue Enhance_Attr = 3;
inline int EquipSlotInfo::enhance_attr_size() const {
  return enhance_attr_.size();
}
inline void EquipSlotInfo::clear_enhance_attr() {
  enhance_attr_.Clear();
}
inline const ::AttrKeyValue& EquipSlotInfo::enhance_attr(int index) const {
  return enhance_attr_.Get(index);
}
inline ::AttrKeyValue* EquipSlotInfo::mutable_enhance_attr(int index) {
  return enhance_attr_.Mutable(index);
}
inline ::AttrKeyValue* EquipSlotInfo::add_enhance_attr() {
  return enhance_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
EquipSlotInfo::enhance_attr() const {
  return enhance_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
EquipSlotInfo::mutable_enhance_attr() {
  return &enhance_attr_;
}

// optional int32 BattleScore = 4 [default = -1];
inline bool EquipSlotInfo::has_battlescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipSlotInfo::set_has_battlescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipSlotInfo::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipSlotInfo::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipSlotInfo::battlescore() const {
  return battlescore_;
}
inline void EquipSlotInfo::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// optional int32 Slot_Type = 5 [default = -1];
inline bool EquipSlotInfo::has_slot_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipSlotInfo::set_has_slot_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipSlotInfo::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipSlotInfo::clear_slot_type() {
  slot_type_ = -1;
  clear_has_slot_type();
}
inline ::google::protobuf::int32 EquipSlotInfo::slot_type() const {
  return slot_type_;
}
inline void EquipSlotInfo::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
}

// -------------------------------------------------------------------

// WorshipPlayerData

// optional int32 Role_id = 1 [default = -1];
inline bool WorshipPlayerData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorshipPlayerData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorshipPlayerData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorshipPlayerData::clear_role_id() {
  role_id_ = -1;
  clear_has_role_id();
}
inline ::google::protobuf::int32 WorshipPlayerData::role_id() const {
  return role_id_;
}
inline void WorshipPlayerData::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string Role_name = 2;
inline bool WorshipPlayerData::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorshipPlayerData::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorshipPlayerData::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorshipPlayerData::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& WorshipPlayerData::role_name() const {
  return *role_name_;
}
inline void WorshipPlayerData::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void WorshipPlayerData::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void WorshipPlayerData::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorshipPlayerData::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* WorshipPlayerData::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WorshipPlayerData::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Rank_level = 3 [default = -1];
inline bool WorshipPlayerData::has_rank_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorshipPlayerData::set_has_rank_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorshipPlayerData::clear_has_rank_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorshipPlayerData::clear_rank_level() {
  rank_level_ = -1;
  clear_has_rank_level();
}
inline ::google::protobuf::int32 WorshipPlayerData::rank_level() const {
  return rank_level_;
}
inline void WorshipPlayerData::set_rank_level(::google::protobuf::int32 value) {
  set_has_rank_level();
  rank_level_ = value;
}

// optional int32 Worship_cout = 4 [default = -1];
inline bool WorshipPlayerData::has_worship_cout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorshipPlayerData::set_has_worship_cout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorshipPlayerData::clear_has_worship_cout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorshipPlayerData::clear_worship_cout() {
  worship_cout_ = -1;
  clear_has_worship_cout();
}
inline ::google::protobuf::int32 WorshipPlayerData::worship_cout() const {
  return worship_cout_;
}
inline void WorshipPlayerData::set_worship_cout(::google::protobuf::int32 value) {
  set_has_worship_cout();
  worship_cout_ = value;
}

// optional int32 Rank = 5 [default = -1];
inline bool WorshipPlayerData::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorshipPlayerData::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorshipPlayerData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorshipPlayerData::clear_rank() {
  rank_ = -1;
  clear_has_rank();
}
inline ::google::protobuf::int32 WorshipPlayerData::rank() const {
  return rank_;
}
inline void WorshipPlayerData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// RecoverMedicament

// repeated int32 HpMedicamentList = 1;
inline int RecoverMedicament::hpmedicamentlist_size() const {
  return hpmedicamentlist_.size();
}
inline void RecoverMedicament::clear_hpmedicamentlist() {
  hpmedicamentlist_.Clear();
}
inline ::google::protobuf::int32 RecoverMedicament::hpmedicamentlist(int index) const {
  return hpmedicamentlist_.Get(index);
}
inline void RecoverMedicament::set_hpmedicamentlist(int index, ::google::protobuf::int32 value) {
  hpmedicamentlist_.Set(index, value);
}
inline void RecoverMedicament::add_hpmedicamentlist(::google::protobuf::int32 value) {
  hpmedicamentlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecoverMedicament::hpmedicamentlist() const {
  return hpmedicamentlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecoverMedicament::mutable_hpmedicamentlist() {
  return &hpmedicamentlist_;
}

// optional int32 AutoHpMedicament = 2 [default = -1];
inline bool RecoverMedicament::has_autohpmedicament() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverMedicament::set_has_autohpmedicament() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverMedicament::clear_has_autohpmedicament() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverMedicament::clear_autohpmedicament() {
  autohpmedicament_ = -1;
  clear_has_autohpmedicament();
}
inline ::google::protobuf::int32 RecoverMedicament::autohpmedicament() const {
  return autohpmedicament_;
}
inline void RecoverMedicament::set_autohpmedicament(::google::protobuf::int32 value) {
  set_has_autohpmedicament();
  autohpmedicament_ = value;
}

// optional int32 HpPercentage = 3 [default = -1];
inline bool RecoverMedicament::has_hppercentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoverMedicament::set_has_hppercentage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoverMedicament::clear_has_hppercentage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoverMedicament::clear_hppercentage() {
  hppercentage_ = -1;
  clear_has_hppercentage();
}
inline ::google::protobuf::int32 RecoverMedicament::hppercentage() const {
  return hppercentage_;
}
inline void RecoverMedicament::set_hppercentage(::google::protobuf::int32 value) {
  set_has_hppercentage();
  hppercentage_ = value;
}

// -------------------------------------------------------------------

// MailInfo

// optional int32 Mail_type = 1 [default = 0];
inline bool MailInfo::has_mail_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailInfo::set_has_mail_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailInfo::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailInfo::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 MailInfo::mail_type() const {
  return mail_type_;
}
inline void MailInfo::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// optional int32 Mail_id = 2 [default = 0];
inline bool MailInfo::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailInfo::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailInfo::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailInfo::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 MailInfo::mail_id() const {
  return mail_id_;
}
inline void MailInfo::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional bool IsRead = 3 [default = false];
inline bool MailInfo::has_isread() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailInfo::set_has_isread() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailInfo::clear_has_isread() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailInfo::clear_isread() {
  isread_ = false;
  clear_has_isread();
}
inline bool MailInfo::isread() const {
  return isread_;
}
inline void MailInfo::set_isread(bool value) {
  set_has_isread();
  isread_ = value;
}

// optional bool IsGet = 4 [default = false];
inline bool MailInfo::has_isget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailInfo::set_has_isget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailInfo::clear_has_isget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailInfo::clear_isget() {
  isget_ = false;
  clear_has_isget();
}
inline bool MailInfo::isget() const {
  return isget_;
}
inline void MailInfo::set_isget(bool value) {
  set_has_isget();
  isget_ = value;
}

// optional string Title = 5;
inline bool MailInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MailInfo::title() const {
  return *title_;
}
inline void MailInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MailInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MailInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MailInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Salutation = 6;
inline bool MailInfo::has_salutation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailInfo::set_has_salutation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailInfo::clear_has_salutation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailInfo::clear_salutation() {
  if (salutation_ != &::google::protobuf::internal::kEmptyString) {
    salutation_->clear();
  }
  clear_has_salutation();
}
inline const ::std::string& MailInfo::salutation() const {
  return *salutation_;
}
inline void MailInfo::set_salutation(const ::std::string& value) {
  set_has_salutation();
  if (salutation_ == &::google::protobuf::internal::kEmptyString) {
    salutation_ = new ::std::string;
  }
  salutation_->assign(value);
}
inline void MailInfo::set_salutation(const char* value) {
  set_has_salutation();
  if (salutation_ == &::google::protobuf::internal::kEmptyString) {
    salutation_ = new ::std::string;
  }
  salutation_->assign(value);
}
inline void MailInfo::set_salutation(const char* value, size_t size) {
  set_has_salutation();
  if (salutation_ == &::google::protobuf::internal::kEmptyString) {
    salutation_ = new ::std::string;
  }
  salutation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_salutation() {
  set_has_salutation();
  if (salutation_ == &::google::protobuf::internal::kEmptyString) {
    salutation_ = new ::std::string;
  }
  return salutation_;
}
inline ::std::string* MailInfo::release_salutation() {
  clear_has_salutation();
  if (salutation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = salutation_;
    salutation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_salutation(::std::string* salutation) {
  if (salutation_ != &::google::protobuf::internal::kEmptyString) {
    delete salutation_;
  }
  if (salutation) {
    set_has_salutation();
    salutation_ = salutation;
  } else {
    clear_has_salutation();
    salutation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Content = 7;
inline bool MailInfo::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailInfo::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MailInfo::content() const {
  return *content_;
}
inline void MailInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MailInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Sender_name = 8;
inline bool MailInfo::has_sender_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailInfo::set_has_sender_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailInfo::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailInfo::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& MailInfo::sender_name() const {
  return *sender_name_;
}
inline void MailInfo::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void MailInfo::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void MailInfo::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* MailInfo::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .MailItem ItemList = 9;
inline int MailInfo::itemlist_size() const {
  return itemlist_.size();
}
inline void MailInfo::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::MailItem& MailInfo::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::MailItem* MailInfo::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::MailItem* MailInfo::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MailItem >&
MailInfo::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MailItem >*
MailInfo::mutable_itemlist() {
  return &itemlist_;
}

// optional uint64 Sender_id = 10 [default = 0];
inline bool MailInfo::has_sender_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailInfo::set_has_sender_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailInfo::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailInfo::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::uint64 MailInfo::sender_id() const {
  return sender_id_;
}
inline void MailInfo::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional int32 Start_time = 11 [default = -1];
inline bool MailInfo::has_start_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MailInfo::set_has_start_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MailInfo::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MailInfo::clear_start_time() {
  start_time_ = -1;
  clear_has_start_time();
}
inline ::google::protobuf::int32 MailInfo::start_time() const {
  return start_time_;
}
inline void MailInfo::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 Expire_time = 12 [default = -1];
inline bool MailInfo::has_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MailInfo::set_has_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MailInfo::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MailInfo::clear_expire_time() {
  expire_time_ = -1;
  clear_has_expire_time();
}
inline ::google::protobuf::int32 MailInfo::expire_time() const {
  return expire_time_;
}
inline void MailInfo::set_expire_time(::google::protobuf::int32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional uint64 Receiver_id = 13 [default = 0];
inline bool MailInfo::has_receiver_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MailInfo::set_has_receiver_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MailInfo::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MailInfo::clear_receiver_id() {
  receiver_id_ = GOOGLE_ULONGLONG(0);
  clear_has_receiver_id();
}
inline ::google::protobuf::uint64 MailInfo::receiver_id() const {
  return receiver_id_;
}
inline void MailInfo::set_receiver_id(::google::protobuf::uint64 value) {
  set_has_receiver_id();
  receiver_id_ = value;
}

// -------------------------------------------------------------------

// EquipSlotStarInfo

// optional int32 RankUp_Level = 1 [default = -1];
inline bool EquipSlotStarInfo::has_rankup_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipSlotStarInfo::set_has_rankup_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipSlotStarInfo::clear_has_rankup_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipSlotStarInfo::clear_rankup_level() {
  rankup_level_ = -1;
  clear_has_rankup_level();
}
inline ::google::protobuf::int32 EquipSlotStarInfo::rankup_level() const {
  return rankup_level_;
}
inline void EquipSlotStarInfo::set_rankup_level(::google::protobuf::int32 value) {
  set_has_rankup_level();
  rankup_level_ = value;
}

// optional int32 Slot_Type = 3 [default = -1];
inline bool EquipSlotStarInfo::has_slot_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipSlotStarInfo::set_has_slot_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipSlotStarInfo::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipSlotStarInfo::clear_slot_type() {
  slot_type_ = -1;
  clear_has_slot_type();
}
inline ::google::protobuf::int32 EquipSlotStarInfo::slot_type() const {
  return slot_type_;
}
inline void EquipSlotStarInfo::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
}

// optional int32 BattleScore = 4 [default = -1];
inline bool EquipSlotStarInfo::has_battlescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipSlotStarInfo::set_has_battlescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipSlotStarInfo::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipSlotStarInfo::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 EquipSlotStarInfo::battlescore() const {
  return battlescore_;
}
inline void EquipSlotStarInfo::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// optional int32 NextBattleScore = 6 [default = -1];
inline bool EquipSlotStarInfo::has_nextbattlescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipSlotStarInfo::set_has_nextbattlescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipSlotStarInfo::clear_has_nextbattlescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipSlotStarInfo::clear_nextbattlescore() {
  nextbattlescore_ = -1;
  clear_has_nextbattlescore();
}
inline ::google::protobuf::int32 EquipSlotStarInfo::nextbattlescore() const {
  return nextbattlescore_;
}
inline void EquipSlotStarInfo::set_nextbattlescore(::google::protobuf::int32 value) {
  set_has_nextbattlescore();
  nextbattlescore_ = value;
}

// -------------------------------------------------------------------

// DropItem

// optional int32 ItemType = 1 [default = -1];
inline bool DropItem::has_itemtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropItem::set_has_itemtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropItem::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropItem::clear_itemtype() {
  itemtype_ = -1;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 DropItem::itemtype() const {
  return itemtype_;
}
inline void DropItem::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
}

// optional int32 ItemID = 2 [default = -1];
inline bool DropItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropItem::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 DropItem::itemid() const {
  return itemid_;
}
inline void DropItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 ItemNum = 3 [default = -1];
inline bool DropItem::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropItem::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropItem::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropItem::clear_itemnum() {
  itemnum_ = -1;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 DropItem::itemnum() const {
  return itemnum_;
}
inline void DropItem::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional bool Bind = 4 [default = false];
inline bool DropItem::has_bind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DropItem::set_has_bind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DropItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DropItem::clear_bind() {
  bind_ = false;
  clear_has_bind();
}
inline bool DropItem::bind() const {
  return bind_;
}
inline void DropItem::set_bind(bool value) {
  set_has_bind();
  bind_ = value;
}

// optional bool Transit = 5 [default = false];
inline bool DropItem::has_transit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DropItem::set_has_transit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DropItem::clear_has_transit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DropItem::clear_transit() {
  transit_ = false;
  clear_has_transit();
}
inline bool DropItem::transit() const {
  return transit_;
}
inline void DropItem::set_transit(bool value) {
  set_has_transit();
  transit_ = value;
}

// -------------------------------------------------------------------

// PetData

// optional int32 Exp = 1 [default = -1];
inline bool PetData::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetData::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetData::clear_exp() {
  exp_ = -1;
  clear_has_exp();
}
inline ::google::protobuf::int32 PetData::exp() const {
  return exp_;
}
inline void PetData::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 Level = 2 [default = -1];
inline bool PetData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetData::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 PetData::level() const {
  return level_;
}
inline void PetData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string Name = 3;
inline bool PetData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PetData::name() const {
  return *name_;
}
inline void PetData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PetData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PetData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PetData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PetData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .AttrKeyValue Attrs = 5;
inline int PetData::attrs_size() const {
  return attrs_.size();
}
inline void PetData::clear_attrs() {
  attrs_.Clear();
}
inline const ::AttrKeyValue& PetData::attrs(int index) const {
  return attrs_.Get(index);
}
inline ::AttrKeyValue* PetData::mutable_attrs(int index) {
  return attrs_.Mutable(index);
}
inline ::AttrKeyValue* PetData::add_attrs() {
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
PetData::attrs() const {
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
PetData::mutable_attrs() {
  return &attrs_;
}

// optional int32 BattleScore = 6 [default = -1];
inline bool PetData::has_battlescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PetData::set_has_battlescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PetData::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PetData::clear_battlescore() {
  battlescore_ = -1;
  clear_has_battlescore();
}
inline ::google::protobuf::int32 PetData::battlescore() const {
  return battlescore_;
}
inline void PetData::set_battlescore(::google::protobuf::int32 value) {
  set_has_battlescore();
  battlescore_ = value;
}

// repeated .AttrKeyValue Talent = 7;
inline int PetData::talent_size() const {
  return talent_.size();
}
inline void PetData::clear_talent() {
  talent_.Clear();
}
inline const ::AttrKeyValue& PetData::talent(int index) const {
  return talent_.Get(index);
}
inline ::AttrKeyValue* PetData::mutable_talent(int index) {
  return talent_.Mutable(index);
}
inline ::AttrKeyValue* PetData::add_talent() {
  return talent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
PetData::talent() const {
  return talent_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
PetData::mutable_talent() {
  return &talent_;
}

// repeated .PetSkill SkillList = 8;
inline int PetData::skilllist_size() const {
  return skilllist_.size();
}
inline void PetData::clear_skilllist() {
  skilllist_.Clear();
}
inline const ::PetSkill& PetData::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline ::PetSkill* PetData::mutable_skilllist(int index) {
  return skilllist_.Mutable(index);
}
inline ::PetSkill* PetData::add_skilllist() {
  return skilllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PetSkill >&
PetData::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PetSkill >*
PetData::mutable_skilllist() {
  return &skilllist_;
}

// optional bool IsActive = 9 [default = false];
inline bool PetData::has_isactive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetData::set_has_isactive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetData::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetData::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool PetData::isactive() const {
  return isactive_;
}
inline void PetData::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
}

// optional int32 TalentScore = 10 [default = -1];
inline bool PetData::has_talentscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetData::set_has_talentscore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetData::clear_has_talentscore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetData::clear_talentscore() {
  talentscore_ = -1;
  clear_has_talentscore();
}
inline ::google::protobuf::int32 PetData::talentscore() const {
  return talentscore_;
}
inline void PetData::set_talentscore(::google::protobuf::int32 value) {
  set_has_talentscore();
  talentscore_ = value;
}

// -------------------------------------------------------------------

// EquipBuildAtf

// optional int32 Level = 1 [default = -1];
inline bool EquipBuildAtf::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipBuildAtf::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipBuildAtf::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipBuildAtf::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 EquipBuildAtf::level() const {
  return level_;
}
inline void EquipBuildAtf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Atf_value = 2 [default = -1];
inline bool EquipBuildAtf::has_atf_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipBuildAtf::set_has_atf_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipBuildAtf::clear_has_atf_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipBuildAtf::clear_atf_value() {
  atf_value_ = -1;
  clear_has_atf_value();
}
inline ::google::protobuf::int32 EquipBuildAtf::atf_value() const {
  return atf_value_;
}
inline void EquipBuildAtf::set_atf_value(::google::protobuf::int32 value) {
  set_has_atf_value();
  atf_value_ = value;
}

// -------------------------------------------------------------------

// TreasureData

// optional int32 ID = 1 [default = -1];
inline bool TreasureData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureData::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 TreasureData::id() const {
  return id_;
}
inline void TreasureData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .TreasureExtraInfo Extra_Info = 2;
inline int TreasureData::extra_info_size() const {
  return extra_info_.size();
}
inline void TreasureData::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::TreasureExtraInfo& TreasureData::extra_info(int index) const {
  return extra_info_.Get(index);
}
inline ::TreasureExtraInfo* TreasureData::mutable_extra_info(int index) {
  return extra_info_.Mutable(index);
}
inline ::TreasureExtraInfo* TreasureData::add_extra_info() {
  return extra_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TreasureExtraInfo >&
TreasureData::extra_info() const {
  return extra_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::TreasureExtraInfo >*
TreasureData::mutable_extra_info() {
  return &extra_info_;
}

// -------------------------------------------------------------------

// TreasureExtraInfo

// optional int32 Color_Type = 1 [default = -1];
inline bool TreasureExtraInfo::has_color_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureExtraInfo::set_has_color_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureExtraInfo::clear_has_color_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureExtraInfo::clear_color_type() {
  color_type_ = -1;
  clear_has_color_type();
}
inline ::google::protobuf::int32 TreasureExtraInfo::color_type() const {
  return color_type_;
}
inline void TreasureExtraInfo::set_color_type(::google::protobuf::int32 value) {
  set_has_color_type();
  color_type_ = value;
}

// optional int32 Time_Type = 2 [default = -1];
inline bool TreasureExtraInfo::has_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureExtraInfo::set_has_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureExtraInfo::clear_has_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureExtraInfo::clear_time_type() {
  time_type_ = -1;
  clear_has_time_type();
}
inline ::google::protobuf::int32 TreasureExtraInfo::time_type() const {
  return time_type_;
}
inline void TreasureExtraInfo::set_time_type(::google::protobuf::int32 value) {
  set_has_time_type();
  time_type_ = value;
}

// optional int32 State = 3 [default = 0];
inline bool TreasureExtraInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureExtraInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureExtraInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureExtraInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 TreasureExtraInfo::state() const {
  return state_;
}
inline void TreasureExtraInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int64 Expier_Time = 4 [default = -1];
inline bool TreasureExtraInfo::has_expier_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureExtraInfo::set_has_expier_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureExtraInfo::clear_has_expier_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureExtraInfo::clear_expier_time() {
  expier_time_ = GOOGLE_LONGLONG(-1);
  clear_has_expier_time();
}
inline ::google::protobuf::int64 TreasureExtraInfo::expier_time() const {
  return expier_time_;
}
inline void TreasureExtraInfo::set_expier_time(::google::protobuf::int64 value) {
  set_has_expier_time();
  expier_time_ = value;
}

// -------------------------------------------------------------------

// TreasureDepotData

// optional int32 Level = 1 [default = 1];
inline bool TreasureDepotData::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureDepotData::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureDepotData::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureDepotData::clear_level() {
  level_ = 1;
  clear_has_level();
}
inline ::google::protobuf::int32 TreasureDepotData::level() const {
  return level_;
}
inline void TreasureDepotData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Point = 2 [default = 0];
inline bool TreasureDepotData::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureDepotData::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureDepotData::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureDepotData::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 TreasureDepotData::point() const {
  return point_;
}
inline void TreasureDepotData::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// repeated .TreasureData Treasure_Data = 3;
inline int TreasureDepotData::treasure_data_size() const {
  return treasure_data_.size();
}
inline void TreasureDepotData::clear_treasure_data() {
  treasure_data_.Clear();
}
inline const ::TreasureData& TreasureDepotData::treasure_data(int index) const {
  return treasure_data_.Get(index);
}
inline ::TreasureData* TreasureDepotData::mutable_treasure_data(int index) {
  return treasure_data_.Mutable(index);
}
inline ::TreasureData* TreasureDepotData::add_treasure_data() {
  return treasure_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TreasureData >&
TreasureDepotData::treasure_data() const {
  return treasure_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::TreasureData >*
TreasureDepotData::mutable_treasure_data() {
  return &treasure_data_;
}

// -------------------------------------------------------------------

// ShopItem

// optional int32 ShopItemID = 1 [default = -1];
inline bool ShopItem::has_shopitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopItem::set_has_shopitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopItem::clear_has_shopitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopItem::clear_shopitemid() {
  shopitemid_ = -1;
  clear_has_shopitemid();
}
inline ::google::protobuf::int32 ShopItem::shopitemid() const {
  return shopitemid_;
}
inline void ShopItem::set_shopitemid(::google::protobuf::int32 value) {
  set_has_shopitemid();
  shopitemid_ = value;
}

// optional int32 TotalBuyCount = 2 [default = -1];
inline bool ShopItem::has_totalbuycount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopItem::set_has_totalbuycount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopItem::clear_has_totalbuycount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopItem::clear_totalbuycount() {
  totalbuycount_ = -1;
  clear_has_totalbuycount();
}
inline ::google::protobuf::int32 ShopItem::totalbuycount() const {
  return totalbuycount_;
}
inline void ShopItem::set_totalbuycount(::google::protobuf::int32 value) {
  set_has_totalbuycount();
  totalbuycount_ = value;
}

// optional int32 BuyCount = 3 [default = -1];
inline bool ShopItem::has_buycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShopItem::set_has_buycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShopItem::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShopItem::clear_buycount() {
  buycount_ = -1;
  clear_has_buycount();
}
inline ::google::protobuf::int32 ShopItem::buycount() const {
  return buycount_;
}
inline void ShopItem::set_buycount(::google::protobuf::int32 value) {
  set_has_buycount();
  buycount_ = value;
}

// -------------------------------------------------------------------

// RandomQuestData

// optional int32 QuestType = 1 [default = -1];
inline bool RandomQuestData::has_questtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomQuestData::set_has_questtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomQuestData::clear_has_questtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomQuestData::clear_questtype() {
  questtype_ = -1;
  clear_has_questtype();
}
inline ::google::protobuf::int32 RandomQuestData::questtype() const {
  return questtype_;
}
inline void RandomQuestData::set_questtype(::google::protobuf::int32 value) {
  set_has_questtype();
  questtype_ = value;
}

// repeated int32 QuestIdList = 2;
inline int RandomQuestData::questidlist_size() const {
  return questidlist_.size();
}
inline void RandomQuestData::clear_questidlist() {
  questidlist_.Clear();
}
inline ::google::protobuf::int32 RandomQuestData::questidlist(int index) const {
  return questidlist_.Get(index);
}
inline void RandomQuestData::set_questidlist(int index, ::google::protobuf::int32 value) {
  questidlist_.Set(index, value);
}
inline void RandomQuestData::add_questidlist(::google::protobuf::int32 value) {
  questidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandomQuestData::questidlist() const {
  return questidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandomQuestData::mutable_questidlist() {
  return &questidlist_;
}

// optional int32 DayPorgress = 6 [default = -1];
inline bool RandomQuestData::has_dayporgress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandomQuestData::set_has_dayporgress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandomQuestData::clear_has_dayporgress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandomQuestData::clear_dayporgress() {
  dayporgress_ = -1;
  clear_has_dayporgress();
}
inline ::google::protobuf::int32 RandomQuestData::dayporgress() const {
  return dayporgress_;
}
inline void RandomQuestData::set_dayporgress(::google::protobuf::int32 value) {
  set_has_dayporgress();
  dayporgress_ = value;
}

// optional int64 LastCompleteTime = 7 [default = -1];
inline bool RandomQuestData::has_lastcompletetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandomQuestData::set_has_lastcompletetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandomQuestData::clear_has_lastcompletetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandomQuestData::clear_lastcompletetime() {
  lastcompletetime_ = GOOGLE_LONGLONG(-1);
  clear_has_lastcompletetime();
}
inline ::google::protobuf::int64 RandomQuestData::lastcompletetime() const {
  return lastcompletetime_;
}
inline void RandomQuestData::set_lastcompletetime(::google::protobuf::int64 value) {
  set_has_lastcompletetime();
  lastcompletetime_ = value;
}

// repeated int32 RandomListQuestId = 8;
inline int RandomQuestData::randomlistquestid_size() const {
  return randomlistquestid_.size();
}
inline void RandomQuestData::clear_randomlistquestid() {
  randomlistquestid_.Clear();
}
inline ::google::protobuf::int32 RandomQuestData::randomlistquestid(int index) const {
  return randomlistquestid_.Get(index);
}
inline void RandomQuestData::set_randomlistquestid(int index, ::google::protobuf::int32 value) {
  randomlistquestid_.Set(index, value);
}
inline void RandomQuestData::add_randomlistquestid(::google::protobuf::int32 value) {
  randomlistquestid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandomQuestData::randomlistquestid() const {
  return randomlistquestid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandomQuestData::mutable_randomlistquestid() {
  return &randomlistquestid_;
}

// -------------------------------------------------------------------

// RandomQuestListData

// repeated .RandomQuestData QuestList = 1;
inline int RandomQuestListData::questlist_size() const {
  return questlist_.size();
}
inline void RandomQuestListData::clear_questlist() {
  questlist_.Clear();
}
inline const ::RandomQuestData& RandomQuestListData::questlist(int index) const {
  return questlist_.Get(index);
}
inline ::RandomQuestData* RandomQuestListData::mutable_questlist(int index) {
  return questlist_.Mutable(index);
}
inline ::RandomQuestData* RandomQuestListData::add_questlist() {
  return questlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RandomQuestData >&
RandomQuestListData::questlist() const {
  return questlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::RandomQuestData >*
RandomQuestListData::mutable_questlist() {
  return &questlist_;
}

// -------------------------------------------------------------------

// PvpBattleInfo

// optional int32 WinCount = 1 [default = -1];
inline bool PvpBattleInfo::has_wincount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpBattleInfo::set_has_wincount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpBattleInfo::clear_has_wincount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpBattleInfo::clear_wincount() {
  wincount_ = -1;
  clear_has_wincount();
}
inline ::google::protobuf::int32 PvpBattleInfo::wincount() const {
  return wincount_;
}
inline void PvpBattleInfo::set_wincount(::google::protobuf::int32 value) {
  set_has_wincount();
  wincount_ = value;
}

// optional int32 LoseCount = 2 [default = -1];
inline bool PvpBattleInfo::has_losecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpBattleInfo::set_has_losecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpBattleInfo::clear_has_losecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpBattleInfo::clear_losecount() {
  losecount_ = -1;
  clear_has_losecount();
}
inline ::google::protobuf::int32 PvpBattleInfo::losecount() const {
  return losecount_;
}
inline void PvpBattleInfo::set_losecount(::google::protobuf::int32 value) {
  set_has_losecount();
  losecount_ = value;
}

// optional int32 DrawCount = 3 [default = -1];
inline bool PvpBattleInfo::has_drawcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpBattleInfo::set_has_drawcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpBattleInfo::clear_has_drawcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpBattleInfo::clear_drawcount() {
  drawcount_ = -1;
  clear_has_drawcount();
}
inline ::google::protobuf::int32 PvpBattleInfo::drawcount() const {
  return drawcount_;
}
inline void PvpBattleInfo::set_drawcount(::google::protobuf::int32 value) {
  set_has_drawcount();
  drawcount_ = value;
}

// optional int32 ContinuityWinCount = 4 [default = -1];
inline bool PvpBattleInfo::has_continuitywincount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpBattleInfo::set_has_continuitywincount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpBattleInfo::clear_has_continuitywincount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpBattleInfo::clear_continuitywincount() {
  continuitywincount_ = -1;
  clear_has_continuitywincount();
}
inline ::google::protobuf::int32 PvpBattleInfo::continuitywincount() const {
  return continuitywincount_;
}
inline void PvpBattleInfo::set_continuitywincount(::google::protobuf::int32 value) {
  set_has_continuitywincount();
  continuitywincount_ = value;
}

// optional int32 Rank = 5 [default = -1];
inline bool PvpBattleInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpBattleInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpBattleInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpBattleInfo::clear_rank() {
  rank_ = -1;
  clear_has_rank();
}
inline ::google::protobuf::int32 PvpBattleInfo::rank() const {
  return rank_;
}
inline void PvpBattleInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 Star = 6 [default = -1];
inline bool PvpBattleInfo::has_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpBattleInfo::set_has_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpBattleInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpBattleInfo::clear_star() {
  star_ = -1;
  clear_has_star();
}
inline ::google::protobuf::int32 PvpBattleInfo::star() const {
  return star_;
}
inline void PvpBattleInfo::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 Elo = 7 [default = -1];
inline bool PvpBattleInfo::has_elo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpBattleInfo::set_has_elo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpBattleInfo::clear_has_elo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpBattleInfo::clear_elo() {
  elo_ = -1;
  clear_has_elo();
}
inline ::google::protobuf::int32 PvpBattleInfo::elo() const {
  return elo_;
}
inline void PvpBattleInfo::set_elo(::google::protobuf::int32 value) {
  set_has_elo();
  elo_ = value;
}

// optional int32 BattleCount = 8 [default = -1];
inline bool PvpBattleInfo::has_battlecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvpBattleInfo::set_has_battlecount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvpBattleInfo::clear_has_battlecount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvpBattleInfo::clear_battlecount() {
  battlecount_ = -1;
  clear_has_battlecount();
}
inline ::google::protobuf::int32 PvpBattleInfo::battlecount() const {
  return battlecount_;
}
inline void PvpBattleInfo::set_battlecount(::google::protobuf::int32 value) {
  set_has_battlecount();
  battlecount_ = value;
}

// repeated int32 RewardList = 9;
inline int PvpBattleInfo::rewardlist_size() const {
  return rewardlist_.size();
}
inline void PvpBattleInfo::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::google::protobuf::int32 PvpBattleInfo::rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline void PvpBattleInfo::set_rewardlist(int index, ::google::protobuf::int32 value) {
  rewardlist_.Set(index, value);
}
inline void PvpBattleInfo::add_rewardlist(::google::protobuf::int32 value) {
  rewardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvpBattleInfo::rewardlist() const {
  return rewardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvpBattleInfo::mutable_rewardlist() {
  return &rewardlist_;
}

// optional int32 HistoryRank = 10 [default = -1];
inline bool PvpBattleInfo::has_historyrank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PvpBattleInfo::set_has_historyrank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PvpBattleInfo::clear_has_historyrank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PvpBattleInfo::clear_historyrank() {
  historyrank_ = -1;
  clear_has_historyrank();
}
inline ::google::protobuf::int32 PvpBattleInfo::historyrank() const {
  return historyrank_;
}
inline void PvpBattleInfo::set_historyrank(::google::protobuf::int32 value) {
  set_has_historyrank();
  historyrank_ = value;
}

// -------------------------------------------------------------------

// PvpPlayerInfo

// optional uint64 RoleID = 1 [default = 0];
inline bool PvpPlayerInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpPlayerInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpPlayerInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpPlayerInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpPlayerInfo::roleid() const {
  return roleid_;
}
inline void PvpPlayerInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string RoleName = 2;
inline bool PvpPlayerInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpPlayerInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpPlayerInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpPlayerInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& PvpPlayerInfo::rolename() const {
  return *rolename_;
}
inline void PvpPlayerInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PvpPlayerInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PvpPlayerInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvpPlayerInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* PvpPlayerInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvpPlayerInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 3 [default = -1];
inline bool PvpPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpPlayerInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 PvpPlayerInfo::level() const {
  return level_;
}
inline void PvpPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 Rank = 5 [default = -1];
inline bool PvpPlayerInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpPlayerInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpPlayerInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpPlayerInfo::clear_rank() {
  rank_ = -1;
  clear_has_rank();
}
inline ::google::protobuf::int32 PvpPlayerInfo::rank() const {
  return rank_;
}
inline void PvpPlayerInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .PvpBattleInfo PvpInfo = 6;
inline bool PvpPlayerInfo::has_pvpinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpPlayerInfo::set_has_pvpinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpPlayerInfo::clear_has_pvpinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpPlayerInfo::clear_pvpinfo() {
  if (pvpinfo_ != NULL) pvpinfo_->::PvpBattleInfo::Clear();
  clear_has_pvpinfo();
}
inline const ::PvpBattleInfo& PvpPlayerInfo::pvpinfo() const {
  return pvpinfo_ != NULL ? *pvpinfo_ : *default_instance_->pvpinfo_;
}
inline ::PvpBattleInfo* PvpPlayerInfo::mutable_pvpinfo() {
  set_has_pvpinfo();
  if (pvpinfo_ == NULL) pvpinfo_ = new ::PvpBattleInfo;
  return pvpinfo_;
}
inline ::PvpBattleInfo* PvpPlayerInfo::release_pvpinfo() {
  clear_has_pvpinfo();
  ::PvpBattleInfo* temp = pvpinfo_;
  pvpinfo_ = NULL;
  return temp;
}
inline void PvpPlayerInfo::set_allocated_pvpinfo(::PvpBattleInfo* pvpinfo) {
  delete pvpinfo_;
  pvpinfo_ = pvpinfo;
  if (pvpinfo) {
    set_has_pvpinfo();
  } else {
    clear_has_pvpinfo();
  }
}

// optional string GuildName = 7;
inline bool PvpPlayerInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpPlayerInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpPlayerInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpPlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& PvpPlayerInfo::guildname() const {
  return *guildname_;
}
inline void PvpPlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PvpPlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PvpPlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvpPlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PvpPlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvpPlayerInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigID = 8 [default = -1];
inline bool PvpPlayerInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpPlayerInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpPlayerInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpPlayerInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 PvpPlayerInfo::configid() const {
  return configid_;
}
inline void PvpPlayerInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// -------------------------------------------------------------------

// PvpPlayerState

// optional uint64 RoleID = 1 [default = 0];
inline bool PvpPlayerState::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpPlayerState::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpPlayerState::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpPlayerState::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpPlayerState::roleid() const {
  return roleid_;
}
inline void PvpPlayerState::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 State = 2 [default = -1];
inline bool PvpPlayerState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpPlayerState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpPlayerState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpPlayerState::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 PvpPlayerState::state() const {
  return state_;
}
inline void PvpPlayerState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// PvpEndPlayer

// optional uint64 RoleID = 1 [default = 0];
inline bool PvpEndPlayer::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpEndPlayer::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpEndPlayer::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpEndPlayer::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PvpEndPlayer::roleid() const {
  return roleid_;
}
inline void PvpEndPlayer::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string RoleName = 2;
inline bool PvpEndPlayer::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpEndPlayer::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpEndPlayer::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpEndPlayer::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& PvpEndPlayer::rolename() const {
  return *rolename_;
}
inline void PvpEndPlayer::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PvpEndPlayer::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PvpEndPlayer::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvpEndPlayer::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* PvpEndPlayer::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvpEndPlayer::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 DeadCount = 3 [default = -1];
inline bool PvpEndPlayer::has_deadcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpEndPlayer::set_has_deadcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpEndPlayer::clear_has_deadcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpEndPlayer::clear_deadcount() {
  deadcount_ = -1;
  clear_has_deadcount();
}
inline ::google::protobuf::int32 PvpEndPlayer::deadcount() const {
  return deadcount_;
}
inline void PvpEndPlayer::set_deadcount(::google::protobuf::int32 value) {
  set_has_deadcount();
  deadcount_ = value;
}

// optional int32 KillCount = 4 [default = -1];
inline bool PvpEndPlayer::has_killcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpEndPlayer::set_has_killcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpEndPlayer::clear_has_killcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpEndPlayer::clear_killcount() {
  killcount_ = -1;
  clear_has_killcount();
}
inline ::google::protobuf::int32 PvpEndPlayer::killcount() const {
  return killcount_;
}
inline void PvpEndPlayer::set_killcount(::google::protobuf::int32 value) {
  set_has_killcount();
  killcount_ = value;
}

// optional int32 LiveCount = 5 [default = -1];
inline bool PvpEndPlayer::has_livecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpEndPlayer::set_has_livecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpEndPlayer::clear_has_livecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpEndPlayer::clear_livecount() {
  livecount_ = -1;
  clear_has_livecount();
}
inline ::google::protobuf::int32 PvpEndPlayer::livecount() const {
  return livecount_;
}
inline void PvpEndPlayer::set_livecount(::google::protobuf::int32 value) {
  set_has_livecount();
  livecount_ = value;
}

// optional int32 ConfigId = 6 [default = -1];
inline bool PvpEndPlayer::has_configid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpEndPlayer::set_has_configid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpEndPlayer::clear_has_configid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpEndPlayer::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 PvpEndPlayer::configid() const {
  return configid_;
}
inline void PvpEndPlayer::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 DamageCount = 7 [default = -1];
inline bool PvpEndPlayer::has_damagecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpEndPlayer::set_has_damagecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpEndPlayer::clear_has_damagecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpEndPlayer::clear_damagecount() {
  damagecount_ = -1;
  clear_has_damagecount();
}
inline ::google::protobuf::int32 PvpEndPlayer::damagecount() const {
  return damagecount_;
}
inline void PvpEndPlayer::set_damagecount(::google::protobuf::int32 value) {
  set_has_damagecount();
  damagecount_ = value;
}

// -------------------------------------------------------------------

// DailyQuest

// optional .QuestData MainQuest = 1;
inline bool DailyQuest::has_mainquest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyQuest::set_has_mainquest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyQuest::clear_has_mainquest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyQuest::clear_mainquest() {
  if (mainquest_ != NULL) mainquest_->::QuestData::Clear();
  clear_has_mainquest();
}
inline const ::QuestData& DailyQuest::mainquest() const {
  return mainquest_ != NULL ? *mainquest_ : *default_instance_->mainquest_;
}
inline ::QuestData* DailyQuest::mutable_mainquest() {
  set_has_mainquest();
  if (mainquest_ == NULL) mainquest_ = new ::QuestData;
  return mainquest_;
}
inline ::QuestData* DailyQuest::release_mainquest() {
  clear_has_mainquest();
  ::QuestData* temp = mainquest_;
  mainquest_ = NULL;
  return temp;
}
inline void DailyQuest::set_allocated_mainquest(::QuestData* mainquest) {
  delete mainquest_;
  mainquest_ = mainquest;
  if (mainquest) {
    set_has_mainquest();
  } else {
    clear_has_mainquest();
  }
}

// optional .QuestData AtivityQuest = 2;
inline bool DailyQuest::has_ativityquest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyQuest::set_has_ativityquest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyQuest::clear_has_ativityquest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyQuest::clear_ativityquest() {
  if (ativityquest_ != NULL) ativityquest_->::QuestData::Clear();
  clear_has_ativityquest();
}
inline const ::QuestData& DailyQuest::ativityquest() const {
  return ativityquest_ != NULL ? *ativityquest_ : *default_instance_->ativityquest_;
}
inline ::QuestData* DailyQuest::mutable_ativityquest() {
  set_has_ativityquest();
  if (ativityquest_ == NULL) ativityquest_ = new ::QuestData;
  return ativityquest_;
}
inline ::QuestData* DailyQuest::release_ativityquest() {
  clear_has_ativityquest();
  ::QuestData* temp = ativityquest_;
  ativityquest_ = NULL;
  return temp;
}
inline void DailyQuest::set_allocated_ativityquest(::QuestData* ativityquest) {
  delete ativityquest_;
  ativityquest_ = ativityquest;
  if (ativityquest) {
    set_has_ativityquest();
  } else {
    clear_has_ativityquest();
  }
}

// optional int32 RewardTimes = 3 [default = -1];
inline bool DailyQuest::has_rewardtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyQuest::set_has_rewardtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyQuest::clear_has_rewardtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyQuest::clear_rewardtimes() {
  rewardtimes_ = -1;
  clear_has_rewardtimes();
}
inline ::google::protobuf::int32 DailyQuest::rewardtimes() const {
  return rewardtimes_;
}
inline void DailyQuest::set_rewardtimes(::google::protobuf::int32 value) {
  set_has_rewardtimes();
  rewardtimes_ = value;
}

// optional int32 ActivityId = 4 [default = -1];
inline bool DailyQuest::has_activityid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyQuest::set_has_activityid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyQuest::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyQuest::clear_activityid() {
  activityid_ = -1;
  clear_has_activityid();
}
inline ::google::protobuf::int32 DailyQuest::activityid() const {
  return activityid_;
}
inline void DailyQuest::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
}

// -------------------------------------------------------------------

// DailyQuestList

// repeated .DailyQuest DailyQuestList = 1;
inline int DailyQuestList::dailyquestlist_size() const {
  return dailyquestlist_.size();
}
inline void DailyQuestList::clear_dailyquestlist() {
  dailyquestlist_.Clear();
}
inline const ::DailyQuest& DailyQuestList::dailyquestlist(int index) const {
  return dailyquestlist_.Get(index);
}
inline ::DailyQuest* DailyQuestList::mutable_dailyquestlist(int index) {
  return dailyquestlist_.Mutable(index);
}
inline ::DailyQuest* DailyQuestList::add_dailyquestlist() {
  return dailyquestlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DailyQuest >&
DailyQuestList::dailyquestlist() const {
  return dailyquestlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DailyQuest >*
DailyQuestList::mutable_dailyquestlist() {
  return &dailyquestlist_;
}

// -------------------------------------------------------------------

// DungeonSituationData

// optional int32 Name = 1 [default = -1];
inline bool DungeonSituationData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonSituationData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonSituationData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonSituationData::clear_name() {
  name_ = -1;
  clear_has_name();
}
inline ::google::protobuf::int32 DungeonSituationData::name() const {
  return name_;
}
inline void DungeonSituationData::set_name(::google::protobuf::int32 value) {
  set_has_name();
  name_ = value;
}

// repeated int32 PlayerData = 2;
inline int DungeonSituationData::playerdata_size() const {
  return playerdata_.size();
}
inline void DungeonSituationData::clear_playerdata() {
  playerdata_.Clear();
}
inline ::google::protobuf::int32 DungeonSituationData::playerdata(int index) const {
  return playerdata_.Get(index);
}
inline void DungeonSituationData::set_playerdata(int index, ::google::protobuf::int32 value) {
  playerdata_.Set(index, value);
}
inline void DungeonSituationData::add_playerdata(::google::protobuf::int32 value) {
  playerdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DungeonSituationData::playerdata() const {
  return playerdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DungeonSituationData::mutable_playerdata() {
  return &playerdata_;
}

// -------------------------------------------------------------------

// DungeonData

// repeated .DungeonSituationData Data = 1;
inline int DungeonData::data_size() const {
  return data_.size();
}
inline void DungeonData::clear_data() {
  data_.Clear();
}
inline const ::DungeonSituationData& DungeonData::data(int index) const {
  return data_.Get(index);
}
inline ::DungeonSituationData* DungeonData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::DungeonSituationData* DungeonData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DungeonSituationData >&
DungeonData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::DungeonSituationData >*
DungeonData::mutable_data() {
  return &data_;
}

// optional int64 DurationMentTime = 2 [default = -1];
inline bool DungeonData::has_durationmenttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonData::set_has_durationmenttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonData::clear_has_durationmenttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonData::clear_durationmenttime() {
  durationmenttime_ = GOOGLE_LONGLONG(-1);
  clear_has_durationmenttime();
}
inline ::google::protobuf::int64 DungeonData::durationmenttime() const {
  return durationmenttime_;
}
inline void DungeonData::set_durationmenttime(::google::protobuf::int64 value) {
  set_has_durationmenttime();
  durationmenttime_ = value;
}

// optional int64 ConclusionTime = 3 [default = -1];
inline bool DungeonData::has_conclusiontime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonData::set_has_conclusiontime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonData::clear_has_conclusiontime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonData::clear_conclusiontime() {
  conclusiontime_ = GOOGLE_LONGLONG(-1);
  clear_has_conclusiontime();
}
inline ::google::protobuf::int64 DungeonData::conclusiontime() const {
  return conclusiontime_;
}
inline void DungeonData::set_conclusiontime(::google::protobuf::int64 value) {
  set_has_conclusiontime();
  conclusiontime_ = value;
}

// optional int32 PrepareTime = 4 [default = -1];
inline bool DungeonData::has_preparetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DungeonData::set_has_preparetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DungeonData::clear_has_preparetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DungeonData::clear_preparetime() {
  preparetime_ = -1;
  clear_has_preparetime();
}
inline ::google::protobuf::int32 DungeonData::preparetime() const {
  return preparetime_;
}
inline void DungeonData::set_preparetime(::google::protobuf::int32 value) {
  set_has_preparetime();
  preparetime_ = value;
}

// -------------------------------------------------------------------

// TeamTarget

// optional int32 Id = 1 [default = 0];
inline bool TeamTarget::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamTarget::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamTarget::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamTarget::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TeamTarget::id() const {
  return id_;
}
inline void TeamTarget::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 MinLevel = 2 [default = 0];
inline bool TeamTarget::has_minlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamTarget::set_has_minlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamTarget::clear_has_minlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamTarget::clear_minlevel() {
  minlevel_ = 0;
  clear_has_minlevel();
}
inline ::google::protobuf::int32 TeamTarget::minlevel() const {
  return minlevel_;
}
inline void TeamTarget::set_minlevel(::google::protobuf::int32 value) {
  set_has_minlevel();
  minlevel_ = value;
}

// optional int32 MaxLevel = 3 [default = 0];
inline bool TeamTarget::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamTarget::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamTarget::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamTarget::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 TeamTarget::maxlevel() const {
  return maxlevel_;
}
inline void TeamTarget::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
}

// repeated int32 Function = 4;
inline int TeamTarget::function_size() const {
  return function_.size();
}
inline void TeamTarget::clear_function() {
  function_.Clear();
}
inline ::google::protobuf::int32 TeamTarget::function(int index) const {
  return function_.Get(index);
}
inline void TeamTarget::set_function(int index, ::google::protobuf::int32 value) {
  function_.Set(index, value);
}
inline void TeamTarget::add_function(::google::protobuf::int32 value) {
  function_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TeamTarget::function() const {
  return function_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TeamTarget::mutable_function() {
  return &function_;
}

// optional int32 TargetType = 5 [default = 0];
inline bool TeamTarget::has_targettype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamTarget::set_has_targettype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamTarget::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamTarget::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 TeamTarget::targettype() const {
  return targettype_;
}
inline void TeamTarget::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
}

// -------------------------------------------------------------------

// BuffInfo

// optional int32 ObjId = 5 [default = -1];
inline bool BuffInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 BuffInfo::objid() const {
  return objid_;
}
inline void BuffInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional int32 CasterId = 6 [default = -1];
inline bool BuffInfo::has_casterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffInfo::set_has_casterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffInfo::clear_has_casterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffInfo::clear_casterid() {
  casterid_ = -1;
  clear_has_casterid();
}
inline ::google::protobuf::int32 BuffInfo::casterid() const {
  return casterid_;
}
inline void BuffInfo::set_casterid(::google::protobuf::int32 value) {
  set_has_casterid();
  casterid_ = value;
}

// optional int32 OpType = 7 [default = -1];
inline bool BuffInfo::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffInfo::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffInfo::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffInfo::clear_optype() {
  optype_ = -1;
  clear_has_optype();
}
inline ::google::protobuf::int32 BuffInfo::optype() const {
  return optype_;
}
inline void BuffInfo::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// optional int32 BufId = 8 [default = -1];
inline bool BuffInfo::has_bufid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffInfo::set_has_bufid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffInfo::clear_has_bufid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffInfo::clear_bufid() {
  bufid_ = -1;
  clear_has_bufid();
}
inline ::google::protobuf::int32 BuffInfo::bufid() const {
  return bufid_;
}
inline void BuffInfo::set_bufid(::google::protobuf::int32 value) {
  set_has_bufid();
  bufid_ = value;
}

// optional int32 RemainTime = 9 [default = -1];
inline bool BuffInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffInfo::clear_remaintime() {
  remaintime_ = -1;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 BuffInfo::remaintime() const {
  return remaintime_;
}
inline void BuffInfo::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional int32 BuffLv = 10 [default = -1];
inline bool BuffInfo::has_bufflv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffInfo::set_has_bufflv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffInfo::clear_has_bufflv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffInfo::clear_bufflv() {
  bufflv_ = -1;
  clear_has_bufflv();
}
inline ::google::protobuf::int32 BuffInfo::bufflv() const {
  return bufflv_;
}
inline void BuffInfo::set_bufflv(::google::protobuf::int32 value) {
  set_has_bufflv();
  bufflv_ = value;
}

// optional int32 Sn = 11 [default = -1];
inline bool BuffInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffInfo::clear_sn() {
  sn_ = -1;
  clear_has_sn();
}
inline ::google::protobuf::int32 BuffInfo::sn() const {
  return sn_;
}
inline void BuffInfo::set_sn(::google::protobuf::int32 value) {
  set_has_sn();
  sn_ = value;
}

// optional int32 LayerCount = 12 [default = 0];
inline bool BuffInfo::has_layercount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuffInfo::set_has_layercount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuffInfo::clear_has_layercount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuffInfo::clear_layercount() {
  layercount_ = 0;
  clear_has_layercount();
}
inline ::google::protobuf::int32 BuffInfo::layercount() const {
  return layercount_;
}
inline void BuffInfo::set_layercount(::google::protobuf::int32 value) {
  set_has_layercount();
  layercount_ = value;
}

// -------------------------------------------------------------------

// MatchInfo

// optional uint64 RoleId = 1 [default = 0];
inline bool MatchInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MatchInfo::roleid() const {
  return roleid_;
}
inline void MatchInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 Level = 2 [default = 0];
inline bool MatchInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MatchInfo::level() const {
  return level_;
}
inline void MatchInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 ConfigId = 3 [default = -1];
inline bool MatchInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 MatchInfo::configid() const {
  return configid_;
}
inline void MatchInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 ProfessionId = 4 [default = -1];
inline bool MatchInfo::has_professionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchInfo::set_has_professionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchInfo::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchInfo::clear_professionid() {
  professionid_ = -1;
  clear_has_professionid();
}
inline ::google::protobuf::int32 MatchInfo::professionid() const {
  return professionid_;
}
inline void MatchInfo::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
}

// optional string Name = 5;
inline bool MatchInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MatchInfo::name() const {
  return *name_;
}
inline void MatchInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MatchInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Ready = 6 [default = -1];
inline bool MatchInfo::has_ready() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchInfo::set_has_ready() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchInfo::clear_has_ready() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchInfo::clear_ready() {
  ready_ = -1;
  clear_has_ready();
}
inline ::google::protobuf::int32 MatchInfo::ready() const {
  return ready_;
}
inline void MatchInfo::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
}

// optional int32 Camp = 7 [default = 0];
inline bool MatchInfo::has_camp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchInfo::set_has_camp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchInfo::clear_has_camp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchInfo::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 MatchInfo::camp() const {
  return camp_;
}
inline void MatchInfo::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 Integral = 12 [default = 0];
inline bool MatchInfo::has_integral() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchInfo::set_has_integral() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchInfo::clear_has_integral() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchInfo::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 MatchInfo::integral() const {
  return integral_;
}
inline void MatchInfo::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// optional int32 Section = 13 [default = 0];
inline bool MatchInfo::has_section() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MatchInfo::set_has_section() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MatchInfo::clear_has_section() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MatchInfo::clear_section() {
  section_ = 0;
  clear_has_section();
}
inline ::google::protobuf::int32 MatchInfo::section() const {
  return section_;
}
inline void MatchInfo::set_section(::google::protobuf::int32 value) {
  set_has_section();
  section_ = value;
}

// -------------------------------------------------------------------

// TreasureEquipedID

// optional int32 TreasureHair = 1 [default = -1];
inline bool TreasureEquipedID::has_treasurehair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureEquipedID::set_has_treasurehair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureEquipedID::clear_has_treasurehair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureEquipedID::clear_treasurehair() {
  treasurehair_ = -1;
  clear_has_treasurehair();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasurehair() const {
  return treasurehair_;
}
inline void TreasureEquipedID::set_treasurehair(::google::protobuf::int32 value) {
  set_has_treasurehair();
  treasurehair_ = value;
}

// optional int32 TreasureHead = 2 [default = -1];
inline bool TreasureEquipedID::has_treasurehead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureEquipedID::set_has_treasurehead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureEquipedID::clear_has_treasurehead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureEquipedID::clear_treasurehead() {
  treasurehead_ = -1;
  clear_has_treasurehead();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasurehead() const {
  return treasurehead_;
}
inline void TreasureEquipedID::set_treasurehead(::google::protobuf::int32 value) {
  set_has_treasurehead();
  treasurehead_ = value;
}

// optional int32 TreasureBody = 3 [default = -1];
inline bool TreasureEquipedID::has_treasurebody() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureEquipedID::set_has_treasurebody() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureEquipedID::clear_has_treasurebody() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureEquipedID::clear_treasurebody() {
  treasurebody_ = -1;
  clear_has_treasurebody();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasurebody() const {
  return treasurebody_;
}
inline void TreasureEquipedID::set_treasurebody(::google::protobuf::int32 value) {
  set_has_treasurebody();
  treasurebody_ = value;
}

// optional int32 TreasureWeapon = 4 [default = -1];
inline bool TreasureEquipedID::has_treasureweapon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureEquipedID::set_has_treasureweapon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureEquipedID::clear_has_treasureweapon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureEquipedID::clear_treasureweapon() {
  treasureweapon_ = -1;
  clear_has_treasureweapon();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasureweapon() const {
  return treasureweapon_;
}
inline void TreasureEquipedID::set_treasureweapon(::google::protobuf::int32 value) {
  set_has_treasureweapon();
  treasureweapon_ = value;
}

// optional int32 TreasureWing = 5 [default = -1];
inline bool TreasureEquipedID::has_treasurewing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreasureEquipedID::set_has_treasurewing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreasureEquipedID::clear_has_treasurewing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreasureEquipedID::clear_treasurewing() {
  treasurewing_ = -1;
  clear_has_treasurewing();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasurewing() const {
  return treasurewing_;
}
inline void TreasureEquipedID::set_treasurewing(::google::protobuf::int32 value) {
  set_has_treasurewing();
  treasurewing_ = value;
}

// optional int32 TreasureRiding = 6 [default = -1];
inline bool TreasureEquipedID::has_treasureriding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TreasureEquipedID::set_has_treasureriding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TreasureEquipedID::clear_has_treasureriding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TreasureEquipedID::clear_treasureriding() {
  treasureriding_ = -1;
  clear_has_treasureriding();
}
inline ::google::protobuf::int32 TreasureEquipedID::treasureriding() const {
  return treasureriding_;
}
inline void TreasureEquipedID::set_treasureriding(::google::protobuf::int32 value) {
  set_has_treasureriding();
  treasureriding_ = value;
}

// -------------------------------------------------------------------

// ServerInfo

// optional int32 Id = 1 [default = -1];
inline bool ServerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 ServerInfo::id() const {
  return id_;
}
inline void ServerInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string Name = 2;
inline bool ServerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerInfo::name() const {
  return *name_;
}
inline void ServerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ServerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Region = 3 [default = -1];
inline bool ServerInfo::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_region() {
  region_ = -1;
  clear_has_region();
}
inline ::google::protobuf::int32 ServerInfo::region() const {
  return region_;
}
inline void ServerInfo::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
}

// optional int32 Status = 4 [default = -1];
inline bool ServerInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 ServerInfo::status() const {
  return status_;
}
inline void ServerInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 Promo = 5 [default = -1];
inline bool ServerInfo::has_promo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_promo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfo::clear_has_promo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_promo() {
  promo_ = -1;
  clear_has_promo();
}
inline ::google::protobuf::int32 ServerInfo::promo() const {
  return promo_;
}
inline void ServerInfo::set_promo(::google::protobuf::int32 value) {
  set_has_promo();
  promo_ = value;
}

// optional string Ip = 6;
inline bool ServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerInfo::ip() const {
  return *ip_;
}
inline void ServerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ServerInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Port = 7 [default = -1];
inline bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerInfo::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerInfo::port() const {
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// GuildInfo

// optional uint64 Guid = 1 [default = 0];
inline bool GuildInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildInfo::guid() const {
  return guid_;
}
inline void GuildInfo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string GuildName = 2;
inline bool GuildInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& GuildInfo::guildname() const {
  return *guildname_;
}
inline void GuildInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GuildLeader = 3;
inline bool GuildInfo::has_guildleader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildInfo::set_has_guildleader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildInfo::clear_has_guildleader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildInfo::clear_guildleader() {
  if (guildleader_ != &::google::protobuf::internal::kEmptyString) {
    guildleader_->clear();
  }
  clear_has_guildleader();
}
inline const ::std::string& GuildInfo::guildleader() const {
  return *guildleader_;
}
inline void GuildInfo::set_guildleader(const ::std::string& value) {
  set_has_guildleader();
  if (guildleader_ == &::google::protobuf::internal::kEmptyString) {
    guildleader_ = new ::std::string;
  }
  guildleader_->assign(value);
}
inline void GuildInfo::set_guildleader(const char* value) {
  set_has_guildleader();
  if (guildleader_ == &::google::protobuf::internal::kEmptyString) {
    guildleader_ = new ::std::string;
  }
  guildleader_->assign(value);
}
inline void GuildInfo::set_guildleader(const char* value, size_t size) {
  set_has_guildleader();
  if (guildleader_ == &::google::protobuf::internal::kEmptyString) {
    guildleader_ = new ::std::string;
  }
  guildleader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfo::mutable_guildleader() {
  set_has_guildleader();
  if (guildleader_ == &::google::protobuf::internal::kEmptyString) {
    guildleader_ = new ::std::string;
  }
  return guildleader_;
}
inline ::std::string* GuildInfo::release_guildleader() {
  clear_has_guildleader();
  if (guildleader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildleader_;
    guildleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfo::set_allocated_guildleader(::std::string* guildleader) {
  if (guildleader_ != &::google::protobuf::internal::kEmptyString) {
    delete guildleader_;
  }
  if (guildleader) {
    set_has_guildleader();
    guildleader_ = guildleader;
  } else {
    clear_has_guildleader();
    guildleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 GuildLevel = 4 [default = -1];
inline bool GuildInfo::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildInfo::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildInfo::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildInfo::clear_guildlevel() {
  guildlevel_ = -1;
  clear_has_guildlevel();
}
inline ::google::protobuf::int32 GuildInfo::guildlevel() const {
  return guildlevel_;
}
inline void GuildInfo::set_guildlevel(::google::protobuf::int32 value) {
  set_has_guildlevel();
  guildlevel_ = value;
}

// optional int32 MemberCount = 5 [default = -1];
inline bool GuildInfo::has_membercount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildInfo::set_has_membercount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildInfo::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildInfo::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
inline ::google::protobuf::int32 GuildInfo::membercount() const {
  return membercount_;
}
inline void GuildInfo::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
}

// optional int32 OnlineCount = 6 [default = -1];
inline bool GuildInfo::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildInfo::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildInfo::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildInfo::clear_onlinecount() {
  onlinecount_ = -1;
  clear_has_onlinecount();
}
inline ::google::protobuf::int32 GuildInfo::onlinecount() const {
  return onlinecount_;
}
inline void GuildInfo::set_onlinecount(::google::protobuf::int32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
}

// optional int32 GuildProsper = 7 [default = -1];
inline bool GuildInfo::has_guildprosper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildInfo::set_has_guildprosper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildInfo::clear_has_guildprosper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildInfo::clear_guildprosper() {
  guildprosper_ = -1;
  clear_has_guildprosper();
}
inline ::google::protobuf::int32 GuildInfo::guildprosper() const {
  return guildprosper_;
}
inline void GuildInfo::set_guildprosper(::google::protobuf::int32 value) {
  set_has_guildprosper();
  guildprosper_ = value;
}

// optional int32 GuildMoney = 8 [default = -1];
inline bool GuildInfo::has_guildmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildInfo::set_has_guildmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildInfo::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildInfo::clear_guildmoney() {
  guildmoney_ = -1;
  clear_has_guildmoney();
}
inline ::google::protobuf::int32 GuildInfo::guildmoney() const {
  return guildmoney_;
}
inline void GuildInfo::set_guildmoney(::google::protobuf::int32 value) {
  set_has_guildmoney();
  guildmoney_ = value;
}

// optional int32 GuildResource = 9 [default = -1];
inline bool GuildInfo::has_guildresource() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildInfo::set_has_guildresource() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildInfo::clear_has_guildresource() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildInfo::clear_guildresource() {
  guildresource_ = -1;
  clear_has_guildresource();
}
inline ::google::protobuf::int32 GuildInfo::guildresource() const {
  return guildresource_;
}
inline void GuildInfo::set_guildresource(::google::protobuf::int32 value) {
  set_has_guildresource();
  guildresource_ = value;
}

// optional string GuildCreed = 10;
inline bool GuildInfo::has_guildcreed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildInfo::set_has_guildcreed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildInfo::clear_has_guildcreed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildInfo::clear_guildcreed() {
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    guildcreed_->clear();
  }
  clear_has_guildcreed();
}
inline const ::std::string& GuildInfo::guildcreed() const {
  return *guildcreed_;
}
inline void GuildInfo::set_guildcreed(const ::std::string& value) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(value);
}
inline void GuildInfo::set_guildcreed(const char* value) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(value);
}
inline void GuildInfo::set_guildcreed(const char* value, size_t size) {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  guildcreed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfo::mutable_guildcreed() {
  set_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    guildcreed_ = new ::std::string;
  }
  return guildcreed_;
}
inline ::std::string* GuildInfo::release_guildcreed() {
  clear_has_guildcreed();
  if (guildcreed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildcreed_;
    guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfo::set_allocated_guildcreed(::std::string* guildcreed) {
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreed_;
  }
  if (guildcreed) {
    set_has_guildcreed();
    guildcreed_ = guildcreed;
  } else {
    clear_has_guildcreed();
    guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .GuildFlag Flag = 11;
inline bool GuildInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildInfo::clear_flag() {
  if (flag_ != NULL) flag_->::GuildFlag::Clear();
  clear_has_flag();
}
inline const ::GuildFlag& GuildInfo::flag() const {
  return flag_ != NULL ? *flag_ : *default_instance_->flag_;
}
inline ::GuildFlag* GuildInfo::mutable_flag() {
  set_has_flag();
  if (flag_ == NULL) flag_ = new ::GuildFlag;
  return flag_;
}
inline ::GuildFlag* GuildInfo::release_flag() {
  clear_has_flag();
  ::GuildFlag* temp = flag_;
  flag_ = NULL;
  return temp;
}
inline void GuildInfo::set_allocated_flag(::GuildFlag* flag) {
  delete flag_;
  flag_ = flag;
  if (flag) {
    set_has_flag();
  } else {
    clear_has_flag();
  }
}

// repeated .GuildNews News = 12;
inline int GuildInfo::news_size() const {
  return news_.size();
}
inline void GuildInfo::clear_news() {
  news_.Clear();
}
inline const ::GuildNews& GuildInfo::news(int index) const {
  return news_.Get(index);
}
inline ::GuildNews* GuildInfo::mutable_news(int index) {
  return news_.Mutable(index);
}
inline ::GuildNews* GuildInfo::add_news() {
  return news_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildNews >&
GuildInfo::news() const {
  return news_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildNews >*
GuildInfo::mutable_news() {
  return &news_;
}

// optional bool IsAutoJoin = 13 [default = false];
inline bool GuildInfo::has_isautojoin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildInfo::set_has_isautojoin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildInfo::clear_has_isautojoin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildInfo::clear_isautojoin() {
  isautojoin_ = false;
  clear_has_isautojoin();
}
inline bool GuildInfo::isautojoin() const {
  return isautojoin_;
}
inline void GuildInfo::set_isautojoin(bool value) {
  set_has_isautojoin();
  isautojoin_ = value;
}

// optional string GuildOldName = 15;
inline bool GuildInfo::has_guildoldname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildInfo::set_has_guildoldname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildInfo::clear_has_guildoldname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildInfo::clear_guildoldname() {
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    guildoldname_->clear();
  }
  clear_has_guildoldname();
}
inline const ::std::string& GuildInfo::guildoldname() const {
  return *guildoldname_;
}
inline void GuildInfo::set_guildoldname(const ::std::string& value) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(value);
}
inline void GuildInfo::set_guildoldname(const char* value) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(value);
}
inline void GuildInfo::set_guildoldname(const char* value, size_t size) {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  guildoldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfo::mutable_guildoldname() {
  set_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    guildoldname_ = new ::std::string;
  }
  return guildoldname_;
}
inline ::std::string* GuildInfo::release_guildoldname() {
  clear_has_guildoldname();
  if (guildoldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildoldname_;
    guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfo::set_allocated_guildoldname(::std::string* guildoldname) {
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildoldname_;
  }
  if (guildoldname) {
    set_has_guildoldname();
    guildoldname_ = guildoldname;
  } else {
    clear_has_guildoldname();
    guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string GuildCreater = 16;
inline bool GuildInfo::has_guildcreater() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildInfo::set_has_guildcreater() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildInfo::clear_has_guildcreater() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildInfo::clear_guildcreater() {
  if (guildcreater_ != &::google::protobuf::internal::kEmptyString) {
    guildcreater_->clear();
  }
  clear_has_guildcreater();
}
inline const ::std::string& GuildInfo::guildcreater() const {
  return *guildcreater_;
}
inline void GuildInfo::set_guildcreater(const ::std::string& value) {
  set_has_guildcreater();
  if (guildcreater_ == &::google::protobuf::internal::kEmptyString) {
    guildcreater_ = new ::std::string;
  }
  guildcreater_->assign(value);
}
inline void GuildInfo::set_guildcreater(const char* value) {
  set_has_guildcreater();
  if (guildcreater_ == &::google::protobuf::internal::kEmptyString) {
    guildcreater_ = new ::std::string;
  }
  guildcreater_->assign(value);
}
inline void GuildInfo::set_guildcreater(const char* value, size_t size) {
  set_has_guildcreater();
  if (guildcreater_ == &::google::protobuf::internal::kEmptyString) {
    guildcreater_ = new ::std::string;
  }
  guildcreater_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildInfo::mutable_guildcreater() {
  set_has_guildcreater();
  if (guildcreater_ == &::google::protobuf::internal::kEmptyString) {
    guildcreater_ = new ::std::string;
  }
  return guildcreater_;
}
inline ::std::string* GuildInfo::release_guildcreater() {
  clear_has_guildcreater();
  if (guildcreater_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildcreater_;
    guildcreater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildInfo::set_allocated_guildcreater(::std::string* guildcreater) {
  if (guildcreater_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreater_;
  }
  if (guildcreater) {
    set_has_guildcreater();
    guildcreater_ = guildcreater;
  } else {
    clear_has_guildcreater();
    guildcreater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 SelfOffice = 17 [default = -1];
inline bool GuildInfo::has_selfoffice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildInfo::set_has_selfoffice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildInfo::clear_has_selfoffice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildInfo::clear_selfoffice() {
  selfoffice_ = -1;
  clear_has_selfoffice();
}
inline ::google::protobuf::int32 GuildInfo::selfoffice() const {
  return selfoffice_;
}
inline void GuildInfo::set_selfoffice(::google::protobuf::int32 value) {
  set_has_selfoffice();
  selfoffice_ = value;
}

// optional int32 TotalCount = 18 [default = -1];
inline bool GuildInfo::has_totalcount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GuildInfo::set_has_totalcount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GuildInfo::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GuildInfo::clear_totalcount() {
  totalcount_ = -1;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 GuildInfo::totalcount() const {
  return totalcount_;
}
inline void GuildInfo::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
}

// optional bool IsVacation = 19 [default = false];
inline bool GuildInfo::has_isvacation() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildInfo::set_has_isvacation() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildInfo::clear_has_isvacation() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildInfo::clear_isvacation() {
  isvacation_ = false;
  clear_has_isvacation();
}
inline bool GuildInfo::isvacation() const {
  return isvacation_;
}
inline void GuildInfo::set_isvacation(bool value) {
  set_has_isvacation();
  isvacation_ = value;
}

// optional bool HaveApplied = 20 [default = false];
inline bool GuildInfo::has_haveapplied() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GuildInfo::set_has_haveapplied() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GuildInfo::clear_has_haveapplied() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GuildInfo::clear_haveapplied() {
  haveapplied_ = false;
  clear_has_haveapplied();
}
inline bool GuildInfo::haveapplied() const {
  return haveapplied_;
}
inline void GuildInfo::set_haveapplied(bool value) {
  set_has_haveapplied();
  haveapplied_ = value;
}

// optional int32 MaintainCost = 21 [default = -1];
inline bool GuildInfo::has_maintaincost() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GuildInfo::set_has_maintaincost() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GuildInfo::clear_has_maintaincost() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GuildInfo::clear_maintaincost() {
  maintaincost_ = -1;
  clear_has_maintaincost();
}
inline ::google::protobuf::int32 GuildInfo::maintaincost() const {
  return maintaincost_;
}
inline void GuildInfo::set_maintaincost(::google::protobuf::int32 value) {
  set_has_maintaincost();
  maintaincost_ = value;
}

// optional int32 GuildWelfare = 22 [default = -1];
inline bool GuildInfo::has_guildwelfare() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GuildInfo::set_has_guildwelfare() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GuildInfo::clear_has_guildwelfare() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GuildInfo::clear_guildwelfare() {
  guildwelfare_ = -1;
  clear_has_guildwelfare();
}
inline ::google::protobuf::int32 GuildInfo::guildwelfare() const {
  return guildwelfare_;
}
inline void GuildInfo::set_guildwelfare(::google::protobuf::int32 value) {
  set_has_guildwelfare();
  guildwelfare_ = value;
}

// -------------------------------------------------------------------

// GuildFlag

// optional int32 FlagEquiped = 1 [default = -1];
inline bool GuildFlag::has_flagequiped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildFlag::set_has_flagequiped() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildFlag::clear_has_flagequiped() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildFlag::clear_flagequiped() {
  flagequiped_ = -1;
  clear_has_flagequiped();
}
inline ::google::protobuf::int32 GuildFlag::flagequiped() const {
  return flagequiped_;
}
inline void GuildFlag::set_flagequiped(::google::protobuf::int32 value) {
  set_has_flagequiped();
  flagequiped_ = value;
}

// repeated int32 FlagUnlocked = 2;
inline int GuildFlag::flagunlocked_size() const {
  return flagunlocked_.size();
}
inline void GuildFlag::clear_flagunlocked() {
  flagunlocked_.Clear();
}
inline ::google::protobuf::int32 GuildFlag::flagunlocked(int index) const {
  return flagunlocked_.Get(index);
}
inline void GuildFlag::set_flagunlocked(int index, ::google::protobuf::int32 value) {
  flagunlocked_.Set(index, value);
}
inline void GuildFlag::add_flagunlocked(::google::protobuf::int32 value) {
  flagunlocked_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildFlag::flagunlocked() const {
  return flagunlocked_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildFlag::mutable_flagunlocked() {
  return &flagunlocked_;
}

// -------------------------------------------------------------------

// GuildNews

// optional int32 OptionType = 3 [default = -1];
inline bool GuildNews::has_optiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildNews::set_has_optiontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildNews::clear_has_optiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildNews::clear_optiontype() {
  optiontype_ = -1;
  clear_has_optiontype();
}
inline ::google::protobuf::int32 GuildNews::optiontype() const {
  return optiontype_;
}
inline void GuildNews::set_optiontype(::google::protobuf::int32 value) {
  set_has_optiontype();
  optiontype_ = value;
}

// repeated string EventsParm = 4;
inline int GuildNews::eventsparm_size() const {
  return eventsparm_.size();
}
inline void GuildNews::clear_eventsparm() {
  eventsparm_.Clear();
}
inline const ::std::string& GuildNews::eventsparm(int index) const {
  return eventsparm_.Get(index);
}
inline ::std::string* GuildNews::mutable_eventsparm(int index) {
  return eventsparm_.Mutable(index);
}
inline void GuildNews::set_eventsparm(int index, const ::std::string& value) {
  eventsparm_.Mutable(index)->assign(value);
}
inline void GuildNews::set_eventsparm(int index, const char* value) {
  eventsparm_.Mutable(index)->assign(value);
}
inline void GuildNews::set_eventsparm(int index, const char* value, size_t size) {
  eventsparm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildNews::add_eventsparm() {
  return eventsparm_.Add();
}
inline void GuildNews::add_eventsparm(const ::std::string& value) {
  eventsparm_.Add()->assign(value);
}
inline void GuildNews::add_eventsparm(const char* value) {
  eventsparm_.Add()->assign(value);
}
inline void GuildNews::add_eventsparm(const char* value, size_t size) {
  eventsparm_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GuildNews::eventsparm() const {
  return eventsparm_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GuildNews::mutable_eventsparm() {
  return &eventsparm_;
}

// -------------------------------------------------------------------

// GuildMemberTinyInfo

// optional uint64 Guid = 1 [default = 0];
inline bool GuildMemberTinyInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMemberTinyInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMemberTinyInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMemberTinyInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildMemberTinyInfo::guid() const {
  return guid_;
}
inline void GuildMemberTinyInfo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string PlayerName = 2;
inline bool GuildMemberTinyInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMemberTinyInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMemberTinyInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMemberTinyInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GuildMemberTinyInfo::playername() const {
  return *playername_;
}
inline void GuildMemberTinyInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildMemberTinyInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildMemberTinyInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildMemberTinyInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildMemberTinyInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildMemberTinyInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Occupition = 3 [default = -1];
inline bool GuildMemberTinyInfo::has_occupition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMemberTinyInfo::set_has_occupition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMemberTinyInfo::clear_has_occupition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMemberTinyInfo::clear_occupition() {
  occupition_ = -1;
  clear_has_occupition();
}
inline ::google::protobuf::int32 GuildMemberTinyInfo::occupition() const {
  return occupition_;
}
inline void GuildMemberTinyInfo::set_occupition(::google::protobuf::int32 value) {
  set_has_occupition();
  occupition_ = value;
}

// optional int32 Level = 4 [default = -1];
inline bool GuildMemberTinyInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMemberTinyInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMemberTinyInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMemberTinyInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 GuildMemberTinyInfo::level() const {
  return level_;
}
inline void GuildMemberTinyInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 FightScore = 5 [default = -1];
inline bool GuildMemberTinyInfo::has_fightscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildMemberTinyInfo::set_has_fightscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildMemberTinyInfo::clear_has_fightscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildMemberTinyInfo::clear_fightscore() {
  fightscore_ = -1;
  clear_has_fightscore();
}
inline ::google::protobuf::int32 GuildMemberTinyInfo::fightscore() const {
  return fightscore_;
}
inline void GuildMemberTinyInfo::set_fightscore(::google::protobuf::int32 value) {
  set_has_fightscore();
  fightscore_ = value;
}

// optional int32 TotalContribute = 6 [default = -1];
inline bool GuildMemberTinyInfo::has_totalcontribute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildMemberTinyInfo::set_has_totalcontribute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildMemberTinyInfo::clear_has_totalcontribute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildMemberTinyInfo::clear_totalcontribute() {
  totalcontribute_ = -1;
  clear_has_totalcontribute();
}
inline ::google::protobuf::int32 GuildMemberTinyInfo::totalcontribute() const {
  return totalcontribute_;
}
inline void GuildMemberTinyInfo::set_totalcontribute(::google::protobuf::int32 value) {
  set_has_totalcontribute();
  totalcontribute_ = value;
}

// -------------------------------------------------------------------

// GuildMemberInfo

// optional int32 OfficeType = 3 [default = -1];
inline bool GuildMemberInfo::has_officetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMemberInfo::set_has_officetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMemberInfo::clear_has_officetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMemberInfo::clear_officetype() {
  officetype_ = -1;
  clear_has_officetype();
}
inline ::google::protobuf::int32 GuildMemberInfo::officetype() const {
  return officetype_;
}
inline void GuildMemberInfo::set_officetype(::google::protobuf::int32 value) {
  set_has_officetype();
  officetype_ = value;
}

// optional int32 WeekContribute = 4 [default = -1];
inline bool GuildMemberInfo::has_weekcontribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMemberInfo::set_has_weekcontribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMemberInfo::clear_has_weekcontribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMemberInfo::clear_weekcontribute() {
  weekcontribute_ = -1;
  clear_has_weekcontribute();
}
inline ::google::protobuf::int32 GuildMemberInfo::weekcontribute() const {
  return weekcontribute_;
}
inline void GuildMemberInfo::set_weekcontribute(::google::protobuf::int32 value) {
  set_has_weekcontribute();
  weekcontribute_ = value;
}

// optional int32 HistoryContribute = 5 [default = -1];
inline bool GuildMemberInfo::has_historycontribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMemberInfo::set_has_historycontribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMemberInfo::clear_has_historycontribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMemberInfo::clear_historycontribute() {
  historycontribute_ = -1;
  clear_has_historycontribute();
}
inline ::google::protobuf::int32 GuildMemberInfo::historycontribute() const {
  return historycontribute_;
}
inline void GuildMemberInfo::set_historycontribute(::google::protobuf::int32 value) {
  set_has_historycontribute();
  historycontribute_ = value;
}

// optional int32 TotalContribute = 6 [default = -1];
inline bool GuildMemberInfo::has_totalcontribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMemberInfo::set_has_totalcontribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMemberInfo::clear_has_totalcontribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMemberInfo::clear_totalcontribute() {
  totalcontribute_ = -1;
  clear_has_totalcontribute();
}
inline ::google::protobuf::int32 GuildMemberInfo::totalcontribute() const {
  return totalcontribute_;
}
inline void GuildMemberInfo::set_totalcontribute(::google::protobuf::int32 value) {
  set_has_totalcontribute();
  totalcontribute_ = value;
}

// optional int32 WeekQuestCount = 7 [default = -1];
inline bool GuildMemberInfo::has_weekquestcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildMemberInfo::set_has_weekquestcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildMemberInfo::clear_has_weekquestcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildMemberInfo::clear_weekquestcount() {
  weekquestcount_ = -1;
  clear_has_weekquestcount();
}
inline ::google::protobuf::int32 GuildMemberInfo::weekquestcount() const {
  return weekquestcount_;
}
inline void GuildMemberInfo::set_weekquestcount(::google::protobuf::int32 value) {
  set_has_weekquestcount();
  weekquestcount_ = value;
}

// optional int32 WeekCampCount = 8 [default = -1];
inline bool GuildMemberInfo::has_weekcampcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildMemberInfo::set_has_weekcampcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildMemberInfo::clear_has_weekcampcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildMemberInfo::clear_weekcampcount() {
  weekcampcount_ = -1;
  clear_has_weekcampcount();
}
inline ::google::protobuf::int32 GuildMemberInfo::weekcampcount() const {
  return weekcampcount_;
}
inline void GuildMemberInfo::set_weekcampcount(::google::protobuf::int32 value) {
  set_has_weekcampcount();
  weekcampcount_ = value;
}

// optional int64 InTime = 9 [default = -1];
inline bool GuildMemberInfo::has_intime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildMemberInfo::set_has_intime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildMemberInfo::clear_has_intime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildMemberInfo::clear_intime() {
  intime_ = GOOGLE_LONGLONG(-1);
  clear_has_intime();
}
inline ::google::protobuf::int64 GuildMemberInfo::intime() const {
  return intime_;
}
inline void GuildMemberInfo::set_intime(::google::protobuf::int64 value) {
  set_has_intime();
  intime_ = value;
}

// optional .GuildMemberTinyInfo GuildTinyInfo = 11;
inline bool GuildMemberInfo::has_guildtinyinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildMemberInfo::set_has_guildtinyinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildMemberInfo::clear_has_guildtinyinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildMemberInfo::clear_guildtinyinfo() {
  if (guildtinyinfo_ != NULL) guildtinyinfo_->::GuildMemberTinyInfo::Clear();
  clear_has_guildtinyinfo();
}
inline const ::GuildMemberTinyInfo& GuildMemberInfo::guildtinyinfo() const {
  return guildtinyinfo_ != NULL ? *guildtinyinfo_ : *default_instance_->guildtinyinfo_;
}
inline ::GuildMemberTinyInfo* GuildMemberInfo::mutable_guildtinyinfo() {
  set_has_guildtinyinfo();
  if (guildtinyinfo_ == NULL) guildtinyinfo_ = new ::GuildMemberTinyInfo;
  return guildtinyinfo_;
}
inline ::GuildMemberTinyInfo* GuildMemberInfo::release_guildtinyinfo() {
  clear_has_guildtinyinfo();
  ::GuildMemberTinyInfo* temp = guildtinyinfo_;
  guildtinyinfo_ = NULL;
  return temp;
}
inline void GuildMemberInfo::set_allocated_guildtinyinfo(::GuildMemberTinyInfo* guildtinyinfo) {
  delete guildtinyinfo_;
  guildtinyinfo_ = guildtinyinfo;
  if (guildtinyinfo) {
    set_has_guildtinyinfo();
  } else {
    clear_has_guildtinyinfo();
  }
}

// optional uint64 LeaveTime = 12 [default = 0];
inline bool GuildMemberInfo::has_leavetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildMemberInfo::set_has_leavetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildMemberInfo::clear_has_leavetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildMemberInfo::clear_leavetime() {
  leavetime_ = GOOGLE_ULONGLONG(0);
  clear_has_leavetime();
}
inline ::google::protobuf::uint64 GuildMemberInfo::leavetime() const {
  return leavetime_;
}
inline void GuildMemberInfo::set_leavetime(::google::protobuf::uint64 value) {
  set_has_leavetime();
  leavetime_ = value;
}

// optional bool IsVacation = 13 [default = false];
inline bool GuildMemberInfo::has_isvacation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildMemberInfo::set_has_isvacation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildMemberInfo::clear_has_isvacation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildMemberInfo::clear_isvacation() {
  isvacation_ = false;
  clear_has_isvacation();
}
inline bool GuildMemberInfo::isvacation() const {
  return isvacation_;
}
inline void GuildMemberInfo::set_isvacation(bool value) {
  set_has_isvacation();
  isvacation_ = value;
}

// optional bool IsForbiddenChat = 14 [default = false];
inline bool GuildMemberInfo::has_isforbiddenchat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildMemberInfo::set_has_isforbiddenchat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildMemberInfo::clear_has_isforbiddenchat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildMemberInfo::clear_isforbiddenchat() {
  isforbiddenchat_ = false;
  clear_has_isforbiddenchat();
}
inline bool GuildMemberInfo::isforbiddenchat() const {
  return isforbiddenchat_;
}
inline void GuildMemberInfo::set_isforbiddenchat(bool value) {
  set_has_isforbiddenchat();
  isforbiddenchat_ = value;
}

// -------------------------------------------------------------------

// GuildJurisdiction

// optional int32 ConfigID = 1 [default = -1];
inline bool GuildJurisdiction::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildJurisdiction::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildJurisdiction::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildJurisdiction::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 GuildJurisdiction::configid() const {
  return configid_;
}
inline void GuildJurisdiction::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional bool CurState = 2 [default = false];
inline bool GuildJurisdiction::has_curstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildJurisdiction::set_has_curstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildJurisdiction::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildJurisdiction::clear_curstate() {
  curstate_ = false;
  clear_has_curstate();
}
inline bool GuildJurisdiction::curstate() const {
  return curstate_;
}
inline void GuildJurisdiction::set_curstate(bool value) {
  set_has_curstate();
  curstate_ = value;
}

// optional bool IsCanSet = 3 [default = false];
inline bool GuildJurisdiction::has_iscanset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildJurisdiction::set_has_iscanset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildJurisdiction::clear_has_iscanset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildJurisdiction::clear_iscanset() {
  iscanset_ = false;
  clear_has_iscanset();
}
inline bool GuildJurisdiction::iscanset() const {
  return iscanset_;
}
inline void GuildJurisdiction::set_iscanset(bool value) {
  set_has_iscanset();
  iscanset_ = value;
}

// -------------------------------------------------------------------

// GuildOfficeJurisdiction

// optional int32 OfficeType = 1 [default = -1];
inline bool GuildOfficeJurisdiction::has_officetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildOfficeJurisdiction::set_has_officetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildOfficeJurisdiction::clear_has_officetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildOfficeJurisdiction::clear_officetype() {
  officetype_ = -1;
  clear_has_officetype();
}
inline ::google::protobuf::int32 GuildOfficeJurisdiction::officetype() const {
  return officetype_;
}
inline void GuildOfficeJurisdiction::set_officetype(::google::protobuf::int32 value) {
  set_has_officetype();
  officetype_ = value;
}

// repeated .GuildJurisdiction JurisdictionList = 2;
inline int GuildOfficeJurisdiction::jurisdictionlist_size() const {
  return jurisdictionlist_.size();
}
inline void GuildOfficeJurisdiction::clear_jurisdictionlist() {
  jurisdictionlist_.Clear();
}
inline const ::GuildJurisdiction& GuildOfficeJurisdiction::jurisdictionlist(int index) const {
  return jurisdictionlist_.Get(index);
}
inline ::GuildJurisdiction* GuildOfficeJurisdiction::mutable_jurisdictionlist(int index) {
  return jurisdictionlist_.Mutable(index);
}
inline ::GuildJurisdiction* GuildOfficeJurisdiction::add_jurisdictionlist() {
  return jurisdictionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GuildJurisdiction >&
GuildOfficeJurisdiction::jurisdictionlist() const {
  return jurisdictionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GuildJurisdiction >*
GuildOfficeJurisdiction::mutable_jurisdictionlist() {
  return &jurisdictionlist_;
}

// -------------------------------------------------------------------

// GuildVacationInfo

// optional uint64 Guid = 1 [default = 0];
inline bool GuildVacationInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildVacationInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildVacationInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildVacationInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildVacationInfo::guid() const {
  return guid_;
}
inline void GuildVacationInfo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string PlayerName = 3;
inline bool GuildVacationInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildVacationInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildVacationInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildVacationInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GuildVacationInfo::playername() const {
  return *playername_;
}
inline void GuildVacationInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildVacationInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildVacationInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildVacationInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildVacationInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildVacationInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 4 [default = -1];
inline bool GuildVacationInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildVacationInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildVacationInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildVacationInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 GuildVacationInfo::level() const {
  return level_;
}
inline void GuildVacationInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string Reason = 5;
inline bool GuildVacationInfo::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildVacationInfo::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildVacationInfo::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildVacationInfo::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& GuildVacationInfo::reason() const {
  return *reason_;
}
inline void GuildVacationInfo::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void GuildVacationInfo::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void GuildVacationInfo::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildVacationInfo::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* GuildVacationInfo::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildVacationInfo::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 LeftTime = 6 [default = 0];
inline bool GuildVacationInfo::has_lefttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildVacationInfo::set_has_lefttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildVacationInfo::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildVacationInfo::clear_lefttime() {
  lefttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lefttime();
}
inline ::google::protobuf::uint64 GuildVacationInfo::lefttime() const {
  return lefttime_;
}
inline void GuildVacationInfo::set_lefttime(::google::protobuf::uint64 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// GuildBuildingInfo

// optional int32 BuildingType = 1 [default = -1];
inline bool GuildBuildingInfo::has_buildingtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBuildingInfo::set_has_buildingtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBuildingInfo::clear_has_buildingtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBuildingInfo::clear_buildingtype() {
  buildingtype_ = -1;
  clear_has_buildingtype();
}
inline ::google::protobuf::int32 GuildBuildingInfo::buildingtype() const {
  return buildingtype_;
}
inline void GuildBuildingInfo::set_buildingtype(::google::protobuf::int32 value) {
  set_has_buildingtype();
  buildingtype_ = value;
}

// optional int32 BuildingLv = 2 [default = -1];
inline bool GuildBuildingInfo::has_buildinglv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBuildingInfo::set_has_buildinglv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBuildingInfo::clear_has_buildinglv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBuildingInfo::clear_buildinglv() {
  buildinglv_ = -1;
  clear_has_buildinglv();
}
inline ::google::protobuf::int32 GuildBuildingInfo::buildinglv() const {
  return buildinglv_;
}
inline void GuildBuildingInfo::set_buildinglv(::google::protobuf::int32 value) {
  set_has_buildinglv();
  buildinglv_ = value;
}

// optional uint64 LeftTime = 3 [default = 0];
inline bool GuildBuildingInfo::has_lefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBuildingInfo::set_has_lefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBuildingInfo::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBuildingInfo::clear_lefttime() {
  lefttime_ = GOOGLE_ULONGLONG(0);
  clear_has_lefttime();
}
inline ::google::protobuf::uint64 GuildBuildingInfo::lefttime() const {
  return lefttime_;
}
inline void GuildBuildingInfo::set_lefttime(::google::protobuf::uint64 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// GuildBuildingContributionInfo

// optional uint64 Guid = 2 [default = 0];
inline bool GuildBuildingContributionInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBuildingContributionInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBuildingContributionInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBuildingContributionInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildBuildingContributionInfo::guid() const {
  return guid_;
}
inline void GuildBuildingContributionInfo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string PlayerName = 3;
inline bool GuildBuildingContributionInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBuildingContributionInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBuildingContributionInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBuildingContributionInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GuildBuildingContributionInfo::playername() const {
  return *playername_;
}
inline void GuildBuildingContributionInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildBuildingContributionInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildBuildingContributionInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBuildingContributionInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildBuildingContributionInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBuildingContributionInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 SpeedTime = 4 [default = -1];
inline bool GuildBuildingContributionInfo::has_speedtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBuildingContributionInfo::set_has_speedtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBuildingContributionInfo::clear_has_speedtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBuildingContributionInfo::clear_speedtime() {
  speedtime_ = -1;
  clear_has_speedtime();
}
inline ::google::protobuf::int32 GuildBuildingContributionInfo::speedtime() const {
  return speedtime_;
}
inline void GuildBuildingContributionInfo::set_speedtime(::google::protobuf::int32 value) {
  set_has_speedtime();
  speedtime_ = value;
}

// optional uint64 Date = 5 [default = 0];
inline bool GuildBuildingContributionInfo::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBuildingContributionInfo::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBuildingContributionInfo::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBuildingContributionInfo::clear_date() {
  date_ = GOOGLE_ULONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::uint64 GuildBuildingContributionInfo::date() const {
  return date_;
}
inline void GuildBuildingContributionInfo::set_date(::google::protobuf::uint64 value) {
  set_has_date();
  date_ = value;
}

// -------------------------------------------------------------------

// GuildEvent

// optional uint64 Guid = 2 [default = 0];
inline bool GuildEvent::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildEvent::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildEvent::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildEvent::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GuildEvent::guid() const {
  return guid_;
}
inline void GuildEvent::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional uint64 Date = 4 [default = 0];
inline bool GuildEvent::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildEvent::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildEvent::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildEvent::clear_date() {
  date_ = GOOGLE_ULONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::uint64 GuildEvent::date() const {
  return date_;
}
inline void GuildEvent::set_date(::google::protobuf::uint64 value) {
  set_has_date();
  date_ = value;
}

// optional int32 OptionType = 5 [default = -1];
inline bool GuildEvent::has_optiontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildEvent::set_has_optiontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildEvent::clear_has_optiontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildEvent::clear_optiontype() {
  optiontype_ = -1;
  clear_has_optiontype();
}
inline ::google::protobuf::int32 GuildEvent::optiontype() const {
  return optiontype_;
}
inline void GuildEvent::set_optiontype(::google::protobuf::int32 value) {
  set_has_optiontype();
  optiontype_ = value;
}

// repeated string EventsParm = 6;
inline int GuildEvent::eventsparm_size() const {
  return eventsparm_.size();
}
inline void GuildEvent::clear_eventsparm() {
  eventsparm_.Clear();
}
inline const ::std::string& GuildEvent::eventsparm(int index) const {
  return eventsparm_.Get(index);
}
inline ::std::string* GuildEvent::mutable_eventsparm(int index) {
  return eventsparm_.Mutable(index);
}
inline void GuildEvent::set_eventsparm(int index, const ::std::string& value) {
  eventsparm_.Mutable(index)->assign(value);
}
inline void GuildEvent::set_eventsparm(int index, const char* value) {
  eventsparm_.Mutable(index)->assign(value);
}
inline void GuildEvent::set_eventsparm(int index, const char* value, size_t size) {
  eventsparm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildEvent::add_eventsparm() {
  return eventsparm_.Add();
}
inline void GuildEvent::add_eventsparm(const ::std::string& value) {
  eventsparm_.Add()->assign(value);
}
inline void GuildEvent::add_eventsparm(const char* value) {
  eventsparm_.Add()->assign(value);
}
inline void GuildEvent::add_eventsparm(const char* value, size_t size) {
  eventsparm_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GuildEvent::eventsparm() const {
  return eventsparm_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GuildEvent::mutable_eventsparm() {
  return &eventsparm_;
}

// -------------------------------------------------------------------

// PBMatchRoom

// repeated .MatchRoomCamps Camps = 1;
inline int PBMatchRoom::camps_size() const {
  return camps_.size();
}
inline void PBMatchRoom::clear_camps() {
  camps_.Clear();
}
inline const ::MatchRoomCamps& PBMatchRoom::camps(int index) const {
  return camps_.Get(index);
}
inline ::MatchRoomCamps* PBMatchRoom::mutable_camps(int index) {
  return camps_.Mutable(index);
}
inline ::MatchRoomCamps* PBMatchRoom::add_camps() {
  return camps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchRoomCamps >&
PBMatchRoom::camps() const {
  return camps_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchRoomCamps >*
PBMatchRoom::mutable_camps() {
  return &camps_;
}

// optional .MatchTargetInfo MatchTarget = 6;
inline bool PBMatchRoom::has_matchtarget() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMatchRoom::set_has_matchtarget() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMatchRoom::clear_has_matchtarget() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMatchRoom::clear_matchtarget() {
  if (matchtarget_ != NULL) matchtarget_->::MatchTargetInfo::Clear();
  clear_has_matchtarget();
}
inline const ::MatchTargetInfo& PBMatchRoom::matchtarget() const {
  return matchtarget_ != NULL ? *matchtarget_ : *default_instance_->matchtarget_;
}
inline ::MatchTargetInfo* PBMatchRoom::mutable_matchtarget() {
  set_has_matchtarget();
  if (matchtarget_ == NULL) matchtarget_ = new ::MatchTargetInfo;
  return matchtarget_;
}
inline ::MatchTargetInfo* PBMatchRoom::release_matchtarget() {
  clear_has_matchtarget();
  ::MatchTargetInfo* temp = matchtarget_;
  matchtarget_ = NULL;
  return temp;
}
inline void PBMatchRoom::set_allocated_matchtarget(::MatchTargetInfo* matchtarget) {
  delete matchtarget_;
  matchtarget_ = matchtarget;
  if (matchtarget) {
    set_has_matchtarget();
  } else {
    clear_has_matchtarget();
  }
}

// optional uint64 RoomId = 7 [default = 0];
inline bool PBMatchRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMatchRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMatchRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMatchRoom::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 PBMatchRoom::roomid() const {
  return roomid_;
}
inline void PBMatchRoom::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 MatchType = 8 [default = -1];
inline bool PBMatchRoom::has_matchtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMatchRoom::set_has_matchtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMatchRoom::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMatchRoom::clear_matchtype() {
  matchtype_ = -1;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 PBMatchRoom::matchtype() const {
  return matchtype_;
}
inline void PBMatchRoom::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// -------------------------------------------------------------------

// MatchRoomCamps

// repeated .MatchInfo Players = 1;
inline int MatchRoomCamps::players_size() const {
  return players_.size();
}
inline void MatchRoomCamps::clear_players() {
  players_.Clear();
}
inline const ::MatchInfo& MatchRoomCamps::players(int index) const {
  return players_.Get(index);
}
inline ::MatchInfo* MatchRoomCamps::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::MatchInfo* MatchRoomCamps::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchInfo >&
MatchRoomCamps::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchInfo >*
MatchRoomCamps::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// PlayerMatchData

// optional int32 MatchType = 1 [default = 0];
inline bool PlayerMatchData::has_matchtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMatchData::set_has_matchtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMatchData::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMatchData::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 PlayerMatchData::matchtype() const {
  return matchtype_;
}
inline void PlayerMatchData::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// optional int32 Elo = 2 [default = 0];
inline bool PlayerMatchData::has_elo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMatchData::set_has_elo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMatchData::clear_has_elo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMatchData::clear_elo() {
  elo_ = 0;
  clear_has_elo();
}
inline ::google::protobuf::int32 PlayerMatchData::elo() const {
  return elo_;
}
inline void PlayerMatchData::set_elo(::google::protobuf::int32 value) {
  set_has_elo();
  elo_ = value;
}

// optional int32 Auto = 3 [default = 0];
inline bool PlayerMatchData::has_auto_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMatchData::set_has_auto_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMatchData::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMatchData::clear_auto_() {
  auto__ = 0;
  clear_has_auto_();
}
inline ::google::protobuf::int32 PlayerMatchData::auto_() const {
  return auto__;
}
inline void PlayerMatchData::set_auto_(::google::protobuf::int32 value) {
  set_has_auto_();
  auto__ = value;
}

// -------------------------------------------------------------------

// MaxQuestCompleteId

// optional int32 QuestType = 1 [default = -1];
inline bool MaxQuestCompleteId::has_questtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxQuestCompleteId::set_has_questtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxQuestCompleteId::clear_has_questtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxQuestCompleteId::clear_questtype() {
  questtype_ = -1;
  clear_has_questtype();
}
inline ::google::protobuf::int32 MaxQuestCompleteId::questtype() const {
  return questtype_;
}
inline void MaxQuestCompleteId::set_questtype(::google::protobuf::int32 value) {
  set_has_questtype();
  questtype_ = value;
}

// optional int32 MaxConfigId = 2 [default = -1];
inline bool MaxQuestCompleteId::has_maxconfigid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxQuestCompleteId::set_has_maxconfigid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxQuestCompleteId::clear_has_maxconfigid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxQuestCompleteId::clear_maxconfigid() {
  maxconfigid_ = -1;
  clear_has_maxconfigid();
}
inline ::google::protobuf::int32 MaxQuestCompleteId::maxconfigid() const {
  return maxconfigid_;
}
inline void MaxQuestCompleteId::set_maxconfigid(::google::protobuf::int32 value) {
  set_has_maxconfigid();
  maxconfigid_ = value;
}

// -------------------------------------------------------------------

// QuestMaxQuestList

// repeated .CompletedQuestList QuestList = 1;
inline int QuestMaxQuestList::questlist_size() const {
  return questlist_.size();
}
inline void QuestMaxQuestList::clear_questlist() {
  questlist_.Clear();
}
inline const ::CompletedQuestList& QuestMaxQuestList::questlist(int index) const {
  return questlist_.Get(index);
}
inline ::CompletedQuestList* QuestMaxQuestList::mutable_questlist(int index) {
  return questlist_.Mutable(index);
}
inline ::CompletedQuestList* QuestMaxQuestList::add_questlist() {
  return questlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompletedQuestList >&
QuestMaxQuestList::questlist() const {
  return questlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompletedQuestList >*
QuestMaxQuestList::mutable_questlist() {
  return &questlist_;
}

// -------------------------------------------------------------------

// LineStats

// optional int32 LineId = 1 [default = -1];
inline bool LineStats::has_lineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineStats::set_has_lineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineStats::clear_has_lineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineStats::clear_lineid() {
  lineid_ = -1;
  clear_has_lineid();
}
inline ::google::protobuf::int32 LineStats::lineid() const {
  return lineid_;
}
inline void LineStats::set_lineid(::google::protobuf::int32 value) {
  set_has_lineid();
  lineid_ = value;
}

// optional int32 LineStats = 2 [default = -1];
inline bool LineStats::has_linestats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineStats::set_has_linestats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineStats::clear_has_linestats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineStats::clear_linestats() {
  linestats_ = -1;
  clear_has_linestats();
}
inline ::google::protobuf::int32 LineStats::linestats() const {
  return linestats_;
}
inline void LineStats::set_linestats(::google::protobuf::int32 value) {
  set_has_linestats();
  linestats_ = value;
}

// -------------------------------------------------------------------

// SceneStats

// repeated .LineStats Lines = 1;
inline int SceneStats::lines_size() const {
  return lines_.size();
}
inline void SceneStats::clear_lines() {
  lines_.Clear();
}
inline const ::LineStats& SceneStats::lines(int index) const {
  return lines_.Get(index);
}
inline ::LineStats* SceneStats::mutable_lines(int index) {
  return lines_.Mutable(index);
}
inline ::LineStats* SceneStats::add_lines() {
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LineStats >&
SceneStats::lines() const {
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::LineStats >*
SceneStats::mutable_lines() {
  return &lines_;
}

// optional int32 SceneId = 2 [default = -1];
inline bool SceneStats::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStats::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneStats::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneStats::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 SceneStats::sceneid() const {
  return sceneid_;
}
inline void SceneStats::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// DungeonBossInfo

// optional int32 Bossid = 1 [default = -1];
inline bool DungeonBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonBossInfo::clear_bossid() {
  bossid_ = -1;
  clear_has_bossid();
}
inline ::google::protobuf::int32 DungeonBossInfo::bossid() const {
  return bossid_;
}
inline void DungeonBossInfo::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int32 Number = 2 [default = -1];
inline bool DungeonBossInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonBossInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonBossInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonBossInfo::clear_number() {
  number_ = -1;
  clear_has_number();
}
inline ::google::protobuf::int32 DungeonBossInfo::number() const {
  return number_;
}
inline void DungeonBossInfo::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// optional int32 Dungeonid = 3 [default = -1];
inline bool DungeonBossInfo::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonBossInfo::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonBossInfo::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonBossInfo::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 DungeonBossInfo::dungeonid() const {
  return dungeonid_;
}
inline void DungeonBossInfo::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// optional int32 MaxNumber = 4 [default = -1];
inline bool DungeonBossInfo::has_maxnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DungeonBossInfo::set_has_maxnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DungeonBossInfo::clear_has_maxnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DungeonBossInfo::clear_maxnumber() {
  maxnumber_ = -1;
  clear_has_maxnumber();
}
inline ::google::protobuf::int32 DungeonBossInfo::maxnumber() const {
  return maxnumber_;
}
inline void DungeonBossInfo::set_maxnumber(::google::protobuf::int32 value) {
  set_has_maxnumber();
  maxnumber_ = value;
}

// optional int32 RefreshType = 5 [default = -1];
inline bool DungeonBossInfo::has_refreshtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DungeonBossInfo::set_has_refreshtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DungeonBossInfo::clear_has_refreshtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DungeonBossInfo::clear_refreshtype() {
  refreshtype_ = -1;
  clear_has_refreshtype();
}
inline ::google::protobuf::int32 DungeonBossInfo::refreshtype() const {
  return refreshtype_;
}
inline void DungeonBossInfo::set_refreshtype(::google::protobuf::int32 value) {
  set_has_refreshtype();
  refreshtype_ = value;
}

// -------------------------------------------------------------------

// SkillPosInfo

// optional int32 Pos = 1 [default = -1];
inline bool SkillPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillPosInfo::clear_pos() {
  pos_ = -1;
  clear_has_pos();
}
inline ::google::protobuf::int32 SkillPosInfo::pos() const {
  return pos_;
}
inline void SkillPosInfo::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 CurLevel = 3 [default = -1];
inline bool SkillPosInfo::has_curlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillPosInfo::set_has_curlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillPosInfo::clear_has_curlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillPosInfo::clear_curlevel() {
  curlevel_ = -1;
  clear_has_curlevel();
}
inline ::google::protobuf::int32 SkillPosInfo::curlevel() const {
  return curlevel_;
}
inline void SkillPosInfo::set_curlevel(::google::protobuf::int32 value) {
  set_has_curlevel();
  curlevel_ = value;
}

// optional int32 NextLevel = 4 [default = -1];
inline bool SkillPosInfo::has_nextlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillPosInfo::set_has_nextlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillPosInfo::clear_has_nextlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillPosInfo::clear_nextlevel() {
  nextlevel_ = -1;
  clear_has_nextlevel();
}
inline ::google::protobuf::int32 SkillPosInfo::nextlevel() const {
  return nextlevel_;
}
inline void SkillPosInfo::set_nextlevel(::google::protobuf::int32 value) {
  set_has_nextlevel();
  nextlevel_ = value;
}

// repeated .AttrKeyValue CurLevelAttr = 5;
inline int SkillPosInfo::curlevelattr_size() const {
  return curlevelattr_.size();
}
inline void SkillPosInfo::clear_curlevelattr() {
  curlevelattr_.Clear();
}
inline const ::AttrKeyValue& SkillPosInfo::curlevelattr(int index) const {
  return curlevelattr_.Get(index);
}
inline ::AttrKeyValue* SkillPosInfo::mutable_curlevelattr(int index) {
  return curlevelattr_.Mutable(index);
}
inline ::AttrKeyValue* SkillPosInfo::add_curlevelattr() {
  return curlevelattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
SkillPosInfo::curlevelattr() const {
  return curlevelattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
SkillPosInfo::mutable_curlevelattr() {
  return &curlevelattr_;
}

// repeated .AttrKeyValue NextLevelAttr = 6;
inline int SkillPosInfo::nextlevelattr_size() const {
  return nextlevelattr_.size();
}
inline void SkillPosInfo::clear_nextlevelattr() {
  nextlevelattr_.Clear();
}
inline const ::AttrKeyValue& SkillPosInfo::nextlevelattr(int index) const {
  return nextlevelattr_.Get(index);
}
inline ::AttrKeyValue* SkillPosInfo::mutable_nextlevelattr(int index) {
  return nextlevelattr_.Mutable(index);
}
inline ::AttrKeyValue* SkillPosInfo::add_nextlevelattr() {
  return nextlevelattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >&
SkillPosInfo::nextlevelattr() const {
  return nextlevelattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttrKeyValue >*
SkillPosInfo::mutable_nextlevelattr() {
  return &nextlevelattr_;
}

// -------------------------------------------------------------------

// WelfareReward

// optional int32 RewardID = 1 [default = -1];
inline bool WelfareReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WelfareReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WelfareReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WelfareReward::clear_rewardid() {
  rewardid_ = -1;
  clear_has_rewardid();
}
inline ::google::protobuf::int32 WelfareReward::rewardid() const {
  return rewardid_;
}
inline void WelfareReward::set_rewardid(::google::protobuf::int32 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// optional int32 RewardNum = 2 [default = -1];
inline bool WelfareReward::has_rewardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WelfareReward::set_has_rewardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WelfareReward::clear_has_rewardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WelfareReward::clear_rewardnum() {
  rewardnum_ = -1;
  clear_has_rewardnum();
}
inline ::google::protobuf::int32 WelfareReward::rewardnum() const {
  return rewardnum_;
}
inline void WelfareReward::set_rewardnum(::google::protobuf::int32 value) {
  set_has_rewardnum();
  rewardnum_ = value;
}

// -------------------------------------------------------------------

// AccumulateSignInfo

// optional int32 ID = 1 [default = -1];
inline bool AccumulateSignInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccumulateSignInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccumulateSignInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccumulateSignInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 AccumulateSignInfo::id() const {
  return id_;
}
inline void AccumulateSignInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool State = 2 [default = false];
inline bool AccumulateSignInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccumulateSignInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccumulateSignInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccumulateSignInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool AccumulateSignInfo::state() const {
  return state_;
}
inline void AccumulateSignInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// optional .WelfareReward RewardInfo = 3;
inline bool AccumulateSignInfo::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccumulateSignInfo::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccumulateSignInfo::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccumulateSignInfo::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
  clear_has_rewardinfo();
}
inline const ::WelfareReward& AccumulateSignInfo::rewardinfo() const {
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::WelfareReward* AccumulateSignInfo::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::WelfareReward;
  return rewardinfo_;
}
inline ::WelfareReward* AccumulateSignInfo::release_rewardinfo() {
  clear_has_rewardinfo();
  ::WelfareReward* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void AccumulateSignInfo::set_allocated_rewardinfo(::WelfareReward* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
}

// -------------------------------------------------------------------

// OnlineInfo

// optional int32 ID = 1 [default = -1];
inline bool OnlineInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 OnlineInfo::id() const {
  return id_;
}
inline void OnlineInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool State = 2 [default = false];
inline bool OnlineInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool OnlineInfo::state() const {
  return state_;
}
inline void OnlineInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// optional .WelfareReward RewardInfo = 3;
inline bool OnlineInfo::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineInfo::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineInfo::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineInfo::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
  clear_has_rewardinfo();
}
inline const ::WelfareReward& OnlineInfo::rewardinfo() const {
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::WelfareReward* OnlineInfo::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::WelfareReward;
  return rewardinfo_;
}
inline ::WelfareReward* OnlineInfo::release_rewardinfo() {
  clear_has_rewardinfo();
  ::WelfareReward* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void OnlineInfo::set_allocated_rewardinfo(::WelfareReward* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
}

// -------------------------------------------------------------------

// LevelInfo

// optional int32 ID = 2 [default = -1];
inline bool LevelInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 LevelInfo::id() const {
  return id_;
}
inline void LevelInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool State = 3 [default = false];
inline bool LevelInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool LevelInfo::state() const {
  return state_;
}
inline void LevelInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// repeated .WelfareReward RewardInfo = 4;
inline int LevelInfo::rewardinfo_size() const {
  return rewardinfo_.size();
}
inline void LevelInfo::clear_rewardinfo() {
  rewardinfo_.Clear();
}
inline const ::WelfareReward& LevelInfo::rewardinfo(int index) const {
  return rewardinfo_.Get(index);
}
inline ::WelfareReward* LevelInfo::mutable_rewardinfo(int index) {
  return rewardinfo_.Mutable(index);
}
inline ::WelfareReward* LevelInfo::add_rewardinfo() {
  return rewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WelfareReward >&
LevelInfo::rewardinfo() const {
  return rewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::WelfareReward >*
LevelInfo::mutable_rewardinfo() {
  return &rewardinfo_;
}

// -------------------------------------------------------------------

// MonthSignInInfo

// optional int32 ID = 1 [default = -1];
inline bool MonthSignInInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonthSignInInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonthSignInInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonthSignInInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 MonthSignInInfo::id() const {
  return id_;
}
inline void MonthSignInInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool State = 2 [default = false];
inline bool MonthSignInInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonthSignInInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonthSignInInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonthSignInInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool MonthSignInInfo::state() const {
  return state_;
}
inline void MonthSignInInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// optional .WelfareReward RewardInfo = 3;
inline bool MonthSignInInfo::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonthSignInInfo::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonthSignInInfo::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonthSignInInfo::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
  clear_has_rewardinfo();
}
inline const ::WelfareReward& MonthSignInInfo::rewardinfo() const {
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::WelfareReward* MonthSignInInfo::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::WelfareReward;
  return rewardinfo_;
}
inline ::WelfareReward* MonthSignInInfo::release_rewardinfo() {
  clear_has_rewardinfo();
  ::WelfareReward* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void MonthSignInInfo::set_allocated_rewardinfo(::WelfareReward* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
}

// -------------------------------------------------------------------

// TeamMemberQuickUpdateInfo

// optional .CharacterLocation Location = 1;
inline bool TeamMemberQuickUpdateInfo::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMemberQuickUpdateInfo::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMemberQuickUpdateInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMemberQuickUpdateInfo::clear_location() {
  if (location_ != NULL) location_->::CharacterLocation::Clear();
  clear_has_location();
}
inline const ::CharacterLocation& TeamMemberQuickUpdateInfo::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::CharacterLocation* TeamMemberQuickUpdateInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::CharacterLocation;
  return location_;
}
inline ::CharacterLocation* TeamMemberQuickUpdateInfo::release_location() {
  clear_has_location();
  ::CharacterLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void TeamMemberQuickUpdateInfo::set_allocated_location(::CharacterLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// optional int64 MaxMp = 2 [default = -1];
inline bool TeamMemberQuickUpdateInfo::has_maxmp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMemberQuickUpdateInfo::set_has_maxmp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMemberQuickUpdateInfo::clear_has_maxmp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMemberQuickUpdateInfo::clear_maxmp() {
  maxmp_ = GOOGLE_LONGLONG(-1);
  clear_has_maxmp();
}
inline ::google::protobuf::int64 TeamMemberQuickUpdateInfo::maxmp() const {
  return maxmp_;
}
inline void TeamMemberQuickUpdateInfo::set_maxmp(::google::protobuf::int64 value) {
  set_has_maxmp();
  maxmp_ = value;
}

// optional int64 MaxHp = 4 [default = -1];
inline bool TeamMemberQuickUpdateInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMemberQuickUpdateInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMemberQuickUpdateInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMemberQuickUpdateInfo::clear_maxhp() {
  maxhp_ = GOOGLE_LONGLONG(-1);
  clear_has_maxhp();
}
inline ::google::protobuf::int64 TeamMemberQuickUpdateInfo::maxhp() const {
  return maxhp_;
}
inline void TeamMemberQuickUpdateInfo::set_maxhp(::google::protobuf::int64 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// -------------------------------------------------------------------

// WorldBossScoreInfo

// optional uint64 Playerguid = 1 [default = 0];
inline bool WorldBossScoreInfo::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossScoreInfo::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossScoreInfo::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossScoreInfo::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
}
inline ::google::protobuf::uint64 WorldBossScoreInfo::playerguid() const {
  return playerguid_;
}
inline void WorldBossScoreInfo::set_playerguid(::google::protobuf::uint64 value) {
  set_has_playerguid();
  playerguid_ = value;
}

// optional int32 Level = 2 [default = -1];
inline bool WorldBossScoreInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossScoreInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossScoreInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossScoreInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 WorldBossScoreInfo::level() const {
  return level_;
}
inline void WorldBossScoreInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string Name = 3;
inline bool WorldBossScoreInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossScoreInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossScoreInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossScoreInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WorldBossScoreInfo::name() const {
  return *name_;
}
inline void WorldBossScoreInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WorldBossScoreInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WorldBossScoreInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorldBossScoreInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WorldBossScoreInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WorldBossScoreInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Occupation = 4 [default = -1];
inline bool WorldBossScoreInfo::has_occupation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBossScoreInfo::set_has_occupation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBossScoreInfo::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBossScoreInfo::clear_occupation() {
  occupation_ = -1;
  clear_has_occupation();
}
inline ::google::protobuf::int32 WorldBossScoreInfo::occupation() const {
  return occupation_;
}
inline void WorldBossScoreInfo::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// optional int32 RankAll = 5 [default = -1];
inline bool WorldBossScoreInfo::has_rankall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldBossScoreInfo::set_has_rankall() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldBossScoreInfo::clear_has_rankall() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldBossScoreInfo::clear_rankall() {
  rankall_ = -1;
  clear_has_rankall();
}
inline ::google::protobuf::int32 WorldBossScoreInfo::rankall() const {
  return rankall_;
}
inline void WorldBossScoreInfo::set_rankall(::google::protobuf::int32 value) {
  set_has_rankall();
  rankall_ = value;
}

// optional int32 RankOccupation = 6 [default = -1];
inline bool WorldBossScoreInfo::has_rankoccupation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldBossScoreInfo::set_has_rankoccupation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorldBossScoreInfo::clear_has_rankoccupation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorldBossScoreInfo::clear_rankoccupation() {
  rankoccupation_ = -1;
  clear_has_rankoccupation();
}
inline ::google::protobuf::int32 WorldBossScoreInfo::rankoccupation() const {
  return rankoccupation_;
}
inline void WorldBossScoreInfo::set_rankoccupation(::google::protobuf::int32 value) {
  set_has_rankoccupation();
  rankoccupation_ = value;
}

// optional int32 Score = 7 [default = -1];
inline bool WorldBossScoreInfo::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WorldBossScoreInfo::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WorldBossScoreInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WorldBossScoreInfo::clear_score() {
  score_ = -1;
  clear_has_score();
}
inline ::google::protobuf::int32 WorldBossScoreInfo::score() const {
  return score_;
}
inline void WorldBossScoreInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// WorldBossRank

// repeated .WorldBossScoreInfo ScoreInfo = 1;
inline int WorldBossRank::scoreinfo_size() const {
  return scoreinfo_.size();
}
inline void WorldBossRank::clear_scoreinfo() {
  scoreinfo_.Clear();
}
inline const ::WorldBossScoreInfo& WorldBossRank::scoreinfo(int index) const {
  return scoreinfo_.Get(index);
}
inline ::WorldBossScoreInfo* WorldBossRank::mutable_scoreinfo(int index) {
  return scoreinfo_.Mutable(index);
}
inline ::WorldBossScoreInfo* WorldBossRank::add_scoreinfo() {
  return scoreinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBossScoreInfo >&
WorldBossRank::scoreinfo() const {
  return scoreinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBossScoreInfo >*
WorldBossRank::mutable_scoreinfo() {
  return &scoreinfo_;
}

// optional int32 Occupation = 2 [default = -1];
inline bool WorldBossRank::has_occupation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossRank::set_has_occupation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossRank::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossRank::clear_occupation() {
  occupation_ = -1;
  clear_has_occupation();
}
inline ::google::protobuf::int32 WorldBossRank::occupation() const {
  return occupation_;
}
inline void WorldBossRank::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// -------------------------------------------------------------------

// PetSkill

// optional int32 SkillId = 3 [default = -1];
inline bool PetSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetSkill::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 PetSkill::skillid() const {
  return skillid_;
}
inline void PetSkill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 Lock = 4 [default = -1];
inline bool PetSkill::has_lock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetSkill::set_has_lock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetSkill::clear_has_lock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetSkill::clear_lock() {
  lock_ = -1;
  clear_has_lock();
}
inline ::google::protobuf::int32 PetSkill::lock() const {
  return lock_;
}
inline void PetSkill::set_lock(::google::protobuf::int32 value) {
  set_has_lock();
  lock_ = value;
}

// -------------------------------------------------------------------

// PvpBattleEndInfo

// optional int32 WinState = 1 [default = -1];
inline bool PvpBattleEndInfo::has_winstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpBattleEndInfo::set_has_winstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpBattleEndInfo::clear_has_winstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpBattleEndInfo::clear_winstate() {
  winstate_ = -1;
  clear_has_winstate();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::winstate() const {
  return winstate_;
}
inline void PvpBattleEndInfo::set_winstate(::google::protobuf::int32 value) {
  set_has_winstate();
  winstate_ = value;
}

// optional int32 BeforeRank = 2 [default = -1];
inline bool PvpBattleEndInfo::has_beforerank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpBattleEndInfo::set_has_beforerank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpBattleEndInfo::clear_has_beforerank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpBattleEndInfo::clear_beforerank() {
  beforerank_ = -1;
  clear_has_beforerank();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::beforerank() const {
  return beforerank_;
}
inline void PvpBattleEndInfo::set_beforerank(::google::protobuf::int32 value) {
  set_has_beforerank();
  beforerank_ = value;
}

// optional int32 BeforeStar = 3 [default = -1];
inline bool PvpBattleEndInfo::has_beforestar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpBattleEndInfo::set_has_beforestar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpBattleEndInfo::clear_has_beforestar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpBattleEndInfo::clear_beforestar() {
  beforestar_ = -1;
  clear_has_beforestar();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::beforestar() const {
  return beforestar_;
}
inline void PvpBattleEndInfo::set_beforestar(::google::protobuf::int32 value) {
  set_has_beforestar();
  beforestar_ = value;
}

// optional int32 AfterRank = 4 [default = -1];
inline bool PvpBattleEndInfo::has_afterrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpBattleEndInfo::set_has_afterrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpBattleEndInfo::clear_has_afterrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpBattleEndInfo::clear_afterrank() {
  afterrank_ = -1;
  clear_has_afterrank();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::afterrank() const {
  return afterrank_;
}
inline void PvpBattleEndInfo::set_afterrank(::google::protobuf::int32 value) {
  set_has_afterrank();
  afterrank_ = value;
}

// optional int32 AfterStar = 5 [default = -1];
inline bool PvpBattleEndInfo::has_afterstar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpBattleEndInfo::set_has_afterstar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpBattleEndInfo::clear_has_afterstar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpBattleEndInfo::clear_afterstar() {
  afterstar_ = -1;
  clear_has_afterstar();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::afterstar() const {
  return afterstar_;
}
inline void PvpBattleEndInfo::set_afterstar(::google::protobuf::int32 value) {
  set_has_afterstar();
  afterstar_ = value;
}

// repeated .PvpBattleRewardInfo RewardList = 7;
inline int PvpBattleEndInfo::rewardlist_size() const {
  return rewardlist_.size();
}
inline void PvpBattleEndInfo::clear_rewardlist() {
  rewardlist_.Clear();
}
inline const ::PvpBattleRewardInfo& PvpBattleEndInfo::rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline ::PvpBattleRewardInfo* PvpBattleEndInfo::mutable_rewardlist(int index) {
  return rewardlist_.Mutable(index);
}
inline ::PvpBattleRewardInfo* PvpBattleEndInfo::add_rewardlist() {
  return rewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >&
PvpBattleEndInfo::rewardlist() const {
  return rewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpBattleRewardInfo >*
PvpBattleEndInfo::mutable_rewardlist() {
  return &rewardlist_;
}

// repeated .PvpEndPlayer LeftPlayerList = 8;
inline int PvpBattleEndInfo::leftplayerlist_size() const {
  return leftplayerlist_.size();
}
inline void PvpBattleEndInfo::clear_leftplayerlist() {
  leftplayerlist_.Clear();
}
inline const ::PvpEndPlayer& PvpBattleEndInfo::leftplayerlist(int index) const {
  return leftplayerlist_.Get(index);
}
inline ::PvpEndPlayer* PvpBattleEndInfo::mutable_leftplayerlist(int index) {
  return leftplayerlist_.Mutable(index);
}
inline ::PvpEndPlayer* PvpBattleEndInfo::add_leftplayerlist() {
  return leftplayerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >&
PvpBattleEndInfo::leftplayerlist() const {
  return leftplayerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >*
PvpBattleEndInfo::mutable_leftplayerlist() {
  return &leftplayerlist_;
}

// repeated .PvpEndPlayer RightPlayerList = 9;
inline int PvpBattleEndInfo::rightplayerlist_size() const {
  return rightplayerlist_.size();
}
inline void PvpBattleEndInfo::clear_rightplayerlist() {
  rightplayerlist_.Clear();
}
inline const ::PvpEndPlayer& PvpBattleEndInfo::rightplayerlist(int index) const {
  return rightplayerlist_.Get(index);
}
inline ::PvpEndPlayer* PvpBattleEndInfo::mutable_rightplayerlist(int index) {
  return rightplayerlist_.Mutable(index);
}
inline ::PvpEndPlayer* PvpBattleEndInfo::add_rightplayerlist() {
  return rightplayerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >&
PvpBattleEndInfo::rightplayerlist() const {
  return rightplayerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvpEndPlayer >*
PvpBattleEndInfo::mutable_rightplayerlist() {
  return &rightplayerlist_;
}

// optional int32 BattleTime = 10 [default = -1];
inline bool PvpBattleEndInfo::has_battletime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvpBattleEndInfo::set_has_battletime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvpBattleEndInfo::clear_has_battletime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvpBattleEndInfo::clear_battletime() {
  battletime_ = -1;
  clear_has_battletime();
}
inline ::google::protobuf::int32 PvpBattleEndInfo::battletime() const {
  return battletime_;
}
inline void PvpBattleEndInfo::set_battletime(::google::protobuf::int32 value) {
  set_has_battletime();
  battletime_ = value;
}

// -------------------------------------------------------------------

// PvpBattleRewardInfo

// optional int32 ItemID = 1 [default = -1];
inline bool PvpBattleRewardInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpBattleRewardInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpBattleRewardInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpBattleRewardInfo::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 PvpBattleRewardInfo::itemid() const {
  return itemid_;
}
inline void PvpBattleRewardInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 ItemCout = 2 [default = -1];
inline bool PvpBattleRewardInfo::has_itemcout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpBattleRewardInfo::set_has_itemcout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpBattleRewardInfo::clear_has_itemcout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpBattleRewardInfo::clear_itemcout() {
  itemcout_ = -1;
  clear_has_itemcout();
}
inline ::google::protobuf::int32 PvpBattleRewardInfo::itemcout() const {
  return itemcout_;
}
inline void PvpBattleRewardInfo::set_itemcout(::google::protobuf::int32 value) {
  set_has_itemcout();
  itemcout_ = value;
}

// -------------------------------------------------------------------

// ContactData

// optional uint64 RoleId = 1 [default = 0];
inline bool ContactData::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactData::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactData::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactData::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 ContactData::roleid() const {
  return roleid_;
}
inline void ContactData::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint64 TeamId = 2 [default = 0];
inline bool ContactData::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactData::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactData::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 ContactData::teamid() const {
  return teamid_;
}
inline void ContactData::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional string Nickname = 3;
inline bool ContactData::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactData::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ContactData::nickname() const {
  return *nickname_;
}
inline void ContactData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContactData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContactData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ContactData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContactData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigId = 4 [default = -1];
inline bool ContactData::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactData::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactData::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactData::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 ContactData::configid() const {
  return configid_;
}
inline void ContactData::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional int32 Level = 5 [default = 1];
inline bool ContactData::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactData::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactData::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactData::clear_level() {
  level_ = 1;
  clear_has_level();
}
inline ::google::protobuf::int32 ContactData::level() const {
  return level_;
}
inline void ContactData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 ResourceId = 6 [default = -1];
inline bool ContactData::has_resourceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactData::set_has_resourceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactData::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactData::clear_resourceid() {
  resourceid_ = -1;
  clear_has_resourceid();
}
inline ::google::protobuf::int32 ContactData::resourceid() const {
  return resourceid_;
}
inline void ContactData::set_resourceid(::google::protobuf::int32 value) {
  set_has_resourceid();
  resourceid_ = value;
}

// optional string Alias = 8;
inline bool ContactData::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactData::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactData::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactData::clear_alias() {
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& ContactData::alias() const {
  return *alias_;
}
inline void ContactData::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void ContactData::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void ContactData::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactData::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  return alias_;
}
inline ::std::string* ContactData::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContactData::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 FamiliarPoint = 10 [default = 0];
inline bool ContactData::has_familiarpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactData::set_has_familiarpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactData::clear_has_familiarpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactData::clear_familiarpoint() {
  familiarpoint_ = 0;
  clear_has_familiarpoint();
}
inline ::google::protobuf::int32 ContactData::familiarpoint() const {
  return familiarpoint_;
}
inline void ContactData::set_familiarpoint(::google::protobuf::int32 value) {
  set_has_familiarpoint();
  familiarpoint_ = value;
}

// optional int32 OnLine = 11 [default = 0];
inline bool ContactData::has_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContactData::set_has_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContactData::clear_has_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContactData::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 ContactData::online() const {
  return online_;
}
inline void ContactData::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// optional int32 CombatValue = 12 [default = -1];
inline bool ContactData::has_combatvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContactData::set_has_combatvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContactData::clear_has_combatvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContactData::clear_combatvalue() {
  combatvalue_ = -1;
  clear_has_combatvalue();
}
inline ::google::protobuf::int32 ContactData::combatvalue() const {
  return combatvalue_;
}
inline void ContactData::set_combatvalue(::google::protobuf::int32 value) {
  set_has_combatvalue();
  combatvalue_ = value;
}

// optional int64 LastLoginTime = 13 [default = -1];
inline bool ContactData::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContactData::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContactData::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContactData::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(-1);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 ContactData::lastlogintime() const {
  return lastlogintime_;
}
inline void ContactData::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// -------------------------------------------------------------------

// ContactGroup

// optional string GroupName = 1;
inline bool ContactGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactGroup::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& ContactGroup::groupname() const {
  return *groupname_;
}
inline void ContactGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void ContactGroup::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void ContactGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContactGroup::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* ContactGroup::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContactGroup::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 GroupRoleIds = 2;
inline int ContactGroup::grouproleids_size() const {
  return grouproleids_.size();
}
inline void ContactGroup::clear_grouproleids() {
  grouproleids_.Clear();
}
inline ::google::protobuf::uint64 ContactGroup::grouproleids(int index) const {
  return grouproleids_.Get(index);
}
inline void ContactGroup::set_grouproleids(int index, ::google::protobuf::uint64 value) {
  grouproleids_.Set(index, value);
}
inline void ContactGroup::add_grouproleids(::google::protobuf::uint64 value) {
  grouproleids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ContactGroup::grouproleids() const {
  return grouproleids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ContactGroup::mutable_grouproleids() {
  return &grouproleids_;
}

// optional int32 GroupId = 3 [default = -1];
inline bool ContactGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactGroup::clear_groupid() {
  groupid_ = -1;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ContactGroup::groupid() const {
  return groupid_;
}
inline void ContactGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// DailyCount

// optional int32 Count = 2 [default = 0];
inline bool DailyCount::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyCount::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 DailyCount::count() const {
  return count_;
}
inline void DailyCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int64 Time = 3 [default = 0];
inline bool DailyCount::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyCount::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyCount::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyCount::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DailyCount::time() const {
  return time_;
}
inline void DailyCount::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 TimeId = 4 [default = 0];
inline bool DailyCount::has_timeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyCount::set_has_timeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyCount::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyCount::clear_timeid() {
  timeid_ = 0;
  clear_has_timeid();
}
inline ::google::protobuf::int32 DailyCount::timeid() const {
  return timeid_;
}
inline void DailyCount::set_timeid(::google::protobuf::int32 value) {
  set_has_timeid();
  timeid_ = value;
}

// optional int32 Flag = 5 [default = -1];
inline bool DailyCount::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyCount::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyCount::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyCount::clear_flag() {
  flag_ = -1;
  clear_has_flag();
}
inline ::google::protobuf::int32 DailyCount::flag() const {
  return flag_;
}
inline void DailyCount::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// ClimTowerInfo

// optional int64 LastTime = 1 [default = 0];
inline bool ClimTowerInfo::has_lasttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClimTowerInfo::set_has_lasttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClimTowerInfo::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClimTowerInfo::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 ClimTowerInfo::lasttime() const {
  return lasttime_;
}
inline void ClimTowerInfo::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// optional int32 CurLayer = 2 [default = 1];
inline bool ClimTowerInfo::has_curlayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClimTowerInfo::set_has_curlayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClimTowerInfo::clear_has_curlayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClimTowerInfo::clear_curlayer() {
  curlayer_ = 1;
  clear_has_curlayer();
}
inline ::google::protobuf::int32 ClimTowerInfo::curlayer() const {
  return curlayer_;
}
inline void ClimTowerInfo::set_curlayer(::google::protobuf::int32 value) {
  set_has_curlayer();
  curlayer_ = value;
}

// optional int32 MaxLayer = 3 [default = 0];
inline bool ClimTowerInfo::has_maxlayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClimTowerInfo::set_has_maxlayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClimTowerInfo::clear_has_maxlayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClimTowerInfo::clear_maxlayer() {
  maxlayer_ = 0;
  clear_has_maxlayer();
}
inline ::google::protobuf::int32 ClimTowerInfo::maxlayer() const {
  return maxlayer_;
}
inline void ClimTowerInfo::set_maxlayer(::google::protobuf::int32 value) {
  set_has_maxlayer();
  maxlayer_ = value;
}

// optional int64 ResetLayerTime = 12 [default = 0];
inline bool ClimTowerInfo::has_resetlayertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClimTowerInfo::set_has_resetlayertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClimTowerInfo::clear_has_resetlayertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClimTowerInfo::clear_resetlayertime() {
  resetlayertime_ = GOOGLE_LONGLONG(0);
  clear_has_resetlayertime();
}
inline ::google::protobuf::int64 ClimTowerInfo::resetlayertime() const {
  return resetlayertime_;
}
inline void ClimTowerInfo::set_resetlayertime(::google::protobuf::int64 value) {
  set_has_resetlayertime();
  resetlayertime_ = value;
}

// repeated .FirstVicGet FirstGet = 14;
inline int ClimTowerInfo::firstget_size() const {
  return firstget_.size();
}
inline void ClimTowerInfo::clear_firstget() {
  firstget_.Clear();
}
inline const ::FirstVicGet& ClimTowerInfo::firstget(int index) const {
  return firstget_.Get(index);
}
inline ::FirstVicGet* ClimTowerInfo::mutable_firstget(int index) {
  return firstget_.Mutable(index);
}
inline ::FirstVicGet* ClimTowerInfo::add_firstget() {
  return firstget_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FirstVicGet >&
ClimTowerInfo::firstget() const {
  return firstget_;
}
inline ::google::protobuf::RepeatedPtrField< ::FirstVicGet >*
ClimTowerInfo::mutable_firstget() {
  return &firstget_;
}

// -------------------------------------------------------------------

// ContactSetting

// optional int32 CloseApplyFriend = 1 [default = -1];
inline bool ContactSetting::has_closeapplyfriend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactSetting::set_has_closeapplyfriend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactSetting::clear_has_closeapplyfriend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactSetting::clear_closeapplyfriend() {
  closeapplyfriend_ = -1;
  clear_has_closeapplyfriend();
}
inline ::google::protobuf::int32 ContactSetting::closeapplyfriend() const {
  return closeapplyfriend_;
}
inline void ContactSetting::set_closeapplyfriend(::google::protobuf::int32 value) {
  set_has_closeapplyfriend();
  closeapplyfriend_ = value;
}

// optional int32 ClearFirend = 2 [default = -1];
inline bool ContactSetting::has_clearfirend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactSetting::set_has_clearfirend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactSetting::clear_has_clearfirend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactSetting::clear_clearfirend() {
  clearfirend_ = -1;
  clear_has_clearfirend();
}
inline ::google::protobuf::int32 ContactSetting::clearfirend() const {
  return clearfirend_;
}
inline void ContactSetting::set_clearfirend(::google::protobuf::int32 value) {
  set_has_clearfirend();
  clearfirend_ = value;
}

// -------------------------------------------------------------------

// FirstVicGet

// optional int32 Id = 1 [default = -1];
inline bool FirstVicGet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstVicGet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstVicGet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstVicGet::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 FirstVicGet::id() const {
  return id_;
}
inline void FirstVicGet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Get = 2 [default = 0];
inline bool FirstVicGet::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstVicGet::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstVicGet::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstVicGet::clear_get() {
  get_ = 0;
  clear_has_get();
}
inline ::google::protobuf::int32 FirstVicGet::get() const {
  return get_;
}
inline void FirstVicGet::set_get(::google::protobuf::int32 value) {
  set_has_get();
  get_ = value;
}

// -------------------------------------------------------------------

// ExpressionActionInfo

// optional int32 ActionId = 1 [default = -1];
inline bool ExpressionActionInfo::has_actionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpressionActionInfo::set_has_actionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpressionActionInfo::clear_has_actionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpressionActionInfo::clear_actionid() {
  actionid_ = -1;
  clear_has_actionid();
}
inline ::google::protobuf::int32 ExpressionActionInfo::actionid() const {
  return actionid_;
}
inline void ExpressionActionInfo::set_actionid(::google::protobuf::int32 value) {
  set_has_actionid();
  actionid_ = value;
}

// optional bool UnLock = 2 [default = false];
inline bool ExpressionActionInfo::has_unlock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpressionActionInfo::set_has_unlock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpressionActionInfo::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpressionActionInfo::clear_unlock() {
  unlock_ = false;
  clear_has_unlock();
}
inline bool ExpressionActionInfo::unlock() const {
  return unlock_;
}
inline void ExpressionActionInfo::set_unlock(bool value) {
  set_has_unlock();
  unlock_ = value;
}

// -------------------------------------------------------------------

// IntPair

// optional int32 Key = 1 [default = -1];
inline bool IntPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntPair::clear_key() {
  key_ = -1;
  clear_has_key();
}
inline ::google::protobuf::int32 IntPair::key() const {
  return key_;
}
inline void IntPair::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 Value = 2 [default = -1];
inline bool IntPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntPair::clear_value() {
  value_ = -1;
  clear_has_value();
}
inline ::google::protobuf::int32 IntPair::value() const {
  return value_;
}
inline void IntPair::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// AddressBook

// repeated .ContactData ContactDataList = 1;
inline int AddressBook::contactdatalist_size() const {
  return contactdatalist_.size();
}
inline void AddressBook::clear_contactdatalist() {
  contactdatalist_.Clear();
}
inline const ::ContactData& AddressBook::contactdatalist(int index) const {
  return contactdatalist_.Get(index);
}
inline ::ContactData* AddressBook::mutable_contactdatalist(int index) {
  return contactdatalist_.Mutable(index);
}
inline ::ContactData* AddressBook::add_contactdatalist() {
  return contactdatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactData >&
AddressBook::contactdatalist() const {
  return contactdatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContactData >*
AddressBook::mutable_contactdatalist() {
  return &contactdatalist_;
}

// repeated .ContactGroup ContactGroups = 2;
inline int AddressBook::contactgroups_size() const {
  return contactgroups_.size();
}
inline void AddressBook::clear_contactgroups() {
  contactgroups_.Clear();
}
inline const ::ContactGroup& AddressBook::contactgroups(int index) const {
  return contactgroups_.Get(index);
}
inline ::ContactGroup* AddressBook::mutable_contactgroups(int index) {
  return contactgroups_.Mutable(index);
}
inline ::ContactGroup* AddressBook::add_contactgroups() {
  return contactgroups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactGroup >&
AddressBook::contactgroups() const {
  return contactgroups_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContactGroup >*
AddressBook::mutable_contactgroups() {
  return &contactgroups_;
}

// optional .ContactSetting Setting = 3;
inline bool AddressBook::has_setting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddressBook::set_has_setting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddressBook::clear_has_setting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddressBook::clear_setting() {
  if (setting_ != NULL) setting_->::ContactSetting::Clear();
  clear_has_setting();
}
inline const ::ContactSetting& AddressBook::setting() const {
  return setting_ != NULL ? *setting_ : *default_instance_->setting_;
}
inline ::ContactSetting* AddressBook::mutable_setting() {
  set_has_setting();
  if (setting_ == NULL) setting_ = new ::ContactSetting;
  return setting_;
}
inline ::ContactSetting* AddressBook::release_setting() {
  clear_has_setting();
  ::ContactSetting* temp = setting_;
  setting_ = NULL;
  return temp;
}
inline void AddressBook::set_allocated_setting(::ContactSetting* setting) {
  delete setting_;
  setting_ = setting;
  if (setting) {
    set_has_setting();
  } else {
    clear_has_setting();
  }
}

// optional .ContactData MyRoleData = 4;
inline bool AddressBook::has_myroledata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddressBook::set_has_myroledata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddressBook::clear_has_myroledata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddressBook::clear_myroledata() {
  if (myroledata_ != NULL) myroledata_->::ContactData::Clear();
  clear_has_myroledata();
}
inline const ::ContactData& AddressBook::myroledata() const {
  return myroledata_ != NULL ? *myroledata_ : *default_instance_->myroledata_;
}
inline ::ContactData* AddressBook::mutable_myroledata() {
  set_has_myroledata();
  if (myroledata_ == NULL) myroledata_ = new ::ContactData;
  return myroledata_;
}
inline ::ContactData* AddressBook::release_myroledata() {
  clear_has_myroledata();
  ::ContactData* temp = myroledata_;
  myroledata_ = NULL;
  return temp;
}
inline void AddressBook::set_allocated_myroledata(::ContactData* myroledata) {
  delete myroledata_;
  myroledata_ = myroledata;
  if (myroledata) {
    set_has_myroledata();
  } else {
    clear_has_myroledata();
  }
}

// repeated int32 SortGroupId = 5;
inline int AddressBook::sortgroupid_size() const {
  return sortgroupid_.size();
}
inline void AddressBook::clear_sortgroupid() {
  sortgroupid_.Clear();
}
inline ::google::protobuf::int32 AddressBook::sortgroupid(int index) const {
  return sortgroupid_.Get(index);
}
inline void AddressBook::set_sortgroupid(int index, ::google::protobuf::int32 value) {
  sortgroupid_.Set(index, value);
}
inline void AddressBook::add_sortgroupid(::google::protobuf::int32 value) {
  sortgroupid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AddressBook::sortgroupid() const {
  return sortgroupid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AddressBook::mutable_sortgroupid() {
  return &sortgroupid_;
}

// optional .FriendGifPointList GiftPointList = 6;
inline bool AddressBook::has_giftpointlist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddressBook::set_has_giftpointlist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddressBook::clear_has_giftpointlist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddressBook::clear_giftpointlist() {
  if (giftpointlist_ != NULL) giftpointlist_->::FriendGifPointList::Clear();
  clear_has_giftpointlist();
}
inline const ::FriendGifPointList& AddressBook::giftpointlist() const {
  return giftpointlist_ != NULL ? *giftpointlist_ : *default_instance_->giftpointlist_;
}
inline ::FriendGifPointList* AddressBook::mutable_giftpointlist() {
  set_has_giftpointlist();
  if (giftpointlist_ == NULL) giftpointlist_ = new ::FriendGifPointList;
  return giftpointlist_;
}
inline ::FriendGifPointList* AddressBook::release_giftpointlist() {
  clear_has_giftpointlist();
  ::FriendGifPointList* temp = giftpointlist_;
  giftpointlist_ = NULL;
  return temp;
}
inline void AddressBook::set_allocated_giftpointlist(::FriendGifPointList* giftpointlist) {
  delete giftpointlist_;
  giftpointlist_ = giftpointlist;
  if (giftpointlist) {
    set_has_giftpointlist();
  } else {
    clear_has_giftpointlist();
  }
}

// repeated .ContactsChatMsg ChatMsgList = 7;
inline int AddressBook::chatmsglist_size() const {
  return chatmsglist_.size();
}
inline void AddressBook::clear_chatmsglist() {
  chatmsglist_.Clear();
}
inline const ::ContactsChatMsg& AddressBook::chatmsglist(int index) const {
  return chatmsglist_.Get(index);
}
inline ::ContactsChatMsg* AddressBook::mutable_chatmsglist(int index) {
  return chatmsglist_.Mutable(index);
}
inline ::ContactsChatMsg* AddressBook::add_chatmsglist() {
  return chatmsglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactsChatMsg >&
AddressBook::chatmsglist() const {
  return chatmsglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContactsChatMsg >*
AddressBook::mutable_chatmsglist() {
  return &chatmsglist_;
}

// -------------------------------------------------------------------

// AuctionItem

// optional uint64 OwnerGuid = 1 [default = 0];
inline bool AuctionItem::has_ownerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionItem::set_has_ownerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionItem::clear_has_ownerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionItem::clear_ownerguid() {
  ownerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerguid();
}
inline ::google::protobuf::uint64 AuctionItem::ownerguid() const {
  return ownerguid_;
}
inline void AuctionItem::set_ownerguid(::google::protobuf::uint64 value) {
  set_has_ownerguid();
  ownerguid_ = value;
}

// optional int32 Price = 2 [default = 1];
inline bool AuctionItem::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionItem::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionItem::clear_price() {
  price_ = 1;
  clear_has_price();
}
inline ::google::protobuf::int32 AuctionItem::price() const {
  return price_;
}
inline void AuctionItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 Currency = 3 [default = 1];
inline bool AuctionItem::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionItem::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionItem::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionItem::clear_currency() {
  currency_ = 1;
  clear_has_currency();
}
inline ::google::protobuf::int32 AuctionItem::currency() const {
  return currency_;
}
inline void AuctionItem::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional .ItemData ItemData = 4;
inline bool AuctionItem::has_itemdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionItem::set_has_itemdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionItem::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionItem::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::ItemData& AuctionItem::itemdata() const {
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::ItemData* AuctionItem::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::ItemData;
  return itemdata_;
}
inline ::ItemData* AuctionItem::release_itemdata() {
  clear_has_itemdata();
  ::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void AuctionItem::set_allocated_itemdata(::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
}

// optional int32 Status = 5 [default = 0];
inline bool AuctionItem::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionItem::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AuctionItem::status() const {
  return status_;
}
inline void AuctionItem::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 SaleTS = 6 [default = -1];
inline bool AuctionItem::has_salets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuctionItem::set_has_salets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuctionItem::clear_has_salets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuctionItem::clear_salets() {
  salets_ = -1;
  clear_has_salets();
}
inline ::google::protobuf::int32 AuctionItem::salets() const {
  return salets_;
}
inline void AuctionItem::set_salets(::google::protobuf::int32 value) {
  set_has_salets();
  salets_ = value;
}

// -------------------------------------------------------------------

// AuctionRecSimple

// optional uint64 RecGuid = 1 [default = 0];
inline bool AuctionRecSimple::has_recguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRecSimple::set_has_recguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRecSimple::clear_has_recguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRecSimple::clear_recguid() {
  recguid_ = GOOGLE_ULONGLONG(0);
  clear_has_recguid();
}
inline ::google::protobuf::uint64 AuctionRecSimple::recguid() const {
  return recguid_;
}
inline void AuctionRecSimple::set_recguid(::google::protobuf::uint64 value) {
  set_has_recguid();
  recguid_ = value;
}

// optional int32 SoldTS = 2 [default = -1];
inline bool AuctionRecSimple::has_soldts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRecSimple::set_has_soldts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRecSimple::clear_has_soldts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRecSimple::clear_soldts() {
  soldts_ = -1;
  clear_has_soldts();
}
inline ::google::protobuf::int32 AuctionRecSimple::soldts() const {
  return soldts_;
}
inline void AuctionRecSimple::set_soldts(::google::protobuf::int32 value) {
  set_has_soldts();
  soldts_ = value;
}

// optional int32 ItemId = 3 [default = -1];
inline bool AuctionRecSimple::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRecSimple::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRecSimple::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRecSimple::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionRecSimple::itemid() const {
  return itemid_;
}
inline void AuctionRecSimple::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 Count = 7 [default = -1];
inline bool AuctionRecSimple::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionRecSimple::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionRecSimple::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionRecSimple::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 AuctionRecSimple::count() const {
  return count_;
}
inline void AuctionRecSimple::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 Currency = 8 [default = -1];
inline bool AuctionRecSimple::has_currency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionRecSimple::set_has_currency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionRecSimple::clear_has_currency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionRecSimple::clear_currency() {
  currency_ = -1;
  clear_has_currency();
}
inline ::google::protobuf::int32 AuctionRecSimple::currency() const {
  return currency_;
}
inline void AuctionRecSimple::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional int32 Cost = 9 [default = -1];
inline bool AuctionRecSimple::has_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuctionRecSimple::set_has_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuctionRecSimple::clear_has_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuctionRecSimple::clear_cost() {
  cost_ = -1;
  clear_has_cost();
}
inline ::google::protobuf::int32 AuctionRecSimple::cost() const {
  return cost_;
}
inline void AuctionRecSimple::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 SoldType = 10 [default = -1];
inline bool AuctionRecSimple::has_soldtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuctionRecSimple::set_has_soldtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuctionRecSimple::clear_has_soldtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuctionRecSimple::clear_soldtype() {
  soldtype_ = -1;
  clear_has_soldtype();
}
inline ::google::protobuf::int32 AuctionRecSimple::soldtype() const {
  return soldtype_;
}
inline void AuctionRecSimple::set_soldtype(::google::protobuf::int32 value) {
  set_has_soldtype();
  soldtype_ = value;
}

// optional int32 Tax = 11 [default = -1];
inline bool AuctionRecSimple::has_tax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuctionRecSimple::set_has_tax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuctionRecSimple::clear_has_tax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuctionRecSimple::clear_tax() {
  tax_ = -1;
  clear_has_tax();
}
inline ::google::protobuf::int32 AuctionRecSimple::tax() const {
  return tax_;
}
inline void AuctionRecSimple::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
}

// optional bool IsGot = 12 [default = false];
inline bool AuctionRecSimple::has_isgot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuctionRecSimple::set_has_isgot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuctionRecSimple::clear_has_isgot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuctionRecSimple::clear_isgot() {
  isgot_ = false;
  clear_has_isgot();
}
inline bool AuctionRecSimple::isgot() const {
  return isgot_;
}
inline void AuctionRecSimple::set_isgot(bool value) {
  set_has_isgot();
  isgot_ = value;
}

// -------------------------------------------------------------------

// AuctionRecDetail

// optional uint64 BuyGuid = 1 [default = 0];
inline bool AuctionRecDetail::has_buyguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionRecDetail::set_has_buyguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionRecDetail::clear_has_buyguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionRecDetail::clear_buyguid() {
  buyguid_ = GOOGLE_ULONGLONG(0);
  clear_has_buyguid();
}
inline ::google::protobuf::uint64 AuctionRecDetail::buyguid() const {
  return buyguid_;
}
inline void AuctionRecDetail::set_buyguid(::google::protobuf::uint64 value) {
  set_has_buyguid();
  buyguid_ = value;
}

// optional int32 SoldTS = 2 [default = -1];
inline bool AuctionRecDetail::has_soldts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionRecDetail::set_has_soldts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionRecDetail::clear_has_soldts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionRecDetail::clear_soldts() {
  soldts_ = -1;
  clear_has_soldts();
}
inline ::google::protobuf::int32 AuctionRecDetail::soldts() const {
  return soldts_;
}
inline void AuctionRecDetail::set_soldts(::google::protobuf::int32 value) {
  set_has_soldts();
  soldts_ = value;
}

// optional .AuctionItem AuctionItem = 3;
inline bool AuctionRecDetail::has_auctionitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuctionRecDetail::set_has_auctionitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuctionRecDetail::clear_has_auctionitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuctionRecDetail::clear_auctionitem() {
  if (auctionitem_ != NULL) auctionitem_->::AuctionItem::Clear();
  clear_has_auctionitem();
}
inline const ::AuctionItem& AuctionRecDetail::auctionitem() const {
  return auctionitem_ != NULL ? *auctionitem_ : *default_instance_->auctionitem_;
}
inline ::AuctionItem* AuctionRecDetail::mutable_auctionitem() {
  set_has_auctionitem();
  if (auctionitem_ == NULL) auctionitem_ = new ::AuctionItem;
  return auctionitem_;
}
inline ::AuctionItem* AuctionRecDetail::release_auctionitem() {
  clear_has_auctionitem();
  ::AuctionItem* temp = auctionitem_;
  auctionitem_ = NULL;
  return temp;
}
inline void AuctionRecDetail::set_allocated_auctionitem(::AuctionItem* auctionitem) {
  delete auctionitem_;
  auctionitem_ = auctionitem;
  if (auctionitem) {
    set_has_auctionitem();
  } else {
    clear_has_auctionitem();
  }
}

// optional bool IsGot = 4 [default = false];
inline bool AuctionRecDetail::has_isgot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuctionRecDetail::set_has_isgot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuctionRecDetail::clear_has_isgot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuctionRecDetail::clear_isgot() {
  isgot_ = false;
  clear_has_isgot();
}
inline bool AuctionRecDetail::isgot() const {
  return isgot_;
}
inline void AuctionRecDetail::set_isgot(bool value) {
  set_has_isgot();
  isgot_ = value;
}

// optional int32 Cost = 6 [default = -1];
inline bool AuctionRecDetail::has_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuctionRecDetail::set_has_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuctionRecDetail::clear_has_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuctionRecDetail::clear_cost() {
  cost_ = -1;
  clear_has_cost();
}
inline ::google::protobuf::int32 AuctionRecDetail::cost() const {
  return cost_;
}
inline void AuctionRecDetail::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 Tax = 7 [default = -1];
inline bool AuctionRecDetail::has_tax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuctionRecDetail::set_has_tax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuctionRecDetail::clear_has_tax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuctionRecDetail::clear_tax() {
  tax_ = -1;
  clear_has_tax();
}
inline ::google::protobuf::int32 AuctionRecDetail::tax() const {
  return tax_;
}
inline void AuctionRecDetail::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
}

// optional int32 Currency = 8 [default = -1];
inline bool AuctionRecDetail::has_currency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuctionRecDetail::set_has_currency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuctionRecDetail::clear_has_currency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuctionRecDetail::clear_currency() {
  currency_ = -1;
  clear_has_currency();
}
inline ::google::protobuf::int32 AuctionRecDetail::currency() const {
  return currency_;
}
inline void AuctionRecDetail::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional uint64 RecGuid = 9 [default = 0];
inline bool AuctionRecDetail::has_recguid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuctionRecDetail::set_has_recguid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuctionRecDetail::clear_has_recguid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuctionRecDetail::clear_recguid() {
  recguid_ = GOOGLE_ULONGLONG(0);
  clear_has_recguid();
}
inline ::google::protobuf::uint64 AuctionRecDetail::recguid() const {
  return recguid_;
}
inline void AuctionRecDetail::set_recguid(::google::protobuf::uint64 value) {
  set_has_recguid();
  recguid_ = value;
}

// optional bool NewItemGuid = 10 [default = false];
inline bool AuctionRecDetail::has_newitemguid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuctionRecDetail::set_has_newitemguid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuctionRecDetail::clear_has_newitemguid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuctionRecDetail::clear_newitemguid() {
  newitemguid_ = false;
  clear_has_newitemguid();
}
inline bool AuctionRecDetail::newitemguid() const {
  return newitemguid_;
}
inline void AuctionRecDetail::set_newitemguid(bool value) {
  set_has_newitemguid();
  newitemguid_ = value;
}

// optional int32 SoldType = 11 [default = -1];
inline bool AuctionRecDetail::has_soldtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuctionRecDetail::set_has_soldtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuctionRecDetail::clear_has_soldtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuctionRecDetail::clear_soldtype() {
  soldtype_ = -1;
  clear_has_soldtype();
}
inline ::google::protobuf::int32 AuctionRecDetail::soldtype() const {
  return soldtype_;
}
inline void AuctionRecDetail::set_soldtype(::google::protobuf::int32 value) {
  set_has_soldtype();
  soldtype_ = value;
}

// -------------------------------------------------------------------

// MercenaryInfo

// optional int32 Id = 1 [default = -1];
inline bool MercenaryInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MercenaryInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MercenaryInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MercenaryInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 MercenaryInfo::id() const {
  return id_;
}
inline void MercenaryInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// RankInfo

// optional uint64 RoleID = 1 [default = 0];
inline bool RankInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 RankInfo::roleid() const {
  return roleid_;
}
inline void RankInfo::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string RoleName = 2;
inline bool RankInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& RankInfo::rolename() const {
  return *rolename_;
}
inline void RankInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void RankInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void RankInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* RankInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ConfigID = 3 [default = -1];
inline bool RankInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 RankInfo::configid() const {
  return configid_;
}
inline void RankInfo::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional uint64 GuildID = 4 [default = 0];
inline bool RankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 RankInfo::guildid() const {
  return guildid_;
}
inline void RankInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string GuildName = 5;
inline bool RankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& RankInfo::guildname() const {
  return *guildname_;
}
inline void RankInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void RankInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void RankInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* RankInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 PetID = 6 [default = -1];
inline bool RankInfo::has_petid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankInfo::set_has_petid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankInfo::clear_has_petid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankInfo::clear_petid() {
  petid_ = -1;
  clear_has_petid();
}
inline ::google::protobuf::int32 RankInfo::petid() const {
  return petid_;
}
inline void RankInfo::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 PetLevel = 7 [default = -1];
inline bool RankInfo::has_petlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankInfo::set_has_petlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankInfo::clear_has_petlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankInfo::clear_petlevel() {
  petlevel_ = -1;
  clear_has_petlevel();
}
inline ::google::protobuf::int32 RankInfo::petlevel() const {
  return petlevel_;
}
inline void RankInfo::set_petlevel(::google::protobuf::int32 value) {
  set_has_petlevel();
  petlevel_ = value;
}

// optional int32 TreasureCount = 8 [default = -1];
inline bool RankInfo::has_treasurecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankInfo::set_has_treasurecount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankInfo::clear_has_treasurecount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankInfo::clear_treasurecount() {
  treasurecount_ = -1;
  clear_has_treasurecount();
}
inline ::google::protobuf::int32 RankInfo::treasurecount() const {
  return treasurecount_;
}
inline void RankInfo::set_treasurecount(::google::protobuf::int32 value) {
  set_has_treasurecount();
  treasurecount_ = value;
}

// optional int32 TreasureLevel = 9 [default = -1];
inline bool RankInfo::has_treasurelevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankInfo::set_has_treasurelevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankInfo::clear_has_treasurelevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankInfo::clear_treasurelevel() {
  treasurelevel_ = -1;
  clear_has_treasurelevel();
}
inline ::google::protobuf::int32 RankInfo::treasurelevel() const {
  return treasurelevel_;
}
inline void RankInfo::set_treasurelevel(::google::protobuf::int32 value) {
  set_has_treasurelevel();
  treasurelevel_ = value;
}

// optional int32 Score = 10 [default = -1];
inline bool RankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankInfo::clear_score() {
  score_ = -1;
  clear_has_score();
}
inline ::google::protobuf::int32 RankInfo::score() const {
  return score_;
}
inline void RankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 Level = 11 [default = -1];
inline bool RankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 RankInfo::level() const {
  return level_;
}
inline void RankInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 GuildFlagID = 12 [default = -1];
inline bool RankInfo::has_guildflagid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RankInfo::set_has_guildflagid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RankInfo::clear_has_guildflagid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RankInfo::clear_guildflagid() {
  guildflagid_ = -1;
  clear_has_guildflagid();
}
inline ::google::protobuf::int32 RankInfo::guildflagid() const {
  return guildflagid_;
}
inline void RankInfo::set_guildflagid(::google::protobuf::int32 value) {
  set_has_guildflagid();
  guildflagid_ = value;
}

// optional int32 WinCount = 13 [default = -1];
inline bool RankInfo::has_wincount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RankInfo::set_has_wincount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RankInfo::clear_has_wincount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RankInfo::clear_wincount() {
  wincount_ = -1;
  clear_has_wincount();
}
inline ::google::protobuf::int32 RankInfo::wincount() const {
  return wincount_;
}
inline void RankInfo::set_wincount(::google::protobuf::int32 value) {
  set_has_wincount();
  wincount_ = value;
}

// -------------------------------------------------------------------

// AuctionItemCnt

// optional int32 ItemId = 1 [default = -1];
inline bool AuctionItemCnt::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionItemCnt::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionItemCnt::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionItemCnt::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 AuctionItemCnt::itemid() const {
  return itemid_;
}
inline void AuctionItemCnt::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 Count = 2 [default = -1];
inline bool AuctionItemCnt::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionItemCnt::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionItemCnt::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionItemCnt::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 AuctionItemCnt::count() const {
  return count_;
}
inline void AuctionItemCnt::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// RedDotInfo

// optional int32 Type = 1 [default = -1];
inline bool RedDotInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDotInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDotInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDotInfo::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 RedDotInfo::type() const {
  return type_;
}
inline void RedDotInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 IsLight = 2 [default = -1];
inline bool RedDotInfo::has_islight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedDotInfo::set_has_islight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedDotInfo::clear_has_islight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedDotInfo::clear_islight() {
  islight_ = -1;
  clear_has_islight();
}
inline ::google::protobuf::int32 RedDotInfo::islight() const {
  return islight_;
}
inline void RedDotInfo::set_islight(::google::protobuf::int32 value) {
  set_has_islight();
  islight_ = value;
}

// -------------------------------------------------------------------

// FriendGiftPoint

// optional uint64 Guid = 1 [default = 0];
inline bool FriendGiftPoint::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendGiftPoint::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendGiftPoint::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendGiftPoint::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 FriendGiftPoint::guid() const {
  return guid_;
}
inline void FriendGiftPoint::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 Point = 2 [default = 0];
inline bool FriendGiftPoint::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendGiftPoint::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendGiftPoint::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendGiftPoint::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 FriendGiftPoint::point() const {
  return point_;
}
inline void FriendGiftPoint::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// FriendGifPointList

// repeated .FriendGiftPoint SentGiftList = 1;
inline int FriendGifPointList::sentgiftlist_size() const {
  return sentgiftlist_.size();
}
inline void FriendGifPointList::clear_sentgiftlist() {
  sentgiftlist_.Clear();
}
inline const ::FriendGiftPoint& FriendGifPointList::sentgiftlist(int index) const {
  return sentgiftlist_.Get(index);
}
inline ::FriendGiftPoint* FriendGifPointList::mutable_sentgiftlist(int index) {
  return sentgiftlist_.Mutable(index);
}
inline ::FriendGiftPoint* FriendGifPointList::add_sentgiftlist() {
  return sentgiftlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
FriendGifPointList::sentgiftlist() const {
  return sentgiftlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
FriendGifPointList::mutable_sentgiftlist() {
  return &sentgiftlist_;
}

// repeated .FriendGiftPoint AcquireGiftList = 2;
inline int FriendGifPointList::acquiregiftlist_size() const {
  return acquiregiftlist_.size();
}
inline void FriendGifPointList::clear_acquiregiftlist() {
  acquiregiftlist_.Clear();
}
inline const ::FriendGiftPoint& FriendGifPointList::acquiregiftlist(int index) const {
  return acquiregiftlist_.Get(index);
}
inline ::FriendGiftPoint* FriendGifPointList::mutable_acquiregiftlist(int index) {
  return acquiregiftlist_.Mutable(index);
}
inline ::FriendGiftPoint* FriendGifPointList::add_acquiregiftlist() {
  return acquiregiftlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
FriendGifPointList::acquiregiftlist() const {
  return acquiregiftlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
FriendGifPointList::mutable_acquiregiftlist() {
  return &acquiregiftlist_;
}

// repeated .FriendGiftPoint UnAcquireGiftList = 3;
inline int FriendGifPointList::unacquiregiftlist_size() const {
  return unacquiregiftlist_.size();
}
inline void FriendGifPointList::clear_unacquiregiftlist() {
  unacquiregiftlist_.Clear();
}
inline const ::FriendGiftPoint& FriendGifPointList::unacquiregiftlist(int index) const {
  return unacquiregiftlist_.Get(index);
}
inline ::FriendGiftPoint* FriendGifPointList::mutable_unacquiregiftlist(int index) {
  return unacquiregiftlist_.Mutable(index);
}
inline ::FriendGiftPoint* FriendGifPointList::add_unacquiregiftlist() {
  return unacquiregiftlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >&
FriendGifPointList::unacquiregiftlist() const {
  return unacquiregiftlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendGiftPoint >*
FriendGifPointList::mutable_unacquiregiftlist() {
  return &unacquiregiftlist_;
}

// -------------------------------------------------------------------

// DungeonTargetContent

// optional int32 Index = 1 [default = -1];
inline bool DungeonTargetContent::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonTargetContent::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonTargetContent::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonTargetContent::clear_index() {
  index_ = -1;
  clear_has_index();
}
inline ::google::protobuf::int32 DungeonTargetContent::index() const {
  return index_;
}
inline void DungeonTargetContent::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 TemplateId = 2 [default = -1];
inline bool DungeonTargetContent::has_templateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonTargetContent::set_has_templateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonTargetContent::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonTargetContent::clear_templateid() {
  templateid_ = -1;
  clear_has_templateid();
}
inline ::google::protobuf::int32 DungeonTargetContent::templateid() const {
  return templateid_;
}
inline void DungeonTargetContent::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
}

// optional int32 MaxCount = 3 [default = -1];
inline bool DungeonTargetContent::has_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonTargetContent::set_has_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonTargetContent::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonTargetContent::clear_maxcount() {
  maxcount_ = -1;
  clear_has_maxcount();
}
inline ::google::protobuf::int32 DungeonTargetContent::maxcount() const {
  return maxcount_;
}
inline void DungeonTargetContent::set_maxcount(::google::protobuf::int32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// optional int32 CurCount = 4 [default = -1];
inline bool DungeonTargetContent::has_curcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DungeonTargetContent::set_has_curcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DungeonTargetContent::clear_has_curcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DungeonTargetContent::clear_curcount() {
  curcount_ = -1;
  clear_has_curcount();
}
inline ::google::protobuf::int32 DungeonTargetContent::curcount() const {
  return curcount_;
}
inline void DungeonTargetContent::set_curcount(::google::protobuf::int32 value) {
  set_has_curcount();
  curcount_ = value;
}

// optional int32 Description = 5 [default = -1];
inline bool DungeonTargetContent::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DungeonTargetContent::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DungeonTargetContent::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DungeonTargetContent::clear_description() {
  description_ = -1;
  clear_has_description();
}
inline ::google::protobuf::int32 DungeonTargetContent::description() const {
  return description_;
}
inline void DungeonTargetContent::set_description(::google::protobuf::int32 value) {
  set_has_description();
  description_ = value;
}

// -------------------------------------------------------------------

// DungeonTarget

// optional int32 TypeId = 1 [default = -1];
inline bool DungeonTarget::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonTarget::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonTarget::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonTarget::clear_typeid_() {
  typeid__ = -1;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 DungeonTarget::typeid_() const {
  return typeid__;
}
inline void DungeonTarget::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
}

// optional int32 Index = 2 [default = -1];
inline bool DungeonTarget::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonTarget::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonTarget::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonTarget::clear_index() {
  index_ = -1;
  clear_has_index();
}
inline ::google::protobuf::int32 DungeonTarget::index() const {
  return index_;
}
inline void DungeonTarget::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated .DungeonTargetContent TargetContent = 3;
inline int DungeonTarget::targetcontent_size() const {
  return targetcontent_.size();
}
inline void DungeonTarget::clear_targetcontent() {
  targetcontent_.Clear();
}
inline const ::DungeonTargetContent& DungeonTarget::targetcontent(int index) const {
  return targetcontent_.Get(index);
}
inline ::DungeonTargetContent* DungeonTarget::mutable_targetcontent(int index) {
  return targetcontent_.Mutable(index);
}
inline ::DungeonTargetContent* DungeonTarget::add_targetcontent() {
  return targetcontent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DungeonTargetContent >&
DungeonTarget::targetcontent() const {
  return targetcontent_;
}
inline ::google::protobuf::RepeatedPtrField< ::DungeonTargetContent >*
DungeonTarget::mutable_targetcontent() {
  return &targetcontent_;
}

// optional int32 Description = 4 [default = -1];
inline bool DungeonTarget::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DungeonTarget::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DungeonTarget::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DungeonTarget::clear_description() {
  description_ = -1;
  clear_has_description();
}
inline ::google::protobuf::int32 DungeonTarget::description() const {
  return description_;
}
inline void DungeonTarget::set_description(::google::protobuf::int32 value) {
  set_has_description();
  description_ = value;
}

// -------------------------------------------------------------------

// MailItem

// optional int32 ItemID = 1 [default = -1];
inline bool MailItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailItem::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MailItem::itemid() const {
  return itemid_;
}
inline void MailItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 ItemCount = 2 [default = -1];
inline bool MailItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailItem::clear_itemcount() {
  itemcount_ = -1;
  clear_has_itemcount();
}
inline ::google::protobuf::int32 MailItem::itemcount() const {
  return itemcount_;
}
inline void MailItem::set_itemcount(::google::protobuf::int32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// optional bool Transit = 3 [default = false];
inline bool MailItem::has_transit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailItem::set_has_transit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailItem::clear_has_transit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailItem::clear_transit() {
  transit_ = false;
  clear_has_transit();
}
inline bool MailItem::transit() const {
  return transit_;
}
inline void MailItem::set_transit(bool value) {
  set_has_transit();
  transit_ = value;
}

// -------------------------------------------------------------------

// ObjCreateInfo

// optional int32 ObjId = 1 [default = -1];
inline bool ObjCreateInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCreateInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCreateInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCreateInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 ObjCreateInfo::objid() const {
  return objid_;
}
inline void ObjCreateInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional .Vector3 Pos = 2;
inline bool ObjCreateInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjCreateInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjCreateInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjCreateInfo::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& ObjCreateInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* ObjCreateInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* ObjCreateInfo::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void ObjCreateInfo::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional float Dir = 3 [default = -1];
inline bool ObjCreateInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjCreateInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjCreateInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjCreateInfo::clear_dir() {
  dir_ = -1;
  clear_has_dir();
}
inline float ObjCreateInfo::dir() const {
  return dir_;
}
inline void ObjCreateInfo::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional int32 Status = 4 [default = -1];
inline bool ObjCreateInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjCreateInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjCreateInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjCreateInfo::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 ObjCreateInfo::status() const {
  return status_;
}
inline void ObjCreateInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional .Vector3 TargetPos = 5;
inline bool ObjCreateInfo::has_targetpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjCreateInfo::set_has_targetpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjCreateInfo::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjCreateInfo::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3::Clear();
  clear_has_targetpos();
}
inline const ::Vector3& ObjCreateInfo::targetpos() const {
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3* ObjCreateInfo::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3;
  return targetpos_;
}
inline ::Vector3* ObjCreateInfo::release_targetpos() {
  clear_has_targetpos();
  ::Vector3* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void ObjCreateInfo::set_allocated_targetpos(::Vector3* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
}

// optional bytes ObjData = 6;
inline bool ObjCreateInfo::has_objdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjCreateInfo::set_has_objdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjCreateInfo::clear_has_objdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjCreateInfo::clear_objdata() {
  if (objdata_ != &::google::protobuf::internal::kEmptyString) {
    objdata_->clear();
  }
  clear_has_objdata();
}
inline const ::std::string& ObjCreateInfo::objdata() const {
  return *objdata_;
}
inline void ObjCreateInfo::set_objdata(const ::std::string& value) {
  set_has_objdata();
  if (objdata_ == &::google::protobuf::internal::kEmptyString) {
    objdata_ = new ::std::string;
  }
  objdata_->assign(value);
}
inline void ObjCreateInfo::set_objdata(const char* value) {
  set_has_objdata();
  if (objdata_ == &::google::protobuf::internal::kEmptyString) {
    objdata_ = new ::std::string;
  }
  objdata_->assign(value);
}
inline void ObjCreateInfo::set_objdata(const void* value, size_t size) {
  set_has_objdata();
  if (objdata_ == &::google::protobuf::internal::kEmptyString) {
    objdata_ = new ::std::string;
  }
  objdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCreateInfo::mutable_objdata() {
  set_has_objdata();
  if (objdata_ == &::google::protobuf::internal::kEmptyString) {
    objdata_ = new ::std::string;
  }
  return objdata_;
}
inline ::std::string* ObjCreateInfo::release_objdata() {
  clear_has_objdata();
  if (objdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objdata_;
    objdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCreateInfo::set_allocated_objdata(::std::string* objdata) {
  if (objdata_ != &::google::protobuf::internal::kEmptyString) {
    delete objdata_;
  }
  if (objdata) {
    set_has_objdata();
    objdata_ = objdata;
  } else {
    clear_has_objdata();
    objdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ObjDeleteInfo

// optional int32 ObjId = 1 [default = -1];
inline bool ObjDeleteInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjDeleteInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjDeleteInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjDeleteInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 ObjDeleteInfo::objid() const {
  return objid_;
}
inline void ObjDeleteInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional int32 SceneId = 2 [default = -1];
inline bool ObjDeleteInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjDeleteInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjDeleteInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjDeleteInfo::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 ObjDeleteInfo::sceneid() const {
  return sceneid_;
}
inline void ObjDeleteInfo::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// MatchLimit

// optional int32 MinIntegral = 1 [default = 0];
inline bool MatchLimit::has_minintegral() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchLimit::set_has_minintegral() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchLimit::clear_has_minintegral() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchLimit::clear_minintegral() {
  minintegral_ = 0;
  clear_has_minintegral();
}
inline ::google::protobuf::int32 MatchLimit::minintegral() const {
  return minintegral_;
}
inline void MatchLimit::set_minintegral(::google::protobuf::int32 value) {
  set_has_minintegral();
  minintegral_ = value;
}

// optional int32 MinSection = 2 [default = 0];
inline bool MatchLimit::has_minsection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchLimit::set_has_minsection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchLimit::clear_has_minsection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchLimit::clear_minsection() {
  minsection_ = 0;
  clear_has_minsection();
}
inline ::google::protobuf::int32 MatchLimit::minsection() const {
  return minsection_;
}
inline void MatchLimit::set_minsection(::google::protobuf::int32 value) {
  set_has_minsection();
  minsection_ = value;
}

// optional int32 MinLevel = 3 [default = 0];
inline bool MatchLimit::has_minlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchLimit::set_has_minlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchLimit::clear_has_minlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchLimit::clear_minlevel() {
  minlevel_ = 0;
  clear_has_minlevel();
}
inline ::google::protobuf::int32 MatchLimit::minlevel() const {
  return minlevel_;
}
inline void MatchLimit::set_minlevel(::google::protobuf::int32 value) {
  set_has_minlevel();
  minlevel_ = value;
}

// optional int32 MaxLevel = 4 [default = 0];
inline bool MatchLimit::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchLimit::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchLimit::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchLimit::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 MatchLimit::maxlevel() const {
  return maxlevel_;
}
inline void MatchLimit::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
}

// optional int32 MaxIntegral = 5 [default = 0];
inline bool MatchLimit::has_maxintegral() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchLimit::set_has_maxintegral() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchLimit::clear_has_maxintegral() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchLimit::clear_maxintegral() {
  maxintegral_ = 0;
  clear_has_maxintegral();
}
inline ::google::protobuf::int32 MatchLimit::maxintegral() const {
  return maxintegral_;
}
inline void MatchLimit::set_maxintegral(::google::protobuf::int32 value) {
  set_has_maxintegral();
  maxintegral_ = value;
}

// optional int32 MaxSection = 6 [default = 0];
inline bool MatchLimit::has_maxsection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchLimit::set_has_maxsection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchLimit::clear_has_maxsection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchLimit::clear_maxsection() {
  maxsection_ = 0;
  clear_has_maxsection();
}
inline ::google::protobuf::int32 MatchLimit::maxsection() const {
  return maxsection_;
}
inline void MatchLimit::set_maxsection(::google::protobuf::int32 value) {
  set_has_maxsection();
  maxsection_ = value;
}

// -------------------------------------------------------------------

// MatchRankInfo

// optional int32 Integral = 1 [default = 0];
inline bool MatchRankInfo::has_integral() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRankInfo::set_has_integral() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRankInfo::clear_has_integral() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRankInfo::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 MatchRankInfo::integral() const {
  return integral_;
}
inline void MatchRankInfo::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// optional int32 Section = 2 [default = 0];
inline bool MatchRankInfo::has_section() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchRankInfo::set_has_section() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchRankInfo::clear_has_section() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchRankInfo::clear_section() {
  section_ = 0;
  clear_has_section();
}
inline ::google::protobuf::int32 MatchRankInfo::section() const {
  return section_;
}
inline void MatchRankInfo::set_section(::google::protobuf::int32 value) {
  set_has_section();
  section_ = value;
}

// -------------------------------------------------------------------

// MatchTargetInfo

// optional int32 DungeonConfigId = 1 [default = -1];
inline bool MatchTargetInfo::has_dungeonconfigid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchTargetInfo::set_has_dungeonconfigid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchTargetInfo::clear_has_dungeonconfigid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchTargetInfo::clear_dungeonconfigid() {
  dungeonconfigid_ = -1;
  clear_has_dungeonconfigid();
}
inline ::google::protobuf::int32 MatchTargetInfo::dungeonconfigid() const {
  return dungeonconfigid_;
}
inline void MatchTargetInfo::set_dungeonconfigid(::google::protobuf::int32 value) {
  set_has_dungeonconfigid();
  dungeonconfigid_ = value;
}

// optional int32 SceneConfigId = 2 [default = -1];
inline bool MatchTargetInfo::has_sceneconfigid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchTargetInfo::set_has_sceneconfigid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchTargetInfo::clear_has_sceneconfigid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchTargetInfo::clear_sceneconfigid() {
  sceneconfigid_ = -1;
  clear_has_sceneconfigid();
}
inline ::google::protobuf::int32 MatchTargetInfo::sceneconfigid() const {
  return sceneconfigid_;
}
inline void MatchTargetInfo::set_sceneconfigid(::google::protobuf::int32 value) {
  set_has_sceneconfigid();
  sceneconfigid_ = value;
}

// -------------------------------------------------------------------

// ActivityTime

// optional int64 Begin = 1 [default = -1];
inline bool ActivityTime::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityTime::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityTime::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityTime::clear_begin() {
  begin_ = GOOGLE_LONGLONG(-1);
  clear_has_begin();
}
inline ::google::protobuf::int64 ActivityTime::begin() const {
  return begin_;
}
inline void ActivityTime::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
}

// optional int64 End = 2 [default = -1];
inline bool ActivityTime::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityTime::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityTime::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityTime::clear_end() {
  end_ = GOOGLE_LONGLONG(-1);
  clear_has_end();
}
inline ::google::protobuf::int64 ActivityTime::end() const {
  return end_;
}
inline void ActivityTime::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
}

// optional int32 Id = 3 [default = -1];
inline bool ActivityTime::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityTime::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityTime::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityTime::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 ActivityTime::id() const {
  return id_;
}
inline void ActivityTime::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ProfessionInfo

// optional int32 Index = 1 [default = -1];
inline bool ProfessionInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionInfo::clear_index() {
  index_ = -1;
  clear_has_index();
}
inline ::google::protobuf::int32 ProfessionInfo::index() const {
  return index_;
}
inline void ProfessionInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int32 SkillList = 2;
inline int ProfessionInfo::skilllist_size() const {
  return skilllist_.size();
}
inline void ProfessionInfo::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::int32 ProfessionInfo::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void ProfessionInfo::set_skilllist(int index, ::google::protobuf::int32 value) {
  skilllist_.Set(index, value);
}
inline void ProfessionInfo::add_skilllist(::google::protobuf::int32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProfessionInfo::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProfessionInfo::mutable_skilllist() {
  return &skilllist_;
}

// -------------------------------------------------------------------

// SpecLoginReward

// optional int32 Index = 1 [default = -1];
inline bool SpecLoginReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecLoginReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecLoginReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecLoginReward::clear_index() {
  index_ = -1;
  clear_has_index();
}
inline ::google::protobuf::int32 SpecLoginReward::index() const {
  return index_;
}
inline void SpecLoginReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 Get = 2 [default = -1];
inline bool SpecLoginReward::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecLoginReward::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecLoginReward::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecLoginReward::clear_get() {
  get_ = -1;
  clear_has_get();
}
inline ::google::protobuf::int32 SpecLoginReward::get() const {
  return get_;
}
inline void SpecLoginReward::set_get(::google::protobuf::int32 value) {
  set_has_get();
  get_ = value;
}

// optional int64 SetTime = 3 [default = -1];
inline bool SpecLoginReward::has_settime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecLoginReward::set_has_settime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecLoginReward::clear_has_settime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecLoginReward::clear_settime() {
  settime_ = GOOGLE_LONGLONG(-1);
  clear_has_settime();
}
inline ::google::protobuf::int64 SpecLoginReward::settime() const {
  return settime_;
}
inline void SpecLoginReward::set_settime(::google::protobuf::int64 value) {
  set_has_settime();
  settime_ = value;
}

// -------------------------------------------------------------------

// SpecLoginInfo

// optional int32 Id = 1 [default = -1];
inline bool SpecLoginInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecLoginInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecLoginInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecLoginInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 SpecLoginInfo::id() const {
  return id_;
}
inline void SpecLoginInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 BeginTime = 2 [default = -1];
inline bool SpecLoginInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecLoginInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecLoginInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecLoginInfo::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(-1);
  clear_has_begintime();
}
inline ::google::protobuf::int64 SpecLoginInfo::begintime() const {
  return begintime_;
}
inline void SpecLoginInfo::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 EndTime = 3 [default = -1];
inline bool SpecLoginInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecLoginInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecLoginInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecLoginInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(-1);
  clear_has_endtime();
}
inline ::google::protobuf::int64 SpecLoginInfo::endtime() const {
  return endtime_;
}
inline void SpecLoginInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// repeated .SpecLoginReward RewardInfo = 4;
inline int SpecLoginInfo::rewardinfo_size() const {
  return rewardinfo_.size();
}
inline void SpecLoginInfo::clear_rewardinfo() {
  rewardinfo_.Clear();
}
inline const ::SpecLoginReward& SpecLoginInfo::rewardinfo(int index) const {
  return rewardinfo_.Get(index);
}
inline ::SpecLoginReward* SpecLoginInfo::mutable_rewardinfo(int index) {
  return rewardinfo_.Mutable(index);
}
inline ::SpecLoginReward* SpecLoginInfo::add_rewardinfo() {
  return rewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SpecLoginReward >&
SpecLoginInfo::rewardinfo() const {
  return rewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SpecLoginReward >*
SpecLoginInfo::mutable_rewardinfo() {
  return &rewardinfo_;
}

// optional int32 State = 5 [default = -1];
inline bool SpecLoginInfo::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecLoginInfo::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecLoginInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecLoginInfo::clear_state() {
  state_ = -1;
  clear_has_state();
}
inline ::google::protobuf::int32 SpecLoginInfo::state() const {
  return state_;
}
inline void SpecLoginInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ContactsChatMsg

// optional uint64 RoleId = 1 [default = 0];
inline bool ContactsChatMsg::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactsChatMsg::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactsChatMsg::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactsChatMsg::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 ContactsChatMsg::roleid() const {
  return roleid_;
}
inline void ContactsChatMsg::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional bool HasNewMsg = 2 [default = false];
inline bool ContactsChatMsg::has_hasnewmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactsChatMsg::set_has_hasnewmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactsChatMsg::clear_has_hasnewmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactsChatMsg::clear_hasnewmsg() {
  hasnewmsg_ = false;
  clear_has_hasnewmsg();
}
inline bool ContactsChatMsg::hasnewmsg() const {
  return hasnewmsg_;
}
inline void ContactsChatMsg::set_hasnewmsg(bool value) {
  set_has_hasnewmsg();
  hasnewmsg_ = value;
}

// repeated .ChatInfo CharInfoList = 3;
inline int ContactsChatMsg::charinfolist_size() const {
  return charinfolist_.size();
}
inline void ContactsChatMsg::clear_charinfolist() {
  charinfolist_.Clear();
}
inline const ::ChatInfo& ContactsChatMsg::charinfolist(int index) const {
  return charinfolist_.Get(index);
}
inline ::ChatInfo* ContactsChatMsg::mutable_charinfolist(int index) {
  return charinfolist_.Mutable(index);
}
inline ::ChatInfo* ContactsChatMsg::add_charinfolist() {
  return charinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
ContactsChatMsg::charinfolist() const {
  return charinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
ContactsChatMsg::mutable_charinfolist() {
  return &charinfolist_;
}

// -------------------------------------------------------------------

// Vector3Int

// optional int32 X = 1 [default = -1];
inline bool Vector3Int::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3Int::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3Int::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3Int::clear_x() {
  x_ = -1;
  clear_has_x();
}
inline ::google::protobuf::int32 Vector3Int::x() const {
  return x_;
}
inline void Vector3Int::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 Z = 2 [default = -1];
inline bool Vector3Int::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3Int::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3Int::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3Int::clear_z() {
  z_ = -1;
  clear_has_z();
}
inline ::google::protobuf::int32 Vector3Int::z() const {
  return z_;
}
inline void Vector3Int::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// AppendString

// optional int32 TransID = 1 [default = -1];
inline bool AppendString::has_transid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendString::set_has_transid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendString::clear_has_transid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendString::clear_transid() {
  transid_ = -1;
  clear_has_transid();
}
inline ::google::protobuf::int32 AppendString::transid() const {
  return transid_;
}
inline void AppendString::set_transid(::google::protobuf::int32 value) {
  set_has_transid();
  transid_ = value;
}

// optional int32 Key = 2 [default = -1];
inline bool AppendString::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendString::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendString::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendString::clear_key() {
  key_ = -1;
  clear_has_key();
}
inline ::google::protobuf::int32 AppendString::key() const {
  return key_;
}
inline void AppendString::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// repeated string StringList = 3;
inline int AppendString::stringlist_size() const {
  return stringlist_.size();
}
inline void AppendString::clear_stringlist() {
  stringlist_.Clear();
}
inline const ::std::string& AppendString::stringlist(int index) const {
  return stringlist_.Get(index);
}
inline ::std::string* AppendString::mutable_stringlist(int index) {
  return stringlist_.Mutable(index);
}
inline void AppendString::set_stringlist(int index, const ::std::string& value) {
  stringlist_.Mutable(index)->assign(value);
}
inline void AppendString::set_stringlist(int index, const char* value) {
  stringlist_.Mutable(index)->assign(value);
}
inline void AppendString::set_stringlist(int index, const char* value, size_t size) {
  stringlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendString::add_stringlist() {
  return stringlist_.Add();
}
inline void AppendString::add_stringlist(const ::std::string& value) {
  stringlist_.Add()->assign(value);
}
inline void AppendString::add_stringlist(const char* value) {
  stringlist_.Add()->assign(value);
}
inline void AppendString::add_stringlist(const char* value, size_t size) {
  stringlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppendString::stringlist() const {
  return stringlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppendString::mutable_stringlist() {
  return &stringlist_;
}

// -------------------------------------------------------------------

// AppendStringList

// repeated .AppendString StringAppendList = 1;
inline int AppendStringList::stringappendlist_size() const {
  return stringappendlist_.size();
}
inline void AppendStringList::clear_stringappendlist() {
  stringappendlist_.Clear();
}
inline const ::AppendString& AppendStringList::stringappendlist(int index) const {
  return stringappendlist_.Get(index);
}
inline ::AppendString* AppendStringList::mutable_stringappendlist(int index) {
  return stringappendlist_.Mutable(index);
}
inline ::AppendString* AppendStringList::add_stringappendlist() {
  return stringappendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AppendString >&
AppendStringList::stringappendlist() const {
  return stringappendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::AppendString >*
AppendStringList::mutable_stringappendlist() {
  return &stringappendlist_;
}

// -------------------------------------------------------------------

// StarBattlePlayerInfo

// optional uint64 Playerguid = 1 [default = 0];
inline bool StarBattlePlayerInfo::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarBattlePlayerInfo::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarBattlePlayerInfo::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarBattlePlayerInfo::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
}
inline ::google::protobuf::uint64 StarBattlePlayerInfo::playerguid() const {
  return playerguid_;
}
inline void StarBattlePlayerInfo::set_playerguid(::google::protobuf::uint64 value) {
  set_has_playerguid();
  playerguid_ = value;
}

// optional string Playername = 2;
inline bool StarBattlePlayerInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarBattlePlayerInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarBattlePlayerInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarBattlePlayerInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& StarBattlePlayerInfo::playername() const {
  return *playername_;
}
inline void StarBattlePlayerInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void StarBattlePlayerInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void StarBattlePlayerInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StarBattlePlayerInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* StarBattlePlayerInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StarBattlePlayerInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Level = 3 [default = -1];
inline bool StarBattlePlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarBattlePlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarBattlePlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarBattlePlayerInfo::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 StarBattlePlayerInfo::level() const {
  return level_;
}
inline void StarBattlePlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 RoleID = 5 [default = -1];
inline bool StarBattlePlayerInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StarBattlePlayerInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StarBattlePlayerInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StarBattlePlayerInfo::clear_roleid() {
  roleid_ = -1;
  clear_has_roleid();
}
inline ::google::protobuf::int32 StarBattlePlayerInfo::roleid() const {
  return roleid_;
}
inline void StarBattlePlayerInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// StarBattleInfo

// optional .StarBattleTeamInfo ServerFast = 3;
inline bool StarBattleInfo::has_serverfast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarBattleInfo::set_has_serverfast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarBattleInfo::clear_has_serverfast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarBattleInfo::clear_serverfast() {
  if (serverfast_ != NULL) serverfast_->::StarBattleTeamInfo::Clear();
  clear_has_serverfast();
}
inline const ::StarBattleTeamInfo& StarBattleInfo::serverfast() const {
  return serverfast_ != NULL ? *serverfast_ : *default_instance_->serverfast_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::mutable_serverfast() {
  set_has_serverfast();
  if (serverfast_ == NULL) serverfast_ = new ::StarBattleTeamInfo;
  return serverfast_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::release_serverfast() {
  clear_has_serverfast();
  ::StarBattleTeamInfo* temp = serverfast_;
  serverfast_ = NULL;
  return temp;
}
inline void StarBattleInfo::set_allocated_serverfast(::StarBattleTeamInfo* serverfast) {
  delete serverfast_;
  serverfast_ = serverfast;
  if (serverfast) {
    set_has_serverfast();
  } else {
    clear_has_serverfast();
  }
}

// optional .StarBattleTeamInfo ServerFirst = 4;
inline bool StarBattleInfo::has_serverfirst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarBattleInfo::set_has_serverfirst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarBattleInfo::clear_has_serverfirst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarBattleInfo::clear_serverfirst() {
  if (serverfirst_ != NULL) serverfirst_->::StarBattleTeamInfo::Clear();
  clear_has_serverfirst();
}
inline const ::StarBattleTeamInfo& StarBattleInfo::serverfirst() const {
  return serverfirst_ != NULL ? *serverfirst_ : *default_instance_->serverfirst_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::mutable_serverfirst() {
  set_has_serverfirst();
  if (serverfirst_ == NULL) serverfirst_ = new ::StarBattleTeamInfo;
  return serverfirst_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::release_serverfirst() {
  clear_has_serverfirst();
  ::StarBattleTeamInfo* temp = serverfirst_;
  serverfirst_ = NULL;
  return temp;
}
inline void StarBattleInfo::set_allocated_serverfirst(::StarBattleTeamInfo* serverfirst) {
  delete serverfirst_;
  serverfirst_ = serverfirst;
  if (serverfirst) {
    set_has_serverfirst();
  } else {
    clear_has_serverfirst();
  }
}

// optional .StarBattleTeamInfo ServerWeekFast = 5;
inline bool StarBattleInfo::has_serverweekfast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarBattleInfo::set_has_serverweekfast() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarBattleInfo::clear_has_serverweekfast() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarBattleInfo::clear_serverweekfast() {
  if (serverweekfast_ != NULL) serverweekfast_->::StarBattleTeamInfo::Clear();
  clear_has_serverweekfast();
}
inline const ::StarBattleTeamInfo& StarBattleInfo::serverweekfast() const {
  return serverweekfast_ != NULL ? *serverweekfast_ : *default_instance_->serverweekfast_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::mutable_serverweekfast() {
  set_has_serverweekfast();
  if (serverweekfast_ == NULL) serverweekfast_ = new ::StarBattleTeamInfo;
  return serverweekfast_;
}
inline ::StarBattleTeamInfo* StarBattleInfo::release_serverweekfast() {
  clear_has_serverweekfast();
  ::StarBattleTeamInfo* temp = serverweekfast_;
  serverweekfast_ = NULL;
  return temp;
}
inline void StarBattleInfo::set_allocated_serverweekfast(::StarBattleTeamInfo* serverweekfast) {
  delete serverweekfast_;
  serverweekfast_ = serverweekfast;
  if (serverweekfast) {
    set_has_serverweekfast();
  } else {
    clear_has_serverweekfast();
  }
}

// optional int32 Id = 6 [default = -1];
inline bool StarBattleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StarBattleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StarBattleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StarBattleInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 StarBattleInfo::id() const {
  return id_;
}
inline void StarBattleInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Npcid = 7 [default = -1];
inline bool StarBattleInfo::has_npcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StarBattleInfo::set_has_npcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StarBattleInfo::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StarBattleInfo::clear_npcid() {
  npcid_ = -1;
  clear_has_npcid();
}
inline ::google::protobuf::int32 StarBattleInfo::npcid() const {
  return npcid_;
}
inline void StarBattleInfo::set_npcid(::google::protobuf::int32 value) {
  set_has_npcid();
  npcid_ = value;
}

// -------------------------------------------------------------------

// StarBattleTeamInfo

// optional int64 PassTime = 1 [default = -1];
inline bool StarBattleTeamInfo::has_passtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarBattleTeamInfo::set_has_passtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarBattleTeamInfo::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarBattleTeamInfo::clear_passtime() {
  passtime_ = GOOGLE_LONGLONG(-1);
  clear_has_passtime();
}
inline ::google::protobuf::int64 StarBattleTeamInfo::passtime() const {
  return passtime_;
}
inline void StarBattleTeamInfo::set_passtime(::google::protobuf::int64 value) {
  set_has_passtime();
  passtime_ = value;
}

// optional int32 PassUseTime = 2 [default = -1];
inline bool StarBattleTeamInfo::has_passusetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarBattleTeamInfo::set_has_passusetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarBattleTeamInfo::clear_has_passusetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarBattleTeamInfo::clear_passusetime() {
  passusetime_ = -1;
  clear_has_passusetime();
}
inline ::google::protobuf::int32 StarBattleTeamInfo::passusetime() const {
  return passusetime_;
}
inline void StarBattleTeamInfo::set_passusetime(::google::protobuf::int32 value) {
  set_has_passusetime();
  passusetime_ = value;
}

// repeated .StarBattlePlayerInfo MemberInfo = 3;
inline int StarBattleTeamInfo::memberinfo_size() const {
  return memberinfo_.size();
}
inline void StarBattleTeamInfo::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::StarBattlePlayerInfo& StarBattleTeamInfo::memberinfo(int index) const {
  return memberinfo_.Get(index);
}
inline ::StarBattlePlayerInfo* StarBattleTeamInfo::mutable_memberinfo(int index) {
  return memberinfo_.Mutable(index);
}
inline ::StarBattlePlayerInfo* StarBattleTeamInfo::add_memberinfo() {
  return memberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StarBattlePlayerInfo >&
StarBattleTeamInfo::memberinfo() const {
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::StarBattlePlayerInfo >*
StarBattleTeamInfo::mutable_memberinfo() {
  return &memberinfo_;
}

// -------------------------------------------------------------------

// ObjPosInfo

// optional int32 ObjId = 1 [default = -1];
inline bool ObjPosInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjPosInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjPosInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjPosInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 ObjPosInfo::objid() const {
  return objid_;
}
inline void ObjPosInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional int32 Id = 2 [default = -1];
inline bool ObjPosInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjPosInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjPosInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjPosInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 ObjPosInfo::id() const {
  return id_;
}
inline void ObjPosInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 X = 3 [default = -1];
inline bool ObjPosInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjPosInfo::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjPosInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjPosInfo::clear_x() {
  x_ = -1;
  clear_has_x();
}
inline ::google::protobuf::int32 ObjPosInfo::x() const {
  return x_;
}
inline void ObjPosInfo::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 Z = 4 [default = -1];
inline bool ObjPosInfo::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjPosInfo::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjPosInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjPosInfo::clear_z() {
  z_ = -1;
  clear_has_z();
}
inline ::google::protobuf::int32 ObjPosInfo::z() const {
  return z_;
}
inline void ObjPosInfo::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PublicStruct_2eproto__INCLUDED
