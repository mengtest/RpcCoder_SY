// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PublicStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CharacterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatChannelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatChannelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomSkiData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomSkiData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestStepData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestStepData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestListData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBBags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBBags_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemResolveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemResolveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemAutoOperatorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemAutoOperatorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipResonanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipResonanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipResonanceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipResonanceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipWashData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipWashData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuinessSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuinessSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuinessUnlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuinessUnlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompletedQuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompletedQuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorshipPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorshipPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverMedicament_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverMedicament_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSlotStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlotStarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipBuildAtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipBuildAtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureDepotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureDepotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomQuestListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomQuestListData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpPlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpPlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpEndPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpEndPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonSituationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonSituationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureEquipedID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureEquipedID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberTinyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberTinyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildJurisdiction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildJurisdiction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildOfficeJurisdiction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildOfficeJurisdiction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildVacationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildVacationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBuildingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuildingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBuildingContributionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuildingContributionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMatchRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMatchRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRoomCamps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRoomCamps_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxQuestCompleteId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxQuestCompleteId_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestMaxQuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestMaxQuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccumulateSignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccumulateSignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthSignInInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthSignInInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberQuickUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberQuickUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpBattleEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpBattleEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpBattleRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpBattleRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClimTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClimTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstVicGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstVicGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionActionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionActionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRecSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRecSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRecDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRecDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MercenaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MercenaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionItemCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionItemCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendGiftPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendGiftPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendGifPointList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendGifPointList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonTargetContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonTargetContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjCreateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjCreateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjDeleteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjDeleteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecLoginReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecLoginReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactsChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactsChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendString_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendStringList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendStringList_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarBattlePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarBattlePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarBattleTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarBattleTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjPosInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PublicStruct_2eproto() {
  protobuf_AddDesc_PublicStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PublicStruct.proto");
  GOOGLE_CHECK(file != NULL);
  CharacterInfo_descriptor_ = file->message_type(0);
  static const int CharacterInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, treasureequiped_),
  };
  CharacterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfo_descriptor_,
      CharacterInfo::default_instance_,
      CharacterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfo));
  Vector3_descriptor_ = file->message_type(1);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  TeamMemberInfo_descriptor_ = file->message_type(2);
  static const int TeamMemberInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, followteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, buffidlist_),
  };
  TeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberInfo_descriptor_,
      TeamMemberInfo::default_instance_,
      TeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberInfo));
  TeamInfo_descriptor_ = file->message_type(3);
  static const int TeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, leaderroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teamtarget_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  OnlineUserInfo_descriptor_ = file->message_type(4);
  static const int OnlineUserInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, guildguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, playermatchdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, treasurecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, treasurelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, petconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, pvp3v3wincount_),
  };
  OnlineUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineUserInfo_descriptor_,
      OnlineUserInfo::default_instance_,
      OnlineUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineUserInfo));
  ItemData_descriptor_ = file->message_type(5);
  static const int ItemData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, overlaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, equipattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, petdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, bindrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, salecd_),
  };
  ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemData_descriptor_,
      ItemData::default_instance_,
      ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemData));
  AttrKeyValue_descriptor_ = file->message_type(6);
  static const int AttrKeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrKeyValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrKeyValue, quality_),
  };
  AttrKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrKeyValue_descriptor_,
      AttrKeyValue::default_instance_,
      AttrKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrKeyValue));
  BagData_descriptor_ = file->message_type(7);
  static const int BagData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagData, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagData, curcapacity_),
  };
  BagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagData_descriptor_,
      BagData::default_instance_,
      BagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagData));
  EquipAttr_descriptor_ = file->message_type(8);
  static const int EquipAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, baseattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, extraattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, battlescore_),
  };
  EquipAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipAttr_descriptor_,
      EquipAttr::default_instance_,
      EquipAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipAttr));
  ItemObj_descriptor_ = file->message_type(9);
  static const int ItemObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemObj, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemObj, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemObj, redpoint_),
  };
  ItemObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemObj_descriptor_,
      ItemObj::default_instance_,
      ItemObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemObj));
  ChatMsg_descriptor_ = file->message_type(10);
  static const int ChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, chat_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, chat_voice_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, chat_voice_secs_),
  };
  ChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsg_descriptor_,
      ChatMsg::default_instance_,
      ChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsg));
  ChatInfo_descriptor_ = file->message_type(11);
  static const int ChatInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, avatar_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, player_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, avatar_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, guild_guid_),
  };
  ChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInfo_descriptor_,
      ChatInfo::default_instance_,
      ChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInfo));
  ChatChannelData_descriptor_ = file->message_type(12);
  static const int ChatChannelData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatChannelData, chat_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatChannelData, chat_infos_),
  };
  ChatChannelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatChannelData_descriptor_,
      ChatChannelData::default_instance_,
      ChatChannelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatChannelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatChannelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatChannelData));
  CharacterLocation_descriptor_ = file->message_type(13);
  static const int CharacterLocation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, dungeonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, sceneconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, mirrorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, serverid_),
  };
  CharacterLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterLocation_descriptor_,
      CharacterLocation::default_instance_,
      CharacterLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterLocation));
  QuestData_descriptor_ = file->message_type(14);
  static const int QuestData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, queststeps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, questindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, questmaxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, questbegintime_),
  };
  QuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestData_descriptor_,
      QuestData::default_instance_,
      QuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestData));
  CustomSkiData_descriptor_ = file->message_type(15);
  static const int CustomSkiData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, keytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, intv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, boolv_),
  };
  CustomSkiData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomSkiData_descriptor_,
      CustomSkiData::default_instance_,
      CustomSkiData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomSkiData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomSkiData));
  QuestStepData_descriptor_ = file->message_type(16);
  static const int QuestStepData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepData, progress_),
  };
  QuestStepData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestStepData_descriptor_,
      QuestStepData::default_instance_,
      QuestStepData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestStepData));
  QuestListData_descriptor_ = file->message_type(17);
  static const int QuestListData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestListData, questslist_),
  };
  QuestListData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestListData_descriptor_,
      QuestListData::default_instance_,
      QuestListData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestListData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestListData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestListData));
  DBBags_descriptor_ = file->message_type(18);
  static const int DBBags_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBBags, bags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBBags, redpointguids_),
  };
  DBBags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBBags_descriptor_,
      DBBags::default_instance_,
      DBBags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBBags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBBags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBBags));
  ItemResolveData_descriptor_ = file->message_type(19);
  static const int ItemResolveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResolveData, qulity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResolveData, isresolve_),
  };
  ItemResolveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemResolveData_descriptor_,
      ItemResolveData::default_instance_,
      ItemResolveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResolveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResolveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemResolveData));
  ItemSimpleData_descriptor_ = file->message_type(20);
  static const int ItemSimpleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleData, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleData, count_),
  };
  ItemSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSimpleData_descriptor_,
      ItemSimpleData::default_instance_,
      ItemSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSimpleData));
  ItemAutoOperatorData_descriptor_ = file->message_type(21);
  static const int ItemAutoOperatorData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAutoOperatorData, autosaledisassemble_),
  };
  ItemAutoOperatorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemAutoOperatorData_descriptor_,
      ItemAutoOperatorData::default_instance_,
      ItemAutoOperatorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAutoOperatorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAutoOperatorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemAutoOperatorData));
  SkillContainer_descriptor_ = file->message_type(22);
  static const int SkillContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillContainer, skillobjlist_),
  };
  SkillContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillContainer_descriptor_,
      SkillContainer::default_instance_,
      SkillContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillContainer));
  SkillData_descriptor_ = file->message_type(23);
  static const int SkillData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skillcontainerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, curusecontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skillslotlevel_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  SkillObj_descriptor_ = file->message_type(24);
  static const int SkillObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillObj, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillObj, skillid_),
  };
  SkillObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillObj_descriptor_,
      SkillObj::default_instance_,
      SkillObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillObj));
  SuitInfo_descriptor_ = file->message_type(25);
  static const int SuitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuitInfo, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuitInfo, collect_num_),
  };
  SuitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuitInfo_descriptor_,
      SuitInfo::default_instance_,
      SuitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuitInfo));
  WorldBossInfo_descriptor_ = file->message_type(26);
  static const int WorldBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, hprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, lastdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, maxdamage_),
  };
  WorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossInfo_descriptor_,
      WorldBossInfo::default_instance_,
      WorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossInfo));
  WorldBossRankInfo_descriptor_ = file->message_type(27);
  static const int WorldBossRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, score_),
  };
  WorldBossRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRankInfo_descriptor_,
      WorldBossRankInfo::default_instance_,
      WorldBossRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRankInfo));
  EquipResonanceInfo_descriptor_ = file->message_type(28);
  static const int EquipResonanceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, resonanceattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, newresonanceattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, newbattlescore_),
  };
  EquipResonanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipResonanceInfo_descriptor_,
      EquipResonanceInfo::default_instance_,
      EquipResonanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipResonanceInfo));
  EquipResonanceData_descriptor_ = file->message_type(29);
  static const int EquipResonanceData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceData, resonancelist_),
  };
  EquipResonanceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipResonanceData_descriptor_,
      EquipResonanceData::default_instance_,
      EquipResonanceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipResonanceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipResonanceData));
  EquipWashInfo_descriptor_ = file->message_type(30);
  static const int EquipWashInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, equipguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, extraattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, lockedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, battlescore_),
  };
  EquipWashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashInfo_descriptor_,
      EquipWashInfo::default_instance_,
      EquipWashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashInfo));
  EquipWashData_descriptor_ = file->message_type(31);
  static const int EquipWashData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashData, equipwashinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashData, lefttimes_),
  };
  EquipWashData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipWashData_descriptor_,
      EquipWashData::default_instance_,
      EquipWashData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipWashData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipWashData));
  Resource_descriptor_ = file->message_type(32);
  static const int Resource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, todayvalue_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  BuinessSkillData_descriptor_ = file->message_type(33);
  static const int BuinessSkillData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, usecount_),
  };
  BuinessSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuinessSkillData_descriptor_,
      BuinessSkillData::default_instance_,
      BuinessSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuinessSkillData));
  BuinessUnlockInfo_descriptor_ = file->message_type(34);
  static const int BuinessUnlockInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessUnlockInfo, mutual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessUnlockInfo, endtime_),
  };
  BuinessUnlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuinessUnlockInfo_descriptor_,
      BuinessUnlockInfo::default_instance_,
      BuinessUnlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessUnlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuinessUnlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuinessUnlockInfo));
  CompletedQuestList_descriptor_ = file->message_type(35);
  static const int CompletedQuestList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletedQuestList, idlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletedQuestList, maxcompleteidlist_),
  };
  CompletedQuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompletedQuestList_descriptor_,
      CompletedQuestList::default_instance_,
      CompletedQuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletedQuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletedQuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompletedQuestList));
  EliteMonsterInfo_descriptor_ = file->message_type(36);
  static const int EliteMonsterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMonsterInfo, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMonsterInfo, commonid_),
  };
  EliteMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteMonsterInfo_descriptor_,
      EliteMonsterInfo::default_instance_,
      EliteMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteMonsterInfo));
  JewelSlot_descriptor_ = file->message_type(37);
  static const int JewelSlot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelSlot, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelSlot, unlocked_),
  };
  JewelSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelSlot_descriptor_,
      JewelSlot::default_instance_,
      JewelSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelSlot));
  JewelInfo_descriptor_ = file->message_type(38);
  static const int JewelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelInfo, equipslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelInfo, jewelslots_),
  };
  JewelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelInfo_descriptor_,
      JewelInfo::default_instance_,
      JewelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelInfo));
  EquipSlotInfo_descriptor_ = file->message_type(39);
  static const int EquipSlotInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, enhance_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, enhance_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, slot_type_),
  };
  EquipSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlotInfo_descriptor_,
      EquipSlotInfo::default_instance_,
      EquipSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlotInfo));
  WorshipPlayerData_descriptor_ = file->message_type(40);
  static const int WorshipPlayerData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, rank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, worship_cout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, rank_),
  };
  WorshipPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorshipPlayerData_descriptor_,
      WorshipPlayerData::default_instance_,
      WorshipPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorshipPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorshipPlayerData));
  RecoverMedicament_descriptor_ = file->message_type(41);
  static const int RecoverMedicament_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverMedicament, hpmedicamentlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverMedicament, autohpmedicament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverMedicament, hppercentage_),
  };
  RecoverMedicament_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverMedicament_descriptor_,
      RecoverMedicament::default_instance_,
      RecoverMedicament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverMedicament, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverMedicament, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverMedicament));
  MailInfo_descriptor_ = file->message_type(42);
  static const int MailInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, isget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, salutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, receiver_id_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  EquipSlotStarInfo_descriptor_ = file->message_type(43);
  static const int EquipSlotStarInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, rankup_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, nextbattlescore_),
  };
  EquipSlotStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlotStarInfo_descriptor_,
      EquipSlotStarInfo::default_instance_,
      EquipSlotStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlotStarInfo));
  DropItem_descriptor_ = file->message_type(44);
  static const int DropItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, transit_),
  };
  DropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropItem_descriptor_,
      DropItem::default_instance_,
      DropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropItem));
  PetData_descriptor_ = file->message_type(45);
  static const int PetData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, talentscore_),
  };
  PetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetData_descriptor_,
      PetData::default_instance_,
      PetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetData));
  EquipBuildAtf_descriptor_ = file->message_type(46);
  static const int EquipBuildAtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBuildAtf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBuildAtf, atf_value_),
  };
  EquipBuildAtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipBuildAtf_descriptor_,
      EquipBuildAtf::default_instance_,
      EquipBuildAtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBuildAtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBuildAtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipBuildAtf));
  TreasureData_descriptor_ = file->message_type(47);
  static const int TreasureData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureData, extra_info_),
  };
  TreasureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureData_descriptor_,
      TreasureData::default_instance_,
      TreasureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureData));
  TreasureExtraInfo_descriptor_ = file->message_type(48);
  static const int TreasureExtraInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, expier_time_),
  };
  TreasureExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureExtraInfo_descriptor_,
      TreasureExtraInfo::default_instance_,
      TreasureExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureExtraInfo));
  TreasureDepotData_descriptor_ = file->message_type(49);
  static const int TreasureDepotData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureDepotData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureDepotData, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureDepotData, treasure_data_),
  };
  TreasureDepotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureDepotData_descriptor_,
      TreasureDepotData::default_instance_,
      TreasureDepotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureDepotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureDepotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureDepotData));
  ShopItem_descriptor_ = file->message_type(50);
  static const int ShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, shopitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, totalbuycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, buycount_),
  };
  ShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItem_descriptor_,
      ShopItem::default_instance_,
      ShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItem));
  RandomQuestData_descriptor_ = file->message_type(51);
  static const int RandomQuestData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, questtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, questidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, dayporgress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, lastcompletetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, randomlistquestid_),
  };
  RandomQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomQuestData_descriptor_,
      RandomQuestData::default_instance_,
      RandomQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomQuestData));
  RandomQuestListData_descriptor_ = file->message_type(52);
  static const int RandomQuestListData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestListData, questlist_),
  };
  RandomQuestListData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomQuestListData_descriptor_,
      RandomQuestListData::default_instance_,
      RandomQuestListData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestListData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomQuestListData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomQuestListData));
  PvpBattleInfo_descriptor_ = file->message_type(53);
  static const int PvpBattleInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, losecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, drawcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, continuitywincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, elo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, battlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, rewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, historyrank_),
  };
  PvpBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpBattleInfo_descriptor_,
      PvpBattleInfo::default_instance_,
      PvpBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpBattleInfo));
  PvpPlayerInfo_descriptor_ = file->message_type(54);
  static const int PvpPlayerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, pvpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, configid_),
  };
  PvpPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpPlayerInfo_descriptor_,
      PvpPlayerInfo::default_instance_,
      PvpPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpPlayerInfo));
  PvpPlayerState_descriptor_ = file->message_type(55);
  static const int PvpPlayerState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerState, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerState, state_),
  };
  PvpPlayerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpPlayerState_descriptor_,
      PvpPlayerState::default_instance_,
      PvpPlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPlayerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpPlayerState));
  PvpEndPlayer_descriptor_ = file->message_type(56);
  static const int PvpEndPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, deadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, livecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, damagecount_),
  };
  PvpEndPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpEndPlayer_descriptor_,
      PvpEndPlayer::default_instance_,
      PvpEndPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpEndPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpEndPlayer));
  DailyQuest_descriptor_ = file->message_type(57);
  static const int DailyQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, mainquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, ativityquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, rewardtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, activityid_),
  };
  DailyQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuest_descriptor_,
      DailyQuest::default_instance_,
      DailyQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuest));
  DailyQuestList_descriptor_ = file->message_type(58);
  static const int DailyQuestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestList, dailyquestlist_),
  };
  DailyQuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuestList_descriptor_,
      DailyQuestList::default_instance_,
      DailyQuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuestList));
  DungeonSituationData_descriptor_ = file->message_type(59);
  static const int DungeonSituationData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSituationData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSituationData, playerdata_),
  };
  DungeonSituationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonSituationData_descriptor_,
      DungeonSituationData::default_instance_,
      DungeonSituationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSituationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSituationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonSituationData));
  DungeonData_descriptor_ = file->message_type(60);
  static const int DungeonData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, durationmenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, conclusiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, preparetime_),
  };
  DungeonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonData_descriptor_,
      DungeonData::default_instance_,
      DungeonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonData));
  TeamTarget_descriptor_ = file->message_type(61);
  static const int TeamTarget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, targettype_),
  };
  TeamTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTarget_descriptor_,
      TeamTarget::default_instance_,
      TeamTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTarget));
  BuffInfo_descriptor_ = file->message_type(62);
  static const int BuffInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, casterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, bufid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, bufflv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, layercount_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  MatchInfo_descriptor_ = file->message_type(63);
  static const int MatchInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, section_),
  };
  MatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchInfo_descriptor_,
      MatchInfo::default_instance_,
      MatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchInfo));
  TreasureEquipedID_descriptor_ = file->message_type(64);
  static const int TreasureEquipedID_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasurehair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasurehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasurebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasureweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasurewing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, treasureriding_),
  };
  TreasureEquipedID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureEquipedID_descriptor_,
      TreasureEquipedID::default_instance_,
      TreasureEquipedID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureEquipedID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureEquipedID));
  ServerInfo_descriptor_ = file->message_type(65);
  static const int ServerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, promo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  GuildInfo_descriptor_ = file->message_type(66);
  static const int GuildInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, membercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildprosper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildcreed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, news_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, isautojoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildoldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildcreater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, selfoffice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, isvacation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, haveapplied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, maintaincost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildwelfare_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  GuildFlag_descriptor_ = file->message_type(67);
  static const int GuildFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFlag, flagequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFlag, flagunlocked_),
  };
  GuildFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFlag_descriptor_,
      GuildFlag::default_instance_,
      GuildFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFlag));
  GuildNews_descriptor_ = file->message_type(68);
  static const int GuildNews_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNews, optiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNews, eventsparm_),
  };
  GuildNews_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildNews_descriptor_,
      GuildNews::default_instance_,
      GuildNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNews, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNews, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildNews));
  GuildMemberTinyInfo_descriptor_ = file->message_type(69);
  static const int GuildMemberTinyInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, occupition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, fightscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, totalcontribute_),
  };
  GuildMemberTinyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberTinyInfo_descriptor_,
      GuildMemberTinyInfo::default_instance_,
      GuildMemberTinyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTinyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberTinyInfo));
  GuildMemberInfo_descriptor_ = file->message_type(70);
  static const int GuildMemberInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, officetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, weekcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, historycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, totalcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, weekquestcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, weekcampcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, intime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, guildtinyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, leavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, isvacation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, isforbiddenchat_),
  };
  GuildMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberInfo_descriptor_,
      GuildMemberInfo::default_instance_,
      GuildMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberInfo));
  GuildJurisdiction_descriptor_ = file->message_type(71);
  static const int GuildJurisdiction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJurisdiction, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJurisdiction, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJurisdiction, iscanset_),
  };
  GuildJurisdiction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildJurisdiction_descriptor_,
      GuildJurisdiction::default_instance_,
      GuildJurisdiction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJurisdiction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildJurisdiction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildJurisdiction));
  GuildOfficeJurisdiction_descriptor_ = file->message_type(72);
  static const int GuildOfficeJurisdiction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildOfficeJurisdiction, officetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildOfficeJurisdiction, jurisdictionlist_),
  };
  GuildOfficeJurisdiction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildOfficeJurisdiction_descriptor_,
      GuildOfficeJurisdiction::default_instance_,
      GuildOfficeJurisdiction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildOfficeJurisdiction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildOfficeJurisdiction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildOfficeJurisdiction));
  GuildVacationInfo_descriptor_ = file->message_type(73);
  static const int GuildVacationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, lefttime_),
  };
  GuildVacationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildVacationInfo_descriptor_,
      GuildVacationInfo::default_instance_,
      GuildVacationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildVacationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildVacationInfo));
  GuildBuildingInfo_descriptor_ = file->message_type(74);
  static const int GuildBuildingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingInfo, buildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingInfo, buildinglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingInfo, lefttime_),
  };
  GuildBuildingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuildingInfo_descriptor_,
      GuildBuildingInfo::default_instance_,
      GuildBuildingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuildingInfo));
  GuildBuildingContributionInfo_descriptor_ = file->message_type(75);
  static const int GuildBuildingContributionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, speedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, date_),
  };
  GuildBuildingContributionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuildingContributionInfo_descriptor_,
      GuildBuildingContributionInfo::default_instance_,
      GuildBuildingContributionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildingContributionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuildingContributionInfo));
  GuildEvent_descriptor_ = file->message_type(76);
  static const int GuildEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, optiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, eventsparm_),
  };
  GuildEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildEvent_descriptor_,
      GuildEvent::default_instance_,
      GuildEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildEvent));
  PBMatchRoom_descriptor_ = file->message_type(77);
  static const int PBMatchRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, camps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, matchtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, matchtype_),
  };
  PBMatchRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMatchRoom_descriptor_,
      PBMatchRoom::default_instance_,
      PBMatchRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMatchRoom));
  MatchRoomCamps_descriptor_ = file->message_type(78);
  static const int MatchRoomCamps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRoomCamps, players_),
  };
  MatchRoomCamps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRoomCamps_descriptor_,
      MatchRoomCamps::default_instance_,
      MatchRoomCamps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRoomCamps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRoomCamps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRoomCamps));
  PlayerMatchData_descriptor_ = file->message_type(79);
  static const int PlayerMatchData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMatchData, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMatchData, elo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMatchData, auto__),
  };
  PlayerMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMatchData_descriptor_,
      PlayerMatchData::default_instance_,
      PlayerMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMatchData));
  MaxQuestCompleteId_descriptor_ = file->message_type(80);
  static const int MaxQuestCompleteId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxQuestCompleteId, questtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxQuestCompleteId, maxconfigid_),
  };
  MaxQuestCompleteId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxQuestCompleteId_descriptor_,
      MaxQuestCompleteId::default_instance_,
      MaxQuestCompleteId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxQuestCompleteId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxQuestCompleteId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxQuestCompleteId));
  QuestMaxQuestList_descriptor_ = file->message_type(81);
  static const int QuestMaxQuestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestMaxQuestList, questlist_),
  };
  QuestMaxQuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestMaxQuestList_descriptor_,
      QuestMaxQuestList::default_instance_,
      QuestMaxQuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestMaxQuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestMaxQuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestMaxQuestList));
  LineStats_descriptor_ = file->message_type(82);
  static const int LineStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineStats, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineStats, linestats_),
  };
  LineStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineStats_descriptor_,
      LineStats::default_instance_,
      LineStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineStats));
  SceneStats_descriptor_ = file->message_type(83);
  static const int SceneStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStats, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStats, sceneid_),
  };
  SceneStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneStats_descriptor_,
      SceneStats::default_instance_,
      SceneStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneStats));
  DungeonBossInfo_descriptor_ = file->message_type(84);
  static const int DungeonBossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, maxnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, refreshtype_),
  };
  DungeonBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonBossInfo_descriptor_,
      DungeonBossInfo::default_instance_,
      DungeonBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonBossInfo));
  SkillPosInfo_descriptor_ = file->message_type(85);
  static const int SkillPosInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, curlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, nextlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, curlevelattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, nextlevelattr_),
  };
  SkillPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPosInfo_descriptor_,
      SkillPosInfo::default_instance_,
      SkillPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPosInfo));
  WelfareReward_descriptor_ = file->message_type(86);
  static const int WelfareReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareReward, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareReward, rewardnum_),
  };
  WelfareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareReward_descriptor_,
      WelfareReward::default_instance_,
      WelfareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareReward));
  AccumulateSignInfo_descriptor_ = file->message_type(87);
  static const int AccumulateSignInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateSignInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateSignInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateSignInfo, rewardinfo_),
  };
  AccumulateSignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccumulateSignInfo_descriptor_,
      AccumulateSignInfo::default_instance_,
      AccumulateSignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateSignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateSignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccumulateSignInfo));
  OnlineInfo_descriptor_ = file->message_type(88);
  static const int OnlineInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, rewardinfo_),
  };
  OnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineInfo_descriptor_,
      OnlineInfo::default_instance_,
      OnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineInfo));
  LevelInfo_descriptor_ = file->message_type(89);
  static const int LevelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, rewardinfo_),
  };
  LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelInfo_descriptor_,
      LevelInfo::default_instance_,
      LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelInfo));
  MonthSignInInfo_descriptor_ = file->message_type(90);
  static const int MonthSignInInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignInInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignInInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignInInfo, rewardinfo_),
  };
  MonthSignInInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthSignInInfo_descriptor_,
      MonthSignInInfo::default_instance_,
      MonthSignInInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignInInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignInInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthSignInInfo));
  TeamMemberQuickUpdateInfo_descriptor_ = file->message_type(91);
  static const int TeamMemberQuickUpdateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberQuickUpdateInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberQuickUpdateInfo, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberQuickUpdateInfo, maxhp_),
  };
  TeamMemberQuickUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberQuickUpdateInfo_descriptor_,
      TeamMemberQuickUpdateInfo::default_instance_,
      TeamMemberQuickUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberQuickUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberQuickUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberQuickUpdateInfo));
  WorldBossScoreInfo_descriptor_ = file->message_type(92);
  static const int WorldBossScoreInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, rankall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, rankoccupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, score_),
  };
  WorldBossScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossScoreInfo_descriptor_,
      WorldBossScoreInfo::default_instance_,
      WorldBossScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossScoreInfo));
  WorldBossRank_descriptor_ = file->message_type(93);
  static const int WorldBossRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, scoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, occupation_),
  };
  WorldBossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRank_descriptor_,
      WorldBossRank::default_instance_,
      WorldBossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRank));
  PetSkill_descriptor_ = file->message_type(94);
  static const int PetSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, lock_),
  };
  PetSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkill_descriptor_,
      PetSkill::default_instance_,
      PetSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkill));
  PvpBattleEndInfo_descriptor_ = file->message_type(95);
  static const int PvpBattleEndInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, winstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, beforerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, beforestar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, afterrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, afterstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, rewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, leftplayerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, rightplayerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, battletime_),
  };
  PvpBattleEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpBattleEndInfo_descriptor_,
      PvpBattleEndInfo::default_instance_,
      PvpBattleEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpBattleEndInfo));
  PvpBattleRewardInfo_descriptor_ = file->message_type(96);
  static const int PvpBattleRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleRewardInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleRewardInfo, itemcout_),
  };
  PvpBattleRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpBattleRewardInfo_descriptor_,
      PvpBattleRewardInfo::default_instance_,
      PvpBattleRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpBattleRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpBattleRewardInfo));
  ContactData_descriptor_ = file->message_type(97);
  static const int ContactData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, familiarpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, lastlogintime_),
  };
  ContactData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactData_descriptor_,
      ContactData::default_instance_,
      ContactData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactData));
  ContactGroup_descriptor_ = file->message_type(98);
  static const int ContactGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactGroup, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactGroup, grouproleids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactGroup, groupid_),
  };
  ContactGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactGroup_descriptor_,
      ContactGroup::default_instance_,
      ContactGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactGroup));
  DailyCount_descriptor_ = file->message_type(99);
  static const int DailyCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, flag_),
  };
  DailyCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyCount_descriptor_,
      DailyCount::default_instance_,
      DailyCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyCount));
  ClimTowerInfo_descriptor_ = file->message_type(100);
  static const int ClimTowerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, curlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, resetlayertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, firstget_),
  };
  ClimTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClimTowerInfo_descriptor_,
      ClimTowerInfo::default_instance_,
      ClimTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClimTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClimTowerInfo));
  ContactSetting_descriptor_ = file->message_type(101);
  static const int ContactSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSetting, closeapplyfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSetting, clearfirend_),
  };
  ContactSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactSetting_descriptor_,
      ContactSetting::default_instance_,
      ContactSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactSetting));
  FirstVicGet_descriptor_ = file->message_type(102);
  static const int FirstVicGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstVicGet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstVicGet, get_),
  };
  FirstVicGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstVicGet_descriptor_,
      FirstVicGet::default_instance_,
      FirstVicGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstVicGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstVicGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstVicGet));
  ExpressionActionInfo_descriptor_ = file->message_type(103);
  static const int ExpressionActionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionInfo, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionInfo, unlock_),
  };
  ExpressionActionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionActionInfo_descriptor_,
      ExpressionActionInfo::default_instance_,
      ExpressionActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionActionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionActionInfo));
  IntPair_descriptor_ = file->message_type(104);
  static const int IntPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPair, value_),
  };
  IntPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntPair_descriptor_,
      IntPair::default_instance_,
      IntPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntPair));
  AddressBook_descriptor_ = file->message_type(105);
  static const int AddressBook_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, contactdatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, contactgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, myroledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, sortgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, giftpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, chatmsglist_),
  };
  AddressBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressBook_descriptor_,
      AddressBook::default_instance_,
      AddressBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressBook));
  AuctionItem_descriptor_ = file->message_type(106);
  static const int AuctionItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, ownerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, salets_),
  };
  AuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionItem_descriptor_,
      AuctionItem::default_instance_,
      AuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionItem));
  AuctionRecSimple_descriptor_ = file->message_type(107);
  static const int AuctionRecSimple_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, recguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, soldts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, soldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, isgot_),
  };
  AuctionRecSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRecSimple_descriptor_,
      AuctionRecSimple::default_instance_,
      AuctionRecSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRecSimple));
  AuctionRecDetail_descriptor_ = file->message_type(108);
  static const int AuctionRecDetail_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, buyguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, soldts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, auctionitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, isgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, recguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, newitemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, soldtype_),
  };
  AuctionRecDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRecDetail_descriptor_,
      AuctionRecDetail::default_instance_,
      AuctionRecDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRecDetail));
  MercenaryInfo_descriptor_ = file->message_type(109);
  static const int MercenaryInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryInfo, id_),
  };
  MercenaryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MercenaryInfo_descriptor_,
      MercenaryInfo::default_instance_,
      MercenaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MercenaryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MercenaryInfo));
  RankInfo_descriptor_ = file->message_type(110);
  static const int RankInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, treasurecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, treasurelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, guildflagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, wincount_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  AuctionItemCnt_descriptor_ = file->message_type(111);
  static const int AuctionItemCnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemCnt, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemCnt, count_),
  };
  AuctionItemCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionItemCnt_descriptor_,
      AuctionItemCnt::default_instance_,
      AuctionItemCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItemCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionItemCnt));
  RedDotInfo_descriptor_ = file->message_type(112);
  static const int RedDotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotInfo, islight_),
  };
  RedDotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDotInfo_descriptor_,
      RedDotInfo::default_instance_,
      RedDotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDotInfo));
  FriendGiftPoint_descriptor_ = file->message_type(113);
  static const int FriendGiftPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGiftPoint, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGiftPoint, point_),
  };
  FriendGiftPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendGiftPoint_descriptor_,
      FriendGiftPoint::default_instance_,
      FriendGiftPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGiftPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGiftPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendGiftPoint));
  FriendGifPointList_descriptor_ = file->message_type(114);
  static const int FriendGifPointList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGifPointList, sentgiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGifPointList, acquiregiftlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGifPointList, unacquiregiftlist_),
  };
  FriendGifPointList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendGifPointList_descriptor_,
      FriendGifPointList::default_instance_,
      FriendGifPointList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGifPointList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendGifPointList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendGifPointList));
  DungeonTargetContent_descriptor_ = file->message_type(115);
  static const int DungeonTargetContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, curcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, description_),
  };
  DungeonTargetContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonTargetContent_descriptor_,
      DungeonTargetContent::default_instance_,
      DungeonTargetContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTargetContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonTargetContent));
  DungeonTarget_descriptor_ = file->message_type(116);
  static const int DungeonTarget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, targetcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, description_),
  };
  DungeonTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonTarget_descriptor_,
      DungeonTarget::default_instance_,
      DungeonTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonTarget));
  MailItem_descriptor_ = file->message_type(117);
  static const int MailItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, transit_),
  };
  MailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItem_descriptor_,
      MailItem::default_instance_,
      MailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItem));
  ObjCreateInfo_descriptor_ = file->message_type(118);
  static const int ObjCreateInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, objdata_),
  };
  ObjCreateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjCreateInfo_descriptor_,
      ObjCreateInfo::default_instance_,
      ObjCreateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjCreateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjCreateInfo));
  ObjDeleteInfo_descriptor_ = file->message_type(119);
  static const int ObjDeleteInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjDeleteInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjDeleteInfo, sceneid_),
  };
  ObjDeleteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjDeleteInfo_descriptor_,
      ObjDeleteInfo::default_instance_,
      ObjDeleteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjDeleteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjDeleteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjDeleteInfo));
  MatchLimit_descriptor_ = file->message_type(120);
  static const int MatchLimit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, minintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, minsection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, maxintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, maxsection_),
  };
  MatchLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchLimit_descriptor_,
      MatchLimit::default_instance_,
      MatchLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchLimit));
  MatchRankInfo_descriptor_ = file->message_type(121);
  static const int MatchRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankInfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankInfo, section_),
  };
  MatchRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRankInfo_descriptor_,
      MatchRankInfo::default_instance_,
      MatchRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRankInfo));
  MatchTargetInfo_descriptor_ = file->message_type(122);
  static const int MatchTargetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTargetInfo, dungeonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTargetInfo, sceneconfigid_),
  };
  MatchTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchTargetInfo_descriptor_,
      MatchTargetInfo::default_instance_,
      MatchTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchTargetInfo));
  ActivityTime_descriptor_ = file->message_type(123);
  static const int ActivityTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTime, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTime, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTime, id_),
  };
  ActivityTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityTime_descriptor_,
      ActivityTime::default_instance_,
      ActivityTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityTime));
  ProfessionInfo_descriptor_ = file->message_type(124);
  static const int ProfessionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, skilllist_),
  };
  ProfessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionInfo_descriptor_,
      ProfessionInfo::default_instance_,
      ProfessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionInfo));
  SpecLoginReward_descriptor_ = file->message_type(125);
  static const int SpecLoginReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginReward, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginReward, settime_),
  };
  SpecLoginReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecLoginReward_descriptor_,
      SpecLoginReward::default_instance_,
      SpecLoginReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecLoginReward));
  SpecLoginInfo_descriptor_ = file->message_type(126);
  static const int SpecLoginInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, state_),
  };
  SpecLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecLoginInfo_descriptor_,
      SpecLoginInfo::default_instance_,
      SpecLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecLoginInfo));
  ContactsChatMsg_descriptor_ = file->message_type(127);
  static const int ContactsChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsChatMsg, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsChatMsg, hasnewmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsChatMsg, charinfolist_),
  };
  ContactsChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactsChatMsg_descriptor_,
      ContactsChatMsg::default_instance_,
      ContactsChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactsChatMsg));
  Vector3Int_descriptor_ = file->message_type(128);
  static const int Vector3Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, z_),
  };
  Vector3Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3Int_descriptor_,
      Vector3Int::default_instance_,
      Vector3Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3Int));
  AppendString_descriptor_ = file->message_type(129);
  static const int AppendString_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendString, transid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendString, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendString, stringlist_),
  };
  AppendString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendString_descriptor_,
      AppendString::default_instance_,
      AppendString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendString));
  AppendStringList_descriptor_ = file->message_type(130);
  static const int AppendStringList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendStringList, stringappendlist_),
  };
  AppendStringList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendStringList_descriptor_,
      AppendStringList::default_instance_,
      AppendStringList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendStringList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendStringList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendStringList));
  StarBattlePlayerInfo_descriptor_ = file->message_type(131);
  static const int StarBattlePlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, roleid_),
  };
  StarBattlePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarBattlePlayerInfo_descriptor_,
      StarBattlePlayerInfo::default_instance_,
      StarBattlePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattlePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarBattlePlayerInfo));
  StarBattleInfo_descriptor_ = file->message_type(132);
  static const int StarBattleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, serverfast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, serverfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, serverweekfast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, npcid_),
  };
  StarBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarBattleInfo_descriptor_,
      StarBattleInfo::default_instance_,
      StarBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarBattleInfo));
  StarBattleTeamInfo_descriptor_ = file->message_type(133);
  static const int StarBattleTeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleTeamInfo, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleTeamInfo, passusetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleTeamInfo, memberinfo_),
  };
  StarBattleTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarBattleTeamInfo_descriptor_,
      StarBattleTeamInfo::default_instance_,
      StarBattleTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarBattleTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarBattleTeamInfo));
  ObjPosInfo_descriptor_ = file->message_type(134);
  static const int ObjPosInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, z_),
  };
  ObjPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjPosInfo_descriptor_,
      ObjPosInfo::default_instance_,
      ObjPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjPosInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PublicStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfo_descriptor_, &CharacterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberInfo_descriptor_, &TeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineUserInfo_descriptor_, &OnlineUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemData_descriptor_, &ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrKeyValue_descriptor_, &AttrKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagData_descriptor_, &BagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipAttr_descriptor_, &EquipAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemObj_descriptor_, &ItemObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsg_descriptor_, &ChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInfo_descriptor_, &ChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatChannelData_descriptor_, &ChatChannelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterLocation_descriptor_, &CharacterLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestData_descriptor_, &QuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomSkiData_descriptor_, &CustomSkiData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestStepData_descriptor_, &QuestStepData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestListData_descriptor_, &QuestListData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBBags_descriptor_, &DBBags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemResolveData_descriptor_, &ItemResolveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSimpleData_descriptor_, &ItemSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemAutoOperatorData_descriptor_, &ItemAutoOperatorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillContainer_descriptor_, &SkillContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillObj_descriptor_, &SkillObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuitInfo_descriptor_, &SuitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossInfo_descriptor_, &WorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRankInfo_descriptor_, &WorldBossRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipResonanceInfo_descriptor_, &EquipResonanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipResonanceData_descriptor_, &EquipResonanceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashInfo_descriptor_, &EquipWashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipWashData_descriptor_, &EquipWashData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuinessSkillData_descriptor_, &BuinessSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuinessUnlockInfo_descriptor_, &BuinessUnlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompletedQuestList_descriptor_, &CompletedQuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteMonsterInfo_descriptor_, &EliteMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelSlot_descriptor_, &JewelSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelInfo_descriptor_, &JewelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlotInfo_descriptor_, &EquipSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorshipPlayerData_descriptor_, &WorshipPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverMedicament_descriptor_, &RecoverMedicament::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlotStarInfo_descriptor_, &EquipSlotStarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropItem_descriptor_, &DropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetData_descriptor_, &PetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipBuildAtf_descriptor_, &EquipBuildAtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureData_descriptor_, &TreasureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureExtraInfo_descriptor_, &TreasureExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureDepotData_descriptor_, &TreasureDepotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItem_descriptor_, &ShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomQuestData_descriptor_, &RandomQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomQuestListData_descriptor_, &RandomQuestListData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpBattleInfo_descriptor_, &PvpBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpPlayerInfo_descriptor_, &PvpPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpPlayerState_descriptor_, &PvpPlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpEndPlayer_descriptor_, &PvpEndPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuest_descriptor_, &DailyQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuestList_descriptor_, &DailyQuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonSituationData_descriptor_, &DungeonSituationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonData_descriptor_, &DungeonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTarget_descriptor_, &TeamTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchInfo_descriptor_, &MatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureEquipedID_descriptor_, &TreasureEquipedID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFlag_descriptor_, &GuildFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildNews_descriptor_, &GuildNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberTinyInfo_descriptor_, &GuildMemberTinyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberInfo_descriptor_, &GuildMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildJurisdiction_descriptor_, &GuildJurisdiction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildOfficeJurisdiction_descriptor_, &GuildOfficeJurisdiction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildVacationInfo_descriptor_, &GuildVacationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuildingInfo_descriptor_, &GuildBuildingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuildingContributionInfo_descriptor_, &GuildBuildingContributionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildEvent_descriptor_, &GuildEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMatchRoom_descriptor_, &PBMatchRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRoomCamps_descriptor_, &MatchRoomCamps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMatchData_descriptor_, &PlayerMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxQuestCompleteId_descriptor_, &MaxQuestCompleteId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestMaxQuestList_descriptor_, &QuestMaxQuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineStats_descriptor_, &LineStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneStats_descriptor_, &SceneStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonBossInfo_descriptor_, &DungeonBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPosInfo_descriptor_, &SkillPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareReward_descriptor_, &WelfareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccumulateSignInfo_descriptor_, &AccumulateSignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineInfo_descriptor_, &OnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelInfo_descriptor_, &LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthSignInInfo_descriptor_, &MonthSignInInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberQuickUpdateInfo_descriptor_, &TeamMemberQuickUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossScoreInfo_descriptor_, &WorldBossScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRank_descriptor_, &WorldBossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkill_descriptor_, &PetSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpBattleEndInfo_descriptor_, &PvpBattleEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpBattleRewardInfo_descriptor_, &PvpBattleRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactData_descriptor_, &ContactData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactGroup_descriptor_, &ContactGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyCount_descriptor_, &DailyCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClimTowerInfo_descriptor_, &ClimTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactSetting_descriptor_, &ContactSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstVicGet_descriptor_, &FirstVicGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionActionInfo_descriptor_, &ExpressionActionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntPair_descriptor_, &IntPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressBook_descriptor_, &AddressBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionItem_descriptor_, &AuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRecSimple_descriptor_, &AuctionRecSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRecDetail_descriptor_, &AuctionRecDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MercenaryInfo_descriptor_, &MercenaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionItemCnt_descriptor_, &AuctionItemCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDotInfo_descriptor_, &RedDotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendGiftPoint_descriptor_, &FriendGiftPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendGifPointList_descriptor_, &FriendGifPointList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonTargetContent_descriptor_, &DungeonTargetContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonTarget_descriptor_, &DungeonTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItem_descriptor_, &MailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjCreateInfo_descriptor_, &ObjCreateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjDeleteInfo_descriptor_, &ObjDeleteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchLimit_descriptor_, &MatchLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRankInfo_descriptor_, &MatchRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchTargetInfo_descriptor_, &MatchTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityTime_descriptor_, &ActivityTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionInfo_descriptor_, &ProfessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecLoginReward_descriptor_, &SpecLoginReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecLoginInfo_descriptor_, &SpecLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactsChatMsg_descriptor_, &ContactsChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3Int_descriptor_, &Vector3Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendString_descriptor_, &AppendString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendStringList_descriptor_, &AppendStringList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarBattlePlayerInfo_descriptor_, &StarBattlePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarBattleInfo_descriptor_, &StarBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarBattleTeamInfo_descriptor_, &StarBattleTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjPosInfo_descriptor_, &ObjPosInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PublicStruct_2eproto() {
  delete CharacterInfo::default_instance_;
  delete CharacterInfo_reflection_;
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete TeamMemberInfo::default_instance_;
  delete TeamMemberInfo_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete OnlineUserInfo::default_instance_;
  delete OnlineUserInfo_reflection_;
  delete ItemData::default_instance_;
  delete ItemData_reflection_;
  delete AttrKeyValue::default_instance_;
  delete AttrKeyValue_reflection_;
  delete BagData::default_instance_;
  delete BagData_reflection_;
  delete EquipAttr::default_instance_;
  delete EquipAttr_reflection_;
  delete ItemObj::default_instance_;
  delete ItemObj_reflection_;
  delete ChatMsg::default_instance_;
  delete ChatMsg_reflection_;
  delete ChatInfo::default_instance_;
  delete ChatInfo_reflection_;
  delete ChatChannelData::default_instance_;
  delete ChatChannelData_reflection_;
  delete CharacterLocation::default_instance_;
  delete CharacterLocation_reflection_;
  delete QuestData::default_instance_;
  delete QuestData_reflection_;
  delete CustomSkiData::default_instance_;
  delete CustomSkiData_reflection_;
  delete QuestStepData::default_instance_;
  delete QuestStepData_reflection_;
  delete QuestListData::default_instance_;
  delete QuestListData_reflection_;
  delete DBBags::default_instance_;
  delete DBBags_reflection_;
  delete ItemResolveData::default_instance_;
  delete ItemResolveData_reflection_;
  delete ItemSimpleData::default_instance_;
  delete ItemSimpleData_reflection_;
  delete ItemAutoOperatorData::default_instance_;
  delete ItemAutoOperatorData_reflection_;
  delete SkillContainer::default_instance_;
  delete SkillContainer_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete SkillObj::default_instance_;
  delete SkillObj_reflection_;
  delete SuitInfo::default_instance_;
  delete SuitInfo_reflection_;
  delete WorldBossInfo::default_instance_;
  delete WorldBossInfo_reflection_;
  delete WorldBossRankInfo::default_instance_;
  delete WorldBossRankInfo_reflection_;
  delete EquipResonanceInfo::default_instance_;
  delete EquipResonanceInfo_reflection_;
  delete EquipResonanceData::default_instance_;
  delete EquipResonanceData_reflection_;
  delete EquipWashInfo::default_instance_;
  delete EquipWashInfo_reflection_;
  delete EquipWashData::default_instance_;
  delete EquipWashData_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete BuinessSkillData::default_instance_;
  delete BuinessSkillData_reflection_;
  delete BuinessUnlockInfo::default_instance_;
  delete BuinessUnlockInfo_reflection_;
  delete CompletedQuestList::default_instance_;
  delete CompletedQuestList_reflection_;
  delete EliteMonsterInfo::default_instance_;
  delete EliteMonsterInfo_reflection_;
  delete JewelSlot::default_instance_;
  delete JewelSlot_reflection_;
  delete JewelInfo::default_instance_;
  delete JewelInfo_reflection_;
  delete EquipSlotInfo::default_instance_;
  delete EquipSlotInfo_reflection_;
  delete WorshipPlayerData::default_instance_;
  delete WorshipPlayerData_reflection_;
  delete RecoverMedicament::default_instance_;
  delete RecoverMedicament_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete EquipSlotStarInfo::default_instance_;
  delete EquipSlotStarInfo_reflection_;
  delete DropItem::default_instance_;
  delete DropItem_reflection_;
  delete PetData::default_instance_;
  delete PetData_reflection_;
  delete EquipBuildAtf::default_instance_;
  delete EquipBuildAtf_reflection_;
  delete TreasureData::default_instance_;
  delete TreasureData_reflection_;
  delete TreasureExtraInfo::default_instance_;
  delete TreasureExtraInfo_reflection_;
  delete TreasureDepotData::default_instance_;
  delete TreasureDepotData_reflection_;
  delete ShopItem::default_instance_;
  delete ShopItem_reflection_;
  delete RandomQuestData::default_instance_;
  delete RandomQuestData_reflection_;
  delete RandomQuestListData::default_instance_;
  delete RandomQuestListData_reflection_;
  delete PvpBattleInfo::default_instance_;
  delete PvpBattleInfo_reflection_;
  delete PvpPlayerInfo::default_instance_;
  delete PvpPlayerInfo_reflection_;
  delete PvpPlayerState::default_instance_;
  delete PvpPlayerState_reflection_;
  delete PvpEndPlayer::default_instance_;
  delete PvpEndPlayer_reflection_;
  delete DailyQuest::default_instance_;
  delete DailyQuest_reflection_;
  delete DailyQuestList::default_instance_;
  delete DailyQuestList_reflection_;
  delete DungeonSituationData::default_instance_;
  delete DungeonSituationData_reflection_;
  delete DungeonData::default_instance_;
  delete DungeonData_reflection_;
  delete TeamTarget::default_instance_;
  delete TeamTarget_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete MatchInfo::default_instance_;
  delete MatchInfo_reflection_;
  delete TreasureEquipedID::default_instance_;
  delete TreasureEquipedID_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete GuildFlag::default_instance_;
  delete GuildFlag_reflection_;
  delete GuildNews::default_instance_;
  delete GuildNews_reflection_;
  delete GuildMemberTinyInfo::default_instance_;
  delete GuildMemberTinyInfo_reflection_;
  delete GuildMemberInfo::default_instance_;
  delete GuildMemberInfo_reflection_;
  delete GuildJurisdiction::default_instance_;
  delete GuildJurisdiction_reflection_;
  delete GuildOfficeJurisdiction::default_instance_;
  delete GuildOfficeJurisdiction_reflection_;
  delete GuildVacationInfo::default_instance_;
  delete GuildVacationInfo_reflection_;
  delete GuildBuildingInfo::default_instance_;
  delete GuildBuildingInfo_reflection_;
  delete GuildBuildingContributionInfo::default_instance_;
  delete GuildBuildingContributionInfo_reflection_;
  delete GuildEvent::default_instance_;
  delete GuildEvent_reflection_;
  delete PBMatchRoom::default_instance_;
  delete PBMatchRoom_reflection_;
  delete MatchRoomCamps::default_instance_;
  delete MatchRoomCamps_reflection_;
  delete PlayerMatchData::default_instance_;
  delete PlayerMatchData_reflection_;
  delete MaxQuestCompleteId::default_instance_;
  delete MaxQuestCompleteId_reflection_;
  delete QuestMaxQuestList::default_instance_;
  delete QuestMaxQuestList_reflection_;
  delete LineStats::default_instance_;
  delete LineStats_reflection_;
  delete SceneStats::default_instance_;
  delete SceneStats_reflection_;
  delete DungeonBossInfo::default_instance_;
  delete DungeonBossInfo_reflection_;
  delete SkillPosInfo::default_instance_;
  delete SkillPosInfo_reflection_;
  delete WelfareReward::default_instance_;
  delete WelfareReward_reflection_;
  delete AccumulateSignInfo::default_instance_;
  delete AccumulateSignInfo_reflection_;
  delete OnlineInfo::default_instance_;
  delete OnlineInfo_reflection_;
  delete LevelInfo::default_instance_;
  delete LevelInfo_reflection_;
  delete MonthSignInInfo::default_instance_;
  delete MonthSignInInfo_reflection_;
  delete TeamMemberQuickUpdateInfo::default_instance_;
  delete TeamMemberQuickUpdateInfo_reflection_;
  delete WorldBossScoreInfo::default_instance_;
  delete WorldBossScoreInfo_reflection_;
  delete WorldBossRank::default_instance_;
  delete WorldBossRank_reflection_;
  delete PetSkill::default_instance_;
  delete PetSkill_reflection_;
  delete PvpBattleEndInfo::default_instance_;
  delete PvpBattleEndInfo_reflection_;
  delete PvpBattleRewardInfo::default_instance_;
  delete PvpBattleRewardInfo_reflection_;
  delete ContactData::default_instance_;
  delete ContactData_reflection_;
  delete ContactGroup::default_instance_;
  delete ContactGroup_reflection_;
  delete DailyCount::default_instance_;
  delete DailyCount_reflection_;
  delete ClimTowerInfo::default_instance_;
  delete ClimTowerInfo_reflection_;
  delete ContactSetting::default_instance_;
  delete ContactSetting_reflection_;
  delete FirstVicGet::default_instance_;
  delete FirstVicGet_reflection_;
  delete ExpressionActionInfo::default_instance_;
  delete ExpressionActionInfo_reflection_;
  delete IntPair::default_instance_;
  delete IntPair_reflection_;
  delete AddressBook::default_instance_;
  delete AddressBook_reflection_;
  delete AuctionItem::default_instance_;
  delete AuctionItem_reflection_;
  delete AuctionRecSimple::default_instance_;
  delete AuctionRecSimple_reflection_;
  delete AuctionRecDetail::default_instance_;
  delete AuctionRecDetail_reflection_;
  delete MercenaryInfo::default_instance_;
  delete MercenaryInfo_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete AuctionItemCnt::default_instance_;
  delete AuctionItemCnt_reflection_;
  delete RedDotInfo::default_instance_;
  delete RedDotInfo_reflection_;
  delete FriendGiftPoint::default_instance_;
  delete FriendGiftPoint_reflection_;
  delete FriendGifPointList::default_instance_;
  delete FriendGifPointList_reflection_;
  delete DungeonTargetContent::default_instance_;
  delete DungeonTargetContent_reflection_;
  delete DungeonTarget::default_instance_;
  delete DungeonTarget_reflection_;
  delete MailItem::default_instance_;
  delete MailItem_reflection_;
  delete ObjCreateInfo::default_instance_;
  delete ObjCreateInfo_reflection_;
  delete ObjDeleteInfo::default_instance_;
  delete ObjDeleteInfo_reflection_;
  delete MatchLimit::default_instance_;
  delete MatchLimit_reflection_;
  delete MatchRankInfo::default_instance_;
  delete MatchRankInfo_reflection_;
  delete MatchTargetInfo::default_instance_;
  delete MatchTargetInfo_reflection_;
  delete ActivityTime::default_instance_;
  delete ActivityTime_reflection_;
  delete ProfessionInfo::default_instance_;
  delete ProfessionInfo_reflection_;
  delete SpecLoginReward::default_instance_;
  delete SpecLoginReward_reflection_;
  delete SpecLoginInfo::default_instance_;
  delete SpecLoginInfo_reflection_;
  delete ContactsChatMsg::default_instance_;
  delete ContactsChatMsg_reflection_;
  delete Vector3Int::default_instance_;
  delete Vector3Int_reflection_;
  delete AppendString::default_instance_;
  delete AppendString_reflection_;
  delete AppendStringList::default_instance_;
  delete AppendStringList_reflection_;
  delete StarBattlePlayerInfo::default_instance_;
  delete StarBattlePlayerInfo_reflection_;
  delete StarBattleInfo::default_instance_;
  delete StarBattleInfo_reflection_;
  delete StarBattleTeamInfo::default_instance_;
  delete StarBattleTeamInfo_reflection_;
  delete ObjPosInfo::default_instance_;
  delete ObjPosInfo_reflection_;
}

void protobuf_AddDesc_PublicStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022PublicStruct.proto\"\255\001\n\rCharacterInfo\022\021"
    "\n\006RoleId\030\001 \001(\004:\0010\022\020\n\010Nickname\030\002 \001(\t\022\024\n\010C"
    "onfigId\030\003 \001(\005:\002-1\022\016\n\002Hp\030\004 \001(\005:\002-1\022\021\n\005HpM"
    "ax\030\005 \001(\005:\002-1\022\021\n\005Level\030\006 \001(\005:\002-1\022+\n\017Treas"
    "ureEquiped\030\010 \001(\0132\022.TreasureEquipedID\"6\n\007"
    "Vector3\022\r\n\001X\030\001 \001(\002:\002-1\022\r\n\001Y\030\002 \001(\002:\002-1\022\r\n"
    "\001Z\030\003 \001(\002:\002-1\"\217\002\n\016TeamMemberInfo\022\021\n\006RoleI"
    "d\030\001 \001(\004:\0010\022\020\n\005Level\030\003 \001(\005:\0010\022\014\n\004Name\030\004 \001"
    "(\t\022\024\n\010ConfigId\030\005 \001(\005:\002-1\022\016\n\002Hp\030\006 \001(\005:\002-1"
    "\022\022\n\006Status\030\010 \001(\005:\002-1\022\021\n\005MaxHp\030\013 \001(\003:\002-1\022"
    "$\n\010Location\030\017 \001(\0132\022.CharacterLocation\022\030\n"
    "\014ProfessionId\030\020 \001(\005:\002-1\022\021\n\006OnLine\030\021 \001(\005:"
    "\0011\022\026\n\nFollowTeam\030\022 \001(\005:\002-1\022\022\n\nBuffIdList"
    "\030\023 \003(\005\"\217\001\n\010TeamInfo\022 \n\007Members\030\001 \003(\0132\017.T"
    "eamMemberInfo\022\027\n\014LeaderRoleId\030\002 \001(\004:\0010\022\021"
    "\n\006TeamId\030\003 \001(\004:\0010\022\024\n\010TeamType\030\004 \001(\005:\002-1\022"
    "\037\n\nTeamTarget\030\005 \001(\0132\013.TeamTarget\"\306\002\n\016Onl"
    "ineUserInfo\022\021\n\006RoleId\030\001 \001(\004:\0010\022\021\n\005Level\030"
    "\002 \001(\005:\002-1\022$\n\010Location\030\005 \001(\0132\022.CharacterL"
    "ocation\022\024\n\tGuildguid\030\006 \001(\004:\0010\022)\n\017PlayerM"
    "atchData\030\007 \001(\0132\020.PlayerMatchData\022\020\n\010Role"
    "Name\030\010 \001(\t\022\024\n\010ConfigID\030\t \001(\005:\002-1\022\031\n\rTrea"
    "sureCount\030\n \001(\005:\002-1\022\031\n\rTreasureLevel\030\013 \001"
    "(\005:\002-1\022\027\n\013PetConfigID\030\014 \001(\005:\002-1\022\024\n\010PetLe"
    "vel\030\r \001(\005:\002-1\022\032\n\016PvP3v3WinCount\030\016 \001(\005:\002-"
    "1\"\332\001\n\010ItemData\022\025\n\006IsLock\030\002 \001(\010:\005false\022\030\n"
    "\014OverlayCount\030\003 \001(\005:\002-1\022\024\n\010ConfigId\030\004 \001("
    "\005:\002-1\022\035\n\tEquipAttr\030\005 \001(\0132\n.EquipAttr\022\024\n\006"
    "IsBind\030\014 \001(\010:\004true\022\017\n\004Guid\030\r \001(\004:\0010\022\031\n\007P"
    "etData\030\016 \001(\0132\010.PetData\022\023\n\010BindRule\030\017 \001(\005"
    ":\0011\022\021\n\006SaleCD\030\020 \001(\005:\0010\"G\n\014AttrKeyValue\022\017"
    "\n\003Key\030\001 \001(\005:\002-1\022\021\n\005Value\030\002 \001(\003:\002-1\022\023\n\007Qu"
    "ality\030\003 \001(\005:\002-1\"P\n\007BagData\022\027\n\005Items\030\001 \003("
    "\0132\010.ItemObj\022\023\n\007BagType\030\002 \001(\005:\002-1\022\027\n\013CurC"
    "apacity\030\003 \001(\005:\002-1\"g\n\tEquipAttr\022\037\n\010BaseAt"
    "tr\030\001 \003(\0132\r.AttrKeyValue\022 \n\tExtraAttr\030\002 \003"
    "(\0132\r.AttrKeyValue\022\027\n\013BattleScore\030\003 \001(\005:\002"
    "-1\"P\n\007ItemObj\022\017\n\003Pos\030\001 \001(\005:\002-1\022\033\n\010ItemDa"
    "ta\030\002 \001(\0132\t.ItemData\022\027\n\010RedPoint\030\003 \001(\010:\005f"
    "alse\"T\n\007ChatMsg\022\024\n\014Chat_content\030\001 \001(\t\022\026\n"
    "\016Chat_voice_url\030\002 \001(\t\022\033\n\017Chat_voice_secs"
    "\030\003 \001(\005:\002-1\"\371\001\n\010ChatInfo\022\023\n\013Player_name\030\001"
    " \001(\t\022\026\n\013Player_guid\030\002 \001(\004:\0010\022\025\n\tAvatar_i"
    "d\030\003 \001(\005:\002-1\022\030\n\014Player_level\030\004 \001(\005:\002-1\022\033\n"
    "\017Avatar_frame_id\030\005 \001(\005:\002-1\022\025\n\tConfig_id\030"
    "\006 \001(\005:\002-1\022\024\n\tTimestamp\030\007 \001(\004:\0010\022\032\n\010Chat_"
    "msg\030\010 \001(\0132\010.ChatMsg\022\022\n\007Team_id\030\t \001(\004:\0010\022"
    "\025\n\nGuild_guid\030\n \001(\004:\0010\"J\n\017ChatChannelDat"
    "a\022\030\n\014Chat_channel\030\001 \001(\005:\002-1\022\035\n\nChat_info"
    "s\030\002 \003(\0132\t.ChatInfo\"\312\001\n\021CharacterLocation"
    "\022\023\n\007SceneId\030\002 \001(\005:\002-1\022\025\n\003Pos\030\003 \001(\0132\010.Vec"
    "tor3\022\021\n\005MapId\030\005 \001(\005:\002-1\022\033\n\017DungeonConfig"
    "Id\030\006 \001(\005:\002-1\022\022\n\006LineId\030\007 \001(\005:\002-1\022\031\n\rScen"
    "eConfigId\030\010 \001(\005:\002-1\022\024\n\010MirrorId\030\t \001(\005:\002-"
    "1\022\024\n\010ServerId\030\n \001(\005:\002-1\"\250\001\n\tQuestData\022\024\n"
    "\010ConfigId\030\001 \001(\005:\002-1\022\022\n\006Status\030\002 \001(\005:\002-1\022"
    "\"\n\nQuestSteps\030\004 \003(\0132\016.QuestStepData\022\026\n\nQ"
    "uestIndex\030\006 \001(\005:\002-1\022\031\n\rQuestMaxIndex\030\007 \001"
    "(\005:\002-1\022\032\n\016QuestBeginTime\030\010 \001(\003:\002-1\"X\n\rCu"
    "stomSkiData\022\013\n\003Key\030\002 \001(\t\022\023\n\007KeyType\030\003 \001("
    "\005:\002-1\022\017\n\004IntV\030\004 \001(\005:\0010\022\024\n\005BoolV\030\005 \001(\010:\005f"
    "alse\"9\n\rQuestStepData\022\022\n\006Status\030\002 \001(\005:\002-"
    "1\022\024\n\010Progress\030\003 \001(\005:\002-1\"/\n\rQuestListData"
    "\022\036\n\nQuestsList\030\001 \003(\0132\n.QuestData\"7\n\006DBBa"
    "gs\022\026\n\004Bags\030\001 \003(\0132\010.BagData\022\025\n\rRedPointGu"
    "ids\030\002 \003(\004\";\n\017ItemResolveData\022\022\n\006Qulity\030\001"
    " \001(\005:\002-1\022\024\n\tIsResolve\030\002 \001(\005:\0010\"7\n\016ItemSi"
    "mpleData\022\022\n\006ConfID\030\001 \001(\005:\002-1\022\021\n\005Count\030\002 "
    "\001(\005:\002-1\"E\n\024ItemAutoOperatorData\022-\n\023AutoS"
    "aleDisassemble\030\001 \003(\0132\020.ItemResolveData\"1"
    "\n\016SkillContainer\022\037\n\014SkillObjList\030\001 \003(\0132\t"
    ".SkillObj\"m\n\tSkillData\022+\n\022SkillContainer"
    "List\030\001 \003(\0132\017.SkillContainer\022\033\n\017CurUseCon"
    "tainer\030\002 \001(\005:\002-1\022\026\n\016SkillSlotLevel\030\003 \003(\005"
    "\"0\n\010SkillObj\022\017\n\003Pos\030\001 \001(\005:\002-1\022\023\n\007SkillId"
    "\030\002 \001(\005:\002-1\"8\n\010SuitInfo\022\023\n\007Suit_id\030\001 \001(\005:"
    "\002-1\022\027\n\013Collect_num\030\002 \001(\005:\002-1\"\210\001\n\rWorldBo"
    "ssInfo\022\022\n\006LineID\030\001 \001(\005:\002-1\022\022\n\006HPRate\030\002 \001"
    "(\005:\002-1\022\'\n\nLastDamage\030\003 \001(\0132\023.WorldBossSc"
    "oreInfo\022&\n\tMaxDamage\030\004 \001(\0132\023.WorldBossSc"
    "oreInfo\"Y\n\021WorldBossRankInfo\022\020\n\004Rank\030\001 \001"
    "(\005:\002-1\022\014\n\004Name\030\002 \001(\t\022\021\n\005Level\030\003 \001(\005:\002-1\022"
    "\021\n\005Score\030\004 \001(\005:\002-1\"\254\001\n\022EquipResonanceInf"
    "o\022\022\n\006ConfId\030\002 \001(\005:\002-1\022$\n\rResonanceAttr\030\003"
    " \003(\0132\r.AttrKeyValue\022\'\n\020NewResonanceAttr\030"
    "\004 \003(\0132\r.AttrKeyValue\022\027\n\013BattleScore\030\005 \001("
    "\005:\002-1\022\032\n\016NewBattleScore\030\006 \001(\005:\002-1\"@\n\022Equ"
    "ipResonanceData\022*\n\rResonanceList\030\001 \003(\0132\023"
    ".EquipResonanceInfo\"u\n\rEquipWashInfo\022\024\n\t"
    "EquipGuid\030\001 \001(\004:\0010\022 \n\tExtraAttr\030\002 \003(\0132\r."
    "AttrKeyValue\022\023\n\013LockedIndex\030\003 \003(\005\022\027\n\013Bat"
    "tleScore\030\004 \001(\005:\002-1\"Q\n\rEquipWashData\022)\n\021E"
    "quipWashInfoList\030\001 \003(\0132\016.EquipWashInfo\022\025"
    "\n\tLeftTimes\030\002 \001(\005:\002-1\"E\n\010Resource\022\017\n\004Typ"
    "e\030\001 \001(\005:\0010\022\020\n\005Value\030\002 \001(\003:\0010\022\026\n\nTodayVal"
    "ue\030\003 \001(\003:\002-1\"|\n\020BuinessSkillData\022\023\n\007Skil"
    "lID\030\001 \001(\005:\002-1\022\023\n\007SkillLv\030\002 \001(\005:\002-1\022\022\n\006Lo"
    "cked\030\003 \001(\005:\002-1\022\024\n\010SkillExp\030\004 \001(\005:\002-1\022\024\n\010"
    "UseCount\030\005 \001(\005:\002-1\"<\n\021BuinessUnlockInfo\022"
    "\022\n\006Mutual\030\001 \001(\005:\002-1\022\023\n\007EndTime\030\002 \001(\003:\002-1"
    "\"T\n\022CompletedQuestList\022\016\n\006IdList\030\001 \003(\005\022."
    "\n\021MaxCompleteIdList\030\002 \003(\0132\023.MaxQuestComp"
    "leteId\"@\n\020EliteMonsterInfo\022\026\n\nFinishTime"
    "\030\003 \001(\005:\002-1\022\024\n\010CommonId\030\004 \001(\005:\002-1\"8\n\tJewe"
    "lSlot\022\022\n\006ItemId\030\001 \001(\005:\002-1\022\027\n\010Unlocked\030\002 "
    "\001(\010:\005false\"B\n\tJewelInfo\022\025\n\tEquipSlot\030\001 \001"
    "(\005:\002-1\022\036\n\nJewelSlots\030\002 \003(\0132\n.JewelSlot\"\230"
    "\001\n\rEquipSlotInfo\022\031\n\rEnhance_Level\030\001 \001(\005:"
    "\002-1\022\027\n\013Enhance_Exp\030\002 \001(\005:\002-1\022#\n\014Enhance_"
    "Attr\030\003 \003(\0132\r.AttrKeyValue\022\027\n\013BattleScore"
    "\030\004 \001(\005:\002-1\022\025\n\tSlot_Type\030\005 \001(\005:\002-1\"\177\n\021Wor"
    "shipPlayerData\022\023\n\007Role_id\030\001 \001(\005:\002-1\022\021\n\tR"
    "ole_name\030\002 \001(\t\022\026\n\nRank_level\030\003 \001(\005:\002-1\022\030"
    "\n\014Worship_cout\030\004 \001(\005:\002-1\022\020\n\004Rank\030\005 \001(\005:\002"
    "-1\"e\n\021RecoverMedicament\022\030\n\020HpMedicamentL"
    "ist\030\001 \003(\005\022\034\n\020AutoHpMedicament\030\002 \001(\005:\002-1\022"
    "\030\n\014HpPercentage\030\003 \001(\005:\002-1\"\246\002\n\010MailInfo\022\024"
    "\n\tMail_type\030\001 \001(\005:\0010\022\022\n\007Mail_id\030\002 \001(\005:\0010"
    "\022\025\n\006IsRead\030\003 \001(\010:\005false\022\024\n\005IsGet\030\004 \001(\010:\005"
    "false\022\r\n\005Title\030\005 \001(\t\022\022\n\nSalutation\030\006 \001(\t"
    "\022\017\n\007Content\030\007 \001(\t\022\023\n\013Sender_name\030\010 \001(\t\022\033"
    "\n\010ItemList\030\t \003(\0132\t.MailItem\022\024\n\tSender_id"
    "\030\n \001(\004:\0010\022\026\n\nStart_time\030\013 \001(\005:\002-1\022\027\n\013Exp"
    "ire_time\030\014 \001(\005:\002-1\022\026\n\013Receiver_id\030\r \001(\004:"
    "\0010\"z\n\021EquipSlotStarInfo\022\030\n\014RankUp_Level\030"
    "\001 \001(\005:\002-1\022\025\n\tSlot_Type\030\003 \001(\005:\002-1\022\027\n\013Batt"
    "leScore\030\004 \001(\005:\002-1\022\033\n\017NextBattleScore\030\006 \001"
    "(\005:\002-1\"v\n\010DropItem\022\024\n\010ItemType\030\001 \001(\005:\002-1"
    "\022\022\n\006ItemID\030\002 \001(\005:\002-1\022\023\n\007ItemNum\030\003 \001(\005:\002-"
    "1\022\023\n\004Bind\030\004 \001(\010:\005false\022\026\n\007Transit\030\005 \001(\010:"
    "\005false\"\341\001\n\007PetData\022\017\n\003Exp\030\001 \001(\005:\002-1\022\021\n\005L"
    "evel\030\002 \001(\005:\002-1\022\014\n\004Name\030\003 \001(\t\022\034\n\005Attrs\030\005 "
    "\003(\0132\r.AttrKeyValue\022\027\n\013BattleScore\030\006 \001(\005:"
    "\002-1\022\035\n\006Talent\030\007 \003(\0132\r.AttrKeyValue\022\034\n\tSk"
    "illList\030\010 \003(\0132\t.PetSkill\022\027\n\010IsActive\030\t \001"
    "(\010:\005false\022\027\n\013TalentScore\030\n \001(\005:\002-1\"9\n\rEq"
    "uipBuildAtf\022\021\n\005Level\030\001 \001(\005:\002-1\022\025\n\tAtf_va"
    "lue\030\002 \001(\005:\002-1\"F\n\014TreasureData\022\016\n\002ID\030\001 \001("
    "\005:\002-1\022&\n\nExtra_Info\030\002 \003(\0132\022.TreasureExtr"
    "aInfo\"m\n\021TreasureExtraInfo\022\026\n\nColor_Type"
    "\030\001 \001(\005:\002-1\022\025\n\tTime_Type\030\002 \001(\005:\002-1\022\020\n\005Sta"
    "te\030\003 \001(\005:\0010\022\027\n\013Expier_Time\030\004 \001(\003:\002-1\"]\n\021"
    "TreasureDepotData\022\020\n\005Level\030\001 \001(\005:\0011\022\020\n\005P"
    "oint\030\002 \001(\005:\0010\022$\n\rTreasure_Data\030\003 \003(\0132\r.T"
    "reasureData\"S\n\010ShopItem\022\026\n\nShopItemID\030\001 "
    "\001(\005:\002-1\022\031\n\rTotalBuyCount\030\002 \001(\005:\002-1\022\024\n\010Bu"
    "yCount\030\003 \001(\005:\002-1\"\217\001\n\017RandomQuestData\022\025\n\t"
    "QuestType\030\001 \001(\005:\002-1\022\023\n\013QuestIdList\030\002 \003(\005"
    "\022\027\n\013DayPorgress\030\006 \001(\005:\002-1\022\034\n\020LastComplet"
    "eTime\030\007 \001(\003:\002-1\022\031\n\021RandomListQuestId\030\010 \003"
    "(\005\":\n\023RandomQuestListData\022#\n\tQuestList\030\001"
    " \003(\0132\020.RandomQuestData\"\356\001\n\rPvpBattleInfo"
    "\022\024\n\010WinCount\030\001 \001(\005:\002-1\022\025\n\tLoseCount\030\002 \001("
    "\005:\002-1\022\025\n\tDrawCount\030\003 \001(\005:\002-1\022\036\n\022Continui"
    "tyWinCount\030\004 \001(\005:\002-1\022\020\n\004Rank\030\005 \001(\005:\002-1\022\020"
    "\n\004Star\030\006 \001(\005:\002-1\022\017\n\003Elo\030\007 \001(\005:\002-1\022\027\n\013Bat"
    "tleCount\030\010 \001(\005:\002-1\022\022\n\nRewardList\030\t \003(\005\022\027"
    "\n\013HistoryRank\030\n \001(\005:\002-1\"\243\001\n\rPvpPlayerInf"
    "o\022\021\n\006RoleID\030\001 \001(\004:\0010\022\020\n\010RoleName\030\002 \001(\t\022\021"
    "\n\005Level\030\003 \001(\005:\002-1\022\020\n\004Rank\030\005 \001(\005:\002-1\022\037\n\007P"
    "vpInfo\030\006 \001(\0132\016.PvpBattleInfo\022\021\n\tGuildNam"
    "e\030\007 \001(\t\022\024\n\010ConfigID\030\010 \001(\005:\002-1\"6\n\016PvpPlay"
    "erState\022\021\n\006RoleID\030\001 \001(\004:\0010\022\021\n\005State\030\002 \001("
    "\005:\002-1\"\247\001\n\014PvpEndPlayer\022\021\n\006RoleID\030\001 \001(\004:\001"
    "0\022\020\n\010RoleName\030\002 \001(\t\022\025\n\tDeadCount\030\003 \001(\005:\002"
    "-1\022\025\n\tKillCount\030\004 \001(\005:\002-1\022\025\n\tLiveCount\030\005"
    " \001(\005:\002-1\022\024\n\010ConfigId\030\006 \001(\005:\002-1\022\027\n\013Damage"
    "Count\030\007 \001(\005:\002-1\"~\n\nDailyQuest\022\035\n\tMainQue"
    "st\030\001 \001(\0132\n.QuestData\022 \n\014AtivityQuest\030\002 \001"
    "(\0132\n.QuestData\022\027\n\013RewardTimes\030\003 \001(\005:\002-1\022"
    "\026\n\nActivityId\030\004 \001(\005:\002-1\"5\n\016DailyQuestLis"
    "t\022#\n\016DailyQuestList\030\001 \003(\0132\013.DailyQuest\"<"
    "\n\024DungeonSituationData\022\020\n\004Name\030\001 \001(\005:\002-1"
    "\022\022\n\nPlayerData\030\002 \003(\005\"\205\001\n\013DungeonData\022#\n\004"
    "Data\030\001 \003(\0132\025.DungeonSituationData\022\034\n\020Dur"
    "ationMentTime\030\002 \001(\003:\002-1\022\032\n\016ConclusionTim"
    "e\030\003 \001(\003:\002-1\022\027\n\013PrepareTime\030\004 \001(\005:\002-1\"n\n\n"
    "TeamTarget\022\r\n\002Id\030\001 \001(\005:\0010\022\023\n\010MinLevel\030\002 "
    "\001(\005:\0010\022\023\n\010MaxLevel\030\003 \001(\005:\0010\022\020\n\010Function\030"
    "\004 \003(\005\022\025\n\nTargetType\030\005 \001(\005:\0010\"\255\001\n\010BuffInf"
    "o\022\021\n\005ObjId\030\005 \001(\005:\002-1\022\024\n\010CasterId\030\006 \001(\005:\002"
    "-1\022\022\n\006OpType\030\007 \001(\005:\002-1\022\021\n\005BufId\030\010 \001(\005:\002-"
    "1\022\026\n\nRemainTime\030\t \001(\005:\002-1\022\022\n\006BuffLv\030\n \001("
    "\005:\002-1\022\016\n\002Sn\030\013 \001(\005:\002-1\022\025\n\nLayerCount\030\014 \001("
    "\005:\0010\"\273\001\n\tMatchInfo\022\021\n\006RoleId\030\001 \001(\004:\0010\022\020\n"
    "\005Level\030\002 \001(\005:\0010\022\024\n\010ConfigId\030\003 \001(\005:\002-1\022\030\n"
    "\014ProfessionId\030\004 \001(\005:\002-1\022\014\n\004Name\030\005 \001(\t\022\021\n"
    "\005Ready\030\006 \001(\005:\002-1\022\017\n\004Camp\030\007 \001(\005:\0010\022\023\n\010Int"
    "egral\030\014 \001(\005:\0010\022\022\n\007Section\030\r \001(\005:\0010\"\263\001\n\021T"
    "reasureEquipedID\022\030\n\014TreasureHair\030\001 \001(\005:\002"
    "-1\022\030\n\014TreasureHead\030\002 \001(\005:\002-1\022\030\n\014Treasure"
    "Body\030\003 \001(\005:\002-1\022\032\n\016TreasureWeapon\030\004 \001(\005:\002"
    "-1\022\030\n\014TreasureWing\030\005 \001(\005:\002-1\022\032\n\016Treasure"
    "Riding\030\006 \001(\005:\002-1\"\203\001\n\nServerInfo\022\016\n\002Id\030\001 "
    "\001(\005:\002-1\022\014\n\004Name\030\002 \001(\t\022\022\n\006Region\030\003 \001(\005:\002-"
    "1\022\022\n\006Status\030\004 \001(\005:\002-1\022\021\n\005Promo\030\005 \001(\005:\002-1"
    "\022\n\n\002Ip\030\006 \001(\t\022\020\n\004Port\030\007 \001(\005:\002-1\"\205\004\n\tGuild"
    "Info\022\017\n\004Guid\030\001 \001(\004:\0010\022\021\n\tGuildName\030\002 \001(\t"
    "\022\023\n\013GuildLeader\030\003 \001(\t\022\026\n\nGuildLevel\030\004 \001("
    "\005:\002-1\022\027\n\013MemberCount\030\005 \001(\005:\002-1\022\027\n\013Online"
    "Count\030\006 \001(\005:\002-1\022\030\n\014GuildProsper\030\007 \001(\005:\002-"
    "1\022\026\n\nGuildMoney\030\010 \001(\005:\002-1\022\031\n\rGuildResour"
    "ce\030\t \001(\005:\002-1\022\022\n\nGuildCreed\030\n \001(\t\022\030\n\004Flag"
    "\030\013 \001(\0132\n.GuildFlag\022\030\n\004News\030\014 \003(\0132\n.Guild"
    "News\022\031\n\nIsAutoJoin\030\r \001(\010:\005false\022\024\n\014Guild"
    "OldName\030\017 \001(\t\022\024\n\014GuildCreater\030\020 \001(\t\022\026\n\nS"
    "elfOffice\030\021 \001(\005:\002-1\022\026\n\nTotalCount\030\022 \001(\005:"
    "\002-1\022\031\n\nIsVacation\030\023 \001(\010:\005false\022\032\n\013HaveAp"
    "plied\030\024 \001(\010:\005false\022\030\n\014MaintainCost\030\025 \001(\005"
    ":\002-1\022\030\n\014GuildWelfare\030\026 \001(\005:\002-1\":\n\tGuildF"
    "lag\022\027\n\013FlagEquiped\030\001 \001(\005:\002-1\022\024\n\014FlagUnlo"
    "cked\030\002 \003(\005\"7\n\tGuildNews\022\026\n\nOptionType\030\003 "
    "\001(\005:\002-1\022\022\n\nEventsParm\030\004 \003(\t\"\232\001\n\023GuildMem"
    "berTinyInfo\022\017\n\004Guid\030\001 \001(\004:\0010\022\022\n\nPlayerNa"
    "me\030\002 \001(\t\022\026\n\nOccupition\030\003 \001(\005:\002-1\022\021\n\005Leve"
    "l\030\004 \001(\005:\002-1\022\026\n\nFightScore\030\005 \001(\005:\002-1\022\033\n\017T"
    "otalContribute\030\006 \001(\005:\002-1\"\312\002\n\017GuildMember"
    "Info\022\026\n\nOfficeType\030\003 \001(\005:\002-1\022\032\n\016WeekCont"
    "ribute\030\004 \001(\005:\002-1\022\035\n\021HistoryContribute\030\005 "
    "\001(\005:\002-1\022\033\n\017TotalContribute\030\006 \001(\005:\002-1\022\032\n\016"
    "WeekQuestCount\030\007 \001(\005:\002-1\022\031\n\rWeekCampCoun"
    "t\030\010 \001(\005:\002-1\022\022\n\006InTime\030\t \001(\003:\002-1\022+\n\rGuild"
    "TinyInfo\030\013 \001(\0132\024.GuildMemberTinyInfo\022\024\n\t"
    "LeaveTime\030\014 \001(\004:\0010\022\031\n\nIsVacation\030\r \001(\010:\005"
    "false\022\036\n\017IsForbiddenChat\030\016 \001(\010:\005false\"[\n"
    "\021GuildJurisdiction\022\024\n\010ConfigID\030\001 \001(\005:\002-1"
    "\022\027\n\010CurState\030\002 \001(\010:\005false\022\027\n\010IsCanSet\030\003 "
    "\001(\010:\005false\"_\n\027GuildOfficeJurisdiction\022\026\n"
    "\nOfficeType\030\001 \001(\005:\002-1\022,\n\020JurisdictionLis"
    "t\030\002 \003(\0132\022.GuildJurisdiction\"p\n\021GuildVaca"
    "tionInfo\022\017\n\004Guid\030\001 \001(\004:\0010\022\022\n\nPlayerName\030"
    "\003 \001(\t\022\021\n\005Level\030\004 \001(\005:\002-1\022\016\n\006Reason\030\005 \001(\t"
    "\022\023\n\010LeftTime\030\006 \001(\004:\0010\"Z\n\021GuildBuildingIn"
    "fo\022\030\n\014BuildingType\030\001 \001(\005:\002-1\022\026\n\nBuilding"
    "Lv\030\002 \001(\005:\002-1\022\023\n\010LeftTime\030\003 \001(\004:\0010\"l\n\035Gui"
    "ldBuildingContributionInfo\022\017\n\004Guid\030\002 \001(\004"
    ":\0010\022\022\n\nPlayerName\030\003 \001(\t\022\025\n\tSpeedTime\030\004 \001"
    "(\005:\002-1\022\017\n\004Date\030\005 \001(\004:\0010\"Z\n\nGuildEvent\022\017\n"
    "\004Guid\030\002 \001(\004:\0010\022\017\n\004Date\030\004 \001(\004:\0010\022\026\n\nOptio"
    "nType\030\005 \001(\005:\002-1\022\022\n\nEventsParm\030\006 \003(\t\"~\n\013P"
    "BMatchRoom\022\036\n\005Camps\030\001 \003(\0132\017.MatchRoomCam"
    "ps\022%\n\013MatchTarget\030\006 \001(\0132\020.MatchTargetInf"
    "o\022\021\n\006RoomId\030\007 \001(\004:\0010\022\025\n\tMatchType\030\010 \001(\005:"
    "\002-1\"-\n\016MatchRoomCamps\022\033\n\007Players\030\001 \003(\0132\n"
    ".MatchInfo\"H\n\017PlayerMatchData\022\024\n\tMatchTy"
    "pe\030\001 \001(\005:\0010\022\016\n\003Elo\030\002 \001(\005:\0010\022\017\n\004Auto\030\003 \001("
    "\005:\0010\"D\n\022MaxQuestCompleteId\022\025\n\tQuestType\030"
    "\001 \001(\005:\002-1\022\027\n\013MaxConfigId\030\002 \001(\005:\002-1\";\n\021Qu"
    "estMaxQuestList\022&\n\tQuestList\030\001 \003(\0132\023.Com"
    "pletedQuestList\"6\n\tLineStats\022\022\n\006LineId\030\001"
    " \001(\005:\002-1\022\025\n\tLineStats\030\002 \001(\005:\002-1\"<\n\nScene"
    "Stats\022\031\n\005Lines\030\001 \003(\0132\n.LineStats\022\023\n\007Scen"
    "eId\030\002 \001(\005:\002-1\"\200\001\n\017DungeonBossInfo\022\022\n\006Bos"
    "sid\030\001 \001(\005:\002-1\022\022\n\006Number\030\002 \001(\005:\002-1\022\025\n\tDun"
    "geonid\030\003 \001(\005:\002-1\022\025\n\tMaxNumber\030\004 \001(\005:\002-1\022"
    "\027\n\013RefreshType\030\005 \001(\005:\002-1\"\227\001\n\014SkillPosInf"
    "o\022\017\n\003Pos\030\001 \001(\005:\002-1\022\024\n\010CurLevel\030\003 \001(\005:\002-1"
    "\022\025\n\tNextLevel\030\004 \001(\005:\002-1\022#\n\014CurLevelAttr\030"
    "\005 \003(\0132\r.AttrKeyValue\022$\n\rNextLevelAttr\030\006 "
    "\003(\0132\r.AttrKeyValue\"<\n\rWelfareReward\022\024\n\010R"
    "ewardID\030\001 \001(\005:\002-1\022\025\n\tRewardNum\030\002 \001(\005:\002-1"
    "\"^\n\022AccumulateSignInfo\022\016\n\002ID\030\001 \001(\005:\002-1\022\024"
    "\n\005State\030\002 \001(\010:\005false\022\"\n\nRewardInfo\030\003 \001(\013"
    "2\016.WelfareReward\"V\n\nOnlineInfo\022\016\n\002ID\030\001 \001"
    "(\005:\002-1\022\024\n\005State\030\002 \001(\010:\005false\022\"\n\nRewardIn"
    "fo\030\003 \001(\0132\016.WelfareReward\"U\n\tLevelInfo\022\016\n"
    "\002ID\030\002 \001(\005:\002-1\022\024\n\005State\030\003 \001(\010:\005false\022\"\n\nR"
    "ewardInfo\030\004 \003(\0132\016.WelfareReward\"[\n\017Month"
    "SignInInfo\022\016\n\002ID\030\001 \001(\005:\002-1\022\024\n\005State\030\002 \001("
    "\010:\005false\022\"\n\nRewardInfo\030\003 \001(\0132\016.WelfareRe"
    "ward\"g\n\031TeamMemberQuickUpdateInfo\022$\n\010Loc"
    "ation\030\001 \001(\0132\022.CharacterLocation\022\021\n\005MaxMp"
    "\030\002 \001(\003:\002-1\022\021\n\005MaxHp\030\004 \001(\003:\002-1\"\250\001\n\022WorldB"
    "ossScoreInfo\022\025\n\nPlayerguid\030\001 \001(\004:\0010\022\021\n\005L"
    "evel\030\002 \001(\005:\002-1\022\014\n\004Name\030\003 \001(\t\022\026\n\nOccupati"
    "on\030\004 \001(\005:\002-1\022\023\n\007RankAll\030\005 \001(\005:\002-1\022\032\n\016Ran"
    "kOccupation\030\006 \001(\005:\002-1\022\021\n\005Score\030\007 \001(\005:\002-1"
    "\"O\n\rWorldBossRank\022&\n\tScoreInfo\030\001 \003(\0132\023.W"
    "orldBossScoreInfo\022\026\n\nOccupation\030\002 \001(\005:\002-"
    "1\"1\n\010PetSkill\022\023\n\007SkillId\030\003 \001(\005:\002-1\022\020\n\004Lo"
    "ck\030\004 \001(\005:\002-1\"\227\002\n\020PvpBattleEndInfo\022\024\n\010Win"
    "State\030\001 \001(\005:\002-1\022\026\n\nBeforeRank\030\002 \001(\005:\002-1\022"
    "\026\n\nBeforeStar\030\003 \001(\005:\002-1\022\025\n\tAfterRank\030\004 \001"
    "(\005:\002-1\022\025\n\tAfterStar\030\005 \001(\005:\002-1\022(\n\nRewardL"
    "ist\030\007 \003(\0132\024.PvpBattleRewardInfo\022%\n\016LeftP"
    "layerList\030\010 \003(\0132\r.PvpEndPlayer\022&\n\017RightP"
    "layerList\030\t \003(\0132\r.PvpEndPlayer\022\026\n\nBattle"
    "Time\030\n \001(\005:\002-1\"\?\n\023PvpBattleRewardInfo\022\022\n"
    "\006ItemID\030\001 \001(\005:\002-1\022\024\n\010ItemCout\030\002 \001(\005:\002-1\""
    "\365\001\n\013ContactData\022\021\n\006RoleId\030\001 \001(\004:\0010\022\021\n\006Te"
    "amId\030\002 \001(\004:\0010\022\020\n\010Nickname\030\003 \001(\t\022\024\n\010Confi"
    "gId\030\004 \001(\005:\002-1\022\020\n\005Level\030\005 \001(\005:\0011\022\026\n\nResou"
    "rceId\030\006 \001(\005:\002-1\022\r\n\005Alias\030\010 \001(\t\022\030\n\rFamili"
    "arPoint\030\n \001(\005:\0010\022\021\n\006OnLine\030\013 \001(\005:\0010\022\027\n\013C"
    "ombatValue\030\014 \001(\005:\002-1\022\031\n\rLastLoginTime\030\r "
    "\001(\003:\002-1\"L\n\014ContactGroup\022\021\n\tGroupName\030\001 \001"
    "(\t\022\024\n\014GroupRoleIds\030\002 \003(\004\022\023\n\007GroupId\030\003 \001("
    "\005:\002-1\"T\n\nDailyCount\022\020\n\005Count\030\002 \001(\005:\0010\022\017\n"
    "\004Time\030\003 \001(\003:\0010\022\021\n\006TimeId\030\004 \001(\005:\0010\022\020\n\004Fla"
    "g\030\005 \001(\005:\002-1\"\211\001\n\rClimTowerInfo\022\023\n\010LastTim"
    "e\030\001 \001(\003:\0010\022\023\n\010CurLayer\030\002 \001(\005:\0011\022\023\n\010MaxLa"
    "yer\030\003 \001(\005:\0010\022\031\n\016ResetLayerTime\030\014 \001(\003:\0010\022"
    "\036\n\010FirstGet\030\016 \003(\0132\014.FirstVicGet\"G\n\016Conta"
    "ctSetting\022\034\n\020CloseApplyFriend\030\001 \001(\005:\002-1\022"
    "\027\n\013ClearFirend\030\002 \001(\005:\002-1\"-\n\013FirstVicGet\022"
    "\016\n\002Id\030\001 \001(\005:\002-1\022\016\n\003Get\030\002 \001(\005:\0010\"C\n\024Expre"
    "ssionActionInfo\022\024\n\010ActionId\030\001 \001(\005:\002-1\022\025\n"
    "\006UnLock\030\002 \001(\010:\005false\"-\n\007IntPair\022\017\n\003Key\030\001"
    " \001(\005:\002-1\022\021\n\005Value\030\002 \001(\005:\002-1\"\206\002\n\013AddressB"
    "ook\022%\n\017ContactDataList\030\001 \003(\0132\014.ContactDa"
    "ta\022$\n\rContactGroups\030\002 \003(\0132\r.ContactGroup"
    "\022 \n\007Setting\030\003 \001(\0132\017.ContactSetting\022 \n\nMy"
    "RoleData\030\004 \001(\0132\014.ContactData\022\023\n\013SortGrou"
    "pId\030\005 \003(\005\022*\n\rGiftPointList\030\006 \001(\0132\023.Frien"
    "dGifPointList\022%\n\013ChatMsgList\030\007 \003(\0132\020.Con"
    "tactsChatMsg\"\216\001\n\013AuctionItem\022\024\n\tOwnerGui"
    "d\030\001 \001(\004:\0010\022\020\n\005Price\030\002 \001(\005:\0011\022\023\n\010Currency"
    "\030\003 \001(\005:\0011\022\033\n\010ItemData\030\004 \001(\0132\t.ItemData\022\021"
    "\n\006Status\030\005 \001(\005:\0010\022\022\n\006SaleTS\030\006 \001(\005:\002-1\"\306\001"
    "\n\020AuctionRecSimple\022\022\n\007RecGuid\030\001 \001(\004:\0010\022\022"
    "\n\006SoldTS\030\002 \001(\005:\002-1\022\022\n\006ItemId\030\003 \001(\005:\002-1\022\021"
    "\n\005Count\030\007 \001(\005:\002-1\022\024\n\010Currency\030\010 \001(\005:\002-1\022"
    "\020\n\004Cost\030\t \001(\005:\002-1\022\024\n\010SoldType\030\n \001(\005:\002-1\022"
    "\017\n\003Tax\030\013 \001(\005:\002-1\022\024\n\005IsGot\030\014 \001(\010:\005false\"\362"
    "\001\n\020AuctionRecDetail\022\022\n\007BuyGuid\030\001 \001(\004:\0010\022"
    "\022\n\006SoldTS\030\002 \001(\005:\002-1\022!\n\013AuctionItem\030\003 \001(\013"
    "2\014.AuctionItem\022\024\n\005IsGot\030\004 \001(\010:\005false\022\020\n\004"
    "Cost\030\006 \001(\005:\002-1\022\017\n\003Tax\030\007 \001(\005:\002-1\022\024\n\010Curre"
    "ncy\030\010 \001(\005:\002-1\022\022\n\007RecGuid\030\t \001(\004:\0010\022\032\n\013New"
    "ItemGuid\030\n \001(\010:\005false\022\024\n\010SoldType\030\013 \001(\005:"
    "\002-1\"\037\n\rMercenaryInfo\022\016\n\002Id\030\001 \001(\005:\002-1\"\240\002\n"
    "\010RankInfo\022\021\n\006RoleID\030\001 \001(\004:\0010\022\020\n\010RoleName"
    "\030\002 \001(\t\022\024\n\010ConfigID\030\003 \001(\005:\002-1\022\022\n\007GuildID\030"
    "\004 \001(\004:\0010\022\021\n\tGuildName\030\005 \001(\t\022\021\n\005PetID\030\006 \001"
    "(\005:\002-1\022\024\n\010PetLevel\030\007 \001(\005:\002-1\022\031\n\rTreasure"
    "Count\030\010 \001(\005:\002-1\022\031\n\rTreasureLevel\030\t \001(\005:\002"
    "-1\022\021\n\005Score\030\n \001(\005:\002-1\022\021\n\005Level\030\013 \001(\005:\002-1"
    "\022\027\n\013GuildFlagID\030\014 \001(\005:\002-1\022\024\n\010WinCount\030\r "
    "\001(\005:\002-1\"7\n\016AuctionItemCnt\022\022\n\006ItemId\030\001 \001("
    "\005:\002-1\022\021\n\005Count\030\002 \001(\005:\002-1\"3\n\nRedDotInfo\022\020"
    "\n\004Type\030\001 \001(\005:\002-1\022\023\n\007IsLight\030\002 \001(\005:\002-1\"4\n"
    "\017FriendGiftPoint\022\017\n\004Guid\030\001 \001(\004:\0010\022\020\n\005Poi"
    "nt\030\002 \001(\005:\0010\"\224\001\n\022FriendGifPointList\022&\n\014Se"
    "ntGiftList\030\001 \003(\0132\020.FriendGiftPoint\022)\n\017Ac"
    "quireGiftList\030\002 \003(\0132\020.FriendGiftPoint\022+\n"
    "\021UnAcquireGiftList\030\003 \003(\0132\020.FriendGiftPoi"
    "nt\"\206\001\n\024DungeonTargetContent\022\021\n\005Index\030\001 \001"
    "(\005:\002-1\022\026\n\nTemplateId\030\002 \001(\005:\002-1\022\024\n\010MaxCou"
    "nt\030\003 \001(\005:\002-1\022\024\n\010CurCount\030\004 \001(\005:\002-1\022\027\n\013De"
    "scription\030\005 \001(\005:\002-1\"}\n\rDungeonTarget\022\022\n\006"
    "TypeId\030\001 \001(\005:\002-1\022\021\n\005Index\030\002 \001(\005:\002-1\022,\n\rT"
    "argetContent\030\003 \003(\0132\025.DungeonTargetConten"
    "t\022\027\n\013Description\030\004 \001(\005:\002-1\"M\n\010MailItem\022\022"
    "\n\006ItemID\030\001 \001(\005:\002-1\022\025\n\tItemCount\030\002 \001(\005:\002-"
    "1\022\026\n\007Transit\030\003 \001(\010:\005false\"\214\001\n\rObjCreateI"
    "nfo\022\021\n\005ObjId\030\001 \001(\005:\002-1\022\025\n\003Pos\030\002 \001(\0132\010.Ve"
    "ctor3\022\017\n\003Dir\030\003 \001(\002:\002-1\022\022\n\006Status\030\004 \001(\005:\002"
    "-1\022\033\n\tTargetPos\030\005 \001(\0132\010.Vector3\022\017\n\007ObjDa"
    "ta\030\006 \001(\014\"7\n\rObjDeleteInfo\022\021\n\005ObjId\030\001 \001(\005"
    ":\002-1\022\023\n\007SceneId\030\002 \001(\005:\002-1\"\224\001\n\nMatchLimit"
    "\022\026\n\013MinIntegral\030\001 \001(\005:\0010\022\025\n\nMinSection\030\002"
    " \001(\005:\0010\022\023\n\010MinLevel\030\003 \001(\005:\0010\022\023\n\010MaxLevel"
    "\030\004 \001(\005:\0010\022\026\n\013MaxIntegral\030\005 \001(\005:\0010\022\025\n\nMax"
    "Section\030\006 \001(\005:\0010\"8\n\rMatchRankInfo\022\023\n\010Int"
    "egral\030\001 \001(\005:\0010\022\022\n\007Section\030\002 \001(\005:\0010\"I\n\017Ma"
    "tchTargetInfo\022\033\n\017DungeonConfigId\030\001 \001(\005:\002"
    "-1\022\031\n\rSceneConfigId\030\002 \001(\005:\002-1\"B\n\014Activit"
    "yTime\022\021\n\005Begin\030\001 \001(\003:\002-1\022\017\n\003End\030\002 \001(\003:\002-"
    "1\022\016\n\002Id\030\003 \001(\005:\002-1\"6\n\016ProfessionInfo\022\021\n\005I"
    "ndex\030\001 \001(\005:\002-1\022\021\n\tSkillList\030\002 \003(\005\"J\n\017Spe"
    "cLoginReward\022\021\n\005Index\030\001 \001(\005:\002-1\022\017\n\003Get\030\002"
    " \001(\005:\002-1\022\023\n\007SetTime\030\003 \001(\003:\002-1\"\204\001\n\rSpecLo"
    "ginInfo\022\016\n\002Id\030\001 \001(\005:\002-1\022\025\n\tBeginTime\030\002 \001"
    "(\003:\002-1\022\023\n\007EndTime\030\003 \001(\003:\002-1\022$\n\nRewardInf"
    "o\030\004 \003(\0132\020.SpecLoginReward\022\021\n\005State\030\005 \001(\005"
    ":\002-1\"_\n\017ContactsChatMsg\022\021\n\006RoleId\030\001 \001(\004:"
    "\0010\022\030\n\tHasNewMsg\030\002 \001(\010:\005false\022\037\n\014CharInfo"
    "List\030\003 \003(\0132\t.ChatInfo\"*\n\nVector3Int\022\r\n\001X"
    "\030\001 \001(\005:\002-1\022\r\n\001Z\030\002 \001(\005:\002-1\"H\n\014AppendStrin"
    "g\022\023\n\007TransID\030\001 \001(\005:\002-1\022\017\n\003Key\030\002 \001(\005:\002-1\022"
    "\022\n\nStringList\030\003 \003(\t\";\n\020AppendStringList\022"
    "\'\n\020StringAppendList\030\001 \003(\0132\r.AppendString"
    "\"h\n\024StarBattlePlayerInfo\022\025\n\nPlayerguid\030\001"
    " \001(\004:\0010\022\022\n\nPlayername\030\002 \001(\t\022\021\n\005Level\030\003 \001"
    "(\005:\002-1\022\022\n\006RoleID\030\005 \001(\005:\002-1\"\263\001\n\016StarBattl"
    "eInfo\022\'\n\nServerFast\030\003 \001(\0132\023.StarBattleTe"
    "amInfo\022(\n\013ServerFirst\030\004 \001(\0132\023.StarBattle"
    "TeamInfo\022+\n\016ServerWeekFast\030\005 \001(\0132\023.StarB"
    "attleTeamInfo\022\016\n\002Id\030\006 \001(\005:\002-1\022\021\n\005Npcid\030\007"
    " \001(\005:\002-1\"n\n\022StarBattleTeamInfo\022\024\n\010PassTi"
    "me\030\001 \001(\003:\002-1\022\027\n\013PassUseTime\030\002 \001(\005:\002-1\022)\n"
    "\nMemberInfo\030\003 \003(\0132\025.StarBattlePlayerInfo"
    "\"M\n\nObjPosInfo\022\021\n\005ObjId\030\001 \001(\005:\002-1\022\016\n\002Id\030"
    "\002 \001(\005:\002-1\022\r\n\001X\030\003 \001(\005:\002-1\022\r\n\001Z\030\004 \001(\005:\002-1", 15759);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PublicStruct.proto", &protobuf_RegisterTypes);
  CharacterInfo::default_instance_ = new CharacterInfo();
  Vector3::default_instance_ = new Vector3();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  TeamInfo::default_instance_ = new TeamInfo();
  OnlineUserInfo::default_instance_ = new OnlineUserInfo();
  ItemData::default_instance_ = new ItemData();
  AttrKeyValue::default_instance_ = new AttrKeyValue();
  BagData::default_instance_ = new BagData();
  EquipAttr::default_instance_ = new EquipAttr();
  ItemObj::default_instance_ = new ItemObj();
  ChatMsg::default_instance_ = new ChatMsg();
  ChatInfo::default_instance_ = new ChatInfo();
  ChatChannelData::default_instance_ = new ChatChannelData();
  CharacterLocation::default_instance_ = new CharacterLocation();
  QuestData::default_instance_ = new QuestData();
  CustomSkiData::default_instance_ = new CustomSkiData();
  QuestStepData::default_instance_ = new QuestStepData();
  QuestListData::default_instance_ = new QuestListData();
  DBBags::default_instance_ = new DBBags();
  ItemResolveData::default_instance_ = new ItemResolveData();
  ItemSimpleData::default_instance_ = new ItemSimpleData();
  ItemAutoOperatorData::default_instance_ = new ItemAutoOperatorData();
  SkillContainer::default_instance_ = new SkillContainer();
  SkillData::default_instance_ = new SkillData();
  SkillObj::default_instance_ = new SkillObj();
  SuitInfo::default_instance_ = new SuitInfo();
  WorldBossInfo::default_instance_ = new WorldBossInfo();
  WorldBossRankInfo::default_instance_ = new WorldBossRankInfo();
  EquipResonanceInfo::default_instance_ = new EquipResonanceInfo();
  EquipResonanceData::default_instance_ = new EquipResonanceData();
  EquipWashInfo::default_instance_ = new EquipWashInfo();
  EquipWashData::default_instance_ = new EquipWashData();
  Resource::default_instance_ = new Resource();
  BuinessSkillData::default_instance_ = new BuinessSkillData();
  BuinessUnlockInfo::default_instance_ = new BuinessUnlockInfo();
  CompletedQuestList::default_instance_ = new CompletedQuestList();
  EliteMonsterInfo::default_instance_ = new EliteMonsterInfo();
  JewelSlot::default_instance_ = new JewelSlot();
  JewelInfo::default_instance_ = new JewelInfo();
  EquipSlotInfo::default_instance_ = new EquipSlotInfo();
  WorshipPlayerData::default_instance_ = new WorshipPlayerData();
  RecoverMedicament::default_instance_ = new RecoverMedicament();
  MailInfo::default_instance_ = new MailInfo();
  EquipSlotStarInfo::default_instance_ = new EquipSlotStarInfo();
  DropItem::default_instance_ = new DropItem();
  PetData::default_instance_ = new PetData();
  EquipBuildAtf::default_instance_ = new EquipBuildAtf();
  TreasureData::default_instance_ = new TreasureData();
  TreasureExtraInfo::default_instance_ = new TreasureExtraInfo();
  TreasureDepotData::default_instance_ = new TreasureDepotData();
  ShopItem::default_instance_ = new ShopItem();
  RandomQuestData::default_instance_ = new RandomQuestData();
  RandomQuestListData::default_instance_ = new RandomQuestListData();
  PvpBattleInfo::default_instance_ = new PvpBattleInfo();
  PvpPlayerInfo::default_instance_ = new PvpPlayerInfo();
  PvpPlayerState::default_instance_ = new PvpPlayerState();
  PvpEndPlayer::default_instance_ = new PvpEndPlayer();
  DailyQuest::default_instance_ = new DailyQuest();
  DailyQuestList::default_instance_ = new DailyQuestList();
  DungeonSituationData::default_instance_ = new DungeonSituationData();
  DungeonData::default_instance_ = new DungeonData();
  TeamTarget::default_instance_ = new TeamTarget();
  BuffInfo::default_instance_ = new BuffInfo();
  MatchInfo::default_instance_ = new MatchInfo();
  TreasureEquipedID::default_instance_ = new TreasureEquipedID();
  ServerInfo::default_instance_ = new ServerInfo();
  GuildInfo::default_instance_ = new GuildInfo();
  GuildFlag::default_instance_ = new GuildFlag();
  GuildNews::default_instance_ = new GuildNews();
  GuildMemberTinyInfo::default_instance_ = new GuildMemberTinyInfo();
  GuildMemberInfo::default_instance_ = new GuildMemberInfo();
  GuildJurisdiction::default_instance_ = new GuildJurisdiction();
  GuildOfficeJurisdiction::default_instance_ = new GuildOfficeJurisdiction();
  GuildVacationInfo::default_instance_ = new GuildVacationInfo();
  GuildBuildingInfo::default_instance_ = new GuildBuildingInfo();
  GuildBuildingContributionInfo::default_instance_ = new GuildBuildingContributionInfo();
  GuildEvent::default_instance_ = new GuildEvent();
  PBMatchRoom::default_instance_ = new PBMatchRoom();
  MatchRoomCamps::default_instance_ = new MatchRoomCamps();
  PlayerMatchData::default_instance_ = new PlayerMatchData();
  MaxQuestCompleteId::default_instance_ = new MaxQuestCompleteId();
  QuestMaxQuestList::default_instance_ = new QuestMaxQuestList();
  LineStats::default_instance_ = new LineStats();
  SceneStats::default_instance_ = new SceneStats();
  DungeonBossInfo::default_instance_ = new DungeonBossInfo();
  SkillPosInfo::default_instance_ = new SkillPosInfo();
  WelfareReward::default_instance_ = new WelfareReward();
  AccumulateSignInfo::default_instance_ = new AccumulateSignInfo();
  OnlineInfo::default_instance_ = new OnlineInfo();
  LevelInfo::default_instance_ = new LevelInfo();
  MonthSignInInfo::default_instance_ = new MonthSignInInfo();
  TeamMemberQuickUpdateInfo::default_instance_ = new TeamMemberQuickUpdateInfo();
  WorldBossScoreInfo::default_instance_ = new WorldBossScoreInfo();
  WorldBossRank::default_instance_ = new WorldBossRank();
  PetSkill::default_instance_ = new PetSkill();
  PvpBattleEndInfo::default_instance_ = new PvpBattleEndInfo();
  PvpBattleRewardInfo::default_instance_ = new PvpBattleRewardInfo();
  ContactData::default_instance_ = new ContactData();
  ContactGroup::default_instance_ = new ContactGroup();
  DailyCount::default_instance_ = new DailyCount();
  ClimTowerInfo::default_instance_ = new ClimTowerInfo();
  ContactSetting::default_instance_ = new ContactSetting();
  FirstVicGet::default_instance_ = new FirstVicGet();
  ExpressionActionInfo::default_instance_ = new ExpressionActionInfo();
  IntPair::default_instance_ = new IntPair();
  AddressBook::default_instance_ = new AddressBook();
  AuctionItem::default_instance_ = new AuctionItem();
  AuctionRecSimple::default_instance_ = new AuctionRecSimple();
  AuctionRecDetail::default_instance_ = new AuctionRecDetail();
  MercenaryInfo::default_instance_ = new MercenaryInfo();
  RankInfo::default_instance_ = new RankInfo();
  AuctionItemCnt::default_instance_ = new AuctionItemCnt();
  RedDotInfo::default_instance_ = new RedDotInfo();
  FriendGiftPoint::default_instance_ = new FriendGiftPoint();
  FriendGifPointList::default_instance_ = new FriendGifPointList();
  DungeonTargetContent::default_instance_ = new DungeonTargetContent();
  DungeonTarget::default_instance_ = new DungeonTarget();
  MailItem::default_instance_ = new MailItem();
  ObjCreateInfo::default_instance_ = new ObjCreateInfo();
  ObjDeleteInfo::default_instance_ = new ObjDeleteInfo();
  MatchLimit::default_instance_ = new MatchLimit();
  MatchRankInfo::default_instance_ = new MatchRankInfo();
  MatchTargetInfo::default_instance_ = new MatchTargetInfo();
  ActivityTime::default_instance_ = new ActivityTime();
  ProfessionInfo::default_instance_ = new ProfessionInfo();
  SpecLoginReward::default_instance_ = new SpecLoginReward();
  SpecLoginInfo::default_instance_ = new SpecLoginInfo();
  ContactsChatMsg::default_instance_ = new ContactsChatMsg();
  Vector3Int::default_instance_ = new Vector3Int();
  AppendString::default_instance_ = new AppendString();
  AppendStringList::default_instance_ = new AppendStringList();
  StarBattlePlayerInfo::default_instance_ = new StarBattlePlayerInfo();
  StarBattleInfo::default_instance_ = new StarBattleInfo();
  StarBattleTeamInfo::default_instance_ = new StarBattleTeamInfo();
  ObjPosInfo::default_instance_ = new ObjPosInfo();
  CharacterInfo::default_instance_->InitAsDefaultInstance();
  Vector3::default_instance_->InitAsDefaultInstance();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  OnlineUserInfo::default_instance_->InitAsDefaultInstance();
  ItemData::default_instance_->InitAsDefaultInstance();
  AttrKeyValue::default_instance_->InitAsDefaultInstance();
  BagData::default_instance_->InitAsDefaultInstance();
  EquipAttr::default_instance_->InitAsDefaultInstance();
  ItemObj::default_instance_->InitAsDefaultInstance();
  ChatMsg::default_instance_->InitAsDefaultInstance();
  ChatInfo::default_instance_->InitAsDefaultInstance();
  ChatChannelData::default_instance_->InitAsDefaultInstance();
  CharacterLocation::default_instance_->InitAsDefaultInstance();
  QuestData::default_instance_->InitAsDefaultInstance();
  CustomSkiData::default_instance_->InitAsDefaultInstance();
  QuestStepData::default_instance_->InitAsDefaultInstance();
  QuestListData::default_instance_->InitAsDefaultInstance();
  DBBags::default_instance_->InitAsDefaultInstance();
  ItemResolveData::default_instance_->InitAsDefaultInstance();
  ItemSimpleData::default_instance_->InitAsDefaultInstance();
  ItemAutoOperatorData::default_instance_->InitAsDefaultInstance();
  SkillContainer::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  SkillObj::default_instance_->InitAsDefaultInstance();
  SuitInfo::default_instance_->InitAsDefaultInstance();
  WorldBossInfo::default_instance_->InitAsDefaultInstance();
  WorldBossRankInfo::default_instance_->InitAsDefaultInstance();
  EquipResonanceInfo::default_instance_->InitAsDefaultInstance();
  EquipResonanceData::default_instance_->InitAsDefaultInstance();
  EquipWashInfo::default_instance_->InitAsDefaultInstance();
  EquipWashData::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  BuinessSkillData::default_instance_->InitAsDefaultInstance();
  BuinessUnlockInfo::default_instance_->InitAsDefaultInstance();
  CompletedQuestList::default_instance_->InitAsDefaultInstance();
  EliteMonsterInfo::default_instance_->InitAsDefaultInstance();
  JewelSlot::default_instance_->InitAsDefaultInstance();
  JewelInfo::default_instance_->InitAsDefaultInstance();
  EquipSlotInfo::default_instance_->InitAsDefaultInstance();
  WorshipPlayerData::default_instance_->InitAsDefaultInstance();
  RecoverMedicament::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  EquipSlotStarInfo::default_instance_->InitAsDefaultInstance();
  DropItem::default_instance_->InitAsDefaultInstance();
  PetData::default_instance_->InitAsDefaultInstance();
  EquipBuildAtf::default_instance_->InitAsDefaultInstance();
  TreasureData::default_instance_->InitAsDefaultInstance();
  TreasureExtraInfo::default_instance_->InitAsDefaultInstance();
  TreasureDepotData::default_instance_->InitAsDefaultInstance();
  ShopItem::default_instance_->InitAsDefaultInstance();
  RandomQuestData::default_instance_->InitAsDefaultInstance();
  RandomQuestListData::default_instance_->InitAsDefaultInstance();
  PvpBattleInfo::default_instance_->InitAsDefaultInstance();
  PvpPlayerInfo::default_instance_->InitAsDefaultInstance();
  PvpPlayerState::default_instance_->InitAsDefaultInstance();
  PvpEndPlayer::default_instance_->InitAsDefaultInstance();
  DailyQuest::default_instance_->InitAsDefaultInstance();
  DailyQuestList::default_instance_->InitAsDefaultInstance();
  DungeonSituationData::default_instance_->InitAsDefaultInstance();
  DungeonData::default_instance_->InitAsDefaultInstance();
  TeamTarget::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  MatchInfo::default_instance_->InitAsDefaultInstance();
  TreasureEquipedID::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  GuildFlag::default_instance_->InitAsDefaultInstance();
  GuildNews::default_instance_->InitAsDefaultInstance();
  GuildMemberTinyInfo::default_instance_->InitAsDefaultInstance();
  GuildMemberInfo::default_instance_->InitAsDefaultInstance();
  GuildJurisdiction::default_instance_->InitAsDefaultInstance();
  GuildOfficeJurisdiction::default_instance_->InitAsDefaultInstance();
  GuildVacationInfo::default_instance_->InitAsDefaultInstance();
  GuildBuildingInfo::default_instance_->InitAsDefaultInstance();
  GuildBuildingContributionInfo::default_instance_->InitAsDefaultInstance();
  GuildEvent::default_instance_->InitAsDefaultInstance();
  PBMatchRoom::default_instance_->InitAsDefaultInstance();
  MatchRoomCamps::default_instance_->InitAsDefaultInstance();
  PlayerMatchData::default_instance_->InitAsDefaultInstance();
  MaxQuestCompleteId::default_instance_->InitAsDefaultInstance();
  QuestMaxQuestList::default_instance_->InitAsDefaultInstance();
  LineStats::default_instance_->InitAsDefaultInstance();
  SceneStats::default_instance_->InitAsDefaultInstance();
  DungeonBossInfo::default_instance_->InitAsDefaultInstance();
  SkillPosInfo::default_instance_->InitAsDefaultInstance();
  WelfareReward::default_instance_->InitAsDefaultInstance();
  AccumulateSignInfo::default_instance_->InitAsDefaultInstance();
  OnlineInfo::default_instance_->InitAsDefaultInstance();
  LevelInfo::default_instance_->InitAsDefaultInstance();
  MonthSignInInfo::default_instance_->InitAsDefaultInstance();
  TeamMemberQuickUpdateInfo::default_instance_->InitAsDefaultInstance();
  WorldBossScoreInfo::default_instance_->InitAsDefaultInstance();
  WorldBossRank::default_instance_->InitAsDefaultInstance();
  PetSkill::default_instance_->InitAsDefaultInstance();
  PvpBattleEndInfo::default_instance_->InitAsDefaultInstance();
  PvpBattleRewardInfo::default_instance_->InitAsDefaultInstance();
  ContactData::default_instance_->InitAsDefaultInstance();
  ContactGroup::default_instance_->InitAsDefaultInstance();
  DailyCount::default_instance_->InitAsDefaultInstance();
  ClimTowerInfo::default_instance_->InitAsDefaultInstance();
  ContactSetting::default_instance_->InitAsDefaultInstance();
  FirstVicGet::default_instance_->InitAsDefaultInstance();
  ExpressionActionInfo::default_instance_->InitAsDefaultInstance();
  IntPair::default_instance_->InitAsDefaultInstance();
  AddressBook::default_instance_->InitAsDefaultInstance();
  AuctionItem::default_instance_->InitAsDefaultInstance();
  AuctionRecSimple::default_instance_->InitAsDefaultInstance();
  AuctionRecDetail::default_instance_->InitAsDefaultInstance();
  MercenaryInfo::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  AuctionItemCnt::default_instance_->InitAsDefaultInstance();
  RedDotInfo::default_instance_->InitAsDefaultInstance();
  FriendGiftPoint::default_instance_->InitAsDefaultInstance();
  FriendGifPointList::default_instance_->InitAsDefaultInstance();
  DungeonTargetContent::default_instance_->InitAsDefaultInstance();
  DungeonTarget::default_instance_->InitAsDefaultInstance();
  MailItem::default_instance_->InitAsDefaultInstance();
  ObjCreateInfo::default_instance_->InitAsDefaultInstance();
  ObjDeleteInfo::default_instance_->InitAsDefaultInstance();
  MatchLimit::default_instance_->InitAsDefaultInstance();
  MatchRankInfo::default_instance_->InitAsDefaultInstance();
  MatchTargetInfo::default_instance_->InitAsDefaultInstance();
  ActivityTime::default_instance_->InitAsDefaultInstance();
  ProfessionInfo::default_instance_->InitAsDefaultInstance();
  SpecLoginReward::default_instance_->InitAsDefaultInstance();
  SpecLoginInfo::default_instance_->InitAsDefaultInstance();
  ContactsChatMsg::default_instance_->InitAsDefaultInstance();
  Vector3Int::default_instance_->InitAsDefaultInstance();
  AppendString::default_instance_->InitAsDefaultInstance();
  AppendStringList::default_instance_->InitAsDefaultInstance();
  StarBattlePlayerInfo::default_instance_->InitAsDefaultInstance();
  StarBattleInfo::default_instance_->InitAsDefaultInstance();
  StarBattleTeamInfo::default_instance_->InitAsDefaultInstance();
  ObjPosInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PublicStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PublicStruct_2eproto {
  StaticDescriptorInitializer_PublicStruct_2eproto() {
    protobuf_AddDesc_PublicStruct_2eproto();
  }
} static_descriptor_initializer_PublicStruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharacterInfo::kRoleIdFieldNumber;
const int CharacterInfo::kNicknameFieldNumber;
const int CharacterInfo::kConfigIdFieldNumber;
const int CharacterInfo::kHpFieldNumber;
const int CharacterInfo::kHpMaxFieldNumber;
const int CharacterInfo::kLevelFieldNumber;
const int CharacterInfo::kTreasureEquipedFieldNumber;
#endif  // !_MSC_VER

CharacterInfo::CharacterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfo::InitAsDefaultInstance() {
  treasureequiped_ = const_cast< ::TreasureEquipedID*>(&::TreasureEquipedID::default_instance());
}

CharacterInfo::CharacterInfo(const CharacterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  hp_ = -1;
  hpmax_ = -1;
  level_ = -1;
  treasureequiped_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfo::~CharacterInfo() {
  SharedDtor();
}

void CharacterInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete treasureequiped_;
  }
}

void CharacterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfo_descriptor_;
}

const CharacterInfo& CharacterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

CharacterInfo* CharacterInfo::default_instance_ = NULL;

CharacterInfo* CharacterInfo::New() const {
  return new CharacterInfo;
}

void CharacterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    configid_ = -1;
    hp_ = -1;
    hpmax_ = -1;
    level_ = -1;
    if (has_treasureequiped()) {
      if (treasureequiped_ != NULL) treasureequiped_->::TreasureEquipedID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nickname;
        break;
      }

      // optional string Nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Hp;
        break;
      }

      // optional int32 Hp = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HpMax;
        break;
      }

      // optional int32 HpMax = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // optional int32 Level = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_TreasureEquiped;
        break;
      }

      // optional .TreasureEquipedID TreasureEquiped = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TreasureEquiped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureequiped()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string Nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 ConfigId = 3 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // optional int32 Hp = 4 [default = -1];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // optional int32 HpMax = 5 [default = -1];
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hpmax(), output);
  }

  // optional int32 Level = 6 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional .TreasureEquipedID TreasureEquiped = 8;
  if (has_treasureequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->treasureequiped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string Nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 ConfigId = 3 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // optional int32 Hp = 4 [default = -1];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // optional int32 HpMax = 5 [default = -1];
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hpmax(), target);
  }

  // optional int32 Level = 6 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional .TreasureEquipedID TreasureEquiped = 8;
  if (has_treasureequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->treasureequiped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string Nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 ConfigId = 3 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 Hp = 4 [default = -1];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 HpMax = 5 [default = -1];
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 Level = 6 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .TreasureEquipedID TreasureEquiped = 8;
    if (has_treasureequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureequiped());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfo::MergeFrom(const CharacterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_treasureequiped()) {
      mutable_treasureequiped()->::TreasureEquipedID::MergeFrom(from.treasureequiped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfo::IsInitialized() const {

  return true;
}

void CharacterInfo::Swap(CharacterInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nickname_, other->nickname_);
    std::swap(configid_, other->configid_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(level_, other->level_);
    std::swap(treasureequiped_, other->treasureequiped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfo_descriptor_;
  metadata.reflection = CharacterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  y_ = -1;
  z_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    y_ = -1;
    z_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // optional float Z = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float Z = 3 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float Z = 3 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = -1];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float Z = 3 [default = -1];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kRoleIdFieldNumber;
const int TeamMemberInfo::kLevelFieldNumber;
const int TeamMemberInfo::kNameFieldNumber;
const int TeamMemberInfo::kConfigIdFieldNumber;
const int TeamMemberInfo::kHpFieldNumber;
const int TeamMemberInfo::kStatusFieldNumber;
const int TeamMemberInfo::kMaxHpFieldNumber;
const int TeamMemberInfo::kLocationFieldNumber;
const int TeamMemberInfo::kProfessionIdFieldNumber;
const int TeamMemberInfo::kOnLineFieldNumber;
const int TeamMemberInfo::kFollowTeamFieldNumber;
const int TeamMemberInfo::kBuffIdListFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  hp_ = -1;
  status_ = -1;
  maxhp_ = GOOGLE_LONGLONG(-1);
  location_ = NULL;
  professionid_ = -1;
  online_ = 1;
  followteam_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberInfo_descriptor_;
}

const TeamMemberInfo& TeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    configid_ = -1;
    hp_ = -1;
    status_ = -1;
    maxhp_ = GOOGLE_LONGLONG(-1);
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    professionid_ = -1;
    online_ = 1;
    followteam_ = -1;
  }
  buffidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Hp;
        break;
      }

      // optional int32 Hp = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Status;
        break;
      }

      // optional int32 Status = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaxHp;
        break;
      }

      // optional int64 MaxHp = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Location;
        break;
      }

      // optional .CharacterLocation Location = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ProfessionId;
        break;
      }

      // optional int32 ProfessionId = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProfessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_OnLine;
        break;
      }

      // optional int32 OnLine = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_FollowTeam;
        break;
      }

      // optional int32 FollowTeam = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FollowTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &followteam_)));
          set_has_followteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_BuffIdList;
        break;
      }

      // repeated int32 BuffIdList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_buffidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_BuffIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 Level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 ConfigId = 5 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->configid(), output);
  }

  // optional int32 Hp = 6 [default = -1];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 Status = 8 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

  // optional int64 MaxHp = 11 [default = -1];
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->maxhp(), output);
  }

  // optional .CharacterLocation Location = 15;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->location(), output);
  }

  // optional int32 ProfessionId = 16 [default = -1];
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->professionid(), output);
  }

  // optional int32 OnLine = 17 [default = 1];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->online(), output);
  }

  // optional int32 FollowTeam = 18 [default = -1];
  if (has_followteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->followteam(), output);
  }

  // repeated int32 BuffIdList = 19;
  for (int i = 0; i < this->buffidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->buffidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 Level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 ConfigId = 5 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->configid(), target);
  }

  // optional int32 Hp = 6 [default = -1];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // optional int32 Status = 8 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->status(), target);
  }

  // optional int64 MaxHp = 11 [default = -1];
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->maxhp(), target);
  }

  // optional .CharacterLocation Location = 15;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->location(), target);
  }

  // optional int32 ProfessionId = 16 [default = -1];
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->professionid(), target);
  }

  // optional int32 OnLine = 17 [default = 1];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->online(), target);
  }

  // optional int32 FollowTeam = 18 [default = -1];
  if (has_followteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->followteam(), target);
  }

  // repeated int32 BuffIdList = 19;
  for (int i = 0; i < this->buffidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->buffidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 ConfigId = 5 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 Hp = 6 [default = -1];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 Status = 8 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 MaxHp = 11 [default = -1];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional .CharacterLocation Location = 15;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ProfessionId = 16 [default = -1];
    if (has_professionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 OnLine = 17 [default = 1];
    if (has_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 FollowTeam = 18 [default = -1];
    if (has_followteam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->followteam());
    }

  }
  // repeated int32 BuffIdList = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffidlist(i));
    }
    total_size += 2 * this->buffidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffidlist_.MergeFrom(from.buffidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_followteam()) {
      set_followteam(from.followteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {

  return true;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(configid_, other->configid_);
    std::swap(hp_, other->hp_);
    std::swap(status_, other->status_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(location_, other->location_);
    std::swap(professionid_, other->professionid_);
    std::swap(online_, other->online_);
    std::swap(followteam_, other->followteam_);
    buffidlist_.Swap(&other->buffidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberInfo_descriptor_;
  metadata.reflection = TeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kMembersFieldNumber;
const int TeamInfo::kLeaderRoleIdFieldNumber;
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kTeamTypeFieldNumber;
const int TeamInfo::kTeamTargetFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
  teamtarget_ = const_cast< ::TeamTarget*>(&::TeamTarget::default_instance());
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  leaderroleid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teamtype_ = -1;
  teamtarget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teamtarget_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    leaderroleid_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_ULONGLONG(0);
    teamtype_ = -1;
    if (has_teamtarget()) {
      if (teamtarget_ != NULL) teamtarget_->::TeamTarget::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TeamMemberInfo Members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Members;
        if (input->ExpectTag(16)) goto parse_LeaderRoleId;
        break;
      }

      // optional uint64 LeaderRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderroleid_)));
          set_has_leaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TeamType;
        break;
      }

      // optional int32 TeamType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TeamTarget;
        break;
      }

      // optional .TeamTarget TeamTarget = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TeamTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TeamMemberInfo Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // optional uint64 LeaderRoleId = 2 [default = 0];
  if (has_leaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leaderroleid(), output);
  }

  // optional uint64 TeamId = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional int32 TeamType = 4 [default = -1];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamtype(), output);
  }

  // optional .TeamTarget TeamTarget = 5;
  if (has_teamtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teamtarget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TeamMemberInfo Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // optional uint64 LeaderRoleId = 2 [default = 0];
  if (has_leaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leaderroleid(), target);
  }

  // optional uint64 TeamId = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional int32 TeamType = 4 [default = -1];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamtype(), target);
  }

  // optional .TeamTarget TeamTarget = 5;
  if (has_teamtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teamtarget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 LeaderRoleId = 2 [default = 0];
    if (has_leaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderroleid());
    }

    // optional uint64 TeamId = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional int32 TeamType = 4 [default = -1];
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamtype());
    }

    // optional .TeamTarget TeamTarget = 5;
    if (has_teamtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtarget());
    }

  }
  // repeated .TeamMemberInfo Members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leaderroleid()) {
      set_leaderroleid(from.leaderroleid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_teamtarget()) {
      mutable_teamtarget()->::TeamTarget::MergeFrom(from.teamtarget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(leaderroleid_, other->leaderroleid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(teamtarget_, other->teamtarget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineUserInfo::kRoleIdFieldNumber;
const int OnlineUserInfo::kLevelFieldNumber;
const int OnlineUserInfo::kLocationFieldNumber;
const int OnlineUserInfo::kGuildguidFieldNumber;
const int OnlineUserInfo::kPlayerMatchDataFieldNumber;
const int OnlineUserInfo::kRoleNameFieldNumber;
const int OnlineUserInfo::kConfigIDFieldNumber;
const int OnlineUserInfo::kTreasureCountFieldNumber;
const int OnlineUserInfo::kTreasureLevelFieldNumber;
const int OnlineUserInfo::kPetConfigIDFieldNumber;
const int OnlineUserInfo::kPetLevelFieldNumber;
const int OnlineUserInfo::kPvP3V3WinCountFieldNumber;
#endif  // !_MSC_VER

OnlineUserInfo::OnlineUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineUserInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
  playermatchdata_ = const_cast< ::PlayerMatchData*>(&::PlayerMatchData::default_instance());
}

OnlineUserInfo::OnlineUserInfo(const OnlineUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineUserInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  level_ = -1;
  location_ = NULL;
  guildguid_ = GOOGLE_ULONGLONG(0);
  playermatchdata_ = NULL;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  treasurecount_ = -1;
  treasurelevel_ = -1;
  petconfigid_ = -1;
  petlevel_ = -1;
  pvp3v3wincount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineUserInfo::~OnlineUserInfo() {
  SharedDtor();
}

void OnlineUserInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete location_;
    delete playermatchdata_;
  }
}

void OnlineUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineUserInfo_descriptor_;
}

const OnlineUserInfo& OnlineUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

OnlineUserInfo* OnlineUserInfo::default_instance_ = NULL;

OnlineUserInfo* OnlineUserInfo::New() const {
  return new OnlineUserInfo;
}

void OnlineUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    level_ = -1;
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
    guildguid_ = GOOGLE_ULONGLONG(0);
    if (has_playermatchdata()) {
      if (playermatchdata_ != NULL) playermatchdata_->::PlayerMatchData::Clear();
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    configid_ = -1;
    treasurecount_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    treasurelevel_ = -1;
    petconfigid_ = -1;
    petlevel_ = -1;
    pvp3v3wincount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Location;
        break;
      }

      // optional .CharacterLocation Location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Guildguid;
        break;
      }

      // optional uint64 Guildguid = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guildguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildguid_)));
          set_has_guildguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PlayerMatchData;
        break;
      }

      // optional .PlayerMatchData PlayerMatchData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerMatchData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playermatchdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ConfigID;
        break;
      }

      // optional int32 ConfigID = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TreasureCount;
        break;
      }

      // optional int32 TreasureCount = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurecount_)));
          set_has_treasurecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TreasureLevel;
        break;
      }

      // optional int32 TreasureLevel = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurelevel_)));
          set_has_treasurelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PetConfigID;
        break;
      }

      // optional int32 PetConfigID = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PetConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petconfigid_)));
          set_has_petconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PetLevel;
        break;
      }

      // optional int32 PetLevel = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PetLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petlevel_)));
          set_has_petlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PvP3v3WinCount;
        break;
      }

      // optional int32 PvP3v3WinCount = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PvP3v3WinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp3v3wincount_)));
          set_has_pvp3v3wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional .CharacterLocation Location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->location(), output);
  }

  // optional uint64 Guildguid = 6 [default = 0];
  if (has_guildguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->guildguid(), output);
  }

  // optional .PlayerMatchData PlayerMatchData = 7;
  if (has_playermatchdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->playermatchdata(), output);
  }

  // optional string RoleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rolename(), output);
  }

  // optional int32 ConfigID = 9 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->configid(), output);
  }

  // optional int32 TreasureCount = 10 [default = -1];
  if (has_treasurecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->treasurecount(), output);
  }

  // optional int32 TreasureLevel = 11 [default = -1];
  if (has_treasurelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->treasurelevel(), output);
  }

  // optional int32 PetConfigID = 12 [default = -1];
  if (has_petconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->petconfigid(), output);
  }

  // optional int32 PetLevel = 13 [default = -1];
  if (has_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->petlevel(), output);
  }

  // optional int32 PvP3v3WinCount = 14 [default = -1];
  if (has_pvp3v3wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pvp3v3wincount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional .CharacterLocation Location = 5;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }

  // optional uint64 Guildguid = 6 [default = 0];
  if (has_guildguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->guildguid(), target);
  }

  // optional .PlayerMatchData PlayerMatchData = 7;
  if (has_playermatchdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->playermatchdata(), target);
  }

  // optional string RoleName = 8;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rolename(), target);
  }

  // optional int32 ConfigID = 9 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->configid(), target);
  }

  // optional int32 TreasureCount = 10 [default = -1];
  if (has_treasurecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->treasurecount(), target);
  }

  // optional int32 TreasureLevel = 11 [default = -1];
  if (has_treasurelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->treasurelevel(), target);
  }

  // optional int32 PetConfigID = 12 [default = -1];
  if (has_petconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->petconfigid(), target);
  }

  // optional int32 PetLevel = 13 [default = -1];
  if (has_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->petlevel(), target);
  }

  // optional int32 PvP3v3WinCount = 14 [default = -1];
  if (has_pvp3v3wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pvp3v3wincount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Level = 2 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .CharacterLocation Location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional uint64 Guildguid = 6 [default = 0];
    if (has_guildguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildguid());
    }

    // optional .PlayerMatchData PlayerMatchData = 7;
    if (has_playermatchdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playermatchdata());
    }

    // optional string RoleName = 8;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 ConfigID = 9 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 TreasureCount = 10 [default = -1];
    if (has_treasurecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurecount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 TreasureLevel = 11 [default = -1];
    if (has_treasurelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurelevel());
    }

    // optional int32 PetConfigID = 12 [default = -1];
    if (has_petconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petconfigid());
    }

    // optional int32 PetLevel = 13 [default = -1];
    if (has_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petlevel());
    }

    // optional int32 PvP3v3WinCount = 14 [default = -1];
    if (has_pvp3v3wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp3v3wincount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineUserInfo::MergeFrom(const OnlineUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
    if (from.has_guildguid()) {
      set_guildguid(from.guildguid());
    }
    if (from.has_playermatchdata()) {
      mutable_playermatchdata()->::PlayerMatchData::MergeFrom(from.playermatchdata());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_treasurecount()) {
      set_treasurecount(from.treasurecount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treasurelevel()) {
      set_treasurelevel(from.treasurelevel());
    }
    if (from.has_petconfigid()) {
      set_petconfigid(from.petconfigid());
    }
    if (from.has_petlevel()) {
      set_petlevel(from.petlevel());
    }
    if (from.has_pvp3v3wincount()) {
      set_pvp3v3wincount(from.pvp3v3wincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineUserInfo::CopyFrom(const OnlineUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineUserInfo::IsInitialized() const {

  return true;
}

void OnlineUserInfo::Swap(OnlineUserInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(level_, other->level_);
    std::swap(location_, other->location_);
    std::swap(guildguid_, other->guildguid_);
    std::swap(playermatchdata_, other->playermatchdata_);
    std::swap(rolename_, other->rolename_);
    std::swap(configid_, other->configid_);
    std::swap(treasurecount_, other->treasurecount_);
    std::swap(treasurelevel_, other->treasurelevel_);
    std::swap(petconfigid_, other->petconfigid_);
    std::swap(petlevel_, other->petlevel_);
    std::swap(pvp3v3wincount_, other->pvp3v3wincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineUserInfo_descriptor_;
  metadata.reflection = OnlineUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemData::kIsLockFieldNumber;
const int ItemData::kOverlayCountFieldNumber;
const int ItemData::kConfigIdFieldNumber;
const int ItemData::kEquipAttrFieldNumber;
const int ItemData::kIsBindFieldNumber;
const int ItemData::kGuidFieldNumber;
const int ItemData::kPetDataFieldNumber;
const int ItemData::kBindRuleFieldNumber;
const int ItemData::kSaleCDFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemData::InitAsDefaultInstance() {
  equipattr_ = const_cast< ::EquipAttr*>(&::EquipAttr::default_instance());
  petdata_ = const_cast< ::PetData*>(&::PetData::default_instance());
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  islock_ = false;
  overlaycount_ = -1;
  configid_ = -1;
  equipattr_ = NULL;
  isbind_ = true;
  guid_ = GOOGLE_ULONGLONG(0);
  petdata_ = NULL;
  bindrule_ = 1;
  salecd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  SharedDtor();
}

void ItemData::SharedDtor() {
  if (this != default_instance_) {
    delete equipattr_;
    delete petdata_;
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemData_descriptor_;
}

const ItemData& ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    islock_ = false;
    overlaycount_ = -1;
    configid_ = -1;
    if (has_equipattr()) {
      if (equipattr_ != NULL) equipattr_->::EquipAttr::Clear();
    }
    isbind_ = true;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_petdata()) {
      if (petdata_ != NULL) petdata_->::PetData::Clear();
    }
    bindrule_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    salecd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsLock = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OverlayCount;
        break;
      }

      // optional int32 OverlayCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OverlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlaycount_)));
          set_has_overlaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EquipAttr;
        break;
      }

      // optional .EquipAttr EquipAttr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsBind;
        break;
      }

      // optional bool IsBind = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbind_)));
          set_has_isbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Guid;
        break;
      }

      // optional uint64 Guid = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_PetData;
        break;
      }

      // optional .PetData PetData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PetData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_BindRule;
        break;
      }

      // optional int32 BindRule = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindrule_)));
          set_has_bindrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_SaleCD;
        break;
      }

      // optional int32 SaleCD = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SaleCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salecd_)));
          set_has_salecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsLock = 2 [default = false];
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->islock(), output);
  }

  // optional int32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->overlaycount(), output);
  }

  // optional int32 ConfigId = 4 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->configid(), output);
  }

  // optional .EquipAttr EquipAttr = 5;
  if (has_equipattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipattr(), output);
  }

  // optional bool IsBind = 12 [default = true];
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isbind(), output);
  }

  // optional uint64 Guid = 13 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guid(), output);
  }

  // optional .PetData PetData = 14;
  if (has_petdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->petdata(), output);
  }

  // optional int32 BindRule = 15 [default = 1];
  if (has_bindrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bindrule(), output);
  }

  // optional int32 SaleCD = 16 [default = 0];
  if (has_salecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->salecd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsLock = 2 [default = false];
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->islock(), target);
  }

  // optional int32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->overlaycount(), target);
  }

  // optional int32 ConfigId = 4 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->configid(), target);
  }

  // optional .EquipAttr EquipAttr = 5;
  if (has_equipattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipattr(), target);
  }

  // optional bool IsBind = 12 [default = true];
  if (has_isbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isbind(), target);
  }

  // optional uint64 Guid = 13 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guid(), target);
  }

  // optional .PetData PetData = 14;
  if (has_petdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->petdata(), target);
  }

  // optional int32 BindRule = 15 [default = 1];
  if (has_bindrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bindrule(), target);
  }

  // optional int32 SaleCD = 16 [default = 0];
  if (has_salecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->salecd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsLock = 2 [default = false];
    if (has_islock()) {
      total_size += 1 + 1;
    }

    // optional int32 OverlayCount = 3 [default = -1];
    if (has_overlaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlaycount());
    }

    // optional int32 ConfigId = 4 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional .EquipAttr EquipAttr = 5;
    if (has_equipattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipattr());
    }

    // optional bool IsBind = 12 [default = true];
    if (has_isbind()) {
      total_size += 1 + 1;
    }

    // optional uint64 Guid = 13 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .PetData PetData = 14;
    if (has_petdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petdata());
    }

    // optional int32 BindRule = 15 [default = 1];
    if (has_bindrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindrule());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 SaleCD = 16 [default = 0];
    if (has_salecd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salecd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_overlaycount()) {
      set_overlaycount(from.overlaycount());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_equipattr()) {
      mutable_equipattr()->::EquipAttr::MergeFrom(from.equipattr());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_petdata()) {
      mutable_petdata()->::PetData::MergeFrom(from.petdata());
    }
    if (from.has_bindrule()) {
      set_bindrule(from.bindrule());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_salecd()) {
      set_salecd(from.salecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(islock_, other->islock_);
    std::swap(overlaycount_, other->overlaycount_);
    std::swap(configid_, other->configid_);
    std::swap(equipattr_, other->equipattr_);
    std::swap(isbind_, other->isbind_);
    std::swap(guid_, other->guid_);
    std::swap(petdata_, other->petdata_);
    std::swap(bindrule_, other->bindrule_);
    std::swap(salecd_, other->salecd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemData_descriptor_;
  metadata.reflection = ItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrKeyValue::kKeyFieldNumber;
const int AttrKeyValue::kValueFieldNumber;
const int AttrKeyValue::kQualityFieldNumber;
#endif  // !_MSC_VER

AttrKeyValue::AttrKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrKeyValue::InitAsDefaultInstance() {
}

AttrKeyValue::AttrKeyValue(const AttrKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = -1;
  value_ = GOOGLE_LONGLONG(-1);
  quality_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrKeyValue::~AttrKeyValue() {
  SharedDtor();
}

void AttrKeyValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrKeyValue_descriptor_;
}

const AttrKeyValue& AttrKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AttrKeyValue* AttrKeyValue::default_instance_ = NULL;

AttrKeyValue* AttrKeyValue::New() const {
  return new AttrKeyValue;
}

void AttrKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = -1;
    value_ = GOOGLE_LONGLONG(-1);
    quality_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Key = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int64 Value = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Quality;
        break;
      }

      // optional int32 Quality = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Key = 1 [default = -1];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int64 Value = 2 [default = -1];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int32 Quality = 3 [default = -1];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Key = 1 [default = -1];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int64 Value = 2 [default = -1];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int32 Quality = 3 [default = -1];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Key = 1 [default = -1];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int64 Value = 2 [default = -1];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int32 Quality = 3 [default = -1];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrKeyValue::MergeFrom(const AttrKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrKeyValue::CopyFrom(const AttrKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrKeyValue::IsInitialized() const {

  return true;
}

void AttrKeyValue::Swap(AttrKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrKeyValue_descriptor_;
  metadata.reflection = AttrKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagData::kItemsFieldNumber;
const int BagData::kBagTypeFieldNumber;
const int BagData::kCurCapacityFieldNumber;
#endif  // !_MSC_VER

BagData::BagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagData::InitAsDefaultInstance() {
}

BagData::BagData(const BagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagData::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = -1;
  curcapacity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagData::~BagData() {
  SharedDtor();
}

void BagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagData_descriptor_;
}

const BagData& BagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

BagData* BagData::default_instance_ = NULL;

BagData* BagData::New() const {
  return new BagData;
}

void BagData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bagtype_ = -1;
    curcapacity_ = -1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemObj Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectTag(16)) goto parse_BagType;
        break;
      }

      // optional int32 BagType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurCapacity;
        break;
      }

      // optional int32 CurCapacity = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcapacity_)));
          set_has_curcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemObj Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional int32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bagtype(), output);
  }

  // optional int32 CurCapacity = 3 [default = -1];
  if (has_curcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curcapacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemObj Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional int32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bagtype(), target);
  }

  // optional int32 CurCapacity = 3 [default = -1];
  if (has_curcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curcapacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 BagType = 2 [default = -1];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagtype());
    }

    // optional int32 CurCapacity = 3 [default = -1];
    if (has_curcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcapacity());
    }

  }
  // repeated .ItemObj Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagData::MergeFrom(const BagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_curcapacity()) {
      set_curcapacity(from.curcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagData::CopyFrom(const BagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagData::IsInitialized() const {

  return true;
}

void BagData::Swap(BagData* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(curcapacity_, other->curcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagData_descriptor_;
  metadata.reflection = BagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipAttr::kBaseAttrFieldNumber;
const int EquipAttr::kExtraAttrFieldNumber;
const int EquipAttr::kBattleScoreFieldNumber;
#endif  // !_MSC_VER

EquipAttr::EquipAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipAttr::InitAsDefaultInstance() {
}

EquipAttr::EquipAttr(const EquipAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipAttr::SharedCtor() {
  _cached_size_ = 0;
  battlescore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAttr::~EquipAttr() {
  SharedDtor();
}

void EquipAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipAttr_descriptor_;
}

const EquipAttr& EquipAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipAttr* EquipAttr::default_instance_ = NULL;

EquipAttr* EquipAttr::New() const {
  return new EquipAttr;
}

void EquipAttr::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    battlescore_ = -1;
  }
  baseattr_.Clear();
  extraattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AttrKeyValue BaseAttr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BaseAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BaseAttr;
        if (input->ExpectTag(18)) goto parse_ExtraAttr;
        break;
      }

      // repeated .AttrKeyValue ExtraAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExtraAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extraattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExtraAttr;
        if (input->ExpectTag(24)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AttrKeyValue BaseAttr = 1;
  for (int i = 0; i < this->baseattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseattr(i), output);
  }

  // repeated .AttrKeyValue ExtraAttr = 2;
  for (int i = 0; i < this->extraattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extraattr(i), output);
  }

  // optional int32 BattleScore = 3 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AttrKeyValue BaseAttr = 1;
  for (int i = 0; i < this->baseattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseattr(i), target);
  }

  // repeated .AttrKeyValue ExtraAttr = 2;
  for (int i = 0; i < this->extraattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extraattr(i), target);
  }

  // optional int32 BattleScore = 3 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 BattleScore = 3 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

  }
  // repeated .AttrKeyValue BaseAttr = 1;
  total_size += 1 * this->baseattr_size();
  for (int i = 0; i < this->baseattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseattr(i));
  }

  // repeated .AttrKeyValue ExtraAttr = 2;
  total_size += 1 * this->extraattr_size();
  for (int i = 0; i < this->extraattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extraattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipAttr::MergeFrom(const EquipAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseattr_.MergeFrom(from.baseattr_);
  extraattr_.MergeFrom(from.extraattr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipAttr::CopyFrom(const EquipAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAttr::IsInitialized() const {

  return true;
}

void EquipAttr::Swap(EquipAttr* other) {
  if (other != this) {
    baseattr_.Swap(&other->baseattr_);
    extraattr_.Swap(&other->extraattr_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipAttr_descriptor_;
  metadata.reflection = EquipAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemObj::kPosFieldNumber;
const int ItemObj::kItemDataFieldNumber;
const int ItemObj::kRedPointFieldNumber;
#endif  // !_MSC_VER

ItemObj::ItemObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemObj::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

ItemObj::ItemObj(const ItemObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemObj::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  itemdata_ = NULL;
  redpoint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemObj::~ItemObj() {
  SharedDtor();
}

void ItemObj::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void ItemObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemObj_descriptor_;
}

const ItemObj& ItemObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ItemObj* ItemObj::default_instance_ = NULL;

ItemObj* ItemObj::New() const {
  return new ItemObj;
}

void ItemObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
    }
    redpoint_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Pos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemData;
        break;
      }

      // optional .ItemData ItemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RedPoint;
        break;
      }

      // optional bool RedPoint = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RedPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redpoint_)));
          set_has_redpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional .ItemData ItemData = 2;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemdata(), output);
  }

  // optional bool RedPoint = 3 [default = false];
  if (has_redpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->redpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional .ItemData ItemData = 2;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemdata(), target);
  }

  // optional bool RedPoint = 3 [default = false];
  if (has_redpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->redpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Pos = 1 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .ItemData ItemData = 2;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional bool RedPoint = 3 [default = false];
    if (has_redpoint()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemObj::MergeFrom(const ItemObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_redpoint()) {
      set_redpoint(from.redpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemObj::CopyFrom(const ItemObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemObj::IsInitialized() const {

  return true;
}

void ItemObj::Swap(ItemObj* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(redpoint_, other->redpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemObj_descriptor_;
  metadata.reflection = ItemObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsg::kChatContentFieldNumber;
const int ChatMsg::kChatVoiceUrlFieldNumber;
const int ChatMsg::kChatVoiceSecsFieldNumber;
#endif  // !_MSC_VER

ChatMsg::ChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsg::InitAsDefaultInstance() {
}

ChatMsg::ChatMsg(const ChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsg::SharedCtor() {
  _cached_size_ = 0;
  chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_voice_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_voice_secs_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsg::~ChatMsg() {
  SharedDtor();
}

void ChatMsg::SharedDtor() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (chat_voice_url_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_voice_url_;
  }
  if (this != default_instance_) {
  }
}

void ChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsg_descriptor_;
}

const ChatMsg& ChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ChatMsg* ChatMsg::default_instance_ = NULL;

ChatMsg* ChatMsg::New() const {
  return new ChatMsg;
}

void ChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_content()) {
      if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
        chat_content_->clear();
      }
    }
    if (has_chat_voice_url()) {
      if (chat_voice_url_ != &::google::protobuf::internal::kEmptyString) {
        chat_voice_url_->clear();
      }
    }
    chat_voice_secs_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Chat_content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_content().data(), this->chat_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Chat_voice_url;
        break;
      }

      // optional string Chat_voice_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chat_voice_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_voice_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_voice_url().data(), this->chat_voice_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Chat_voice_secs;
        break;
      }

      // optional int32 Chat_voice_secs = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chat_voice_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_voice_secs_)));
          set_has_chat_voice_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Chat_content = 1;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chat_content(), output);
  }

  // optional string Chat_voice_url = 2;
  if (has_chat_voice_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_voice_url().data(), this->chat_voice_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chat_voice_url(), output);
  }

  // optional int32 Chat_voice_secs = 3 [default = -1];
  if (has_chat_voice_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_voice_secs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Chat_content = 1;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_content(), target);
  }

  // optional string Chat_voice_url = 2;
  if (has_chat_voice_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_voice_url().data(), this->chat_voice_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_voice_url(), target);
  }

  // optional int32 Chat_voice_secs = 3 [default = -1];
  if (has_chat_voice_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_voice_secs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Chat_content = 1;
    if (has_chat_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_content());
    }

    // optional string Chat_voice_url = 2;
    if (has_chat_voice_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_voice_url());
    }

    // optional int32 Chat_voice_secs = 3 [default = -1];
    if (has_chat_voice_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_voice_secs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_content()) {
      set_chat_content(from.chat_content());
    }
    if (from.has_chat_voice_url()) {
      set_chat_voice_url(from.chat_voice_url());
    }
    if (from.has_chat_voice_secs()) {
      set_chat_voice_secs(from.chat_voice_secs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {

  return true;
}

void ChatMsg::Swap(ChatMsg* other) {
  if (other != this) {
    std::swap(chat_content_, other->chat_content_);
    std::swap(chat_voice_url_, other->chat_voice_url_);
    std::swap(chat_voice_secs_, other->chat_voice_secs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsg_descriptor_;
  metadata.reflection = ChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatInfo::kPlayerNameFieldNumber;
const int ChatInfo::kPlayerGuidFieldNumber;
const int ChatInfo::kAvatarIdFieldNumber;
const int ChatInfo::kPlayerLevelFieldNumber;
const int ChatInfo::kAvatarFrameIdFieldNumber;
const int ChatInfo::kConfigIdFieldNumber;
const int ChatInfo::kTimestampFieldNumber;
const int ChatInfo::kChatMsgFieldNumber;
const int ChatInfo::kTeamIdFieldNumber;
const int ChatInfo::kGuildGuidFieldNumber;
#endif  // !_MSC_VER

ChatInfo::ChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatInfo::InitAsDefaultInstance() {
  chat_msg_ = const_cast< ::ChatMsg*>(&::ChatMsg::default_instance());
}

ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatInfo::SharedCtor() {
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_guid_ = GOOGLE_ULONGLONG(0);
  avatar_id_ = -1;
  player_level_ = -1;
  avatar_frame_id_ = -1;
  config_id_ = -1;
  timestamp_ = GOOGLE_ULONGLONG(0);
  chat_msg_ = NULL;
  team_id_ = GOOGLE_ULONGLONG(0);
  guild_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfo::~ChatInfo() {
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
    delete chat_msg_;
  }
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_descriptor_;
}

const ChatInfo& ChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ChatInfo* ChatInfo::default_instance_ = NULL;

ChatInfo* ChatInfo::New() const {
  return new ChatInfo;
}

void ChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_guid_ = GOOGLE_ULONGLONG(0);
    avatar_id_ = -1;
    player_level_ = -1;
    avatar_frame_id_ = -1;
    config_id_ = -1;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_chat_msg()) {
      if (chat_msg_ != NULL) chat_msg_->::ChatMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team_id_ = GOOGLE_ULONGLONG(0);
    guild_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Player_guid;
        break;
      }

      // optional uint64 Player_guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Avatar_id;
        break;
      }

      // optional int32 Avatar_id = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_id_)));
          set_has_avatar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Player_level;
        break;
      }

      // optional int32 Player_level = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_)));
          set_has_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Avatar_frame_id;
        break;
      }

      // optional int32 Avatar_frame_id = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Avatar_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_frame_id_)));
          set_has_avatar_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Config_id;
        break;
      }

      // optional int32 Config_id = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Timestamp;
        break;
      }

      // optional uint64 Timestamp = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Chat_msg;
        break;
      }

      // optional .ChatMsg Chat_msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Team_id;
        break;
      }

      // optional uint64 Team_id = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Guild_guid;
        break;
      }

      // optional uint64 Guild_guid = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_guid_)));
          set_has_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_name(), output);
  }

  // optional uint64 Player_guid = 2 [default = 0];
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  // optional int32 Avatar_id = 3 [default = -1];
  if (has_avatar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->avatar_id(), output);
  }

  // optional int32 Player_level = 4 [default = -1];
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_level(), output);
  }

  // optional int32 Avatar_frame_id = 5 [default = -1];
  if (has_avatar_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->avatar_frame_id(), output);
  }

  // optional int32 Config_id = 6 [default = -1];
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->config_id(), output);
  }

  // optional uint64 Timestamp = 7 [default = 0];
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  // optional .ChatMsg Chat_msg = 8;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chat_msg(), output);
  }

  // optional uint64 Team_id = 9 [default = 0];
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->team_id(), output);
  }

  // optional uint64 Guild_guid = 10 [default = 0];
  if (has_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->guild_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // optional uint64 Player_guid = 2 [default = 0];
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  // optional int32 Avatar_id = 3 [default = -1];
  if (has_avatar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->avatar_id(), target);
  }

  // optional int32 Player_level = 4 [default = -1];
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_level(), target);
  }

  // optional int32 Avatar_frame_id = 5 [default = -1];
  if (has_avatar_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->avatar_frame_id(), target);
  }

  // optional int32 Config_id = 6 [default = -1];
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->config_id(), target);
  }

  // optional uint64 Timestamp = 7 [default = 0];
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  // optional .ChatMsg Chat_msg = 8;
  if (has_chat_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chat_msg(), target);
  }

  // optional uint64 Team_id = 9 [default = 0];
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->team_id(), target);
  }

  // optional uint64 Guild_guid = 10 [default = 0];
  if (has_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->guild_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint64 Player_guid = 2 [default = 0];
    if (has_player_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_guid());
    }

    // optional int32 Avatar_id = 3 [default = -1];
    if (has_avatar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_id());
    }

    // optional int32 Player_level = 4 [default = -1];
    if (has_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level());
    }

    // optional int32 Avatar_frame_id = 5 [default = -1];
    if (has_avatar_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_frame_id());
    }

    // optional int32 Config_id = 6 [default = -1];
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional uint64 Timestamp = 7 [default = 0];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .ChatMsg Chat_msg = 8;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_msg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 Team_id = 9 [default = 0];
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 Guild_guid = 10 [default = 0];
    if (has_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_avatar_id()) {
      set_avatar_id(from.avatar_id());
    }
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
    if (from.has_avatar_frame_id()) {
      set_avatar_frame_id(from.avatar_frame_id());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_chat_msg()) {
      mutable_chat_msg()->::ChatMsg::MergeFrom(from.chat_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_guild_guid()) {
      set_guild_guid(from.guild_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {

  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(avatar_id_, other->avatar_id_);
    std::swap(player_level_, other->player_level_);
    std::swap(avatar_frame_id_, other->avatar_frame_id_);
    std::swap(config_id_, other->config_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(team_id_, other->team_id_);
    std::swap(guild_guid_, other->guild_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfo_descriptor_;
  metadata.reflection = ChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatChannelData::kChatChannelFieldNumber;
const int ChatChannelData::kChatInfosFieldNumber;
#endif  // !_MSC_VER

ChatChannelData::ChatChannelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatChannelData::InitAsDefaultInstance() {
}

ChatChannelData::ChatChannelData(const ChatChannelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatChannelData::SharedCtor() {
  _cached_size_ = 0;
  chat_channel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatChannelData::~ChatChannelData() {
  SharedDtor();
}

void ChatChannelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatChannelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatChannelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatChannelData_descriptor_;
}

const ChatChannelData& ChatChannelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ChatChannelData* ChatChannelData::default_instance_ = NULL;

ChatChannelData* ChatChannelData::New() const {
  return new ChatChannelData;
}

void ChatChannelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_channel_ = -1;
  }
  chat_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatChannelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Chat_channel = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_channel_)));
          set_has_chat_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Chat_infos;
        break;
      }

      // repeated .ChatInfo Chat_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chat_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Chat_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatChannelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Chat_channel = 1 [default = -1];
  if (has_chat_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chat_channel(), output);
  }

  // repeated .ChatInfo Chat_infos = 2;
  for (int i = 0; i < this->chat_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatChannelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Chat_channel = 1 [default = -1];
  if (has_chat_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chat_channel(), target);
  }

  // repeated .ChatInfo Chat_infos = 2;
  for (int i = 0; i < this->chat_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatChannelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Chat_channel = 1 [default = -1];
    if (has_chat_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_channel());
    }

  }
  // repeated .ChatInfo Chat_infos = 2;
  total_size += 1 * this->chat_infos_size();
  for (int i = 0; i < this->chat_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatChannelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatChannelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatChannelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatChannelData::MergeFrom(const ChatChannelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_infos_.MergeFrom(from.chat_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_channel()) {
      set_chat_channel(from.chat_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatChannelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatChannelData::CopyFrom(const ChatChannelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelData::IsInitialized() const {

  return true;
}

void ChatChannelData::Swap(ChatChannelData* other) {
  if (other != this) {
    std::swap(chat_channel_, other->chat_channel_);
    chat_infos_.Swap(&other->chat_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatChannelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatChannelData_descriptor_;
  metadata.reflection = ChatChannelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterLocation::kSceneIdFieldNumber;
const int CharacterLocation::kPosFieldNumber;
const int CharacterLocation::kMapIdFieldNumber;
const int CharacterLocation::kDungeonConfigIdFieldNumber;
const int CharacterLocation::kLineIdFieldNumber;
const int CharacterLocation::kSceneConfigIdFieldNumber;
const int CharacterLocation::kMirrorIdFieldNumber;
const int CharacterLocation::kServerIdFieldNumber;
#endif  // !_MSC_VER

CharacterLocation::CharacterLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterLocation::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

CharacterLocation::CharacterLocation(const CharacterLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterLocation::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = -1;
  pos_ = NULL;
  mapid_ = -1;
  dungeonconfigid_ = -1;
  lineid_ = -1;
  sceneconfigid_ = -1;
  mirrorid_ = -1;
  serverid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterLocation::~CharacterLocation() {
  SharedDtor();
}

void CharacterLocation::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CharacterLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterLocation_descriptor_;
}

const CharacterLocation& CharacterLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

CharacterLocation* CharacterLocation::default_instance_ = NULL;

CharacterLocation* CharacterLocation::New() const {
  return new CharacterLocation;
}

void CharacterLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
    mapid_ = -1;
    dungeonconfigid_ = -1;
    lineid_ = -1;
    sceneconfigid_ = -1;
    mirrorid_ = -1;
    serverid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MapId;
        break;
      }

      // optional int32 MapId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DungeonConfigId;
        break;
      }

      // optional int32 DungeonConfigId = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LineId;
        break;
      }

      // optional int32 LineId = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SceneConfigId;
        break;
      }

      // optional int32 SceneConfigId = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneconfigid_)));
          set_has_sceneconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MirrorId;
        break;
      }

      // optional int32 MirrorId = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MirrorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirrorid_)));
          set_has_mirrorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ServerId;
        break;
      }

      // optional int32 ServerId = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  // optional .Vector3 Pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional int32 MapId = 5 [default = -1];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapid(), output);
  }

  // optional int32 DungeonConfigId = 6 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dungeonconfigid(), output);
  }

  // optional int32 LineId = 7 [default = -1];
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lineid(), output);
  }

  // optional int32 SceneConfigId = 8 [default = -1];
  if (has_sceneconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sceneconfigid(), output);
  }

  // optional int32 MirrorId = 9 [default = -1];
  if (has_mirrorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mirrorid(), output);
  }

  // optional int32 ServerId = 10 [default = -1];
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  // optional .Vector3 Pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional int32 MapId = 5 [default = -1];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapid(), target);
  }

  // optional int32 DungeonConfigId = 6 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dungeonconfigid(), target);
  }

  // optional int32 LineId = 7 [default = -1];
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lineid(), target);
  }

  // optional int32 SceneConfigId = 8 [default = -1];
  if (has_sceneconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sceneconfigid(), target);
  }

  // optional int32 MirrorId = 9 [default = -1];
  if (has_mirrorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mirrorid(), target);
  }

  // optional int32 ServerId = 10 [default = -1];
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional .Vector3 Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 MapId = 5 [default = -1];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 DungeonConfigId = 6 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

    // optional int32 LineId = 7 [default = -1];
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

    // optional int32 SceneConfigId = 8 [default = -1];
    if (has_sceneconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneconfigid());
    }

    // optional int32 MirrorId = 9 [default = -1];
    if (has_mirrorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirrorid());
    }

    // optional int32 ServerId = 10 [default = -1];
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterLocation::MergeFrom(const CharacterLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
    if (from.has_sceneconfigid()) {
      set_sceneconfigid(from.sceneconfigid());
    }
    if (from.has_mirrorid()) {
      set_mirrorid(from.mirrorid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterLocation::CopyFrom(const CharacterLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterLocation::IsInitialized() const {

  return true;
}

void CharacterLocation::Swap(CharacterLocation* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(pos_, other->pos_);
    std::swap(mapid_, other->mapid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(lineid_, other->lineid_);
    std::swap(sceneconfigid_, other->sceneconfigid_);
    std::swap(mirrorid_, other->mirrorid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterLocation_descriptor_;
  metadata.reflection = CharacterLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestData::kConfigIdFieldNumber;
const int QuestData::kStatusFieldNumber;
const int QuestData::kQuestStepsFieldNumber;
const int QuestData::kQuestIndexFieldNumber;
const int QuestData::kQuestMaxIndexFieldNumber;
const int QuestData::kQuestBeginTimeFieldNumber;
#endif  // !_MSC_VER

QuestData::QuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestData::InitAsDefaultInstance() {
}

QuestData::QuestData(const QuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestData::SharedCtor() {
  _cached_size_ = 0;
  configid_ = -1;
  status_ = -1;
  questindex_ = -1;
  questmaxindex_ = -1;
  questbegintime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestData::~QuestData() {
  SharedDtor();
}

void QuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestData_descriptor_;
}

const QuestData& QuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

QuestData* QuestData::default_instance_ = NULL;

QuestData* QuestData::New() const {
  return new QuestData;
}

void QuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = -1;
    status_ = -1;
    questindex_ = -1;
    questmaxindex_ = -1;
    questbegintime_ = GOOGLE_LONGLONG(-1);
  }
  queststeps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional int32 Status = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_QuestSteps;
        break;
      }

      // repeated .QuestStepData QuestSteps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestSteps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queststeps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_QuestSteps;
        if (input->ExpectTag(48)) goto parse_QuestIndex;
        break;
      }

      // optional int32 QuestIndex = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questindex_)));
          set_has_questindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_QuestMaxIndex;
        break;
      }

      // optional int32 QuestMaxIndex = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestMaxIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questmaxindex_)));
          set_has_questmaxindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_QuestBeginTime;
        break;
      }

      // optional int64 QuestBeginTime = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &questbegintime_)));
          set_has_questbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfigId = 1 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional int32 Status = 2 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated .QuestStepData QuestSteps = 4;
  for (int i = 0; i < this->queststeps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->queststeps(i), output);
  }

  // optional int32 QuestIndex = 6 [default = -1];
  if (has_questindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->questindex(), output);
  }

  // optional int32 QuestMaxIndex = 7 [default = -1];
  if (has_questmaxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->questmaxindex(), output);
  }

  // optional int64 QuestBeginTime = 8 [default = -1];
  if (has_questbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->questbegintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfigId = 1 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional int32 Status = 2 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated .QuestStepData QuestSteps = 4;
  for (int i = 0; i < this->queststeps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->queststeps(i), target);
  }

  // optional int32 QuestIndex = 6 [default = -1];
  if (has_questindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->questindex(), target);
  }

  // optional int32 QuestMaxIndex = 7 [default = -1];
  if (has_questmaxindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->questmaxindex(), target);
  }

  // optional int64 QuestBeginTime = 8 [default = -1];
  if (has_questbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->questbegintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfigId = 1 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 Status = 2 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 QuestIndex = 6 [default = -1];
    if (has_questindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questindex());
    }

    // optional int32 QuestMaxIndex = 7 [default = -1];
    if (has_questmaxindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questmaxindex());
    }

    // optional int64 QuestBeginTime = 8 [default = -1];
    if (has_questbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->questbegintime());
    }

  }
  // repeated .QuestStepData QuestSteps = 4;
  total_size += 1 * this->queststeps_size();
  for (int i = 0; i < this->queststeps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queststeps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestData::MergeFrom(const QuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  queststeps_.MergeFrom(from.queststeps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_questindex()) {
      set_questindex(from.questindex());
    }
    if (from.has_questmaxindex()) {
      set_questmaxindex(from.questmaxindex());
    }
    if (from.has_questbegintime()) {
      set_questbegintime(from.questbegintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestData::CopyFrom(const QuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestData::IsInitialized() const {

  return true;
}

void QuestData::Swap(QuestData* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(status_, other->status_);
    queststeps_.Swap(&other->queststeps_);
    std::swap(questindex_, other->questindex_);
    std::swap(questmaxindex_, other->questmaxindex_);
    std::swap(questbegintime_, other->questbegintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestData_descriptor_;
  metadata.reflection = QuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomSkiData::kKeyFieldNumber;
const int CustomSkiData::kKeyTypeFieldNumber;
const int CustomSkiData::kIntVFieldNumber;
const int CustomSkiData::kBoolVFieldNumber;
#endif  // !_MSC_VER

CustomSkiData::CustomSkiData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomSkiData::InitAsDefaultInstance() {
}

CustomSkiData::CustomSkiData(const CustomSkiData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomSkiData::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keytype_ = -1;
  intv_ = 0;
  boolv_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomSkiData::~CustomSkiData() {
  SharedDtor();
}

void CustomSkiData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CustomSkiData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomSkiData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomSkiData_descriptor_;
}

const CustomSkiData& CustomSkiData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

CustomSkiData* CustomSkiData::default_instance_ = NULL;

CustomSkiData* CustomSkiData::New() const {
  return new CustomSkiData;
}

void CustomSkiData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    keytype_ = -1;
    intv_ = 0;
    boolv_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomSkiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_KeyType;
        break;
      }

      // optional int32 KeyType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KeyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keytype_)));
          set_has_keytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IntV;
        break;
      }

      // optional int32 IntV = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IntV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intv_)));
          set_has_intv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BoolV;
        break;
      }

      // optional bool BoolV = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoolV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolv_)));
          set_has_boolv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomSkiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional int32 KeyType = 3 [default = -1];
  if (has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keytype(), output);
  }

  // optional int32 IntV = 4 [default = 0];
  if (has_intv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intv(), output);
  }

  // optional bool BoolV = 5 [default = false];
  if (has_boolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->boolv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomSkiData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional int32 KeyType = 3 [default = -1];
  if (has_keytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keytype(), target);
  }

  // optional int32 IntV = 4 [default = 0];
  if (has_intv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intv(), target);
  }

  // optional bool BoolV = 5 [default = false];
  if (has_boolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->boolv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomSkiData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 KeyType = 3 [default = -1];
    if (has_keytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keytype());
    }

    // optional int32 IntV = 4 [default = 0];
    if (has_intv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intv());
    }

    // optional bool BoolV = 5 [default = false];
    if (has_boolv()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomSkiData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomSkiData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomSkiData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomSkiData::MergeFrom(const CustomSkiData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_keytype()) {
      set_keytype(from.keytype());
    }
    if (from.has_intv()) {
      set_intv(from.intv());
    }
    if (from.has_boolv()) {
      set_boolv(from.boolv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomSkiData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomSkiData::CopyFrom(const CustomSkiData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomSkiData::IsInitialized() const {

  return true;
}

void CustomSkiData::Swap(CustomSkiData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(keytype_, other->keytype_);
    std::swap(intv_, other->intv_);
    std::swap(boolv_, other->boolv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomSkiData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomSkiData_descriptor_;
  metadata.reflection = CustomSkiData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestStepData::kStatusFieldNumber;
const int QuestStepData::kProgressFieldNumber;
#endif  // !_MSC_VER

QuestStepData::QuestStepData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestStepData::InitAsDefaultInstance() {
}

QuestStepData::QuestStepData(const QuestStepData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestStepData::SharedCtor() {
  _cached_size_ = 0;
  status_ = -1;
  progress_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestStepData::~QuestStepData() {
  SharedDtor();
}

void QuestStepData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestStepData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestStepData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStepData_descriptor_;
}

const QuestStepData& QuestStepData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

QuestStepData* QuestStepData::default_instance_ = NULL;

QuestStepData* QuestStepData::New() const {
  return new QuestStepData;
}

void QuestStepData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = -1;
    progress_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestStepData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Status = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Progress;
        break;
      }

      // optional int32 Progress = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestStepData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Status = 2 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 Progress = 3 [default = -1];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestStepData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Status = 2 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 Progress = 3 [default = -1];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestStepData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Status = 2 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 Progress = 3 [default = -1];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestStepData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestStepData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestStepData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestStepData::MergeFrom(const QuestStepData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestStepData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestStepData::CopyFrom(const QuestStepData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStepData::IsInitialized() const {

  return true;
}

void QuestStepData::Swap(QuestStepData* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestStepData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestStepData_descriptor_;
  metadata.reflection = QuestStepData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestListData::kQuestsListFieldNumber;
#endif  // !_MSC_VER

QuestListData::QuestListData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestListData::InitAsDefaultInstance() {
}

QuestListData::QuestListData(const QuestListData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestListData::~QuestListData() {
  SharedDtor();
}

void QuestListData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestListData_descriptor_;
}

const QuestListData& QuestListData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

QuestListData* QuestListData::default_instance_ = NULL;

QuestListData* QuestListData::New() const {
  return new QuestListData;
}

void QuestListData::Clear() {
  questslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuestData QuestsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_QuestsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuestData QuestsList = 1;
  for (int i = 0; i < this->questslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestListData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuestData QuestsList = 1;
  for (int i = 0; i < this->questslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestListData::ByteSize() const {
  int total_size = 0;

  // repeated .QuestData QuestsList = 1;
  total_size += 1 * this->questslist_size();
  for (int i = 0; i < this->questslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestListData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestListData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestListData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestListData::MergeFrom(const QuestListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  questslist_.MergeFrom(from.questslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestListData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestListData::CopyFrom(const QuestListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestListData::IsInitialized() const {

  return true;
}

void QuestListData::Swap(QuestListData* other) {
  if (other != this) {
    questslist_.Swap(&other->questslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestListData_descriptor_;
  metadata.reflection = QuestListData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBBags::kBagsFieldNumber;
const int DBBags::kRedPointGuidsFieldNumber;
#endif  // !_MSC_VER

DBBags::DBBags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBBags::InitAsDefaultInstance() {
}

DBBags::DBBags(const DBBags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBBags::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBBags::~DBBags() {
  SharedDtor();
}

void DBBags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBBags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBBags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBBags_descriptor_;
}

const DBBags& DBBags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DBBags* DBBags::default_instance_ = NULL;

DBBags* DBBags::New() const {
  return new DBBags;
}

void DBBags::Clear() {
  bags_.Clear();
  redpointguids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBBags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BagData Bags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Bags;
        if (input->ExpectTag(16)) goto parse_RedPointGuids;
        break;
      }

      // repeated uint64 RedPointGuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RedPointGuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_redpointguids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_redpointguids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RedPointGuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBBags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BagData Bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  // repeated uint64 RedPointGuids = 2;
  for (int i = 0; i < this->redpointguids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->redpointguids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBBags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BagData Bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bags(i), target);
  }

  // repeated uint64 RedPointGuids = 2;
  for (int i = 0; i < this->redpointguids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->redpointguids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBBags::ByteSize() const {
  int total_size = 0;

  // repeated .BagData Bags = 1;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  // repeated uint64 RedPointGuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->redpointguids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->redpointguids(i));
    }
    total_size += 1 * this->redpointguids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBBags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBBags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBBags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBBags::MergeFrom(const DBBags& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  redpointguids_.MergeFrom(from.redpointguids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBBags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBBags::CopyFrom(const DBBags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBBags::IsInitialized() const {

  return true;
}

void DBBags::Swap(DBBags* other) {
  if (other != this) {
    bags_.Swap(&other->bags_);
    redpointguids_.Swap(&other->redpointguids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBBags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBBags_descriptor_;
  metadata.reflection = DBBags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemResolveData::kQulityFieldNumber;
const int ItemResolveData::kIsResolveFieldNumber;
#endif  // !_MSC_VER

ItemResolveData::ItemResolveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemResolveData::InitAsDefaultInstance() {
}

ItemResolveData::ItemResolveData(const ItemResolveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemResolveData::SharedCtor() {
  _cached_size_ = 0;
  qulity_ = -1;
  isresolve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemResolveData::~ItemResolveData() {
  SharedDtor();
}

void ItemResolveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemResolveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemResolveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemResolveData_descriptor_;
}

const ItemResolveData& ItemResolveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ItemResolveData* ItemResolveData::default_instance_ = NULL;

ItemResolveData* ItemResolveData::New() const {
  return new ItemResolveData;
}

void ItemResolveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qulity_ = -1;
    isresolve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemResolveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Qulity = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qulity_)));
          set_has_qulity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsResolve;
        break;
      }

      // optional int32 IsResolve = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsResolve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isresolve_)));
          set_has_isresolve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemResolveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Qulity = 1 [default = -1];
  if (has_qulity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->qulity(), output);
  }

  // optional int32 IsResolve = 2 [default = 0];
  if (has_isresolve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isresolve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemResolveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Qulity = 1 [default = -1];
  if (has_qulity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->qulity(), target);
  }

  // optional int32 IsResolve = 2 [default = 0];
  if (has_isresolve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isresolve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemResolveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Qulity = 1 [default = -1];
    if (has_qulity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qulity());
    }

    // optional int32 IsResolve = 2 [default = 0];
    if (has_isresolve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isresolve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemResolveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemResolveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemResolveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemResolveData::MergeFrom(const ItemResolveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qulity()) {
      set_qulity(from.qulity());
    }
    if (from.has_isresolve()) {
      set_isresolve(from.isresolve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemResolveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemResolveData::CopyFrom(const ItemResolveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemResolveData::IsInitialized() const {

  return true;
}

void ItemResolveData::Swap(ItemResolveData* other) {
  if (other != this) {
    std::swap(qulity_, other->qulity_);
    std::swap(isresolve_, other->isresolve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemResolveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemResolveData_descriptor_;
  metadata.reflection = ItemResolveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSimpleData::kConfIDFieldNumber;
const int ItemSimpleData::kCountFieldNumber;
#endif  // !_MSC_VER

ItemSimpleData::ItemSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSimpleData::InitAsDefaultInstance() {
}

ItemSimpleData::ItemSimpleData(const ItemSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSimpleData::SharedCtor() {
  _cached_size_ = 0;
  confid_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSimpleData::~ItemSimpleData() {
  SharedDtor();
}

void ItemSimpleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSimpleData_descriptor_;
}

const ItemSimpleData& ItemSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ItemSimpleData* ItemSimpleData::default_instance_ = NULL;

ItemSimpleData* ItemSimpleData::New() const {
  return new ItemSimpleData;
}

void ItemSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confid_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfID = 1 [default = -1];
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confid(), output);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfID = 1 [default = -1];
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confid(), target);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfID = 1 [default = -1];
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confid());
    }

    // optional int32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSimpleData::MergeFrom(const ItemSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSimpleData::CopyFrom(const ItemSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSimpleData::IsInitialized() const {

  return true;
}

void ItemSimpleData::Swap(ItemSimpleData* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSimpleData_descriptor_;
  metadata.reflection = ItemSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemAutoOperatorData::kAutoSaleDisassembleFieldNumber;
#endif  // !_MSC_VER

ItemAutoOperatorData::ItemAutoOperatorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemAutoOperatorData::InitAsDefaultInstance() {
}

ItemAutoOperatorData::ItemAutoOperatorData(const ItemAutoOperatorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemAutoOperatorData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemAutoOperatorData::~ItemAutoOperatorData() {
  SharedDtor();
}

void ItemAutoOperatorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemAutoOperatorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemAutoOperatorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAutoOperatorData_descriptor_;
}

const ItemAutoOperatorData& ItemAutoOperatorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ItemAutoOperatorData* ItemAutoOperatorData::default_instance_ = NULL;

ItemAutoOperatorData* ItemAutoOperatorData::New() const {
  return new ItemAutoOperatorData;
}

void ItemAutoOperatorData::Clear() {
  autosaledisassemble_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemAutoOperatorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemResolveData AutoSaleDisassemble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AutoSaleDisassemble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autosaledisassemble()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AutoSaleDisassemble;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemAutoOperatorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemResolveData AutoSaleDisassemble = 1;
  for (int i = 0; i < this->autosaledisassemble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->autosaledisassemble(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemAutoOperatorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemResolveData AutoSaleDisassemble = 1;
  for (int i = 0; i < this->autosaledisassemble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->autosaledisassemble(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemAutoOperatorData::ByteSize() const {
  int total_size = 0;

  // repeated .ItemResolveData AutoSaleDisassemble = 1;
  total_size += 1 * this->autosaledisassemble_size();
  for (int i = 0; i < this->autosaledisassemble_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autosaledisassemble(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemAutoOperatorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemAutoOperatorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemAutoOperatorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemAutoOperatorData::MergeFrom(const ItemAutoOperatorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  autosaledisassemble_.MergeFrom(from.autosaledisassemble_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemAutoOperatorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemAutoOperatorData::CopyFrom(const ItemAutoOperatorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemAutoOperatorData::IsInitialized() const {

  return true;
}

void ItemAutoOperatorData::Swap(ItemAutoOperatorData* other) {
  if (other != this) {
    autosaledisassemble_.Swap(&other->autosaledisassemble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemAutoOperatorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemAutoOperatorData_descriptor_;
  metadata.reflection = ItemAutoOperatorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillContainer::kSkillObjListFieldNumber;
#endif  // !_MSC_VER

SkillContainer::SkillContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillContainer::InitAsDefaultInstance() {
}

SkillContainer::SkillContainer(const SkillContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillContainer::~SkillContainer() {
  SharedDtor();
}

void SkillContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillContainer_descriptor_;
}

const SkillContainer& SkillContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SkillContainer* SkillContainer::default_instance_ = NULL;

SkillContainer* SkillContainer::New() const {
  return new SkillContainer;
}

void SkillContainer::Clear() {
  skillobjlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillObj SkillObjList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillObjList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillobjlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SkillObjList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillObj SkillObjList = 1;
  for (int i = 0; i < this->skillobjlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillobjlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillObj SkillObjList = 1;
  for (int i = 0; i < this->skillobjlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillobjlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillContainer::ByteSize() const {
  int total_size = 0;

  // repeated .SkillObj SkillObjList = 1;
  total_size += 1 * this->skillobjlist_size();
  for (int i = 0; i < this->skillobjlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillobjlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillContainer::MergeFrom(const SkillContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillobjlist_.MergeFrom(from.skillobjlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillContainer::CopyFrom(const SkillContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillContainer::IsInitialized() const {

  return true;
}

void SkillContainer::Swap(SkillContainer* other) {
  if (other != this) {
    skillobjlist_.Swap(&other->skillobjlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillContainer_descriptor_;
  metadata.reflection = SkillContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kSkillContainerListFieldNumber;
const int SkillData::kCurUseContainerFieldNumber;
const int SkillData::kSkillSlotLevelFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  curusecontainer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curusecontainer_ = -1;
  }
  skillcontainerlist_.Clear();
  skillslotlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillContainer SkillContainerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillContainerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillcontainerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SkillContainerList;
        if (input->ExpectTag(16)) goto parse_CurUseContainer;
        break;
      }

      // optional int32 CurUseContainer = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurUseContainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curusecontainer_)));
          set_has_curusecontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SkillSlotLevel;
        break;
      }

      // repeated int32 SkillSlotLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillSlotLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skillslotlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillslotlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SkillSlotLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillContainer SkillContainerList = 1;
  for (int i = 0; i < this->skillcontainerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillcontainerlist(i), output);
  }

  // optional int32 CurUseContainer = 2 [default = -1];
  if (has_curusecontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curusecontainer(), output);
  }

  // repeated int32 SkillSlotLevel = 3;
  for (int i = 0; i < this->skillslotlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skillslotlevel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillContainer SkillContainerList = 1;
  for (int i = 0; i < this->skillcontainerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillcontainerlist(i), target);
  }

  // optional int32 CurUseContainer = 2 [default = -1];
  if (has_curusecontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curusecontainer(), target);
  }

  // repeated int32 SkillSlotLevel = 3;
  for (int i = 0; i < this->skillslotlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skillslotlevel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 CurUseContainer = 2 [default = -1];
    if (has_curusecontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curusecontainer());
    }

  }
  // repeated .SkillContainer SkillContainerList = 1;
  total_size += 1 * this->skillcontainerlist_size();
  for (int i = 0; i < this->skillcontainerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillcontainerlist(i));
  }

  // repeated int32 SkillSlotLevel = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillslotlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillslotlevel(i));
    }
    total_size += 1 * this->skillslotlevel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillcontainerlist_.MergeFrom(from.skillcontainerlist_);
  skillslotlevel_.MergeFrom(from.skillslotlevel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curusecontainer()) {
      set_curusecontainer(from.curusecontainer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    skillcontainerlist_.Swap(&other->skillcontainerlist_);
    std::swap(curusecontainer_, other->curusecontainer_);
    skillslotlevel_.Swap(&other->skillslotlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillObj::kPosFieldNumber;
const int SkillObj::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SkillObj::SkillObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillObj::InitAsDefaultInstance() {
}

SkillObj::SkillObj(const SkillObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillObj::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  skillid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillObj::~SkillObj() {
  SharedDtor();
}

void SkillObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillObj_descriptor_;
}

const SkillObj& SkillObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SkillObj* SkillObj::default_instance_ = NULL;

SkillObj* SkillObj::New() const {
  return new SkillObj;
}

void SkillObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
    skillid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Pos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // optional int32 SkillId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 SkillId = 2 [default = -1];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 SkillId = 2 [default = -1];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Pos = 1 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillObj::MergeFrom(const SkillObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillObj::CopyFrom(const SkillObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillObj::IsInitialized() const {

  return true;
}

void SkillObj::Swap(SkillObj* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillObj_descriptor_;
  metadata.reflection = SkillObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuitInfo::kSuitIdFieldNumber;
const int SuitInfo::kCollectNumFieldNumber;
#endif  // !_MSC_VER

SuitInfo::SuitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuitInfo::InitAsDefaultInstance() {
}

SuitInfo::SuitInfo(const SuitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuitInfo::SharedCtor() {
  _cached_size_ = 0;
  suit_id_ = -1;
  collect_num_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuitInfo::~SuitInfo() {
  SharedDtor();
}

void SuitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuitInfo_descriptor_;
}

const SuitInfo& SuitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SuitInfo* SuitInfo::default_instance_ = NULL;

SuitInfo* SuitInfo::New() const {
  return new SuitInfo;
}

void SuitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suit_id_ = -1;
    collect_num_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Suit_id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Collect_num;
        break;
      }

      // optional int32 Collect_num = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Collect_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_num_)));
          set_has_collect_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Suit_id = 1 [default = -1];
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->suit_id(), output);
  }

  // optional int32 Collect_num = 2 [default = -1];
  if (has_collect_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->collect_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Suit_id = 1 [default = -1];
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->suit_id(), target);
  }

  // optional int32 Collect_num = 2 [default = -1];
  if (has_collect_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->collect_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Suit_id = 1 [default = -1];
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suit_id());
    }

    // optional int32 Collect_num = 2 [default = -1];
    if (has_collect_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuitInfo::MergeFrom(const SuitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_collect_num()) {
      set_collect_num(from.collect_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuitInfo::CopyFrom(const SuitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuitInfo::IsInitialized() const {

  return true;
}

void SuitInfo::Swap(SuitInfo* other) {
  if (other != this) {
    std::swap(suit_id_, other->suit_id_);
    std::swap(collect_num_, other->collect_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuitInfo_descriptor_;
  metadata.reflection = SuitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossInfo::kLineIDFieldNumber;
const int WorldBossInfo::kHPRateFieldNumber;
const int WorldBossInfo::kLastDamageFieldNumber;
const int WorldBossInfo::kMaxDamageFieldNumber;
#endif  // !_MSC_VER

WorldBossInfo::WorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossInfo::InitAsDefaultInstance() {
  lastdamage_ = const_cast< ::WorldBossScoreInfo*>(&::WorldBossScoreInfo::default_instance());
  maxdamage_ = const_cast< ::WorldBossScoreInfo*>(&::WorldBossScoreInfo::default_instance());
}

WorldBossInfo::WorldBossInfo(const WorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = -1;
  hprate_ = -1;
  lastdamage_ = NULL;
  maxdamage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossInfo::~WorldBossInfo() {
  SharedDtor();
}

void WorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete lastdamage_;
    delete maxdamage_;
  }
}

void WorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossInfo_descriptor_;
}

const WorldBossInfo& WorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WorldBossInfo* WorldBossInfo::default_instance_ = NULL;

WorldBossInfo* WorldBossInfo::New() const {
  return new WorldBossInfo;
}

void WorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = -1;
    hprate_ = -1;
    if (has_lastdamage()) {
      if (lastdamage_ != NULL) lastdamage_->::WorldBossScoreInfo::Clear();
    }
    if (has_maxdamage()) {
      if (maxdamage_ != NULL) maxdamage_->::WorldBossScoreInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LineID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HPRate;
        break;
      }

      // optional int32 HPRate = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HPRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hprate_)));
          set_has_hprate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LastDamage;
        break;
      }

      // optional .WorldBossScoreInfo LastDamage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastDamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastdamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MaxDamage;
        break;
      }

      // optional .WorldBossScoreInfo MaxDamage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaxDamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxdamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LineID = 1 [default = -1];
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineid(), output);
  }

  // optional int32 HPRate = 2 [default = -1];
  if (has_hprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hprate(), output);
  }

  // optional .WorldBossScoreInfo LastDamage = 3;
  if (has_lastdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lastdamage(), output);
  }

  // optional .WorldBossScoreInfo MaxDamage = 4;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->maxdamage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LineID = 1 [default = -1];
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineid(), target);
  }

  // optional int32 HPRate = 2 [default = -1];
  if (has_hprate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hprate(), target);
  }

  // optional .WorldBossScoreInfo LastDamage = 3;
  if (has_lastdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lastdamage(), target);
  }

  // optional .WorldBossScoreInfo MaxDamage = 4;
  if (has_maxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->maxdamage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LineID = 1 [default = -1];
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

    // optional int32 HPRate = 2 [default = -1];
    if (has_hprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hprate());
    }

    // optional .WorldBossScoreInfo LastDamage = 3;
    if (has_lastdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastdamage());
    }

    // optional .WorldBossScoreInfo MaxDamage = 4;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxdamage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossInfo::MergeFrom(const WorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
    if (from.has_hprate()) {
      set_hprate(from.hprate());
    }
    if (from.has_lastdamage()) {
      mutable_lastdamage()->::WorldBossScoreInfo::MergeFrom(from.lastdamage());
    }
    if (from.has_maxdamage()) {
      mutable_maxdamage()->::WorldBossScoreInfo::MergeFrom(from.maxdamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossInfo::CopyFrom(const WorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossInfo::IsInitialized() const {

  return true;
}

void WorldBossInfo::Swap(WorldBossInfo* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(hprate_, other->hprate_);
    std::swap(lastdamage_, other->lastdamage_);
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossInfo_descriptor_;
  metadata.reflection = WorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRankInfo::kRankFieldNumber;
const int WorldBossRankInfo::kNameFieldNumber;
const int WorldBossRankInfo::kLevelFieldNumber;
const int WorldBossRankInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

WorldBossRankInfo::WorldBossRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRankInfo::InitAsDefaultInstance() {
}

WorldBossRankInfo::WorldBossRankInfo(const WorldBossRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = -1;
  score_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRankInfo::~WorldBossRankInfo() {
  SharedDtor();
}

void WorldBossRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WorldBossRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRankInfo_descriptor_;
}

const WorldBossRankInfo& WorldBossRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WorldBossRankInfo* WorldBossRankInfo::default_instance_ = NULL;

WorldBossRankInfo* WorldBossRankInfo::New() const {
  return new WorldBossRankInfo;
}

void WorldBossRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = -1;
    score_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Rank = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // optional int32 Score = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 Score = 4 [default = -1];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Rank = 1 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 Score = 4 [default = -1];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Rank = 1 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Level = 3 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Score = 4 [default = -1];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRankInfo::MergeFrom(const WorldBossRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRankInfo::CopyFrom(const WorldBossRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRankInfo::IsInitialized() const {

  return true;
}

void WorldBossRankInfo::Swap(WorldBossRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRankInfo_descriptor_;
  metadata.reflection = WorldBossRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipResonanceInfo::kConfIdFieldNumber;
const int EquipResonanceInfo::kResonanceAttrFieldNumber;
const int EquipResonanceInfo::kNewResonanceAttrFieldNumber;
const int EquipResonanceInfo::kBattleScoreFieldNumber;
const int EquipResonanceInfo::kNewBattleScoreFieldNumber;
#endif  // !_MSC_VER

EquipResonanceInfo::EquipResonanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipResonanceInfo::InitAsDefaultInstance() {
}

EquipResonanceInfo::EquipResonanceInfo(const EquipResonanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipResonanceInfo::SharedCtor() {
  _cached_size_ = 0;
  confid_ = -1;
  battlescore_ = -1;
  newbattlescore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipResonanceInfo::~EquipResonanceInfo() {
  SharedDtor();
}

void EquipResonanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipResonanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipResonanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipResonanceInfo_descriptor_;
}

const EquipResonanceInfo& EquipResonanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipResonanceInfo* EquipResonanceInfo::default_instance_ = NULL;

EquipResonanceInfo* EquipResonanceInfo::New() const {
  return new EquipResonanceInfo;
}

void EquipResonanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confid_ = -1;
    battlescore_ = -1;
    newbattlescore_ = -1;
  }
  resonanceattr_.Clear();
  newresonanceattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipResonanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ResonanceAttr;
        break;
      }

      // repeated .AttrKeyValue ResonanceAttr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResonanceAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resonanceattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ResonanceAttr;
        if (input->ExpectTag(34)) goto parse_NewResonanceAttr;
        break;
      }

      // repeated .AttrKeyValue NewResonanceAttr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewResonanceAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newresonanceattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NewResonanceAttr;
        if (input->ExpectTag(40)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NewBattleScore;
        break;
      }

      // optional int32 NewBattleScore = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewBattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newbattlescore_)));
          set_has_newbattlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipResonanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfId = 2 [default = -1];
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confid(), output);
  }

  // repeated .AttrKeyValue ResonanceAttr = 3;
  for (int i = 0; i < this->resonanceattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resonanceattr(i), output);
  }

  // repeated .AttrKeyValue NewResonanceAttr = 4;
  for (int i = 0; i < this->newresonanceattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newresonanceattr(i), output);
  }

  // optional int32 BattleScore = 5 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battlescore(), output);
  }

  // optional int32 NewBattleScore = 6 [default = -1];
  if (has_newbattlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->newbattlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipResonanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfId = 2 [default = -1];
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confid(), target);
  }

  // repeated .AttrKeyValue ResonanceAttr = 3;
  for (int i = 0; i < this->resonanceattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resonanceattr(i), target);
  }

  // repeated .AttrKeyValue NewResonanceAttr = 4;
  for (int i = 0; i < this->newresonanceattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newresonanceattr(i), target);
  }

  // optional int32 BattleScore = 5 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battlescore(), target);
  }

  // optional int32 NewBattleScore = 6 [default = -1];
  if (has_newbattlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->newbattlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipResonanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfId = 2 [default = -1];
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confid());
    }

    // optional int32 BattleScore = 5 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional int32 NewBattleScore = 6 [default = -1];
    if (has_newbattlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newbattlescore());
    }

  }
  // repeated .AttrKeyValue ResonanceAttr = 3;
  total_size += 1 * this->resonanceattr_size();
  for (int i = 0; i < this->resonanceattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resonanceattr(i));
  }

  // repeated .AttrKeyValue NewResonanceAttr = 4;
  total_size += 1 * this->newresonanceattr_size();
  for (int i = 0; i < this->newresonanceattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newresonanceattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipResonanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipResonanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipResonanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipResonanceInfo::MergeFrom(const EquipResonanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resonanceattr_.MergeFrom(from.resonanceattr_);
  newresonanceattr_.MergeFrom(from.newresonanceattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_newbattlescore()) {
      set_newbattlescore(from.newbattlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipResonanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipResonanceInfo::CopyFrom(const EquipResonanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipResonanceInfo::IsInitialized() const {

  return true;
}

void EquipResonanceInfo::Swap(EquipResonanceInfo* other) {
  if (other != this) {
    std::swap(confid_, other->confid_);
    resonanceattr_.Swap(&other->resonanceattr_);
    newresonanceattr_.Swap(&other->newresonanceattr_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(newbattlescore_, other->newbattlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipResonanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipResonanceInfo_descriptor_;
  metadata.reflection = EquipResonanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipResonanceData::kResonanceListFieldNumber;
#endif  // !_MSC_VER

EquipResonanceData::EquipResonanceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipResonanceData::InitAsDefaultInstance() {
}

EquipResonanceData::EquipResonanceData(const EquipResonanceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipResonanceData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipResonanceData::~EquipResonanceData() {
  SharedDtor();
}

void EquipResonanceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipResonanceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipResonanceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipResonanceData_descriptor_;
}

const EquipResonanceData& EquipResonanceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipResonanceData* EquipResonanceData::default_instance_ = NULL;

EquipResonanceData* EquipResonanceData::New() const {
  return new EquipResonanceData;
}

void EquipResonanceData::Clear() {
  resonancelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipResonanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipResonanceInfo ResonanceList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResonanceList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resonancelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ResonanceList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipResonanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipResonanceInfo ResonanceList = 1;
  for (int i = 0; i < this->resonancelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resonancelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipResonanceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipResonanceInfo ResonanceList = 1;
  for (int i = 0; i < this->resonancelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resonancelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipResonanceData::ByteSize() const {
  int total_size = 0;

  // repeated .EquipResonanceInfo ResonanceList = 1;
  total_size += 1 * this->resonancelist_size();
  for (int i = 0; i < this->resonancelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resonancelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipResonanceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipResonanceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipResonanceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipResonanceData::MergeFrom(const EquipResonanceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resonancelist_.MergeFrom(from.resonancelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipResonanceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipResonanceData::CopyFrom(const EquipResonanceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipResonanceData::IsInitialized() const {

  return true;
}

void EquipResonanceData::Swap(EquipResonanceData* other) {
  if (other != this) {
    resonancelist_.Swap(&other->resonancelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipResonanceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipResonanceData_descriptor_;
  metadata.reflection = EquipResonanceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashInfo::kEquipGuidFieldNumber;
const int EquipWashInfo::kExtraAttrFieldNumber;
const int EquipWashInfo::kLockedIndexFieldNumber;
const int EquipWashInfo::kBattleScoreFieldNumber;
#endif  // !_MSC_VER

EquipWashInfo::EquipWashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashInfo::InitAsDefaultInstance() {
}

EquipWashInfo::EquipWashInfo(const EquipWashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashInfo::SharedCtor() {
  _cached_size_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  battlescore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashInfo::~EquipWashInfo() {
  SharedDtor();
}

void EquipWashInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashInfo_descriptor_;
}

const EquipWashInfo& EquipWashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipWashInfo* EquipWashInfo::default_instance_ = NULL;

EquipWashInfo* EquipWashInfo::New() const {
  return new EquipWashInfo;
}

void EquipWashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipguid_ = GOOGLE_ULONGLONG(0);
    battlescore_ = -1;
  }
  extraattr_.Clear();
  lockedindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EquipGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExtraAttr;
        break;
      }

      // repeated .AttrKeyValue ExtraAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExtraAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extraattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExtraAttr;
        if (input->ExpectTag(24)) goto parse_LockedIndex;
        break;
      }

      // repeated int32 LockedIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lockedindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lockedindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LockedIndex;
        if (input->ExpectTag(32)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 EquipGuid = 1 [default = 0];
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equipguid(), output);
  }

  // repeated .AttrKeyValue ExtraAttr = 2;
  for (int i = 0; i < this->extraattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extraattr(i), output);
  }

  // repeated int32 LockedIndex = 3;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lockedindex(i), output);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 EquipGuid = 1 [default = 0];
  if (has_equipguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->equipguid(), target);
  }

  // repeated .AttrKeyValue ExtraAttr = 2;
  for (int i = 0; i < this->extraattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extraattr(i), target);
  }

  // repeated int32 LockedIndex = 3;
  for (int i = 0; i < this->lockedindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lockedindex(i), target);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EquipGuid = 1 [default = 0];
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

    // optional int32 BattleScore = 4 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

  }
  // repeated .AttrKeyValue ExtraAttr = 2;
  total_size += 1 * this->extraattr_size();
  for (int i = 0; i < this->extraattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extraattr(i));
  }

  // repeated int32 LockedIndex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lockedindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lockedindex(i));
    }
    total_size += 1 * this->lockedindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashInfo::MergeFrom(const EquipWashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  extraattr_.MergeFrom(from.extraattr_);
  lockedindex_.MergeFrom(from.lockedindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashInfo::CopyFrom(const EquipWashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashInfo::IsInitialized() const {

  return true;
}

void EquipWashInfo::Swap(EquipWashInfo* other) {
  if (other != this) {
    std::swap(equipguid_, other->equipguid_);
    extraattr_.Swap(&other->extraattr_);
    lockedindex_.Swap(&other->lockedindex_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashInfo_descriptor_;
  metadata.reflection = EquipWashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipWashData::kEquipWashInfoListFieldNumber;
const int EquipWashData::kLeftTimesFieldNumber;
#endif  // !_MSC_VER

EquipWashData::EquipWashData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipWashData::InitAsDefaultInstance() {
}

EquipWashData::EquipWashData(const EquipWashData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipWashData::SharedCtor() {
  _cached_size_ = 0;
  lefttimes_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipWashData::~EquipWashData() {
  SharedDtor();
}

void EquipWashData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipWashData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipWashData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipWashData_descriptor_;
}

const EquipWashData& EquipWashData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipWashData* EquipWashData::default_instance_ = NULL;

EquipWashData* EquipWashData::New() const {
  return new EquipWashData;
}

void EquipWashData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lefttimes_ = -1;
  }
  equipwashinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipWashData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipWashInfo EquipWashInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipWashInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipwashinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EquipWashInfoList;
        if (input->ExpectTag(16)) goto parse_LeftTimes;
        break;
      }

      // optional int32 LeftTimes = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipWashData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipWashInfo EquipWashInfoList = 1;
  for (int i = 0; i < this->equipwashinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipwashinfolist(i), output);
  }

  // optional int32 LeftTimes = 2 [default = -1];
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipWashData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipWashInfo EquipWashInfoList = 1;
  for (int i = 0; i < this->equipwashinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipwashinfolist(i), target);
  }

  // optional int32 LeftTimes = 2 [default = -1];
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipWashData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 LeftTimes = 2 [default = -1];
    if (has_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttimes());
    }

  }
  // repeated .EquipWashInfo EquipWashInfoList = 1;
  total_size += 1 * this->equipwashinfolist_size();
  for (int i = 0; i < this->equipwashinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipwashinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipWashData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipWashData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipWashData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipWashData::MergeFrom(const EquipWashData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipwashinfolist_.MergeFrom(from.equipwashinfolist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipWashData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipWashData::CopyFrom(const EquipWashData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipWashData::IsInitialized() const {

  return true;
}

void EquipWashData::Swap(EquipWashData* other) {
  if (other != this) {
    equipwashinfolist_.Swap(&other->equipwashinfolist_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipWashData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipWashData_descriptor_;
  metadata.reflection = EquipWashData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resource::kTypeFieldNumber;
const int Resource::kValueFieldNumber;
const int Resource::kTodayValueFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  todayvalue_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
    todayvalue_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int64 Value = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TodayValue;
        break;
      }

      // optional int64 TodayValue = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &todayvalue_)));
          set_has_todayvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 Value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int64 TodayValue = 3 [default = -1];
  if (has_todayvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->todayvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 Value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int64 TodayValue = 3 [default = -1];
  if (has_todayvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->todayvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 Value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int64 TodayValue = 3 [default = -1];
    if (has_todayvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->todayvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_todayvalue()) {
      set_todayvalue(from.todayvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {

  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(todayvalue_, other->todayvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuinessSkillData::kSkillIDFieldNumber;
const int BuinessSkillData::kSkillLvFieldNumber;
const int BuinessSkillData::kLockedFieldNumber;
const int BuinessSkillData::kSkillExpFieldNumber;
const int BuinessSkillData::kUseCountFieldNumber;
#endif  // !_MSC_VER

BuinessSkillData::BuinessSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuinessSkillData::InitAsDefaultInstance() {
}

BuinessSkillData::BuinessSkillData(const BuinessSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuinessSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = -1;
  skilllv_ = -1;
  locked_ = -1;
  skillexp_ = -1;
  usecount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuinessSkillData::~BuinessSkillData() {
  SharedDtor();
}

void BuinessSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuinessSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuinessSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuinessSkillData_descriptor_;
}

const BuinessSkillData& BuinessSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

BuinessSkillData* BuinessSkillData::default_instance_ = NULL;

BuinessSkillData* BuinessSkillData::New() const {
  return new BuinessSkillData;
}

void BuinessSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = -1;
    skilllv_ = -1;
    locked_ = -1;
    skillexp_ = -1;
    usecount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuinessSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SkillID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillLv;
        break;
      }

      // optional int32 SkillLv = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Locked;
        break;
      }

      // optional int32 Locked = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SkillExp;
        break;
      }

      // optional int32 SkillExp = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UseCount;
        break;
      }

      // optional int32 UseCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuinessSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SkillID = 1 [default = -1];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 SkillLv = 2 [default = -1];
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllv(), output);
  }

  // optional int32 Locked = 3 [default = -1];
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locked(), output);
  }

  // optional int32 SkillExp = 4 [default = -1];
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillexp(), output);
  }

  // optional int32 UseCount = 5 [default = -1];
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuinessSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SkillID = 1 [default = -1];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 SkillLv = 2 [default = -1];
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllv(), target);
  }

  // optional int32 Locked = 3 [default = -1];
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locked(), target);
  }

  // optional int32 SkillExp = 4 [default = -1];
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillexp(), target);
  }

  // optional int32 UseCount = 5 [default = -1];
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuinessSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SkillID = 1 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 SkillLv = 2 [default = -1];
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllv());
    }

    // optional int32 Locked = 3 [default = -1];
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }

    // optional int32 SkillExp = 4 [default = -1];
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }

    // optional int32 UseCount = 5 [default = -1];
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuinessSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuinessSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuinessSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuinessSkillData::MergeFrom(const BuinessSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuinessSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuinessSkillData::CopyFrom(const BuinessSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuinessSkillData::IsInitialized() const {

  return true;
}

void BuinessSkillData::Swap(BuinessSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(locked_, other->locked_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(usecount_, other->usecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuinessSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuinessSkillData_descriptor_;
  metadata.reflection = BuinessSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuinessUnlockInfo::kMutualFieldNumber;
const int BuinessUnlockInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

BuinessUnlockInfo::BuinessUnlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuinessUnlockInfo::InitAsDefaultInstance() {
}

BuinessUnlockInfo::BuinessUnlockInfo(const BuinessUnlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuinessUnlockInfo::SharedCtor() {
  _cached_size_ = 0;
  mutual_ = -1;
  endtime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuinessUnlockInfo::~BuinessUnlockInfo() {
  SharedDtor();
}

void BuinessUnlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuinessUnlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuinessUnlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuinessUnlockInfo_descriptor_;
}

const BuinessUnlockInfo& BuinessUnlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

BuinessUnlockInfo* BuinessUnlockInfo::default_instance_ = NULL;

BuinessUnlockInfo* BuinessUnlockInfo::New() const {
  return new BuinessUnlockInfo;
}

void BuinessUnlockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mutual_ = -1;
    endtime_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuinessUnlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Mutual = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mutual_)));
          set_has_mutual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuinessUnlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Mutual = 1 [default = -1];
  if (has_mutual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mutual(), output);
  }

  // optional int64 EndTime = 2 [default = -1];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuinessUnlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Mutual = 1 [default = -1];
  if (has_mutual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mutual(), target);
  }

  // optional int64 EndTime = 2 [default = -1];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuinessUnlockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Mutual = 1 [default = -1];
    if (has_mutual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mutual());
    }

    // optional int64 EndTime = 2 [default = -1];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuinessUnlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuinessUnlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuinessUnlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuinessUnlockInfo::MergeFrom(const BuinessUnlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mutual()) {
      set_mutual(from.mutual());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuinessUnlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuinessUnlockInfo::CopyFrom(const BuinessUnlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuinessUnlockInfo::IsInitialized() const {

  return true;
}

void BuinessUnlockInfo::Swap(BuinessUnlockInfo* other) {
  if (other != this) {
    std::swap(mutual_, other->mutual_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuinessUnlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuinessUnlockInfo_descriptor_;
  metadata.reflection = BuinessUnlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompletedQuestList::kIdListFieldNumber;
const int CompletedQuestList::kMaxCompleteIdListFieldNumber;
#endif  // !_MSC_VER

CompletedQuestList::CompletedQuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompletedQuestList::InitAsDefaultInstance() {
}

CompletedQuestList::CompletedQuestList(const CompletedQuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompletedQuestList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompletedQuestList::~CompletedQuestList() {
  SharedDtor();
}

void CompletedQuestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompletedQuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompletedQuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompletedQuestList_descriptor_;
}

const CompletedQuestList& CompletedQuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

CompletedQuestList* CompletedQuestList::default_instance_ = NULL;

CompletedQuestList* CompletedQuestList::New() const {
  return new CompletedQuestList;
}

void CompletedQuestList::Clear() {
  idlist_.Clear();
  maxcompleteidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompletedQuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 IdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_IdList;
        if (input->ExpectTag(18)) goto parse_MaxCompleteIdList;
        break;
      }

      // repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaxCompleteIdList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maxcompleteidlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MaxCompleteIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompletedQuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 IdList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->idlist(i), output);
  }

  // repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
  for (int i = 0; i < this->maxcompleteidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maxcompleteidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompletedQuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 IdList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->idlist(i), target);
  }

  // repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
  for (int i = 0; i < this->maxcompleteidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maxcompleteidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompletedQuestList::ByteSize() const {
  int total_size = 0;

  // repeated int32 IdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  // repeated .MaxQuestCompleteId MaxCompleteIdList = 2;
  total_size += 1 * this->maxcompleteidlist_size();
  for (int i = 0; i < this->maxcompleteidlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maxcompleteidlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompletedQuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompletedQuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompletedQuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompletedQuestList::MergeFrom(const CompletedQuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  maxcompleteidlist_.MergeFrom(from.maxcompleteidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompletedQuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletedQuestList::CopyFrom(const CompletedQuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletedQuestList::IsInitialized() const {

  return true;
}

void CompletedQuestList::Swap(CompletedQuestList* other) {
  if (other != this) {
    idlist_.Swap(&other->idlist_);
    maxcompleteidlist_.Swap(&other->maxcompleteidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompletedQuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompletedQuestList_descriptor_;
  metadata.reflection = CompletedQuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteMonsterInfo::kFinishTimeFieldNumber;
const int EliteMonsterInfo::kCommonIdFieldNumber;
#endif  // !_MSC_VER

EliteMonsterInfo::EliteMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteMonsterInfo::InitAsDefaultInstance() {
}

EliteMonsterInfo::EliteMonsterInfo(const EliteMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  finishtime_ = -1;
  commonid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteMonsterInfo::~EliteMonsterInfo() {
  SharedDtor();
}

void EliteMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteMonsterInfo_descriptor_;
}

const EliteMonsterInfo& EliteMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EliteMonsterInfo* EliteMonsterInfo::default_instance_ = NULL;

EliteMonsterInfo* EliteMonsterInfo::New() const {
  return new EliteMonsterInfo;
}

void EliteMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finishtime_ = -1;
    commonid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FinishTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CommonId;
        break;
      }

      // optional int32 CommonId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CommonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commonid_)));
          set_has_commonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FinishTime = 3 [default = -1];
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finishtime(), output);
  }

  // optional int32 CommonId = 4 [default = -1];
  if (has_commonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->commonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FinishTime = 3 [default = -1];
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finishtime(), target);
  }

  // optional int32 CommonId = 4 [default = -1];
  if (has_commonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->commonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FinishTime = 3 [default = -1];
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishtime());
    }

    // optional int32 CommonId = 4 [default = -1];
    if (has_commonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteMonsterInfo::MergeFrom(const EliteMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_commonid()) {
      set_commonid(from.commonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteMonsterInfo::CopyFrom(const EliteMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteMonsterInfo::IsInitialized() const {

  return true;
}

void EliteMonsterInfo::Swap(EliteMonsterInfo* other) {
  if (other != this) {
    std::swap(finishtime_, other->finishtime_);
    std::swap(commonid_, other->commonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteMonsterInfo_descriptor_;
  metadata.reflection = EliteMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelSlot::kItemIdFieldNumber;
const int JewelSlot::kUnlockedFieldNumber;
#endif  // !_MSC_VER

JewelSlot::JewelSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelSlot::InitAsDefaultInstance() {
}

JewelSlot::JewelSlot(const JewelSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelSlot::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  unlocked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelSlot::~JewelSlot() {
  SharedDtor();
}

void JewelSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelSlot_descriptor_;
}

const JewelSlot& JewelSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

JewelSlot* JewelSlot::default_instance_ = NULL;

JewelSlot* JewelSlot::New() const {
  return new JewelSlot;
}

void JewelSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
    unlocked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Unlocked;
        break;
      }

      // optional bool Unlocked = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Unlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlocked_)));
          set_has_unlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional bool Unlocked = 2 [default = false];
  if (has_unlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unlocked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional bool Unlocked = 2 [default = false];
  if (has_unlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unlocked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional bool Unlocked = 2 [default = false];
    if (has_unlocked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelSlot::MergeFrom(const JewelSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_unlocked()) {
      set_unlocked(from.unlocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelSlot::CopyFrom(const JewelSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelSlot::IsInitialized() const {

  return true;
}

void JewelSlot::Swap(JewelSlot* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(unlocked_, other->unlocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelSlot_descriptor_;
  metadata.reflection = JewelSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelInfo::kEquipSlotFieldNumber;
const int JewelInfo::kJewelSlotsFieldNumber;
#endif  // !_MSC_VER

JewelInfo::JewelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelInfo::InitAsDefaultInstance() {
}

JewelInfo::JewelInfo(const JewelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelInfo::SharedCtor() {
  _cached_size_ = 0;
  equipslot_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelInfo::~JewelInfo() {
  SharedDtor();
}

void JewelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelInfo_descriptor_;
}

const JewelInfo& JewelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

JewelInfo* JewelInfo::default_instance_ = NULL;

JewelInfo* JewelInfo::New() const {
  return new JewelInfo;
}

void JewelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipslot_ = -1;
  }
  jewelslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipSlot = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipslot_)));
          set_has_equipslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelSlots;
        break;
      }

      // repeated .JewelSlot JewelSlots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JewelSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jewelslots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JewelSlots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipslot(), output);
  }

  // repeated .JewelSlot JewelSlots = 2;
  for (int i = 0; i < this->jewelslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jewelslots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipSlot = 1 [default = -1];
  if (has_equipslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipslot(), target);
  }

  // repeated .JewelSlot JewelSlots = 2;
  for (int i = 0; i < this->jewelslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jewelslots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipSlot = 1 [default = -1];
    if (has_equipslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipslot());
    }

  }
  // repeated .JewelSlot JewelSlots = 2;
  total_size += 1 * this->jewelslots_size();
  for (int i = 0; i < this->jewelslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jewelslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelInfo::MergeFrom(const JewelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  jewelslots_.MergeFrom(from.jewelslots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipslot()) {
      set_equipslot(from.equipslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelInfo::CopyFrom(const JewelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelInfo::IsInitialized() const {

  return true;
}

void JewelInfo::Swap(JewelInfo* other) {
  if (other != this) {
    std::swap(equipslot_, other->equipslot_);
    jewelslots_.Swap(&other->jewelslots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelInfo_descriptor_;
  metadata.reflection = JewelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSlotInfo::kEnhanceLevelFieldNumber;
const int EquipSlotInfo::kEnhanceExpFieldNumber;
const int EquipSlotInfo::kEnhanceAttrFieldNumber;
const int EquipSlotInfo::kBattleScoreFieldNumber;
const int EquipSlotInfo::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

EquipSlotInfo::EquipSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSlotInfo::InitAsDefaultInstance() {
}

EquipSlotInfo::EquipSlotInfo(const EquipSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  enhance_level_ = -1;
  enhance_exp_ = -1;
  battlescore_ = -1;
  slot_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlotInfo::~EquipSlotInfo() {
  SharedDtor();
}

void EquipSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlotInfo_descriptor_;
}

const EquipSlotInfo& EquipSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipSlotInfo* EquipSlotInfo::default_instance_ = NULL;

EquipSlotInfo* EquipSlotInfo::New() const {
  return new EquipSlotInfo;
}

void EquipSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enhance_level_ = -1;
    enhance_exp_ = -1;
    battlescore_ = -1;
    slot_type_ = -1;
  }
  enhance_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Enhance_Level = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Enhance_Exp;
        break;
      }

      // optional int32 Enhance_Exp = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enhance_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_exp_)));
          set_has_enhance_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Enhance_Attr;
        break;
      }

      // repeated .AttrKeyValue Enhance_Attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Enhance_Attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enhance_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Enhance_Attr;
        if (input->ExpectTag(32)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Slot_Type;
        break;
      }

      // optional int32 Slot_Type = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Slot_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
          set_has_slot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Enhance_Level = 1 [default = -1];
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enhance_level(), output);
  }

  // optional int32 Enhance_Exp = 2 [default = -1];
  if (has_enhance_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhance_exp(), output);
  }

  // repeated .AttrKeyValue Enhance_Attr = 3;
  for (int i = 0; i < this->enhance_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enhance_attr(i), output);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlescore(), output);
  }

  // optional int32 Slot_Type = 5 [default = -1];
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slot_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Enhance_Level = 1 [default = -1];
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enhance_level(), target);
  }

  // optional int32 Enhance_Exp = 2 [default = -1];
  if (has_enhance_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhance_exp(), target);
  }

  // repeated .AttrKeyValue Enhance_Attr = 3;
  for (int i = 0; i < this->enhance_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enhance_attr(i), target);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlescore(), target);
  }

  // optional int32 Slot_Type = 5 [default = -1];
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slot_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Enhance_Level = 1 [default = -1];
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // optional int32 Enhance_Exp = 2 [default = -1];
    if (has_enhance_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_exp());
    }

    // optional int32 BattleScore = 4 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional int32 Slot_Type = 5 [default = -1];
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_type());
    }

  }
  // repeated .AttrKeyValue Enhance_Attr = 3;
  total_size += 1 * this->enhance_attr_size();
  for (int i = 0; i < this->enhance_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enhance_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlotInfo::MergeFrom(const EquipSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enhance_attr_.MergeFrom(from.enhance_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_enhance_exp()) {
      set_enhance_exp(from.enhance_exp());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlotInfo::CopyFrom(const EquipSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlotInfo::IsInitialized() const {

  return true;
}

void EquipSlotInfo::Swap(EquipSlotInfo* other) {
  if (other != this) {
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(enhance_exp_, other->enhance_exp_);
    enhance_attr_.Swap(&other->enhance_attr_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(slot_type_, other->slot_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlotInfo_descriptor_;
  metadata.reflection = EquipSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorshipPlayerData::kRoleIdFieldNumber;
const int WorshipPlayerData::kRoleNameFieldNumber;
const int WorshipPlayerData::kRankLevelFieldNumber;
const int WorshipPlayerData::kWorshipCoutFieldNumber;
const int WorshipPlayerData::kRankFieldNumber;
#endif  // !_MSC_VER

WorshipPlayerData::WorshipPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorshipPlayerData::InitAsDefaultInstance() {
}

WorshipPlayerData::WorshipPlayerData(const WorshipPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorshipPlayerData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = -1;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_level_ = -1;
  worship_cout_ = -1;
  rank_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorshipPlayerData::~WorshipPlayerData() {
  SharedDtor();
}

void WorshipPlayerData::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void WorshipPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorshipPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorshipPlayerData_descriptor_;
}

const WorshipPlayerData& WorshipPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WorshipPlayerData* WorshipPlayerData::default_instance_ = NULL;

WorshipPlayerData* WorshipPlayerData::New() const {
  return new WorshipPlayerData;
}

void WorshipPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = -1;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    rank_level_ = -1;
    worship_cout_ = -1;
    rank_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorshipPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Role_id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role_name;
        break;
      }

      // optional string Role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Rank_level;
        break;
      }

      // optional int32 Rank_level = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_level_)));
          set_has_rank_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Worship_cout;
        break;
      }

      // optional int32 Worship_cout = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Worship_cout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worship_cout_)));
          set_has_worship_cout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorshipPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Role_id = 1 [default = -1];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // optional string Role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional int32 Rank_level = 3 [default = -1];
  if (has_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_level(), output);
  }

  // optional int32 Worship_cout = 4 [default = -1];
  if (has_worship_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->worship_cout(), output);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorshipPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Role_id = 1 [default = -1];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // optional string Role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional int32 Rank_level = 3 [default = -1];
  if (has_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_level(), target);
  }

  // optional int32 Worship_cout = 4 [default = -1];
  if (has_worship_cout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->worship_cout(), target);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorshipPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Role_id = 1 [default = -1];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional string Role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 Rank_level = 3 [default = -1];
    if (has_rank_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_level());
    }

    // optional int32 Worship_cout = 4 [default = -1];
    if (has_worship_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worship_cout());
    }

    // optional int32 Rank = 5 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorshipPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorshipPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorshipPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorshipPlayerData::MergeFrom(const WorshipPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_rank_level()) {
      set_rank_level(from.rank_level());
    }
    if (from.has_worship_cout()) {
      set_worship_cout(from.worship_cout());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorshipPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorshipPlayerData::CopyFrom(const WorshipPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorshipPlayerData::IsInitialized() const {

  return true;
}

void WorshipPlayerData::Swap(WorshipPlayerData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(rank_level_, other->rank_level_);
    std::swap(worship_cout_, other->worship_cout_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorshipPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorshipPlayerData_descriptor_;
  metadata.reflection = WorshipPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverMedicament::kHpMedicamentListFieldNumber;
const int RecoverMedicament::kAutoHpMedicamentFieldNumber;
const int RecoverMedicament::kHpPercentageFieldNumber;
#endif  // !_MSC_VER

RecoverMedicament::RecoverMedicament()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverMedicament::InitAsDefaultInstance() {
}

RecoverMedicament::RecoverMedicament(const RecoverMedicament& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverMedicament::SharedCtor() {
  _cached_size_ = 0;
  autohpmedicament_ = -1;
  hppercentage_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverMedicament::~RecoverMedicament() {
  SharedDtor();
}

void RecoverMedicament::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverMedicament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverMedicament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverMedicament_descriptor_;
}

const RecoverMedicament& RecoverMedicament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

RecoverMedicament* RecoverMedicament::default_instance_ = NULL;

RecoverMedicament* RecoverMedicament::New() const {
  return new RecoverMedicament;
}

void RecoverMedicament::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    autohpmedicament_ = -1;
    hppercentage_ = -1;
  }
  hpmedicamentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverMedicament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 HpMedicamentList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HpMedicamentList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hpmedicamentlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hpmedicamentlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_HpMedicamentList;
        if (input->ExpectTag(16)) goto parse_AutoHpMedicament;
        break;
      }

      // optional int32 AutoHpMedicament = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoHpMedicament:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autohpmedicament_)));
          set_has_autohpmedicament();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HpPercentage;
        break;
      }

      // optional int32 HpPercentage = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HpPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hppercentage_)));
          set_has_hppercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverMedicament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 HpMedicamentList = 1;
  for (int i = 0; i < this->hpmedicamentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hpmedicamentlist(i), output);
  }

  // optional int32 AutoHpMedicament = 2 [default = -1];
  if (has_autohpmedicament()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->autohpmedicament(), output);
  }

  // optional int32 HpPercentage = 3 [default = -1];
  if (has_hppercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hppercentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverMedicament::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 HpMedicamentList = 1;
  for (int i = 0; i < this->hpmedicamentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hpmedicamentlist(i), target);
  }

  // optional int32 AutoHpMedicament = 2 [default = -1];
  if (has_autohpmedicament()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->autohpmedicament(), target);
  }

  // optional int32 HpPercentage = 3 [default = -1];
  if (has_hppercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hppercentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverMedicament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 AutoHpMedicament = 2 [default = -1];
    if (has_autohpmedicament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autohpmedicament());
    }

    // optional int32 HpPercentage = 3 [default = -1];
    if (has_hppercentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hppercentage());
    }

  }
  // repeated int32 HpMedicamentList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hpmedicamentlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hpmedicamentlist(i));
    }
    total_size += 1 * this->hpmedicamentlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverMedicament::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverMedicament* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverMedicament*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverMedicament::MergeFrom(const RecoverMedicament& from) {
  GOOGLE_CHECK_NE(&from, this);
  hpmedicamentlist_.MergeFrom(from.hpmedicamentlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_autohpmedicament()) {
      set_autohpmedicament(from.autohpmedicament());
    }
    if (from.has_hppercentage()) {
      set_hppercentage(from.hppercentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverMedicament::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverMedicament::CopyFrom(const RecoverMedicament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverMedicament::IsInitialized() const {

  return true;
}

void RecoverMedicament::Swap(RecoverMedicament* other) {
  if (other != this) {
    hpmedicamentlist_.Swap(&other->hpmedicamentlist_);
    std::swap(autohpmedicament_, other->autohpmedicament_);
    std::swap(hppercentage_, other->hppercentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverMedicament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverMedicament_descriptor_;
  metadata.reflection = RecoverMedicament_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailTypeFieldNumber;
const int MailInfo::kMailIdFieldNumber;
const int MailInfo::kIsReadFieldNumber;
const int MailInfo::kIsGetFieldNumber;
const int MailInfo::kTitleFieldNumber;
const int MailInfo::kSalutationFieldNumber;
const int MailInfo::kContentFieldNumber;
const int MailInfo::kSenderNameFieldNumber;
const int MailInfo::kItemListFieldNumber;
const int MailInfo::kSenderIdFieldNumber;
const int MailInfo::kStartTimeFieldNumber;
const int MailInfo::kExpireTimeFieldNumber;
const int MailInfo::kReceiverIdFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mail_type_ = 0;
  mail_id_ = 0;
  isread_ = false;
  isget_ = false;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salutation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_id_ = GOOGLE_ULONGLONG(0);
  start_time_ = -1;
  expire_time_ = -1;
  receiver_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (salutation_ != &::google::protobuf::internal::kEmptyString) {
    delete salutation_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_type_ = 0;
    mail_id_ = 0;
    isread_ = false;
    isget_ = false;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_salutation()) {
      if (salutation_ != &::google::protobuf::internal::kEmptyString) {
        salutation_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    sender_id_ = GOOGLE_ULONGLONG(0);
    start_time_ = -1;
    expire_time_ = -1;
    receiver_id_ = GOOGLE_ULONGLONG(0);
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Mail_type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Mail_id;
        break;
      }

      // optional int32 Mail_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsRead;
        break;
      }

      // optional bool IsRead = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsGet;
        break;
      }

      // optional bool IsGet = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Title;
        break;
      }

      // optional string Title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Salutation;
        break;
      }

      // optional string Salutation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Salutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salutation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->salutation().data(), this->salutation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Content;
        break;
      }

      // optional string Content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Sender_name;
        break;
      }

      // optional string Sender_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ItemList;
        break;
      }

      // repeated .MailItem ItemList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ItemList;
        if (input->ExpectTag(80)) goto parse_Sender_id;
        break;
      }

      // optional uint64 Sender_id = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Start_time;
        break;
      }

      // optional int32 Start_time = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Expire_time;
        break;
      }

      // optional int32 Expire_time = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Receiver_id;
        break;
      }

      // optional uint64 Receiver_id = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Mail_type = 1 [default = 0];
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_type(), output);
  }

  // optional int32 Mail_id = 2 [default = 0];
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_id(), output);
  }

  // optional bool IsRead = 3 [default = false];
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isread(), output);
  }

  // optional bool IsGet = 4 [default = false];
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isget(), output);
  }

  // optional string Title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string Salutation = 6;
  if (has_salutation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->salutation().data(), this->salutation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->salutation(), output);
  }

  // optional string Content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

  // optional string Sender_name = 8;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sender_name(), output);
  }

  // repeated .MailItem ItemList = 9;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->itemlist(i), output);
  }

  // optional uint64 Sender_id = 10 [default = 0];
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->sender_id(), output);
  }

  // optional int32 Start_time = 11 [default = -1];
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->start_time(), output);
  }

  // optional int32 Expire_time = 12 [default = -1];
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->expire_time(), output);
  }

  // optional uint64 Receiver_id = 13 [default = 0];
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->receiver_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Mail_type = 1 [default = 0];
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_type(), target);
  }

  // optional int32 Mail_id = 2 [default = 0];
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_id(), target);
  }

  // optional bool IsRead = 3 [default = false];
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isread(), target);
  }

  // optional bool IsGet = 4 [default = false];
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isget(), target);
  }

  // optional string Title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string Salutation = 6;
  if (has_salutation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->salutation().data(), this->salutation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->salutation(), target);
  }

  // optional string Content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional string Sender_name = 8;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender_name(), target);
  }

  // repeated .MailItem ItemList = 9;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->itemlist(i), target);
  }

  // optional uint64 Sender_id = 10 [default = 0];
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->sender_id(), target);
  }

  // optional int32 Start_time = 11 [default = -1];
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->start_time(), target);
  }

  // optional int32 Expire_time = 12 [default = -1];
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->expire_time(), target);
  }

  // optional uint64 Receiver_id = 13 [default = 0];
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->receiver_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Mail_type = 1 [default = 0];
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }

    // optional int32 Mail_id = 2 [default = 0];
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }

    // optional bool IsRead = 3 [default = false];
    if (has_isread()) {
      total_size += 1 + 1;
    }

    // optional bool IsGet = 4 [default = false];
    if (has_isget()) {
      total_size += 1 + 1;
    }

    // optional string Title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Salutation = 6;
    if (has_salutation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salutation());
    }

    // optional string Content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string Sender_name = 8;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 Sender_id = 10 [default = 0];
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender_id());
    }

    // optional int32 Start_time = 11 [default = -1];
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 Expire_time = 12 [default = -1];
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // optional uint64 Receiver_id = 13 [default = 0];
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver_id());
    }

  }
  // repeated .MailItem ItemList = 9;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_salutation()) {
      set_salutation(from.salutation());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(isread_, other->isread_);
    std::swap(isget_, other->isget_);
    std::swap(title_, other->title_);
    std::swap(salutation_, other->salutation_);
    std::swap(content_, other->content_);
    std::swap(sender_name_, other->sender_name_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSlotStarInfo::kRankUpLevelFieldNumber;
const int EquipSlotStarInfo::kSlotTypeFieldNumber;
const int EquipSlotStarInfo::kBattleScoreFieldNumber;
const int EquipSlotStarInfo::kNextBattleScoreFieldNumber;
#endif  // !_MSC_VER

EquipSlotStarInfo::EquipSlotStarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSlotStarInfo::InitAsDefaultInstance() {
}

EquipSlotStarInfo::EquipSlotStarInfo(const EquipSlotStarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSlotStarInfo::SharedCtor() {
  _cached_size_ = 0;
  rankup_level_ = -1;
  slot_type_ = -1;
  battlescore_ = -1;
  nextbattlescore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlotStarInfo::~EquipSlotStarInfo() {
  SharedDtor();
}

void EquipSlotStarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSlotStarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlotStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlotStarInfo_descriptor_;
}

const EquipSlotStarInfo& EquipSlotStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipSlotStarInfo* EquipSlotStarInfo::default_instance_ = NULL;

EquipSlotStarInfo* EquipSlotStarInfo::New() const {
  return new EquipSlotStarInfo;
}

void EquipSlotStarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankup_level_ = -1;
    slot_type_ = -1;
    battlescore_ = -1;
    nextbattlescore_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlotStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RankUp_Level = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankup_level_)));
          set_has_rankup_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Slot_Type;
        break;
      }

      // optional int32 Slot_Type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Slot_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
          set_has_slot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NextBattleScore;
        break;
      }

      // optional int32 NextBattleScore = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextBattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextbattlescore_)));
          set_has_nextbattlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSlotStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RankUp_Level = 1 [default = -1];
  if (has_rankup_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankup_level(), output);
  }

  // optional int32 Slot_Type = 3 [default = -1];
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_type(), output);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlescore(), output);
  }

  // optional int32 NextBattleScore = 6 [default = -1];
  if (has_nextbattlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nextbattlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSlotStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RankUp_Level = 1 [default = -1];
  if (has_rankup_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankup_level(), target);
  }

  // optional int32 Slot_Type = 3 [default = -1];
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_type(), target);
  }

  // optional int32 BattleScore = 4 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlescore(), target);
  }

  // optional int32 NextBattleScore = 6 [default = -1];
  if (has_nextbattlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nextbattlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSlotStarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RankUp_Level = 1 [default = -1];
    if (has_rankup_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankup_level());
    }

    // optional int32 Slot_Type = 3 [default = -1];
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_type());
    }

    // optional int32 BattleScore = 4 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional int32 NextBattleScore = 6 [default = -1];
    if (has_nextbattlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextbattlescore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlotStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlotStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlotStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlotStarInfo::MergeFrom(const EquipSlotStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankup_level()) {
      set_rankup_level(from.rankup_level());
    }
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_nextbattlescore()) {
      set_nextbattlescore(from.nextbattlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlotStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlotStarInfo::CopyFrom(const EquipSlotStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlotStarInfo::IsInitialized() const {

  return true;
}

void EquipSlotStarInfo::Swap(EquipSlotStarInfo* other) {
  if (other != this) {
    std::swap(rankup_level_, other->rankup_level_);
    std::swap(slot_type_, other->slot_type_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(nextbattlescore_, other->nextbattlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlotStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlotStarInfo_descriptor_;
  metadata.reflection = EquipSlotStarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropItem::kItemTypeFieldNumber;
const int DropItem::kItemIDFieldNumber;
const int DropItem::kItemNumFieldNumber;
const int DropItem::kBindFieldNumber;
const int DropItem::kTransitFieldNumber;
#endif  // !_MSC_VER

DropItem::DropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropItem::InitAsDefaultInstance() {
}

DropItem::DropItem(const DropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = -1;
  itemid_ = -1;
  itemnum_ = -1;
  bind_ = false;
  transit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropItem::~DropItem() {
  SharedDtor();
}

void DropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropItem_descriptor_;
}

const DropItem& DropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DropItem* DropItem::default_instance_ = NULL;

DropItem* DropItem::New() const {
  return new DropItem;
}

void DropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = -1;
    itemid_ = -1;
    itemnum_ = -1;
    bind_ = false;
    transit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // optional int32 ItemID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemNum;
        break;
      }

      // optional int32 ItemNum = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Bind;
        break;
      }

      // optional bool Bind = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Transit;
        break;
      }

      // optional bool Transit = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Transit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transit_)));
          set_has_transit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemType = 1 [default = -1];
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional int32 ItemID = 2 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 ItemNum = 3 [default = -1];
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional bool Bind = 4 [default = false];
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bind(), output);
  }

  // optional bool Transit = 5 [default = false];
  if (has_transit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemType = 1 [default = -1];
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemtype(), target);
  }

  // optional int32 ItemID = 2 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 ItemNum = 3 [default = -1];
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // optional bool Bind = 4 [default = false];
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bind(), target);
  }

  // optional bool Transit = 5 [default = false];
  if (has_transit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemType = 1 [default = -1];
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 ItemID = 2 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemNum = 3 [default = -1];
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional bool Bind = 4 [default = false];
    if (has_bind()) {
      total_size += 1 + 1;
    }

    // optional bool Transit = 5 [default = false];
    if (has_transit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropItem::MergeFrom(const DropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_transit()) {
      set_transit(from.transit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItem::CopyFrom(const DropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItem::IsInitialized() const {

  return true;
}

void DropItem::Swap(DropItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(bind_, other->bind_);
    std::swap(transit_, other->transit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropItem_descriptor_;
  metadata.reflection = DropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetData::kExpFieldNumber;
const int PetData::kLevelFieldNumber;
const int PetData::kNameFieldNumber;
const int PetData::kAttrsFieldNumber;
const int PetData::kBattleScoreFieldNumber;
const int PetData::kTalentFieldNumber;
const int PetData::kSkillListFieldNumber;
const int PetData::kIsActiveFieldNumber;
const int PetData::kTalentScoreFieldNumber;
#endif  // !_MSC_VER

PetData::PetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetData::InitAsDefaultInstance() {
}

PetData::PetData(const PetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetData::SharedCtor() {
  _cached_size_ = 0;
  exp_ = -1;
  level_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlescore_ = -1;
  isactive_ = false;
  talentscore_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetData::~PetData() {
  SharedDtor();
}

void PetData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetData_descriptor_;
}

const PetData& PetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PetData* PetData::default_instance_ = NULL;

PetData* PetData::New() const {
  return new PetData;
}

void PetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = -1;
    level_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    battlescore_ = -1;
    isactive_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    talentscore_ = -1;
  }
  attrs_.Clear();
  talent_.Clear();
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Exp = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Attrs;
        break;
      }

      // repeated .AttrKeyValue Attrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Attrs;
        if (input->ExpectTag(48)) goto parse_BattleScore;
        break;
      }

      // optional int32 BattleScore = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Talent;
        break;
      }

      // repeated .AttrKeyValue Talent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Talent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Talent;
        if (input->ExpectTag(66)) goto parse_SkillList;
        break;
      }

      // repeated .PetSkill SkillList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SkillList;
        if (input->ExpectTag(72)) goto parse_IsActive;
        break;
      }

      // optional bool IsActive = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TalentScore;
        break;
      }

      // optional int32 TalentScore = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TalentScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentscore_)));
          set_has_talentscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Exp = 1 [default = -1];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .AttrKeyValue Attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attrs(i), output);
  }

  // optional int32 BattleScore = 6 [default = -1];
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battlescore(), output);
  }

  // repeated .AttrKeyValue Talent = 7;
  for (int i = 0; i < this->talent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->talent(i), output);
  }

  // repeated .PetSkill SkillList = 8;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skilllist(i), output);
  }

  // optional bool IsActive = 9 [default = false];
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isactive(), output);
  }

  // optional int32 TalentScore = 10 [default = -1];
  if (has_talentscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->talentscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Exp = 1 [default = -1];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .AttrKeyValue Attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attrs(i), target);
  }

  // optional int32 BattleScore = 6 [default = -1];
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battlescore(), target);
  }

  // repeated .AttrKeyValue Talent = 7;
  for (int i = 0; i < this->talent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->talent(i), target);
  }

  // repeated .PetSkill SkillList = 8;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skilllist(i), target);
  }

  // optional bool IsActive = 9 [default = false];
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isactive(), target);
  }

  // optional int32 TalentScore = 10 [default = -1];
  if (has_talentscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->talentscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Exp = 1 [default = -1];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 Level = 2 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 BattleScore = 6 [default = -1];
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // optional bool IsActive = 9 [default = false];
    if (has_isactive()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 TalentScore = 10 [default = -1];
    if (has_talentscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentscore());
    }

  }
  // repeated .AttrKeyValue Attrs = 5;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .AttrKeyValue Talent = 7;
  total_size += 1 * this->talent_size();
  for (int i = 0; i < this->talent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talent(i));
  }

  // repeated .PetSkill SkillList = 8;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetData::MergeFrom(const PetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  talent_.MergeFrom(from.talent_);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_talentscore()) {
      set_talentscore(from.talentscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetData::CopyFrom(const PetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetData::IsInitialized() const {

  return true;
}

void PetData::Swap(PetData* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    attrs_.Swap(&other->attrs_);
    std::swap(battlescore_, other->battlescore_);
    talent_.Swap(&other->talent_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(isactive_, other->isactive_);
    std::swap(talentscore_, other->talentscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetData_descriptor_;
  metadata.reflection = PetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipBuildAtf::kLevelFieldNumber;
const int EquipBuildAtf::kAtfValueFieldNumber;
#endif  // !_MSC_VER

EquipBuildAtf::EquipBuildAtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipBuildAtf::InitAsDefaultInstance() {
}

EquipBuildAtf::EquipBuildAtf(const EquipBuildAtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipBuildAtf::SharedCtor() {
  _cached_size_ = 0;
  level_ = -1;
  atf_value_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipBuildAtf::~EquipBuildAtf() {
  SharedDtor();
}

void EquipBuildAtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipBuildAtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipBuildAtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipBuildAtf_descriptor_;
}

const EquipBuildAtf& EquipBuildAtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

EquipBuildAtf* EquipBuildAtf::default_instance_ = NULL;

EquipBuildAtf* EquipBuildAtf::New() const {
  return new EquipBuildAtf;
}

void EquipBuildAtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = -1;
    atf_value_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipBuildAtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Level = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Atf_value;
        break;
      }

      // optional int32 Atf_value = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Atf_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atf_value_)));
          set_has_atf_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipBuildAtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Level = 1 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 Atf_value = 2 [default = -1];
  if (has_atf_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atf_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipBuildAtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Level = 1 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 Atf_value = 2 [default = -1];
  if (has_atf_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atf_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipBuildAtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Level = 1 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Atf_value = 2 [default = -1];
    if (has_atf_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atf_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipBuildAtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipBuildAtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipBuildAtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipBuildAtf::MergeFrom(const EquipBuildAtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_atf_value()) {
      set_atf_value(from.atf_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipBuildAtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipBuildAtf::CopyFrom(const EquipBuildAtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipBuildAtf::IsInitialized() const {

  return true;
}

void EquipBuildAtf::Swap(EquipBuildAtf* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(atf_value_, other->atf_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipBuildAtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipBuildAtf_descriptor_;
  metadata.reflection = EquipBuildAtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureData::kIDFieldNumber;
const int TreasureData::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

TreasureData::TreasureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureData::InitAsDefaultInstance() {
}

TreasureData::TreasureData(const TreasureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureData::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureData::~TreasureData() {
  SharedDtor();
}

void TreasureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureData_descriptor_;
}

const TreasureData& TreasureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TreasureData* TreasureData::default_instance_ = NULL;

TreasureData* TreasureData::New() const {
  return new TreasureData;
}

void TreasureData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Extra_Info;
        break;
      }

      // repeated .TreasureExtraInfo Extra_Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Extra_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Extra_Info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .TreasureExtraInfo Extra_Info = 2;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .TreasureExtraInfo Extra_Info = 2;
  for (int i = 0; i < this->extra_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extra_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .TreasureExtraInfo Extra_Info = 2;
  total_size += 1 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureData::MergeFrom(const TreasureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureData::CopyFrom(const TreasureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureData::IsInitialized() const {

  return true;
}

void TreasureData::Swap(TreasureData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureData_descriptor_;
  metadata.reflection = TreasureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureExtraInfo::kColorTypeFieldNumber;
const int TreasureExtraInfo::kTimeTypeFieldNumber;
const int TreasureExtraInfo::kStateFieldNumber;
const int TreasureExtraInfo::kExpierTimeFieldNumber;
#endif  // !_MSC_VER

TreasureExtraInfo::TreasureExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureExtraInfo::InitAsDefaultInstance() {
}

TreasureExtraInfo::TreasureExtraInfo(const TreasureExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  color_type_ = -1;
  time_type_ = -1;
  state_ = 0;
  expier_time_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureExtraInfo::~TreasureExtraInfo() {
  SharedDtor();
}

void TreasureExtraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureExtraInfo_descriptor_;
}

const TreasureExtraInfo& TreasureExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TreasureExtraInfo* TreasureExtraInfo::default_instance_ = NULL;

TreasureExtraInfo* TreasureExtraInfo::New() const {
  return new TreasureExtraInfo;
}

void TreasureExtraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_type_ = -1;
    time_type_ = -1;
    state_ = 0;
    expier_time_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Color_Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time_Type;
        break;
      }

      // optional int32 Time_Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional int32 State = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Expier_Time;
        break;
      }

      // optional int64 Expier_Time = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Expier_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expier_time_)));
          set_has_expier_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Color_Type = 1 [default = -1];
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color_type(), output);
  }

  // optional int32 Time_Type = 2 [default = -1];
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_type(), output);
  }

  // optional int32 State = 3 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int64 Expier_Time = 4 [default = -1];
  if (has_expier_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expier_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Color_Type = 1 [default = -1];
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color_type(), target);
  }

  // optional int32 Time_Type = 2 [default = -1];
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_type(), target);
  }

  // optional int32 State = 3 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int64 Expier_Time = 4 [default = -1];
  if (has_expier_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expier_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Color_Type = 1 [default = -1];
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }

    // optional int32 Time_Type = 2 [default = -1];
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_type());
    }

    // optional int32 State = 3 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 Expier_Time = 4 [default = -1];
    if (has_expier_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expier_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureExtraInfo::MergeFrom(const TreasureExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_expier_time()) {
      set_expier_time(from.expier_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureExtraInfo::CopyFrom(const TreasureExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureExtraInfo::IsInitialized() const {

  return true;
}

void TreasureExtraInfo::Swap(TreasureExtraInfo* other) {
  if (other != this) {
    std::swap(color_type_, other->color_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(state_, other->state_);
    std::swap(expier_time_, other->expier_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureExtraInfo_descriptor_;
  metadata.reflection = TreasureExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureDepotData::kLevelFieldNumber;
const int TreasureDepotData::kPointFieldNumber;
const int TreasureDepotData::kTreasureDataFieldNumber;
#endif  // !_MSC_VER

TreasureDepotData::TreasureDepotData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureDepotData::InitAsDefaultInstance() {
}

TreasureDepotData::TreasureDepotData(const TreasureDepotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureDepotData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 1;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureDepotData::~TreasureDepotData() {
  SharedDtor();
}

void TreasureDepotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureDepotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureDepotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureDepotData_descriptor_;
}

const TreasureDepotData& TreasureDepotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TreasureDepotData* TreasureDepotData::default_instance_ = NULL;

TreasureDepotData* TreasureDepotData::New() const {
  return new TreasureDepotData;
}

void TreasureDepotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 1;
    point_ = 0;
  }
  treasure_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureDepotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Level = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }

      // optional int32 Point = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Treasure_Data;
        break;
      }

      // repeated .TreasureData Treasure_Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Treasure_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasure_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Treasure_Data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureDepotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Level = 1 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 Point = 2 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // repeated .TreasureData Treasure_Data = 3;
  for (int i = 0; i < this->treasure_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->treasure_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureDepotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Level = 1 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 Point = 2 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // repeated .TreasureData Treasure_Data = 3;
  for (int i = 0; i < this->treasure_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->treasure_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureDepotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Level = 1 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Point = 2 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated .TreasureData Treasure_Data = 3;
  total_size += 1 * this->treasure_data_size();
  for (int i = 0; i < this->treasure_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasure_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureDepotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureDepotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureDepotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureDepotData::MergeFrom(const TreasureDepotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasure_data_.MergeFrom(from.treasure_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureDepotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureDepotData::CopyFrom(const TreasureDepotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureDepotData::IsInitialized() const {

  return true;
}

void TreasureDepotData::Swap(TreasureDepotData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(point_, other->point_);
    treasure_data_.Swap(&other->treasure_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureDepotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureDepotData_descriptor_;
  metadata.reflection = TreasureDepotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItem::kShopItemIDFieldNumber;
const int ShopItem::kTotalBuyCountFieldNumber;
const int ShopItem::kBuyCountFieldNumber;
#endif  // !_MSC_VER

ShopItem::ShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopItem::InitAsDefaultInstance() {
}

ShopItem::ShopItem(const ShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopItem::SharedCtor() {
  _cached_size_ = 0;
  shopitemid_ = -1;
  totalbuycount_ = -1;
  buycount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItem::~ShopItem() {
  SharedDtor();
}

void ShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItem_descriptor_;
}

const ShopItem& ShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ShopItem* ShopItem::default_instance_ = NULL;

ShopItem* ShopItem::New() const {
  return new ShopItem;
}

void ShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopitemid_ = -1;
    totalbuycount_ = -1;
    buycount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ShopItemID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopitemid_)));
          set_has_shopitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalBuyCount;
        break;
      }

      // optional int32 TotalBuyCount = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalBuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalbuycount_)));
          set_has_totalbuycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BuyCount;
        break;
      }

      // optional int32 BuyCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ShopItemID = 1 [default = -1];
  if (has_shopitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopitemid(), output);
  }

  // optional int32 TotalBuyCount = 2 [default = -1];
  if (has_totalbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalbuycount(), output);
  }

  // optional int32 BuyCount = 3 [default = -1];
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ShopItemID = 1 [default = -1];
  if (has_shopitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shopitemid(), target);
  }

  // optional int32 TotalBuyCount = 2 [default = -1];
  if (has_totalbuycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalbuycount(), target);
  }

  // optional int32 BuyCount = 3 [default = -1];
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ShopItemID = 1 [default = -1];
    if (has_shopitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopitemid());
    }

    // optional int32 TotalBuyCount = 2 [default = -1];
    if (has_totalbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalbuycount());
    }

    // optional int32 BuyCount = 3 [default = -1];
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItem::MergeFrom(const ShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopitemid()) {
      set_shopitemid(from.shopitemid());
    }
    if (from.has_totalbuycount()) {
      set_totalbuycount(from.totalbuycount());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItem::CopyFrom(const ShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItem::IsInitialized() const {

  return true;
}

void ShopItem::Swap(ShopItem* other) {
  if (other != this) {
    std::swap(shopitemid_, other->shopitemid_);
    std::swap(totalbuycount_, other->totalbuycount_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItem_descriptor_;
  metadata.reflection = ShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomQuestData::kQuestTypeFieldNumber;
const int RandomQuestData::kQuestIdListFieldNumber;
const int RandomQuestData::kDayPorgressFieldNumber;
const int RandomQuestData::kLastCompleteTimeFieldNumber;
const int RandomQuestData::kRandomListQuestIdFieldNumber;
#endif  // !_MSC_VER

RandomQuestData::RandomQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomQuestData::InitAsDefaultInstance() {
}

RandomQuestData::RandomQuestData(const RandomQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomQuestData::SharedCtor() {
  _cached_size_ = 0;
  questtype_ = -1;
  dayporgress_ = -1;
  lastcompletetime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomQuestData::~RandomQuestData() {
  SharedDtor();
}

void RandomQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomQuestData_descriptor_;
}

const RandomQuestData& RandomQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

RandomQuestData* RandomQuestData::default_instance_ = NULL;

RandomQuestData* RandomQuestData::New() const {
  return new RandomQuestData;
}

void RandomQuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questtype_ = -1;
    dayporgress_ = -1;
    lastcompletetime_ = GOOGLE_LONGLONG(-1);
  }
  questidlist_.Clear();
  randomlistquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questtype_)));
          set_has_questtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QuestIdList;
        break;
      }

      // repeated int32 QuestIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_questidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QuestIdList;
        if (input->ExpectTag(48)) goto parse_DayPorgress;
        break;
      }

      // optional int32 DayPorgress = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DayPorgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayporgress_)));
          set_has_dayporgress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LastCompleteTime;
        break;
      }

      // optional int64 LastCompleteTime = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastCompleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastcompletetime_)));
          set_has_lastcompletetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RandomListQuestId;
        break;
      }

      // repeated int32 RandomListQuestId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RandomListQuestId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_randomlistquestid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_randomlistquestid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RandomListQuestId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestType = 1 [default = -1];
  if (has_questtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questtype(), output);
  }

  // repeated int32 QuestIdList = 2;
  for (int i = 0; i < this->questidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->questidlist(i), output);
  }

  // optional int32 DayPorgress = 6 [default = -1];
  if (has_dayporgress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dayporgress(), output);
  }

  // optional int64 LastCompleteTime = 7 [default = -1];
  if (has_lastcompletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastcompletetime(), output);
  }

  // repeated int32 RandomListQuestId = 8;
  for (int i = 0; i < this->randomlistquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->randomlistquestid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestType = 1 [default = -1];
  if (has_questtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questtype(), target);
  }

  // repeated int32 QuestIdList = 2;
  for (int i = 0; i < this->questidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->questidlist(i), target);
  }

  // optional int32 DayPorgress = 6 [default = -1];
  if (has_dayporgress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dayporgress(), target);
  }

  // optional int64 LastCompleteTime = 7 [default = -1];
  if (has_lastcompletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastcompletetime(), target);
  }

  // repeated int32 RandomListQuestId = 8;
  for (int i = 0; i < this->randomlistquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->randomlistquestid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestType = 1 [default = -1];
    if (has_questtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questtype());
    }

    // optional int32 DayPorgress = 6 [default = -1];
    if (has_dayporgress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayporgress());
    }

    // optional int64 LastCompleteTime = 7 [default = -1];
    if (has_lastcompletetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastcompletetime());
    }

  }
  // repeated int32 QuestIdList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->questidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questidlist(i));
    }
    total_size += 1 * this->questidlist_size() + data_size;
  }

  // repeated int32 RandomListQuestId = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->randomlistquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->randomlistquestid(i));
    }
    total_size += 1 * this->randomlistquestid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomQuestData::MergeFrom(const RandomQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  questidlist_.MergeFrom(from.questidlist_);
  randomlistquestid_.MergeFrom(from.randomlistquestid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questtype()) {
      set_questtype(from.questtype());
    }
    if (from.has_dayporgress()) {
      set_dayporgress(from.dayporgress());
    }
    if (from.has_lastcompletetime()) {
      set_lastcompletetime(from.lastcompletetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomQuestData::CopyFrom(const RandomQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomQuestData::IsInitialized() const {

  return true;
}

void RandomQuestData::Swap(RandomQuestData* other) {
  if (other != this) {
    std::swap(questtype_, other->questtype_);
    questidlist_.Swap(&other->questidlist_);
    std::swap(dayporgress_, other->dayporgress_);
    std::swap(lastcompletetime_, other->lastcompletetime_);
    randomlistquestid_.Swap(&other->randomlistquestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomQuestData_descriptor_;
  metadata.reflection = RandomQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomQuestListData::kQuestListFieldNumber;
#endif  // !_MSC_VER

RandomQuestListData::RandomQuestListData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomQuestListData::InitAsDefaultInstance() {
}

RandomQuestListData::RandomQuestListData(const RandomQuestListData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomQuestListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomQuestListData::~RandomQuestListData() {
  SharedDtor();
}

void RandomQuestListData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomQuestListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomQuestListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomQuestListData_descriptor_;
}

const RandomQuestListData& RandomQuestListData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

RandomQuestListData* RandomQuestListData::default_instance_ = NULL;

RandomQuestListData* RandomQuestListData::New() const {
  return new RandomQuestListData;
}

void RandomQuestListData::Clear() {
  questlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomQuestListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RandomQuestData QuestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_QuestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomQuestListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RandomQuestData QuestList = 1;
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomQuestListData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RandomQuestData QuestList = 1;
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomQuestListData::ByteSize() const {
  int total_size = 0;

  // repeated .RandomQuestData QuestList = 1;
  total_size += 1 * this->questlist_size();
  for (int i = 0; i < this->questlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomQuestListData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomQuestListData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomQuestListData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomQuestListData::MergeFrom(const RandomQuestListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  questlist_.MergeFrom(from.questlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomQuestListData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomQuestListData::CopyFrom(const RandomQuestListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomQuestListData::IsInitialized() const {

  return true;
}

void RandomQuestListData::Swap(RandomQuestListData* other) {
  if (other != this) {
    questlist_.Swap(&other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomQuestListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomQuestListData_descriptor_;
  metadata.reflection = RandomQuestListData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpBattleInfo::kWinCountFieldNumber;
const int PvpBattleInfo::kLoseCountFieldNumber;
const int PvpBattleInfo::kDrawCountFieldNumber;
const int PvpBattleInfo::kContinuityWinCountFieldNumber;
const int PvpBattleInfo::kRankFieldNumber;
const int PvpBattleInfo::kStarFieldNumber;
const int PvpBattleInfo::kEloFieldNumber;
const int PvpBattleInfo::kBattleCountFieldNumber;
const int PvpBattleInfo::kRewardListFieldNumber;
const int PvpBattleInfo::kHistoryRankFieldNumber;
#endif  // !_MSC_VER

PvpBattleInfo::PvpBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpBattleInfo::InitAsDefaultInstance() {
}

PvpBattleInfo::PvpBattleInfo(const PvpBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  wincount_ = -1;
  losecount_ = -1;
  drawcount_ = -1;
  continuitywincount_ = -1;
  rank_ = -1;
  star_ = -1;
  elo_ = -1;
  battlecount_ = -1;
  historyrank_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpBattleInfo::~PvpBattleInfo() {
  SharedDtor();
}

void PvpBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpBattleInfo_descriptor_;
}

const PvpBattleInfo& PvpBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpBattleInfo* PvpBattleInfo::default_instance_ = NULL;

PvpBattleInfo* PvpBattleInfo::New() const {
  return new PvpBattleInfo;
}

void PvpBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wincount_ = -1;
    losecount_ = -1;
    drawcount_ = -1;
    continuitywincount_ = -1;
    rank_ = -1;
    star_ = -1;
    elo_ = -1;
    battlecount_ = -1;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    historyrank_ = -1;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 WinCount = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LoseCount;
        break;
      }

      // optional int32 LoseCount = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecount_)));
          set_has_losecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DrawCount;
        break;
      }

      // optional int32 DrawCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DrawCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawcount_)));
          set_has_drawcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ContinuityWinCount;
        break;
      }

      // optional int32 ContinuityWinCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContinuityWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuitywincount_)));
          set_has_continuitywincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Star;
        break;
      }

      // optional int32 Star = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Elo;
        break;
      }

      // optional int32 Elo = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Elo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elo_)));
          set_has_elo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BattleCount;
        break;
      }

      // optional int32 BattleCount = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlecount_)));
          set_has_battlecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RewardList;
        break;
      }

      // repeated int32 RewardList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_rewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RewardList;
        if (input->ExpectTag(80)) goto parse_HistoryRank;
        break;
      }

      // optional int32 HistoryRank = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HistoryRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historyrank_)));
          set_has_historyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 WinCount = 1 [default = -1];
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wincount(), output);
  }

  // optional int32 LoseCount = 2 [default = -1];
  if (has_losecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->losecount(), output);
  }

  // optional int32 DrawCount = 3 [default = -1];
  if (has_drawcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drawcount(), output);
  }

  // optional int32 ContinuityWinCount = 4 [default = -1];
  if (has_continuitywincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continuitywincount(), output);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional int32 Star = 6 [default = -1];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // optional int32 Elo = 7 [default = -1];
  if (has_elo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->elo(), output);
  }

  // optional int32 BattleCount = 8 [default = -1];
  if (has_battlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battlecount(), output);
  }

  // repeated int32 RewardList = 9;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->rewardlist(i), output);
  }

  // optional int32 HistoryRank = 10 [default = -1];
  if (has_historyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->historyrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 WinCount = 1 [default = -1];
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wincount(), target);
  }

  // optional int32 LoseCount = 2 [default = -1];
  if (has_losecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->losecount(), target);
  }

  // optional int32 DrawCount = 3 [default = -1];
  if (has_drawcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drawcount(), target);
  }

  // optional int32 ContinuityWinCount = 4 [default = -1];
  if (has_continuitywincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continuitywincount(), target);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional int32 Star = 6 [default = -1];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // optional int32 Elo = 7 [default = -1];
  if (has_elo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->elo(), target);
  }

  // optional int32 BattleCount = 8 [default = -1];
  if (has_battlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battlecount(), target);
  }

  // repeated int32 RewardList = 9;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->rewardlist(i), target);
  }

  // optional int32 HistoryRank = 10 [default = -1];
  if (has_historyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->historyrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 WinCount = 1 [default = -1];
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }

    // optional int32 LoseCount = 2 [default = -1];
    if (has_losecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecount());
    }

    // optional int32 DrawCount = 3 [default = -1];
    if (has_drawcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawcount());
    }

    // optional int32 ContinuityWinCount = 4 [default = -1];
    if (has_continuitywincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuitywincount());
    }

    // optional int32 Rank = 5 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Star = 6 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 Elo = 7 [default = -1];
    if (has_elo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elo());
    }

    // optional int32 BattleCount = 8 [default = -1];
    if (has_battlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlecount());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 HistoryRank = 10 [default = -1];
    if (has_historyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historyrank());
    }

  }
  // repeated int32 RewardList = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardlist(i));
    }
    total_size += 1 * this->rewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpBattleInfo::MergeFrom(const PvpBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_losecount()) {
      set_losecount(from.losecount());
    }
    if (from.has_drawcount()) {
      set_drawcount(from.drawcount());
    }
    if (from.has_continuitywincount()) {
      set_continuitywincount(from.continuitywincount());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_elo()) {
      set_elo(from.elo());
    }
    if (from.has_battlecount()) {
      set_battlecount(from.battlecount());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_historyrank()) {
      set_historyrank(from.historyrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpBattleInfo::CopyFrom(const PvpBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpBattleInfo::IsInitialized() const {

  return true;
}

void PvpBattleInfo::Swap(PvpBattleInfo* other) {
  if (other != this) {
    std::swap(wincount_, other->wincount_);
    std::swap(losecount_, other->losecount_);
    std::swap(drawcount_, other->drawcount_);
    std::swap(continuitywincount_, other->continuitywincount_);
    std::swap(rank_, other->rank_);
    std::swap(star_, other->star_);
    std::swap(elo_, other->elo_);
    std::swap(battlecount_, other->battlecount_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(historyrank_, other->historyrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpBattleInfo_descriptor_;
  metadata.reflection = PvpBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpPlayerInfo::kRoleIDFieldNumber;
const int PvpPlayerInfo::kRoleNameFieldNumber;
const int PvpPlayerInfo::kLevelFieldNumber;
const int PvpPlayerInfo::kRankFieldNumber;
const int PvpPlayerInfo::kPvpInfoFieldNumber;
const int PvpPlayerInfo::kGuildNameFieldNumber;
const int PvpPlayerInfo::kConfigIDFieldNumber;
#endif  // !_MSC_VER

PvpPlayerInfo::PvpPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpPlayerInfo::InitAsDefaultInstance() {
  pvpinfo_ = const_cast< ::PvpBattleInfo*>(&::PvpBattleInfo::default_instance());
}

PvpPlayerInfo::PvpPlayerInfo(const PvpPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = -1;
  rank_ = -1;
  pvpinfo_ = NULL;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpPlayerInfo::~PvpPlayerInfo() {
  SharedDtor();
}

void PvpPlayerInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
    delete pvpinfo_;
  }
}

void PvpPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpPlayerInfo_descriptor_;
}

const PvpPlayerInfo& PvpPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpPlayerInfo* PvpPlayerInfo::default_instance_ = NULL;

PvpPlayerInfo* PvpPlayerInfo::New() const {
  return new PvpPlayerInfo;
}

void PvpPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = -1;
    rank_ = -1;
    if (has_pvpinfo()) {
      if (pvpinfo_ != NULL) pvpinfo_->::PvpBattleInfo::Clear();
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    configid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PvpInfo;
        break;
      }

      // optional .PvpBattleInfo PvpInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PvpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ConfigID;
        break;
      }

      // optional int32 ConfigID = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional .PvpBattleInfo PvpInfo = 6;
  if (has_pvpinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pvpinfo(), output);
  }

  // optional string GuildName = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->guildname(), output);
  }

  // optional int32 ConfigID = 8 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 Rank = 5 [default = -1];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional .PvpBattleInfo PvpInfo = 6;
  if (has_pvpinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pvpinfo(), target);
  }

  // optional string GuildName = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guildname(), target);
  }

  // optional int32 ConfigID = 8 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleID = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 Level = 3 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Rank = 5 [default = -1];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional .PvpBattleInfo PvpInfo = 6;
    if (has_pvpinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpinfo());
    }

    // optional string GuildName = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 ConfigID = 8 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpPlayerInfo::MergeFrom(const PvpPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_pvpinfo()) {
      mutable_pvpinfo()->::PvpBattleInfo::MergeFrom(from.pvpinfo());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpPlayerInfo::CopyFrom(const PvpPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpPlayerInfo::IsInitialized() const {

  return true;
}

void PvpPlayerInfo::Swap(PvpPlayerInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(pvpinfo_, other->pvpinfo_);
    std::swap(guildname_, other->guildname_);
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpPlayerInfo_descriptor_;
  metadata.reflection = PvpPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpPlayerState::kRoleIDFieldNumber;
const int PvpPlayerState::kStateFieldNumber;
#endif  // !_MSC_VER

PvpPlayerState::PvpPlayerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpPlayerState::InitAsDefaultInstance() {
}

PvpPlayerState::PvpPlayerState(const PvpPlayerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpPlayerState::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  state_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpPlayerState::~PvpPlayerState() {
  SharedDtor();
}

void PvpPlayerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpPlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpPlayerState_descriptor_;
}

const PvpPlayerState& PvpPlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpPlayerState* PvpPlayerState::default_instance_ = NULL;

PvpPlayerState* PvpPlayerState::New() const {
  return new PvpPlayerState;
}

void PvpPlayerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    state_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // optional int32 State = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 State = 2 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpPlayerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 State = 2 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpPlayerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleID = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 State = 2 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpPlayerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpPlayerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpPlayerState::MergeFrom(const PvpPlayerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpPlayerState::CopyFrom(const PvpPlayerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpPlayerState::IsInitialized() const {

  return true;
}

void PvpPlayerState::Swap(PvpPlayerState* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpPlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpPlayerState_descriptor_;
  metadata.reflection = PvpPlayerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpEndPlayer::kRoleIDFieldNumber;
const int PvpEndPlayer::kRoleNameFieldNumber;
const int PvpEndPlayer::kDeadCountFieldNumber;
const int PvpEndPlayer::kKillCountFieldNumber;
const int PvpEndPlayer::kLiveCountFieldNumber;
const int PvpEndPlayer::kConfigIdFieldNumber;
const int PvpEndPlayer::kDamageCountFieldNumber;
#endif  // !_MSC_VER

PvpEndPlayer::PvpEndPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpEndPlayer::InitAsDefaultInstance() {
}

PvpEndPlayer::PvpEndPlayer(const PvpEndPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpEndPlayer::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deadcount_ = -1;
  killcount_ = -1;
  livecount_ = -1;
  configid_ = -1;
  damagecount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpEndPlayer::~PvpEndPlayer() {
  SharedDtor();
}

void PvpEndPlayer::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void PvpEndPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpEndPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpEndPlayer_descriptor_;
}

const PvpEndPlayer& PvpEndPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpEndPlayer* PvpEndPlayer::default_instance_ = NULL;

PvpEndPlayer* PvpEndPlayer::New() const {
  return new PvpEndPlayer;
}

void PvpEndPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    deadcount_ = -1;
    killcount_ = -1;
    livecount_ = -1;
    configid_ = -1;
    damagecount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpEndPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DeadCount;
        break;
      }

      // optional int32 DeadCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadcount_)));
          set_has_deadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_KillCount;
        break;
      }

      // optional int32 KillCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LiveCount;
        break;
      }

      // optional int32 LiveCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiveCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &livecount_)));
          set_has_livecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DamageCount;
        break;
      }

      // optional int32 DamageCount = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagecount_)));
          set_has_damagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpEndPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 DeadCount = 3 [default = -1];
  if (has_deadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deadcount(), output);
  }

  // optional int32 KillCount = 4 [default = -1];
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->killcount(), output);
  }

  // optional int32 LiveCount = 5 [default = -1];
  if (has_livecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->livecount(), output);
  }

  // optional int32 ConfigId = 6 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->configid(), output);
  }

  // optional int32 DamageCount = 7 [default = -1];
  if (has_damagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damagecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpEndPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 DeadCount = 3 [default = -1];
  if (has_deadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deadcount(), target);
  }

  // optional int32 KillCount = 4 [default = -1];
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->killcount(), target);
  }

  // optional int32 LiveCount = 5 [default = -1];
  if (has_livecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->livecount(), target);
  }

  // optional int32 ConfigId = 6 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->configid(), target);
  }

  // optional int32 DamageCount = 7 [default = -1];
  if (has_damagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damagecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpEndPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleID = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 DeadCount = 3 [default = -1];
    if (has_deadcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadcount());
    }

    // optional int32 KillCount = 4 [default = -1];
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcount());
    }

    // optional int32 LiveCount = 5 [default = -1];
    if (has_livecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->livecount());
    }

    // optional int32 ConfigId = 6 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 DamageCount = 7 [default = -1];
    if (has_damagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpEndPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpEndPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpEndPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpEndPlayer::MergeFrom(const PvpEndPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_deadcount()) {
      set_deadcount(from.deadcount());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_livecount()) {
      set_livecount(from.livecount());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_damagecount()) {
      set_damagecount(from.damagecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpEndPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpEndPlayer::CopyFrom(const PvpEndPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEndPlayer::IsInitialized() const {

  return true;
}

void PvpEndPlayer::Swap(PvpEndPlayer* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(deadcount_, other->deadcount_);
    std::swap(killcount_, other->killcount_);
    std::swap(livecount_, other->livecount_);
    std::swap(configid_, other->configid_);
    std::swap(damagecount_, other->damagecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpEndPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpEndPlayer_descriptor_;
  metadata.reflection = PvpEndPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuest::kMainQuestFieldNumber;
const int DailyQuest::kAtivityQuestFieldNumber;
const int DailyQuest::kRewardTimesFieldNumber;
const int DailyQuest::kActivityIdFieldNumber;
#endif  // !_MSC_VER

DailyQuest::DailyQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuest::InitAsDefaultInstance() {
  mainquest_ = const_cast< ::QuestData*>(&::QuestData::default_instance());
  ativityquest_ = const_cast< ::QuestData*>(&::QuestData::default_instance());
}

DailyQuest::DailyQuest(const DailyQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuest::SharedCtor() {
  _cached_size_ = 0;
  mainquest_ = NULL;
  ativityquest_ = NULL;
  rewardtimes_ = -1;
  activityid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuest::~DailyQuest() {
  SharedDtor();
}

void DailyQuest::SharedDtor() {
  if (this != default_instance_) {
    delete mainquest_;
    delete ativityquest_;
  }
}

void DailyQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuest_descriptor_;
}

const DailyQuest& DailyQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DailyQuest* DailyQuest::default_instance_ = NULL;

DailyQuest* DailyQuest::New() const {
  return new DailyQuest;
}

void DailyQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mainquest()) {
      if (mainquest_ != NULL) mainquest_->::QuestData::Clear();
    }
    if (has_ativityquest()) {
      if (ativityquest_ != NULL) ativityquest_->::QuestData::Clear();
    }
    rewardtimes_ = -1;
    activityid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuestData MainQuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AtivityQuest;
        break;
      }

      // optional .QuestData AtivityQuest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AtivityQuest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ativityquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RewardTimes;
        break;
      }

      // optional int32 RewardTimes = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardtimes_)));
          set_has_rewardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActivityId;
        break;
      }

      // optional int32 ActivityId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActivityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuestData MainQuest = 1;
  if (has_mainquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mainquest(), output);
  }

  // optional .QuestData AtivityQuest = 2;
  if (has_ativityquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ativityquest(), output);
  }

  // optional int32 RewardTimes = 3 [default = -1];
  if (has_rewardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardtimes(), output);
  }

  // optional int32 ActivityId = 4 [default = -1];
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuestData MainQuest = 1;
  if (has_mainquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mainquest(), target);
  }

  // optional .QuestData AtivityQuest = 2;
  if (has_ativityquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ativityquest(), target);
  }

  // optional int32 RewardTimes = 3 [default = -1];
  if (has_rewardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardtimes(), target);
  }

  // optional int32 ActivityId = 4 [default = -1];
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuestData MainQuest = 1;
    if (has_mainquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainquest());
    }

    // optional .QuestData AtivityQuest = 2;
    if (has_ativityquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ativityquest());
    }

    // optional int32 RewardTimes = 3 [default = -1];
    if (has_rewardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardtimes());
    }

    // optional int32 ActivityId = 4 [default = -1];
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuest::MergeFrom(const DailyQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mainquest()) {
      mutable_mainquest()->::QuestData::MergeFrom(from.mainquest());
    }
    if (from.has_ativityquest()) {
      mutable_ativityquest()->::QuestData::MergeFrom(from.ativityquest());
    }
    if (from.has_rewardtimes()) {
      set_rewardtimes(from.rewardtimes());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuest::CopyFrom(const DailyQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuest::IsInitialized() const {

  return true;
}

void DailyQuest::Swap(DailyQuest* other) {
  if (other != this) {
    std::swap(mainquest_, other->mainquest_);
    std::swap(ativityquest_, other->ativityquest_);
    std::swap(rewardtimes_, other->rewardtimes_);
    std::swap(activityid_, other->activityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuest_descriptor_;
  metadata.reflection = DailyQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuestList::kDailyQuestListFieldNumber;
#endif  // !_MSC_VER

DailyQuestList::DailyQuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuestList::InitAsDefaultInstance() {
}

DailyQuestList::DailyQuestList(const DailyQuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuestList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuestList::~DailyQuestList() {
  SharedDtor();
}

void DailyQuestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuestList_descriptor_;
}

const DailyQuestList& DailyQuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DailyQuestList* DailyQuestList::default_instance_ = NULL;

DailyQuestList* DailyQuestList::New() const {
  return new DailyQuestList;
}

void DailyQuestList::Clear() {
  dailyquestlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DailyQuest DailyQuestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyQuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyquestlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DailyQuestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DailyQuest DailyQuestList = 1;
  for (int i = 0; i < this->dailyquestlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailyquestlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DailyQuest DailyQuestList = 1;
  for (int i = 0; i < this->dailyquestlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailyquestlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuestList::ByteSize() const {
  int total_size = 0;

  // repeated .DailyQuest DailyQuestList = 1;
  total_size += 1 * this->dailyquestlist_size();
  for (int i = 0; i < this->dailyquestlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyquestlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuestList::MergeFrom(const DailyQuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyquestlist_.MergeFrom(from.dailyquestlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuestList::CopyFrom(const DailyQuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuestList::IsInitialized() const {

  return true;
}

void DailyQuestList::Swap(DailyQuestList* other) {
  if (other != this) {
    dailyquestlist_.Swap(&other->dailyquestlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuestList_descriptor_;
  metadata.reflection = DailyQuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonSituationData::kNameFieldNumber;
const int DungeonSituationData::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

DungeonSituationData::DungeonSituationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonSituationData::InitAsDefaultInstance() {
}

DungeonSituationData::DungeonSituationData(const DungeonSituationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonSituationData::SharedCtor() {
  _cached_size_ = 0;
  name_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonSituationData::~DungeonSituationData() {
  SharedDtor();
}

void DungeonSituationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonSituationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSituationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonSituationData_descriptor_;
}

const DungeonSituationData& DungeonSituationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DungeonSituationData* DungeonSituationData::default_instance_ = NULL;

DungeonSituationData* DungeonSituationData::New() const {
  return new DungeonSituationData;
}

void DungeonSituationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = -1;
  }
  playerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonSituationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Name = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerData;
        break;
      }

      // repeated int32 PlayerData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_playerdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PlayerData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonSituationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Name = 1 [default = -1];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->name(), output);
  }

  // repeated int32 PlayerData = 2;
  for (int i = 0; i < this->playerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->playerdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonSituationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Name = 1 [default = -1];
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->name(), target);
  }

  // repeated int32 PlayerData = 2;
  for (int i = 0; i < this->playerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->playerdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonSituationData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Name = 1 [default = -1];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }

  }
  // repeated int32 PlayerData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playerdata(i));
    }
    total_size += 1 * this->playerdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSituationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonSituationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonSituationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonSituationData::MergeFrom(const DungeonSituationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerdata_.MergeFrom(from.playerdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonSituationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSituationData::CopyFrom(const DungeonSituationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSituationData::IsInitialized() const {

  return true;
}

void DungeonSituationData::Swap(DungeonSituationData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    playerdata_.Swap(&other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonSituationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonSituationData_descriptor_;
  metadata.reflection = DungeonSituationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonData::kDataFieldNumber;
const int DungeonData::kDurationMentTimeFieldNumber;
const int DungeonData::kConclusionTimeFieldNumber;
const int DungeonData::kPrepareTimeFieldNumber;
#endif  // !_MSC_VER

DungeonData::DungeonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonData::InitAsDefaultInstance() {
}

DungeonData::DungeonData(const DungeonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonData::SharedCtor() {
  _cached_size_ = 0;
  durationmenttime_ = GOOGLE_LONGLONG(-1);
  conclusiontime_ = GOOGLE_LONGLONG(-1);
  preparetime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonData::~DungeonData() {
  SharedDtor();
}

void DungeonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonData_descriptor_;
}

const DungeonData& DungeonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DungeonData* DungeonData::default_instance_ = NULL;

DungeonData* DungeonData::New() const {
  return new DungeonData;
}

void DungeonData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    durationmenttime_ = GOOGLE_LONGLONG(-1);
    conclusiontime_ = GOOGLE_LONGLONG(-1);
    preparetime_ = -1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DungeonSituationData Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Data;
        if (input->ExpectTag(16)) goto parse_DurationMentTime;
        break;
      }

      // optional int64 DurationMentTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DurationMentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &durationmenttime_)));
          set_has_durationmenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ConclusionTime;
        break;
      }

      // optional int64 ConclusionTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConclusionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conclusiontime_)));
          set_has_conclusiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PrepareTime;
        break;
      }

      // optional int32 PrepareTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrepareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preparetime_)));
          set_has_preparetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DungeonSituationData Data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int64 DurationMentTime = 2 [default = -1];
  if (has_durationmenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->durationmenttime(), output);
  }

  // optional int64 ConclusionTime = 3 [default = -1];
  if (has_conclusiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->conclusiontime(), output);
  }

  // optional int32 PrepareTime = 4 [default = -1];
  if (has_preparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preparetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DungeonSituationData Data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int64 DurationMentTime = 2 [default = -1];
  if (has_durationmenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->durationmenttime(), target);
  }

  // optional int64 ConclusionTime = 3 [default = -1];
  if (has_conclusiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->conclusiontime(), target);
  }

  // optional int32 PrepareTime = 4 [default = -1];
  if (has_preparetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->preparetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 DurationMentTime = 2 [default = -1];
    if (has_durationmenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->durationmenttime());
    }

    // optional int64 ConclusionTime = 3 [default = -1];
    if (has_conclusiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->conclusiontime());
    }

    // optional int32 PrepareTime = 4 [default = -1];
    if (has_preparetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preparetime());
    }

  }
  // repeated .DungeonSituationData Data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonData::MergeFrom(const DungeonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_durationmenttime()) {
      set_durationmenttime(from.durationmenttime());
    }
    if (from.has_conclusiontime()) {
      set_conclusiontime(from.conclusiontime());
    }
    if (from.has_preparetime()) {
      set_preparetime(from.preparetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonData::CopyFrom(const DungeonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonData::IsInitialized() const {

  return true;
}

void DungeonData::Swap(DungeonData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(durationmenttime_, other->durationmenttime_);
    std::swap(conclusiontime_, other->conclusiontime_);
    std::swap(preparetime_, other->preparetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonData_descriptor_;
  metadata.reflection = DungeonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTarget::kIdFieldNumber;
const int TeamTarget::kMinLevelFieldNumber;
const int TeamTarget::kMaxLevelFieldNumber;
const int TeamTarget::kFunctionFieldNumber;
const int TeamTarget::kTargetTypeFieldNumber;
#endif  // !_MSC_VER

TeamTarget::TeamTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamTarget::InitAsDefaultInstance() {
}

TeamTarget::TeamTarget(const TeamTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamTarget::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  minlevel_ = 0;
  maxlevel_ = 0;
  targettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTarget::~TeamTarget() {
  SharedDtor();
}

void TeamTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTarget_descriptor_;
}

const TeamTarget& TeamTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TeamTarget* TeamTarget::default_instance_ = NULL;

TeamTarget* TeamTarget::New() const {
  return new TeamTarget;
}

void TeamTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    minlevel_ = 0;
    maxlevel_ = 0;
    targettype_ = 0;
  }
  function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MinLevel;
        break;
      }

      // optional int32 MinLevel = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxLevel;
        break;
      }

      // optional int32 MaxLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Function;
        break;
      }

      // repeated int32 Function = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_function())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_function())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Function;
        if (input->ExpectTag(40)) goto parse_TargetType;
        break;
      }

      // optional int32 TargetType = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 MinLevel = 2 [default = 0];
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minlevel(), output);
  }

  // optional int32 MaxLevel = 3 [default = 0];
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxlevel(), output);
  }

  // repeated int32 Function = 4;
  for (int i = 0; i < this->function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->function(i), output);
  }

  // optional int32 TargetType = 5 [default = 0];
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targettype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 MinLevel = 2 [default = 0];
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minlevel(), target);
  }

  // optional int32 MaxLevel = 3 [default = 0];
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxlevel(), target);
  }

  // repeated int32 Function = 4;
  for (int i = 0; i < this->function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->function(i), target);
  }

  // optional int32 TargetType = 5 [default = 0];
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targettype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 MinLevel = 2 [default = 0];
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional int32 MaxLevel = 3 [default = 0];
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 TargetType = 5 [default = 0];
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targettype());
    }

  }
  // repeated int32 Function = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->function_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->function(i));
    }
    total_size += 1 * this->function_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTarget::MergeFrom(const TeamTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_.MergeFrom(from.function_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTarget::CopyFrom(const TeamTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTarget::IsInitialized() const {

  return true;
}

void TeamTarget::Swap(TeamTarget* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    function_.Swap(&other->function_);
    std::swap(targettype_, other->targettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTarget_descriptor_;
  metadata.reflection = TeamTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kObjIdFieldNumber;
const int BuffInfo::kCasterIdFieldNumber;
const int BuffInfo::kOpTypeFieldNumber;
const int BuffInfo::kBufIdFieldNumber;
const int BuffInfo::kRemainTimeFieldNumber;
const int BuffInfo::kBuffLvFieldNumber;
const int BuffInfo::kSnFieldNumber;
const int BuffInfo::kLayerCountFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  casterid_ = -1;
  optype_ = -1;
  bufid_ = -1;
  remaintime_ = -1;
  bufflv_ = -1;
  sn_ = -1;
  layercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    casterid_ = -1;
    optype_ = -1;
    bufid_ = -1;
    remaintime_ = -1;
    bufflv_ = -1;
    sn_ = -1;
    layercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CasterId;
        break;
      }

      // optional int32 CasterId = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CasterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casterid_)));
          set_has_casterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BufId;
        break;
      }

      // optional int32 BufId = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BufId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufid_)));
          set_has_bufid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RemainTime;
        break;
      }

      // optional int32 RemainTime = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BuffLv;
        break;
      }

      // optional int32 BuffLv = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufflv_)));
          set_has_bufflv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Sn;
        break;
      }

      // optional int32 Sn = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LayerCount;
        break;
      }

      // optional int32 LayerCount = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LayerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layercount_)));
          set_has_layercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objid(), output);
  }

  // optional int32 CasterId = 6 [default = -1];
  if (has_casterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->casterid(), output);
  }

  // optional int32 OpType = 7 [default = -1];
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->optype(), output);
  }

  // optional int32 BufId = 8 [default = -1];
  if (has_bufid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bufid(), output);
  }

  // optional int32 RemainTime = 9 [default = -1];
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->remaintime(), output);
  }

  // optional int32 BuffLv = 10 [default = -1];
  if (has_bufflv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bufflv(), output);
  }

  // optional int32 Sn = 11 [default = -1];
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sn(), output);
  }

  // optional int32 LayerCount = 12 [default = 0];
  if (has_layercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->layercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 5 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objid(), target);
  }

  // optional int32 CasterId = 6 [default = -1];
  if (has_casterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->casterid(), target);
  }

  // optional int32 OpType = 7 [default = -1];
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->optype(), target);
  }

  // optional int32 BufId = 8 [default = -1];
  if (has_bufid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bufid(), target);
  }

  // optional int32 RemainTime = 9 [default = -1];
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->remaintime(), target);
  }

  // optional int32 BuffLv = 10 [default = -1];
  if (has_bufflv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bufflv(), target);
  }

  // optional int32 Sn = 11 [default = -1];
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sn(), target);
  }

  // optional int32 LayerCount = 12 [default = 0];
  if (has_layercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->layercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 5 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 CasterId = 6 [default = -1];
    if (has_casterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casterid());
    }

    // optional int32 OpType = 7 [default = -1];
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 BufId = 8 [default = -1];
    if (has_bufid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufid());
    }

    // optional int32 RemainTime = 9 [default = -1];
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional int32 BuffLv = 10 [default = -1];
    if (has_bufflv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufflv());
    }

    // optional int32 Sn = 11 [default = -1];
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sn());
    }

    // optional int32 LayerCount = 12 [default = 0];
    if (has_layercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_casterid()) {
      set_casterid(from.casterid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_bufid()) {
      set_bufid(from.bufid());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_bufflv()) {
      set_bufflv(from.bufflv());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_layercount()) {
      set_layercount(from.layercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {

  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(casterid_, other->casterid_);
    std::swap(optype_, other->optype_);
    std::swap(bufid_, other->bufid_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(bufflv_, other->bufflv_);
    std::swap(sn_, other->sn_);
    std::swap(layercount_, other->layercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchInfo::kRoleIdFieldNumber;
const int MatchInfo::kLevelFieldNumber;
const int MatchInfo::kConfigIdFieldNumber;
const int MatchInfo::kProfessionIdFieldNumber;
const int MatchInfo::kNameFieldNumber;
const int MatchInfo::kReadyFieldNumber;
const int MatchInfo::kCampFieldNumber;
const int MatchInfo::kIntegralFieldNumber;
const int MatchInfo::kSectionFieldNumber;
#endif  // !_MSC_VER

MatchInfo::MatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchInfo::InitAsDefaultInstance() {
}

MatchInfo::MatchInfo(const MatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  configid_ = -1;
  professionid_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ready_ = -1;
  camp_ = 0;
  integral_ = 0;
  section_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchInfo::~MatchInfo() {
  SharedDtor();
}

void MatchInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchInfo_descriptor_;
}

const MatchInfo& MatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MatchInfo* MatchInfo::default_instance_ = NULL;

MatchInfo* MatchInfo::New() const {
  return new MatchInfo;
}

void MatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    configid_ = -1;
    professionid_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ready_ = -1;
    camp_ = 0;
    integral_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    section_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ProfessionId;
        break;
      }

      // optional int32 ProfessionId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProfessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Ready;
        break;
      }

      // optional int32 Ready = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Camp;
        break;
      }

      // optional int32 Camp = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Integral;
        break;
      }

      // optional int32 Integral = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Section;
        break;
      }

      // optional int32 Section = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Section:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &section_)));
          set_has_section();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int32 Level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 ConfigId = 3 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // optional int32 ProfessionId = 4 [default = -1];
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->professionid(), output);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 Ready = 6 [default = -1];
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ready(), output);
  }

  // optional int32 Camp = 7 [default = 0];
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->camp(), output);
  }

  // optional int32 Integral = 12 [default = 0];
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->integral(), output);
  }

  // optional int32 Section = 13 [default = 0];
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->section(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 Level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 ConfigId = 3 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // optional int32 ProfessionId = 4 [default = -1];
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->professionid(), target);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 Ready = 6 [default = -1];
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ready(), target);
  }

  // optional int32 Camp = 7 [default = 0];
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->camp(), target);
  }

  // optional int32 Integral = 12 [default = 0];
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->integral(), target);
  }

  // optional int32 Section = 13 [default = 0];
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->section(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int32 Level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 ConfigId = 3 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 ProfessionId = 4 [default = -1];
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Ready = 6 [default = -1];
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 Camp = 7 [default = 0];
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 Integral = 12 [default = 0];
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Section = 13 [default = 0];
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->section());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchInfo::MergeFrom(const MatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_section()) {
      set_section(from.section());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfo::CopyFrom(const MatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfo::IsInitialized() const {

  return true;
}

void MatchInfo::Swap(MatchInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(level_, other->level_);
    std::swap(configid_, other->configid_);
    std::swap(professionid_, other->professionid_);
    std::swap(name_, other->name_);
    std::swap(ready_, other->ready_);
    std::swap(camp_, other->camp_);
    std::swap(integral_, other->integral_);
    std::swap(section_, other->section_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchInfo_descriptor_;
  metadata.reflection = MatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureEquipedID::kTreasureHairFieldNumber;
const int TreasureEquipedID::kTreasureHeadFieldNumber;
const int TreasureEquipedID::kTreasureBodyFieldNumber;
const int TreasureEquipedID::kTreasureWeaponFieldNumber;
const int TreasureEquipedID::kTreasureWingFieldNumber;
const int TreasureEquipedID::kTreasureRidingFieldNumber;
#endif  // !_MSC_VER

TreasureEquipedID::TreasureEquipedID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureEquipedID::InitAsDefaultInstance() {
}

TreasureEquipedID::TreasureEquipedID(const TreasureEquipedID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureEquipedID::SharedCtor() {
  _cached_size_ = 0;
  treasurehair_ = -1;
  treasurehead_ = -1;
  treasurebody_ = -1;
  treasureweapon_ = -1;
  treasurewing_ = -1;
  treasureriding_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureEquipedID::~TreasureEquipedID() {
  SharedDtor();
}

void TreasureEquipedID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureEquipedID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureEquipedID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureEquipedID_descriptor_;
}

const TreasureEquipedID& TreasureEquipedID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TreasureEquipedID* TreasureEquipedID::default_instance_ = NULL;

TreasureEquipedID* TreasureEquipedID::New() const {
  return new TreasureEquipedID;
}

void TreasureEquipedID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasurehair_ = -1;
    treasurehead_ = -1;
    treasurebody_ = -1;
    treasureweapon_ = -1;
    treasurewing_ = -1;
    treasureriding_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureEquipedID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TreasureHair = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehair_)));
          set_has_treasurehair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TreasureHead;
        break;
      }

      // optional int32 TreasureHead = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureHead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurehead_)));
          set_has_treasurehead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TreasureBody;
        break;
      }

      // optional int32 TreasureBody = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurebody_)));
          set_has_treasurebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TreasureWeapon;
        break;
      }

      // optional int32 TreasureWeapon = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureweapon_)));
          set_has_treasureweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TreasureWing;
        break;
      }

      // optional int32 TreasureWing = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurewing_)));
          set_has_treasurewing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TreasureRiding;
        break;
      }

      // optional int32 TreasureRiding = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureRiding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasureriding_)));
          set_has_treasureriding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureEquipedID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TreasureHair = 1 [default = -1];
  if (has_treasurehair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->treasurehair(), output);
  }

  // optional int32 TreasureHead = 2 [default = -1];
  if (has_treasurehead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treasurehead(), output);
  }

  // optional int32 TreasureBody = 3 [default = -1];
  if (has_treasurebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treasurebody(), output);
  }

  // optional int32 TreasureWeapon = 4 [default = -1];
  if (has_treasureweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->treasureweapon(), output);
  }

  // optional int32 TreasureWing = 5 [default = -1];
  if (has_treasurewing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->treasurewing(), output);
  }

  // optional int32 TreasureRiding = 6 [default = -1];
  if (has_treasureriding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->treasureriding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureEquipedID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TreasureHair = 1 [default = -1];
  if (has_treasurehair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->treasurehair(), target);
  }

  // optional int32 TreasureHead = 2 [default = -1];
  if (has_treasurehead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treasurehead(), target);
  }

  // optional int32 TreasureBody = 3 [default = -1];
  if (has_treasurebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treasurebody(), target);
  }

  // optional int32 TreasureWeapon = 4 [default = -1];
  if (has_treasureweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->treasureweapon(), target);
  }

  // optional int32 TreasureWing = 5 [default = -1];
  if (has_treasurewing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->treasurewing(), target);
  }

  // optional int32 TreasureRiding = 6 [default = -1];
  if (has_treasureriding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->treasureriding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureEquipedID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TreasureHair = 1 [default = -1];
    if (has_treasurehair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehair());
    }

    // optional int32 TreasureHead = 2 [default = -1];
    if (has_treasurehead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurehead());
    }

    // optional int32 TreasureBody = 3 [default = -1];
    if (has_treasurebody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurebody());
    }

    // optional int32 TreasureWeapon = 4 [default = -1];
    if (has_treasureweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureweapon());
    }

    // optional int32 TreasureWing = 5 [default = -1];
    if (has_treasurewing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurewing());
    }

    // optional int32 TreasureRiding = 6 [default = -1];
    if (has_treasureriding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasureriding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureEquipedID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureEquipedID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureEquipedID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureEquipedID::MergeFrom(const TreasureEquipedID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasurehair()) {
      set_treasurehair(from.treasurehair());
    }
    if (from.has_treasurehead()) {
      set_treasurehead(from.treasurehead());
    }
    if (from.has_treasurebody()) {
      set_treasurebody(from.treasurebody());
    }
    if (from.has_treasureweapon()) {
      set_treasureweapon(from.treasureweapon());
    }
    if (from.has_treasurewing()) {
      set_treasurewing(from.treasurewing());
    }
    if (from.has_treasureriding()) {
      set_treasureriding(from.treasureriding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureEquipedID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureEquipedID::CopyFrom(const TreasureEquipedID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureEquipedID::IsInitialized() const {

  return true;
}

void TreasureEquipedID::Swap(TreasureEquipedID* other) {
  if (other != this) {
    std::swap(treasurehair_, other->treasurehair_);
    std::swap(treasurehead_, other->treasurehead_);
    std::swap(treasurebody_, other->treasurebody_);
    std::swap(treasureweapon_, other->treasureweapon_);
    std::swap(treasurewing_, other->treasurewing_);
    std::swap(treasureriding_, other->treasureriding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureEquipedID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureEquipedID_descriptor_;
  metadata.reflection = TreasureEquipedID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kIdFieldNumber;
const int ServerInfo::kNameFieldNumber;
const int ServerInfo::kRegionFieldNumber;
const int ServerInfo::kStatusFieldNumber;
const int ServerInfo::kPromoFieldNumber;
const int ServerInfo::kIpFieldNumber;
const int ServerInfo::kPortFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = -1;
  status_ = -1;
  promo_ = -1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    region_ = -1;
    status_ = -1;
    promo_ = -1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Region;
        break;
      }

      // optional int32 Region = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // optional int32 Status = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Promo;
        break;
      }

      // optional int32 Promo = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Promo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promo_)));
          set_has_promo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Ip;
        break;
      }

      // optional string Ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Port;
        break;
      }

      // optional int32 Port = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 Region = 3 [default = -1];
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region(), output);
  }

  // optional int32 Status = 4 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 Promo = 5 [default = -1];
  if (has_promo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->promo(), output);
  }

  // optional string Ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  // optional int32 Port = 7 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 Region = 3 [default = -1];
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region(), target);
  }

  // optional int32 Status = 4 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 Promo = 5 [default = -1];
  if (has_promo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->promo(), target);
  }

  // optional string Ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional int32 Port = 7 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Region = 3 [default = -1];
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 Status = 4 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 Promo = 5 [default = -1];
    if (has_promo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promo());
    }

    // optional string Ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 Port = 7 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_promo()) {
      set_promo(from.promo());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(region_, other->region_);
    std::swap(status_, other->status_);
    std::swap(promo_, other->promo_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kGuidFieldNumber;
const int GuildInfo::kGuildNameFieldNumber;
const int GuildInfo::kGuildLeaderFieldNumber;
const int GuildInfo::kGuildLevelFieldNumber;
const int GuildInfo::kMemberCountFieldNumber;
const int GuildInfo::kOnlineCountFieldNumber;
const int GuildInfo::kGuildProsperFieldNumber;
const int GuildInfo::kGuildMoneyFieldNumber;
const int GuildInfo::kGuildResourceFieldNumber;
const int GuildInfo::kGuildCreedFieldNumber;
const int GuildInfo::kFlagFieldNumber;
const int GuildInfo::kNewsFieldNumber;
const int GuildInfo::kIsAutoJoinFieldNumber;
const int GuildInfo::kGuildOldNameFieldNumber;
const int GuildInfo::kGuildCreaterFieldNumber;
const int GuildInfo::kSelfOfficeFieldNumber;
const int GuildInfo::kTotalCountFieldNumber;
const int GuildInfo::kIsVacationFieldNumber;
const int GuildInfo::kHaveAppliedFieldNumber;
const int GuildInfo::kMaintainCostFieldNumber;
const int GuildInfo::kGuildWelfareFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInfo::InitAsDefaultInstance() {
  flag_ = const_cast< ::GuildFlag*>(&::GuildFlag::default_instance());
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlevel_ = -1;
  membercount_ = -1;
  onlinecount_ = -1;
  guildprosper_ = -1;
  guildmoney_ = -1;
  guildresource_ = -1;
  guildcreed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = NULL;
  isautojoin_ = false;
  guildoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildcreater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfoffice_ = -1;
  totalcount_ = -1;
  isvacation_ = false;
  haveapplied_ = false;
  maintaincost_ = -1;
  guildwelfare_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildleader_ != &::google::protobuf::internal::kEmptyString) {
    delete guildleader_;
  }
  if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreed_;
  }
  if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildoldname_;
  }
  if (guildcreater_ != &::google::protobuf::internal::kEmptyString) {
    delete guildcreater_;
  }
  if (this != default_instance_) {
    delete flag_;
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildleader()) {
      if (guildleader_ != &::google::protobuf::internal::kEmptyString) {
        guildleader_->clear();
      }
    }
    guildlevel_ = -1;
    membercount_ = -1;
    onlinecount_ = -1;
    guildprosper_ = -1;
    guildmoney_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    guildresource_ = -1;
    if (has_guildcreed()) {
      if (guildcreed_ != &::google::protobuf::internal::kEmptyString) {
        guildcreed_->clear();
      }
    }
    if (has_flag()) {
      if (flag_ != NULL) flag_->::GuildFlag::Clear();
    }
    isautojoin_ = false;
    if (has_guildoldname()) {
      if (guildoldname_ != &::google::protobuf::internal::kEmptyString) {
        guildoldname_->clear();
      }
    }
    if (has_guildcreater()) {
      if (guildcreater_ != &::google::protobuf::internal::kEmptyString) {
        guildcreater_->clear();
      }
    }
    selfoffice_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalcount_ = -1;
    isvacation_ = false;
    haveapplied_ = false;
    maintaincost_ = -1;
    guildwelfare_ = -1;
  }
  news_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GuildLeader;
        break;
      }

      // optional string GuildLeader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildLeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildleader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildleader().data(), this->guildleader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildLevel;
        break;
      }

      // optional int32 GuildLevel = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MemberCount;
        break;
      }

      // optional int32 MemberCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_OnlineCount;
        break;
      }

      // optional int32 OnlineCount = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));
          set_has_onlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GuildProsper;
        break;
      }

      // optional int32 GuildProsper = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildProsper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildprosper_)));
          set_has_guildprosper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_GuildMoney;
        break;
      }

      // optional int32 GuildMoney = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GuildResource;
        break;
      }

      // optional int32 GuildResource = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildResource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildresource_)));
          set_has_guildresource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GuildCreed;
        break;
      }

      // optional string GuildCreed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildCreed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildcreed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildcreed().data(), this->guildcreed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Flag;
        break;
      }

      // optional .GuildFlag Flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_News;
        break;
      }

      // repeated .GuildNews News = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_News:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_news()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_News;
        if (input->ExpectTag(104)) goto parse_IsAutoJoin;
        break;
      }

      // optional bool IsAutoJoin = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautojoin_)));
          set_has_isautojoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GuildOldName;
        break;
      }

      // optional string GuildOldName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildOldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildoldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildoldname().data(), this->guildoldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_GuildCreater;
        break;
      }

      // optional string GuildCreater = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildCreater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildcreater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildcreater().data(), this->guildcreater().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_SelfOffice;
        break;
      }

      // optional int32 SelfOffice = 17 [default = -1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SelfOffice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfoffice_)));
          set_has_selfoffice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TotalCount;
        break;
      }

      // optional int32 TotalCount = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_IsVacation;
        break;
      }

      // optional bool IsVacation = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVacation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvacation_)));
          set_has_isvacation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_HaveApplied;
        break;
      }

      // optional bool HaveApplied = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HaveApplied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haveapplied_)));
          set_has_haveapplied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_MaintainCost;
        break;
      }

      // optional int32 MaintainCost = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaintainCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintaincost_)));
          set_has_maintaincost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_GuildWelfare;
        break;
      }

      // optional int32 GuildWelfare = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildWelfare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwelfare_)));
          set_has_guildwelfare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional string GuildLeader = 3;
  if (has_guildleader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildleader().data(), this->guildleader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildleader(), output);
  }

  // optional int32 GuildLevel = 4 [default = -1];
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildlevel(), output);
  }

  // optional int32 MemberCount = 5 [default = -1];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->membercount(), output);
  }

  // optional int32 OnlineCount = 6 [default = -1];
  if (has_onlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->onlinecount(), output);
  }

  // optional int32 GuildProsper = 7 [default = -1];
  if (has_guildprosper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guildprosper(), output);
  }

  // optional int32 GuildMoney = 8 [default = -1];
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guildmoney(), output);
  }

  // optional int32 GuildResource = 9 [default = -1];
  if (has_guildresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guildresource(), output);
  }

  // optional string GuildCreed = 10;
  if (has_guildcreed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreed().data(), this->guildcreed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guildcreed(), output);
  }

  // optional .GuildFlag Flag = 11;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->flag(), output);
  }

  // repeated .GuildNews News = 12;
  for (int i = 0; i < this->news_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->news(i), output);
  }

  // optional bool IsAutoJoin = 13 [default = false];
  if (has_isautojoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isautojoin(), output);
  }

  // optional string GuildOldName = 15;
  if (has_guildoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildoldname().data(), this->guildoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->guildoldname(), output);
  }

  // optional string GuildCreater = 16;
  if (has_guildcreater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreater().data(), this->guildcreater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->guildcreater(), output);
  }

  // optional int32 SelfOffice = 17 [default = -1];
  if (has_selfoffice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->selfoffice(), output);
  }

  // optional int32 TotalCount = 18 [default = -1];
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->totalcount(), output);
  }

  // optional bool IsVacation = 19 [default = false];
  if (has_isvacation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isvacation(), output);
  }

  // optional bool HaveApplied = 20 [default = false];
  if (has_haveapplied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->haveapplied(), output);
  }

  // optional int32 MaintainCost = 21 [default = -1];
  if (has_maintaincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->maintaincost(), output);
  }

  // optional int32 GuildWelfare = 22 [default = -1];
  if (has_guildwelfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->guildwelfare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional string GuildLeader = 3;
  if (has_guildleader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildleader().data(), this->guildleader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildleader(), target);
  }

  // optional int32 GuildLevel = 4 [default = -1];
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildlevel(), target);
  }

  // optional int32 MemberCount = 5 [default = -1];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->membercount(), target);
  }

  // optional int32 OnlineCount = 6 [default = -1];
  if (has_onlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->onlinecount(), target);
  }

  // optional int32 GuildProsper = 7 [default = -1];
  if (has_guildprosper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guildprosper(), target);
  }

  // optional int32 GuildMoney = 8 [default = -1];
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guildmoney(), target);
  }

  // optional int32 GuildResource = 9 [default = -1];
  if (has_guildresource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guildresource(), target);
  }

  // optional string GuildCreed = 10;
  if (has_guildcreed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreed().data(), this->guildcreed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guildcreed(), target);
  }

  // optional .GuildFlag Flag = 11;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->flag(), target);
  }

  // repeated .GuildNews News = 12;
  for (int i = 0; i < this->news_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->news(i), target);
  }

  // optional bool IsAutoJoin = 13 [default = false];
  if (has_isautojoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isautojoin(), target);
  }

  // optional string GuildOldName = 15;
  if (has_guildoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildoldname().data(), this->guildoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->guildoldname(), target);
  }

  // optional string GuildCreater = 16;
  if (has_guildcreater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildcreater().data(), this->guildcreater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->guildcreater(), target);
  }

  // optional int32 SelfOffice = 17 [default = -1];
  if (has_selfoffice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->selfoffice(), target);
  }

  // optional int32 TotalCount = 18 [default = -1];
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->totalcount(), target);
  }

  // optional bool IsVacation = 19 [default = false];
  if (has_isvacation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isvacation(), target);
  }

  // optional bool HaveApplied = 20 [default = false];
  if (has_haveapplied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->haveapplied(), target);
  }

  // optional int32 MaintainCost = 21 [default = -1];
  if (has_maintaincost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->maintaincost(), target);
  }

  // optional int32 GuildWelfare = 22 [default = -1];
  if (has_guildwelfare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->guildwelfare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string GuildLeader = 3;
    if (has_guildleader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildleader());
    }

    // optional int32 GuildLevel = 4 [default = -1];
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

    // optional int32 MemberCount = 5 [default = -1];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membercount());
    }

    // optional int32 OnlineCount = 6 [default = -1];
    if (has_onlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecount());
    }

    // optional int32 GuildProsper = 7 [default = -1];
    if (has_guildprosper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildprosper());
    }

    // optional int32 GuildMoney = 8 [default = -1];
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 GuildResource = 9 [default = -1];
    if (has_guildresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildresource());
    }

    // optional string GuildCreed = 10;
    if (has_guildcreed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildcreed());
    }

    // optional .GuildFlag Flag = 11;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag());
    }

    // optional bool IsAutoJoin = 13 [default = false];
    if (has_isautojoin()) {
      total_size += 1 + 1;
    }

    // optional string GuildOldName = 15;
    if (has_guildoldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildoldname());
    }

    // optional string GuildCreater = 16;
    if (has_guildcreater()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildcreater());
    }

    // optional int32 SelfOffice = 17 [default = -1];
    if (has_selfoffice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfoffice());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 TotalCount = 18 [default = -1];
    if (has_totalcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional bool IsVacation = 19 [default = false];
    if (has_isvacation()) {
      total_size += 2 + 1;
    }

    // optional bool HaveApplied = 20 [default = false];
    if (has_haveapplied()) {
      total_size += 2 + 1;
    }

    // optional int32 MaintainCost = 21 [default = -1];
    if (has_maintaincost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintaincost());
    }

    // optional int32 GuildWelfare = 22 [default = -1];
    if (has_guildwelfare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwelfare());
    }

  }
  // repeated .GuildNews News = 12;
  total_size += 1 * this->news_size();
  for (int i = 0; i < this->news_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->news(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  news_.MergeFrom(from.news_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildleader()) {
      set_guildleader(from.guildleader());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
    if (from.has_onlinecount()) {
      set_onlinecount(from.onlinecount());
    }
    if (from.has_guildprosper()) {
      set_guildprosper(from.guildprosper());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildresource()) {
      set_guildresource(from.guildresource());
    }
    if (from.has_guildcreed()) {
      set_guildcreed(from.guildcreed());
    }
    if (from.has_flag()) {
      mutable_flag()->::GuildFlag::MergeFrom(from.flag());
    }
    if (from.has_isautojoin()) {
      set_isautojoin(from.isautojoin());
    }
    if (from.has_guildoldname()) {
      set_guildoldname(from.guildoldname());
    }
    if (from.has_guildcreater()) {
      set_guildcreater(from.guildcreater());
    }
    if (from.has_selfoffice()) {
      set_selfoffice(from.selfoffice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_isvacation()) {
      set_isvacation(from.isvacation());
    }
    if (from.has_haveapplied()) {
      set_haveapplied(from.haveapplied());
    }
    if (from.has_maintaincost()) {
      set_maintaincost(from.maintaincost());
    }
    if (from.has_guildwelfare()) {
      set_guildwelfare(from.guildwelfare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {

  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildleader_, other->guildleader_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(membercount_, other->membercount_);
    std::swap(onlinecount_, other->onlinecount_);
    std::swap(guildprosper_, other->guildprosper_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(guildresource_, other->guildresource_);
    std::swap(guildcreed_, other->guildcreed_);
    std::swap(flag_, other->flag_);
    news_.Swap(&other->news_);
    std::swap(isautojoin_, other->isautojoin_);
    std::swap(guildoldname_, other->guildoldname_);
    std::swap(guildcreater_, other->guildcreater_);
    std::swap(selfoffice_, other->selfoffice_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(isvacation_, other->isvacation_);
    std::swap(haveapplied_, other->haveapplied_);
    std::swap(maintaincost_, other->maintaincost_);
    std::swap(guildwelfare_, other->guildwelfare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFlag::kFlagEquipedFieldNumber;
const int GuildFlag::kFlagUnlockedFieldNumber;
#endif  // !_MSC_VER

GuildFlag::GuildFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildFlag::InitAsDefaultInstance() {
}

GuildFlag::GuildFlag(const GuildFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildFlag::SharedCtor() {
  _cached_size_ = 0;
  flagequiped_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFlag::~GuildFlag() {
  SharedDtor();
}

void GuildFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFlag_descriptor_;
}

const GuildFlag& GuildFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildFlag* GuildFlag::default_instance_ = NULL;

GuildFlag* GuildFlag::New() const {
  return new GuildFlag;
}

void GuildFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flagequiped_ = -1;
  }
  flagunlocked_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FlagEquiped = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagequiped_)));
          set_has_flagequiped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FlagUnlocked;
        break;
      }

      // repeated int32 FlagUnlocked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagUnlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_flagunlocked())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flagunlocked())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FlagUnlocked;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FlagEquiped = 1 [default = -1];
  if (has_flagequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flagequiped(), output);
  }

  // repeated int32 FlagUnlocked = 2;
  for (int i = 0; i < this->flagunlocked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->flagunlocked(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FlagEquiped = 1 [default = -1];
  if (has_flagequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flagequiped(), target);
  }

  // repeated int32 FlagUnlocked = 2;
  for (int i = 0; i < this->flagunlocked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->flagunlocked(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FlagEquiped = 1 [default = -1];
    if (has_flagequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagequiped());
    }

  }
  // repeated int32 FlagUnlocked = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->flagunlocked_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->flagunlocked(i));
    }
    total_size += 1 * this->flagunlocked_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFlag::MergeFrom(const GuildFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  flagunlocked_.MergeFrom(from.flagunlocked_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flagequiped()) {
      set_flagequiped(from.flagequiped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFlag::CopyFrom(const GuildFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFlag::IsInitialized() const {

  return true;
}

void GuildFlag::Swap(GuildFlag* other) {
  if (other != this) {
    std::swap(flagequiped_, other->flagequiped_);
    flagunlocked_.Swap(&other->flagunlocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFlag_descriptor_;
  metadata.reflection = GuildFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildNews::kOptionTypeFieldNumber;
const int GuildNews::kEventsParmFieldNumber;
#endif  // !_MSC_VER

GuildNews::GuildNews()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildNews::InitAsDefaultInstance() {
}

GuildNews::GuildNews(const GuildNews& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildNews::SharedCtor() {
  _cached_size_ = 0;
  optiontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildNews::~GuildNews() {
  SharedDtor();
}

void GuildNews::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildNews_descriptor_;
}

const GuildNews& GuildNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildNews* GuildNews::default_instance_ = NULL;

GuildNews* GuildNews::New() const {
  return new GuildNews;
}

void GuildNews::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optiontype_ = -1;
  }
  eventsparm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OptionType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optiontype_)));
          set_has_optiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EventsParm;
        break;
      }

      // repeated string EventsParm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventsParm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eventsparm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventsparm(this->eventsparm_size() - 1).data(),
            this->eventsparm(this->eventsparm_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EventsParm;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OptionType = 3 [default = -1];
  if (has_optiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optiontype(), output);
  }

  // repeated string EventsParm = 4;
  for (int i = 0; i < this->eventsparm_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->eventsparm(i).data(), this->eventsparm(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eventsparm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OptionType = 3 [default = -1];
  if (has_optiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optiontype(), target);
  }

  // repeated string EventsParm = 4;
  for (int i = 0; i < this->eventsparm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventsparm(i).data(), this->eventsparm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->eventsparm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildNews::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OptionType = 3 [default = -1];
    if (has_optiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optiontype());
    }

  }
  // repeated string EventsParm = 4;
  total_size += 1 * this->eventsparm_size();
  for (int i = 0; i < this->eventsparm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eventsparm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildNews::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildNews* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildNews*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildNews::MergeFrom(const GuildNews& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventsparm_.MergeFrom(from.eventsparm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optiontype()) {
      set_optiontype(from.optiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildNews::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildNews::CopyFrom(const GuildNews& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildNews::IsInitialized() const {

  return true;
}

void GuildNews::Swap(GuildNews* other) {
  if (other != this) {
    std::swap(optiontype_, other->optiontype_);
    eventsparm_.Swap(&other->eventsparm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildNews_descriptor_;
  metadata.reflection = GuildNews_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberTinyInfo::kGuidFieldNumber;
const int GuildMemberTinyInfo::kPlayerNameFieldNumber;
const int GuildMemberTinyInfo::kOccupitionFieldNumber;
const int GuildMemberTinyInfo::kLevelFieldNumber;
const int GuildMemberTinyInfo::kFightScoreFieldNumber;
const int GuildMemberTinyInfo::kTotalContributeFieldNumber;
#endif  // !_MSC_VER

GuildMemberTinyInfo::GuildMemberTinyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberTinyInfo::InitAsDefaultInstance() {
}

GuildMemberTinyInfo::GuildMemberTinyInfo(const GuildMemberTinyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberTinyInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  occupition_ = -1;
  level_ = -1;
  fightscore_ = -1;
  totalcontribute_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberTinyInfo::~GuildMemberTinyInfo() {
  SharedDtor();
}

void GuildMemberTinyInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GuildMemberTinyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberTinyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberTinyInfo_descriptor_;
}

const GuildMemberTinyInfo& GuildMemberTinyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildMemberTinyInfo* GuildMemberTinyInfo::default_instance_ = NULL;

GuildMemberTinyInfo* GuildMemberTinyInfo::New() const {
  return new GuildMemberTinyInfo;
}

void GuildMemberTinyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    occupition_ = -1;
    level_ = -1;
    fightscore_ = -1;
    totalcontribute_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberTinyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Occupition;
        break;
      }

      // optional int32 Occupition = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupition_)));
          set_has_occupition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional int32 Level = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FightScore;
        break;
      }

      // optional int32 FightScore = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightscore_)));
          set_has_fightscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TotalContribute;
        break;
      }

      // optional int32 TotalContribute = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcontribute_)));
          set_has_totalcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberTinyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional int32 Occupition = 3 [default = -1];
  if (has_occupition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->occupition(), output);
  }

  // optional int32 Level = 4 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 FightScore = 5 [default = -1];
  if (has_fightscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fightscore(), output);
  }

  // optional int32 TotalContribute = 6 [default = -1];
  if (has_totalcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalcontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberTinyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 Occupition = 3 [default = -1];
  if (has_occupition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->occupition(), target);
  }

  // optional int32 Level = 4 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 FightScore = 5 [default = -1];
  if (has_fightscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fightscore(), target);
  }

  // optional int32 TotalContribute = 6 [default = -1];
  if (has_totalcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalcontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberTinyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 Occupition = 3 [default = -1];
    if (has_occupition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupition());
    }

    // optional int32 Level = 4 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 FightScore = 5 [default = -1];
    if (has_fightscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightscore());
    }

    // optional int32 TotalContribute = 6 [default = -1];
    if (has_totalcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberTinyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberTinyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberTinyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberTinyInfo::MergeFrom(const GuildMemberTinyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_occupition()) {
      set_occupition(from.occupition());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightscore()) {
      set_fightscore(from.fightscore());
    }
    if (from.has_totalcontribute()) {
      set_totalcontribute(from.totalcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberTinyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberTinyInfo::CopyFrom(const GuildMemberTinyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberTinyInfo::IsInitialized() const {

  return true;
}

void GuildMemberTinyInfo::Swap(GuildMemberTinyInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(playername_, other->playername_);
    std::swap(occupition_, other->occupition_);
    std::swap(level_, other->level_);
    std::swap(fightscore_, other->fightscore_);
    std::swap(totalcontribute_, other->totalcontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberTinyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberTinyInfo_descriptor_;
  metadata.reflection = GuildMemberTinyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberInfo::kOfficeTypeFieldNumber;
const int GuildMemberInfo::kWeekContributeFieldNumber;
const int GuildMemberInfo::kHistoryContributeFieldNumber;
const int GuildMemberInfo::kTotalContributeFieldNumber;
const int GuildMemberInfo::kWeekQuestCountFieldNumber;
const int GuildMemberInfo::kWeekCampCountFieldNumber;
const int GuildMemberInfo::kInTimeFieldNumber;
const int GuildMemberInfo::kGuildTinyInfoFieldNumber;
const int GuildMemberInfo::kLeaveTimeFieldNumber;
const int GuildMemberInfo::kIsVacationFieldNumber;
const int GuildMemberInfo::kIsForbiddenChatFieldNumber;
#endif  // !_MSC_VER

GuildMemberInfo::GuildMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberInfo::InitAsDefaultInstance() {
  guildtinyinfo_ = const_cast< ::GuildMemberTinyInfo*>(&::GuildMemberTinyInfo::default_instance());
}

GuildMemberInfo::GuildMemberInfo(const GuildMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  officetype_ = -1;
  weekcontribute_ = -1;
  historycontribute_ = -1;
  totalcontribute_ = -1;
  weekquestcount_ = -1;
  weekcampcount_ = -1;
  intime_ = GOOGLE_LONGLONG(-1);
  guildtinyinfo_ = NULL;
  leavetime_ = GOOGLE_ULONGLONG(0);
  isvacation_ = false;
  isforbiddenchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberInfo::~GuildMemberInfo() {
  SharedDtor();
}

void GuildMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete guildtinyinfo_;
  }
}

void GuildMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberInfo_descriptor_;
}

const GuildMemberInfo& GuildMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildMemberInfo* GuildMemberInfo::default_instance_ = NULL;

GuildMemberInfo* GuildMemberInfo::New() const {
  return new GuildMemberInfo;
}

void GuildMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officetype_ = -1;
    weekcontribute_ = -1;
    historycontribute_ = -1;
    totalcontribute_ = -1;
    weekquestcount_ = -1;
    weekcampcount_ = -1;
    intime_ = GOOGLE_LONGLONG(-1);
    if (has_guildtinyinfo()) {
      if (guildtinyinfo_ != NULL) guildtinyinfo_->::GuildMemberTinyInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leavetime_ = GOOGLE_ULONGLONG(0);
    isvacation_ = false;
    isforbiddenchat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OfficeType = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officetype_)));
          set_has_officetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WeekContribute;
        break;
      }

      // optional int32 WeekContribute = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeekContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekcontribute_)));
          set_has_weekcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HistoryContribute;
        break;
      }

      // optional int32 HistoryContribute = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HistoryContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historycontribute_)));
          set_has_historycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TotalContribute;
        break;
      }

      // optional int32 TotalContribute = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcontribute_)));
          set_has_totalcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WeekQuestCount;
        break;
      }

      // optional int32 WeekQuestCount = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeekQuestCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekquestcount_)));
          set_has_weekquestcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WeekCampCount;
        break;
      }

      // optional int32 WeekCampCount = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeekCampCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekcampcount_)));
          set_has_weekcampcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_InTime;
        break;
      }

      // optional int64 InTime = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intime_)));
          set_has_intime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GuildTinyInfo;
        break;
      }

      // optional .GuildMemberTinyInfo GuildTinyInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildTinyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildtinyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_LeaveTime;
        break;
      }

      // optional uint64 LeaveTime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeaveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leavetime_)));
          set_has_leavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsVacation;
        break;
      }

      // optional bool IsVacation = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVacation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvacation_)));
          set_has_isvacation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_IsForbiddenChat;
        break;
      }

      // optional bool IsForbiddenChat = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsForbiddenChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforbiddenchat_)));
          set_has_isforbiddenchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OfficeType = 3 [default = -1];
  if (has_officetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officetype(), output);
  }

  // optional int32 WeekContribute = 4 [default = -1];
  if (has_weekcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weekcontribute(), output);
  }

  // optional int32 HistoryContribute = 5 [default = -1];
  if (has_historycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->historycontribute(), output);
  }

  // optional int32 TotalContribute = 6 [default = -1];
  if (has_totalcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalcontribute(), output);
  }

  // optional int32 WeekQuestCount = 7 [default = -1];
  if (has_weekquestcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weekquestcount(), output);
  }

  // optional int32 WeekCampCount = 8 [default = -1];
  if (has_weekcampcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->weekcampcount(), output);
  }

  // optional int64 InTime = 9 [default = -1];
  if (has_intime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->intime(), output);
  }

  // optional .GuildMemberTinyInfo GuildTinyInfo = 11;
  if (has_guildtinyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->guildtinyinfo(), output);
  }

  // optional uint64 LeaveTime = 12 [default = 0];
  if (has_leavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->leavetime(), output);
  }

  // optional bool IsVacation = 13 [default = false];
  if (has_isvacation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isvacation(), output);
  }

  // optional bool IsForbiddenChat = 14 [default = false];
  if (has_isforbiddenchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isforbiddenchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OfficeType = 3 [default = -1];
  if (has_officetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officetype(), target);
  }

  // optional int32 WeekContribute = 4 [default = -1];
  if (has_weekcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weekcontribute(), target);
  }

  // optional int32 HistoryContribute = 5 [default = -1];
  if (has_historycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->historycontribute(), target);
  }

  // optional int32 TotalContribute = 6 [default = -1];
  if (has_totalcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalcontribute(), target);
  }

  // optional int32 WeekQuestCount = 7 [default = -1];
  if (has_weekquestcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->weekquestcount(), target);
  }

  // optional int32 WeekCampCount = 8 [default = -1];
  if (has_weekcampcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->weekcampcount(), target);
  }

  // optional int64 InTime = 9 [default = -1];
  if (has_intime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->intime(), target);
  }

  // optional .GuildMemberTinyInfo GuildTinyInfo = 11;
  if (has_guildtinyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->guildtinyinfo(), target);
  }

  // optional uint64 LeaveTime = 12 [default = 0];
  if (has_leavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->leavetime(), target);
  }

  // optional bool IsVacation = 13 [default = false];
  if (has_isvacation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isvacation(), target);
  }

  // optional bool IsForbiddenChat = 14 [default = false];
  if (has_isforbiddenchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isforbiddenchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OfficeType = 3 [default = -1];
    if (has_officetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officetype());
    }

    // optional int32 WeekContribute = 4 [default = -1];
    if (has_weekcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekcontribute());
    }

    // optional int32 HistoryContribute = 5 [default = -1];
    if (has_historycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historycontribute());
    }

    // optional int32 TotalContribute = 6 [default = -1];
    if (has_totalcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcontribute());
    }

    // optional int32 WeekQuestCount = 7 [default = -1];
    if (has_weekquestcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekquestcount());
    }

    // optional int32 WeekCampCount = 8 [default = -1];
    if (has_weekcampcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekcampcount());
    }

    // optional int64 InTime = 9 [default = -1];
    if (has_intime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intime());
    }

    // optional .GuildMemberTinyInfo GuildTinyInfo = 11;
    if (has_guildtinyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildtinyinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 LeaveTime = 12 [default = 0];
    if (has_leavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leavetime());
    }

    // optional bool IsVacation = 13 [default = false];
    if (has_isvacation()) {
      total_size += 1 + 1;
    }

    // optional bool IsForbiddenChat = 14 [default = false];
    if (has_isforbiddenchat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberInfo::MergeFrom(const GuildMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officetype()) {
      set_officetype(from.officetype());
    }
    if (from.has_weekcontribute()) {
      set_weekcontribute(from.weekcontribute());
    }
    if (from.has_historycontribute()) {
      set_historycontribute(from.historycontribute());
    }
    if (from.has_totalcontribute()) {
      set_totalcontribute(from.totalcontribute());
    }
    if (from.has_weekquestcount()) {
      set_weekquestcount(from.weekquestcount());
    }
    if (from.has_weekcampcount()) {
      set_weekcampcount(from.weekcampcount());
    }
    if (from.has_intime()) {
      set_intime(from.intime());
    }
    if (from.has_guildtinyinfo()) {
      mutable_guildtinyinfo()->::GuildMemberTinyInfo::MergeFrom(from.guildtinyinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leavetime()) {
      set_leavetime(from.leavetime());
    }
    if (from.has_isvacation()) {
      set_isvacation(from.isvacation());
    }
    if (from.has_isforbiddenchat()) {
      set_isforbiddenchat(from.isforbiddenchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberInfo::CopyFrom(const GuildMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberInfo::IsInitialized() const {

  return true;
}

void GuildMemberInfo::Swap(GuildMemberInfo* other) {
  if (other != this) {
    std::swap(officetype_, other->officetype_);
    std::swap(weekcontribute_, other->weekcontribute_);
    std::swap(historycontribute_, other->historycontribute_);
    std::swap(totalcontribute_, other->totalcontribute_);
    std::swap(weekquestcount_, other->weekquestcount_);
    std::swap(weekcampcount_, other->weekcampcount_);
    std::swap(intime_, other->intime_);
    std::swap(guildtinyinfo_, other->guildtinyinfo_);
    std::swap(leavetime_, other->leavetime_);
    std::swap(isvacation_, other->isvacation_);
    std::swap(isforbiddenchat_, other->isforbiddenchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberInfo_descriptor_;
  metadata.reflection = GuildMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildJurisdiction::kConfigIDFieldNumber;
const int GuildJurisdiction::kCurStateFieldNumber;
const int GuildJurisdiction::kIsCanSetFieldNumber;
#endif  // !_MSC_VER

GuildJurisdiction::GuildJurisdiction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildJurisdiction::InitAsDefaultInstance() {
}

GuildJurisdiction::GuildJurisdiction(const GuildJurisdiction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildJurisdiction::SharedCtor() {
  _cached_size_ = 0;
  configid_ = -1;
  curstate_ = false;
  iscanset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildJurisdiction::~GuildJurisdiction() {
  SharedDtor();
}

void GuildJurisdiction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildJurisdiction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildJurisdiction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildJurisdiction_descriptor_;
}

const GuildJurisdiction& GuildJurisdiction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildJurisdiction* GuildJurisdiction::default_instance_ = NULL;

GuildJurisdiction* GuildJurisdiction::New() const {
  return new GuildJurisdiction;
}

void GuildJurisdiction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = -1;
    curstate_ = false;
    iscanset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildJurisdiction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfigID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurState;
        break;
      }

      // optional bool CurState = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsCanSet;
        break;
      }

      // optional bool IsCanSet = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscanset_)));
          set_has_iscanset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildJurisdiction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfigID = 1 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional bool CurState = 2 [default = false];
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->curstate(), output);
  }

  // optional bool IsCanSet = 3 [default = false];
  if (has_iscanset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscanset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildJurisdiction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfigID = 1 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional bool CurState = 2 [default = false];
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->curstate(), target);
  }

  // optional bool IsCanSet = 3 [default = false];
  if (has_iscanset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscanset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildJurisdiction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfigID = 1 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional bool CurState = 2 [default = false];
    if (has_curstate()) {
      total_size += 1 + 1;
    }

    // optional bool IsCanSet = 3 [default = false];
    if (has_iscanset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildJurisdiction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildJurisdiction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildJurisdiction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildJurisdiction::MergeFrom(const GuildJurisdiction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_iscanset()) {
      set_iscanset(from.iscanset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildJurisdiction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildJurisdiction::CopyFrom(const GuildJurisdiction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildJurisdiction::IsInitialized() const {

  return true;
}

void GuildJurisdiction::Swap(GuildJurisdiction* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(curstate_, other->curstate_);
    std::swap(iscanset_, other->iscanset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildJurisdiction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildJurisdiction_descriptor_;
  metadata.reflection = GuildJurisdiction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildOfficeJurisdiction::kOfficeTypeFieldNumber;
const int GuildOfficeJurisdiction::kJurisdictionListFieldNumber;
#endif  // !_MSC_VER

GuildOfficeJurisdiction::GuildOfficeJurisdiction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildOfficeJurisdiction::InitAsDefaultInstance() {
}

GuildOfficeJurisdiction::GuildOfficeJurisdiction(const GuildOfficeJurisdiction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildOfficeJurisdiction::SharedCtor() {
  _cached_size_ = 0;
  officetype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildOfficeJurisdiction::~GuildOfficeJurisdiction() {
  SharedDtor();
}

void GuildOfficeJurisdiction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildOfficeJurisdiction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildOfficeJurisdiction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildOfficeJurisdiction_descriptor_;
}

const GuildOfficeJurisdiction& GuildOfficeJurisdiction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildOfficeJurisdiction* GuildOfficeJurisdiction::default_instance_ = NULL;

GuildOfficeJurisdiction* GuildOfficeJurisdiction::New() const {
  return new GuildOfficeJurisdiction;
}

void GuildOfficeJurisdiction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    officetype_ = -1;
  }
  jurisdictionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildOfficeJurisdiction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OfficeType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officetype_)));
          set_has_officetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JurisdictionList;
        break;
      }

      // repeated .GuildJurisdiction JurisdictionList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JurisdictionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jurisdictionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JurisdictionList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildOfficeJurisdiction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OfficeType = 1 [default = -1];
  if (has_officetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officetype(), output);
  }

  // repeated .GuildJurisdiction JurisdictionList = 2;
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jurisdictionlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildOfficeJurisdiction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OfficeType = 1 [default = -1];
  if (has_officetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->officetype(), target);
  }

  // repeated .GuildJurisdiction JurisdictionList = 2;
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jurisdictionlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildOfficeJurisdiction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OfficeType = 1 [default = -1];
    if (has_officetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officetype());
    }

  }
  // repeated .GuildJurisdiction JurisdictionList = 2;
  total_size += 1 * this->jurisdictionlist_size();
  for (int i = 0; i < this->jurisdictionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jurisdictionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildOfficeJurisdiction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildOfficeJurisdiction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildOfficeJurisdiction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildOfficeJurisdiction::MergeFrom(const GuildOfficeJurisdiction& from) {
  GOOGLE_CHECK_NE(&from, this);
  jurisdictionlist_.MergeFrom(from.jurisdictionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officetype()) {
      set_officetype(from.officetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildOfficeJurisdiction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildOfficeJurisdiction::CopyFrom(const GuildOfficeJurisdiction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildOfficeJurisdiction::IsInitialized() const {

  return true;
}

void GuildOfficeJurisdiction::Swap(GuildOfficeJurisdiction* other) {
  if (other != this) {
    std::swap(officetype_, other->officetype_);
    jurisdictionlist_.Swap(&other->jurisdictionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildOfficeJurisdiction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildOfficeJurisdiction_descriptor_;
  metadata.reflection = GuildOfficeJurisdiction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildVacationInfo::kGuidFieldNumber;
const int GuildVacationInfo::kPlayerNameFieldNumber;
const int GuildVacationInfo::kLevelFieldNumber;
const int GuildVacationInfo::kReasonFieldNumber;
const int GuildVacationInfo::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

GuildVacationInfo::GuildVacationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildVacationInfo::InitAsDefaultInstance() {
}

GuildVacationInfo::GuildVacationInfo(const GuildVacationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildVacationInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = -1;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildVacationInfo::~GuildVacationInfo() {
  SharedDtor();
}

void GuildVacationInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GuildVacationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildVacationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildVacationInfo_descriptor_;
}

const GuildVacationInfo& GuildVacationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildVacationInfo* GuildVacationInfo::default_instance_ = NULL;

GuildVacationInfo* GuildVacationInfo::New() const {
  return new GuildVacationInfo;
}

void GuildVacationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    level_ = -1;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    lefttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildVacationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional int32 Level = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Reason;
        break;
      }

      // optional string Reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LeftTime;
        break;
      }

      // optional uint64 LeftTime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildVacationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string PlayerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // optional int32 Level = 4 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional string Reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  // optional uint64 LeftTime = 6 [default = 0];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildVacationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string PlayerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional int32 Level = 4 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional string Reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional uint64 LeftTime = 6 [default = 0];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildVacationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 Level = 4 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string Reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional uint64 LeftTime = 6 [default = 0];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildVacationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildVacationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildVacationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildVacationInfo::MergeFrom(const GuildVacationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildVacationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildVacationInfo::CopyFrom(const GuildVacationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildVacationInfo::IsInitialized() const {

  return true;
}

void GuildVacationInfo::Swap(GuildVacationInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(playername_, other->playername_);
    std::swap(level_, other->level_);
    std::swap(reason_, other->reason_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildVacationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildVacationInfo_descriptor_;
  metadata.reflection = GuildVacationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBuildingInfo::kBuildingTypeFieldNumber;
const int GuildBuildingInfo::kBuildingLvFieldNumber;
const int GuildBuildingInfo::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

GuildBuildingInfo::GuildBuildingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBuildingInfo::InitAsDefaultInstance() {
}

GuildBuildingInfo::GuildBuildingInfo(const GuildBuildingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBuildingInfo::SharedCtor() {
  _cached_size_ = 0;
  buildingtype_ = -1;
  buildinglv_ = -1;
  lefttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuildingInfo::~GuildBuildingInfo() {
  SharedDtor();
}

void GuildBuildingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBuildingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuildingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildingInfo_descriptor_;
}

const GuildBuildingInfo& GuildBuildingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildBuildingInfo* GuildBuildingInfo::default_instance_ = NULL;

GuildBuildingInfo* GuildBuildingInfo::New() const {
  return new GuildBuildingInfo;
}

void GuildBuildingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildingtype_ = -1;
    buildinglv_ = -1;
    lefttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBuildingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BuildingType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BuildingLv;
        break;
      }

      // optional int32 BuildingLv = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuildingLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildinglv_)));
          set_has_buildinglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LeftTime;
        break;
      }

      // optional uint64 LeftTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBuildingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildingtype(), output);
  }

  // optional int32 BuildingLv = 2 [default = -1];
  if (has_buildinglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildinglv(), output);
  }

  // optional uint64 LeftTime = 3 [default = 0];
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBuildingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BuildingType = 1 [default = -1];
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildingtype(), target);
  }

  // optional int32 BuildingLv = 2 [default = -1];
  if (has_buildinglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildinglv(), target);
  }

  // optional uint64 LeftTime = 3 [default = 0];
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBuildingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BuildingType = 1 [default = -1];
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

    // optional int32 BuildingLv = 2 [default = -1];
    if (has_buildinglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildinglv());
    }

    // optional uint64 LeftTime = 3 [default = 0];
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuildingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuildingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuildingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBuildingInfo::MergeFrom(const GuildBuildingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
    if (from.has_buildinglv()) {
      set_buildinglv(from.buildinglv());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBuildingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuildingInfo::CopyFrom(const GuildBuildingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuildingInfo::IsInitialized() const {

  return true;
}

void GuildBuildingInfo::Swap(GuildBuildingInfo* other) {
  if (other != this) {
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(buildinglv_, other->buildinglv_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBuildingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuildingInfo_descriptor_;
  metadata.reflection = GuildBuildingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBuildingContributionInfo::kGuidFieldNumber;
const int GuildBuildingContributionInfo::kPlayerNameFieldNumber;
const int GuildBuildingContributionInfo::kSpeedTimeFieldNumber;
const int GuildBuildingContributionInfo::kDateFieldNumber;
#endif  // !_MSC_VER

GuildBuildingContributionInfo::GuildBuildingContributionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBuildingContributionInfo::InitAsDefaultInstance() {
}

GuildBuildingContributionInfo::GuildBuildingContributionInfo(const GuildBuildingContributionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBuildingContributionInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speedtime_ = -1;
  date_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuildingContributionInfo::~GuildBuildingContributionInfo() {
  SharedDtor();
}

void GuildBuildingContributionInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GuildBuildingContributionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuildingContributionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildingContributionInfo_descriptor_;
}

const GuildBuildingContributionInfo& GuildBuildingContributionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildBuildingContributionInfo* GuildBuildingContributionInfo::default_instance_ = NULL;

GuildBuildingContributionInfo* GuildBuildingContributionInfo::New() const {
  return new GuildBuildingContributionInfo;
}

void GuildBuildingContributionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    speedtime_ = -1;
    date_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBuildingContributionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SpeedTime;
        break;
      }

      // optional int32 SpeedTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpeedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speedtime_)));
          set_has_speedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Date;
        break;
      }

      // optional uint64 Date = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBuildingContributionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional string PlayerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // optional int32 SpeedTime = 4 [default = -1];
  if (has_speedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speedtime(), output);
  }

  // optional uint64 Date = 5 [default = 0];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBuildingContributionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional string PlayerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional int32 SpeedTime = 4 [default = -1];
  if (has_speedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speedtime(), target);
  }

  // optional uint64 Date = 5 [default = 0];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBuildingContributionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 2 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 SpeedTime = 4 [default = -1];
    if (has_speedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speedtime());
    }

    // optional uint64 Date = 5 [default = 0];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuildingContributionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuildingContributionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuildingContributionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBuildingContributionInfo::MergeFrom(const GuildBuildingContributionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_speedtime()) {
      set_speedtime(from.speedtime());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBuildingContributionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBuildingContributionInfo::CopyFrom(const GuildBuildingContributionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBuildingContributionInfo::IsInitialized() const {

  return true;
}

void GuildBuildingContributionInfo::Swap(GuildBuildingContributionInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(playername_, other->playername_);
    std::swap(speedtime_, other->speedtime_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBuildingContributionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuildingContributionInfo_descriptor_;
  metadata.reflection = GuildBuildingContributionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildEvent::kGuidFieldNumber;
const int GuildEvent::kDateFieldNumber;
const int GuildEvent::kOptionTypeFieldNumber;
const int GuildEvent::kEventsParmFieldNumber;
#endif  // !_MSC_VER

GuildEvent::GuildEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildEvent::InitAsDefaultInstance() {
}

GuildEvent::GuildEvent(const GuildEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildEvent::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  date_ = GOOGLE_ULONGLONG(0);
  optiontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEvent::~GuildEvent() {
  SharedDtor();
}

void GuildEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEvent_descriptor_;
}

const GuildEvent& GuildEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

GuildEvent* GuildEvent::default_instance_ = NULL;

GuildEvent* GuildEvent::New() const {
  return new GuildEvent;
}

void GuildEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    date_ = GOOGLE_ULONGLONG(0);
    optiontype_ = -1;
  }
  eventsparm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Date;
        break;
      }

      // optional uint64 Date = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OptionType;
        break;
      }

      // optional int32 OptionType = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OptionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optiontype_)));
          set_has_optiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_EventsParm;
        break;
      }

      // repeated string EventsParm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventsParm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eventsparm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventsparm(this->eventsparm_size() - 1).data(),
            this->eventsparm(this->eventsparm_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_EventsParm;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint64 Date = 4 [default = 0];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->date(), output);
  }

  // optional int32 OptionType = 5 [default = -1];
  if (has_optiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->optiontype(), output);
  }

  // repeated string EventsParm = 6;
  for (int i = 0; i < this->eventsparm_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->eventsparm(i).data(), this->eventsparm(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->eventsparm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 2 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint64 Date = 4 [default = 0];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->date(), target);
  }

  // optional int32 OptionType = 5 [default = -1];
  if (has_optiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->optiontype(), target);
  }

  // repeated string EventsParm = 6;
  for (int i = 0; i < this->eventsparm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventsparm(i).data(), this->eventsparm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->eventsparm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 2 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 Date = 4 [default = 0];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date());
    }

    // optional int32 OptionType = 5 [default = -1];
    if (has_optiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optiontype());
    }

  }
  // repeated string EventsParm = 6;
  total_size += 1 * this->eventsparm_size();
  for (int i = 0; i < this->eventsparm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eventsparm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildEvent::MergeFrom(const GuildEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventsparm_.MergeFrom(from.eventsparm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_optiontype()) {
      set_optiontype(from.optiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEvent::CopyFrom(const GuildEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEvent::IsInitialized() const {

  return true;
}

void GuildEvent::Swap(GuildEvent* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(date_, other->date_);
    std::swap(optiontype_, other->optiontype_);
    eventsparm_.Swap(&other->eventsparm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEvent_descriptor_;
  metadata.reflection = GuildEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMatchRoom::kCampsFieldNumber;
const int PBMatchRoom::kMatchTargetFieldNumber;
const int PBMatchRoom::kRoomIdFieldNumber;
const int PBMatchRoom::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

PBMatchRoom::PBMatchRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMatchRoom::InitAsDefaultInstance() {
  matchtarget_ = const_cast< ::MatchTargetInfo*>(&::MatchTargetInfo::default_instance());
}

PBMatchRoom::PBMatchRoom(const PBMatchRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMatchRoom::SharedCtor() {
  _cached_size_ = 0;
  matchtarget_ = NULL;
  roomid_ = GOOGLE_ULONGLONG(0);
  matchtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMatchRoom::~PBMatchRoom() {
  SharedDtor();
}

void PBMatchRoom::SharedDtor() {
  if (this != default_instance_) {
    delete matchtarget_;
  }
}

void PBMatchRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMatchRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMatchRoom_descriptor_;
}

const PBMatchRoom& PBMatchRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PBMatchRoom* PBMatchRoom::default_instance_ = NULL;

PBMatchRoom* PBMatchRoom::New() const {
  return new PBMatchRoom;
}

void PBMatchRoom::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_matchtarget()) {
      if (matchtarget_ != NULL) matchtarget_->::MatchTargetInfo::Clear();
    }
    roomid_ = GOOGLE_ULONGLONG(0);
    matchtype_ = -1;
  }
  camps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMatchRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchRoomCamps Camps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Camps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Camps;
        if (input->ExpectTag(50)) goto parse_MatchTarget;
        break;
      }

      // optional .MatchTargetInfo MatchTarget = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MatchTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RoomId;
        break;
      }

      // optional uint64 RoomId = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MatchType;
        break;
      }

      // optional int32 MatchType = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMatchRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MatchRoomCamps Camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camps(i), output);
  }

  // optional .MatchTargetInfo MatchTarget = 6;
  if (has_matchtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->matchtarget(), output);
  }

  // optional uint64 RoomId = 7 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->roomid(), output);
  }

  // optional int32 MatchType = 8 [default = -1];
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->matchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMatchRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MatchRoomCamps Camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camps(i), target);
  }

  // optional .MatchTargetInfo MatchTarget = 6;
  if (has_matchtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->matchtarget(), target);
  }

  // optional uint64 RoomId = 7 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->roomid(), target);
  }

  // optional int32 MatchType = 8 [default = -1];
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->matchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMatchRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .MatchTargetInfo MatchTarget = 6;
    if (has_matchtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchtarget());
    }

    // optional uint64 RoomId = 7 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional int32 MatchType = 8 [default = -1];
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

  }
  // repeated .MatchRoomCamps Camps = 1;
  total_size += 1 * this->camps_size();
  for (int i = 0; i < this->camps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMatchRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMatchRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMatchRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMatchRoom::MergeFrom(const PBMatchRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  camps_.MergeFrom(from.camps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_matchtarget()) {
      mutable_matchtarget()->::MatchTargetInfo::MergeFrom(from.matchtarget());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMatchRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatchRoom::CopyFrom(const PBMatchRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMatchRoom::IsInitialized() const {

  return true;
}

void PBMatchRoom::Swap(PBMatchRoom* other) {
  if (other != this) {
    camps_.Swap(&other->camps_);
    std::swap(matchtarget_, other->matchtarget_);
    std::swap(roomid_, other->roomid_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMatchRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMatchRoom_descriptor_;
  metadata.reflection = PBMatchRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRoomCamps::kPlayersFieldNumber;
#endif  // !_MSC_VER

MatchRoomCamps::MatchRoomCamps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRoomCamps::InitAsDefaultInstance() {
}

MatchRoomCamps::MatchRoomCamps(const MatchRoomCamps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRoomCamps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRoomCamps::~MatchRoomCamps() {
  SharedDtor();
}

void MatchRoomCamps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRoomCamps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRoomCamps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRoomCamps_descriptor_;
}

const MatchRoomCamps& MatchRoomCamps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MatchRoomCamps* MatchRoomCamps::default_instance_ = NULL;

MatchRoomCamps* MatchRoomCamps::New() const {
  return new MatchRoomCamps;
}

void MatchRoomCamps::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRoomCamps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchInfo Players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRoomCamps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MatchInfo Players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRoomCamps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MatchInfo Players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRoomCamps::ByteSize() const {
  int total_size = 0;

  // repeated .MatchInfo Players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRoomCamps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRoomCamps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRoomCamps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRoomCamps::MergeFrom(const MatchRoomCamps& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRoomCamps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRoomCamps::CopyFrom(const MatchRoomCamps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRoomCamps::IsInitialized() const {

  return true;
}

void MatchRoomCamps::Swap(MatchRoomCamps* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRoomCamps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRoomCamps_descriptor_;
  metadata.reflection = MatchRoomCamps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMatchData::kMatchTypeFieldNumber;
const int PlayerMatchData::kEloFieldNumber;
const int PlayerMatchData::kAutoFieldNumber;
#endif  // !_MSC_VER

PlayerMatchData::PlayerMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMatchData::InitAsDefaultInstance() {
}

PlayerMatchData::PlayerMatchData(const PlayerMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMatchData::SharedCtor() {
  _cached_size_ = 0;
  matchtype_ = 0;
  elo_ = 0;
  auto__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMatchData::~PlayerMatchData() {
  SharedDtor();
}

void PlayerMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMatchData_descriptor_;
}

const PlayerMatchData& PlayerMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PlayerMatchData* PlayerMatchData::default_instance_ = NULL;

PlayerMatchData* PlayerMatchData::New() const {
  return new PlayerMatchData;
}

void PlayerMatchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchtype_ = 0;
    elo_ = 0;
    auto__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MatchType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Elo;
        break;
      }

      // optional int32 Elo = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Elo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elo_)));
          set_has_elo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Auto;
        break;
      }

      // optional int32 Auto = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MatchType = 1 [default = 0];
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchtype(), output);
  }

  // optional int32 Elo = 2 [default = 0];
  if (has_elo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elo(), output);
  }

  // optional int32 Auto = 3 [default = 0];
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auto_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MatchType = 1 [default = 0];
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchtype(), target);
  }

  // optional int32 Elo = 2 [default = 0];
  if (has_elo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elo(), target);
  }

  // optional int32 Auto = 3 [default = 0];
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auto_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MatchType = 1 [default = 0];
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtype());
    }

    // optional int32 Elo = 2 [default = 0];
    if (has_elo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elo());
    }

    // optional int32 Auto = 3 [default = 0];
    if (has_auto_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMatchData::MergeFrom(const PlayerMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_elo()) {
      set_elo(from.elo());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMatchData::CopyFrom(const PlayerMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMatchData::IsInitialized() const {

  return true;
}

void PlayerMatchData::Swap(PlayerMatchData* other) {
  if (other != this) {
    std::swap(matchtype_, other->matchtype_);
    std::swap(elo_, other->elo_);
    std::swap(auto__, other->auto__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMatchData_descriptor_;
  metadata.reflection = PlayerMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxQuestCompleteId::kQuestTypeFieldNumber;
const int MaxQuestCompleteId::kMaxConfigIdFieldNumber;
#endif  // !_MSC_VER

MaxQuestCompleteId::MaxQuestCompleteId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxQuestCompleteId::InitAsDefaultInstance() {
}

MaxQuestCompleteId::MaxQuestCompleteId(const MaxQuestCompleteId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxQuestCompleteId::SharedCtor() {
  _cached_size_ = 0;
  questtype_ = -1;
  maxconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxQuestCompleteId::~MaxQuestCompleteId() {
  SharedDtor();
}

void MaxQuestCompleteId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxQuestCompleteId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxQuestCompleteId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxQuestCompleteId_descriptor_;
}

const MaxQuestCompleteId& MaxQuestCompleteId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MaxQuestCompleteId* MaxQuestCompleteId::default_instance_ = NULL;

MaxQuestCompleteId* MaxQuestCompleteId::New() const {
  return new MaxQuestCompleteId;
}

void MaxQuestCompleteId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questtype_ = -1;
    maxconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxQuestCompleteId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuestType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questtype_)));
          set_has_questtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxConfigId;
        break;
      }

      // optional int32 MaxConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconfigid_)));
          set_has_maxconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaxQuestCompleteId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 QuestType = 1 [default = -1];
  if (has_questtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questtype(), output);
  }

  // optional int32 MaxConfigId = 2 [default = -1];
  if (has_maxconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxQuestCompleteId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 QuestType = 1 [default = -1];
  if (has_questtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questtype(), target);
  }

  // optional int32 MaxConfigId = 2 [default = -1];
  if (has_maxconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxQuestCompleteId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QuestType = 1 [default = -1];
    if (has_questtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questtype());
    }

    // optional int32 MaxConfigId = 2 [default = -1];
    if (has_maxconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxQuestCompleteId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxQuestCompleteId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxQuestCompleteId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxQuestCompleteId::MergeFrom(const MaxQuestCompleteId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questtype()) {
      set_questtype(from.questtype());
    }
    if (from.has_maxconfigid()) {
      set_maxconfigid(from.maxconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxQuestCompleteId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxQuestCompleteId::CopyFrom(const MaxQuestCompleteId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxQuestCompleteId::IsInitialized() const {

  return true;
}

void MaxQuestCompleteId::Swap(MaxQuestCompleteId* other) {
  if (other != this) {
    std::swap(questtype_, other->questtype_);
    std::swap(maxconfigid_, other->maxconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxQuestCompleteId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxQuestCompleteId_descriptor_;
  metadata.reflection = MaxQuestCompleteId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestMaxQuestList::kQuestListFieldNumber;
#endif  // !_MSC_VER

QuestMaxQuestList::QuestMaxQuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestMaxQuestList::InitAsDefaultInstance() {
}

QuestMaxQuestList::QuestMaxQuestList(const QuestMaxQuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestMaxQuestList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestMaxQuestList::~QuestMaxQuestList() {
  SharedDtor();
}

void QuestMaxQuestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestMaxQuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestMaxQuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestMaxQuestList_descriptor_;
}

const QuestMaxQuestList& QuestMaxQuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

QuestMaxQuestList* QuestMaxQuestList::default_instance_ = NULL;

QuestMaxQuestList* QuestMaxQuestList::New() const {
  return new QuestMaxQuestList;
}

void QuestMaxQuestList::Clear() {
  questlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestMaxQuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CompletedQuestList QuestList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_QuestList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestMaxQuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CompletedQuestList QuestList = 1;
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestMaxQuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CompletedQuestList QuestList = 1;
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestMaxQuestList::ByteSize() const {
  int total_size = 0;

  // repeated .CompletedQuestList QuestList = 1;
  total_size += 1 * this->questlist_size();
  for (int i = 0; i < this->questlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestMaxQuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestMaxQuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestMaxQuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestMaxQuestList::MergeFrom(const QuestMaxQuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  questlist_.MergeFrom(from.questlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestMaxQuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestMaxQuestList::CopyFrom(const QuestMaxQuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestMaxQuestList::IsInitialized() const {

  return true;
}

void QuestMaxQuestList::Swap(QuestMaxQuestList* other) {
  if (other != this) {
    questlist_.Swap(&other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestMaxQuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestMaxQuestList_descriptor_;
  metadata.reflection = QuestMaxQuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineStats::kLineIdFieldNumber;
const int LineStats::kLineStatsFieldNumber;
#endif  // !_MSC_VER

LineStats::LineStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineStats::InitAsDefaultInstance() {
}

LineStats::LineStats(const LineStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineStats::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = -1;
  linestats_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineStats::~LineStats() {
  SharedDtor();
}

void LineStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineStats_descriptor_;
}

const LineStats& LineStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

LineStats* LineStats::default_instance_ = NULL;

LineStats* LineStats::New() const {
  return new LineStats;
}

void LineStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = -1;
    linestats_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LineId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineid_)));
          set_has_lineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LineStats;
        break;
      }

      // optional int32 LineStats = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineStats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linestats_)));
          set_has_linestats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LineId = 1 [default = -1];
  if (has_lineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineid(), output);
  }

  // optional int32 LineStats = 2 [default = -1];
  if (has_linestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->linestats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LineId = 1 [default = -1];
  if (has_lineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineid(), target);
  }

  // optional int32 LineStats = 2 [default = -1];
  if (has_linestats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->linestats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LineId = 1 [default = -1];
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineid());
    }

    // optional int32 LineStats = 2 [default = -1];
    if (has_linestats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linestats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineStats::MergeFrom(const LineStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineid()) {
      set_lineid(from.lineid());
    }
    if (from.has_linestats()) {
      set_linestats(from.linestats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineStats::CopyFrom(const LineStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineStats::IsInitialized() const {

  return true;
}

void LineStats::Swap(LineStats* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(linestats_, other->linestats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineStats_descriptor_;
  metadata.reflection = LineStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneStats::kLinesFieldNumber;
const int SceneStats::kSceneIdFieldNumber;
#endif  // !_MSC_VER

SceneStats::SceneStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneStats::InitAsDefaultInstance() {
}

SceneStats::SceneStats(const SceneStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneStats::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneStats::~SceneStats() {
  SharedDtor();
}

void SceneStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneStats_descriptor_;
}

const SceneStats& SceneStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SceneStats* SceneStats::default_instance_ = NULL;

SceneStats* SceneStats::New() const {
  return new SceneStats;
}

void SceneStats::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sceneid_ = -1;
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LineStats Lines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Lines;
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LineStats Lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LineStats Lines = 1;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lines(i), target);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  // repeated .LineStats Lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneStats::MergeFrom(const SceneStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneStats::CopyFrom(const SceneStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneStats::IsInitialized() const {

  return true;
}

void SceneStats::Swap(SceneStats* other) {
  if (other != this) {
    lines_.Swap(&other->lines_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneStats_descriptor_;
  metadata.reflection = SceneStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonBossInfo::kBossidFieldNumber;
const int DungeonBossInfo::kNumberFieldNumber;
const int DungeonBossInfo::kDungeonidFieldNumber;
const int DungeonBossInfo::kMaxNumberFieldNumber;
const int DungeonBossInfo::kRefreshTypeFieldNumber;
#endif  // !_MSC_VER

DungeonBossInfo::DungeonBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonBossInfo::InitAsDefaultInstance() {
}

DungeonBossInfo::DungeonBossInfo(const DungeonBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = -1;
  number_ = -1;
  dungeonid_ = -1;
  maxnumber_ = -1;
  refreshtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonBossInfo::~DungeonBossInfo() {
  SharedDtor();
}

void DungeonBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonBossInfo_descriptor_;
}

const DungeonBossInfo& DungeonBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DungeonBossInfo* DungeonBossInfo::default_instance_ = NULL;

DungeonBossInfo* DungeonBossInfo::New() const {
  return new DungeonBossInfo;
}

void DungeonBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = -1;
    number_ = -1;
    dungeonid_ = -1;
    maxnumber_ = -1;
    refreshtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Bossid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }

      // optional int32 Number = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Dungeonid;
        break;
      }

      // optional int32 Dungeonid = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dungeonid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxNumber;
        break;
      }

      // optional int32 MaxNumber = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnumber_)));
          set_has_maxnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RefreshType;
        break;
      }

      // optional int32 RefreshType = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefreshType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Bossid = 1 [default = -1];
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // optional int32 Number = 2 [default = -1];
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // optional int32 Dungeonid = 3 [default = -1];
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dungeonid(), output);
  }

  // optional int32 MaxNumber = 4 [default = -1];
  if (has_maxnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxnumber(), output);
  }

  // optional int32 RefreshType = 5 [default = -1];
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refreshtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Bossid = 1 [default = -1];
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // optional int32 Number = 2 [default = -1];
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // optional int32 Dungeonid = 3 [default = -1];
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dungeonid(), target);
  }

  // optional int32 MaxNumber = 4 [default = -1];
  if (has_maxnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxnumber(), target);
  }

  // optional int32 RefreshType = 5 [default = -1];
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refreshtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Bossid = 1 [default = -1];
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional int32 Number = 2 [default = -1];
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 Dungeonid = 3 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }

    // optional int32 MaxNumber = 4 [default = -1];
    if (has_maxnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnumber());
    }

    // optional int32 RefreshType = 5 [default = -1];
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonBossInfo::MergeFrom(const DungeonBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_maxnumber()) {
      set_maxnumber(from.maxnumber());
    }
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonBossInfo::CopyFrom(const DungeonBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonBossInfo::IsInitialized() const {

  return true;
}

void DungeonBossInfo::Swap(DungeonBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(number_, other->number_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(maxnumber_, other->maxnumber_);
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonBossInfo_descriptor_;
  metadata.reflection = DungeonBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPosInfo::kPosFieldNumber;
const int SkillPosInfo::kCurLevelFieldNumber;
const int SkillPosInfo::kNextLevelFieldNumber;
const int SkillPosInfo::kCurLevelAttrFieldNumber;
const int SkillPosInfo::kNextLevelAttrFieldNumber;
#endif  // !_MSC_VER

SkillPosInfo::SkillPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPosInfo::InitAsDefaultInstance() {
}

SkillPosInfo::SkillPosInfo(const SkillPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  curlevel_ = -1;
  nextlevel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPosInfo::~SkillPosInfo() {
  SharedDtor();
}

void SkillPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPosInfo_descriptor_;
}

const SkillPosInfo& SkillPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SkillPosInfo* SkillPosInfo::default_instance_ = NULL;

SkillPosInfo* SkillPosInfo::New() const {
  return new SkillPosInfo;
}

void SkillPosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
    curlevel_ = -1;
    nextlevel_ = -1;
  }
  curlevelattr_.Clear();
  nextlevelattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Pos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurLevel;
        break;
      }

      // optional int32 CurLevel = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlevel_)));
          set_has_curlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NextLevel;
        break;
      }

      // optional int32 NextLevel = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextlevel_)));
          set_has_nextlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CurLevelAttr;
        break;
      }

      // repeated .AttrKeyValue CurLevelAttr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurLevelAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curlevelattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CurLevelAttr;
        if (input->ExpectTag(50)) goto parse_NextLevelAttr;
        break;
      }

      // repeated .AttrKeyValue NextLevelAttr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextLevelAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nextlevelattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_NextLevelAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 CurLevel = 3 [default = -1];
  if (has_curlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curlevel(), output);
  }

  // optional int32 NextLevel = 4 [default = -1];
  if (has_nextlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nextlevel(), output);
  }

  // repeated .AttrKeyValue CurLevelAttr = 5;
  for (int i = 0; i < this->curlevelattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->curlevelattr(i), output);
  }

  // repeated .AttrKeyValue NextLevelAttr = 6;
  for (int i = 0; i < this->nextlevelattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nextlevelattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Pos = 1 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 CurLevel = 3 [default = -1];
  if (has_curlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curlevel(), target);
  }

  // optional int32 NextLevel = 4 [default = -1];
  if (has_nextlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nextlevel(), target);
  }

  // repeated .AttrKeyValue CurLevelAttr = 5;
  for (int i = 0; i < this->curlevelattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->curlevelattr(i), target);
  }

  // repeated .AttrKeyValue NextLevelAttr = 6;
  for (int i = 0; i < this->nextlevelattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nextlevelattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Pos = 1 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 CurLevel = 3 [default = -1];
    if (has_curlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlevel());
    }

    // optional int32 NextLevel = 4 [default = -1];
    if (has_nextlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextlevel());
    }

  }
  // repeated .AttrKeyValue CurLevelAttr = 5;
  total_size += 1 * this->curlevelattr_size();
  for (int i = 0; i < this->curlevelattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curlevelattr(i));
  }

  // repeated .AttrKeyValue NextLevelAttr = 6;
  total_size += 1 * this->nextlevelattr_size();
  for (int i = 0; i < this->nextlevelattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nextlevelattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPosInfo::MergeFrom(const SkillPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  curlevelattr_.MergeFrom(from.curlevelattr_);
  nextlevelattr_.MergeFrom(from.nextlevelattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_curlevel()) {
      set_curlevel(from.curlevel());
    }
    if (from.has_nextlevel()) {
      set_nextlevel(from.nextlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPosInfo::CopyFrom(const SkillPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPosInfo::IsInitialized() const {

  return true;
}

void SkillPosInfo::Swap(SkillPosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(curlevel_, other->curlevel_);
    std::swap(nextlevel_, other->nextlevel_);
    curlevelattr_.Swap(&other->curlevelattr_);
    nextlevelattr_.Swap(&other->nextlevelattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPosInfo_descriptor_;
  metadata.reflection = SkillPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareReward::kRewardIDFieldNumber;
const int WelfareReward::kRewardNumFieldNumber;
#endif  // !_MSC_VER

WelfareReward::WelfareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareReward::InitAsDefaultInstance() {
}

WelfareReward::WelfareReward(const WelfareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareReward::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = -1;
  rewardnum_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareReward::~WelfareReward() {
  SharedDtor();
}

void WelfareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareReward_descriptor_;
}

const WelfareReward& WelfareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WelfareReward* WelfareReward::default_instance_ = NULL;

WelfareReward* WelfareReward::New() const {
  return new WelfareReward;
}

void WelfareReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = -1;
    rewardnum_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RewardID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RewardNum;
        break;
      }

      // optional int32 RewardNum = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RewardID = 1 [default = -1];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardid(), output);
  }

  // optional int32 RewardNum = 2 [default = -1];
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RewardID = 1 [default = -1];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardid(), target);
  }

  // optional int32 RewardNum = 2 [default = -1];
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RewardID = 1 [default = -1];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

    // optional int32 RewardNum = 2 [default = -1];
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareReward::MergeFrom(const WelfareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareReward::CopyFrom(const WelfareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareReward::IsInitialized() const {

  return true;
}

void WelfareReward::Swap(WelfareReward* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareReward_descriptor_;
  metadata.reflection = WelfareReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccumulateSignInfo::kIDFieldNumber;
const int AccumulateSignInfo::kStateFieldNumber;
const int AccumulateSignInfo::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

AccumulateSignInfo::AccumulateSignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccumulateSignInfo::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::WelfareReward*>(&::WelfareReward::default_instance());
}

AccumulateSignInfo::AccumulateSignInfo(const AccumulateSignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccumulateSignInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  state_ = false;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccumulateSignInfo::~AccumulateSignInfo() {
  SharedDtor();
}

void AccumulateSignInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void AccumulateSignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulateSignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccumulateSignInfo_descriptor_;
}

const AccumulateSignInfo& AccumulateSignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AccumulateSignInfo* AccumulateSignInfo::default_instance_ = NULL;

AccumulateSignInfo* AccumulateSignInfo::New() const {
  return new AccumulateSignInfo;
}

void AccumulateSignInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    state_ = false;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccumulateSignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // optional bool State = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RewardInfo;
        break;
      }

      // optional .WelfareReward RewardInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccumulateSignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccumulateSignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccumulateSignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool State = 2 [default = false];
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional .WelfareReward RewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulateSignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccumulateSignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccumulateSignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccumulateSignInfo::MergeFrom(const AccumulateSignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::WelfareReward::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccumulateSignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulateSignInfo::CopyFrom(const AccumulateSignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulateSignInfo::IsInitialized() const {

  return true;
}

void AccumulateSignInfo::Swap(AccumulateSignInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccumulateSignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccumulateSignInfo_descriptor_;
  metadata.reflection = AccumulateSignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineInfo::kIDFieldNumber;
const int OnlineInfo::kStateFieldNumber;
const int OnlineInfo::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

OnlineInfo::OnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineInfo::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::WelfareReward*>(&::WelfareReward::default_instance());
}

OnlineInfo::OnlineInfo(const OnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  state_ = false;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineInfo::~OnlineInfo() {
  SharedDtor();
}

void OnlineInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void OnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineInfo_descriptor_;
}

const OnlineInfo& OnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

OnlineInfo* OnlineInfo::default_instance_ = NULL;

OnlineInfo* OnlineInfo::New() const {
  return new OnlineInfo;
}

void OnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    state_ = false;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // optional bool State = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RewardInfo;
        break;
      }

      // optional .WelfareReward RewardInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool State = 2 [default = false];
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional .WelfareReward RewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineInfo::MergeFrom(const OnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::WelfareReward::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineInfo::CopyFrom(const OnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineInfo::IsInitialized() const {

  return true;
}

void OnlineInfo::Swap(OnlineInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineInfo_descriptor_;
  metadata.reflection = OnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelInfo::kIDFieldNumber;
const int LevelInfo::kStateFieldNumber;
const int LevelInfo::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

LevelInfo::LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelInfo::InitAsDefaultInstance() {
}

LevelInfo::LevelInfo(const LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelInfo::~LevelInfo() {
  SharedDtor();
}

void LevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelInfo_descriptor_;
}

const LevelInfo& LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

LevelInfo* LevelInfo::default_instance_ = NULL;

LevelInfo* LevelInfo::New() const {
  return new LevelInfo;
}

void LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    state_ = false;
  }
  rewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional bool State = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardInfo;
        break;
      }

      // repeated .WelfareReward RewardInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bool State = 3 [default = false];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  // repeated .WelfareReward RewardInfo = 4;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bool State = 3 [default = false];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  // repeated .WelfareReward RewardInfo = 4;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool State = 3 [default = false];
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated .WelfareReward RewardInfo = 4;
  total_size += 1 * this->rewardinfo_size();
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelInfo::MergeFrom(const LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelInfo::CopyFrom(const LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelInfo::IsInitialized() const {

  return true;
}

void LevelInfo::Swap(LevelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    rewardinfo_.Swap(&other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelInfo_descriptor_;
  metadata.reflection = LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthSignInInfo::kIDFieldNumber;
const int MonthSignInInfo::kStateFieldNumber;
const int MonthSignInInfo::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

MonthSignInInfo::MonthSignInInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonthSignInInfo::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::WelfareReward*>(&::WelfareReward::default_instance());
}

MonthSignInInfo::MonthSignInInfo(const MonthSignInInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonthSignInInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  state_ = false;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthSignInInfo::~MonthSignInInfo() {
  SharedDtor();
}

void MonthSignInInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void MonthSignInInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthSignInInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthSignInInfo_descriptor_;
}

const MonthSignInInfo& MonthSignInInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MonthSignInInfo* MonthSignInInfo::default_instance_ = NULL;

MonthSignInInfo* MonthSignInInfo::New() const {
  return new MonthSignInInfo;
}

void MonthSignInInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    state_ = false;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::WelfareReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthSignInInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // optional bool State = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RewardInfo;
        break;
      }

      // optional .WelfareReward RewardInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonthSignInInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonthSignInInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool State = 2 [default = false];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  // optional .WelfareReward RewardInfo = 3;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonthSignInInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool State = 2 [default = false];
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional .WelfareReward RewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthSignInInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthSignInInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthSignInInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthSignInInfo::MergeFrom(const MonthSignInInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::WelfareReward::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthSignInInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthSignInInfo::CopyFrom(const MonthSignInInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthSignInInfo::IsInitialized() const {

  return true;
}

void MonthSignInInfo::Swap(MonthSignInInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthSignInInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthSignInInfo_descriptor_;
  metadata.reflection = MonthSignInInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberQuickUpdateInfo::kLocationFieldNumber;
const int TeamMemberQuickUpdateInfo::kMaxMpFieldNumber;
const int TeamMemberQuickUpdateInfo::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TeamMemberQuickUpdateInfo::TeamMemberQuickUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberQuickUpdateInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::CharacterLocation*>(&::CharacterLocation::default_instance());
}

TeamMemberQuickUpdateInfo::TeamMemberQuickUpdateInfo(const TeamMemberQuickUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberQuickUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  maxmp_ = GOOGLE_LONGLONG(-1);
  maxhp_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberQuickUpdateInfo::~TeamMemberQuickUpdateInfo() {
  SharedDtor();
}

void TeamMemberQuickUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void TeamMemberQuickUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberQuickUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberQuickUpdateInfo_descriptor_;
}

const TeamMemberQuickUpdateInfo& TeamMemberQuickUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

TeamMemberQuickUpdateInfo* TeamMemberQuickUpdateInfo::default_instance_ = NULL;

TeamMemberQuickUpdateInfo* TeamMemberQuickUpdateInfo::New() const {
  return new TeamMemberQuickUpdateInfo;
}

void TeamMemberQuickUpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != NULL) location_->::CharacterLocation::Clear();
    }
    maxmp_ = GOOGLE_LONGLONG(-1);
    maxhp_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberQuickUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterLocation Location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxMp;
        break;
      }

      // optional int64 MaxMp = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional int64 MaxHp = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberQuickUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CharacterLocation Location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // optional int64 MaxMp = 2 [default = -1];
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxmp(), output);
  }

  // optional int64 MaxHp = 4 [default = -1];
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberQuickUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CharacterLocation Location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // optional int64 MaxMp = 2 [default = -1];
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxmp(), target);
  }

  // optional int64 MaxHp = 4 [default = -1];
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberQuickUpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterLocation Location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional int64 MaxMp = 2 [default = -1];
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxmp());
    }

    // optional int64 MaxHp = 4 [default = -1];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberQuickUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberQuickUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberQuickUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberQuickUpdateInfo::MergeFrom(const TeamMemberQuickUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::CharacterLocation::MergeFrom(from.location());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberQuickUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberQuickUpdateInfo::CopyFrom(const TeamMemberQuickUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberQuickUpdateInfo::IsInitialized() const {

  return true;
}

void TeamMemberQuickUpdateInfo::Swap(TeamMemberQuickUpdateInfo* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberQuickUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberQuickUpdateInfo_descriptor_;
  metadata.reflection = TeamMemberQuickUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossScoreInfo::kPlayerguidFieldNumber;
const int WorldBossScoreInfo::kLevelFieldNumber;
const int WorldBossScoreInfo::kNameFieldNumber;
const int WorldBossScoreInfo::kOccupationFieldNumber;
const int WorldBossScoreInfo::kRankAllFieldNumber;
const int WorldBossScoreInfo::kRankOccupationFieldNumber;
const int WorldBossScoreInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

WorldBossScoreInfo::WorldBossScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossScoreInfo::InitAsDefaultInstance() {
}

WorldBossScoreInfo::WorldBossScoreInfo(const WorldBossScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  level_ = -1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  occupation_ = -1;
  rankall_ = -1;
  rankoccupation_ = -1;
  score_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossScoreInfo::~WorldBossScoreInfo() {
  SharedDtor();
}

void WorldBossScoreInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WorldBossScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossScoreInfo_descriptor_;
}

const WorldBossScoreInfo& WorldBossScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WorldBossScoreInfo* WorldBossScoreInfo::default_instance_ = NULL;

WorldBossScoreInfo* WorldBossScoreInfo::New() const {
  return new WorldBossScoreInfo;
}

void WorldBossScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    level_ = -1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    occupation_ = -1;
    rankall_ = -1;
    rankoccupation_ = -1;
    score_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Playerguid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Occupation;
        break;
      }

      // optional int32 Occupation = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RankAll;
        break;
      }

      // optional int32 RankAll = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankall_)));
          set_has_rankall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RankOccupation;
        break;
      }

      // optional int32 RankOccupation = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankOccupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankoccupation_)));
          set_has_rankoccupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Score;
        break;
      }

      // optional int32 Score = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Playerguid = 1 [default = 0];
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerguid(), output);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 Occupation = 4 [default = -1];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupation(), output);
  }

  // optional int32 RankAll = 5 [default = -1];
  if (has_rankall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rankall(), output);
  }

  // optional int32 RankOccupation = 6 [default = -1];
  if (has_rankoccupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rankoccupation(), output);
  }

  // optional int32 Score = 7 [default = -1];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Playerguid = 1 [default = 0];
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerguid(), target);
  }

  // optional int32 Level = 2 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 Occupation = 4 [default = -1];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupation(), target);
  }

  // optional int32 RankAll = 5 [default = -1];
  if (has_rankall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rankall(), target);
  }

  // optional int32 RankOccupation = 6 [default = -1];
  if (has_rankoccupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rankoccupation(), target);
  }

  // optional int32 Score = 7 [default = -1];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Playerguid = 1 [default = 0];
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

    // optional int32 Level = 2 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Occupation = 4 [default = -1];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // optional int32 RankAll = 5 [default = -1];
    if (has_rankall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankall());
    }

    // optional int32 RankOccupation = 6 [default = -1];
    if (has_rankoccupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankoccupation());
    }

    // optional int32 Score = 7 [default = -1];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossScoreInfo::MergeFrom(const WorldBossScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_rankall()) {
      set_rankall(from.rankall());
    }
    if (from.has_rankoccupation()) {
      set_rankoccupation(from.rankoccupation());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossScoreInfo::CopyFrom(const WorldBossScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossScoreInfo::IsInitialized() const {

  return true;
}

void WorldBossScoreInfo::Swap(WorldBossScoreInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(occupation_, other->occupation_);
    std::swap(rankall_, other->rankall_);
    std::swap(rankoccupation_, other->rankoccupation_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossScoreInfo_descriptor_;
  metadata.reflection = WorldBossScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRank::kScoreInfoFieldNumber;
const int WorldBossRank::kOccupationFieldNumber;
#endif  // !_MSC_VER

WorldBossRank::WorldBossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRank::InitAsDefaultInstance() {
}

WorldBossRank::WorldBossRank(const WorldBossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRank::SharedCtor() {
  _cached_size_ = 0;
  occupation_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRank::~WorldBossRank() {
  SharedDtor();
}

void WorldBossRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRank_descriptor_;
}

const WorldBossRank& WorldBossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

WorldBossRank* WorldBossRank::default_instance_ = NULL;

WorldBossRank* WorldBossRank::New() const {
  return new WorldBossRank;
}

void WorldBossRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    occupation_ = -1;
  }
  scoreinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WorldBossScoreInfo ScoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ScoreInfo;
        if (input->ExpectTag(16)) goto parse_Occupation;
        break;
      }

      // optional int32 Occupation = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WorldBossScoreInfo ScoreInfo = 1;
  for (int i = 0; i < this->scoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scoreinfo(i), output);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->occupation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WorldBossScoreInfo ScoreInfo = 1;
  for (int i = 0; i < this->scoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scoreinfo(i), target);
  }

  // optional int32 Occupation = 2 [default = -1];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->occupation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 Occupation = 2 [default = -1];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

  }
  // repeated .WorldBossScoreInfo ScoreInfo = 1;
  total_size += 1 * this->scoreinfo_size();
  for (int i = 0; i < this->scoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scoreinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRank::MergeFrom(const WorldBossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  scoreinfo_.MergeFrom(from.scoreinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRank::CopyFrom(const WorldBossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRank::IsInitialized() const {

  return true;
}

void WorldBossRank::Swap(WorldBossRank* other) {
  if (other != this) {
    scoreinfo_.Swap(&other->scoreinfo_);
    std::swap(occupation_, other->occupation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRank_descriptor_;
  metadata.reflection = WorldBossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkill::kSkillIdFieldNumber;
const int PetSkill::kLockFieldNumber;
#endif  // !_MSC_VER

PetSkill::PetSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkill::InitAsDefaultInstance() {
}

PetSkill::PetSkill(const PetSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = -1;
  lock_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkill::~PetSkill() {
  SharedDtor();
}

void PetSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkill_descriptor_;
}

const PetSkill& PetSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PetSkill* PetSkill::default_instance_ = NULL;

PetSkill* PetSkill::New() const {
  return new PetSkill;
}

void PetSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = -1;
    lock_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SkillId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Lock;
        break;
      }

      // optional int32 Lock = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SkillId = 3 [default = -1];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int32 Lock = 4 [default = -1];
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SkillId = 3 [default = -1];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int32 Lock = 4 [default = -1];
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SkillId = 3 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 Lock = 4 [default = -1];
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkill::MergeFrom(const PetSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkill::CopyFrom(const PetSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkill::IsInitialized() const {

  return true;
}

void PetSkill::Swap(PetSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkill_descriptor_;
  metadata.reflection = PetSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpBattleEndInfo::kWinStateFieldNumber;
const int PvpBattleEndInfo::kBeforeRankFieldNumber;
const int PvpBattleEndInfo::kBeforeStarFieldNumber;
const int PvpBattleEndInfo::kAfterRankFieldNumber;
const int PvpBattleEndInfo::kAfterStarFieldNumber;
const int PvpBattleEndInfo::kRewardListFieldNumber;
const int PvpBattleEndInfo::kLeftPlayerListFieldNumber;
const int PvpBattleEndInfo::kRightPlayerListFieldNumber;
const int PvpBattleEndInfo::kBattleTimeFieldNumber;
#endif  // !_MSC_VER

PvpBattleEndInfo::PvpBattleEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpBattleEndInfo::InitAsDefaultInstance() {
}

PvpBattleEndInfo::PvpBattleEndInfo(const PvpBattleEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpBattleEndInfo::SharedCtor() {
  _cached_size_ = 0;
  winstate_ = -1;
  beforerank_ = -1;
  beforestar_ = -1;
  afterrank_ = -1;
  afterstar_ = -1;
  battletime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpBattleEndInfo::~PvpBattleEndInfo() {
  SharedDtor();
}

void PvpBattleEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpBattleEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpBattleEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpBattleEndInfo_descriptor_;
}

const PvpBattleEndInfo& PvpBattleEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpBattleEndInfo* PvpBattleEndInfo::default_instance_ = NULL;

PvpBattleEndInfo* PvpBattleEndInfo::New() const {
  return new PvpBattleEndInfo;
}

void PvpBattleEndInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winstate_ = -1;
    beforerank_ = -1;
    beforestar_ = -1;
    afterrank_ = -1;
    afterstar_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battletime_ = -1;
  }
  rewardlist_.Clear();
  leftplayerlist_.Clear();
  rightplayerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpBattleEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 WinState = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winstate_)));
          set_has_winstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BeforeRank;
        break;
      }

      // optional int32 BeforeRank = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeforeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforerank_)));
          set_has_beforerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BeforeStar;
        break;
      }

      // optional int32 BeforeStar = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeforeStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforestar_)));
          set_has_beforestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AfterRank;
        break;
      }

      // optional int32 AfterRank = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterrank_)));
          set_has_afterrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AfterStar;
        break;
      }

      // optional int32 AfterStar = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterstar_)));
          set_has_afterstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RewardList;
        break;
      }

      // repeated .PvpBattleRewardInfo RewardList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RewardList;
        if (input->ExpectTag(66)) goto parse_LeftPlayerList;
        break;
      }

      // repeated .PvpEndPlayer LeftPlayerList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LeftPlayerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leftplayerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_LeftPlayerList;
        if (input->ExpectTag(74)) goto parse_RightPlayerList;
        break;
      }

      // repeated .PvpEndPlayer RightPlayerList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RightPlayerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rightplayerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_RightPlayerList;
        if (input->ExpectTag(80)) goto parse_BattleTime;
        break;
      }

      // optional int32 BattleTime = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpBattleEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 WinState = 1 [default = -1];
  if (has_winstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winstate(), output);
  }

  // optional int32 BeforeRank = 2 [default = -1];
  if (has_beforerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beforerank(), output);
  }

  // optional int32 BeforeStar = 3 [default = -1];
  if (has_beforestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beforestar(), output);
  }

  // optional int32 AfterRank = 4 [default = -1];
  if (has_afterrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->afterrank(), output);
  }

  // optional int32 AfterStar = 5 [default = -1];
  if (has_afterstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->afterstar(), output);
  }

  // repeated .PvpBattleRewardInfo RewardList = 7;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rewardlist(i), output);
  }

  // repeated .PvpEndPlayer LeftPlayerList = 8;
  for (int i = 0; i < this->leftplayerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leftplayerlist(i), output);
  }

  // repeated .PvpEndPlayer RightPlayerList = 9;
  for (int i = 0; i < this->rightplayerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rightplayerlist(i), output);
  }

  // optional int32 BattleTime = 10 [default = -1];
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->battletime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpBattleEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 WinState = 1 [default = -1];
  if (has_winstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winstate(), target);
  }

  // optional int32 BeforeRank = 2 [default = -1];
  if (has_beforerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beforerank(), target);
  }

  // optional int32 BeforeStar = 3 [default = -1];
  if (has_beforestar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beforestar(), target);
  }

  // optional int32 AfterRank = 4 [default = -1];
  if (has_afterrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->afterrank(), target);
  }

  // optional int32 AfterStar = 5 [default = -1];
  if (has_afterstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->afterstar(), target);
  }

  // repeated .PvpBattleRewardInfo RewardList = 7;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rewardlist(i), target);
  }

  // repeated .PvpEndPlayer LeftPlayerList = 8;
  for (int i = 0; i < this->leftplayerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leftplayerlist(i), target);
  }

  // repeated .PvpEndPlayer RightPlayerList = 9;
  for (int i = 0; i < this->rightplayerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rightplayerlist(i), target);
  }

  // optional int32 BattleTime = 10 [default = -1];
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->battletime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpBattleEndInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 WinState = 1 [default = -1];
    if (has_winstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winstate());
    }

    // optional int32 BeforeRank = 2 [default = -1];
    if (has_beforerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforerank());
    }

    // optional int32 BeforeStar = 3 [default = -1];
    if (has_beforestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforestar());
    }

    // optional int32 AfterRank = 4 [default = -1];
    if (has_afterrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterrank());
    }

    // optional int32 AfterStar = 5 [default = -1];
    if (has_afterstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterstar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BattleTime = 10 [default = -1];
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletime());
    }

  }
  // repeated .PvpBattleRewardInfo RewardList = 7;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }

  // repeated .PvpEndPlayer LeftPlayerList = 8;
  total_size += 1 * this->leftplayerlist_size();
  for (int i = 0; i < this->leftplayerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leftplayerlist(i));
  }

  // repeated .PvpEndPlayer RightPlayerList = 9;
  total_size += 1 * this->rightplayerlist_size();
  for (int i = 0; i < this->rightplayerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rightplayerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpBattleEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpBattleEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpBattleEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpBattleEndInfo::MergeFrom(const PvpBattleEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  leftplayerlist_.MergeFrom(from.leftplayerlist_);
  rightplayerlist_.MergeFrom(from.rightplayerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winstate()) {
      set_winstate(from.winstate());
    }
    if (from.has_beforerank()) {
      set_beforerank(from.beforerank());
    }
    if (from.has_beforestar()) {
      set_beforestar(from.beforestar());
    }
    if (from.has_afterrank()) {
      set_afterrank(from.afterrank());
    }
    if (from.has_afterstar()) {
      set_afterstar(from.afterstar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpBattleEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpBattleEndInfo::CopyFrom(const PvpBattleEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpBattleEndInfo::IsInitialized() const {

  return true;
}

void PvpBattleEndInfo::Swap(PvpBattleEndInfo* other) {
  if (other != this) {
    std::swap(winstate_, other->winstate_);
    std::swap(beforerank_, other->beforerank_);
    std::swap(beforestar_, other->beforestar_);
    std::swap(afterrank_, other->afterrank_);
    std::swap(afterstar_, other->afterstar_);
    rewardlist_.Swap(&other->rewardlist_);
    leftplayerlist_.Swap(&other->leftplayerlist_);
    rightplayerlist_.Swap(&other->rightplayerlist_);
    std::swap(battletime_, other->battletime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpBattleEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpBattleEndInfo_descriptor_;
  metadata.reflection = PvpBattleEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpBattleRewardInfo::kItemIDFieldNumber;
const int PvpBattleRewardInfo::kItemCoutFieldNumber;
#endif  // !_MSC_VER

PvpBattleRewardInfo::PvpBattleRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpBattleRewardInfo::InitAsDefaultInstance() {
}

PvpBattleRewardInfo::PvpBattleRewardInfo(const PvpBattleRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpBattleRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  itemcout_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpBattleRewardInfo::~PvpBattleRewardInfo() {
  SharedDtor();
}

void PvpBattleRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpBattleRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpBattleRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpBattleRewardInfo_descriptor_;
}

const PvpBattleRewardInfo& PvpBattleRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

PvpBattleRewardInfo* PvpBattleRewardInfo::default_instance_ = NULL;

PvpBattleRewardInfo* PvpBattleRewardInfo::New() const {
  return new PvpBattleRewardInfo;
}

void PvpBattleRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
    itemcout_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpBattleRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemCout;
        break;
      }

      // optional int32 ItemCout = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcout_)));
          set_has_itemcout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpBattleRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemID = 1 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 ItemCout = 2 [default = -1];
  if (has_itemcout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemcout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpBattleRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemID = 1 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 ItemCout = 2 [default = -1];
  if (has_itemcout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemcout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpBattleRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemID = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemCout = 2 [default = -1];
    if (has_itemcout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpBattleRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpBattleRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpBattleRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpBattleRewardInfo::MergeFrom(const PvpBattleRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcout()) {
      set_itemcout(from.itemcout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpBattleRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpBattleRewardInfo::CopyFrom(const PvpBattleRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpBattleRewardInfo::IsInitialized() const {

  return true;
}

void PvpBattleRewardInfo::Swap(PvpBattleRewardInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcout_, other->itemcout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpBattleRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpBattleRewardInfo_descriptor_;
  metadata.reflection = PvpBattleRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactData::kRoleIdFieldNumber;
const int ContactData::kTeamIdFieldNumber;
const int ContactData::kNicknameFieldNumber;
const int ContactData::kConfigIdFieldNumber;
const int ContactData::kLevelFieldNumber;
const int ContactData::kResourceIdFieldNumber;
const int ContactData::kAliasFieldNumber;
const int ContactData::kFamiliarPointFieldNumber;
const int ContactData::kOnLineFieldNumber;
const int ContactData::kCombatValueFieldNumber;
const int ContactData::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

ContactData::ContactData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactData::InitAsDefaultInstance() {
}

ContactData::ContactData(const ContactData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  level_ = 1;
  resourceid_ = -1;
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  familiarpoint_ = 0;
  online_ = 0;
  combatvalue_ = -1;
  lastlogintime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactData::~ContactData() {
  SharedDtor();
}

void ContactData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void ContactData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactData_descriptor_;
}

const ContactData& ContactData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ContactData* ContactData::default_instance_ = NULL;

ContactData* ContactData::New() const {
  return new ContactData;
}

void ContactData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    configid_ = -1;
    level_ = 1;
    resourceid_ = -1;
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::kEmptyString) {
        alias_->clear();
      }
    }
    familiarpoint_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = 0;
    combatvalue_ = -1;
    lastlogintime_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Nickname;
        break;
      }

      // optional string Nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ConfigId;
        break;
      }

      // optional int32 ConfigId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional int32 Level = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ResourceId;
        break;
      }

      // optional int32 ResourceId = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourceid_)));
          set_has_resourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Alias;
        break;
      }

      // optional string Alias = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_FamiliarPoint;
        break;
      }

      // optional int32 FamiliarPoint = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FamiliarPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &familiarpoint_)));
          set_has_familiarpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OnLine;
        break;
      }

      // optional int32 OnLine = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CombatValue;
        break;
      }

      // optional int32 CombatValue = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_LastLoginTime;
        break;
      }

      // optional int64 LastLoginTime = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint64 TeamId = 2 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional string Nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional int32 ConfigId = 4 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->configid(), output);
  }

  // optional int32 Level = 5 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 ResourceId = 6 [default = -1];
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resourceid(), output);
  }

  // optional string Alias = 8;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->alias(), output);
  }

  // optional int32 FamiliarPoint = 10 [default = 0];
  if (has_familiarpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->familiarpoint(), output);
  }

  // optional int32 OnLine = 11 [default = 0];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->online(), output);
  }

  // optional int32 CombatValue = 12 [default = -1];
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->combatvalue(), output);
  }

  // optional int64 LastLoginTime = 13 [default = -1];
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->lastlogintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint64 TeamId = 2 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional string Nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 ConfigId = 4 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->configid(), target);
  }

  // optional int32 Level = 5 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 ResourceId = 6 [default = -1];
  if (has_resourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resourceid(), target);
  }

  // optional string Alias = 8;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->alias(), target);
  }

  // optional int32 FamiliarPoint = 10 [default = 0];
  if (has_familiarpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->familiarpoint(), target);
  }

  // optional int32 OnLine = 11 [default = 0];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->online(), target);
  }

  // optional int32 CombatValue = 12 [default = -1];
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->combatvalue(), target);
  }

  // optional int64 LastLoginTime = 13 [default = -1];
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->lastlogintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint64 TeamId = 2 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string Nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 ConfigId = 4 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 Level = 5 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 ResourceId = 6 [default = -1];
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourceid());
    }

    // optional string Alias = 8;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional int32 FamiliarPoint = 10 [default = 0];
    if (has_familiarpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->familiarpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 OnLine = 11 [default = 0];
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 CombatValue = 12 [default = -1];
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // optional int64 LastLoginTime = 13 [default = -1];
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactData::MergeFrom(const ContactData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_familiarpoint()) {
      set_familiarpoint(from.familiarpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactData::CopyFrom(const ContactData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactData::IsInitialized() const {

  return true;
}

void ContactData::Swap(ContactData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(teamid_, other->teamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(configid_, other->configid_);
    std::swap(level_, other->level_);
    std::swap(resourceid_, other->resourceid_);
    std::swap(alias_, other->alias_);
    std::swap(familiarpoint_, other->familiarpoint_);
    std::swap(online_, other->online_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactData_descriptor_;
  metadata.reflection = ContactData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactGroup::kGroupNameFieldNumber;
const int ContactGroup::kGroupRoleIdsFieldNumber;
const int ContactGroup::kGroupIdFieldNumber;
#endif  // !_MSC_VER

ContactGroup::ContactGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactGroup::InitAsDefaultInstance() {
}

ContactGroup::ContactGroup(const ContactGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactGroup::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactGroup::~ContactGroup() {
  SharedDtor();
}

void ContactGroup::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void ContactGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactGroup_descriptor_;
}

const ContactGroup& ContactGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ContactGroup* ContactGroup::default_instance_ = NULL;

ContactGroup* ContactGroup::New() const {
  return new ContactGroup;
}

void ContactGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    groupid_ = -1;
  }
  grouproleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupRoleIds;
        break;
      }

      // repeated uint64 GroupRoleIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupRoleIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_grouproleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_grouproleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupRoleIds;
        if (input->ExpectTag(24)) goto parse_GroupId;
        break;
      }

      // optional int32 GroupId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // repeated uint64 GroupRoleIds = 2;
  for (int i = 0; i < this->grouproleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->grouproleids(i), output);
  }

  // optional int32 GroupId = 3 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // repeated uint64 GroupRoleIds = 2;
  for (int i = 0; i < this->grouproleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->grouproleids(i), target);
  }

  // optional int32 GroupId = 3 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional int32 GroupId = 3 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  // repeated uint64 GroupRoleIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->grouproleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->grouproleids(i));
    }
    total_size += 1 * this->grouproleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactGroup::MergeFrom(const ContactGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  grouproleids_.MergeFrom(from.grouproleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactGroup::CopyFrom(const ContactGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactGroup::IsInitialized() const {

  return true;
}

void ContactGroup::Swap(ContactGroup* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    grouproleids_.Swap(&other->grouproleids_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactGroup_descriptor_;
  metadata.reflection = ContactGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyCount::kCountFieldNumber;
const int DailyCount::kTimeFieldNumber;
const int DailyCount::kTimeIdFieldNumber;
const int DailyCount::kFlagFieldNumber;
#endif  // !_MSC_VER

DailyCount::DailyCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyCount::InitAsDefaultInstance() {
}

DailyCount::DailyCount(const DailyCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  timeid_ = 0;
  flag_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyCount::~DailyCount() {
  SharedDtor();
}

void DailyCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyCount_descriptor_;
}

const DailyCount& DailyCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DailyCount* DailyCount::default_instance_ = NULL;

DailyCount* DailyCount::New() const {
  return new DailyCount;
}

void DailyCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    timeid_ = 0;
    flag_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional int64 Time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TimeId;
        break;
      }

      // optional int32 TimeId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Flag;
        break;
      }

      // optional int32 Flag = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int64 Time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int32 TimeId = 4 [default = 0];
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeid(), output);
  }

  // optional int32 Flag = 5 [default = -1];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int64 Time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int32 TimeId = 4 [default = 0];
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeid(), target);
  }

  // optional int32 Flag = 5 [default = -1];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 Time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 TimeId = 4 [default = 0];
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeid());
    }

    // optional int32 Flag = 5 [default = -1];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyCount::MergeFrom(const DailyCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyCount::CopyFrom(const DailyCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyCount::IsInitialized() const {

  return true;
}

void DailyCount::Swap(DailyCount* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(timeid_, other->timeid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyCount_descriptor_;
  metadata.reflection = DailyCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClimTowerInfo::kLastTimeFieldNumber;
const int ClimTowerInfo::kCurLayerFieldNumber;
const int ClimTowerInfo::kMaxLayerFieldNumber;
const int ClimTowerInfo::kResetLayerTimeFieldNumber;
const int ClimTowerInfo::kFirstGetFieldNumber;
#endif  // !_MSC_VER

ClimTowerInfo::ClimTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClimTowerInfo::InitAsDefaultInstance() {
}

ClimTowerInfo::ClimTowerInfo(const ClimTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClimTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  curlayer_ = 1;
  maxlayer_ = 0;
  resetlayertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClimTowerInfo::~ClimTowerInfo() {
  SharedDtor();
}

void ClimTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClimTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClimTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClimTowerInfo_descriptor_;
}

const ClimTowerInfo& ClimTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ClimTowerInfo* ClimTowerInfo::default_instance_ = NULL;

ClimTowerInfo* ClimTowerInfo::New() const {
  return new ClimTowerInfo;
}

void ClimTowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = GOOGLE_LONGLONG(0);
    curlayer_ = 1;
    maxlayer_ = 0;
    resetlayertime_ = GOOGLE_LONGLONG(0);
  }
  firstget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClimTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 LastTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurLayer;
        break;
      }

      // optional int32 CurLayer = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlayer_)));
          set_has_curlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxLayer;
        break;
      }

      // optional int32 MaxLayer = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ResetLayerTime;
        break;
      }

      // optional int64 ResetLayerTime = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResetLayerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resetlayertime_)));
          set_has_resetlayertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FirstGet;
        break;
      }

      // repeated .FirstVicGet FirstGet = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FirstGet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FirstGet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClimTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 LastTime = 1 [default = 0];
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lasttime(), output);
  }

  // optional int32 CurLayer = 2 [default = 1];
  if (has_curlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curlayer(), output);
  }

  // optional int32 MaxLayer = 3 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxlayer(), output);
  }

  // optional int64 ResetLayerTime = 12 [default = 0];
  if (has_resetlayertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->resetlayertime(), output);
  }

  // repeated .FirstVicGet FirstGet = 14;
  for (int i = 0; i < this->firstget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->firstget(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClimTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 LastTime = 1 [default = 0];
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lasttime(), target);
  }

  // optional int32 CurLayer = 2 [default = 1];
  if (has_curlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curlayer(), target);
  }

  // optional int32 MaxLayer = 3 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxlayer(), target);
  }

  // optional int64 ResetLayerTime = 12 [default = 0];
  if (has_resetlayertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->resetlayertime(), target);
  }

  // repeated .FirstVicGet FirstGet = 14;
  for (int i = 0; i < this->firstget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->firstget(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClimTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 LastTime = 1 [default = 0];
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 CurLayer = 2 [default = 1];
    if (has_curlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlayer());
    }

    // optional int32 MaxLayer = 3 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlayer());
    }

    // optional int64 ResetLayerTime = 12 [default = 0];
    if (has_resetlayertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resetlayertime());
    }

  }
  // repeated .FirstVicGet FirstGet = 14;
  total_size += 1 * this->firstget_size();
  for (int i = 0; i < this->firstget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstget(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClimTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClimTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClimTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClimTowerInfo::MergeFrom(const ClimTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstget_.MergeFrom(from.firstget_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_curlayer()) {
      set_curlayer(from.curlayer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_resetlayertime()) {
      set_resetlayertime(from.resetlayertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClimTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClimTowerInfo::CopyFrom(const ClimTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClimTowerInfo::IsInitialized() const {

  return true;
}

void ClimTowerInfo::Swap(ClimTowerInfo* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(curlayer_, other->curlayer_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(resetlayertime_, other->resetlayertime_);
    firstget_.Swap(&other->firstget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClimTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClimTowerInfo_descriptor_;
  metadata.reflection = ClimTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactSetting::kCloseApplyFriendFieldNumber;
const int ContactSetting::kClearFirendFieldNumber;
#endif  // !_MSC_VER

ContactSetting::ContactSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactSetting::InitAsDefaultInstance() {
}

ContactSetting::ContactSetting(const ContactSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactSetting::SharedCtor() {
  _cached_size_ = 0;
  closeapplyfriend_ = -1;
  clearfirend_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactSetting::~ContactSetting() {
  SharedDtor();
}

void ContactSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactSetting_descriptor_;
}

const ContactSetting& ContactSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ContactSetting* ContactSetting::default_instance_ = NULL;

ContactSetting* ContactSetting::New() const {
  return new ContactSetting;
}

void ContactSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    closeapplyfriend_ = -1;
    clearfirend_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CloseApplyFriend = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closeapplyfriend_)));
          set_has_closeapplyfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ClearFirend;
        break;
      }

      // optional int32 ClearFirend = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearFirend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearfirend_)));
          set_has_clearfirend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CloseApplyFriend = 1 [default = -1];
  if (has_closeapplyfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->closeapplyfriend(), output);
  }

  // optional int32 ClearFirend = 2 [default = -1];
  if (has_clearfirend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clearfirend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CloseApplyFriend = 1 [default = -1];
  if (has_closeapplyfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->closeapplyfriend(), target);
  }

  // optional int32 ClearFirend = 2 [default = -1];
  if (has_clearfirend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clearfirend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CloseApplyFriend = 1 [default = -1];
    if (has_closeapplyfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closeapplyfriend());
    }

    // optional int32 ClearFirend = 2 [default = -1];
    if (has_clearfirend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearfirend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactSetting::MergeFrom(const ContactSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_closeapplyfriend()) {
      set_closeapplyfriend(from.closeapplyfriend());
    }
    if (from.has_clearfirend()) {
      set_clearfirend(from.clearfirend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactSetting::CopyFrom(const ContactSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSetting::IsInitialized() const {

  return true;
}

void ContactSetting::Swap(ContactSetting* other) {
  if (other != this) {
    std::swap(closeapplyfriend_, other->closeapplyfriend_);
    std::swap(clearfirend_, other->clearfirend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactSetting_descriptor_;
  metadata.reflection = ContactSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstVicGet::kIdFieldNumber;
const int FirstVicGet::kGetFieldNumber;
#endif  // !_MSC_VER

FirstVicGet::FirstVicGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FirstVicGet::InitAsDefaultInstance() {
}

FirstVicGet::FirstVicGet(const FirstVicGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FirstVicGet::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstVicGet::~FirstVicGet() {
  SharedDtor();
}

void FirstVicGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstVicGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstVicGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstVicGet_descriptor_;
}

const FirstVicGet& FirstVicGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

FirstVicGet* FirstVicGet::default_instance_ = NULL;

FirstVicGet* FirstVicGet::New() const {
  return new FirstVicGet;
}

void FirstVicGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    get_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstVicGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Get;
        break;
      }

      // optional int32 Get = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstVicGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Get = 2 [default = 0];
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FirstVicGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Get = 2 [default = 0];
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FirstVicGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Get = 2 [default = 0];
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstVicGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstVicGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstVicGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstVicGet::MergeFrom(const FirstVicGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstVicGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstVicGet::CopyFrom(const FirstVicGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstVicGet::IsInitialized() const {

  return true;
}

void FirstVicGet::Swap(FirstVicGet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(get_, other->get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstVicGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstVicGet_descriptor_;
  metadata.reflection = FirstVicGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionActionInfo::kActionIdFieldNumber;
const int ExpressionActionInfo::kUnLockFieldNumber;
#endif  // !_MSC_VER

ExpressionActionInfo::ExpressionActionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionActionInfo::InitAsDefaultInstance() {
}

ExpressionActionInfo::ExpressionActionInfo(const ExpressionActionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionActionInfo::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = -1;
  unlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionActionInfo::~ExpressionActionInfo() {
  SharedDtor();
}

void ExpressionActionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionActionInfo_descriptor_;
}

const ExpressionActionInfo& ExpressionActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ExpressionActionInfo* ExpressionActionInfo::default_instance_ = NULL;

ExpressionActionInfo* ExpressionActionInfo::New() const {
  return new ExpressionActionInfo;
}

void ExpressionActionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = -1;
    unlock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionActionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ActionId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UnLock;
        break;
      }

      // optional bool UnLock = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionActionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ActionId = 1 [default = -1];
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actionid(), output);
  }

  // optional bool UnLock = 2 [default = false];
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionActionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ActionId = 1 [default = -1];
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actionid(), target);
  }

  // optional bool UnLock = 2 [default = false];
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ActionId = 1 [default = -1];
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

    // optional bool UnLock = 2 [default = false];
    if (has_unlock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionActionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionActionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionActionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionActionInfo::MergeFrom(const ExpressionActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionActionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionActionInfo::CopyFrom(const ExpressionActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionActionInfo::IsInitialized() const {

  return true;
}

void ExpressionActionInfo::Swap(ExpressionActionInfo* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionActionInfo_descriptor_;
  metadata.reflection = ExpressionActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntPair::kKeyFieldNumber;
const int IntPair::kValueFieldNumber;
#endif  // !_MSC_VER

IntPair::IntPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntPair::InitAsDefaultInstance() {
}

IntPair::IntPair(const IntPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = -1;
  value_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntPair::~IntPair() {
  SharedDtor();
}

void IntPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntPair_descriptor_;
}

const IntPair& IntPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

IntPair* IntPair::default_instance_ = NULL;

IntPair* IntPair::New() const {
  return new IntPair;
}

void IntPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = -1;
    value_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Key = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Key = 1 [default = -1];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 Value = 2 [default = -1];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Key = 1 [default = -1];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 Value = 2 [default = -1];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Key = 1 [default = -1];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 Value = 2 [default = -1];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntPair::MergeFrom(const IntPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntPair::CopyFrom(const IntPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntPair::IsInitialized() const {

  return true;
}

void IntPair::Swap(IntPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntPair_descriptor_;
  metadata.reflection = IntPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBook::kContactDataListFieldNumber;
const int AddressBook::kContactGroupsFieldNumber;
const int AddressBook::kSettingFieldNumber;
const int AddressBook::kMyRoleDataFieldNumber;
const int AddressBook::kSortGroupIdFieldNumber;
const int AddressBook::kGiftPointListFieldNumber;
const int AddressBook::kChatMsgListFieldNumber;
#endif  // !_MSC_VER

AddressBook::AddressBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddressBook::InitAsDefaultInstance() {
  setting_ = const_cast< ::ContactSetting*>(&::ContactSetting::default_instance());
  myroledata_ = const_cast< ::ContactData*>(&::ContactData::default_instance());
  giftpointlist_ = const_cast< ::FriendGifPointList*>(&::FriendGifPointList::default_instance());
}

AddressBook::AddressBook(const AddressBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddressBook::SharedCtor() {
  _cached_size_ = 0;
  setting_ = NULL;
  myroledata_ = NULL;
  giftpointlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBook::~AddressBook() {
  SharedDtor();
}

void AddressBook::SharedDtor() {
  if (this != default_instance_) {
    delete setting_;
    delete myroledata_;
    delete giftpointlist_;
  }
}

void AddressBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBook_descriptor_;
}

const AddressBook& AddressBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AddressBook* AddressBook::default_instance_ = NULL;

AddressBook* AddressBook::New() const {
  return new AddressBook;
}

void AddressBook::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_setting()) {
      if (setting_ != NULL) setting_->::ContactSetting::Clear();
    }
    if (has_myroledata()) {
      if (myroledata_ != NULL) myroledata_->::ContactData::Clear();
    }
    if (has_giftpointlist()) {
      if (giftpointlist_ != NULL) giftpointlist_->::FriendGifPointList::Clear();
    }
  }
  contactdatalist_.Clear();
  contactgroups_.Clear();
  sortgroupid_.Clear();
  chatmsglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContactData ContactDataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ContactDataList;
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        break;
      }

      // repeated .ContactGroup ContactGroups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContactGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContactGroups;
        if (input->ExpectTag(26)) goto parse_Setting;
        break;
      }

      // optional .ContactSetting Setting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MyRoleData;
        break;
      }

      // optional .ContactData MyRoleData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyRoleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myroledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SortGroupId;
        break;
      }

      // repeated int32 SortGroupId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SortGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_sortgroupid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sortgroupid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SortGroupId;
        if (input->ExpectTag(50)) goto parse_GiftPointList;
        break;
      }

      // optional .FriendGifPointList GiftPointList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GiftPointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftpointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChatMsgList;
        break;
      }

      // repeated .ContactsChatMsg ChatMsgList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatMsgList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatmsglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChatMsgList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ContactData ContactDataList = 1;
  for (int i = 0; i < this->contactdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contactdatalist(i), output);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contactgroups(i), output);
  }

  // optional .ContactSetting Setting = 3;
  if (has_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->setting(), output);
  }

  // optional .ContactData MyRoleData = 4;
  if (has_myroledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->myroledata(), output);
  }

  // repeated int32 SortGroupId = 5;
  for (int i = 0; i < this->sortgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->sortgroupid(i), output);
  }

  // optional .FriendGifPointList GiftPointList = 6;
  if (has_giftpointlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->giftpointlist(), output);
  }

  // repeated .ContactsChatMsg ChatMsgList = 7;
  for (int i = 0; i < this->chatmsglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chatmsglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddressBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ContactData ContactDataList = 1;
  for (int i = 0; i < this->contactdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contactdatalist(i), target);
  }

  // repeated .ContactGroup ContactGroups = 2;
  for (int i = 0; i < this->contactgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contactgroups(i), target);
  }

  // optional .ContactSetting Setting = 3;
  if (has_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->setting(), target);
  }

  // optional .ContactData MyRoleData = 4;
  if (has_myroledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->myroledata(), target);
  }

  // repeated int32 SortGroupId = 5;
  for (int i = 0; i < this->sortgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->sortgroupid(i), target);
  }

  // optional .FriendGifPointList GiftPointList = 6;
  if (has_giftpointlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->giftpointlist(), target);
  }

  // repeated .ContactsChatMsg ChatMsgList = 7;
  for (int i = 0; i < this->chatmsglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chatmsglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddressBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .ContactSetting Setting = 3;
    if (has_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

    // optional .ContactData MyRoleData = 4;
    if (has_myroledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myroledata());
    }

    // optional .FriendGifPointList GiftPointList = 6;
    if (has_giftpointlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftpointlist());
    }

  }
  // repeated .ContactData ContactDataList = 1;
  total_size += 1 * this->contactdatalist_size();
  for (int i = 0; i < this->contactdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactdatalist(i));
  }

  // repeated .ContactGroup ContactGroups = 2;
  total_size += 1 * this->contactgroups_size();
  for (int i = 0; i < this->contactgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactgroups(i));
  }

  // repeated int32 SortGroupId = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->sortgroupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sortgroupid(i));
    }
    total_size += 1 * this->sortgroupid_size() + data_size;
  }

  // repeated .ContactsChatMsg ChatMsgList = 7;
  total_size += 1 * this->chatmsglist_size();
  for (int i = 0; i < this->chatmsglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatmsglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBook::MergeFrom(const AddressBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactdatalist_.MergeFrom(from.contactdatalist_);
  contactgroups_.MergeFrom(from.contactgroups_);
  sortgroupid_.MergeFrom(from.sortgroupid_);
  chatmsglist_.MergeFrom(from.chatmsglist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_setting()) {
      mutable_setting()->::ContactSetting::MergeFrom(from.setting());
    }
    if (from.has_myroledata()) {
      mutable_myroledata()->::ContactData::MergeFrom(from.myroledata());
    }
    if (from.has_giftpointlist()) {
      mutable_giftpointlist()->::FriendGifPointList::MergeFrom(from.giftpointlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBook::CopyFrom(const AddressBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBook::IsInitialized() const {

  return true;
}

void AddressBook::Swap(AddressBook* other) {
  if (other != this) {
    contactdatalist_.Swap(&other->contactdatalist_);
    contactgroups_.Swap(&other->contactgroups_);
    std::swap(setting_, other->setting_);
    std::swap(myroledata_, other->myroledata_);
    sortgroupid_.Swap(&other->sortgroupid_);
    std::swap(giftpointlist_, other->giftpointlist_);
    chatmsglist_.Swap(&other->chatmsglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBook_descriptor_;
  metadata.reflection = AddressBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionItem::kOwnerGuidFieldNumber;
const int AuctionItem::kPriceFieldNumber;
const int AuctionItem::kCurrencyFieldNumber;
const int AuctionItem::kItemDataFieldNumber;
const int AuctionItem::kStatusFieldNumber;
const int AuctionItem::kSaleTSFieldNumber;
#endif  // !_MSC_VER

AuctionItem::AuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionItem::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
}

AuctionItem::AuctionItem(const AuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionItem::SharedCtor() {
  _cached_size_ = 0;
  ownerguid_ = GOOGLE_ULONGLONG(0);
  price_ = 1;
  currency_ = 1;
  itemdata_ = NULL;
  status_ = 0;
  salets_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionItem::~AuctionItem() {
  SharedDtor();
}

void AuctionItem::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void AuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionItem_descriptor_;
}

const AuctionItem& AuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AuctionItem* AuctionItem::default_instance_ = NULL;

AuctionItem* AuctionItem::New() const {
  return new AuctionItem;
}

void AuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ownerguid_ = GOOGLE_ULONGLONG(0);
    price_ = 1;
    currency_ = 1;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::ItemData::Clear();
    }
    status_ = 0;
    salets_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 OwnerGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerguid_)));
          set_has_ownerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Currency;
        break;
      }

      // optional int32 Currency = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ItemData;
        break;
      }

      // optional .ItemData ItemData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Status;
        break;
      }

      // optional int32 Status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SaleTS;
        break;
      }

      // optional int32 SaleTS = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SaleTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salets_)));
          set_has_salets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 OwnerGuid = 1 [default = 0];
  if (has_ownerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ownerguid(), output);
  }

  // optional int32 Price = 2 [default = 1];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional int32 Currency = 3 [default = 1];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // optional .ItemData ItemData = 4;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemdata(), output);
  }

  // optional int32 Status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional int32 SaleTS = 6 [default = -1];
  if (has_salets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->salets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 OwnerGuid = 1 [default = 0];
  if (has_ownerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ownerguid(), target);
  }

  // optional int32 Price = 2 [default = 1];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional int32 Currency = 3 [default = 1];
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // optional .ItemData ItemData = 4;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemdata(), target);
  }

  // optional int32 Status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional int32 SaleTS = 6 [default = -1];
  if (has_salets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->salets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 OwnerGuid = 1 [default = 0];
    if (has_ownerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerguid());
    }

    // optional int32 Price = 2 [default = 1];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Currency = 3 [default = 1];
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional .ItemData ItemData = 4;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional int32 Status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 SaleTS = 6 [default = -1];
    if (has_salets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionItem::MergeFrom(const AuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerguid()) {
      set_ownerguid(from.ownerguid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_salets()) {
      set_salets(from.salets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItem::CopyFrom(const AuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItem::IsInitialized() const {

  return true;
}

void AuctionItem::Swap(AuctionItem* other) {
  if (other != this) {
    std::swap(ownerguid_, other->ownerguid_);
    std::swap(price_, other->price_);
    std::swap(currency_, other->currency_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(status_, other->status_);
    std::swap(salets_, other->salets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionItem_descriptor_;
  metadata.reflection = AuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRecSimple::kRecGuidFieldNumber;
const int AuctionRecSimple::kSoldTSFieldNumber;
const int AuctionRecSimple::kItemIdFieldNumber;
const int AuctionRecSimple::kCountFieldNumber;
const int AuctionRecSimple::kCurrencyFieldNumber;
const int AuctionRecSimple::kCostFieldNumber;
const int AuctionRecSimple::kSoldTypeFieldNumber;
const int AuctionRecSimple::kTaxFieldNumber;
const int AuctionRecSimple::kIsGotFieldNumber;
#endif  // !_MSC_VER

AuctionRecSimple::AuctionRecSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRecSimple::InitAsDefaultInstance() {
}

AuctionRecSimple::AuctionRecSimple(const AuctionRecSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRecSimple::SharedCtor() {
  _cached_size_ = 0;
  recguid_ = GOOGLE_ULONGLONG(0);
  soldts_ = -1;
  itemid_ = -1;
  count_ = -1;
  currency_ = -1;
  cost_ = -1;
  soldtype_ = -1;
  tax_ = -1;
  isgot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRecSimple::~AuctionRecSimple() {
  SharedDtor();
}

void AuctionRecSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRecSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRecSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRecSimple_descriptor_;
}

const AuctionRecSimple& AuctionRecSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AuctionRecSimple* AuctionRecSimple::default_instance_ = NULL;

AuctionRecSimple* AuctionRecSimple::New() const {
  return new AuctionRecSimple;
}

void AuctionRecSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recguid_ = GOOGLE_ULONGLONG(0);
    soldts_ = -1;
    itemid_ = -1;
    count_ = -1;
    currency_ = -1;
    cost_ = -1;
    soldtype_ = -1;
    tax_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isgot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRecSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recguid_)));
          set_has_recguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SoldTS;
        break;
      }

      // optional int32 SoldTS = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SoldTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldts_)));
          set_has_soldts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemId;
        break;
      }

      // optional int32 ItemId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Count;
        break;
      }

      // optional int32 Count = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Currency;
        break;
      }

      // optional int32 Currency = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Cost;
        break;
      }

      // optional int32 Cost = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SoldType;
        break;
      }

      // optional int32 SoldType = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SoldType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldtype_)));
          set_has_soldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Tax;
        break;
      }

      // optional int32 Tax = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsGot;
        break;
      }

      // optional bool IsGot = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgot_)));
          set_has_isgot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRecSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RecGuid = 1 [default = 0];
  if (has_recguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recguid(), output);
  }

  // optional int32 SoldTS = 2 [default = -1];
  if (has_soldts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soldts(), output);
  }

  // optional int32 ItemId = 3 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 Count = 7 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  // optional int32 Currency = 8 [default = -1];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currency(), output);
  }

  // optional int32 Cost = 9 [default = -1];
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cost(), output);
  }

  // optional int32 SoldType = 10 [default = -1];
  if (has_soldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->soldtype(), output);
  }

  // optional int32 Tax = 11 [default = -1];
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tax(), output);
  }

  // optional bool IsGot = 12 [default = false];
  if (has_isgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isgot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRecSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RecGuid = 1 [default = 0];
  if (has_recguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recguid(), target);
  }

  // optional int32 SoldTS = 2 [default = -1];
  if (has_soldts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soldts(), target);
  }

  // optional int32 ItemId = 3 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 Count = 7 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  // optional int32 Currency = 8 [default = -1];
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currency(), target);
  }

  // optional int32 Cost = 9 [default = -1];
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cost(), target);
  }

  // optional int32 SoldType = 10 [default = -1];
  if (has_soldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->soldtype(), target);
  }

  // optional int32 Tax = 11 [default = -1];
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tax(), target);
  }

  // optional bool IsGot = 12 [default = false];
  if (has_isgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isgot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRecSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecGuid = 1 [default = 0];
    if (has_recguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recguid());
    }

    // optional int32 SoldTS = 2 [default = -1];
    if (has_soldts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldts());
    }

    // optional int32 ItemId = 3 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Count = 7 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 Currency = 8 [default = -1];
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 Cost = 9 [default = -1];
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 SoldType = 10 [default = -1];
    if (has_soldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldtype());
    }

    // optional int32 Tax = 11 [default = -1];
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsGot = 12 [default = false];
    if (has_isgot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRecSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRecSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRecSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRecSimple::MergeFrom(const AuctionRecSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recguid()) {
      set_recguid(from.recguid());
    }
    if (from.has_soldts()) {
      set_soldts(from.soldts());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_soldtype()) {
      set_soldtype(from.soldtype());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isgot()) {
      set_isgot(from.isgot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRecSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRecSimple::CopyFrom(const AuctionRecSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRecSimple::IsInitialized() const {

  return true;
}

void AuctionRecSimple::Swap(AuctionRecSimple* other) {
  if (other != this) {
    std::swap(recguid_, other->recguid_);
    std::swap(soldts_, other->soldts_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(currency_, other->currency_);
    std::swap(cost_, other->cost_);
    std::swap(soldtype_, other->soldtype_);
    std::swap(tax_, other->tax_);
    std::swap(isgot_, other->isgot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRecSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRecSimple_descriptor_;
  metadata.reflection = AuctionRecSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRecDetail::kBuyGuidFieldNumber;
const int AuctionRecDetail::kSoldTSFieldNumber;
const int AuctionRecDetail::kAuctionItemFieldNumber;
const int AuctionRecDetail::kIsGotFieldNumber;
const int AuctionRecDetail::kCostFieldNumber;
const int AuctionRecDetail::kTaxFieldNumber;
const int AuctionRecDetail::kCurrencyFieldNumber;
const int AuctionRecDetail::kRecGuidFieldNumber;
const int AuctionRecDetail::kNewItemGuidFieldNumber;
const int AuctionRecDetail::kSoldTypeFieldNumber;
#endif  // !_MSC_VER

AuctionRecDetail::AuctionRecDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionRecDetail::InitAsDefaultInstance() {
  auctionitem_ = const_cast< ::AuctionItem*>(&::AuctionItem::default_instance());
}

AuctionRecDetail::AuctionRecDetail(const AuctionRecDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionRecDetail::SharedCtor() {
  _cached_size_ = 0;
  buyguid_ = GOOGLE_ULONGLONG(0);
  soldts_ = -1;
  auctionitem_ = NULL;
  isgot_ = false;
  cost_ = -1;
  tax_ = -1;
  currency_ = -1;
  recguid_ = GOOGLE_ULONGLONG(0);
  newitemguid_ = false;
  soldtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRecDetail::~AuctionRecDetail() {
  SharedDtor();
}

void AuctionRecDetail::SharedDtor() {
  if (this != default_instance_) {
    delete auctionitem_;
  }
}

void AuctionRecDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRecDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRecDetail_descriptor_;
}

const AuctionRecDetail& AuctionRecDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AuctionRecDetail* AuctionRecDetail::default_instance_ = NULL;

AuctionRecDetail* AuctionRecDetail::New() const {
  return new AuctionRecDetail;
}

void AuctionRecDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyguid_ = GOOGLE_ULONGLONG(0);
    soldts_ = -1;
    if (has_auctionitem()) {
      if (auctionitem_ != NULL) auctionitem_->::AuctionItem::Clear();
    }
    isgot_ = false;
    cost_ = -1;
    tax_ = -1;
    currency_ = -1;
    recguid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    newitemguid_ = false;
    soldtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRecDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BuyGuid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyguid_)));
          set_has_buyguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SoldTS;
        break;
      }

      // optional int32 SoldTS = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SoldTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldts_)));
          set_has_soldts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AuctionItem;
        break;
      }

      // optional .AuctionItem AuctionItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuctionItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auctionitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsGot;
        break;
      }

      // optional bool IsGot = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgot_)));
          set_has_isgot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Cost;
        break;
      }

      // optional int32 Cost = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Tax;
        break;
      }

      // optional int32 Tax = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Currency;
        break;
      }

      // optional int32 Currency = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RecGuid;
        break;
      }

      // optional uint64 RecGuid = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recguid_)));
          set_has_recguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NewItemGuid;
        break;
      }

      // optional bool NewItemGuid = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewItemGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newitemguid_)));
          set_has_newitemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SoldType;
        break;
      }

      // optional int32 SoldType = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SoldType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldtype_)));
          set_has_soldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionRecDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 BuyGuid = 1 [default = 0];
  if (has_buyguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buyguid(), output);
  }

  // optional int32 SoldTS = 2 [default = -1];
  if (has_soldts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soldts(), output);
  }

  // optional .AuctionItem AuctionItem = 3;
  if (has_auctionitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->auctionitem(), output);
  }

  // optional bool IsGot = 4 [default = false];
  if (has_isgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isgot(), output);
  }

  // optional int32 Cost = 6 [default = -1];
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost(), output);
  }

  // optional int32 Tax = 7 [default = -1];
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tax(), output);
  }

  // optional int32 Currency = 8 [default = -1];
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currency(), output);
  }

  // optional uint64 RecGuid = 9 [default = 0];
  if (has_recguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->recguid(), output);
  }

  // optional bool NewItemGuid = 10 [default = false];
  if (has_newitemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->newitemguid(), output);
  }

  // optional int32 SoldType = 11 [default = -1];
  if (has_soldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->soldtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionRecDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 BuyGuid = 1 [default = 0];
  if (has_buyguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buyguid(), target);
  }

  // optional int32 SoldTS = 2 [default = -1];
  if (has_soldts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soldts(), target);
  }

  // optional .AuctionItem AuctionItem = 3;
  if (has_auctionitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->auctionitem(), target);
  }

  // optional bool IsGot = 4 [default = false];
  if (has_isgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isgot(), target);
  }

  // optional int32 Cost = 6 [default = -1];
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cost(), target);
  }

  // optional int32 Tax = 7 [default = -1];
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tax(), target);
  }

  // optional int32 Currency = 8 [default = -1];
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currency(), target);
  }

  // optional uint64 RecGuid = 9 [default = 0];
  if (has_recguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->recguid(), target);
  }

  // optional bool NewItemGuid = 10 [default = false];
  if (has_newitemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->newitemguid(), target);
  }

  // optional int32 SoldType = 11 [default = -1];
  if (has_soldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->soldtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionRecDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BuyGuid = 1 [default = 0];
    if (has_buyguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buyguid());
    }

    // optional int32 SoldTS = 2 [default = -1];
    if (has_soldts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldts());
    }

    // optional .AuctionItem AuctionItem = 3;
    if (has_auctionitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auctionitem());
    }

    // optional bool IsGot = 4 [default = false];
    if (has_isgot()) {
      total_size += 1 + 1;
    }

    // optional int32 Cost = 6 [default = -1];
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 Tax = 7 [default = -1];
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // optional int32 Currency = 8 [default = -1];
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional uint64 RecGuid = 9 [default = 0];
    if (has_recguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recguid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool NewItemGuid = 10 [default = false];
    if (has_newitemguid()) {
      total_size += 1 + 1;
    }

    // optional int32 SoldType = 11 [default = -1];
    if (has_soldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRecDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRecDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRecDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRecDetail::MergeFrom(const AuctionRecDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyguid()) {
      set_buyguid(from.buyguid());
    }
    if (from.has_soldts()) {
      set_soldts(from.soldts());
    }
    if (from.has_auctionitem()) {
      mutable_auctionitem()->::AuctionItem::MergeFrom(from.auctionitem());
    }
    if (from.has_isgot()) {
      set_isgot(from.isgot());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_recguid()) {
      set_recguid(from.recguid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_newitemguid()) {
      set_newitemguid(from.newitemguid());
    }
    if (from.has_soldtype()) {
      set_soldtype(from.soldtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRecDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRecDetail::CopyFrom(const AuctionRecDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRecDetail::IsInitialized() const {

  return true;
}

void AuctionRecDetail::Swap(AuctionRecDetail* other) {
  if (other != this) {
    std::swap(buyguid_, other->buyguid_);
    std::swap(soldts_, other->soldts_);
    std::swap(auctionitem_, other->auctionitem_);
    std::swap(isgot_, other->isgot_);
    std::swap(cost_, other->cost_);
    std::swap(tax_, other->tax_);
    std::swap(currency_, other->currency_);
    std::swap(recguid_, other->recguid_);
    std::swap(newitemguid_, other->newitemguid_);
    std::swap(soldtype_, other->soldtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRecDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRecDetail_descriptor_;
  metadata.reflection = AuctionRecDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MercenaryInfo::kIdFieldNumber;
#endif  // !_MSC_VER

MercenaryInfo::MercenaryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MercenaryInfo::InitAsDefaultInstance() {
}

MercenaryInfo::MercenaryInfo(const MercenaryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MercenaryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MercenaryInfo::~MercenaryInfo() {
  SharedDtor();
}

void MercenaryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MercenaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MercenaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MercenaryInfo_descriptor_;
}

const MercenaryInfo& MercenaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MercenaryInfo* MercenaryInfo::default_instance_ = NULL;

MercenaryInfo* MercenaryInfo::New() const {
  return new MercenaryInfo;
}

void MercenaryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MercenaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MercenaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MercenaryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MercenaryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MercenaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MercenaryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MercenaryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MercenaryInfo::MergeFrom(const MercenaryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MercenaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MercenaryInfo::CopyFrom(const MercenaryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MercenaryInfo::IsInitialized() const {

  return true;
}

void MercenaryInfo::Swap(MercenaryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MercenaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MercenaryInfo_descriptor_;
  metadata.reflection = MercenaryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kRoleIDFieldNumber;
const int RankInfo::kRoleNameFieldNumber;
const int RankInfo::kConfigIDFieldNumber;
const int RankInfo::kGuildIDFieldNumber;
const int RankInfo::kGuildNameFieldNumber;
const int RankInfo::kPetIDFieldNumber;
const int RankInfo::kPetLevelFieldNumber;
const int RankInfo::kTreasureCountFieldNumber;
const int RankInfo::kTreasureLevelFieldNumber;
const int RankInfo::kScoreFieldNumber;
const int RankInfo::kLevelFieldNumber;
const int RankInfo::kGuildFlagIDFieldNumber;
const int RankInfo::kWinCountFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  petid_ = -1;
  petlevel_ = -1;
  treasurecount_ = -1;
  treasurelevel_ = -1;
  score_ = -1;
  level_ = -1;
  guildflagid_ = -1;
  wincount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    configid_ = -1;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    petid_ = -1;
    petlevel_ = -1;
    treasurecount_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    treasurelevel_ = -1;
    score_ = -1;
    level_ = -1;
    guildflagid_ = -1;
    wincount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ConfigID;
        break;
      }

      // optional int32 ConfigID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildID;
        break;
      }

      // optional uint64 GuildID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PetID;
        break;
      }

      // optional int32 PetID = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PetLevel;
        break;
      }

      // optional int32 PetLevel = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PetLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petlevel_)));
          set_has_petlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TreasureCount;
        break;
      }

      // optional int32 TreasureCount = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurecount_)));
          set_has_treasurecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_TreasureLevel;
        break;
      }

      // optional int32 TreasureLevel = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasureLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasurelevel_)));
          set_has_treasurelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Score;
        break;
      }

      // optional int32 Score = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Level;
        break;
      }

      // optional int32 Level = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GuildFlagID;
        break;
      }

      // optional int32 GuildFlagID = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildFlagID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildflagid_)));
          set_has_guildflagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_WinCount;
        break;
      }

      // optional int32 WinCount = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 ConfigID = 3 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // optional uint64 GuildID = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional string GuildName = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guildname(), output);
  }

  // optional int32 PetID = 6 [default = -1];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->petid(), output);
  }

  // optional int32 PetLevel = 7 [default = -1];
  if (has_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->petlevel(), output);
  }

  // optional int32 TreasureCount = 8 [default = -1];
  if (has_treasurecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->treasurecount(), output);
  }

  // optional int32 TreasureLevel = 9 [default = -1];
  if (has_treasurelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->treasurelevel(), output);
  }

  // optional int32 Score = 10 [default = -1];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->score(), output);
  }

  // optional int32 Level = 11 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  // optional int32 GuildFlagID = 12 [default = -1];
  if (has_guildflagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->guildflagid(), output);
  }

  // optional int32 WinCount = 13 [default = -1];
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wincount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleID = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string RoleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 ConfigID = 3 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // optional uint64 GuildID = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional string GuildName = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }

  // optional int32 PetID = 6 [default = -1];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->petid(), target);
  }

  // optional int32 PetLevel = 7 [default = -1];
  if (has_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->petlevel(), target);
  }

  // optional int32 TreasureCount = 8 [default = -1];
  if (has_treasurecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->treasurecount(), target);
  }

  // optional int32 TreasureLevel = 9 [default = -1];
  if (has_treasurelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->treasurelevel(), target);
  }

  // optional int32 Score = 10 [default = -1];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->score(), target);
  }

  // optional int32 Level = 11 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  // optional int32 GuildFlagID = 12 [default = -1];
  if (has_guildflagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->guildflagid(), target);
  }

  // optional int32 WinCount = 13 [default = -1];
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wincount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleID = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 ConfigID = 3 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional uint64 GuildID = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 PetID = 6 [default = -1];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 PetLevel = 7 [default = -1];
    if (has_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petlevel());
    }

    // optional int32 TreasureCount = 8 [default = -1];
    if (has_treasurecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurecount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 TreasureLevel = 9 [default = -1];
    if (has_treasurelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasurelevel());
    }

    // optional int32 Score = 10 [default = -1];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 Level = 11 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 GuildFlagID = 12 [default = -1];
    if (has_guildflagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildflagid());
    }

    // optional int32 WinCount = 13 [default = -1];
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_petlevel()) {
      set_petlevel(from.petlevel());
    }
    if (from.has_treasurecount()) {
      set_treasurecount(from.treasurecount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treasurelevel()) {
      set_treasurelevel(from.treasurelevel());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guildflagid()) {
      set_guildflagid(from.guildflagid());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(configid_, other->configid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(petid_, other->petid_);
    std::swap(petlevel_, other->petlevel_);
    std::swap(treasurecount_, other->treasurecount_);
    std::swap(treasurelevel_, other->treasurelevel_);
    std::swap(score_, other->score_);
    std::swap(level_, other->level_);
    std::swap(guildflagid_, other->guildflagid_);
    std::swap(wincount_, other->wincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionItemCnt::kItemIdFieldNumber;
const int AuctionItemCnt::kCountFieldNumber;
#endif  // !_MSC_VER

AuctionItemCnt::AuctionItemCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionItemCnt::InitAsDefaultInstance() {
}

AuctionItemCnt::AuctionItemCnt(const AuctionItemCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionItemCnt::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionItemCnt::~AuctionItemCnt() {
  SharedDtor();
}

void AuctionItemCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionItemCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionItemCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionItemCnt_descriptor_;
}

const AuctionItemCnt& AuctionItemCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AuctionItemCnt* AuctionItemCnt::default_instance_ = NULL;

AuctionItemCnt* AuctionItemCnt::New() const {
  return new AuctionItemCnt;
}

void AuctionItemCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionItemCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionItemCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionItemCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemId = 1 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Count = 2 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionItemCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionItemCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionItemCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionItemCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionItemCnt::MergeFrom(const AuctionItemCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionItemCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItemCnt::CopyFrom(const AuctionItemCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItemCnt::IsInitialized() const {

  return true;
}

void AuctionItemCnt::Swap(AuctionItemCnt* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionItemCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionItemCnt_descriptor_;
  metadata.reflection = AuctionItemCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDotInfo::kTypeFieldNumber;
const int RedDotInfo::kIsLightFieldNumber;
#endif  // !_MSC_VER

RedDotInfo::RedDotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDotInfo::InitAsDefaultInstance() {
}

RedDotInfo::RedDotInfo(const RedDotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDotInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  islight_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDotInfo::~RedDotInfo() {
  SharedDtor();
}

void RedDotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDotInfo_descriptor_;
}

const RedDotInfo& RedDotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

RedDotInfo* RedDotInfo::default_instance_ = NULL;

RedDotInfo* RedDotInfo::New() const {
  return new RedDotInfo;
}

void RedDotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    islight_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsLight;
        break;
      }

      // optional int32 IsLight = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islight_)));
          set_has_islight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 IsLight = 2 [default = -1];
  if (has_islight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->islight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 IsLight = 2 [default = -1];
  if (has_islight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->islight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 IsLight = 2 [default = -1];
    if (has_islight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDotInfo::MergeFrom(const RedDotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_islight()) {
      set_islight(from.islight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDotInfo::CopyFrom(const RedDotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDotInfo::IsInitialized() const {

  return true;
}

void RedDotInfo::Swap(RedDotInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(islight_, other->islight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDotInfo_descriptor_;
  metadata.reflection = RedDotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendGiftPoint::kGuidFieldNumber;
const int FriendGiftPoint::kPointFieldNumber;
#endif  // !_MSC_VER

FriendGiftPoint::FriendGiftPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendGiftPoint::InitAsDefaultInstance() {
}

FriendGiftPoint::FriendGiftPoint(const FriendGiftPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendGiftPoint::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendGiftPoint::~FriendGiftPoint() {
  SharedDtor();
}

void FriendGiftPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendGiftPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendGiftPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendGiftPoint_descriptor_;
}

const FriendGiftPoint& FriendGiftPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

FriendGiftPoint* FriendGiftPoint::default_instance_ = NULL;

FriendGiftPoint* FriendGiftPoint::New() const {
  return new FriendGiftPoint;
}

void FriendGiftPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendGiftPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Guid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }

      // optional int32 Point = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendGiftPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 Point = 2 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendGiftPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 Point = 2 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendGiftPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 Point = 2 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendGiftPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendGiftPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendGiftPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendGiftPoint::MergeFrom(const FriendGiftPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendGiftPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendGiftPoint::CopyFrom(const FriendGiftPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendGiftPoint::IsInitialized() const {

  return true;
}

void FriendGiftPoint::Swap(FriendGiftPoint* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendGiftPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendGiftPoint_descriptor_;
  metadata.reflection = FriendGiftPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendGifPointList::kSentGiftListFieldNumber;
const int FriendGifPointList::kAcquireGiftListFieldNumber;
const int FriendGifPointList::kUnAcquireGiftListFieldNumber;
#endif  // !_MSC_VER

FriendGifPointList::FriendGifPointList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendGifPointList::InitAsDefaultInstance() {
}

FriendGifPointList::FriendGifPointList(const FriendGifPointList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendGifPointList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendGifPointList::~FriendGifPointList() {
  SharedDtor();
}

void FriendGifPointList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendGifPointList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendGifPointList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendGifPointList_descriptor_;
}

const FriendGifPointList& FriendGifPointList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

FriendGifPointList* FriendGifPointList::default_instance_ = NULL;

FriendGifPointList* FriendGifPointList::New() const {
  return new FriendGifPointList;
}

void FriendGifPointList::Clear() {
  sentgiftlist_.Clear();
  acquiregiftlist_.Clear();
  unacquiregiftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendGifPointList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendGiftPoint SentGiftList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SentGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentgiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SentGiftList;
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint AcquireGiftList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcquireGiftList;
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        break;
      }

      // repeated .FriendGiftPoint UnAcquireGiftList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnAcquireGiftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unacquiregiftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UnAcquireGiftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendGifPointList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendGiftPoint SentGiftList = 1;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentgiftlist(i), output);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acquiregiftlist(i), output);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unacquiregiftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendGifPointList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendGiftPoint SentGiftList = 1;
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sentgiftlist(i), target);
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acquiregiftlist(i), target);
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unacquiregiftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendGifPointList::ByteSize() const {
  int total_size = 0;

  // repeated .FriendGiftPoint SentGiftList = 1;
  total_size += 1 * this->sentgiftlist_size();
  for (int i = 0; i < this->sentgiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentgiftlist(i));
  }

  // repeated .FriendGiftPoint AcquireGiftList = 2;
  total_size += 1 * this->acquiregiftlist_size();
  for (int i = 0; i < this->acquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acquiregiftlist(i));
  }

  // repeated .FriendGiftPoint UnAcquireGiftList = 3;
  total_size += 1 * this->unacquiregiftlist_size();
  for (int i = 0; i < this->unacquiregiftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unacquiregiftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendGifPointList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendGifPointList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendGifPointList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendGifPointList::MergeFrom(const FriendGifPointList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentgiftlist_.MergeFrom(from.sentgiftlist_);
  acquiregiftlist_.MergeFrom(from.acquiregiftlist_);
  unacquiregiftlist_.MergeFrom(from.unacquiregiftlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendGifPointList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendGifPointList::CopyFrom(const FriendGifPointList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendGifPointList::IsInitialized() const {

  return true;
}

void FriendGifPointList::Swap(FriendGifPointList* other) {
  if (other != this) {
    sentgiftlist_.Swap(&other->sentgiftlist_);
    acquiregiftlist_.Swap(&other->acquiregiftlist_);
    unacquiregiftlist_.Swap(&other->unacquiregiftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendGifPointList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendGifPointList_descriptor_;
  metadata.reflection = FriendGifPointList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonTargetContent::kIndexFieldNumber;
const int DungeonTargetContent::kTemplateIdFieldNumber;
const int DungeonTargetContent::kMaxCountFieldNumber;
const int DungeonTargetContent::kCurCountFieldNumber;
const int DungeonTargetContent::kDescriptionFieldNumber;
#endif  // !_MSC_VER

DungeonTargetContent::DungeonTargetContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonTargetContent::InitAsDefaultInstance() {
}

DungeonTargetContent::DungeonTargetContent(const DungeonTargetContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonTargetContent::SharedCtor() {
  _cached_size_ = 0;
  index_ = -1;
  templateid_ = -1;
  maxcount_ = -1;
  curcount_ = -1;
  description_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonTargetContent::~DungeonTargetContent() {
  SharedDtor();
}

void DungeonTargetContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonTargetContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonTargetContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonTargetContent_descriptor_;
}

const DungeonTargetContent& DungeonTargetContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DungeonTargetContent* DungeonTargetContent::default_instance_ = NULL;

DungeonTargetContent* DungeonTargetContent::New() const {
  return new DungeonTargetContent;
}

void DungeonTargetContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = -1;
    templateid_ = -1;
    maxcount_ = -1;
    curcount_ = -1;
    description_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonTargetContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TemplateId;
        break;
      }

      // optional int32 TemplateId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TemplateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxCount;
        break;
      }

      // optional int32 MaxCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurCount;
        break;
      }

      // optional int32 CurCount = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcount_)));
          set_has_curcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Description;
        break;
      }

      // optional int32 Description = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &description_)));
          set_has_description();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonTargetContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 TemplateId = 2 [default = -1];
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->templateid(), output);
  }

  // optional int32 MaxCount = 3 [default = -1];
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxcount(), output);
  }

  // optional int32 CurCount = 4 [default = -1];
  if (has_curcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curcount(), output);
  }

  // optional int32 Description = 5 [default = -1];
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonTargetContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 TemplateId = 2 [default = -1];
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->templateid(), target);
  }

  // optional int32 MaxCount = 3 [default = -1];
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxcount(), target);
  }

  // optional int32 CurCount = 4 [default = -1];
  if (has_curcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curcount(), target);
  }

  // optional int32 Description = 5 [default = -1];
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonTargetContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 TemplateId = 2 [default = -1];
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 MaxCount = 3 [default = -1];
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

    // optional int32 CurCount = 4 [default = -1];
    if (has_curcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcount());
    }

    // optional int32 Description = 5 [default = -1];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonTargetContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonTargetContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonTargetContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonTargetContent::MergeFrom(const DungeonTargetContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_curcount()) {
      set_curcount(from.curcount());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonTargetContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonTargetContent::CopyFrom(const DungeonTargetContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonTargetContent::IsInitialized() const {

  return true;
}

void DungeonTargetContent::Swap(DungeonTargetContent* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(templateid_, other->templateid_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(curcount_, other->curcount_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonTargetContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonTargetContent_descriptor_;
  metadata.reflection = DungeonTargetContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonTarget::kTypeIdFieldNumber;
const int DungeonTarget::kIndexFieldNumber;
const int DungeonTarget::kTargetContentFieldNumber;
const int DungeonTarget::kDescriptionFieldNumber;
#endif  // !_MSC_VER

DungeonTarget::DungeonTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonTarget::InitAsDefaultInstance() {
}

DungeonTarget::DungeonTarget(const DungeonTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonTarget::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = -1;
  index_ = -1;
  description_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonTarget::~DungeonTarget() {
  SharedDtor();
}

void DungeonTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonTarget_descriptor_;
}

const DungeonTarget& DungeonTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

DungeonTarget* DungeonTarget::default_instance_ = NULL;

DungeonTarget* DungeonTarget::New() const {
  return new DungeonTarget;
}

void DungeonTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = -1;
    index_ = -1;
    description_ = -1;
  }
  targetcontent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TypeId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetContent;
        break;
      }

      // repeated .DungeonTargetContent TargetContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetContent;
        if (input->ExpectTag(32)) goto parse_Description;
        break;
      }

      // optional int32 Description = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &description_)));
          set_has_description();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TypeId = 1 [default = -1];
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 Index = 2 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // repeated .DungeonTargetContent TargetContent = 3;
  for (int i = 0; i < this->targetcontent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetcontent(i), output);
  }

  // optional int32 Description = 4 [default = -1];
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TypeId = 1 [default = -1];
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 Index = 2 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // repeated .DungeonTargetContent TargetContent = 3;
  for (int i = 0; i < this->targetcontent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetcontent(i), target);
  }

  // optional int32 Description = 4 [default = -1];
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TypeId = 1 [default = -1];
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 Index = 2 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 Description = 4 [default = -1];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->description());
    }

  }
  // repeated .DungeonTargetContent TargetContent = 3;
  total_size += 1 * this->targetcontent_size();
  for (int i = 0; i < this->targetcontent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetcontent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonTarget::MergeFrom(const DungeonTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetcontent_.MergeFrom(from.targetcontent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonTarget::CopyFrom(const DungeonTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonTarget::IsInitialized() const {

  return true;
}

void DungeonTarget::Swap(DungeonTarget* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(index_, other->index_);
    targetcontent_.Swap(&other->targetcontent_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonTarget_descriptor_;
  metadata.reflection = DungeonTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItem::kItemIDFieldNumber;
const int MailItem::kItemCountFieldNumber;
const int MailItem::kTransitFieldNumber;
#endif  // !_MSC_VER

MailItem::MailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItem::InitAsDefaultInstance() {
}

MailItem::MailItem(const MailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  itemcount_ = -1;
  transit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItem::~MailItem() {
  SharedDtor();
}

void MailItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItem_descriptor_;
}

const MailItem& MailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MailItem* MailItem::default_instance_ = NULL;

MailItem* MailItem::New() const {
  return new MailItem;
}

void MailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = -1;
    itemcount_ = -1;
    transit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemCount;
        break;
      }

      // optional int32 ItemCount = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Transit;
        break;
      }

      // optional bool Transit = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Transit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transit_)));
          set_has_transit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemID = 1 [default = -1];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 ItemCount = 2 [default = -1];
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemcount(), output);
  }

  // optional bool Transit = 3 [default = false];
  if (has_transit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemID = 1 [default = -1];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 ItemCount = 2 [default = -1];
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemcount(), target);
  }

  // optional bool Transit = 3 [default = false];
  if (has_transit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemID = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemCount = 2 [default = -1];
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

    // optional bool Transit = 3 [default = false];
    if (has_transit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItem::MergeFrom(const MailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_transit()) {
      set_transit(from.transit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItem::CopyFrom(const MailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItem::IsInitialized() const {

  return true;
}

void MailItem::Swap(MailItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(transit_, other->transit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItem_descriptor_;
  metadata.reflection = MailItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjCreateInfo::kObjIdFieldNumber;
const int ObjCreateInfo::kPosFieldNumber;
const int ObjCreateInfo::kDirFieldNumber;
const int ObjCreateInfo::kStatusFieldNumber;
const int ObjCreateInfo::kTargetPosFieldNumber;
const int ObjCreateInfo::kObjDataFieldNumber;
#endif  // !_MSC_VER

ObjCreateInfo::ObjCreateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjCreateInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
  targetpos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

ObjCreateInfo::ObjCreateInfo(const ObjCreateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjCreateInfo::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  pos_ = NULL;
  dir_ = -1;
  status_ = -1;
  targetpos_ = NULL;
  objdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjCreateInfo::~ObjCreateInfo() {
  SharedDtor();
}

void ObjCreateInfo::SharedDtor() {
  if (objdata_ != &::google::protobuf::internal::kEmptyString) {
    delete objdata_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete targetpos_;
  }
}

void ObjCreateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjCreateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjCreateInfo_descriptor_;
}

const ObjCreateInfo& ObjCreateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ObjCreateInfo* ObjCreateInfo::default_instance_ = NULL;

ObjCreateInfo* ObjCreateInfo::New() const {
  return new ObjCreateInfo;
}

void ObjCreateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
    dir_ = -1;
    status_ = -1;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3::Clear();
    }
    if (has_objdata()) {
      if (objdata_ != &::google::protobuf::internal::kEmptyString) {
        objdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjCreateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // optional int32 Status = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TargetPos;
        break;
      }

      // optional .Vector3 TargetPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ObjData;
        break;
      }

      // optional bytes ObjData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ObjData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_objdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjCreateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional int32 Status = 4 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional .Vector3 TargetPos = 5;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetpos(), output);
  }

  // optional bytes ObjData = 6;
  if (has_objdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->objdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjCreateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional .Vector3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional int32 Status = 4 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional .Vector3 TargetPos = 5;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetpos(), target);
  }

  // optional bytes ObjData = 6;
  if (has_objdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->objdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjCreateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional .Vector3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional int32 Status = 4 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .Vector3 TargetPos = 5;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional bytes ObjData = 6;
    if (has_objdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->objdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjCreateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjCreateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjCreateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjCreateInfo::MergeFrom(const ObjCreateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3::MergeFrom(from.targetpos());
    }
    if (from.has_objdata()) {
      set_objdata(from.objdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjCreateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjCreateInfo::CopyFrom(const ObjCreateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjCreateInfo::IsInitialized() const {

  return true;
}

void ObjCreateInfo::Swap(ObjCreateInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(status_, other->status_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(objdata_, other->objdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjCreateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjCreateInfo_descriptor_;
  metadata.reflection = ObjCreateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjDeleteInfo::kObjIdFieldNumber;
const int ObjDeleteInfo::kSceneIdFieldNumber;
#endif  // !_MSC_VER

ObjDeleteInfo::ObjDeleteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjDeleteInfo::InitAsDefaultInstance() {
}

ObjDeleteInfo::ObjDeleteInfo(const ObjDeleteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjDeleteInfo::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjDeleteInfo::~ObjDeleteInfo() {
  SharedDtor();
}

void ObjDeleteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjDeleteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjDeleteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjDeleteInfo_descriptor_;
}

const ObjDeleteInfo& ObjDeleteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ObjDeleteInfo* ObjDeleteInfo::default_instance_ = NULL;

ObjDeleteInfo* ObjDeleteInfo::New() const {
  return new ObjDeleteInfo;
}

void ObjDeleteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjDeleteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional int32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjDeleteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjDeleteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional int32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjDeleteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjDeleteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjDeleteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjDeleteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjDeleteInfo::MergeFrom(const ObjDeleteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjDeleteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjDeleteInfo::CopyFrom(const ObjDeleteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjDeleteInfo::IsInitialized() const {

  return true;
}

void ObjDeleteInfo::Swap(ObjDeleteInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjDeleteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjDeleteInfo_descriptor_;
  metadata.reflection = ObjDeleteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchLimit::kMinIntegralFieldNumber;
const int MatchLimit::kMinSectionFieldNumber;
const int MatchLimit::kMinLevelFieldNumber;
const int MatchLimit::kMaxLevelFieldNumber;
const int MatchLimit::kMaxIntegralFieldNumber;
const int MatchLimit::kMaxSectionFieldNumber;
#endif  // !_MSC_VER

MatchLimit::MatchLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchLimit::InitAsDefaultInstance() {
}

MatchLimit::MatchLimit(const MatchLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchLimit::SharedCtor() {
  _cached_size_ = 0;
  minintegral_ = 0;
  minsection_ = 0;
  minlevel_ = 0;
  maxlevel_ = 0;
  maxintegral_ = 0;
  maxsection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchLimit::~MatchLimit() {
  SharedDtor();
}

void MatchLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchLimit_descriptor_;
}

const MatchLimit& MatchLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MatchLimit* MatchLimit::default_instance_ = NULL;

MatchLimit* MatchLimit::New() const {
  return new MatchLimit;
}

void MatchLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minintegral_ = 0;
    minsection_ = 0;
    minlevel_ = 0;
    maxlevel_ = 0;
    maxintegral_ = 0;
    maxsection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MinIntegral = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minintegral_)));
          set_has_minintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MinSection;
        break;
      }

      // optional int32 MinSection = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minsection_)));
          set_has_minsection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MinLevel;
        break;
      }

      // optional int32 MinLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxLevel;
        break;
      }

      // optional int32 MaxLevel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxIntegral;
        break;
      }

      // optional int32 MaxIntegral = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxintegral_)));
          set_has_maxintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxSection;
        break;
      }

      // optional int32 MaxSection = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsection_)));
          set_has_maxsection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MinIntegral = 1 [default = 0];
  if (has_minintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minintegral(), output);
  }

  // optional int32 MinSection = 2 [default = 0];
  if (has_minsection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minsection(), output);
  }

  // optional int32 MinLevel = 3 [default = 0];
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minlevel(), output);
  }

  // optional int32 MaxLevel = 4 [default = 0];
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxlevel(), output);
  }

  // optional int32 MaxIntegral = 5 [default = 0];
  if (has_maxintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxintegral(), output);
  }

  // optional int32 MaxSection = 6 [default = 0];
  if (has_maxsection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxsection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MinIntegral = 1 [default = 0];
  if (has_minintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minintegral(), target);
  }

  // optional int32 MinSection = 2 [default = 0];
  if (has_minsection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minsection(), target);
  }

  // optional int32 MinLevel = 3 [default = 0];
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minlevel(), target);
  }

  // optional int32 MaxLevel = 4 [default = 0];
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxlevel(), target);
  }

  // optional int32 MaxIntegral = 5 [default = 0];
  if (has_maxintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxintegral(), target);
  }

  // optional int32 MaxSection = 6 [default = 0];
  if (has_maxsection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxsection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MinIntegral = 1 [default = 0];
    if (has_minintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minintegral());
    }

    // optional int32 MinSection = 2 [default = 0];
    if (has_minsection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minsection());
    }

    // optional int32 MinLevel = 3 [default = 0];
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional int32 MaxLevel = 4 [default = 0];
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 MaxIntegral = 5 [default = 0];
    if (has_maxintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxintegral());
    }

    // optional int32 MaxSection = 6 [default = 0];
    if (has_maxsection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchLimit::MergeFrom(const MatchLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minintegral()) {
      set_minintegral(from.minintegral());
    }
    if (from.has_minsection()) {
      set_minsection(from.minsection());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_maxintegral()) {
      set_maxintegral(from.maxintegral());
    }
    if (from.has_maxsection()) {
      set_maxsection(from.maxsection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchLimit::CopyFrom(const MatchLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchLimit::IsInitialized() const {

  return true;
}

void MatchLimit::Swap(MatchLimit* other) {
  if (other != this) {
    std::swap(minintegral_, other->minintegral_);
    std::swap(minsection_, other->minsection_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(maxintegral_, other->maxintegral_);
    std::swap(maxsection_, other->maxsection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchLimit_descriptor_;
  metadata.reflection = MatchLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRankInfo::kIntegralFieldNumber;
const int MatchRankInfo::kSectionFieldNumber;
#endif  // !_MSC_VER

MatchRankInfo::MatchRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRankInfo::InitAsDefaultInstance() {
}

MatchRankInfo::MatchRankInfo(const MatchRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRankInfo::SharedCtor() {
  _cached_size_ = 0;
  integral_ = 0;
  section_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRankInfo::~MatchRankInfo() {
  SharedDtor();
}

void MatchRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRankInfo_descriptor_;
}

const MatchRankInfo& MatchRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MatchRankInfo* MatchRankInfo::default_instance_ = NULL;

MatchRankInfo* MatchRankInfo::New() const {
  return new MatchRankInfo;
}

void MatchRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    integral_ = 0;
    section_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Integral = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Section;
        break;
      }

      // optional int32 Section = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Section:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &section_)));
          set_has_section();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Integral = 1 [default = 0];
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->integral(), output);
  }

  // optional int32 Section = 2 [default = 0];
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->section(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Integral = 1 [default = 0];
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->integral(), target);
  }

  // optional int32 Section = 2 [default = 0];
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->section(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Integral = 1 [default = 0];
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 Section = 2 [default = 0];
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->section());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRankInfo::MergeFrom(const MatchRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_section()) {
      set_section(from.section());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRankInfo::CopyFrom(const MatchRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRankInfo::IsInitialized() const {

  return true;
}

void MatchRankInfo::Swap(MatchRankInfo* other) {
  if (other != this) {
    std::swap(integral_, other->integral_);
    std::swap(section_, other->section_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRankInfo_descriptor_;
  metadata.reflection = MatchRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchTargetInfo::kDungeonConfigIdFieldNumber;
const int MatchTargetInfo::kSceneConfigIdFieldNumber;
#endif  // !_MSC_VER

MatchTargetInfo::MatchTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchTargetInfo::InitAsDefaultInstance() {
}

MatchTargetInfo::MatchTargetInfo(const MatchTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  dungeonconfigid_ = -1;
  sceneconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchTargetInfo::~MatchTargetInfo() {
  SharedDtor();
}

void MatchTargetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTargetInfo_descriptor_;
}

const MatchTargetInfo& MatchTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

MatchTargetInfo* MatchTargetInfo::default_instance_ = NULL;

MatchTargetInfo* MatchTargetInfo::New() const {
  return new MatchTargetInfo;
}

void MatchTargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeonconfigid_ = -1;
    sceneconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DungeonConfigId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneConfigId;
        break;
      }

      // optional int32 SceneConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneconfigid_)));
          set_has_sceneconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 DungeonConfigId = 1 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeonconfigid(), output);
  }

  // optional int32 SceneConfigId = 2 [default = -1];
  if (has_sceneconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 DungeonConfigId = 1 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeonconfigid(), target);
  }

  // optional int32 SceneConfigId = 2 [default = -1];
  if (has_sceneconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DungeonConfigId = 1 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonconfigid());
    }

    // optional int32 SceneConfigId = 2 [default = -1];
    if (has_sceneconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchTargetInfo::MergeFrom(const MatchTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
    if (from.has_sceneconfigid()) {
      set_sceneconfigid(from.sceneconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTargetInfo::CopyFrom(const MatchTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTargetInfo::IsInitialized() const {

  return true;
}

void MatchTargetInfo::Swap(MatchTargetInfo* other) {
  if (other != this) {
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(sceneconfigid_, other->sceneconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchTargetInfo_descriptor_;
  metadata.reflection = MatchTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityTime::kBeginFieldNumber;
const int ActivityTime::kEndFieldNumber;
const int ActivityTime::kIdFieldNumber;
#endif  // !_MSC_VER

ActivityTime::ActivityTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityTime::InitAsDefaultInstance() {
}

ActivityTime::ActivityTime(const ActivityTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityTime::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(-1);
  end_ = GOOGLE_LONGLONG(-1);
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityTime::~ActivityTime() {
  SharedDtor();
}

void ActivityTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityTime_descriptor_;
}

const ActivityTime& ActivityTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ActivityTime* ActivityTime::default_instance_ = NULL;

ActivityTime* ActivityTime::New() const {
  return new ActivityTime;
}

void ActivityTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_LONGLONG(-1);
    end_ = GOOGLE_LONGLONG(-1);
    id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Begin = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_End;
        break;
      }

      // optional int64 End = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_End:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Id;
        break;
      }

      // optional int32 Id = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Begin = 1 [default = -1];
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional int64 End = 2 [default = -1];
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // optional int32 Id = 3 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Begin = 1 [default = -1];
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional int64 End = 2 [default = -1];
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // optional int32 Id = 3 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Begin = 1 [default = -1];
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin());
    }

    // optional int64 End = 2 [default = -1];
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }

    // optional int32 Id = 3 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityTime::MergeFrom(const ActivityTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityTime::CopyFrom(const ActivityTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityTime::IsInitialized() const {

  return true;
}

void ActivityTime::Swap(ActivityTime* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityTime_descriptor_;
  metadata.reflection = ActivityTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionInfo::kIndexFieldNumber;
const int ProfessionInfo::kSkillListFieldNumber;
#endif  // !_MSC_VER

ProfessionInfo::ProfessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfessionInfo::InitAsDefaultInstance() {
}

ProfessionInfo::ProfessionInfo(const ProfessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfessionInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionInfo::~ProfessionInfo() {
  SharedDtor();
}

void ProfessionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionInfo_descriptor_;
}

const ProfessionInfo& ProfessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ProfessionInfo* ProfessionInfo::default_instance_ = NULL;

ProfessionInfo* ProfessionInfo::New() const {
  return new ProfessionInfo;
}

void ProfessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = -1;
  }
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillList;
        break;
      }

      // repeated int32 SkillList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated int32 SkillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skilllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated int32 SkillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skilllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated int32 SkillList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionInfo::MergeFrom(const ProfessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionInfo::CopyFrom(const ProfessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionInfo::IsInitialized() const {

  return true;
}

void ProfessionInfo::Swap(ProfessionInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionInfo_descriptor_;
  metadata.reflection = ProfessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecLoginReward::kIndexFieldNumber;
const int SpecLoginReward::kGetFieldNumber;
const int SpecLoginReward::kSetTimeFieldNumber;
#endif  // !_MSC_VER

SpecLoginReward::SpecLoginReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecLoginReward::InitAsDefaultInstance() {
}

SpecLoginReward::SpecLoginReward(const SpecLoginReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecLoginReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = -1;
  get_ = -1;
  settime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecLoginReward::~SpecLoginReward() {
  SharedDtor();
}

void SpecLoginReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecLoginReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecLoginReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecLoginReward_descriptor_;
}

const SpecLoginReward& SpecLoginReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SpecLoginReward* SpecLoginReward::default_instance_ = NULL;

SpecLoginReward* SpecLoginReward::New() const {
  return new SpecLoginReward;
}

void SpecLoginReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = -1;
    get_ = -1;
    settime_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecLoginReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Get;
        break;
      }

      // optional int32 Get = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SetTime;
        break;
      }

      // optional int64 SetTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settime_)));
          set_has_settime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecLoginReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 Get = 2 [default = -1];
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get(), output);
  }

  // optional int64 SetTime = 3 [default = -1];
  if (has_settime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->settime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecLoginReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Index = 1 [default = -1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 Get = 2 [default = -1];
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get(), target);
  }

  // optional int64 SetTime = 3 [default = -1];
  if (has_settime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->settime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecLoginReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = -1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 Get = 2 [default = -1];
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get());
    }

    // optional int64 SetTime = 3 [default = -1];
    if (has_settime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->settime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecLoginReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecLoginReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecLoginReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecLoginReward::MergeFrom(const SpecLoginReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
    if (from.has_settime()) {
      set_settime(from.settime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecLoginReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecLoginReward::CopyFrom(const SpecLoginReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecLoginReward::IsInitialized() const {

  return true;
}

void SpecLoginReward::Swap(SpecLoginReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(get_, other->get_);
    std::swap(settime_, other->settime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecLoginReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecLoginReward_descriptor_;
  metadata.reflection = SpecLoginReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecLoginInfo::kIdFieldNumber;
const int SpecLoginInfo::kBeginTimeFieldNumber;
const int SpecLoginInfo::kEndTimeFieldNumber;
const int SpecLoginInfo::kRewardInfoFieldNumber;
const int SpecLoginInfo::kStateFieldNumber;
#endif  // !_MSC_VER

SpecLoginInfo::SpecLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecLoginInfo::InitAsDefaultInstance() {
}

SpecLoginInfo::SpecLoginInfo(const SpecLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  begintime_ = GOOGLE_LONGLONG(-1);
  endtime_ = GOOGLE_LONGLONG(-1);
  state_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecLoginInfo::~SpecLoginInfo() {
  SharedDtor();
}

void SpecLoginInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecLoginInfo_descriptor_;
}

const SpecLoginInfo& SpecLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SpecLoginInfo* SpecLoginInfo::default_instance_ = NULL;

SpecLoginInfo* SpecLoginInfo::New() const {
  return new SpecLoginInfo;
}

void SpecLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    begintime_ = GOOGLE_LONGLONG(-1);
    endtime_ = GOOGLE_LONGLONG(-1);
    state_ = -1;
  }
  rewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BeginTime;
        break;
      }

      // optional int64 BeginTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardInfo;
        break;
      }

      // repeated .SpecLoginReward RewardInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RewardInfo;
        if (input->ExpectTag(40)) goto parse_State;
        break;
      }

      // optional int32 State = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 BeginTime = 2 [default = -1];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 EndTime = 3 [default = -1];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // repeated .SpecLoginReward RewardInfo = 4;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardinfo(i), output);
  }

  // optional int32 State = 5 [default = -1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 BeginTime = 2 [default = -1];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 EndTime = 3 [default = -1];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // repeated .SpecLoginReward RewardInfo = 4;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardinfo(i), target);
  }

  // optional int32 State = 5 [default = -1];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 BeginTime = 2 [default = -1];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 EndTime = 3 [default = -1];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 State = 5 [default = -1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .SpecLoginReward RewardInfo = 4;
  total_size += 1 * this->rewardinfo_size();
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecLoginInfo::MergeFrom(const SpecLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecLoginInfo::CopyFrom(const SpecLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecLoginInfo::IsInitialized() const {

  return true;
}

void SpecLoginInfo::Swap(SpecLoginInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    rewardinfo_.Swap(&other->rewardinfo_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecLoginInfo_descriptor_;
  metadata.reflection = SpecLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactsChatMsg::kRoleIdFieldNumber;
const int ContactsChatMsg::kHasNewMsgFieldNumber;
const int ContactsChatMsg::kCharInfoListFieldNumber;
#endif  // !_MSC_VER

ContactsChatMsg::ContactsChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactsChatMsg::InitAsDefaultInstance() {
}

ContactsChatMsg::ContactsChatMsg(const ContactsChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactsChatMsg::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  hasnewmsg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactsChatMsg::~ContactsChatMsg() {
  SharedDtor();
}

void ContactsChatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactsChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactsChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactsChatMsg_descriptor_;
}

const ContactsChatMsg& ContactsChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ContactsChatMsg* ContactsChatMsg::default_instance_ = NULL;

ContactsChatMsg* ContactsChatMsg::New() const {
  return new ContactsChatMsg;
}

void ContactsChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    hasnewmsg_ = false;
  }
  charinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactsChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HasNewMsg;
        break;
      }

      // optional bool HasNewMsg = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasNewMsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnewmsg_)));
          set_has_hasnewmsg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CharInfoList;
        break;
      }

      // repeated .ChatInfo CharInfoList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CharInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CharInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactsChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional bool HasNewMsg = 2 [default = false];
  if (has_hasnewmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasnewmsg(), output);
  }

  // repeated .ChatInfo CharInfoList = 3;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->charinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactsChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional bool HasNewMsg = 2 [default = false];
  if (has_hasnewmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasnewmsg(), target);
  }

  // repeated .ChatInfo CharInfoList = 3;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->charinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactsChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional bool HasNewMsg = 2 [default = false];
    if (has_hasnewmsg()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ChatInfo CharInfoList = 3;
  total_size += 1 * this->charinfolist_size();
  for (int i = 0; i < this->charinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactsChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactsChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactsChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactsChatMsg::MergeFrom(const ContactsChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  charinfolist_.MergeFrom(from.charinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_hasnewmsg()) {
      set_hasnewmsg(from.hasnewmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactsChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactsChatMsg::CopyFrom(const ContactsChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactsChatMsg::IsInitialized() const {

  return true;
}

void ContactsChatMsg::Swap(ContactsChatMsg* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(hasnewmsg_, other->hasnewmsg_);
    charinfolist_.Swap(&other->charinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactsChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactsChatMsg_descriptor_;
  metadata.reflection = ContactsChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3Int::kXFieldNumber;
const int Vector3Int::kZFieldNumber;
#endif  // !_MSC_VER

Vector3Int::Vector3Int()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3Int::InitAsDefaultInstance() {
}

Vector3Int::Vector3Int(const Vector3Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3Int::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  z_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3Int::~Vector3Int() {
  SharedDtor();
}

void Vector3Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3Int_descriptor_;
}

const Vector3Int& Vector3Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Vector3Int* Vector3Int::default_instance_ = NULL;

Vector3Int* Vector3Int::New() const {
  return new Vector3Int;
}

void Vector3Int::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    z_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Z;
        break;
      }

      // optional int32 Z = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 X = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Z = 2 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 X = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Z = 2 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Z = 2 [default = -1];
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3Int::MergeFrom(const Vector3Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Int::CopyFrom(const Vector3Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Int::IsInitialized() const {

  return true;
}

void Vector3Int::Swap(Vector3Int* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3Int_descriptor_;
  metadata.reflection = Vector3Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendString::kTransIDFieldNumber;
const int AppendString::kKeyFieldNumber;
const int AppendString::kStringListFieldNumber;
#endif  // !_MSC_VER

AppendString::AppendString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendString::InitAsDefaultInstance() {
}

AppendString::AppendString(const AppendString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendString::SharedCtor() {
  _cached_size_ = 0;
  transid_ = -1;
  key_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendString::~AppendString() {
  SharedDtor();
}

void AppendString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendString_descriptor_;
}

const AppendString& AppendString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AppendString* AppendString::default_instance_ = NULL;

AppendString* AppendString::New() const {
  return new AppendString;
}

void AppendString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transid_ = -1;
    key_ = -1;
  }
  stringlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TransID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }

      // optional int32 Key = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StringList;
        break;
      }

      // repeated string StringList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StringList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stringlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringlist(this->stringlist_size() - 1).data(),
            this->stringlist(this->stringlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StringList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TransID = 1 [default = -1];
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transid(), output);
  }

  // optional int32 Key = 2 [default = -1];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // repeated string StringList = 3;
  for (int i = 0; i < this->stringlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stringlist(i).data(), this->stringlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TransID = 1 [default = -1];
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transid(), target);
  }

  // optional int32 Key = 2 [default = -1];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // repeated string StringList = 3;
  for (int i = 0; i < this->stringlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringlist(i).data(), this->stringlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stringlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TransID = 1 [default = -1];
    if (has_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }

    // optional int32 Key = 2 [default = -1];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  // repeated string StringList = 3;
  total_size += 1 * this->stringlist_size();
  for (int i = 0; i < this->stringlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stringlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendString::MergeFrom(const AppendString& from) {
  GOOGLE_CHECK_NE(&from, this);
  stringlist_.MergeFrom(from.stringlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendString::CopyFrom(const AppendString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendString::IsInitialized() const {

  return true;
}

void AppendString::Swap(AppendString* other) {
  if (other != this) {
    std::swap(transid_, other->transid_);
    std::swap(key_, other->key_);
    stringlist_.Swap(&other->stringlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendString_descriptor_;
  metadata.reflection = AppendString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendStringList::kStringAppendListFieldNumber;
#endif  // !_MSC_VER

AppendStringList::AppendStringList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendStringList::InitAsDefaultInstance() {
}

AppendStringList::AppendStringList(const AppendStringList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendStringList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendStringList::~AppendStringList() {
  SharedDtor();
}

void AppendStringList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendStringList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendStringList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendStringList_descriptor_;
}

const AppendStringList& AppendStringList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

AppendStringList* AppendStringList::default_instance_ = NULL;

AppendStringList* AppendStringList::New() const {
  return new AppendStringList;
}

void AppendStringList::Clear() {
  stringappendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendStringList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AppendString StringAppendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StringAppendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stringappendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_StringAppendList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendStringList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AppendString StringAppendList = 1;
  for (int i = 0; i < this->stringappendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stringappendlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendStringList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AppendString StringAppendList = 1;
  for (int i = 0; i < this->stringappendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stringappendlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendStringList::ByteSize() const {
  int total_size = 0;

  // repeated .AppendString StringAppendList = 1;
  total_size += 1 * this->stringappendlist_size();
  for (int i = 0; i < this->stringappendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stringappendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendStringList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendStringList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendStringList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendStringList::MergeFrom(const AppendStringList& from) {
  GOOGLE_CHECK_NE(&from, this);
  stringappendlist_.MergeFrom(from.stringappendlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendStringList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendStringList::CopyFrom(const AppendStringList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendStringList::IsInitialized() const {

  return true;
}

void AppendStringList::Swap(AppendStringList* other) {
  if (other != this) {
    stringappendlist_.Swap(&other->stringappendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendStringList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendStringList_descriptor_;
  metadata.reflection = AppendStringList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarBattlePlayerInfo::kPlayerguidFieldNumber;
const int StarBattlePlayerInfo::kPlayernameFieldNumber;
const int StarBattlePlayerInfo::kLevelFieldNumber;
const int StarBattlePlayerInfo::kRoleIDFieldNumber;
#endif  // !_MSC_VER

StarBattlePlayerInfo::StarBattlePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarBattlePlayerInfo::InitAsDefaultInstance() {
}

StarBattlePlayerInfo::StarBattlePlayerInfo(const StarBattlePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarBattlePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = -1;
  roleid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarBattlePlayerInfo::~StarBattlePlayerInfo() {
  SharedDtor();
}

void StarBattlePlayerInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void StarBattlePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarBattlePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarBattlePlayerInfo_descriptor_;
}

const StarBattlePlayerInfo& StarBattlePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

StarBattlePlayerInfo* StarBattlePlayerInfo::default_instance_ = NULL;

StarBattlePlayerInfo* StarBattlePlayerInfo::New() const {
  return new StarBattlePlayerInfo;
}

void StarBattlePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    level_ = -1;
    roleid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarBattlePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Playerguid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Playername;
        break;
      }

      // optional string Playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RoleID;
        break;
      }

      // optional int32 RoleID = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarBattlePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Playerguid = 1 [default = 0];
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerguid(), output);
  }

  // optional string Playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 RoleID = 5 [default = -1];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarBattlePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Playerguid = 1 [default = 0];
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerguid(), target);
  }

  // optional string Playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 Level = 3 [default = -1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 RoleID = 5 [default = -1];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarBattlePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Playerguid = 1 [default = 0];
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

    // optional string Playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 Level = 3 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 RoleID = 5 [default = -1];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarBattlePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarBattlePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarBattlePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarBattlePlayerInfo::MergeFrom(const StarBattlePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarBattlePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarBattlePlayerInfo::CopyFrom(const StarBattlePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarBattlePlayerInfo::IsInitialized() const {

  return true;
}

void StarBattlePlayerInfo::Swap(StarBattlePlayerInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(level_, other->level_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarBattlePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarBattlePlayerInfo_descriptor_;
  metadata.reflection = StarBattlePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarBattleInfo::kServerFastFieldNumber;
const int StarBattleInfo::kServerFirstFieldNumber;
const int StarBattleInfo::kServerWeekFastFieldNumber;
const int StarBattleInfo::kIdFieldNumber;
const int StarBattleInfo::kNpcidFieldNumber;
#endif  // !_MSC_VER

StarBattleInfo::StarBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarBattleInfo::InitAsDefaultInstance() {
  serverfast_ = const_cast< ::StarBattleTeamInfo*>(&::StarBattleTeamInfo::default_instance());
  serverfirst_ = const_cast< ::StarBattleTeamInfo*>(&::StarBattleTeamInfo::default_instance());
  serverweekfast_ = const_cast< ::StarBattleTeamInfo*>(&::StarBattleTeamInfo::default_instance());
}

StarBattleInfo::StarBattleInfo(const StarBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  serverfast_ = NULL;
  serverfirst_ = NULL;
  serverweekfast_ = NULL;
  id_ = -1;
  npcid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarBattleInfo::~StarBattleInfo() {
  SharedDtor();
}

void StarBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete serverfast_;
    delete serverfirst_;
    delete serverweekfast_;
  }
}

void StarBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarBattleInfo_descriptor_;
}

const StarBattleInfo& StarBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

StarBattleInfo* StarBattleInfo::default_instance_ = NULL;

StarBattleInfo* StarBattleInfo::New() const {
  return new StarBattleInfo;
}

void StarBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverfast()) {
      if (serverfast_ != NULL) serverfast_->::StarBattleTeamInfo::Clear();
    }
    if (has_serverfirst()) {
      if (serverfirst_ != NULL) serverfirst_->::StarBattleTeamInfo::Clear();
    }
    if (has_serverweekfast()) {
      if (serverweekfast_ != NULL) serverweekfast_->::StarBattleTeamInfo::Clear();
    }
    id_ = -1;
    npcid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .StarBattleTeamInfo ServerFast = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverfast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ServerFirst;
        break;
      }

      // optional .StarBattleTeamInfo ServerFirst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerFirst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverfirst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ServerWeekFast;
        break;
      }

      // optional .StarBattleTeamInfo ServerWeekFast = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerWeekFast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverweekfast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Id;
        break;
      }

      // optional int32 Id = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Npcid;
        break;
      }

      // optional int32 Npcid = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .StarBattleTeamInfo ServerFast = 3;
  if (has_serverfast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->serverfast(), output);
  }

  // optional .StarBattleTeamInfo ServerFirst = 4;
  if (has_serverfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->serverfirst(), output);
  }

  // optional .StarBattleTeamInfo ServerWeekFast = 5;
  if (has_serverweekfast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->serverweekfast(), output);
  }

  // optional int32 Id = 6 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  // optional int32 Npcid = 7 [default = -1];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .StarBattleTeamInfo ServerFast = 3;
  if (has_serverfast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->serverfast(), target);
  }

  // optional .StarBattleTeamInfo ServerFirst = 4;
  if (has_serverfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->serverfirst(), target);
  }

  // optional .StarBattleTeamInfo ServerWeekFast = 5;
  if (has_serverweekfast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->serverweekfast(), target);
  }

  // optional int32 Id = 6 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  // optional int32 Npcid = 7 [default = -1];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .StarBattleTeamInfo ServerFast = 3;
    if (has_serverfast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverfast());
    }

    // optional .StarBattleTeamInfo ServerFirst = 4;
    if (has_serverfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverfirst());
    }

    // optional .StarBattleTeamInfo ServerWeekFast = 5;
    if (has_serverweekfast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverweekfast());
    }

    // optional int32 Id = 6 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Npcid = 7 [default = -1];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarBattleInfo::MergeFrom(const StarBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverfast()) {
      mutable_serverfast()->::StarBattleTeamInfo::MergeFrom(from.serverfast());
    }
    if (from.has_serverfirst()) {
      mutable_serverfirst()->::StarBattleTeamInfo::MergeFrom(from.serverfirst());
    }
    if (from.has_serverweekfast()) {
      mutable_serverweekfast()->::StarBattleTeamInfo::MergeFrom(from.serverweekfast());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarBattleInfo::CopyFrom(const StarBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarBattleInfo::IsInitialized() const {

  return true;
}

void StarBattleInfo::Swap(StarBattleInfo* other) {
  if (other != this) {
    std::swap(serverfast_, other->serverfast_);
    std::swap(serverfirst_, other->serverfirst_);
    std::swap(serverweekfast_, other->serverweekfast_);
    std::swap(id_, other->id_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarBattleInfo_descriptor_;
  metadata.reflection = StarBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarBattleTeamInfo::kPassTimeFieldNumber;
const int StarBattleTeamInfo::kPassUseTimeFieldNumber;
const int StarBattleTeamInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

StarBattleTeamInfo::StarBattleTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarBattleTeamInfo::InitAsDefaultInstance() {
}

StarBattleTeamInfo::StarBattleTeamInfo(const StarBattleTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarBattleTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  passtime_ = GOOGLE_LONGLONG(-1);
  passusetime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarBattleTeamInfo::~StarBattleTeamInfo() {
  SharedDtor();
}

void StarBattleTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarBattleTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarBattleTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarBattleTeamInfo_descriptor_;
}

const StarBattleTeamInfo& StarBattleTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

StarBattleTeamInfo* StarBattleTeamInfo::default_instance_ = NULL;

StarBattleTeamInfo* StarBattleTeamInfo::New() const {
  return new StarBattleTeamInfo;
}

void StarBattleTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    passtime_ = GOOGLE_LONGLONG(-1);
    passusetime_ = -1;
  }
  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarBattleTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 PassTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PassUseTime;
        break;
      }

      // optional int32 PassUseTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassUseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passusetime_)));
          set_has_passusetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MemberInfo;
        break;
      }

      // repeated .StarBattlePlayerInfo MemberInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MemberInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarBattleTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 PassTime = 1 [default = -1];
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->passtime(), output);
  }

  // optional int32 PassUseTime = 2 [default = -1];
  if (has_passusetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passusetime(), output);
  }

  // repeated .StarBattlePlayerInfo MemberInfo = 3;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarBattleTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 PassTime = 1 [default = -1];
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->passtime(), target);
  }

  // optional int32 PassUseTime = 2 [default = -1];
  if (has_passusetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passusetime(), target);
  }

  // repeated .StarBattlePlayerInfo MemberInfo = 3;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->memberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarBattleTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 PassTime = 1 [default = -1];
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->passtime());
    }

    // optional int32 PassUseTime = 2 [default = -1];
    if (has_passusetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passusetime());
    }

  }
  // repeated .StarBattlePlayerInfo MemberInfo = 3;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarBattleTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarBattleTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarBattleTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarBattleTeamInfo::MergeFrom(const StarBattleTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_passusetime()) {
      set_passusetime(from.passusetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarBattleTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarBattleTeamInfo::CopyFrom(const StarBattleTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarBattleTeamInfo::IsInitialized() const {

  return true;
}

void StarBattleTeamInfo::Swap(StarBattleTeamInfo* other) {
  if (other != this) {
    std::swap(passtime_, other->passtime_);
    std::swap(passusetime_, other->passusetime_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarBattleTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarBattleTeamInfo_descriptor_;
  metadata.reflection = StarBattleTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjPosInfo::kObjIdFieldNumber;
const int ObjPosInfo::kIdFieldNumber;
const int ObjPosInfo::kXFieldNumber;
const int ObjPosInfo::kZFieldNumber;
#endif  // !_MSC_VER

ObjPosInfo::ObjPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjPosInfo::InitAsDefaultInstance() {
}

ObjPosInfo::ObjPosInfo(const ObjPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjPosInfo::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  id_ = -1;
  x_ = -1;
  z_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjPosInfo::~ObjPosInfo() {
  SharedDtor();
}

void ObjPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjPosInfo_descriptor_;
}

const ObjPosInfo& ObjPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

ObjPosInfo* ObjPosInfo::default_instance_ = NULL;

ObjPosInfo* ObjPosInfo::New() const {
  return new ObjPosInfo;
}

void ObjPosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    id_ = -1;
    x_ = -1;
    z_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int32 Id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }

      // optional int32 X = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Z;
        break;
      }

      // optional int32 Z = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional int32 Id = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 X = 3 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 Z = 4 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional int32 Id = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 X = 3 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 Z = 4 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 Id = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 X = 3 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Z = 4 [default = -1];
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjPosInfo::MergeFrom(const ObjPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjPosInfo::CopyFrom(const ObjPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjPosInfo::IsInitialized() const {

  return true;
}

void ObjPosInfo::Swap(ObjPosInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjPosInfo_descriptor_;
  metadata.reflection = ObjPosInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
