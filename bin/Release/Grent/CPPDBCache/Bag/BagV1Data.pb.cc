// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BagV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BagV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BagItemDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemDataV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItemDBV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemDBV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BagV1Data_2eproto() {
  protobuf_AddDesc_BagV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BagV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  BagItemDataV1_descriptor_ = file->message_type(0);
  static const int BagItemDataV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDataV1, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDataV1, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDataV1, overlaycount_),
  };
  BagItemDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemDataV1_descriptor_,
      BagItemDataV1::default_instance_,
      BagItemDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemDataV1));
  BagItemDBV1_descriptor_ = file->message_type(1);
  static const int BagItemDBV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDBV1, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDBV1, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDBV1, overlaycount_),
  };
  BagItemDBV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemDBV1_descriptor_,
      BagItemDBV1::default_instance_,
      BagItemDBV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDBV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemDBV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemDBV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BagV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemDataV1_descriptor_, &BagItemDataV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemDBV1_descriptor_, &BagItemDBV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BagV1Data_2eproto() {
  delete BagItemDataV1::default_instance_;
  delete BagItemDataV1_reflection_;
  delete BagItemDBV1::default_instance_;
  delete BagItemDBV1_reflection_;
}

void protobuf_AddDesc_BagV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BagV1Data.proto\032\022PublicStruct.proto\"P\n"
    "\rBagItemDataV1\022\020\n\004Guid\030\001 \001(\021:\002-1\022\023\n\004Lock"
    "\030\002 \001(\010:\005false\022\030\n\014OverlayCount\030\003 \001(\021:\002-1\""
    "N\n\013BagItemDBV1\022\020\n\004Guid\030\001 \001(\021:\002-1\022\023\n\004Lock"
    "\030\002 \001(\010:\005false\022\030\n\014OverlayCount\030\003 \001(\021:\002-1", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BagV1Data.proto", &protobuf_RegisterTypes);
  BagItemDataV1::default_instance_ = new BagItemDataV1();
  BagItemDBV1::default_instance_ = new BagItemDBV1();
  BagItemDataV1::default_instance_->InitAsDefaultInstance();
  BagItemDBV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BagV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BagV1Data_2eproto {
  StaticDescriptorInitializer_BagV1Data_2eproto() {
    protobuf_AddDesc_BagV1Data_2eproto();
  }
} static_descriptor_initializer_BagV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BagItemDataV1::kGuidFieldNumber;
const int BagItemDataV1::kLockFieldNumber;
const int BagItemDataV1::kOverlayCountFieldNumber;
#endif  // !_MSC_VER

BagItemDataV1::BagItemDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemDataV1::InitAsDefaultInstance() {
}

BagItemDataV1::BagItemDataV1(const BagItemDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemDataV1::SharedCtor() {
  _cached_size_ = 0;
  guid_ = -1;
  lock_ = false;
  overlaycount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemDataV1::~BagItemDataV1() {
  SharedDtor();
}

void BagItemDataV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemDataV1_descriptor_;
}

const BagItemDataV1& BagItemDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagV1Data_2eproto();
  return *default_instance_;
}

BagItemDataV1* BagItemDataV1::default_instance_ = NULL;

BagItemDataV1* BagItemDataV1::New() const {
  return new BagItemDataV1;
}

void BagItemDataV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = -1;
    lock_ = false;
    overlaycount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Guid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Lock;
        break;
      }

      // optional bool Lock = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OverlayCount;
        break;
      }

      // optional sint32 OverlayCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OverlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &overlaycount_)));
          set_has_overlaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Guid = 1 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->guid(), output);
  }

  // optional bool Lock = 2 [default = false];
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }

  // optional sint32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->overlaycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Guid = 1 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->guid(), target);
  }

  // optional bool Lock = 2 [default = false];
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }

  // optional sint32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->overlaycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemDataV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Guid = 1 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guid());
    }

    // optional bool Lock = 2 [default = false];
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // optional sint32 OverlayCount = 3 [default = -1];
    if (has_overlaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->overlaycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemDataV1::MergeFrom(const BagItemDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_overlaycount()) {
      set_overlaycount(from.overlaycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemDataV1::CopyFrom(const BagItemDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemDataV1::IsInitialized() const {

  return true;
}

void BagItemDataV1::Swap(BagItemDataV1* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(lock_, other->lock_);
    std::swap(overlaycount_, other->overlaycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemDataV1_descriptor_;
  metadata.reflection = BagItemDataV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItemDBV1::kGuidFieldNumber;
const int BagItemDBV1::kLockFieldNumber;
const int BagItemDBV1::kOverlayCountFieldNumber;
#endif  // !_MSC_VER

BagItemDBV1::BagItemDBV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemDBV1::InitAsDefaultInstance() {
}

BagItemDBV1::BagItemDBV1(const BagItemDBV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemDBV1::SharedCtor() {
  _cached_size_ = 0;
  guid_ = -1;
  lock_ = false;
  overlaycount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemDBV1::~BagItemDBV1() {
  SharedDtor();
}

void BagItemDBV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemDBV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemDBV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemDBV1_descriptor_;
}

const BagItemDBV1& BagItemDBV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagV1Data_2eproto();
  return *default_instance_;
}

BagItemDBV1* BagItemDBV1::default_instance_ = NULL;

BagItemDBV1* BagItemDBV1::New() const {
  return new BagItemDBV1;
}

void BagItemDBV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = -1;
    lock_ = false;
    overlaycount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemDBV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Guid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Lock;
        break;
      }

      // optional bool Lock = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OverlayCount;
        break;
      }

      // optional sint32 OverlayCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OverlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &overlaycount_)));
          set_has_overlaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemDBV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Guid = 1 [default = -1];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->guid(), output);
  }

  // optional bool Lock = 2 [default = false];
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }

  // optional sint32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->overlaycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemDBV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Guid = 1 [default = -1];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->guid(), target);
  }

  // optional bool Lock = 2 [default = false];
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }

  // optional sint32 OverlayCount = 3 [default = -1];
  if (has_overlaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->overlaycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemDBV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Guid = 1 [default = -1];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guid());
    }

    // optional bool Lock = 2 [default = false];
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // optional sint32 OverlayCount = 3 [default = -1];
    if (has_overlaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->overlaycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemDBV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemDBV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemDBV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemDBV1::MergeFrom(const BagItemDBV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_overlaycount()) {
      set_overlaycount(from.overlaycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemDBV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemDBV1::CopyFrom(const BagItemDBV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemDBV1::IsInitialized() const {

  return true;
}

void BagItemDBV1::Swap(BagItemDBV1* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(lock_, other->lock_);
    std::swap(overlaycount_, other->overlaycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemDBV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemDBV1_descriptor_;
  metadata.reflection = BagItemDBV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
