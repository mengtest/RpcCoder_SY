// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldServerRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldServerRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WorldServerRpcChangeSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcChangeSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcChangeSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcChangeSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcEnterSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldServerRpcEnterSceneReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldServerRpc_2eproto() {
  protobuf_AddDesc_WorldServerRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldServerRpc.proto");
  GOOGLE_CHECK(file != NULL);
  WorldServerRpcChangeSceneAsk_descriptor_ = file->message_type(0);
  static const int WorldServerRpcChangeSceneAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, targetsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, memid_),
  };
  WorldServerRpcChangeSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcChangeSceneAsk_descriptor_,
      WorldServerRpcChangeSceneAsk::default_instance_,
      WorldServerRpcChangeSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcChangeSceneAsk));
  WorldServerRpcChangeSceneReply_descriptor_ = file->message_type(1);
  static const int WorldServerRpcChangeSceneReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, targetsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, memid_),
  };
  WorldServerRpcChangeSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcChangeSceneReply_descriptor_,
      WorldServerRpcChangeSceneReply::default_instance_,
      WorldServerRpcChangeSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcChangeSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcChangeSceneReply));
  WorldServerRpcEnterSceneAsk_descriptor_ = file->message_type(2);
  static const int WorldServerRpcEnterSceneAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, sceneid_),
  };
  WorldServerRpcEnterSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcEnterSceneAsk_descriptor_,
      WorldServerRpcEnterSceneAsk::default_instance_,
      WorldServerRpcEnterSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcEnterSceneAsk));
  WorldServerRpcEnterSceneReply_descriptor_ = file->message_type(3);
  static const int WorldServerRpcEnterSceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, result_),
  };
  WorldServerRpcEnterSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldServerRpcEnterSceneReply_descriptor_,
      WorldServerRpcEnterSceneReply::default_instance_,
      WorldServerRpcEnterSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldServerRpcEnterSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldServerRpcEnterSceneReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldServerRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcChangeSceneAsk_descriptor_, &WorldServerRpcChangeSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcChangeSceneReply_descriptor_, &WorldServerRpcChangeSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcEnterSceneAsk_descriptor_, &WorldServerRpcEnterSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldServerRpcEnterSceneReply_descriptor_, &WorldServerRpcEnterSceneReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldServerRpc_2eproto() {
  delete WorldServerRpcChangeSceneAsk::default_instance_;
  delete WorldServerRpcChangeSceneAsk_reflection_;
  delete WorldServerRpcChangeSceneReply::default_instance_;
  delete WorldServerRpcChangeSceneReply_reflection_;
  delete WorldServerRpcEnterSceneAsk::default_instance_;
  delete WorldServerRpcEnterSceneAsk_reflection_;
  delete WorldServerRpcEnterSceneReply::default_instance_;
  delete WorldServerRpcEnterSceneReply_reflection_;
}

void protobuf_AddDesc_WorldServerRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WorldServerRpc.proto\032\022PublicStruct.pro"
    "to\"w\n\034WorldServerRpcChangeSceneAsk\022\021\n\006Ro"
    "leId\030\001 \001(\004:\0010\022\026\n\nCurSceneId\030\002 \001(\021:\002-1\022\031\n"
    "\rTargetSceneId\030\003 \001(\021:\002-1\022\021\n\005MemId\030\004 \001(\021:"
    "\002-1\"\220\001\n\036WorldServerRpcChangeSceneReply\022\025"
    "\n\006Result\030\001 \001(\021:\005-9999\022\021\n\006RoleId\030\002 \001(\004:\0010"
    "\022\026\n\nCurSceneId\030\003 \001(\021:\002-1\022\031\n\rTargetSceneI"
    "d\030\004 \001(\021:\002-1\022\021\n\005MemId\030\005 \001(\021:\002-1\"E\n\033WorldS"
    "erverRpcEnterSceneAsk\022\021\n\006RoleId\030\001 \001(\004:\0010"
    "\022\023\n\007SceneId\030\002 \001(\021:\002-1\"6\n\035WorldServerRpcE"
    "nterSceneReply\022\025\n\006Result\030\001 \001(\021:\005-9999", 437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldServerRpc.proto", &protobuf_RegisterTypes);
  WorldServerRpcChangeSceneAsk::default_instance_ = new WorldServerRpcChangeSceneAsk();
  WorldServerRpcChangeSceneReply::default_instance_ = new WorldServerRpcChangeSceneReply();
  WorldServerRpcEnterSceneAsk::default_instance_ = new WorldServerRpcEnterSceneAsk();
  WorldServerRpcEnterSceneReply::default_instance_ = new WorldServerRpcEnterSceneReply();
  WorldServerRpcChangeSceneAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcChangeSceneReply::default_instance_->InitAsDefaultInstance();
  WorldServerRpcEnterSceneAsk::default_instance_->InitAsDefaultInstance();
  WorldServerRpcEnterSceneReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldServerRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldServerRpc_2eproto {
  StaticDescriptorInitializer_WorldServerRpc_2eproto() {
    protobuf_AddDesc_WorldServerRpc_2eproto();
  }
} static_descriptor_initializer_WorldServerRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcChangeSceneAsk::kRoleIdFieldNumber;
const int WorldServerRpcChangeSceneAsk::kCurSceneIdFieldNumber;
const int WorldServerRpcChangeSceneAsk::kTargetSceneIdFieldNumber;
const int WorldServerRpcChangeSceneAsk::kMemIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcChangeSceneAsk::WorldServerRpcChangeSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcChangeSceneAsk::InitAsDefaultInstance() {
}

WorldServerRpcChangeSceneAsk::WorldServerRpcChangeSceneAsk(const WorldServerRpcChangeSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcChangeSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  cursceneid_ = -1;
  targetsceneid_ = -1;
  memid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcChangeSceneAsk::~WorldServerRpcChangeSceneAsk() {
  SharedDtor();
}

void WorldServerRpcChangeSceneAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcChangeSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcChangeSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcChangeSceneAsk_descriptor_;
}

const WorldServerRpcChangeSceneAsk& WorldServerRpcChangeSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcChangeSceneAsk* WorldServerRpcChangeSceneAsk::default_instance_ = NULL;

WorldServerRpcChangeSceneAsk* WorldServerRpcChangeSceneAsk::New() const {
  return new WorldServerRpcChangeSceneAsk;
}

void WorldServerRpcChangeSceneAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    cursceneid_ = -1;
    targetsceneid_ = -1;
    memid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcChangeSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurSceneId;
        break;
      }

      // optional sint32 CurSceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TargetSceneId;
        break;
      }

      // optional sint32 TargetSceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MemId;
        break;
      }

      // optional sint32 MemId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &memid_)));
          set_has_memid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcChangeSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 CurSceneId = 2 [default = -1];
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->cursceneid(), output);
  }

  // optional sint32 TargetSceneId = 3 [default = -1];
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->targetsceneid(), output);
  }

  // optional sint32 MemId = 4 [default = -1];
  if (has_memid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->memid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcChangeSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 CurSceneId = 2 [default = -1];
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->cursceneid(), target);
  }

  // optional sint32 TargetSceneId = 3 [default = -1];
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->targetsceneid(), target);
  }

  // optional sint32 MemId = 4 [default = -1];
  if (has_memid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->memid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcChangeSceneAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 CurSceneId = 2 [default = -1];
    if (has_cursceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cursceneid());
    }

    // optional sint32 TargetSceneId = 3 [default = -1];
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetsceneid());
    }

    // optional sint32 MemId = 4 [default = -1];
    if (has_memid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->memid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcChangeSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcChangeSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcChangeSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcChangeSceneAsk::MergeFrom(const WorldServerRpcChangeSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
    if (from.has_memid()) {
      set_memid(from.memid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcChangeSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcChangeSceneAsk::CopyFrom(const WorldServerRpcChangeSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcChangeSceneAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcChangeSceneAsk::Swap(WorldServerRpcChangeSceneAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(memid_, other->memid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcChangeSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcChangeSceneAsk_descriptor_;
  metadata.reflection = WorldServerRpcChangeSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcChangeSceneReply::kResultFieldNumber;
const int WorldServerRpcChangeSceneReply::kRoleIdFieldNumber;
const int WorldServerRpcChangeSceneReply::kCurSceneIdFieldNumber;
const int WorldServerRpcChangeSceneReply::kTargetSceneIdFieldNumber;
const int WorldServerRpcChangeSceneReply::kMemIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcChangeSceneReply::WorldServerRpcChangeSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcChangeSceneReply::InitAsDefaultInstance() {
}

WorldServerRpcChangeSceneReply::WorldServerRpcChangeSceneReply(const WorldServerRpcChangeSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcChangeSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleid_ = GOOGLE_ULONGLONG(0);
  cursceneid_ = -1;
  targetsceneid_ = -1;
  memid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcChangeSceneReply::~WorldServerRpcChangeSceneReply() {
  SharedDtor();
}

void WorldServerRpcChangeSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcChangeSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcChangeSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcChangeSceneReply_descriptor_;
}

const WorldServerRpcChangeSceneReply& WorldServerRpcChangeSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcChangeSceneReply* WorldServerRpcChangeSceneReply::default_instance_ = NULL;

WorldServerRpcChangeSceneReply* WorldServerRpcChangeSceneReply::New() const {
  return new WorldServerRpcChangeSceneReply;
}

void WorldServerRpcChangeSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    roleid_ = GOOGLE_ULONGLONG(0);
    cursceneid_ = -1;
    targetsceneid_ = -1;
    memid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcChangeSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurSceneId;
        break;
      }

      // optional sint32 CurSceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TargetSceneId;
        break;
      }

      // optional sint32 TargetSceneId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MemId;
        break;
      }

      // optional sint32 MemId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &memid_)));
          set_has_memid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcChangeSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional sint32 CurSceneId = 3 [default = -1];
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->cursceneid(), output);
  }

  // optional sint32 TargetSceneId = 4 [default = -1];
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->targetsceneid(), output);
  }

  // optional sint32 MemId = 5 [default = -1];
  if (has_memid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->memid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcChangeSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional sint32 CurSceneId = 3 [default = -1];
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->cursceneid(), target);
  }

  // optional sint32 TargetSceneId = 4 [default = -1];
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->targetsceneid(), target);
  }

  // optional sint32 MemId = 5 [default = -1];
  if (has_memid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->memid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcChangeSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 CurSceneId = 3 [default = -1];
    if (has_cursceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cursceneid());
    }

    // optional sint32 TargetSceneId = 4 [default = -1];
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetsceneid());
    }

    // optional sint32 MemId = 5 [default = -1];
    if (has_memid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->memid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcChangeSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcChangeSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcChangeSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcChangeSceneReply::MergeFrom(const WorldServerRpcChangeSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
    if (from.has_memid()) {
      set_memid(from.memid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcChangeSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcChangeSceneReply::CopyFrom(const WorldServerRpcChangeSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcChangeSceneReply::IsInitialized() const {

  return true;
}

void WorldServerRpcChangeSceneReply::Swap(WorldServerRpcChangeSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(memid_, other->memid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcChangeSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcChangeSceneReply_descriptor_;
  metadata.reflection = WorldServerRpcChangeSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcEnterSceneAsk::kRoleIdFieldNumber;
const int WorldServerRpcEnterSceneAsk::kSceneIdFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcEnterSceneAsk::WorldServerRpcEnterSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcEnterSceneAsk::InitAsDefaultInstance() {
}

WorldServerRpcEnterSceneAsk::WorldServerRpcEnterSceneAsk(const WorldServerRpcEnterSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcEnterSceneAsk::~WorldServerRpcEnterSceneAsk() {
  SharedDtor();
}

void WorldServerRpcEnterSceneAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcEnterSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcEnterSceneAsk_descriptor_;
}

const WorldServerRpcEnterSceneAsk& WorldServerRpcEnterSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcEnterSceneAsk* WorldServerRpcEnterSceneAsk::default_instance_ = NULL;

WorldServerRpcEnterSceneAsk* WorldServerRpcEnterSceneAsk::New() const {
  return new WorldServerRpcEnterSceneAsk;
}

void WorldServerRpcEnterSceneAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcEnterSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcEnterSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcEnterSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcEnterSceneAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcEnterSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcEnterSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcEnterSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcEnterSceneAsk::MergeFrom(const WorldServerRpcEnterSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcEnterSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneAsk::CopyFrom(const WorldServerRpcEnterSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcEnterSceneAsk::IsInitialized() const {

  return true;
}

void WorldServerRpcEnterSceneAsk::Swap(WorldServerRpcEnterSceneAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcEnterSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcEnterSceneAsk_descriptor_;
  metadata.reflection = WorldServerRpcEnterSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldServerRpcEnterSceneReply::kResultFieldNumber;
#endif  // !_MSC_VER

WorldServerRpcEnterSceneReply::WorldServerRpcEnterSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldServerRpcEnterSceneReply::InitAsDefaultInstance() {
}

WorldServerRpcEnterSceneReply::WorldServerRpcEnterSceneReply(const WorldServerRpcEnterSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldServerRpcEnterSceneReply::~WorldServerRpcEnterSceneReply() {
  SharedDtor();
}

void WorldServerRpcEnterSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldServerRpcEnterSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldServerRpcEnterSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldServerRpcEnterSceneReply_descriptor_;
}

const WorldServerRpcEnterSceneReply& WorldServerRpcEnterSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldServerRpc_2eproto();
  return *default_instance_;
}

WorldServerRpcEnterSceneReply* WorldServerRpcEnterSceneReply::default_instance_ = NULL;

WorldServerRpcEnterSceneReply* WorldServerRpcEnterSceneReply::New() const {
  return new WorldServerRpcEnterSceneReply;
}

void WorldServerRpcEnterSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldServerRpcEnterSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldServerRpcEnterSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldServerRpcEnterSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldServerRpcEnterSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldServerRpcEnterSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldServerRpcEnterSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldServerRpcEnterSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldServerRpcEnterSceneReply::MergeFrom(const WorldServerRpcEnterSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldServerRpcEnterSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldServerRpcEnterSceneReply::CopyFrom(const WorldServerRpcEnterSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldServerRpcEnterSceneReply::IsInitialized() const {

  return true;
}

void WorldServerRpcEnterSceneReply::Swap(WorldServerRpcEnterSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldServerRpcEnterSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldServerRpcEnterSceneReply_descriptor_;
  metadata.reflection = WorldServerRpcEnterSceneReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
