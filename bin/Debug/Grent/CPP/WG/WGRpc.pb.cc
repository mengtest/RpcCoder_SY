// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WGRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WGRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WGRpcInformCreateTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformCreateTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformCreateTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformCreateTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformJoinTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformJoinTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformJoinTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformJoinTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformLeaveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformLeaveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformLeaveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformLeaveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformAppointTeamLeaderAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformAppointTeamLeaderAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformAppointTeamLeaderReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformAppointTeamLeaderReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformKickTeamMemberAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformKickTeamMemberAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformKickTeamMemberReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformKickTeamMemberReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformDissmissTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformDissmissTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformDissmissTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformDissmissTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformApplyTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformApplyTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformApplyTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformApplyTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcAgreeTeamApplicantAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcAgreeTeamApplicantAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcAgreeTeamApplicantReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcAgreeTeamApplicantReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformLoginAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformLoginAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRpcInformLoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRpcInformLoginReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WGRpc_2eproto() {
  protobuf_AddDesc_WGRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WGRpc.proto");
  GOOGLE_CHECK(file != NULL);
  WGRpcInformCreateTeamAsk_descriptor_ = file->message_type(0);
  static const int WGRpcInformCreateTeamAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamAsk, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamAsk, result_),
  };
  WGRpcInformCreateTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformCreateTeamAsk_descriptor_,
      WGRpcInformCreateTeamAsk::default_instance_,
      WGRpcInformCreateTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformCreateTeamAsk));
  WGRpcInformCreateTeamReply_descriptor_ = file->message_type(1);
  static const int WGRpcInformCreateTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamReply, result_),
  };
  WGRpcInformCreateTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformCreateTeamReply_descriptor_,
      WGRpcInformCreateTeamReply::default_instance_,
      WGRpcInformCreateTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformCreateTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformCreateTeamReply));
  WGRpcInformJoinTeamAsk_descriptor_ = file->message_type(2);
  static const int WGRpcInformJoinTeamAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamAsk, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamAsk, team_),
  };
  WGRpcInformJoinTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformJoinTeamAsk_descriptor_,
      WGRpcInformJoinTeamAsk::default_instance_,
      WGRpcInformJoinTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformJoinTeamAsk));
  WGRpcInformJoinTeamReply_descriptor_ = file->message_type(3);
  static const int WGRpcInformJoinTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamReply, result_),
  };
  WGRpcInformJoinTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformJoinTeamReply_descriptor_,
      WGRpcInformJoinTeamReply::default_instance_,
      WGRpcInformJoinTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformJoinTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformJoinTeamReply));
  WGRpcInformLeaveAsk_descriptor_ = file->message_type(4);
  static const int WGRpcInformLeaveAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveAsk, newleaderroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveAsk, result_),
  };
  WGRpcInformLeaveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformLeaveAsk_descriptor_,
      WGRpcInformLeaveAsk::default_instance_,
      WGRpcInformLeaveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformLeaveAsk));
  WGRpcInformLeaveReply_descriptor_ = file->message_type(5);
  static const int WGRpcInformLeaveReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveReply, result_),
  };
  WGRpcInformLeaveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformLeaveReply_descriptor_,
      WGRpcInformLeaveReply::default_instance_,
      WGRpcInformLeaveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLeaveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformLeaveReply));
  WGRpcInformAppointTeamLeaderAsk_descriptor_ = file->message_type(6);
  static const int WGRpcInformAppointTeamLeaderAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderAsk, newleaderroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderAsk, oldleaderroleid_),
  };
  WGRpcInformAppointTeamLeaderAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformAppointTeamLeaderAsk_descriptor_,
      WGRpcInformAppointTeamLeaderAsk::default_instance_,
      WGRpcInformAppointTeamLeaderAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformAppointTeamLeaderAsk));
  WGRpcInformAppointTeamLeaderReply_descriptor_ = file->message_type(7);
  static const int WGRpcInformAppointTeamLeaderReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderReply, result_),
  };
  WGRpcInformAppointTeamLeaderReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformAppointTeamLeaderReply_descriptor_,
      WGRpcInformAppointTeamLeaderReply::default_instance_,
      WGRpcInformAppointTeamLeaderReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformAppointTeamLeaderReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformAppointTeamLeaderReply));
  WGRpcInformKickTeamMemberAsk_descriptor_ = file->message_type(8);
  static const int WGRpcInformKickTeamMemberAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberAsk, kickedmemberroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberAsk, leaderroleid_),
  };
  WGRpcInformKickTeamMemberAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformKickTeamMemberAsk_descriptor_,
      WGRpcInformKickTeamMemberAsk::default_instance_,
      WGRpcInformKickTeamMemberAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformKickTeamMemberAsk));
  WGRpcInformKickTeamMemberReply_descriptor_ = file->message_type(9);
  static const int WGRpcInformKickTeamMemberReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberReply, result_),
  };
  WGRpcInformKickTeamMemberReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformKickTeamMemberReply_descriptor_,
      WGRpcInformKickTeamMemberReply::default_instance_,
      WGRpcInformKickTeamMemberReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformKickTeamMemberReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformKickTeamMemberReply));
  WGRpcInformDissmissTeamAsk_descriptor_ = file->message_type(10);
  static const int WGRpcInformDissmissTeamAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamAsk, leaderroleid_),
  };
  WGRpcInformDissmissTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformDissmissTeamAsk_descriptor_,
      WGRpcInformDissmissTeamAsk::default_instance_,
      WGRpcInformDissmissTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformDissmissTeamAsk));
  WGRpcInformDissmissTeamReply_descriptor_ = file->message_type(11);
  static const int WGRpcInformDissmissTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamReply, result_),
  };
  WGRpcInformDissmissTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformDissmissTeamReply_descriptor_,
      WGRpcInformDissmissTeamReply::default_instance_,
      WGRpcInformDissmissTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformDissmissTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformDissmissTeamReply));
  WGRpcInformApplyTeamAsk_descriptor_ = file->message_type(12);
  static const int WGRpcInformApplyTeamAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamAsk, teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamAsk, teamid_),
  };
  WGRpcInformApplyTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformApplyTeamAsk_descriptor_,
      WGRpcInformApplyTeamAsk::default_instance_,
      WGRpcInformApplyTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformApplyTeamAsk));
  WGRpcInformApplyTeamReply_descriptor_ = file->message_type(13);
  static const int WGRpcInformApplyTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamReply, result_),
  };
  WGRpcInformApplyTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformApplyTeamReply_descriptor_,
      WGRpcInformApplyTeamReply::default_instance_,
      WGRpcInformApplyTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformApplyTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformApplyTeamReply));
  WGRpcAgreeTeamApplicantAsk_descriptor_ = file->message_type(14);
  static const int WGRpcAgreeTeamApplicantAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantAsk, team_),
  };
  WGRpcAgreeTeamApplicantAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcAgreeTeamApplicantAsk_descriptor_,
      WGRpcAgreeTeamApplicantAsk::default_instance_,
      WGRpcAgreeTeamApplicantAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcAgreeTeamApplicantAsk));
  WGRpcAgreeTeamApplicantReply_descriptor_ = file->message_type(15);
  static const int WGRpcAgreeTeamApplicantReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantReply, result_),
  };
  WGRpcAgreeTeamApplicantReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcAgreeTeamApplicantReply_descriptor_,
      WGRpcAgreeTeamApplicantReply::default_instance_,
      WGRpcAgreeTeamApplicantReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcAgreeTeamApplicantReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcAgreeTeamApplicantReply));
  WGRpcInformLoginAsk_descriptor_ = file->message_type(16);
  static const int WGRpcInformLoginAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginAsk, team_),
  };
  WGRpcInformLoginAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformLoginAsk_descriptor_,
      WGRpcInformLoginAsk::default_instance_,
      WGRpcInformLoginAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformLoginAsk));
  WGRpcInformLoginReply_descriptor_ = file->message_type(17);
  static const int WGRpcInformLoginReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginReply, result_),
  };
  WGRpcInformLoginReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRpcInformLoginReply_descriptor_,
      WGRpcInformLoginReply::default_instance_,
      WGRpcInformLoginReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRpcInformLoginReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRpcInformLoginReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WGRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformCreateTeamAsk_descriptor_, &WGRpcInformCreateTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformCreateTeamReply_descriptor_, &WGRpcInformCreateTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformJoinTeamAsk_descriptor_, &WGRpcInformJoinTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformJoinTeamReply_descriptor_, &WGRpcInformJoinTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformLeaveAsk_descriptor_, &WGRpcInformLeaveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformLeaveReply_descriptor_, &WGRpcInformLeaveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformAppointTeamLeaderAsk_descriptor_, &WGRpcInformAppointTeamLeaderAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformAppointTeamLeaderReply_descriptor_, &WGRpcInformAppointTeamLeaderReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformKickTeamMemberAsk_descriptor_, &WGRpcInformKickTeamMemberAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformKickTeamMemberReply_descriptor_, &WGRpcInformKickTeamMemberReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformDissmissTeamAsk_descriptor_, &WGRpcInformDissmissTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformDissmissTeamReply_descriptor_, &WGRpcInformDissmissTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformApplyTeamAsk_descriptor_, &WGRpcInformApplyTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformApplyTeamReply_descriptor_, &WGRpcInformApplyTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcAgreeTeamApplicantAsk_descriptor_, &WGRpcAgreeTeamApplicantAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcAgreeTeamApplicantReply_descriptor_, &WGRpcAgreeTeamApplicantReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformLoginAsk_descriptor_, &WGRpcInformLoginAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRpcInformLoginReply_descriptor_, &WGRpcInformLoginReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WGRpc_2eproto() {
  delete WGRpcInformCreateTeamAsk::default_instance_;
  delete WGRpcInformCreateTeamAsk_reflection_;
  delete WGRpcInformCreateTeamReply::default_instance_;
  delete WGRpcInformCreateTeamReply_reflection_;
  delete WGRpcInformJoinTeamAsk::default_instance_;
  delete WGRpcInformJoinTeamAsk_reflection_;
  delete WGRpcInformJoinTeamReply::default_instance_;
  delete WGRpcInformJoinTeamReply_reflection_;
  delete WGRpcInformLeaveAsk::default_instance_;
  delete WGRpcInformLeaveAsk_reflection_;
  delete WGRpcInformLeaveReply::default_instance_;
  delete WGRpcInformLeaveReply_reflection_;
  delete WGRpcInformAppointTeamLeaderAsk::default_instance_;
  delete WGRpcInformAppointTeamLeaderAsk_reflection_;
  delete WGRpcInformAppointTeamLeaderReply::default_instance_;
  delete WGRpcInformAppointTeamLeaderReply_reflection_;
  delete WGRpcInformKickTeamMemberAsk::default_instance_;
  delete WGRpcInformKickTeamMemberAsk_reflection_;
  delete WGRpcInformKickTeamMemberReply::default_instance_;
  delete WGRpcInformKickTeamMemberReply_reflection_;
  delete WGRpcInformDissmissTeamAsk::default_instance_;
  delete WGRpcInformDissmissTeamAsk_reflection_;
  delete WGRpcInformDissmissTeamReply::default_instance_;
  delete WGRpcInformDissmissTeamReply_reflection_;
  delete WGRpcInformApplyTeamAsk::default_instance_;
  delete WGRpcInformApplyTeamAsk_reflection_;
  delete WGRpcInformApplyTeamReply::default_instance_;
  delete WGRpcInformApplyTeamReply_reflection_;
  delete WGRpcAgreeTeamApplicantAsk::default_instance_;
  delete WGRpcAgreeTeamApplicantAsk_reflection_;
  delete WGRpcAgreeTeamApplicantReply::default_instance_;
  delete WGRpcAgreeTeamApplicantReply_reflection_;
  delete WGRpcInformLoginAsk::default_instance_;
  delete WGRpcInformLoginAsk_reflection_;
  delete WGRpcInformLoginReply::default_instance_;
  delete WGRpcInformLoginReply_reflection_;
}

void protobuf_AddDesc_WGRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013WGRpc.proto\032\022PublicStruct.proto\"J\n\030WGR"
    "pcInformCreateTeamAsk\022\027\n\004Team\030\001 \001(\0132\t.Te"
    "amInfo\022\025\n\006Result\030\002 \001(\021:\005-9999\"3\n\032WGRpcIn"
    "formCreateTeamReply\022\025\n\006Result\030\001 \001(\021:\005-99"
    "99\"R\n\026WGRpcInformJoinTeamAsk\022\037\n\006Member\030\005"
    " \001(\0132\017.TeamMemberInfo\022\027\n\004Team\030\006 \001(\0132\t.Te"
    "amInfo\"1\n\030WGRpcInformJoinTeamReply\022\025\n\006Re"
    "sult\030\001 \001(\021:\005-9999\"[\n\023WGRpcInformLeaveAsk"
    "\022\021\n\006RoleId\030\001 \001(\004:\0010\022\032\n\017NewLeaderRoleId\030\002"
    " \001(\004:\0010\022\025\n\006Result\030\003 \001(\021:\005-9999\".\n\025WGRpcI"
    "nformLeaveReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"p"
    "\n\037WGRpcInformAppointTeamLeaderAsk\022\025\n\006Res"
    "ult\030\001 \001(\021:\005-9999\022\032\n\017NewLeaderRoleId\030\002 \001("
    "\004:\0010\022\032\n\017OldLeaderRoleId\030\003 \001(\004:\0010\":\n!WGRp"
    "cInformAppointTeamLeaderReply\022\025\n\006Result\030"
    "\001 \001(\021:\005-9999\"m\n\034WGRpcInformKickTeamMembe"
    "rAsk\022\025\n\006Result\030\001 \001(\021:\005-9999\022\035\n\022KickedMem"
    "berRoleId\030\002 \001(\004:\0010\022\027\n\014LeaderRoleId\030\003 \001(\004"
    ":\0010\"7\n\036WGRpcInformKickTeamMemberReply\022\025\n"
    "\006Result\030\001 \001(\021:\005-9999\"L\n\032WGRpcInformDissm"
    "issTeamAsk\022\025\n\006Result\030\001 \001(\021:\005-9999\022\027\n\014Lea"
    "derRoleId\030\002 \001(\004:\0010\"5\n\034WGRpcInformDissmis"
    "sTeamReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"i\n\027WGR"
    "pcInformApplyTeamAsk\022#\n\nTeamMember\030\001 \001(\013"
    "2\017.TeamMemberInfo\022\025\n\006Result\030\002 \001(\021:\005-9999"
    "\022\022\n\006TeamId\030\003 \001(\021:\002-1\"2\n\031WGRpcInformApply"
    "TeamReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"5\n\032WGRp"
    "cAgreeTeamApplicantAsk\022\027\n\004Team\030\002 \001(\0132\t.T"
    "eamInfo\"5\n\034WGRpcAgreeTeamApplicantReply\022"
    "\025\n\006Result\030\001 \001(\021:\005-9999\".\n\023WGRpcInformLog"
    "inAsk\022\027\n\004Team\030\001 \001(\0132\t.TeamInfo\".\n\025WGRpcI"
    "nformLoginReply\022\025\n\006Result\030\001 \001(\021:\005-9999", 1278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WGRpc.proto", &protobuf_RegisterTypes);
  WGRpcInformCreateTeamAsk::default_instance_ = new WGRpcInformCreateTeamAsk();
  WGRpcInformCreateTeamReply::default_instance_ = new WGRpcInformCreateTeamReply();
  WGRpcInformJoinTeamAsk::default_instance_ = new WGRpcInformJoinTeamAsk();
  WGRpcInformJoinTeamReply::default_instance_ = new WGRpcInformJoinTeamReply();
  WGRpcInformLeaveAsk::default_instance_ = new WGRpcInformLeaveAsk();
  WGRpcInformLeaveReply::default_instance_ = new WGRpcInformLeaveReply();
  WGRpcInformAppointTeamLeaderAsk::default_instance_ = new WGRpcInformAppointTeamLeaderAsk();
  WGRpcInformAppointTeamLeaderReply::default_instance_ = new WGRpcInformAppointTeamLeaderReply();
  WGRpcInformKickTeamMemberAsk::default_instance_ = new WGRpcInformKickTeamMemberAsk();
  WGRpcInformKickTeamMemberReply::default_instance_ = new WGRpcInformKickTeamMemberReply();
  WGRpcInformDissmissTeamAsk::default_instance_ = new WGRpcInformDissmissTeamAsk();
  WGRpcInformDissmissTeamReply::default_instance_ = new WGRpcInformDissmissTeamReply();
  WGRpcInformApplyTeamAsk::default_instance_ = new WGRpcInformApplyTeamAsk();
  WGRpcInformApplyTeamReply::default_instance_ = new WGRpcInformApplyTeamReply();
  WGRpcAgreeTeamApplicantAsk::default_instance_ = new WGRpcAgreeTeamApplicantAsk();
  WGRpcAgreeTeamApplicantReply::default_instance_ = new WGRpcAgreeTeamApplicantReply();
  WGRpcInformLoginAsk::default_instance_ = new WGRpcInformLoginAsk();
  WGRpcInformLoginReply::default_instance_ = new WGRpcInformLoginReply();
  WGRpcInformCreateTeamAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformCreateTeamReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformJoinTeamAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformJoinTeamReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformLeaveAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformLeaveReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformAppointTeamLeaderAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformAppointTeamLeaderReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformKickTeamMemberAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformKickTeamMemberReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformDissmissTeamAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformDissmissTeamReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformApplyTeamAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformApplyTeamReply::default_instance_->InitAsDefaultInstance();
  WGRpcAgreeTeamApplicantAsk::default_instance_->InitAsDefaultInstance();
  WGRpcAgreeTeamApplicantReply::default_instance_->InitAsDefaultInstance();
  WGRpcInformLoginAsk::default_instance_->InitAsDefaultInstance();
  WGRpcInformLoginReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WGRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WGRpc_2eproto {
  StaticDescriptorInitializer_WGRpc_2eproto() {
    protobuf_AddDesc_WGRpc_2eproto();
  }
} static_descriptor_initializer_WGRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformCreateTeamAsk::kTeamFieldNumber;
const int WGRpcInformCreateTeamAsk::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformCreateTeamAsk::WGRpcInformCreateTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformCreateTeamAsk::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

WGRpcInformCreateTeamAsk::WGRpcInformCreateTeamAsk(const WGRpcInformCreateTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformCreateTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformCreateTeamAsk::~WGRpcInformCreateTeamAsk() {
  SharedDtor();
}

void WGRpcInformCreateTeamAsk::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void WGRpcInformCreateTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformCreateTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformCreateTeamAsk_descriptor_;
}

const WGRpcInformCreateTeamAsk& WGRpcInformCreateTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformCreateTeamAsk* WGRpcInformCreateTeamAsk::default_instance_ = NULL;

WGRpcInformCreateTeamAsk* WGRpcInformCreateTeamAsk::New() const {
  return new WGRpcInformCreateTeamAsk;
}

void WGRpcInformCreateTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformCreateTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional sint32 Result = 2 [default = -9999];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformCreateTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformCreateTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformCreateTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional sint32 Result = 2 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformCreateTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformCreateTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformCreateTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformCreateTeamAsk::MergeFrom(const WGRpcInformCreateTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformCreateTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformCreateTeamAsk::CopyFrom(const WGRpcInformCreateTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformCreateTeamAsk::IsInitialized() const {

  return true;
}

void WGRpcInformCreateTeamAsk::Swap(WGRpcInformCreateTeamAsk* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformCreateTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformCreateTeamAsk_descriptor_;
  metadata.reflection = WGRpcInformCreateTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformCreateTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformCreateTeamReply::WGRpcInformCreateTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformCreateTeamReply::InitAsDefaultInstance() {
}

WGRpcInformCreateTeamReply::WGRpcInformCreateTeamReply(const WGRpcInformCreateTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformCreateTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformCreateTeamReply::~WGRpcInformCreateTeamReply() {
  SharedDtor();
}

void WGRpcInformCreateTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformCreateTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformCreateTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformCreateTeamReply_descriptor_;
}

const WGRpcInformCreateTeamReply& WGRpcInformCreateTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformCreateTeamReply* WGRpcInformCreateTeamReply::default_instance_ = NULL;

WGRpcInformCreateTeamReply* WGRpcInformCreateTeamReply::New() const {
  return new WGRpcInformCreateTeamReply;
}

void WGRpcInformCreateTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformCreateTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformCreateTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformCreateTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformCreateTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformCreateTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformCreateTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformCreateTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformCreateTeamReply::MergeFrom(const WGRpcInformCreateTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformCreateTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformCreateTeamReply::CopyFrom(const WGRpcInformCreateTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformCreateTeamReply::IsInitialized() const {

  return true;
}

void WGRpcInformCreateTeamReply::Swap(WGRpcInformCreateTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformCreateTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformCreateTeamReply_descriptor_;
  metadata.reflection = WGRpcInformCreateTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformJoinTeamAsk::kMemberFieldNumber;
const int WGRpcInformJoinTeamAsk::kTeamFieldNumber;
#endif  // !_MSC_VER

WGRpcInformJoinTeamAsk::WGRpcInformJoinTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformJoinTeamAsk::InitAsDefaultInstance() {
  member_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

WGRpcInformJoinTeamAsk::WGRpcInformJoinTeamAsk(const WGRpcInformJoinTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformJoinTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformJoinTeamAsk::~WGRpcInformJoinTeamAsk() {
  SharedDtor();
}

void WGRpcInformJoinTeamAsk::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
    delete team_;
  }
}

void WGRpcInformJoinTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformJoinTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformJoinTeamAsk_descriptor_;
}

const WGRpcInformJoinTeamAsk& WGRpcInformJoinTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformJoinTeamAsk* WGRpcInformJoinTeamAsk::default_instance_ = NULL;

WGRpcInformJoinTeamAsk* WGRpcInformJoinTeamAsk::New() const {
  return new WGRpcInformJoinTeamAsk;
}

void WGRpcInformJoinTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != NULL) member_->::TeamMemberInfo::Clear();
    }
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformJoinTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo Member = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformJoinTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo Member = 5;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->member(), output);
  }

  // optional .TeamInfo Team = 6;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformJoinTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo Member = 5;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->member(), target);
  }

  // optional .TeamInfo Team = 6;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformJoinTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo Member = 5;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .TeamInfo Team = 6;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformJoinTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformJoinTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformJoinTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformJoinTeamAsk::MergeFrom(const WGRpcInformJoinTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      mutable_member()->::TeamMemberInfo::MergeFrom(from.member());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformJoinTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformJoinTeamAsk::CopyFrom(const WGRpcInformJoinTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformJoinTeamAsk::IsInitialized() const {

  return true;
}

void WGRpcInformJoinTeamAsk::Swap(WGRpcInformJoinTeamAsk* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformJoinTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformJoinTeamAsk_descriptor_;
  metadata.reflection = WGRpcInformJoinTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformJoinTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformJoinTeamReply::WGRpcInformJoinTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformJoinTeamReply::InitAsDefaultInstance() {
}

WGRpcInformJoinTeamReply::WGRpcInformJoinTeamReply(const WGRpcInformJoinTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformJoinTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformJoinTeamReply::~WGRpcInformJoinTeamReply() {
  SharedDtor();
}

void WGRpcInformJoinTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformJoinTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformJoinTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformJoinTeamReply_descriptor_;
}

const WGRpcInformJoinTeamReply& WGRpcInformJoinTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformJoinTeamReply* WGRpcInformJoinTeamReply::default_instance_ = NULL;

WGRpcInformJoinTeamReply* WGRpcInformJoinTeamReply::New() const {
  return new WGRpcInformJoinTeamReply;
}

void WGRpcInformJoinTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformJoinTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformJoinTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformJoinTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformJoinTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformJoinTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformJoinTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformJoinTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformJoinTeamReply::MergeFrom(const WGRpcInformJoinTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformJoinTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformJoinTeamReply::CopyFrom(const WGRpcInformJoinTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformJoinTeamReply::IsInitialized() const {

  return true;
}

void WGRpcInformJoinTeamReply::Swap(WGRpcInformJoinTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformJoinTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformJoinTeamReply_descriptor_;
  metadata.reflection = WGRpcInformJoinTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformLeaveAsk::kRoleIdFieldNumber;
const int WGRpcInformLeaveAsk::kNewLeaderRoleIdFieldNumber;
const int WGRpcInformLeaveAsk::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformLeaveAsk::WGRpcInformLeaveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformLeaveAsk::InitAsDefaultInstance() {
}

WGRpcInformLeaveAsk::WGRpcInformLeaveAsk(const WGRpcInformLeaveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformLeaveAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  newleaderroleid_ = GOOGLE_ULONGLONG(0);
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformLeaveAsk::~WGRpcInformLeaveAsk() {
  SharedDtor();
}

void WGRpcInformLeaveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformLeaveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformLeaveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformLeaveAsk_descriptor_;
}

const WGRpcInformLeaveAsk& WGRpcInformLeaveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformLeaveAsk* WGRpcInformLeaveAsk::default_instance_ = NULL;

WGRpcInformLeaveAsk* WGRpcInformLeaveAsk::New() const {
  return new WGRpcInformLeaveAsk;
}

void WGRpcInformLeaveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    newleaderroleid_ = GOOGLE_ULONGLONG(0);
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformLeaveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewLeaderRoleId;
        break;
      }

      // optional uint64 NewLeaderRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewLeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newleaderroleid_)));
          set_has_newleaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional sint32 Result = 3 [default = -9999];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformLeaveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->newleaderroleid(), output);
  }

  // optional sint32 Result = 3 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformLeaveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->newleaderroleid(), target);
  }

  // optional sint32 Result = 3 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformLeaveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint64 NewLeaderRoleId = 2 [default = 0];
    if (has_newleaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newleaderroleid());
    }

    // optional sint32 Result = 3 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformLeaveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformLeaveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformLeaveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformLeaveAsk::MergeFrom(const WGRpcInformLeaveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_newleaderroleid()) {
      set_newleaderroleid(from.newleaderroleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformLeaveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformLeaveAsk::CopyFrom(const WGRpcInformLeaveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformLeaveAsk::IsInitialized() const {

  return true;
}

void WGRpcInformLeaveAsk::Swap(WGRpcInformLeaveAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(newleaderroleid_, other->newleaderroleid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformLeaveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformLeaveAsk_descriptor_;
  metadata.reflection = WGRpcInformLeaveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformLeaveReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformLeaveReply::WGRpcInformLeaveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformLeaveReply::InitAsDefaultInstance() {
}

WGRpcInformLeaveReply::WGRpcInformLeaveReply(const WGRpcInformLeaveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformLeaveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformLeaveReply::~WGRpcInformLeaveReply() {
  SharedDtor();
}

void WGRpcInformLeaveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformLeaveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformLeaveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformLeaveReply_descriptor_;
}

const WGRpcInformLeaveReply& WGRpcInformLeaveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformLeaveReply* WGRpcInformLeaveReply::default_instance_ = NULL;

WGRpcInformLeaveReply* WGRpcInformLeaveReply::New() const {
  return new WGRpcInformLeaveReply;
}

void WGRpcInformLeaveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformLeaveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformLeaveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformLeaveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformLeaveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformLeaveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformLeaveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformLeaveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformLeaveReply::MergeFrom(const WGRpcInformLeaveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformLeaveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformLeaveReply::CopyFrom(const WGRpcInformLeaveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformLeaveReply::IsInitialized() const {

  return true;
}

void WGRpcInformLeaveReply::Swap(WGRpcInformLeaveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformLeaveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformLeaveReply_descriptor_;
  metadata.reflection = WGRpcInformLeaveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformAppointTeamLeaderAsk::kResultFieldNumber;
const int WGRpcInformAppointTeamLeaderAsk::kNewLeaderRoleIdFieldNumber;
const int WGRpcInformAppointTeamLeaderAsk::kOldLeaderRoleIdFieldNumber;
#endif  // !_MSC_VER

WGRpcInformAppointTeamLeaderAsk::WGRpcInformAppointTeamLeaderAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformAppointTeamLeaderAsk::InitAsDefaultInstance() {
}

WGRpcInformAppointTeamLeaderAsk::WGRpcInformAppointTeamLeaderAsk(const WGRpcInformAppointTeamLeaderAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformAppointTeamLeaderAsk::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  newleaderroleid_ = GOOGLE_ULONGLONG(0);
  oldleaderroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformAppointTeamLeaderAsk::~WGRpcInformAppointTeamLeaderAsk() {
  SharedDtor();
}

void WGRpcInformAppointTeamLeaderAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformAppointTeamLeaderAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformAppointTeamLeaderAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformAppointTeamLeaderAsk_descriptor_;
}

const WGRpcInformAppointTeamLeaderAsk& WGRpcInformAppointTeamLeaderAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformAppointTeamLeaderAsk* WGRpcInformAppointTeamLeaderAsk::default_instance_ = NULL;

WGRpcInformAppointTeamLeaderAsk* WGRpcInformAppointTeamLeaderAsk::New() const {
  return new WGRpcInformAppointTeamLeaderAsk;
}

void WGRpcInformAppointTeamLeaderAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    newleaderroleid_ = GOOGLE_ULONGLONG(0);
    oldleaderroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformAppointTeamLeaderAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewLeaderRoleId;
        break;
      }

      // optional uint64 NewLeaderRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewLeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newleaderroleid_)));
          set_has_newleaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OldLeaderRoleId;
        break;
      }

      // optional uint64 OldLeaderRoleId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OldLeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &oldleaderroleid_)));
          set_has_oldleaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformAppointTeamLeaderAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->newleaderroleid(), output);
  }

  // optional uint64 OldLeaderRoleId = 3 [default = 0];
  if (has_oldleaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->oldleaderroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformAppointTeamLeaderAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->newleaderroleid(), target);
  }

  // optional uint64 OldLeaderRoleId = 3 [default = 0];
  if (has_oldleaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->oldleaderroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformAppointTeamLeaderAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 NewLeaderRoleId = 2 [default = 0];
    if (has_newleaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newleaderroleid());
    }

    // optional uint64 OldLeaderRoleId = 3 [default = 0];
    if (has_oldleaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oldleaderroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformAppointTeamLeaderAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformAppointTeamLeaderAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformAppointTeamLeaderAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformAppointTeamLeaderAsk::MergeFrom(const WGRpcInformAppointTeamLeaderAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newleaderroleid()) {
      set_newleaderroleid(from.newleaderroleid());
    }
    if (from.has_oldleaderroleid()) {
      set_oldleaderroleid(from.oldleaderroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformAppointTeamLeaderAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformAppointTeamLeaderAsk::CopyFrom(const WGRpcInformAppointTeamLeaderAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformAppointTeamLeaderAsk::IsInitialized() const {

  return true;
}

void WGRpcInformAppointTeamLeaderAsk::Swap(WGRpcInformAppointTeamLeaderAsk* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newleaderroleid_, other->newleaderroleid_);
    std::swap(oldleaderroleid_, other->oldleaderroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformAppointTeamLeaderAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformAppointTeamLeaderAsk_descriptor_;
  metadata.reflection = WGRpcInformAppointTeamLeaderAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformAppointTeamLeaderReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformAppointTeamLeaderReply::WGRpcInformAppointTeamLeaderReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformAppointTeamLeaderReply::InitAsDefaultInstance() {
}

WGRpcInformAppointTeamLeaderReply::WGRpcInformAppointTeamLeaderReply(const WGRpcInformAppointTeamLeaderReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformAppointTeamLeaderReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformAppointTeamLeaderReply::~WGRpcInformAppointTeamLeaderReply() {
  SharedDtor();
}

void WGRpcInformAppointTeamLeaderReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformAppointTeamLeaderReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformAppointTeamLeaderReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformAppointTeamLeaderReply_descriptor_;
}

const WGRpcInformAppointTeamLeaderReply& WGRpcInformAppointTeamLeaderReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformAppointTeamLeaderReply* WGRpcInformAppointTeamLeaderReply::default_instance_ = NULL;

WGRpcInformAppointTeamLeaderReply* WGRpcInformAppointTeamLeaderReply::New() const {
  return new WGRpcInformAppointTeamLeaderReply;
}

void WGRpcInformAppointTeamLeaderReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformAppointTeamLeaderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformAppointTeamLeaderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformAppointTeamLeaderReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformAppointTeamLeaderReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformAppointTeamLeaderReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformAppointTeamLeaderReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformAppointTeamLeaderReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformAppointTeamLeaderReply::MergeFrom(const WGRpcInformAppointTeamLeaderReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformAppointTeamLeaderReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformAppointTeamLeaderReply::CopyFrom(const WGRpcInformAppointTeamLeaderReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformAppointTeamLeaderReply::IsInitialized() const {

  return true;
}

void WGRpcInformAppointTeamLeaderReply::Swap(WGRpcInformAppointTeamLeaderReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformAppointTeamLeaderReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformAppointTeamLeaderReply_descriptor_;
  metadata.reflection = WGRpcInformAppointTeamLeaderReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformKickTeamMemberAsk::kResultFieldNumber;
const int WGRpcInformKickTeamMemberAsk::kKickedMemberRoleIdFieldNumber;
const int WGRpcInformKickTeamMemberAsk::kLeaderRoleIdFieldNumber;
#endif  // !_MSC_VER

WGRpcInformKickTeamMemberAsk::WGRpcInformKickTeamMemberAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformKickTeamMemberAsk::InitAsDefaultInstance() {
}

WGRpcInformKickTeamMemberAsk::WGRpcInformKickTeamMemberAsk(const WGRpcInformKickTeamMemberAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformKickTeamMemberAsk::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  kickedmemberroleid_ = GOOGLE_ULONGLONG(0);
  leaderroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformKickTeamMemberAsk::~WGRpcInformKickTeamMemberAsk() {
  SharedDtor();
}

void WGRpcInformKickTeamMemberAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformKickTeamMemberAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformKickTeamMemberAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformKickTeamMemberAsk_descriptor_;
}

const WGRpcInformKickTeamMemberAsk& WGRpcInformKickTeamMemberAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformKickTeamMemberAsk* WGRpcInformKickTeamMemberAsk::default_instance_ = NULL;

WGRpcInformKickTeamMemberAsk* WGRpcInformKickTeamMemberAsk::New() const {
  return new WGRpcInformKickTeamMemberAsk;
}

void WGRpcInformKickTeamMemberAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    kickedmemberroleid_ = GOOGLE_ULONGLONG(0);
    leaderroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformKickTeamMemberAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KickedMemberRoleId;
        break;
      }

      // optional uint64 KickedMemberRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KickedMemberRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickedmemberroleid_)));
          set_has_kickedmemberroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LeaderRoleId;
        break;
      }

      // optional uint64 LeaderRoleId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderroleid_)));
          set_has_leaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformKickTeamMemberAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 KickedMemberRoleId = 2 [default = 0];
  if (has_kickedmemberroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kickedmemberroleid(), output);
  }

  // optional uint64 LeaderRoleId = 3 [default = 0];
  if (has_leaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformKickTeamMemberAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 KickedMemberRoleId = 2 [default = 0];
  if (has_kickedmemberroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kickedmemberroleid(), target);
  }

  // optional uint64 LeaderRoleId = 3 [default = 0];
  if (has_leaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformKickTeamMemberAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 KickedMemberRoleId = 2 [default = 0];
    if (has_kickedmemberroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickedmemberroleid());
    }

    // optional uint64 LeaderRoleId = 3 [default = 0];
    if (has_leaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformKickTeamMemberAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformKickTeamMemberAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformKickTeamMemberAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformKickTeamMemberAsk::MergeFrom(const WGRpcInformKickTeamMemberAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_kickedmemberroleid()) {
      set_kickedmemberroleid(from.kickedmemberroleid());
    }
    if (from.has_leaderroleid()) {
      set_leaderroleid(from.leaderroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformKickTeamMemberAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformKickTeamMemberAsk::CopyFrom(const WGRpcInformKickTeamMemberAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformKickTeamMemberAsk::IsInitialized() const {

  return true;
}

void WGRpcInformKickTeamMemberAsk::Swap(WGRpcInformKickTeamMemberAsk* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(kickedmemberroleid_, other->kickedmemberroleid_);
    std::swap(leaderroleid_, other->leaderroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformKickTeamMemberAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformKickTeamMemberAsk_descriptor_;
  metadata.reflection = WGRpcInformKickTeamMemberAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformKickTeamMemberReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformKickTeamMemberReply::WGRpcInformKickTeamMemberReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformKickTeamMemberReply::InitAsDefaultInstance() {
}

WGRpcInformKickTeamMemberReply::WGRpcInformKickTeamMemberReply(const WGRpcInformKickTeamMemberReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformKickTeamMemberReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformKickTeamMemberReply::~WGRpcInformKickTeamMemberReply() {
  SharedDtor();
}

void WGRpcInformKickTeamMemberReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformKickTeamMemberReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformKickTeamMemberReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformKickTeamMemberReply_descriptor_;
}

const WGRpcInformKickTeamMemberReply& WGRpcInformKickTeamMemberReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformKickTeamMemberReply* WGRpcInformKickTeamMemberReply::default_instance_ = NULL;

WGRpcInformKickTeamMemberReply* WGRpcInformKickTeamMemberReply::New() const {
  return new WGRpcInformKickTeamMemberReply;
}

void WGRpcInformKickTeamMemberReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformKickTeamMemberReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformKickTeamMemberReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformKickTeamMemberReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformKickTeamMemberReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformKickTeamMemberReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformKickTeamMemberReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformKickTeamMemberReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformKickTeamMemberReply::MergeFrom(const WGRpcInformKickTeamMemberReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformKickTeamMemberReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformKickTeamMemberReply::CopyFrom(const WGRpcInformKickTeamMemberReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformKickTeamMemberReply::IsInitialized() const {

  return true;
}

void WGRpcInformKickTeamMemberReply::Swap(WGRpcInformKickTeamMemberReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformKickTeamMemberReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformKickTeamMemberReply_descriptor_;
  metadata.reflection = WGRpcInformKickTeamMemberReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformDissmissTeamAsk::kResultFieldNumber;
const int WGRpcInformDissmissTeamAsk::kLeaderRoleIdFieldNumber;
#endif  // !_MSC_VER

WGRpcInformDissmissTeamAsk::WGRpcInformDissmissTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformDissmissTeamAsk::InitAsDefaultInstance() {
}

WGRpcInformDissmissTeamAsk::WGRpcInformDissmissTeamAsk(const WGRpcInformDissmissTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformDissmissTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  leaderroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformDissmissTeamAsk::~WGRpcInformDissmissTeamAsk() {
  SharedDtor();
}

void WGRpcInformDissmissTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformDissmissTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformDissmissTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformDissmissTeamAsk_descriptor_;
}

const WGRpcInformDissmissTeamAsk& WGRpcInformDissmissTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformDissmissTeamAsk* WGRpcInformDissmissTeamAsk::default_instance_ = NULL;

WGRpcInformDissmissTeamAsk* WGRpcInformDissmissTeamAsk::New() const {
  return new WGRpcInformDissmissTeamAsk;
}

void WGRpcInformDissmissTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    leaderroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformDissmissTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeaderRoleId;
        break;
      }

      // optional uint64 LeaderRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderroleid_)));
          set_has_leaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformDissmissTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 LeaderRoleId = 2 [default = 0];
  if (has_leaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leaderroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformDissmissTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 LeaderRoleId = 2 [default = 0];
  if (has_leaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leaderroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformDissmissTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 LeaderRoleId = 2 [default = 0];
    if (has_leaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformDissmissTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformDissmissTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformDissmissTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformDissmissTeamAsk::MergeFrom(const WGRpcInformDissmissTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_leaderroleid()) {
      set_leaderroleid(from.leaderroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformDissmissTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformDissmissTeamAsk::CopyFrom(const WGRpcInformDissmissTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformDissmissTeamAsk::IsInitialized() const {

  return true;
}

void WGRpcInformDissmissTeamAsk::Swap(WGRpcInformDissmissTeamAsk* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(leaderroleid_, other->leaderroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformDissmissTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformDissmissTeamAsk_descriptor_;
  metadata.reflection = WGRpcInformDissmissTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformDissmissTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformDissmissTeamReply::WGRpcInformDissmissTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformDissmissTeamReply::InitAsDefaultInstance() {
}

WGRpcInformDissmissTeamReply::WGRpcInformDissmissTeamReply(const WGRpcInformDissmissTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformDissmissTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformDissmissTeamReply::~WGRpcInformDissmissTeamReply() {
  SharedDtor();
}

void WGRpcInformDissmissTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformDissmissTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformDissmissTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformDissmissTeamReply_descriptor_;
}

const WGRpcInformDissmissTeamReply& WGRpcInformDissmissTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformDissmissTeamReply* WGRpcInformDissmissTeamReply::default_instance_ = NULL;

WGRpcInformDissmissTeamReply* WGRpcInformDissmissTeamReply::New() const {
  return new WGRpcInformDissmissTeamReply;
}

void WGRpcInformDissmissTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformDissmissTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformDissmissTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformDissmissTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformDissmissTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformDissmissTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformDissmissTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformDissmissTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformDissmissTeamReply::MergeFrom(const WGRpcInformDissmissTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformDissmissTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformDissmissTeamReply::CopyFrom(const WGRpcInformDissmissTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformDissmissTeamReply::IsInitialized() const {

  return true;
}

void WGRpcInformDissmissTeamReply::Swap(WGRpcInformDissmissTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformDissmissTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformDissmissTeamReply_descriptor_;
  metadata.reflection = WGRpcInformDissmissTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformApplyTeamAsk::kTeamMemberFieldNumber;
const int WGRpcInformApplyTeamAsk::kResultFieldNumber;
const int WGRpcInformApplyTeamAsk::kTeamIdFieldNumber;
#endif  // !_MSC_VER

WGRpcInformApplyTeamAsk::WGRpcInformApplyTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformApplyTeamAsk::InitAsDefaultInstance() {
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
}

WGRpcInformApplyTeamAsk::WGRpcInformApplyTeamAsk(const WGRpcInformApplyTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformApplyTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teammember_ = NULL;
  result_ = -9999;
  teamid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformApplyTeamAsk::~WGRpcInformApplyTeamAsk() {
  SharedDtor();
}

void WGRpcInformApplyTeamAsk::SharedDtor() {
  if (this != default_instance_) {
    delete teammember_;
  }
}

void WGRpcInformApplyTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformApplyTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformApplyTeamAsk_descriptor_;
}

const WGRpcInformApplyTeamAsk& WGRpcInformApplyTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformApplyTeamAsk* WGRpcInformApplyTeamAsk::default_instance_ = NULL;

WGRpcInformApplyTeamAsk* WGRpcInformApplyTeamAsk::New() const {
  return new WGRpcInformApplyTeamAsk;
}

void WGRpcInformApplyTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
    result_ = -9999;
    teamid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformApplyTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo TeamMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional sint32 Result = 2 [default = -9999];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TeamId;
        break;
      }

      // optional sint32 TeamId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformApplyTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammember(), output);
  }

  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformApplyTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammember(), target);
  }

  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformApplyTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo TeamMember = 1;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

    // optional sint32 Result = 2 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TeamId = 3 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformApplyTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformApplyTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformApplyTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformApplyTeamAsk::MergeFrom(const WGRpcInformApplyTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformApplyTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformApplyTeamAsk::CopyFrom(const WGRpcInformApplyTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformApplyTeamAsk::IsInitialized() const {

  return true;
}

void WGRpcInformApplyTeamAsk::Swap(WGRpcInformApplyTeamAsk* other) {
  if (other != this) {
    std::swap(teammember_, other->teammember_);
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformApplyTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformApplyTeamAsk_descriptor_;
  metadata.reflection = WGRpcInformApplyTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformApplyTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformApplyTeamReply::WGRpcInformApplyTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformApplyTeamReply::InitAsDefaultInstance() {
}

WGRpcInformApplyTeamReply::WGRpcInformApplyTeamReply(const WGRpcInformApplyTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformApplyTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformApplyTeamReply::~WGRpcInformApplyTeamReply() {
  SharedDtor();
}

void WGRpcInformApplyTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformApplyTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformApplyTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformApplyTeamReply_descriptor_;
}

const WGRpcInformApplyTeamReply& WGRpcInformApplyTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformApplyTeamReply* WGRpcInformApplyTeamReply::default_instance_ = NULL;

WGRpcInformApplyTeamReply* WGRpcInformApplyTeamReply::New() const {
  return new WGRpcInformApplyTeamReply;
}

void WGRpcInformApplyTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformApplyTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformApplyTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformApplyTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformApplyTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformApplyTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformApplyTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformApplyTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformApplyTeamReply::MergeFrom(const WGRpcInformApplyTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformApplyTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformApplyTeamReply::CopyFrom(const WGRpcInformApplyTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformApplyTeamReply::IsInitialized() const {

  return true;
}

void WGRpcInformApplyTeamReply::Swap(WGRpcInformApplyTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformApplyTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformApplyTeamReply_descriptor_;
  metadata.reflection = WGRpcInformApplyTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcAgreeTeamApplicantAsk::kTeamFieldNumber;
#endif  // !_MSC_VER

WGRpcAgreeTeamApplicantAsk::WGRpcAgreeTeamApplicantAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcAgreeTeamApplicantAsk::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

WGRpcAgreeTeamApplicantAsk::WGRpcAgreeTeamApplicantAsk(const WGRpcAgreeTeamApplicantAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcAgreeTeamApplicantAsk::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcAgreeTeamApplicantAsk::~WGRpcAgreeTeamApplicantAsk() {
  SharedDtor();
}

void WGRpcAgreeTeamApplicantAsk::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void WGRpcAgreeTeamApplicantAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcAgreeTeamApplicantAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcAgreeTeamApplicantAsk_descriptor_;
}

const WGRpcAgreeTeamApplicantAsk& WGRpcAgreeTeamApplicantAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcAgreeTeamApplicantAsk* WGRpcAgreeTeamApplicantAsk::default_instance_ = NULL;

WGRpcAgreeTeamApplicantAsk* WGRpcAgreeTeamApplicantAsk::New() const {
  return new WGRpcAgreeTeamApplicantAsk;
}

void WGRpcAgreeTeamApplicantAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcAgreeTeamApplicantAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcAgreeTeamApplicantAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcAgreeTeamApplicantAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcAgreeTeamApplicantAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcAgreeTeamApplicantAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcAgreeTeamApplicantAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcAgreeTeamApplicantAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcAgreeTeamApplicantAsk::MergeFrom(const WGRpcAgreeTeamApplicantAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcAgreeTeamApplicantAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcAgreeTeamApplicantAsk::CopyFrom(const WGRpcAgreeTeamApplicantAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcAgreeTeamApplicantAsk::IsInitialized() const {

  return true;
}

void WGRpcAgreeTeamApplicantAsk::Swap(WGRpcAgreeTeamApplicantAsk* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcAgreeTeamApplicantAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcAgreeTeamApplicantAsk_descriptor_;
  metadata.reflection = WGRpcAgreeTeamApplicantAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcAgreeTeamApplicantReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcAgreeTeamApplicantReply::WGRpcAgreeTeamApplicantReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcAgreeTeamApplicantReply::InitAsDefaultInstance() {
}

WGRpcAgreeTeamApplicantReply::WGRpcAgreeTeamApplicantReply(const WGRpcAgreeTeamApplicantReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcAgreeTeamApplicantReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcAgreeTeamApplicantReply::~WGRpcAgreeTeamApplicantReply() {
  SharedDtor();
}

void WGRpcAgreeTeamApplicantReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcAgreeTeamApplicantReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcAgreeTeamApplicantReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcAgreeTeamApplicantReply_descriptor_;
}

const WGRpcAgreeTeamApplicantReply& WGRpcAgreeTeamApplicantReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcAgreeTeamApplicantReply* WGRpcAgreeTeamApplicantReply::default_instance_ = NULL;

WGRpcAgreeTeamApplicantReply* WGRpcAgreeTeamApplicantReply::New() const {
  return new WGRpcAgreeTeamApplicantReply;
}

void WGRpcAgreeTeamApplicantReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcAgreeTeamApplicantReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcAgreeTeamApplicantReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcAgreeTeamApplicantReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcAgreeTeamApplicantReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcAgreeTeamApplicantReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcAgreeTeamApplicantReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcAgreeTeamApplicantReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcAgreeTeamApplicantReply::MergeFrom(const WGRpcAgreeTeamApplicantReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcAgreeTeamApplicantReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcAgreeTeamApplicantReply::CopyFrom(const WGRpcAgreeTeamApplicantReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcAgreeTeamApplicantReply::IsInitialized() const {

  return true;
}

void WGRpcAgreeTeamApplicantReply::Swap(WGRpcAgreeTeamApplicantReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcAgreeTeamApplicantReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcAgreeTeamApplicantReply_descriptor_;
  metadata.reflection = WGRpcAgreeTeamApplicantReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformLoginAsk::kTeamFieldNumber;
#endif  // !_MSC_VER

WGRpcInformLoginAsk::WGRpcInformLoginAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformLoginAsk::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

WGRpcInformLoginAsk::WGRpcInformLoginAsk(const WGRpcInformLoginAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformLoginAsk::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformLoginAsk::~WGRpcInformLoginAsk() {
  SharedDtor();
}

void WGRpcInformLoginAsk::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void WGRpcInformLoginAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformLoginAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformLoginAsk_descriptor_;
}

const WGRpcInformLoginAsk& WGRpcInformLoginAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformLoginAsk* WGRpcInformLoginAsk::default_instance_ = NULL;

WGRpcInformLoginAsk* WGRpcInformLoginAsk::New() const {
  return new WGRpcInformLoginAsk;
}

void WGRpcInformLoginAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformLoginAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformLoginAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformLoginAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformLoginAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformLoginAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformLoginAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformLoginAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformLoginAsk::MergeFrom(const WGRpcInformLoginAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformLoginAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformLoginAsk::CopyFrom(const WGRpcInformLoginAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformLoginAsk::IsInitialized() const {

  return true;
}

void WGRpcInformLoginAsk::Swap(WGRpcInformLoginAsk* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformLoginAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformLoginAsk_descriptor_;
  metadata.reflection = WGRpcInformLoginAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRpcInformLoginReply::kResultFieldNumber;
#endif  // !_MSC_VER

WGRpcInformLoginReply::WGRpcInformLoginReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRpcInformLoginReply::InitAsDefaultInstance() {
}

WGRpcInformLoginReply::WGRpcInformLoginReply(const WGRpcInformLoginReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRpcInformLoginReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRpcInformLoginReply::~WGRpcInformLoginReply() {
  SharedDtor();
}

void WGRpcInformLoginReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRpcInformLoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRpcInformLoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRpcInformLoginReply_descriptor_;
}

const WGRpcInformLoginReply& WGRpcInformLoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WGRpc_2eproto();
  return *default_instance_;
}

WGRpcInformLoginReply* WGRpcInformLoginReply::default_instance_ = NULL;

WGRpcInformLoginReply* WGRpcInformLoginReply::New() const {
  return new WGRpcInformLoginReply;
}

void WGRpcInformLoginReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRpcInformLoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRpcInformLoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRpcInformLoginReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRpcInformLoginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRpcInformLoginReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRpcInformLoginReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRpcInformLoginReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRpcInformLoginReply::MergeFrom(const WGRpcInformLoginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRpcInformLoginReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRpcInformLoginReply::CopyFrom(const WGRpcInformLoginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRpcInformLoginReply::IsInitialized() const {

  return true;
}

void WGRpcInformLoginReply::Swap(WGRpcInformLoginReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRpcInformLoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRpcInformLoginReply_descriptor_;
  metadata.reflection = WGRpcInformLoginReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
