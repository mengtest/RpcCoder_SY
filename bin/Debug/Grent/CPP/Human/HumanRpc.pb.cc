// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HumanRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HumanRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HumanRpcMoveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMoveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcStopMoveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcStopMoveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcStopMoveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcStopMoveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanRpcMoveCheckNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanRpcMoveCheckNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HumanRpc_2eproto() {
  protobuf_AddDesc_HumanRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HumanRpc.proto");
  GOOGLE_CHECK(file != NULL);
  HumanRpcMoveAsk_descriptor_ = file->message_type(0);
  static const int HumanRpcMoveAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, z_),
  };
  HumanRpcMoveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveAsk_descriptor_,
      HumanRpcMoveAsk::default_instance_,
      HumanRpcMoveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveAsk));
  HumanRpcMoveReply_descriptor_ = file->message_type(1);
  static const int HumanRpcMoveReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, dir_),
  };
  HumanRpcMoveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveReply_descriptor_,
      HumanRpcMoveReply::default_instance_,
      HumanRpcMoveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveReply));
  HumanRpcStopMoveAsk_descriptor_ = file->message_type(2);
  static const int HumanRpcStopMoveAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, z_),
  };
  HumanRpcStopMoveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcStopMoveAsk_descriptor_,
      HumanRpcStopMoveAsk::default_instance_,
      HumanRpcStopMoveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcStopMoveAsk));
  HumanRpcStopMoveReply_descriptor_ = file->message_type(3);
  static const int HumanRpcStopMoveReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, dir_),
  };
  HumanRpcStopMoveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcStopMoveReply_descriptor_,
      HumanRpcStopMoveReply::default_instance_,
      HumanRpcStopMoveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcStopMoveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcStopMoveReply));
  HumanRpcMoveCheckNotify_descriptor_ = file->message_type(4);
  static const int HumanRpcMoveCheckNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, y_),
  };
  HumanRpcMoveCheckNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanRpcMoveCheckNotify_descriptor_,
      HumanRpcMoveCheckNotify::default_instance_,
      HumanRpcMoveCheckNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanRpcMoveCheckNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanRpcMoveCheckNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HumanRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveAsk_descriptor_, &HumanRpcMoveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveReply_descriptor_, &HumanRpcMoveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcStopMoveAsk_descriptor_, &HumanRpcStopMoveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcStopMoveReply_descriptor_, &HumanRpcStopMoveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanRpcMoveCheckNotify_descriptor_, &HumanRpcMoveCheckNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HumanRpc_2eproto() {
  delete HumanRpcMoveAsk::default_instance_;
  delete HumanRpcMoveAsk_reflection_;
  delete HumanRpcMoveReply::default_instance_;
  delete HumanRpcMoveReply_reflection_;
  delete HumanRpcStopMoveAsk::default_instance_;
  delete HumanRpcStopMoveAsk_reflection_;
  delete HumanRpcStopMoveReply::default_instance_;
  delete HumanRpcStopMoveReply_reflection_;
  delete HumanRpcMoveCheckNotify::default_instance_;
  delete HumanRpcMoveCheckNotify_reflection_;
}

void protobuf_AddDesc_HumanRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016HumanRpc.proto\032\022PublicStruct.proto\"@\n\017"
    "HumanRpcMoveAsk\022\017\n\003Dir\030\002 \001(\002:\002-1\022\r\n\001X\030\003 "
    "\001(\002:\002-1\022\r\n\001Z\030\004 \001(\002:\002-1\"M\n\021HumanRpcMoveRe"
    "ply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\020\n\003Pos\030\002 \001(\0132"
    "\003.V3\022\017\n\003Dir\030\003 \001(\002:\002-1\"D\n\023HumanRpcStopMov"
    "eAsk\022\017\n\003Dir\030\002 \001(\002:\002-1\022\r\n\001X\030\003 \001(\002:\002-1\022\r\n\001"
    "Z\030\004 \001(\002:\002-1\"Q\n\025HumanRpcStopMoveReply\022\025\n\006"
    "Result\030\001 \001(\021:\005-9999\022\020\n\003Pos\030\002 \001(\0132\003.V3\022\017\n"
    "\003Dir\030\003 \001(\002:\002-1\"\\\n\027HumanRpcMoveCheckNotif"
    "y\022\022\n\006Obj_id\030\001 \001(\021:\002-1\022\017\n\003Dir\030\003 \001(\002:\002-1\022\r"
    "\n\001X\030\004 \001(\002:\002-1\022\r\n\001Y\030\005 \001(\002:\002-1", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HumanRpc.proto", &protobuf_RegisterTypes);
  HumanRpcMoveAsk::default_instance_ = new HumanRpcMoveAsk();
  HumanRpcMoveReply::default_instance_ = new HumanRpcMoveReply();
  HumanRpcStopMoveAsk::default_instance_ = new HumanRpcStopMoveAsk();
  HumanRpcStopMoveReply::default_instance_ = new HumanRpcStopMoveReply();
  HumanRpcMoveCheckNotify::default_instance_ = new HumanRpcMoveCheckNotify();
  HumanRpcMoveAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcMoveReply::default_instance_->InitAsDefaultInstance();
  HumanRpcStopMoveAsk::default_instance_->InitAsDefaultInstance();
  HumanRpcStopMoveReply::default_instance_->InitAsDefaultInstance();
  HumanRpcMoveCheckNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HumanRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HumanRpc_2eproto {
  StaticDescriptorInitializer_HumanRpc_2eproto() {
    protobuf_AddDesc_HumanRpc_2eproto();
  }
} static_descriptor_initializer_HumanRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveAsk::kDirFieldNumber;
const int HumanRpcMoveAsk::kXFieldNumber;
const int HumanRpcMoveAsk::kZFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveAsk::HumanRpcMoveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveAsk::InitAsDefaultInstance() {
}

HumanRpcMoveAsk::HumanRpcMoveAsk(const HumanRpcMoveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveAsk::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  x_ = -1;
  z_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveAsk::~HumanRpcMoveAsk() {
  SharedDtor();
}

void HumanRpcMoveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcMoveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveAsk_descriptor_;
}

const HumanRpcMoveAsk& HumanRpcMoveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveAsk* HumanRpcMoveAsk::default_instance_ = NULL;

HumanRpcMoveAsk* HumanRpcMoveAsk::New() const {
  return new HumanRpcMoveAsk;
}

void HumanRpcMoveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = -1;
    x_ = -1;
    z_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Dir = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_X;
        break;
      }

      // optional float X = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Z;
        break;
      }

      // optional float Z = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Dir = 2 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float X = 3 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Z = 4 [default = -1];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveAsk::MergeFrom(const HumanRpcMoveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveAsk::CopyFrom(const HumanRpcMoveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveAsk::IsInitialized() const {

  return true;
}

void HumanRpcMoveAsk::Swap(HumanRpcMoveAsk* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveAsk_descriptor_;
  metadata.reflection = HumanRpcMoveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveReply::kResultFieldNumber;
const int HumanRpcMoveReply::kPosFieldNumber;
const int HumanRpcMoveReply::kDirFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveReply::HumanRpcMoveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::V3*>(&::V3::default_instance());
}

HumanRpcMoveReply::HumanRpcMoveReply(const HumanRpcMoveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  pos_ = NULL;
  dir_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveReply::~HumanRpcMoveReply() {
  SharedDtor();
}

void HumanRpcMoveReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HumanRpcMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveReply_descriptor_;
}

const HumanRpcMoveReply& HumanRpcMoveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveReply* HumanRpcMoveReply::default_instance_ = NULL;

HumanRpcMoveReply* HumanRpcMoveReply::New() const {
  return new HumanRpcMoveReply;
}

void HumanRpcMoveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::V3::Clear();
    }
    dir_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .V3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .V3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveReply::MergeFrom(const HumanRpcMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::V3::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveReply::CopyFrom(const HumanRpcMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveReply::IsInitialized() const {

  return true;
}

void HumanRpcMoveReply::Swap(HumanRpcMoveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveReply_descriptor_;
  metadata.reflection = HumanRpcMoveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcStopMoveAsk::kDirFieldNumber;
const int HumanRpcStopMoveAsk::kXFieldNumber;
const int HumanRpcStopMoveAsk::kZFieldNumber;
#endif  // !_MSC_VER

HumanRpcStopMoveAsk::HumanRpcStopMoveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcStopMoveAsk::InitAsDefaultInstance() {
}

HumanRpcStopMoveAsk::HumanRpcStopMoveAsk(const HumanRpcStopMoveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcStopMoveAsk::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  x_ = -1;
  z_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcStopMoveAsk::~HumanRpcStopMoveAsk() {
  SharedDtor();
}

void HumanRpcStopMoveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcStopMoveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcStopMoveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcStopMoveAsk_descriptor_;
}

const HumanRpcStopMoveAsk& HumanRpcStopMoveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcStopMoveAsk* HumanRpcStopMoveAsk::default_instance_ = NULL;

HumanRpcStopMoveAsk* HumanRpcStopMoveAsk::New() const {
  return new HumanRpcStopMoveAsk;
}

void HumanRpcStopMoveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = -1;
    x_ = -1;
    z_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcStopMoveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Dir = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_X;
        break;
      }

      // optional float X = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Z;
        break;
      }

      // optional float Z = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcStopMoveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcStopMoveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Dir = 2 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional float X = 3 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float Z = 4 [default = -1];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcStopMoveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Dir = 2 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float X = 3 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Z = 4 [default = -1];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcStopMoveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcStopMoveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcStopMoveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcStopMoveAsk::MergeFrom(const HumanRpcStopMoveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcStopMoveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcStopMoveAsk::CopyFrom(const HumanRpcStopMoveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcStopMoveAsk::IsInitialized() const {

  return true;
}

void HumanRpcStopMoveAsk::Swap(HumanRpcStopMoveAsk* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcStopMoveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcStopMoveAsk_descriptor_;
  metadata.reflection = HumanRpcStopMoveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcStopMoveReply::kResultFieldNumber;
const int HumanRpcStopMoveReply::kPosFieldNumber;
const int HumanRpcStopMoveReply::kDirFieldNumber;
#endif  // !_MSC_VER

HumanRpcStopMoveReply::HumanRpcStopMoveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcStopMoveReply::InitAsDefaultInstance() {
  pos_ = const_cast< ::V3*>(&::V3::default_instance());
}

HumanRpcStopMoveReply::HumanRpcStopMoveReply(const HumanRpcStopMoveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcStopMoveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  pos_ = NULL;
  dir_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcStopMoveReply::~HumanRpcStopMoveReply() {
  SharedDtor();
}

void HumanRpcStopMoveReply::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HumanRpcStopMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcStopMoveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcStopMoveReply_descriptor_;
}

const HumanRpcStopMoveReply& HumanRpcStopMoveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcStopMoveReply* HumanRpcStopMoveReply::default_instance_ = NULL;

HumanRpcStopMoveReply* HumanRpcStopMoveReply::New() const {
  return new HumanRpcStopMoveReply;
}

void HumanRpcStopMoveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::V3::Clear();
    }
    dir_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcStopMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .V3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcStopMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcStopMoveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcStopMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .V3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcStopMoveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcStopMoveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcStopMoveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcStopMoveReply::MergeFrom(const HumanRpcStopMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      mutable_pos()->::V3::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcStopMoveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcStopMoveReply::CopyFrom(const HumanRpcStopMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcStopMoveReply::IsInitialized() const {

  return true;
}

void HumanRpcStopMoveReply::Swap(HumanRpcStopMoveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcStopMoveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcStopMoveReply_descriptor_;
  metadata.reflection = HumanRpcStopMoveReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanRpcMoveCheckNotify::kObjIdFieldNumber;
const int HumanRpcMoveCheckNotify::kDirFieldNumber;
const int HumanRpcMoveCheckNotify::kXFieldNumber;
const int HumanRpcMoveCheckNotify::kYFieldNumber;
#endif  // !_MSC_VER

HumanRpcMoveCheckNotify::HumanRpcMoveCheckNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HumanRpcMoveCheckNotify::InitAsDefaultInstance() {
}

HumanRpcMoveCheckNotify::HumanRpcMoveCheckNotify(const HumanRpcMoveCheckNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HumanRpcMoveCheckNotify::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = -1;
  dir_ = -1;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanRpcMoveCheckNotify::~HumanRpcMoveCheckNotify() {
  SharedDtor();
}

void HumanRpcMoveCheckNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HumanRpcMoveCheckNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HumanRpcMoveCheckNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanRpcMoveCheckNotify_descriptor_;
}

const HumanRpcMoveCheckNotify& HumanRpcMoveCheckNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HumanRpc_2eproto();
  return *default_instance_;
}

HumanRpcMoveCheckNotify* HumanRpcMoveCheckNotify::default_instance_ = NULL;

HumanRpcMoveCheckNotify* HumanRpcMoveCheckNotify::New() const {
  return new HumanRpcMoveCheckNotify;
}

void HumanRpcMoveCheckNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = -1;
    dir_ = -1;
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanRpcMoveCheckNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Obj_id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_X;
        break;
      }

      // optional float X = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Y;
        break;
      }

      // optional float Y = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanRpcMoveCheckNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Obj_id = 1 [default = -1];
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->obj_id(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional float X = 4 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float Y = 5 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanRpcMoveCheckNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Obj_id = 1 [default = -1];
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->obj_id(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional float X = 4 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float Y = 5 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanRpcMoveCheckNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Obj_id = 1 [default = -1];
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->obj_id());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float X = 4 [default = -1];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 5 [default = -1];
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HumanRpcMoveCheckNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanRpcMoveCheckNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanRpcMoveCheckNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanRpcMoveCheckNotify::MergeFrom(const HumanRpcMoveCheckNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanRpcMoveCheckNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanRpcMoveCheckNotify::CopyFrom(const HumanRpcMoveCheckNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanRpcMoveCheckNotify::IsInitialized() const {

  return true;
}

void HumanRpcMoveCheckNotify::Swap(HumanRpcMoveCheckNotify* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanRpcMoveCheckNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanRpcMoveCheckNotify_descriptor_;
  metadata.reflection = HumanRpcMoveCheckNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
