// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChatRpcChatAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcChatAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpcChatReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcChatReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpcPushChatUpdatesNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcPushChatUpdatesNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpcPushMarqueeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcPushMarqueeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpcSayNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcSayNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRpcServerChatNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRpcServerChatNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatRpc_2eproto() {
  protobuf_AddDesc_ChatRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ChatRpcChatAsk_descriptor_ = file->message_type(0);
  static const int ChatRpcChatAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatAsk, chat_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatAsk, chat_channel_),
  };
  ChatRpcChatAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcChatAsk_descriptor_,
      ChatRpcChatAsk::default_instance_,
      ChatRpcChatAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcChatAsk));
  ChatRpcChatReply_descriptor_ = file->message_type(1);
  static const int ChatRpcChatReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatReply, forbid_endtime_),
  };
  ChatRpcChatReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcChatReply_descriptor_,
      ChatRpcChatReply::default_instance_,
      ChatRpcChatReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcChatReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcChatReply));
  ChatRpcPushChatUpdatesNotify_descriptor_ = file->message_type(2);
  static const int ChatRpcPushChatUpdatesNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushChatUpdatesNotify, chat_channels_),
  };
  ChatRpcPushChatUpdatesNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcPushChatUpdatesNotify_descriptor_,
      ChatRpcPushChatUpdatesNotify::default_instance_,
      ChatRpcPushChatUpdatesNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushChatUpdatesNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushChatUpdatesNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcPushChatUpdatesNotify));
  ChatRpcPushMarqueeNotify_descriptor_ = file->message_type(3);
  static const int ChatRpcPushMarqueeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushMarqueeNotify, marquee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushMarqueeNotify, priority_),
  };
  ChatRpcPushMarqueeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcPushMarqueeNotify_descriptor_,
      ChatRpcPushMarqueeNotify::default_instance_,
      ChatRpcPushMarqueeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushMarqueeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcPushMarqueeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcPushMarqueeNotify));
  ChatRpcSayNotify_descriptor_ = file->message_type(4);
  static const int ChatRpcSayNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, interval_),
  };
  ChatRpcSayNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcSayNotify_descriptor_,
      ChatRpcSayNotify::default_instance_,
      ChatRpcSayNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcSayNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcSayNotify));
  ChatRpcServerChatNotify_descriptor_ = file->message_type(5);
  static const int ChatRpcServerChatNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, iparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, sparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, items_),
  };
  ChatRpcServerChatNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRpcServerChatNotify_descriptor_,
      ChatRpcServerChatNotify::default_instance_,
      ChatRpcServerChatNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRpcServerChatNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRpcServerChatNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcChatAsk_descriptor_, &ChatRpcChatAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcChatReply_descriptor_, &ChatRpcChatReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcPushChatUpdatesNotify_descriptor_, &ChatRpcPushChatUpdatesNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcPushMarqueeNotify_descriptor_, &ChatRpcPushMarqueeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcSayNotify_descriptor_, &ChatRpcSayNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRpcServerChatNotify_descriptor_, &ChatRpcServerChatNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatRpc_2eproto() {
  delete ChatRpcChatAsk::default_instance_;
  delete ChatRpcChatAsk_reflection_;
  delete ChatRpcChatReply::default_instance_;
  delete ChatRpcChatReply_reflection_;
  delete ChatRpcPushChatUpdatesNotify::default_instance_;
  delete ChatRpcPushChatUpdatesNotify_reflection_;
  delete ChatRpcPushMarqueeNotify::default_instance_;
  delete ChatRpcPushMarqueeNotify_reflection_;
  delete ChatRpcSayNotify::default_instance_;
  delete ChatRpcSayNotify_reflection_;
  delete ChatRpcServerChatNotify::default_instance_;
  delete ChatRpcServerChatNotify_reflection_;
}

void protobuf_AddDesc_ChatRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rChatRpc.proto\032\022PublicStruct.proto\"F\n\016C"
    "hatRpcChatAsk\022\032\n\010Chat_msg\030\001 \001(\0132\010.ChatMs"
    "g\022\030\n\014Chat_channel\030\002 \001(\005:\002-1\"E\n\020ChatRpcCh"
    "atReply\022\025\n\006Result\030\001 \001(\005:\005-9999\022\032\n\016Forbid"
    "_endtime\030\002 \001(\005:\002-1\"G\n\034ChatRpcPushChatUpd"
    "atesNotify\022\'\n\rChat_channels\030\001 \003(\0132\020.Chat"
    "ChannelData\"P\n\030ChatRpcPushMarqueeNotify\022"
    "\036\n\007Marquee\030\001 \003(\0132\r.AppendString\022\024\n\010Prior"
    "ity\030\002 \001(\005:\002-1\"v\n\020ChatRpcSayNotify\022\020\n\005Obj"
    "Id\030\001 \001(\004:\0010\022\021\n\006ChatId\030\002 \001(\005:\0010\022\023\n\010Durati"
    "on\030\003 \001(\005:\0010\022\023\n\010ChatType\030\004 \001(\005:\0010\022\023\n\010Inte"
    "rval\030\005 \001(\005:\0010\"z\n\027ChatRpcServerChatNotify"
    "\022\016\n\002Id\030\001 \001(\005:\002-1\022\023\n\007Channel\030\002 \001(\005:\002-1\022\017\n"
    "\007IParams\030\003 \003(\005\022\017\n\007SParams\030\004 \003(\t\022\030\n\005Items"
    "\030\005 \003(\0132\t.ItemData", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatRpc.proto", &protobuf_RegisterTypes);
  ChatRpcChatAsk::default_instance_ = new ChatRpcChatAsk();
  ChatRpcChatReply::default_instance_ = new ChatRpcChatReply();
  ChatRpcPushChatUpdatesNotify::default_instance_ = new ChatRpcPushChatUpdatesNotify();
  ChatRpcPushMarqueeNotify::default_instance_ = new ChatRpcPushMarqueeNotify();
  ChatRpcSayNotify::default_instance_ = new ChatRpcSayNotify();
  ChatRpcServerChatNotify::default_instance_ = new ChatRpcServerChatNotify();
  ChatRpcChatAsk::default_instance_->InitAsDefaultInstance();
  ChatRpcChatReply::default_instance_->InitAsDefaultInstance();
  ChatRpcPushChatUpdatesNotify::default_instance_->InitAsDefaultInstance();
  ChatRpcPushMarqueeNotify::default_instance_->InitAsDefaultInstance();
  ChatRpcSayNotify::default_instance_->InitAsDefaultInstance();
  ChatRpcServerChatNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatRpc_2eproto {
  StaticDescriptorInitializer_ChatRpc_2eproto() {
    protobuf_AddDesc_ChatRpc_2eproto();
  }
} static_descriptor_initializer_ChatRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChatRpcChatAsk::kChatMsgFieldNumber;
const int ChatRpcChatAsk::kChatChannelFieldNumber;
#endif  // !_MSC_VER

ChatRpcChatAsk::ChatRpcChatAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcChatAsk::InitAsDefaultInstance() {
  chat_msg_ = const_cast< ::ChatMsg*>(&::ChatMsg::default_instance());
}

ChatRpcChatAsk::ChatRpcChatAsk(const ChatRpcChatAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcChatAsk::SharedCtor() {
  _cached_size_ = 0;
  chat_msg_ = NULL;
  chat_channel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcChatAsk::~ChatRpcChatAsk() {
  SharedDtor();
}

void ChatRpcChatAsk::SharedDtor() {
  if (this != default_instance_) {
    delete chat_msg_;
  }
}

void ChatRpcChatAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcChatAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcChatAsk_descriptor_;
}

const ChatRpcChatAsk& ChatRpcChatAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcChatAsk* ChatRpcChatAsk::default_instance_ = NULL;

ChatRpcChatAsk* ChatRpcChatAsk::New() const {
  return new ChatRpcChatAsk;
}

void ChatRpcChatAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_msg()) {
      if (chat_msg_ != NULL) chat_msg_->::ChatMsg::Clear();
    }
    chat_channel_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcChatAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatMsg Chat_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Chat_channel;
        break;
      }

      // optional int32 Chat_channel = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chat_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_channel_)));
          set_has_chat_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcChatAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatMsg Chat_msg = 1;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_msg(), output);
  }

  // optional int32 Chat_channel = 2 [default = -1];
  if (has_chat_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcChatAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatMsg Chat_msg = 1;
  if (has_chat_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chat_msg(), target);
  }

  // optional int32 Chat_channel = 2 [default = -1];
  if (has_chat_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcChatAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatMsg Chat_msg = 1;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_msg());
    }

    // optional int32 Chat_channel = 2 [default = -1];
    if (has_chat_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcChatAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcChatAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcChatAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcChatAsk::MergeFrom(const ChatRpcChatAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_msg()) {
      mutable_chat_msg()->::ChatMsg::MergeFrom(from.chat_msg());
    }
    if (from.has_chat_channel()) {
      set_chat_channel(from.chat_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcChatAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcChatAsk::CopyFrom(const ChatRpcChatAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcChatAsk::IsInitialized() const {

  return true;
}

void ChatRpcChatAsk::Swap(ChatRpcChatAsk* other) {
  if (other != this) {
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(chat_channel_, other->chat_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcChatAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcChatAsk_descriptor_;
  metadata.reflection = ChatRpcChatAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpcChatReply::kResultFieldNumber;
const int ChatRpcChatReply::kForbidEndtimeFieldNumber;
#endif  // !_MSC_VER

ChatRpcChatReply::ChatRpcChatReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcChatReply::InitAsDefaultInstance() {
}

ChatRpcChatReply::ChatRpcChatReply(const ChatRpcChatReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcChatReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  forbid_endtime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcChatReply::~ChatRpcChatReply() {
  SharedDtor();
}

void ChatRpcChatReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRpcChatReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcChatReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcChatReply_descriptor_;
}

const ChatRpcChatReply& ChatRpcChatReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcChatReply* ChatRpcChatReply::default_instance_ = NULL;

ChatRpcChatReply* ChatRpcChatReply::New() const {
  return new ChatRpcChatReply;
}

void ChatRpcChatReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    forbid_endtime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcChatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Forbid_endtime;
        break;
      }

      // optional int32 Forbid_endtime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Forbid_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forbid_endtime_)));
          set_has_forbid_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcChatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 Forbid_endtime = 2 [default = -1];
  if (has_forbid_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forbid_endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcChatReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 Forbid_endtime = 2 [default = -1];
  if (has_forbid_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->forbid_endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcChatReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Forbid_endtime = 2 [default = -1];
    if (has_forbid_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forbid_endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcChatReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcChatReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcChatReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcChatReply::MergeFrom(const ChatRpcChatReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_forbid_endtime()) {
      set_forbid_endtime(from.forbid_endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcChatReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcChatReply::CopyFrom(const ChatRpcChatReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcChatReply::IsInitialized() const {

  return true;
}

void ChatRpcChatReply::Swap(ChatRpcChatReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(forbid_endtime_, other->forbid_endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcChatReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcChatReply_descriptor_;
  metadata.reflection = ChatRpcChatReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpcPushChatUpdatesNotify::kChatChannelsFieldNumber;
#endif  // !_MSC_VER

ChatRpcPushChatUpdatesNotify::ChatRpcPushChatUpdatesNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcPushChatUpdatesNotify::InitAsDefaultInstance() {
}

ChatRpcPushChatUpdatesNotify::ChatRpcPushChatUpdatesNotify(const ChatRpcPushChatUpdatesNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcPushChatUpdatesNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcPushChatUpdatesNotify::~ChatRpcPushChatUpdatesNotify() {
  SharedDtor();
}

void ChatRpcPushChatUpdatesNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRpcPushChatUpdatesNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcPushChatUpdatesNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcPushChatUpdatesNotify_descriptor_;
}

const ChatRpcPushChatUpdatesNotify& ChatRpcPushChatUpdatesNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcPushChatUpdatesNotify* ChatRpcPushChatUpdatesNotify::default_instance_ = NULL;

ChatRpcPushChatUpdatesNotify* ChatRpcPushChatUpdatesNotify::New() const {
  return new ChatRpcPushChatUpdatesNotify;
}

void ChatRpcPushChatUpdatesNotify::Clear() {
  chat_channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcPushChatUpdatesNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChatChannelData Chat_channels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chat_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Chat_channels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcPushChatUpdatesNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ChatChannelData Chat_channels = 1;
  for (int i = 0; i < this->chat_channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcPushChatUpdatesNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ChatChannelData Chat_channels = 1;
  for (int i = 0; i < this->chat_channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chat_channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcPushChatUpdatesNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ChatChannelData Chat_channels = 1;
  total_size += 1 * this->chat_channels_size();
  for (int i = 0; i < this->chat_channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcPushChatUpdatesNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcPushChatUpdatesNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcPushChatUpdatesNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcPushChatUpdatesNotify::MergeFrom(const ChatRpcPushChatUpdatesNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_channels_.MergeFrom(from.chat_channels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcPushChatUpdatesNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcPushChatUpdatesNotify::CopyFrom(const ChatRpcPushChatUpdatesNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcPushChatUpdatesNotify::IsInitialized() const {

  return true;
}

void ChatRpcPushChatUpdatesNotify::Swap(ChatRpcPushChatUpdatesNotify* other) {
  if (other != this) {
    chat_channels_.Swap(&other->chat_channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcPushChatUpdatesNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcPushChatUpdatesNotify_descriptor_;
  metadata.reflection = ChatRpcPushChatUpdatesNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpcPushMarqueeNotify::kMarqueeFieldNumber;
const int ChatRpcPushMarqueeNotify::kPriorityFieldNumber;
#endif  // !_MSC_VER

ChatRpcPushMarqueeNotify::ChatRpcPushMarqueeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcPushMarqueeNotify::InitAsDefaultInstance() {
}

ChatRpcPushMarqueeNotify::ChatRpcPushMarqueeNotify(const ChatRpcPushMarqueeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcPushMarqueeNotify::SharedCtor() {
  _cached_size_ = 0;
  priority_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcPushMarqueeNotify::~ChatRpcPushMarqueeNotify() {
  SharedDtor();
}

void ChatRpcPushMarqueeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRpcPushMarqueeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcPushMarqueeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcPushMarqueeNotify_descriptor_;
}

const ChatRpcPushMarqueeNotify& ChatRpcPushMarqueeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcPushMarqueeNotify* ChatRpcPushMarqueeNotify::default_instance_ = NULL;

ChatRpcPushMarqueeNotify* ChatRpcPushMarqueeNotify::New() const {
  return new ChatRpcPushMarqueeNotify;
}

void ChatRpcPushMarqueeNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    priority_ = -1;
  }
  marquee_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcPushMarqueeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AppendString Marquee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Marquee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marquee()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Marquee;
        if (input->ExpectTag(16)) goto parse_Priority;
        break;
      }

      // optional int32 Priority = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcPushMarqueeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AppendString Marquee = 1;
  for (int i = 0; i < this->marquee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marquee(i), output);
  }

  // optional int32 Priority = 2 [default = -1];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcPushMarqueeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AppendString Marquee = 1;
  for (int i = 0; i < this->marquee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marquee(i), target);
  }

  // optional int32 Priority = 2 [default = -1];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcPushMarqueeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 Priority = 2 [default = -1];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  // repeated .AppendString Marquee = 1;
  total_size += 1 * this->marquee_size();
  for (int i = 0; i < this->marquee_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marquee(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcPushMarqueeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcPushMarqueeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcPushMarqueeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcPushMarqueeNotify::MergeFrom(const ChatRpcPushMarqueeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  marquee_.MergeFrom(from.marquee_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcPushMarqueeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcPushMarqueeNotify::CopyFrom(const ChatRpcPushMarqueeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcPushMarqueeNotify::IsInitialized() const {

  return true;
}

void ChatRpcPushMarqueeNotify::Swap(ChatRpcPushMarqueeNotify* other) {
  if (other != this) {
    marquee_.Swap(&other->marquee_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcPushMarqueeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcPushMarqueeNotify_descriptor_;
  metadata.reflection = ChatRpcPushMarqueeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpcSayNotify::kObjIdFieldNumber;
const int ChatRpcSayNotify::kChatIdFieldNumber;
const int ChatRpcSayNotify::kDurationFieldNumber;
const int ChatRpcSayNotify::kChatTypeFieldNumber;
const int ChatRpcSayNotify::kIntervalFieldNumber;
#endif  // !_MSC_VER

ChatRpcSayNotify::ChatRpcSayNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcSayNotify::InitAsDefaultInstance() {
}

ChatRpcSayNotify::ChatRpcSayNotify(const ChatRpcSayNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcSayNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_ULONGLONG(0);
  chatid_ = 0;
  duration_ = 0;
  chattype_ = 0;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcSayNotify::~ChatRpcSayNotify() {
  SharedDtor();
}

void ChatRpcSayNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRpcSayNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcSayNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcSayNotify_descriptor_;
}

const ChatRpcSayNotify& ChatRpcSayNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcSayNotify* ChatRpcSayNotify::default_instance_ = NULL;

ChatRpcSayNotify* ChatRpcSayNotify::New() const {
  return new ChatRpcSayNotify;
}

void ChatRpcSayNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = GOOGLE_ULONGLONG(0);
    chatid_ = 0;
    duration_ = 0;
    chattype_ = 0;
    interval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcSayNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ObjId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChatId;
        break;
      }

      // optional int32 ChatId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Duration;
        break;
      }

      // optional int32 Duration = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ChatType;
        break;
      }

      // optional int32 ChatType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Interval;
        break;
      }

      // optional int32 Interval = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcSayNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ObjId = 1 [default = 0];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->objid(), output);
  }

  // optional int32 ChatId = 2 [default = 0];
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chatid(), output);
  }

  // optional int32 Duration = 3 [default = 0];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional int32 ChatType = 4 [default = 0];
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  // optional int32 Interval = 5 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcSayNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ObjId = 1 [default = 0];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->objid(), target);
  }

  // optional int32 ChatId = 2 [default = 0];
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chatid(), target);
  }

  // optional int32 Duration = 3 [default = 0];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // optional int32 ChatType = 4 [default = 0];
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  // optional int32 Interval = 5 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcSayNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ObjId = 1 [default = 0];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objid());
    }

    // optional int32 ChatId = 2 [default = 0];
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatid());
    }

    // optional int32 Duration = 3 [default = 0];
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 ChatType = 4 [default = 0];
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // optional int32 Interval = 5 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcSayNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcSayNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcSayNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcSayNotify::MergeFrom(const ChatRpcSayNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcSayNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcSayNotify::CopyFrom(const ChatRpcSayNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcSayNotify::IsInitialized() const {

  return true;
}

void ChatRpcSayNotify::Swap(ChatRpcSayNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(chatid_, other->chatid_);
    std::swap(duration_, other->duration_);
    std::swap(chattype_, other->chattype_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcSayNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcSayNotify_descriptor_;
  metadata.reflection = ChatRpcSayNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRpcServerChatNotify::kIdFieldNumber;
const int ChatRpcServerChatNotify::kChannelFieldNumber;
const int ChatRpcServerChatNotify::kIParamsFieldNumber;
const int ChatRpcServerChatNotify::kSParamsFieldNumber;
const int ChatRpcServerChatNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

ChatRpcServerChatNotify::ChatRpcServerChatNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRpcServerChatNotify::InitAsDefaultInstance() {
}

ChatRpcServerChatNotify::ChatRpcServerChatNotify(const ChatRpcServerChatNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRpcServerChatNotify::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  channel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRpcServerChatNotify::~ChatRpcServerChatNotify() {
  SharedDtor();
}

void ChatRpcServerChatNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatRpcServerChatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRpcServerChatNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRpcServerChatNotify_descriptor_;
}

const ChatRpcServerChatNotify& ChatRpcServerChatNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatRpc_2eproto();
  return *default_instance_;
}

ChatRpcServerChatNotify* ChatRpcServerChatNotify::default_instance_ = NULL;

ChatRpcServerChatNotify* ChatRpcServerChatNotify::New() const {
  return new ChatRpcServerChatNotify;
}

void ChatRpcServerChatNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    channel_ = -1;
  }
  iparams_.Clear();
  sparams_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRpcServerChatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Channel;
        break;
      }

      // optional int32 Channel = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IParams;
        break;
      }

      // repeated int32 IParams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IParams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_iparams())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iparams())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IParams;
        if (input->ExpectTag(34)) goto parse_SParams;
        break;
      }

      // repeated string SParams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparams(this->sparams_size() - 1).data(),
            this->sparams(this->sparams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SParams;
        if (input->ExpectTag(42)) goto parse_Items;
        break;
      }

      // repeated .ItemData Items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRpcServerChatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Channel = 2 [default = -1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // repeated int32 IParams = 3;
  for (int i = 0; i < this->iparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->iparams(i), output);
  }

  // repeated string SParams = 4;
  for (int i = 0; i < this->sparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sparams(i).data(), this->sparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sparams(i), output);
  }

  // repeated .ItemData Items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRpcServerChatNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Channel = 2 [default = -1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // repeated int32 IParams = 3;
  for (int i = 0; i < this->iparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->iparams(i), target);
  }

  // repeated string SParams = 4;
  for (int i = 0; i < this->sparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparams(i).data(), this->sparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sparams(i), target);
  }

  // repeated .ItemData Items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRpcServerChatNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Channel = 2 [default = -1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  // repeated int32 IParams = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->iparams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iparams(i));
    }
    total_size += 1 * this->iparams_size() + data_size;
  }

  // repeated string SParams = 4;
  total_size += 1 * this->sparams_size();
  for (int i = 0; i < this->sparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sparams(i));
  }

  // repeated .ItemData Items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRpcServerChatNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRpcServerChatNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRpcServerChatNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRpcServerChatNotify::MergeFrom(const ChatRpcServerChatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  iparams_.MergeFrom(from.iparams_);
  sparams_.MergeFrom(from.sparams_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRpcServerChatNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRpcServerChatNotify::CopyFrom(const ChatRpcServerChatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRpcServerChatNotify::IsInitialized() const {

  return true;
}

void ChatRpcServerChatNotify::Swap(ChatRpcServerChatNotify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(channel_, other->channel_);
    iparams_.Swap(&other->iparams_);
    sparams_.Swap(&other->sparams_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRpcServerChatNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRpcServerChatNotify_descriptor_;
  metadata.reflection = ChatRpcServerChatNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
