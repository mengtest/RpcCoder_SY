// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DungeonRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcCreateDungeonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcExitDungeonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonRpcExitDungeonReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DungeonRpc_2eproto() {
  protobuf_AddDesc_DungeonRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DungeonRpc.proto");
  GOOGLE_CHECK(file != NULL);
  DungeonRpcCreateDungeonAsk_descriptor_ = file->message_type(0);
  static const int DungeonRpcCreateDungeonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, dungeonconfigid_),
  };
  DungeonRpcCreateDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateDungeonAsk_descriptor_,
      DungeonRpcCreateDungeonAsk::default_instance_,
      DungeonRpcCreateDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateDungeonAsk));
  DungeonRpcCreateDungeonReply_descriptor_ = file->message_type(1);
  static const int DungeonRpcCreateDungeonReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, dungeonconfigid_),
  };
  DungeonRpcCreateDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcCreateDungeonReply_descriptor_,
      DungeonRpcCreateDungeonReply::default_instance_,
      DungeonRpcCreateDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcCreateDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcCreateDungeonReply));
  DungeonRpcExitDungeonAsk_descriptor_ = file->message_type(2);
  static const int DungeonRpcExitDungeonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, sceneid_),
  };
  DungeonRpcExitDungeonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcExitDungeonAsk_descriptor_,
      DungeonRpcExitDungeonAsk::default_instance_,
      DungeonRpcExitDungeonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcExitDungeonAsk));
  DungeonRpcExitDungeonReply_descriptor_ = file->message_type(3);
  static const int DungeonRpcExitDungeonReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, result_),
  };
  DungeonRpcExitDungeonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonRpcExitDungeonReply_descriptor_,
      DungeonRpcExitDungeonReply::default_instance_,
      DungeonRpcExitDungeonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcExitDungeonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonRpcExitDungeonReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DungeonRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateDungeonAsk_descriptor_, &DungeonRpcCreateDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcCreateDungeonReply_descriptor_, &DungeonRpcCreateDungeonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcExitDungeonAsk_descriptor_, &DungeonRpcExitDungeonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonRpcExitDungeonReply_descriptor_, &DungeonRpcExitDungeonReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DungeonRpc_2eproto() {
  delete DungeonRpcCreateDungeonAsk::default_instance_;
  delete DungeonRpcCreateDungeonAsk_reflection_;
  delete DungeonRpcCreateDungeonReply::default_instance_;
  delete DungeonRpcCreateDungeonReply_reflection_;
  delete DungeonRpcExitDungeonAsk::default_instance_;
  delete DungeonRpcExitDungeonAsk_reflection_;
  delete DungeonRpcExitDungeonReply::default_instance_;
  delete DungeonRpcExitDungeonReply_reflection_;
}

void protobuf_AddDesc_DungeonRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DungeonRpc.proto\032\022PublicStruct.proto\"L"
    "\n\032DungeonRpcCreateDungeonAsk\022\021\n\006RoleId\030\001"
    " \001(\004:\0010\022\033\n\017DungeonConfigId\030\002 \001(\021:\002-1\"R\n\034"
    "DungeonRpcCreateDungeonReply\022\025\n\006Result\030\001"
    " \001(\021:\005-9999\022\033\n\017DungeonConfigId\030\002 \001(\021:\002-1"
    "\"B\n\030DungeonRpcExitDungeonAsk\022\021\n\006RoleId\030\001"
    " \001(\004:\0010\022\023\n\007SceneId\030\002 \001(\021:\002-1\"3\n\032DungeonR"
    "pcExitDungeonReply\022\025\n\006Result\030\001 \001(\021:\005-999"
    "9", 321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DungeonRpc.proto", &protobuf_RegisterTypes);
  DungeonRpcCreateDungeonAsk::default_instance_ = new DungeonRpcCreateDungeonAsk();
  DungeonRpcCreateDungeonReply::default_instance_ = new DungeonRpcCreateDungeonReply();
  DungeonRpcExitDungeonAsk::default_instance_ = new DungeonRpcExitDungeonAsk();
  DungeonRpcExitDungeonReply::default_instance_ = new DungeonRpcExitDungeonReply();
  DungeonRpcCreateDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcCreateDungeonReply::default_instance_->InitAsDefaultInstance();
  DungeonRpcExitDungeonAsk::default_instance_->InitAsDefaultInstance();
  DungeonRpcExitDungeonReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DungeonRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DungeonRpc_2eproto {
  StaticDescriptorInitializer_DungeonRpc_2eproto() {
    protobuf_AddDesc_DungeonRpc_2eproto();
  }
} static_descriptor_initializer_DungeonRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateDungeonAsk::kRoleIdFieldNumber;
const int DungeonRpcCreateDungeonAsk::kDungeonConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateDungeonAsk::DungeonRpcCreateDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcCreateDungeonAsk::DungeonRpcCreateDungeonAsk(const DungeonRpcCreateDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  dungeonconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateDungeonAsk::~DungeonRpcCreateDungeonAsk() {
  SharedDtor();
}

void DungeonRpcCreateDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateDungeonAsk_descriptor_;
}

const DungeonRpcCreateDungeonAsk& DungeonRpcCreateDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateDungeonAsk* DungeonRpcCreateDungeonAsk::default_instance_ = NULL;

DungeonRpcCreateDungeonAsk* DungeonRpcCreateDungeonAsk::New() const {
  return new DungeonRpcCreateDungeonAsk;
}

void DungeonRpcCreateDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    dungeonconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional sint32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeonconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeonconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateDungeonAsk::MergeFrom(const DungeonRpcCreateDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonAsk::CopyFrom(const DungeonRpcCreateDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcCreateDungeonAsk::Swap(DungeonRpcCreateDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcCreateDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcCreateDungeonReply::kResultFieldNumber;
const int DungeonRpcCreateDungeonReply::kDungeonConfigIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcCreateDungeonReply::DungeonRpcCreateDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcCreateDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcCreateDungeonReply::DungeonRpcCreateDungeonReply(const DungeonRpcCreateDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  dungeonconfigid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcCreateDungeonReply::~DungeonRpcCreateDungeonReply() {
  SharedDtor();
}

void DungeonRpcCreateDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcCreateDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcCreateDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcCreateDungeonReply_descriptor_;
}

const DungeonRpcCreateDungeonReply& DungeonRpcCreateDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcCreateDungeonReply* DungeonRpcCreateDungeonReply::default_instance_ = NULL;

DungeonRpcCreateDungeonReply* DungeonRpcCreateDungeonReply::New() const {
  return new DungeonRpcCreateDungeonReply;
}

void DungeonRpcCreateDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    dungeonconfigid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcCreateDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DungeonConfigId;
        break;
      }

      // optional sint32 DungeonConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DungeonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonconfigid_)));
          set_has_dungeonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcCreateDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeonconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcCreateDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 DungeonConfigId = 2 [default = -1];
  if (has_dungeonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeonconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcCreateDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 DungeonConfigId = 2 [default = -1];
    if (has_dungeonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcCreateDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcCreateDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcCreateDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcCreateDungeonReply::MergeFrom(const DungeonRpcCreateDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_dungeonconfigid()) {
      set_dungeonconfigid(from.dungeonconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcCreateDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcCreateDungeonReply::CopyFrom(const DungeonRpcCreateDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcCreateDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcCreateDungeonReply::Swap(DungeonRpcCreateDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dungeonconfigid_, other->dungeonconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcCreateDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcCreateDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcCreateDungeonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcExitDungeonAsk::kRoleIdFieldNumber;
const int DungeonRpcExitDungeonAsk::kSceneIdFieldNumber;
#endif  // !_MSC_VER

DungeonRpcExitDungeonAsk::DungeonRpcExitDungeonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcExitDungeonAsk::InitAsDefaultInstance() {
}

DungeonRpcExitDungeonAsk::DungeonRpcExitDungeonAsk(const DungeonRpcExitDungeonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcExitDungeonAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcExitDungeonAsk::~DungeonRpcExitDungeonAsk() {
  SharedDtor();
}

void DungeonRpcExitDungeonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcExitDungeonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcExitDungeonAsk_descriptor_;
}

const DungeonRpcExitDungeonAsk& DungeonRpcExitDungeonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcExitDungeonAsk* DungeonRpcExitDungeonAsk::default_instance_ = NULL;

DungeonRpcExitDungeonAsk* DungeonRpcExitDungeonAsk::New() const {
  return new DungeonRpcExitDungeonAsk;
}

void DungeonRpcExitDungeonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcExitDungeonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcExitDungeonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcExitDungeonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcExitDungeonAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcExitDungeonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcExitDungeonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcExitDungeonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcExitDungeonAsk::MergeFrom(const DungeonRpcExitDungeonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcExitDungeonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcExitDungeonAsk::CopyFrom(const DungeonRpcExitDungeonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcExitDungeonAsk::IsInitialized() const {

  return true;
}

void DungeonRpcExitDungeonAsk::Swap(DungeonRpcExitDungeonAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcExitDungeonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcExitDungeonAsk_descriptor_;
  metadata.reflection = DungeonRpcExitDungeonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonRpcExitDungeonReply::kResultFieldNumber;
#endif  // !_MSC_VER

DungeonRpcExitDungeonReply::DungeonRpcExitDungeonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DungeonRpcExitDungeonReply::InitAsDefaultInstance() {
}

DungeonRpcExitDungeonReply::DungeonRpcExitDungeonReply(const DungeonRpcExitDungeonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DungeonRpcExitDungeonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonRpcExitDungeonReply::~DungeonRpcExitDungeonReply() {
  SharedDtor();
}

void DungeonRpcExitDungeonReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonRpcExitDungeonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcExitDungeonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonRpcExitDungeonReply_descriptor_;
}

const DungeonRpcExitDungeonReply& DungeonRpcExitDungeonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonRpc_2eproto();
  return *default_instance_;
}

DungeonRpcExitDungeonReply* DungeonRpcExitDungeonReply::default_instance_ = NULL;

DungeonRpcExitDungeonReply* DungeonRpcExitDungeonReply::New() const {
  return new DungeonRpcExitDungeonReply;
}

void DungeonRpcExitDungeonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonRpcExitDungeonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DungeonRpcExitDungeonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DungeonRpcExitDungeonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DungeonRpcExitDungeonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcExitDungeonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonRpcExitDungeonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonRpcExitDungeonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonRpcExitDungeonReply::MergeFrom(const DungeonRpcExitDungeonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonRpcExitDungeonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcExitDungeonReply::CopyFrom(const DungeonRpcExitDungeonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcExitDungeonReply::IsInitialized() const {

  return true;
}

void DungeonRpcExitDungeonReply::Swap(DungeonRpcExitDungeonReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonRpcExitDungeonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonRpcExitDungeonReply_descriptor_;
  metadata.reflection = DungeonRpcExitDungeonReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
