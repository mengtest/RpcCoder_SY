// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerModelRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerModelRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ServerModelRpcLoginAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerModelRpcLoginAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerModelRpcLoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerModelRpcLoginReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerModelRpc_2eproto() {
  protobuf_AddDesc_ServerModelRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerModelRpc.proto");
  GOOGLE_CHECK(file != NULL);
  ServerModelRpcLoginAsk_descriptor_ = file->message_type(0);
  static const int ServerModelRpcLoginAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginAsk, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginAsk, teststring_),
  };
  ServerModelRpcLoginAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerModelRpcLoginAsk_descriptor_,
      ServerModelRpcLoginAsk::default_instance_,
      ServerModelRpcLoginAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerModelRpcLoginAsk));
  ServerModelRpcLoginReply_descriptor_ = file->message_type(1);
  static const int ServerModelRpcLoginReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginReply, result_),
  };
  ServerModelRpcLoginReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerModelRpcLoginReply_descriptor_,
      ServerModelRpcLoginReply::default_instance_,
      ServerModelRpcLoginReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerModelRpcLoginReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerModelRpcLoginReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerModelRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerModelRpcLoginAsk_descriptor_, &ServerModelRpcLoginAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerModelRpcLoginReply_descriptor_, &ServerModelRpcLoginReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerModelRpc_2eproto() {
  delete ServerModelRpcLoginAsk::default_instance_;
  delete ServerModelRpcLoginAsk_reflection_;
  delete ServerModelRpcLoginReply::default_instance_;
  delete ServerModelRpcLoginReply_reflection_;
}

void protobuf_AddDesc_ServerModelRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ServerModelRpc.proto\032\022PublicStruct.pro"
    "to\"R\n\026ServerModelRpcLoginAsk\022\022\n\006Result\030\001"
    " \001(\021:\002-1\022\020\n\004Type\030\002 \001(\021:\002-1\022\022\n\nTestString"
    "\030\003 \001(\t\"1\n\030ServerModelRpcLoginReply\022\025\n\006Re"
    "sult\030\001 \001(\021:\005-9999", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerModelRpc.proto", &protobuf_RegisterTypes);
  ServerModelRpcLoginAsk::default_instance_ = new ServerModelRpcLoginAsk();
  ServerModelRpcLoginReply::default_instance_ = new ServerModelRpcLoginReply();
  ServerModelRpcLoginAsk::default_instance_->InitAsDefaultInstance();
  ServerModelRpcLoginReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerModelRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerModelRpc_2eproto {
  StaticDescriptorInitializer_ServerModelRpc_2eproto() {
    protobuf_AddDesc_ServerModelRpc_2eproto();
  }
} static_descriptor_initializer_ServerModelRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerModelRpcLoginAsk::kResultFieldNumber;
const int ServerModelRpcLoginAsk::kTypeFieldNumber;
const int ServerModelRpcLoginAsk::kTestStringFieldNumber;
#endif  // !_MSC_VER

ServerModelRpcLoginAsk::ServerModelRpcLoginAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerModelRpcLoginAsk::InitAsDefaultInstance() {
}

ServerModelRpcLoginAsk::ServerModelRpcLoginAsk(const ServerModelRpcLoginAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerModelRpcLoginAsk::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  type_ = -1;
  teststring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerModelRpcLoginAsk::~ServerModelRpcLoginAsk() {
  SharedDtor();
}

void ServerModelRpcLoginAsk::SharedDtor() {
  if (teststring_ != &::google::protobuf::internal::kEmptyString) {
    delete teststring_;
  }
  if (this != default_instance_) {
  }
}

void ServerModelRpcLoginAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerModelRpcLoginAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerModelRpcLoginAsk_descriptor_;
}

const ServerModelRpcLoginAsk& ServerModelRpcLoginAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerModelRpc_2eproto();
  return *default_instance_;
}

ServerModelRpcLoginAsk* ServerModelRpcLoginAsk::default_instance_ = NULL;

ServerModelRpcLoginAsk* ServerModelRpcLoginAsk::New() const {
  return new ServerModelRpcLoginAsk;
}

void ServerModelRpcLoginAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -1;
    type_ = -1;
    if (has_teststring()) {
      if (teststring_ != &::google::protobuf::internal::kEmptyString) {
        teststring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerModelRpcLoginAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TestString;
        break;
      }

      // optional string TestString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TestString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teststring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teststring().data(), this->teststring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerModelRpcLoginAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -1];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  // optional string TestString = 3;
  if (has_teststring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teststring().data(), this->teststring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->teststring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerModelRpcLoginAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -1];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  // optional string TestString = 3;
  if (has_teststring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teststring().data(), this->teststring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->teststring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerModelRpcLoginAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional string TestString = 3;
    if (has_teststring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teststring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerModelRpcLoginAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerModelRpcLoginAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerModelRpcLoginAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerModelRpcLoginAsk::MergeFrom(const ServerModelRpcLoginAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_teststring()) {
      set_teststring(from.teststring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerModelRpcLoginAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerModelRpcLoginAsk::CopyFrom(const ServerModelRpcLoginAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerModelRpcLoginAsk::IsInitialized() const {

  return true;
}

void ServerModelRpcLoginAsk::Swap(ServerModelRpcLoginAsk* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(teststring_, other->teststring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerModelRpcLoginAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerModelRpcLoginAsk_descriptor_;
  metadata.reflection = ServerModelRpcLoginAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerModelRpcLoginReply::kResultFieldNumber;
#endif  // !_MSC_VER

ServerModelRpcLoginReply::ServerModelRpcLoginReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerModelRpcLoginReply::InitAsDefaultInstance() {
}

ServerModelRpcLoginReply::ServerModelRpcLoginReply(const ServerModelRpcLoginReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerModelRpcLoginReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerModelRpcLoginReply::~ServerModelRpcLoginReply() {
  SharedDtor();
}

void ServerModelRpcLoginReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerModelRpcLoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerModelRpcLoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerModelRpcLoginReply_descriptor_;
}

const ServerModelRpcLoginReply& ServerModelRpcLoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerModelRpc_2eproto();
  return *default_instance_;
}

ServerModelRpcLoginReply* ServerModelRpcLoginReply::default_instance_ = NULL;

ServerModelRpcLoginReply* ServerModelRpcLoginReply::New() const {
  return new ServerModelRpcLoginReply;
}

void ServerModelRpcLoginReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerModelRpcLoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerModelRpcLoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerModelRpcLoginReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerModelRpcLoginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerModelRpcLoginReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerModelRpcLoginReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerModelRpcLoginReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerModelRpcLoginReply::MergeFrom(const ServerModelRpcLoginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerModelRpcLoginReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerModelRpcLoginReply::CopyFrom(const ServerModelRpcLoginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerModelRpcLoginReply::IsInitialized() const {

  return true;
}

void ServerModelRpcLoginReply::Swap(ServerModelRpcLoginReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerModelRpcLoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerModelRpcLoginReply_descriptor_;
  metadata.reflection = ServerModelRpcLoginReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
