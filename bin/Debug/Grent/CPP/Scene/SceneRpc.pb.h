// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneRpc.proto

#ifndef PROTOBUF_SceneRpc_2eproto__INCLUDED
#define PROTOBUF_SceneRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneRpc_2eproto();
void protobuf_AssignDesc_SceneRpc_2eproto();
void protobuf_ShutdownFile_SceneRpc_2eproto();

class SceneRpcEnterSceneAsk;
class SceneRpcEnterSceneReply;
class SceneRpcLoadSceneCompleteAsk;
class SceneRpcLoadSceneCompleteReply;
class SceneRpcNewPlayerNotify;
class SceneRpcDeletePlayerNotify;
class SceneRpcConnectGameServerAsk;
class SceneRpcConnectGameServerReply;

// ===================================================================

class SceneRpcEnterSceneAsk : public ::google::protobuf::Message {
 public:
  SceneRpcEnterSceneAsk();
  virtual ~SceneRpcEnterSceneAsk();

  SceneRpcEnterSceneAsk(const SceneRpcEnterSceneAsk& from);

  inline SceneRpcEnterSceneAsk& operator=(const SceneRpcEnterSceneAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcEnterSceneAsk& default_instance();

  void Swap(SceneRpcEnterSceneAsk* other);

  // implements Message ----------------------------------------------

  SceneRpcEnterSceneAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcEnterSceneAsk& from);
  void MergeFrom(const SceneRpcEnterSceneAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional sint32 SceneId = 2 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneRpcEnterSceneAsk)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcEnterSceneAsk* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcEnterSceneReply : public ::google::protobuf::Message {
 public:
  SceneRpcEnterSceneReply();
  virtual ~SceneRpcEnterSceneReply();

  SceneRpcEnterSceneReply(const SceneRpcEnterSceneReply& from);

  inline SceneRpcEnterSceneReply& operator=(const SceneRpcEnterSceneReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcEnterSceneReply& default_instance();

  void Swap(SceneRpcEnterSceneReply* other);

  // implements Message ----------------------------------------------

  SceneRpcEnterSceneReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcEnterSceneReply& from);
  void MergeFrom(const SceneRpcEnterSceneReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .CharacterInfo RoleInfo = 2;
  inline bool has_roleinfo() const;
  inline void clear_roleinfo();
  static const int kRoleInfoFieldNumber = 2;
  inline const ::CharacterInfo& roleinfo() const;
  inline ::CharacterInfo* mutable_roleinfo();
  inline ::CharacterInfo* release_roleinfo();
  inline void set_allocated_roleinfo(::CharacterInfo* roleinfo);

  // @@protoc_insertion_point(class_scope:SceneRpcEnterSceneReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleinfo();
  inline void clear_has_roleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CharacterInfo* roleinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcEnterSceneReply* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcLoadSceneCompleteAsk : public ::google::protobuf::Message {
 public:
  SceneRpcLoadSceneCompleteAsk();
  virtual ~SceneRpcLoadSceneCompleteAsk();

  SceneRpcLoadSceneCompleteAsk(const SceneRpcLoadSceneCompleteAsk& from);

  inline SceneRpcLoadSceneCompleteAsk& operator=(const SceneRpcLoadSceneCompleteAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcLoadSceneCompleteAsk& default_instance();

  void Swap(SceneRpcLoadSceneCompleteAsk* other);

  // implements Message ----------------------------------------------

  SceneRpcLoadSceneCompleteAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcLoadSceneCompleteAsk& from);
  void MergeFrom(const SceneRpcLoadSceneCompleteAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional sint32 SceneId = 2 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneRpcLoadSceneCompleteAsk)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcLoadSceneCompleteAsk* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcLoadSceneCompleteReply : public ::google::protobuf::Message {
 public:
  SceneRpcLoadSceneCompleteReply();
  virtual ~SceneRpcLoadSceneCompleteReply();

  SceneRpcLoadSceneCompleteReply(const SceneRpcLoadSceneCompleteReply& from);

  inline SceneRpcLoadSceneCompleteReply& operator=(const SceneRpcLoadSceneCompleteReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcLoadSceneCompleteReply& default_instance();

  void Swap(SceneRpcLoadSceneCompleteReply* other);

  // implements Message ----------------------------------------------

  SceneRpcLoadSceneCompleteReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcLoadSceneCompleteReply& from);
  void MergeFrom(const SceneRpcLoadSceneCompleteReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneRpcLoadSceneCompleteReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcLoadSceneCompleteReply* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcNewPlayerNotify : public ::google::protobuf::Message {
 public:
  SceneRpcNewPlayerNotify();
  virtual ~SceneRpcNewPlayerNotify();

  SceneRpcNewPlayerNotify(const SceneRpcNewPlayerNotify& from);

  inline SceneRpcNewPlayerNotify& operator=(const SceneRpcNewPlayerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcNewPlayerNotify& default_instance();

  void Swap(SceneRpcNewPlayerNotify* other);

  // implements Message ----------------------------------------------

  SceneRpcNewPlayerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcNewPlayerNotify& from);
  void MergeFrom(const SceneRpcNewPlayerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional .V3 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::V3& pos() const;
  inline ::V3* mutable_pos();
  inline ::V3* release_pos();
  inline void set_allocated_pos(::V3* pos);

  // optional float Dir = 3 [default = -1];
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline float dir() const;
  inline void set_dir(float value);

  // optional sint32 ObjType = 4 [default = -1];
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 4;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // optional sint32 ConfigId = 5 [default = -1];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 5;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional sint32 Status = 6 [default = -1];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional float MoveSpeed = 7 [default = -1];
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 7;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // @@protoc_insertion_point(class_scope:SceneRpcNewPlayerNotify)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::V3* pos_;
  ::google::protobuf::int32 objid_;
  float dir_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 status_;
  float movespeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcNewPlayerNotify* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcDeletePlayerNotify : public ::google::protobuf::Message {
 public:
  SceneRpcDeletePlayerNotify();
  virtual ~SceneRpcDeletePlayerNotify();

  SceneRpcDeletePlayerNotify(const SceneRpcDeletePlayerNotify& from);

  inline SceneRpcDeletePlayerNotify& operator=(const SceneRpcDeletePlayerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcDeletePlayerNotify& default_instance();

  void Swap(SceneRpcDeletePlayerNotify* other);

  // implements Message ----------------------------------------------

  SceneRpcDeletePlayerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcDeletePlayerNotify& from);
  void MergeFrom(const SceneRpcDeletePlayerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 2 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 2;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional sint32 SceneId = 3 [default = -1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SceneRpcDeletePlayerNotify)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcDeletePlayerNotify* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcConnectGameServerAsk : public ::google::protobuf::Message {
 public:
  SceneRpcConnectGameServerAsk();
  virtual ~SceneRpcConnectGameServerAsk();

  SceneRpcConnectGameServerAsk(const SceneRpcConnectGameServerAsk& from);

  inline SceneRpcConnectGameServerAsk& operator=(const SceneRpcConnectGameServerAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcConnectGameServerAsk& default_instance();

  void Swap(SceneRpcConnectGameServerAsk* other);

  // implements Message ----------------------------------------------

  SceneRpcConnectGameServerAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcConnectGameServerAsk& from);
  void MergeFrom(const SceneRpcConnectGameServerAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RoleId = 1 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string Key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:SceneRpcConnectGameServerAsk)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcConnectGameServerAsk* default_instance_;
};
// -------------------------------------------------------------------

class SceneRpcConnectGameServerReply : public ::google::protobuf::Message {
 public:
  SceneRpcConnectGameServerReply();
  virtual ~SceneRpcConnectGameServerReply();

  SceneRpcConnectGameServerReply(const SceneRpcConnectGameServerReply& from);

  inline SceneRpcConnectGameServerReply& operator=(const SceneRpcConnectGameServerReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRpcConnectGameServerReply& default_instance();

  void Swap(SceneRpcConnectGameServerReply* other);

  // implements Message ----------------------------------------------

  SceneRpcConnectGameServerReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneRpcConnectGameServerReply& from);
  void MergeFrom(const SceneRpcConnectGameServerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 RoleId = 2 [default = 0];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SceneRpcConnectGameServerReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneRpc_2eproto();
  friend void protobuf_AssignDesc_SceneRpc_2eproto();
  friend void protobuf_ShutdownFile_SceneRpc_2eproto();

  void InitAsDefaultInstance();
  static SceneRpcConnectGameServerReply* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneRpcEnterSceneAsk

// optional uint64 RoleId = 1 [default = 0];
inline bool SceneRpcEnterSceneAsk::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcEnterSceneAsk::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcEnterSceneAsk::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcEnterSceneAsk::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 SceneRpcEnterSceneAsk::roleid() const {
  return roleid_;
}
inline void SceneRpcEnterSceneAsk::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional sint32 SceneId = 2 [default = -1];
inline bool SceneRpcEnterSceneAsk::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcEnterSceneAsk::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcEnterSceneAsk::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcEnterSceneAsk::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 SceneRpcEnterSceneAsk::sceneid() const {
  return sceneid_;
}
inline void SceneRpcEnterSceneAsk::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// SceneRpcEnterSceneReply

// optional sint32 Result = 1 [default = -9999];
inline bool SceneRpcEnterSceneReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcEnterSceneReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcEnterSceneReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcEnterSceneReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SceneRpcEnterSceneReply::result() const {
  return result_;
}
inline void SceneRpcEnterSceneReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .CharacterInfo RoleInfo = 2;
inline bool SceneRpcEnterSceneReply::has_roleinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcEnterSceneReply::set_has_roleinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcEnterSceneReply::clear_has_roleinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcEnterSceneReply::clear_roleinfo() {
  if (roleinfo_ != NULL) roleinfo_->::CharacterInfo::Clear();
  clear_has_roleinfo();
}
inline const ::CharacterInfo& SceneRpcEnterSceneReply::roleinfo() const {
  return roleinfo_ != NULL ? *roleinfo_ : *default_instance_->roleinfo_;
}
inline ::CharacterInfo* SceneRpcEnterSceneReply::mutable_roleinfo() {
  set_has_roleinfo();
  if (roleinfo_ == NULL) roleinfo_ = new ::CharacterInfo;
  return roleinfo_;
}
inline ::CharacterInfo* SceneRpcEnterSceneReply::release_roleinfo() {
  clear_has_roleinfo();
  ::CharacterInfo* temp = roleinfo_;
  roleinfo_ = NULL;
  return temp;
}
inline void SceneRpcEnterSceneReply::set_allocated_roleinfo(::CharacterInfo* roleinfo) {
  delete roleinfo_;
  roleinfo_ = roleinfo;
  if (roleinfo) {
    set_has_roleinfo();
  } else {
    clear_has_roleinfo();
  }
}

// -------------------------------------------------------------------

// SceneRpcLoadSceneCompleteAsk

// optional uint64 RoleId = 1 [default = 0];
inline bool SceneRpcLoadSceneCompleteAsk::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcLoadSceneCompleteAsk::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcLoadSceneCompleteAsk::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcLoadSceneCompleteAsk::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 SceneRpcLoadSceneCompleteAsk::roleid() const {
  return roleid_;
}
inline void SceneRpcLoadSceneCompleteAsk::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional sint32 SceneId = 2 [default = -1];
inline bool SceneRpcLoadSceneCompleteAsk::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcLoadSceneCompleteAsk::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcLoadSceneCompleteAsk::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcLoadSceneCompleteAsk::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 SceneRpcLoadSceneCompleteAsk::sceneid() const {
  return sceneid_;
}
inline void SceneRpcLoadSceneCompleteAsk::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// SceneRpcLoadSceneCompleteReply

// optional sint32 Result = 1 [default = -9999];
inline bool SceneRpcLoadSceneCompleteReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcLoadSceneCompleteReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcLoadSceneCompleteReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcLoadSceneCompleteReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SceneRpcLoadSceneCompleteReply::result() const {
  return result_;
}
inline void SceneRpcLoadSceneCompleteReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SceneRpcNewPlayerNotify

// optional sint32 ObjId = 1 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcNewPlayerNotify::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcNewPlayerNotify::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 SceneRpcNewPlayerNotify::objid() const {
  return objid_;
}
inline void SceneRpcNewPlayerNotify::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional .V3 Pos = 2;
inline bool SceneRpcNewPlayerNotify::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcNewPlayerNotify::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcNewPlayerNotify::clear_pos() {
  if (pos_ != NULL) pos_->::V3::Clear();
  clear_has_pos();
}
inline const ::V3& SceneRpcNewPlayerNotify::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::V3* SceneRpcNewPlayerNotify::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::V3;
  return pos_;
}
inline ::V3* SceneRpcNewPlayerNotify::release_pos() {
  clear_has_pos();
  ::V3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SceneRpcNewPlayerNotify::set_allocated_pos(::V3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional float Dir = 3 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneRpcNewPlayerNotify::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneRpcNewPlayerNotify::clear_dir() {
  dir_ = -1;
  clear_has_dir();
}
inline float SceneRpcNewPlayerNotify::dir() const {
  return dir_;
}
inline void SceneRpcNewPlayerNotify::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// optional sint32 ObjType = 4 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_objtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_objtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneRpcNewPlayerNotify::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneRpcNewPlayerNotify::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
inline ::google::protobuf::int32 SceneRpcNewPlayerNotify::objtype() const {
  return objtype_;
}
inline void SceneRpcNewPlayerNotify::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
}

// optional sint32 ConfigId = 5 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_configid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_configid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneRpcNewPlayerNotify::clear_has_configid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneRpcNewPlayerNotify::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 SceneRpcNewPlayerNotify::configid() const {
  return configid_;
}
inline void SceneRpcNewPlayerNotify::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
}

// optional sint32 Status = 6 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SceneRpcNewPlayerNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SceneRpcNewPlayerNotify::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 SceneRpcNewPlayerNotify::status() const {
  return status_;
}
inline void SceneRpcNewPlayerNotify::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional float MoveSpeed = 7 [default = -1];
inline bool SceneRpcNewPlayerNotify::has_movespeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SceneRpcNewPlayerNotify::set_has_movespeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SceneRpcNewPlayerNotify::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SceneRpcNewPlayerNotify::clear_movespeed() {
  movespeed_ = -1;
  clear_has_movespeed();
}
inline float SceneRpcNewPlayerNotify::movespeed() const {
  return movespeed_;
}
inline void SceneRpcNewPlayerNotify::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
}

// -------------------------------------------------------------------

// SceneRpcDeletePlayerNotify

// optional sint32 ObjId = 2 [default = -1];
inline bool SceneRpcDeletePlayerNotify::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcDeletePlayerNotify::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcDeletePlayerNotify::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcDeletePlayerNotify::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 SceneRpcDeletePlayerNotify::objid() const {
  return objid_;
}
inline void SceneRpcDeletePlayerNotify::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional sint32 SceneId = 3 [default = -1];
inline bool SceneRpcDeletePlayerNotify::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcDeletePlayerNotify::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcDeletePlayerNotify::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcDeletePlayerNotify::clear_sceneid() {
  sceneid_ = -1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 SceneRpcDeletePlayerNotify::sceneid() const {
  return sceneid_;
}
inline void SceneRpcDeletePlayerNotify::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// SceneRpcConnectGameServerAsk

// optional uint64 RoleId = 1 [default = 0];
inline bool SceneRpcConnectGameServerAsk::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcConnectGameServerAsk::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcConnectGameServerAsk::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcConnectGameServerAsk::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 SceneRpcConnectGameServerAsk::roleid() const {
  return roleid_;
}
inline void SceneRpcConnectGameServerAsk::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string Key = 2;
inline bool SceneRpcConnectGameServerAsk::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcConnectGameServerAsk::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcConnectGameServerAsk::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcConnectGameServerAsk::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SceneRpcConnectGameServerAsk::key() const {
  return *key_;
}
inline void SceneRpcConnectGameServerAsk::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SceneRpcConnectGameServerAsk::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SceneRpcConnectGameServerAsk::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneRpcConnectGameServerAsk::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SceneRpcConnectGameServerAsk::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneRpcConnectGameServerAsk::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SceneRpcConnectGameServerReply

// optional sint32 Result = 1 [default = -9999];
inline bool SceneRpcConnectGameServerReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneRpcConnectGameServerReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneRpcConnectGameServerReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneRpcConnectGameServerReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SceneRpcConnectGameServerReply::result() const {
  return result_;
}
inline void SceneRpcConnectGameServerReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 RoleId = 2 [default = 0];
inline bool SceneRpcConnectGameServerReply::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneRpcConnectGameServerReply::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneRpcConnectGameServerReply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneRpcConnectGameServerReply::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 SceneRpcConnectGameServerReply::roleid() const {
  return roleid_;
}
inline void SceneRpcConnectGameServerReply::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneRpc_2eproto__INCLUDED
