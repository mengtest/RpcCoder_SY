// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SceneRpcEnterSceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcEnterSceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcEnterSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcEnterSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcLoadSceneCompleteAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcLoadSceneCompleteAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcLoadSceneCompleteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcLoadSceneCompleteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcNewPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcNewPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcDeletePlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcDeletePlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcConnectGameServerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcConnectGameServerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneRpcConnectGameServerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneRpcConnectGameServerReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneRpc_2eproto() {
  protobuf_AddDesc_SceneRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SceneRpcEnterSceneAsk_descriptor_ = file->message_type(0);
  static const int SceneRpcEnterSceneAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneAsk, sceneid_),
  };
  SceneRpcEnterSceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcEnterSceneAsk_descriptor_,
      SceneRpcEnterSceneAsk::default_instance_,
      SceneRpcEnterSceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcEnterSceneAsk));
  SceneRpcEnterSceneReply_descriptor_ = file->message_type(1);
  static const int SceneRpcEnterSceneReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneReply, roleinfo_),
  };
  SceneRpcEnterSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcEnterSceneReply_descriptor_,
      SceneRpcEnterSceneReply::default_instance_,
      SceneRpcEnterSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcEnterSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcEnterSceneReply));
  SceneRpcLoadSceneCompleteAsk_descriptor_ = file->message_type(2);
  static const int SceneRpcLoadSceneCompleteAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteAsk, sceneid_),
  };
  SceneRpcLoadSceneCompleteAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcLoadSceneCompleteAsk_descriptor_,
      SceneRpcLoadSceneCompleteAsk::default_instance_,
      SceneRpcLoadSceneCompleteAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcLoadSceneCompleteAsk));
  SceneRpcLoadSceneCompleteReply_descriptor_ = file->message_type(3);
  static const int SceneRpcLoadSceneCompleteReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteReply, result_),
  };
  SceneRpcLoadSceneCompleteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcLoadSceneCompleteReply_descriptor_,
      SceneRpcLoadSceneCompleteReply::default_instance_,
      SceneRpcLoadSceneCompleteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcLoadSceneCompleteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcLoadSceneCompleteReply));
  SceneRpcNewPlayerNotify_descriptor_ = file->message_type(4);
  static const int SceneRpcNewPlayerNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, movespeed_),
  };
  SceneRpcNewPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcNewPlayerNotify_descriptor_,
      SceneRpcNewPlayerNotify::default_instance_,
      SceneRpcNewPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcNewPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcNewPlayerNotify));
  SceneRpcDeletePlayerNotify_descriptor_ = file->message_type(5);
  static const int SceneRpcDeletePlayerNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcDeletePlayerNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcDeletePlayerNotify, sceneid_),
  };
  SceneRpcDeletePlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcDeletePlayerNotify_descriptor_,
      SceneRpcDeletePlayerNotify::default_instance_,
      SceneRpcDeletePlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcDeletePlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcDeletePlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcDeletePlayerNotify));
  SceneRpcConnectGameServerAsk_descriptor_ = file->message_type(6);
  static const int SceneRpcConnectGameServerAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerAsk, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerAsk, key_),
  };
  SceneRpcConnectGameServerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcConnectGameServerAsk_descriptor_,
      SceneRpcConnectGameServerAsk::default_instance_,
      SceneRpcConnectGameServerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcConnectGameServerAsk));
  SceneRpcConnectGameServerReply_descriptor_ = file->message_type(7);
  static const int SceneRpcConnectGameServerReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerReply, roleid_),
  };
  SceneRpcConnectGameServerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneRpcConnectGameServerReply_descriptor_,
      SceneRpcConnectGameServerReply::default_instance_,
      SceneRpcConnectGameServerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneRpcConnectGameServerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneRpcConnectGameServerReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcEnterSceneAsk_descriptor_, &SceneRpcEnterSceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcEnterSceneReply_descriptor_, &SceneRpcEnterSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcLoadSceneCompleteAsk_descriptor_, &SceneRpcLoadSceneCompleteAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcLoadSceneCompleteReply_descriptor_, &SceneRpcLoadSceneCompleteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcNewPlayerNotify_descriptor_, &SceneRpcNewPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcDeletePlayerNotify_descriptor_, &SceneRpcDeletePlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcConnectGameServerAsk_descriptor_, &SceneRpcConnectGameServerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneRpcConnectGameServerReply_descriptor_, &SceneRpcConnectGameServerReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneRpc_2eproto() {
  delete SceneRpcEnterSceneAsk::default_instance_;
  delete SceneRpcEnterSceneAsk_reflection_;
  delete SceneRpcEnterSceneReply::default_instance_;
  delete SceneRpcEnterSceneReply_reflection_;
  delete SceneRpcLoadSceneCompleteAsk::default_instance_;
  delete SceneRpcLoadSceneCompleteAsk_reflection_;
  delete SceneRpcLoadSceneCompleteReply::default_instance_;
  delete SceneRpcLoadSceneCompleteReply_reflection_;
  delete SceneRpcNewPlayerNotify::default_instance_;
  delete SceneRpcNewPlayerNotify_reflection_;
  delete SceneRpcDeletePlayerNotify::default_instance_;
  delete SceneRpcDeletePlayerNotify_reflection_;
  delete SceneRpcConnectGameServerAsk::default_instance_;
  delete SceneRpcConnectGameServerAsk_reflection_;
  delete SceneRpcConnectGameServerReply::default_instance_;
  delete SceneRpcConnectGameServerReply_reflection_;
}

void protobuf_AddDesc_SceneRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SceneRpc.proto\032\022PublicStruct.proto\"\?\n\025"
    "SceneRpcEnterSceneAsk\022\021\n\006RoleId\030\001 \001(\004:\0010"
    "\022\023\n\007SceneId\030\002 \001(\021:\002-1\"R\n\027SceneRpcEnterSc"
    "eneReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022 \n\010RoleI"
    "nfo\030\002 \001(\0132\016.CharacterInfo\"F\n\034SceneRpcLoa"
    "dSceneCompleteAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\022\023\n\007"
    "SceneId\030\002 \001(\021:\002-1\"7\n\036SceneRpcLoadSceneCo"
    "mpleteReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"\245\001\n\027S"
    "ceneRpcNewPlayerNotify\022\021\n\005ObjId\030\001 \001(\021:\002-"
    "1\022\020\n\003Pos\030\002 \001(\0132\003.V3\022\017\n\003Dir\030\003 \001(\002:\002-1\022\023\n\007"
    "ObjType\030\004 \001(\021:\002-1\022\024\n\010ConfigId\030\005 \001(\021:\002-1\022"
    "\022\n\006Status\030\006 \001(\021:\002-1\022\025\n\tMoveSpeed\030\007 \001(\002:\002"
    "-1\"D\n\032SceneRpcDeletePlayerNotify\022\021\n\005ObjI"
    "d\030\002 \001(\021:\002-1\022\023\n\007SceneId\030\003 \001(\021:\002-1\">\n\034Scen"
    "eRpcConnectGameServerAsk\022\021\n\006RoleId\030\001 \001(\004"
    ":\0010\022\013\n\003Key\030\002 \001(\t\"J\n\036SceneRpcConnectGameS"
    "erverReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\021\n\006Rol"
    "eId\030\002 \001(\004:\0010", 692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneRpc.proto", &protobuf_RegisterTypes);
  SceneRpcEnterSceneAsk::default_instance_ = new SceneRpcEnterSceneAsk();
  SceneRpcEnterSceneReply::default_instance_ = new SceneRpcEnterSceneReply();
  SceneRpcLoadSceneCompleteAsk::default_instance_ = new SceneRpcLoadSceneCompleteAsk();
  SceneRpcLoadSceneCompleteReply::default_instance_ = new SceneRpcLoadSceneCompleteReply();
  SceneRpcNewPlayerNotify::default_instance_ = new SceneRpcNewPlayerNotify();
  SceneRpcDeletePlayerNotify::default_instance_ = new SceneRpcDeletePlayerNotify();
  SceneRpcConnectGameServerAsk::default_instance_ = new SceneRpcConnectGameServerAsk();
  SceneRpcConnectGameServerReply::default_instance_ = new SceneRpcConnectGameServerReply();
  SceneRpcEnterSceneAsk::default_instance_->InitAsDefaultInstance();
  SceneRpcEnterSceneReply::default_instance_->InitAsDefaultInstance();
  SceneRpcLoadSceneCompleteAsk::default_instance_->InitAsDefaultInstance();
  SceneRpcLoadSceneCompleteReply::default_instance_->InitAsDefaultInstance();
  SceneRpcNewPlayerNotify::default_instance_->InitAsDefaultInstance();
  SceneRpcDeletePlayerNotify::default_instance_->InitAsDefaultInstance();
  SceneRpcConnectGameServerAsk::default_instance_->InitAsDefaultInstance();
  SceneRpcConnectGameServerReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneRpc_2eproto {
  StaticDescriptorInitializer_SceneRpc_2eproto() {
    protobuf_AddDesc_SceneRpc_2eproto();
  }
} static_descriptor_initializer_SceneRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SceneRpcEnterSceneAsk::kRoleIdFieldNumber;
const int SceneRpcEnterSceneAsk::kSceneIdFieldNumber;
#endif  // !_MSC_VER

SceneRpcEnterSceneAsk::SceneRpcEnterSceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcEnterSceneAsk::InitAsDefaultInstance() {
}

SceneRpcEnterSceneAsk::SceneRpcEnterSceneAsk(const SceneRpcEnterSceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcEnterSceneAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcEnterSceneAsk::~SceneRpcEnterSceneAsk() {
  SharedDtor();
}

void SceneRpcEnterSceneAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneRpcEnterSceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcEnterSceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcEnterSceneAsk_descriptor_;
}

const SceneRpcEnterSceneAsk& SceneRpcEnterSceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcEnterSceneAsk* SceneRpcEnterSceneAsk::default_instance_ = NULL;

SceneRpcEnterSceneAsk* SceneRpcEnterSceneAsk::New() const {
  return new SceneRpcEnterSceneAsk;
}

void SceneRpcEnterSceneAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcEnterSceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcEnterSceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcEnterSceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcEnterSceneAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcEnterSceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcEnterSceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcEnterSceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcEnterSceneAsk::MergeFrom(const SceneRpcEnterSceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcEnterSceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcEnterSceneAsk::CopyFrom(const SceneRpcEnterSceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcEnterSceneAsk::IsInitialized() const {

  return true;
}

void SceneRpcEnterSceneAsk::Swap(SceneRpcEnterSceneAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcEnterSceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcEnterSceneAsk_descriptor_;
  metadata.reflection = SceneRpcEnterSceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcEnterSceneReply::kResultFieldNumber;
const int SceneRpcEnterSceneReply::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

SceneRpcEnterSceneReply::SceneRpcEnterSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcEnterSceneReply::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

SceneRpcEnterSceneReply::SceneRpcEnterSceneReply(const SceneRpcEnterSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcEnterSceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcEnterSceneReply::~SceneRpcEnterSceneReply() {
  SharedDtor();
}

void SceneRpcEnterSceneReply::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void SceneRpcEnterSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcEnterSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcEnterSceneReply_descriptor_;
}

const SceneRpcEnterSceneReply& SceneRpcEnterSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcEnterSceneReply* SceneRpcEnterSceneReply::default_instance_ = NULL;

SceneRpcEnterSceneReply* SceneRpcEnterSceneReply::New() const {
  return new SceneRpcEnterSceneReply;
}

void SceneRpcEnterSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::CharacterInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcEnterSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleInfo;
        break;
      }

      // optional .CharacterInfo RoleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcEnterSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .CharacterInfo RoleInfo = 2;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcEnterSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .CharacterInfo RoleInfo = 2;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcEnterSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .CharacterInfo RoleInfo = 2;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcEnterSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcEnterSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcEnterSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcEnterSceneReply::MergeFrom(const SceneRpcEnterSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::CharacterInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcEnterSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcEnterSceneReply::CopyFrom(const SceneRpcEnterSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcEnterSceneReply::IsInitialized() const {

  return true;
}

void SceneRpcEnterSceneReply::Swap(SceneRpcEnterSceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcEnterSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcEnterSceneReply_descriptor_;
  metadata.reflection = SceneRpcEnterSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcLoadSceneCompleteAsk::kRoleIdFieldNumber;
const int SceneRpcLoadSceneCompleteAsk::kSceneIdFieldNumber;
#endif  // !_MSC_VER

SceneRpcLoadSceneCompleteAsk::SceneRpcLoadSceneCompleteAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcLoadSceneCompleteAsk::InitAsDefaultInstance() {
}

SceneRpcLoadSceneCompleteAsk::SceneRpcLoadSceneCompleteAsk(const SceneRpcLoadSceneCompleteAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcLoadSceneCompleteAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcLoadSceneCompleteAsk::~SceneRpcLoadSceneCompleteAsk() {
  SharedDtor();
}

void SceneRpcLoadSceneCompleteAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneRpcLoadSceneCompleteAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcLoadSceneCompleteAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcLoadSceneCompleteAsk_descriptor_;
}

const SceneRpcLoadSceneCompleteAsk& SceneRpcLoadSceneCompleteAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcLoadSceneCompleteAsk* SceneRpcLoadSceneCompleteAsk::default_instance_ = NULL;

SceneRpcLoadSceneCompleteAsk* SceneRpcLoadSceneCompleteAsk::New() const {
  return new SceneRpcLoadSceneCompleteAsk;
}

void SceneRpcLoadSceneCompleteAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcLoadSceneCompleteAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint32 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcLoadSceneCompleteAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcLoadSceneCompleteAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional sint32 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcLoadSceneCompleteAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional sint32 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcLoadSceneCompleteAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcLoadSceneCompleteAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcLoadSceneCompleteAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcLoadSceneCompleteAsk::MergeFrom(const SceneRpcLoadSceneCompleteAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcLoadSceneCompleteAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcLoadSceneCompleteAsk::CopyFrom(const SceneRpcLoadSceneCompleteAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcLoadSceneCompleteAsk::IsInitialized() const {

  return true;
}

void SceneRpcLoadSceneCompleteAsk::Swap(SceneRpcLoadSceneCompleteAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcLoadSceneCompleteAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcLoadSceneCompleteAsk_descriptor_;
  metadata.reflection = SceneRpcLoadSceneCompleteAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcLoadSceneCompleteReply::kResultFieldNumber;
#endif  // !_MSC_VER

SceneRpcLoadSceneCompleteReply::SceneRpcLoadSceneCompleteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcLoadSceneCompleteReply::InitAsDefaultInstance() {
}

SceneRpcLoadSceneCompleteReply::SceneRpcLoadSceneCompleteReply(const SceneRpcLoadSceneCompleteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcLoadSceneCompleteReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcLoadSceneCompleteReply::~SceneRpcLoadSceneCompleteReply() {
  SharedDtor();
}

void SceneRpcLoadSceneCompleteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneRpcLoadSceneCompleteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcLoadSceneCompleteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcLoadSceneCompleteReply_descriptor_;
}

const SceneRpcLoadSceneCompleteReply& SceneRpcLoadSceneCompleteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcLoadSceneCompleteReply* SceneRpcLoadSceneCompleteReply::default_instance_ = NULL;

SceneRpcLoadSceneCompleteReply* SceneRpcLoadSceneCompleteReply::New() const {
  return new SceneRpcLoadSceneCompleteReply;
}

void SceneRpcLoadSceneCompleteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcLoadSceneCompleteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcLoadSceneCompleteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcLoadSceneCompleteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcLoadSceneCompleteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcLoadSceneCompleteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcLoadSceneCompleteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcLoadSceneCompleteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcLoadSceneCompleteReply::MergeFrom(const SceneRpcLoadSceneCompleteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcLoadSceneCompleteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcLoadSceneCompleteReply::CopyFrom(const SceneRpcLoadSceneCompleteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcLoadSceneCompleteReply::IsInitialized() const {

  return true;
}

void SceneRpcLoadSceneCompleteReply::Swap(SceneRpcLoadSceneCompleteReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcLoadSceneCompleteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcLoadSceneCompleteReply_descriptor_;
  metadata.reflection = SceneRpcLoadSceneCompleteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcNewPlayerNotify::kObjIdFieldNumber;
const int SceneRpcNewPlayerNotify::kPosFieldNumber;
const int SceneRpcNewPlayerNotify::kDirFieldNumber;
const int SceneRpcNewPlayerNotify::kObjTypeFieldNumber;
const int SceneRpcNewPlayerNotify::kConfigIdFieldNumber;
const int SceneRpcNewPlayerNotify::kStatusFieldNumber;
const int SceneRpcNewPlayerNotify::kMoveSpeedFieldNumber;
#endif  // !_MSC_VER

SceneRpcNewPlayerNotify::SceneRpcNewPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcNewPlayerNotify::InitAsDefaultInstance() {
  pos_ = const_cast< ::V3*>(&::V3::default_instance());
}

SceneRpcNewPlayerNotify::SceneRpcNewPlayerNotify(const SceneRpcNewPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcNewPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  pos_ = NULL;
  dir_ = -1;
  objtype_ = -1;
  configid_ = -1;
  status_ = -1;
  movespeed_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcNewPlayerNotify::~SceneRpcNewPlayerNotify() {
  SharedDtor();
}

void SceneRpcNewPlayerNotify::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SceneRpcNewPlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcNewPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcNewPlayerNotify_descriptor_;
}

const SceneRpcNewPlayerNotify& SceneRpcNewPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcNewPlayerNotify* SceneRpcNewPlayerNotify::default_instance_ = NULL;

SceneRpcNewPlayerNotify* SceneRpcNewPlayerNotify::New() const {
  return new SceneRpcNewPlayerNotify;
}

void SceneRpcNewPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::V3::Clear();
    }
    dir_ = -1;
    objtype_ = -1;
    configid_ = -1;
    status_ = -1;
    movespeed_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcNewPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .V3 Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Dir;
        break;
      }

      // optional float Dir = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ObjType;
        break;
      }

      // optional sint32 ObjType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ConfigId;
        break;
      }

      // optional sint32 ConfigId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // optional sint32 Status = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_MoveSpeed;
        break;
      }

      // optional float MoveSpeed = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcNewPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional sint32 ObjType = 4 [default = -1];
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->objtype(), output);
  }

  // optional sint32 ConfigId = 5 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->configid(), output);
  }

  // optional sint32 Status = 6 [default = -1];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->status(), output);
  }

  // optional float MoveSpeed = 7 [default = -1];
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcNewPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional .V3 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional float Dir = 3 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional sint32 ObjType = 4 [default = -1];
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->objtype(), target);
  }

  // optional sint32 ConfigId = 5 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->configid(), target);
  }

  // optional sint32 Status = 6 [default = -1];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->status(), target);
  }

  // optional float MoveSpeed = 7 [default = -1];
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcNewPlayerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional .V3 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional float Dir = 3 [default = -1];
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional sint32 ObjType = 4 [default = -1];
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objtype());
    }

    // optional sint32 ConfigId = 5 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->configid());
    }

    // optional sint32 Status = 6 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional float MoveSpeed = 7 [default = -1];
    if (has_movespeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcNewPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcNewPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcNewPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcNewPlayerNotify::MergeFrom(const SceneRpcNewPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_pos()) {
      mutable_pos()->::V3::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcNewPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcNewPlayerNotify::CopyFrom(const SceneRpcNewPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcNewPlayerNotify::IsInitialized() const {

  return true;
}

void SceneRpcNewPlayerNotify::Swap(SceneRpcNewPlayerNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(objtype_, other->objtype_);
    std::swap(configid_, other->configid_);
    std::swap(status_, other->status_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcNewPlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcNewPlayerNotify_descriptor_;
  metadata.reflection = SceneRpcNewPlayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcDeletePlayerNotify::kObjIdFieldNumber;
const int SceneRpcDeletePlayerNotify::kSceneIdFieldNumber;
#endif  // !_MSC_VER

SceneRpcDeletePlayerNotify::SceneRpcDeletePlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcDeletePlayerNotify::InitAsDefaultInstance() {
}

SceneRpcDeletePlayerNotify::SceneRpcDeletePlayerNotify(const SceneRpcDeletePlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcDeletePlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  sceneid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcDeletePlayerNotify::~SceneRpcDeletePlayerNotify() {
  SharedDtor();
}

void SceneRpcDeletePlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneRpcDeletePlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcDeletePlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcDeletePlayerNotify_descriptor_;
}

const SceneRpcDeletePlayerNotify& SceneRpcDeletePlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcDeletePlayerNotify* SceneRpcDeletePlayerNotify::default_instance_ = NULL;

SceneRpcDeletePlayerNotify* SceneRpcDeletePlayerNotify::New() const {
  return new SceneRpcDeletePlayerNotify;
}

void SceneRpcDeletePlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    sceneid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcDeletePlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneId;
        break;
      }

      // optional sint32 SceneId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcDeletePlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 ObjId = 2 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional sint32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcDeletePlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 ObjId = 2 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional sint32 SceneId = 3 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcDeletePlayerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SceneId = 3 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcDeletePlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcDeletePlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcDeletePlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcDeletePlayerNotify::MergeFrom(const SceneRpcDeletePlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcDeletePlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcDeletePlayerNotify::CopyFrom(const SceneRpcDeletePlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcDeletePlayerNotify::IsInitialized() const {

  return true;
}

void SceneRpcDeletePlayerNotify::Swap(SceneRpcDeletePlayerNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcDeletePlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcDeletePlayerNotify_descriptor_;
  metadata.reflection = SceneRpcDeletePlayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcConnectGameServerAsk::kRoleIdFieldNumber;
const int SceneRpcConnectGameServerAsk::kKeyFieldNumber;
#endif  // !_MSC_VER

SceneRpcConnectGameServerAsk::SceneRpcConnectGameServerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcConnectGameServerAsk::InitAsDefaultInstance() {
}

SceneRpcConnectGameServerAsk::SceneRpcConnectGameServerAsk(const SceneRpcConnectGameServerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcConnectGameServerAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcConnectGameServerAsk::~SceneRpcConnectGameServerAsk() {
  SharedDtor();
}

void SceneRpcConnectGameServerAsk::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SceneRpcConnectGameServerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcConnectGameServerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcConnectGameServerAsk_descriptor_;
}

const SceneRpcConnectGameServerAsk& SceneRpcConnectGameServerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcConnectGameServerAsk* SceneRpcConnectGameServerAsk::default_instance_ = NULL;

SceneRpcConnectGameServerAsk* SceneRpcConnectGameServerAsk::New() const {
  return new SceneRpcConnectGameServerAsk;
}

void SceneRpcConnectGameServerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcConnectGameServerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional string Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcConnectGameServerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcConnectGameServerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcConnectGameServerAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcConnectGameServerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcConnectGameServerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcConnectGameServerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcConnectGameServerAsk::MergeFrom(const SceneRpcConnectGameServerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcConnectGameServerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcConnectGameServerAsk::CopyFrom(const SceneRpcConnectGameServerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcConnectGameServerAsk::IsInitialized() const {

  return true;
}

void SceneRpcConnectGameServerAsk::Swap(SceneRpcConnectGameServerAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcConnectGameServerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcConnectGameServerAsk_descriptor_;
  metadata.reflection = SceneRpcConnectGameServerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneRpcConnectGameServerReply::kResultFieldNumber;
const int SceneRpcConnectGameServerReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

SceneRpcConnectGameServerReply::SceneRpcConnectGameServerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneRpcConnectGameServerReply::InitAsDefaultInstance() {
}

SceneRpcConnectGameServerReply::SceneRpcConnectGameServerReply(const SceneRpcConnectGameServerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneRpcConnectGameServerReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneRpcConnectGameServerReply::~SceneRpcConnectGameServerReply() {
  SharedDtor();
}

void SceneRpcConnectGameServerReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneRpcConnectGameServerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneRpcConnectGameServerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneRpcConnectGameServerReply_descriptor_;
}

const SceneRpcConnectGameServerReply& SceneRpcConnectGameServerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneRpc_2eproto();
  return *default_instance_;
}

SceneRpcConnectGameServerReply* SceneRpcConnectGameServerReply::default_instance_ = NULL;

SceneRpcConnectGameServerReply* SceneRpcConnectGameServerReply::New() const {
  return new SceneRpcConnectGameServerReply;
}

void SceneRpcConnectGameServerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneRpcConnectGameServerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneRpcConnectGameServerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneRpcConnectGameServerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneRpcConnectGameServerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneRpcConnectGameServerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneRpcConnectGameServerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneRpcConnectGameServerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneRpcConnectGameServerReply::MergeFrom(const SceneRpcConnectGameServerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneRpcConnectGameServerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneRpcConnectGameServerReply::CopyFrom(const SceneRpcConnectGameServerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneRpcConnectGameServerReply::IsInitialized() const {

  return true;
}

void SceneRpcConnectGameServerReply::Swap(SceneRpcConnectGameServerReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneRpcConnectGameServerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneRpcConnectGameServerReply_descriptor_;
  metadata.reflection = SceneRpcConnectGameServerReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
