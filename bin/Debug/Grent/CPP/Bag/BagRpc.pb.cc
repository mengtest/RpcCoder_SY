// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BagRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BagRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BagRpcUseItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcUseItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcUseItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcUseItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcSaleItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcSaleItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcSaleItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcSaleItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcLockItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcLockItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcLockItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcLockItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcDeblockingAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcDeblockingAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcDeblockingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcDeblockingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTakeItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTakeItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTakeItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTakeItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTidyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTidyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTidyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTidyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTakeAllBackBagsAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTakeAllBackBagsAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcTakeAllBackBagsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcTakeAllBackBagsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagRpcBagChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagRpcBagChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BagRpc_2eproto() {
  protobuf_AddDesc_BagRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BagRpc.proto");
  GOOGLE_CHECK(file != NULL);
  BagRpcUseItemAsk_descriptor_ = file->message_type(0);
  static const int BagRpcUseItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemAsk, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemAsk, pos_),
  };
  BagRpcUseItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcUseItemAsk_descriptor_,
      BagRpcUseItemAsk::default_instance_,
      BagRpcUseItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcUseItemAsk));
  BagRpcUseItemReply_descriptor_ = file->message_type(1);
  static const int BagRpcUseItemReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemReply, item_),
  };
  BagRpcUseItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcUseItemReply_descriptor_,
      BagRpcUseItemReply::default_instance_,
      BagRpcUseItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcUseItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcUseItemReply));
  BagRpcSyncAsk_descriptor_ = file->message_type(2);
  static const int BagRpcSyncAsk_offsets_[1] = {
  };
  BagRpcSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcSyncAsk_descriptor_,
      BagRpcSyncAsk::default_instance_,
      BagRpcSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcSyncAsk));
  BagRpcSyncReply_descriptor_ = file->message_type(3);
  static const int BagRpcSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncReply, bags_),
  };
  BagRpcSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcSyncReply_descriptor_,
      BagRpcSyncReply::default_instance_,
      BagRpcSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcSyncReply));
  BagRpcSaleItemAsk_descriptor_ = file->message_type(4);
  static const int BagRpcSaleItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemAsk, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemAsk, count_),
  };
  BagRpcSaleItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcSaleItemAsk_descriptor_,
      BagRpcSaleItemAsk::default_instance_,
      BagRpcSaleItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcSaleItemAsk));
  BagRpcSaleItemReply_descriptor_ = file->message_type(5);
  static const int BagRpcSaleItemReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemReply, item_),
  };
  BagRpcSaleItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcSaleItemReply_descriptor_,
      BagRpcSaleItemReply::default_instance_,
      BagRpcSaleItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcSaleItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcSaleItemReply));
  BagRpcLockItemAsk_descriptor_ = file->message_type(6);
  static const int BagRpcLockItemAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemAsk, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemAsk, islock_),
  };
  BagRpcLockItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcLockItemAsk_descriptor_,
      BagRpcLockItemAsk::default_instance_,
      BagRpcLockItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcLockItemAsk));
  BagRpcLockItemReply_descriptor_ = file->message_type(7);
  static const int BagRpcLockItemReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemReply, item_),
  };
  BagRpcLockItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcLockItemReply_descriptor_,
      BagRpcLockItemReply::default_instance_,
      BagRpcLockItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcLockItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcLockItemReply));
  BagRpcDeblockingAsk_descriptor_ = file->message_type(8);
  static const int BagRpcDeblockingAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingAsk, bagtype_),
  };
  BagRpcDeblockingAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcDeblockingAsk_descriptor_,
      BagRpcDeblockingAsk::default_instance_,
      BagRpcDeblockingAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcDeblockingAsk));
  BagRpcDeblockingReply_descriptor_ = file->message_type(9);
  static const int BagRpcDeblockingReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingReply, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingReply, curcapacity_),
  };
  BagRpcDeblockingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcDeblockingReply_descriptor_,
      BagRpcDeblockingReply::default_instance_,
      BagRpcDeblockingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcDeblockingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcDeblockingReply));
  BagRpcTakeItemAsk_descriptor_ = file->message_type(10);
  static const int BagRpcTakeItemAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemAsk, frombagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemAsk, tobagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemAsk, frompos_),
  };
  BagRpcTakeItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTakeItemAsk_descriptor_,
      BagRpcTakeItemAsk::default_instance_,
      BagRpcTakeItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTakeItemAsk));
  BagRpcTakeItemReply_descriptor_ = file->message_type(11);
  static const int BagRpcTakeItemReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, toitemobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, fromitemobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, frombagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, tobagtype_),
  };
  BagRpcTakeItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTakeItemReply_descriptor_,
      BagRpcTakeItemReply::default_instance_,
      BagRpcTakeItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTakeItemReply));
  BagRpcTidyAsk_descriptor_ = file->message_type(12);
  static const int BagRpcTidyAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyAsk, bagtype_),
  };
  BagRpcTidyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTidyAsk_descriptor_,
      BagRpcTidyAsk::default_instance_,
      BagRpcTidyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTidyAsk));
  BagRpcTidyReply_descriptor_ = file->message_type(13);
  static const int BagRpcTidyReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyReply, bags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyReply, bagtype_),
  };
  BagRpcTidyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTidyReply_descriptor_,
      BagRpcTidyReply::default_instance_,
      BagRpcTidyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTidyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTidyReply));
  BagRpcTakeAllBackBagsAsk_descriptor_ = file->message_type(14);
  static const int BagRpcTakeAllBackBagsAsk_offsets_[1] = {
  };
  BagRpcTakeAllBackBagsAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTakeAllBackBagsAsk_descriptor_,
      BagRpcTakeAllBackBagsAsk::default_instance_,
      BagRpcTakeAllBackBagsAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTakeAllBackBagsAsk));
  BagRpcTakeAllBackBagsReply_descriptor_ = file->message_type(15);
  static const int BagRpcTakeAllBackBagsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsReply, bags_),
  };
  BagRpcTakeAllBackBagsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcTakeAllBackBagsReply_descriptor_,
      BagRpcTakeAllBackBagsReply::default_instance_,
      BagRpcTakeAllBackBagsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcTakeAllBackBagsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcTakeAllBackBagsReply));
  BagRpcBagChangeNotify_descriptor_ = file->message_type(16);
  static const int BagRpcBagChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcBagChangeNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcBagChangeNotify, bags_),
  };
  BagRpcBagChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagRpcBagChangeNotify_descriptor_,
      BagRpcBagChangeNotify::default_instance_,
      BagRpcBagChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcBagChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagRpcBagChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagRpcBagChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BagRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcUseItemAsk_descriptor_, &BagRpcUseItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcUseItemReply_descriptor_, &BagRpcUseItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcSyncAsk_descriptor_, &BagRpcSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcSyncReply_descriptor_, &BagRpcSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcSaleItemAsk_descriptor_, &BagRpcSaleItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcSaleItemReply_descriptor_, &BagRpcSaleItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcLockItemAsk_descriptor_, &BagRpcLockItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcLockItemReply_descriptor_, &BagRpcLockItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcDeblockingAsk_descriptor_, &BagRpcDeblockingAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcDeblockingReply_descriptor_, &BagRpcDeblockingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTakeItemAsk_descriptor_, &BagRpcTakeItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTakeItemReply_descriptor_, &BagRpcTakeItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTidyAsk_descriptor_, &BagRpcTidyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTidyReply_descriptor_, &BagRpcTidyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTakeAllBackBagsAsk_descriptor_, &BagRpcTakeAllBackBagsAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcTakeAllBackBagsReply_descriptor_, &BagRpcTakeAllBackBagsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagRpcBagChangeNotify_descriptor_, &BagRpcBagChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BagRpc_2eproto() {
  delete BagRpcUseItemAsk::default_instance_;
  delete BagRpcUseItemAsk_reflection_;
  delete BagRpcUseItemReply::default_instance_;
  delete BagRpcUseItemReply_reflection_;
  delete BagRpcSyncAsk::default_instance_;
  delete BagRpcSyncAsk_reflection_;
  delete BagRpcSyncReply::default_instance_;
  delete BagRpcSyncReply_reflection_;
  delete BagRpcSaleItemAsk::default_instance_;
  delete BagRpcSaleItemAsk_reflection_;
  delete BagRpcSaleItemReply::default_instance_;
  delete BagRpcSaleItemReply_reflection_;
  delete BagRpcLockItemAsk::default_instance_;
  delete BagRpcLockItemAsk_reflection_;
  delete BagRpcLockItemReply::default_instance_;
  delete BagRpcLockItemReply_reflection_;
  delete BagRpcDeblockingAsk::default_instance_;
  delete BagRpcDeblockingAsk_reflection_;
  delete BagRpcDeblockingReply::default_instance_;
  delete BagRpcDeblockingReply_reflection_;
  delete BagRpcTakeItemAsk::default_instance_;
  delete BagRpcTakeItemAsk_reflection_;
  delete BagRpcTakeItemReply::default_instance_;
  delete BagRpcTakeItemReply_reflection_;
  delete BagRpcTidyAsk::default_instance_;
  delete BagRpcTidyAsk_reflection_;
  delete BagRpcTidyReply::default_instance_;
  delete BagRpcTidyReply_reflection_;
  delete BagRpcTakeAllBackBagsAsk::default_instance_;
  delete BagRpcTakeAllBackBagsAsk_reflection_;
  delete BagRpcTakeAllBackBagsReply::default_instance_;
  delete BagRpcTakeAllBackBagsReply_reflection_;
  delete BagRpcBagChangeNotify::default_instance_;
  delete BagRpcBagChangeNotify_reflection_;
}

void protobuf_AddDesc_BagRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014BagRpc.proto\032\022PublicStruct.proto\"6\n\020Ba"
    "gRpcUseItemAsk\022\021\n\005Count\030\001 \001(\021:\002-1\022\017\n\003Pos"
    "\030\002 \001(\021:\002-1\"C\n\022BagRpcUseItemReply\022\025\n\006Resu"
    "lt\030\001 \001(\021:\005-9999\022\026\n\004Item\030\002 \001(\0132\010.ItemObj\""
    "\017\n\rBagRpcSyncAsk\"@\n\017BagRpcSyncReply\022\025\n\006R"
    "esult\030\001 \001(\021:\005-9999\022\026\n\004Bags\030\002 \003(\0132\010.BagDa"
    "ta\"7\n\021BagRpcSaleItemAsk\022\017\n\003Pos\030\005 \001(\021:\002-1"
    "\022\021\n\005Count\030\006 \001(\021:\002-1\"D\n\023BagRpcSaleItemRep"
    "ly\022\025\n\006Result\030\001 \001(\021:\005-9999\022\026\n\004Item\030\004 \001(\0132"
    "\010.ItemObj\";\n\021BagRpcLockItemAsk\022\017\n\003Pos\030\001 "
    "\001(\021:\002-1\022\025\n\006IsLock\030\003 \001(\010:\005false\"D\n\023BagRpc"
    "LockItemReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\026\n\004"
    "Item\030\005 \001(\0132\010.ItemObj\"*\n\023BagRpcDeblocking"
    "Ask\022\023\n\007BagType\030\001 \001(\021:\002-1\"\\\n\025BagRpcDebloc"
    "kingReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\023\n\007BagT"
    "ype\030\002 \001(\021:\002-1\022\027\n\013CurCapacity\030\003 \001(\021:\002-1\"X"
    "\n\021BagRpcTakeItemAsk\022\027\n\013FromBagType\030\001 \001(\021"
    ":\002-1\022\025\n\tToBagType\030\002 \001(\021:\002-1\022\023\n\007FromPos\030\003"
    " \001(\021:\002-1\"\230\001\n\023BagRpcTakeItemReply\022\025\n\006Resu"
    "lt\030\001 \001(\021:\005-9999\022\033\n\tToItemObj\030\002 \001(\0132\010.Ite"
    "mObj\022\035\n\013FromItemObj\030\003 \001(\0132\010.ItemObj\022\027\n\013F"
    "romBagType\030\004 \001(\021:\002-1\022\025\n\tToBagType\030\005 \001(\021:"
    "\002-1\"$\n\rBagRpcTidyAsk\022\023\n\007BagType\030\002 \001(\021:\002-"
    "1\"U\n\017BagRpcTidyReply\022\025\n\006Result\030\001 \001(\021:\005-9"
    "999\022\026\n\004Bags\030\003 \003(\0132\010.BagData\022\023\n\007BagType\030\004"
    " \001(\021:\002-1\"\032\n\030BagRpcTakeAllBackBagsAsk\"K\n\032"
    "BagRpcTakeAllBackBagsReply\022\025\n\006Result\030\001 \001"
    "(\021:\005-9999\022\026\n\004Bags\030\002 \003(\0132\010.BagData\"F\n\025Bag"
    "RpcBagChangeNotify\022\025\n\006Result\030\001 \001(\021:\005-999"
    "9\022\026\n\004Bags\030\002 \001(\0132\010.BagData", 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BagRpc.proto", &protobuf_RegisterTypes);
  BagRpcUseItemAsk::default_instance_ = new BagRpcUseItemAsk();
  BagRpcUseItemReply::default_instance_ = new BagRpcUseItemReply();
  BagRpcSyncAsk::default_instance_ = new BagRpcSyncAsk();
  BagRpcSyncReply::default_instance_ = new BagRpcSyncReply();
  BagRpcSaleItemAsk::default_instance_ = new BagRpcSaleItemAsk();
  BagRpcSaleItemReply::default_instance_ = new BagRpcSaleItemReply();
  BagRpcLockItemAsk::default_instance_ = new BagRpcLockItemAsk();
  BagRpcLockItemReply::default_instance_ = new BagRpcLockItemReply();
  BagRpcDeblockingAsk::default_instance_ = new BagRpcDeblockingAsk();
  BagRpcDeblockingReply::default_instance_ = new BagRpcDeblockingReply();
  BagRpcTakeItemAsk::default_instance_ = new BagRpcTakeItemAsk();
  BagRpcTakeItemReply::default_instance_ = new BagRpcTakeItemReply();
  BagRpcTidyAsk::default_instance_ = new BagRpcTidyAsk();
  BagRpcTidyReply::default_instance_ = new BagRpcTidyReply();
  BagRpcTakeAllBackBagsAsk::default_instance_ = new BagRpcTakeAllBackBagsAsk();
  BagRpcTakeAllBackBagsReply::default_instance_ = new BagRpcTakeAllBackBagsReply();
  BagRpcBagChangeNotify::default_instance_ = new BagRpcBagChangeNotify();
  BagRpcUseItemAsk::default_instance_->InitAsDefaultInstance();
  BagRpcUseItemReply::default_instance_->InitAsDefaultInstance();
  BagRpcSyncAsk::default_instance_->InitAsDefaultInstance();
  BagRpcSyncReply::default_instance_->InitAsDefaultInstance();
  BagRpcSaleItemAsk::default_instance_->InitAsDefaultInstance();
  BagRpcSaleItemReply::default_instance_->InitAsDefaultInstance();
  BagRpcLockItemAsk::default_instance_->InitAsDefaultInstance();
  BagRpcLockItemReply::default_instance_->InitAsDefaultInstance();
  BagRpcDeblockingAsk::default_instance_->InitAsDefaultInstance();
  BagRpcDeblockingReply::default_instance_->InitAsDefaultInstance();
  BagRpcTakeItemAsk::default_instance_->InitAsDefaultInstance();
  BagRpcTakeItemReply::default_instance_->InitAsDefaultInstance();
  BagRpcTidyAsk::default_instance_->InitAsDefaultInstance();
  BagRpcTidyReply::default_instance_->InitAsDefaultInstance();
  BagRpcTakeAllBackBagsAsk::default_instance_->InitAsDefaultInstance();
  BagRpcTakeAllBackBagsReply::default_instance_->InitAsDefaultInstance();
  BagRpcBagChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BagRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BagRpc_2eproto {
  StaticDescriptorInitializer_BagRpc_2eproto() {
    protobuf_AddDesc_BagRpc_2eproto();
  }
} static_descriptor_initializer_BagRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BagRpcUseItemAsk::kCountFieldNumber;
const int BagRpcUseItemAsk::kPosFieldNumber;
#endif  // !_MSC_VER

BagRpcUseItemAsk::BagRpcUseItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcUseItemAsk::InitAsDefaultInstance() {
}

BagRpcUseItemAsk::BagRpcUseItemAsk(const BagRpcUseItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcUseItemAsk::SharedCtor() {
  _cached_size_ = 0;
  count_ = -1;
  pos_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcUseItemAsk::~BagRpcUseItemAsk() {
  SharedDtor();
}

void BagRpcUseItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcUseItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcUseItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcUseItemAsk_descriptor_;
}

const BagRpcUseItemAsk& BagRpcUseItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcUseItemAsk* BagRpcUseItemAsk::default_instance_ = NULL;

BagRpcUseItemAsk* BagRpcUseItemAsk::New() const {
  return new BagRpcUseItemAsk;
}

void BagRpcUseItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = -1;
    pos_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcUseItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Count = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional sint32 Pos = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcUseItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Count = 1 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->count(), output);
  }

  // optional sint32 Pos = 2 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcUseItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Count = 1 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->count(), target);
  }

  // optional sint32 Pos = 2 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcUseItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Count = 1 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

    // optional sint32 Pos = 2 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcUseItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcUseItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcUseItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcUseItemAsk::MergeFrom(const BagRpcUseItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcUseItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcUseItemAsk::CopyFrom(const BagRpcUseItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcUseItemAsk::IsInitialized() const {

  return true;
}

void BagRpcUseItemAsk::Swap(BagRpcUseItemAsk* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcUseItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcUseItemAsk_descriptor_;
  metadata.reflection = BagRpcUseItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcUseItemReply::kResultFieldNumber;
const int BagRpcUseItemReply::kItemFieldNumber;
#endif  // !_MSC_VER

BagRpcUseItemReply::BagRpcUseItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcUseItemReply::InitAsDefaultInstance() {
  item_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
}

BagRpcUseItemReply::BagRpcUseItemReply(const BagRpcUseItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcUseItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcUseItemReply::~BagRpcUseItemReply() {
  SharedDtor();
}

void BagRpcUseItemReply::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BagRpcUseItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcUseItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcUseItemReply_descriptor_;
}

const BagRpcUseItemReply& BagRpcUseItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcUseItemReply* BagRpcUseItemReply::default_instance_ = NULL;

BagRpcUseItemReply* BagRpcUseItemReply::New() const {
  return new BagRpcUseItemReply;
}

void BagRpcUseItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_item()) {
      if (item_ != NULL) item_->::ItemObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcUseItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Item;
        break;
      }

      // optional .ItemObj Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcUseItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .ItemObj Item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcUseItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .ItemObj Item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcUseItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .ItemObj Item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcUseItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcUseItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcUseItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcUseItemReply::MergeFrom(const BagRpcUseItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::ItemObj::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcUseItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcUseItemReply::CopyFrom(const BagRpcUseItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcUseItemReply::IsInitialized() const {

  return true;
}

void BagRpcUseItemReply::Swap(BagRpcUseItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcUseItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcUseItemReply_descriptor_;
  metadata.reflection = BagRpcUseItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BagRpcSyncAsk::BagRpcSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcSyncAsk::InitAsDefaultInstance() {
}

BagRpcSyncAsk::BagRpcSyncAsk(const BagRpcSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcSyncAsk::~BagRpcSyncAsk() {
  SharedDtor();
}

void BagRpcSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcSyncAsk_descriptor_;
}

const BagRpcSyncAsk& BagRpcSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcSyncAsk* BagRpcSyncAsk::default_instance_ = NULL;

BagRpcSyncAsk* BagRpcSyncAsk::New() const {
  return new BagRpcSyncAsk;
}

void BagRpcSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BagRpcSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcSyncAsk::MergeFrom(const BagRpcSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcSyncAsk::CopyFrom(const BagRpcSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcSyncAsk::IsInitialized() const {

  return true;
}

void BagRpcSyncAsk::Swap(BagRpcSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcSyncAsk_descriptor_;
  metadata.reflection = BagRpcSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcSyncReply::kResultFieldNumber;
const int BagRpcSyncReply::kBagsFieldNumber;
#endif  // !_MSC_VER

BagRpcSyncReply::BagRpcSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcSyncReply::InitAsDefaultInstance() {
}

BagRpcSyncReply::BagRpcSyncReply(const BagRpcSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcSyncReply::~BagRpcSyncReply() {
  SharedDtor();
}

void BagRpcSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcSyncReply_descriptor_;
}

const BagRpcSyncReply& BagRpcSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcSyncReply* BagRpcSyncReply::default_instance_ = NULL;

BagRpcSyncReply* BagRpcSyncReply::New() const {
  return new BagRpcSyncReply;
}

void BagRpcSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Bags;
        break;
      }

      // repeated .BagData Bags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Bags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .BagData Bags = 2;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .BagData Bags = 2;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  // repeated .BagData Bags = 2;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcSyncReply::MergeFrom(const BagRpcSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcSyncReply::CopyFrom(const BagRpcSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcSyncReply::IsInitialized() const {

  return true;
}

void BagRpcSyncReply::Swap(BagRpcSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    bags_.Swap(&other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcSyncReply_descriptor_;
  metadata.reflection = BagRpcSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcSaleItemAsk::kPosFieldNumber;
const int BagRpcSaleItemAsk::kCountFieldNumber;
#endif  // !_MSC_VER

BagRpcSaleItemAsk::BagRpcSaleItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcSaleItemAsk::InitAsDefaultInstance() {
}

BagRpcSaleItemAsk::BagRpcSaleItemAsk(const BagRpcSaleItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcSaleItemAsk::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  count_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcSaleItemAsk::~BagRpcSaleItemAsk() {
  SharedDtor();
}

void BagRpcSaleItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcSaleItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcSaleItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcSaleItemAsk_descriptor_;
}

const BagRpcSaleItemAsk& BagRpcSaleItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcSaleItemAsk* BagRpcSaleItemAsk::default_instance_ = NULL;

BagRpcSaleItemAsk* BagRpcSaleItemAsk::New() const {
  return new BagRpcSaleItemAsk;
}

void BagRpcSaleItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
    count_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcSaleItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Pos = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Count;
        break;
      }

      // optional sint32 Count = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcSaleItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Pos = 5 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->pos(), output);
  }

  // optional sint32 Count = 6 [default = -1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcSaleItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Pos = 5 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->pos(), target);
  }

  // optional sint32 Count = 6 [default = -1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcSaleItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Pos = 5 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pos());
    }

    // optional sint32 Count = 6 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcSaleItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcSaleItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcSaleItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcSaleItemAsk::MergeFrom(const BagRpcSaleItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcSaleItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcSaleItemAsk::CopyFrom(const BagRpcSaleItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcSaleItemAsk::IsInitialized() const {

  return true;
}

void BagRpcSaleItemAsk::Swap(BagRpcSaleItemAsk* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcSaleItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcSaleItemAsk_descriptor_;
  metadata.reflection = BagRpcSaleItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcSaleItemReply::kResultFieldNumber;
const int BagRpcSaleItemReply::kItemFieldNumber;
#endif  // !_MSC_VER

BagRpcSaleItemReply::BagRpcSaleItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcSaleItemReply::InitAsDefaultInstance() {
  item_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
}

BagRpcSaleItemReply::BagRpcSaleItemReply(const BagRpcSaleItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcSaleItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcSaleItemReply::~BagRpcSaleItemReply() {
  SharedDtor();
}

void BagRpcSaleItemReply::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BagRpcSaleItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcSaleItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcSaleItemReply_descriptor_;
}

const BagRpcSaleItemReply& BagRpcSaleItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcSaleItemReply* BagRpcSaleItemReply::default_instance_ = NULL;

BagRpcSaleItemReply* BagRpcSaleItemReply::New() const {
  return new BagRpcSaleItemReply;
}

void BagRpcSaleItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_item()) {
      if (item_ != NULL) item_->::ItemObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcSaleItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Item;
        break;
      }

      // optional .ItemObj Item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcSaleItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .ItemObj Item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcSaleItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .ItemObj Item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcSaleItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .ItemObj Item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcSaleItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcSaleItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcSaleItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcSaleItemReply::MergeFrom(const BagRpcSaleItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::ItemObj::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcSaleItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcSaleItemReply::CopyFrom(const BagRpcSaleItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcSaleItemReply::IsInitialized() const {

  return true;
}

void BagRpcSaleItemReply::Swap(BagRpcSaleItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcSaleItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcSaleItemReply_descriptor_;
  metadata.reflection = BagRpcSaleItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcLockItemAsk::kPosFieldNumber;
const int BagRpcLockItemAsk::kIsLockFieldNumber;
#endif  // !_MSC_VER

BagRpcLockItemAsk::BagRpcLockItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcLockItemAsk::InitAsDefaultInstance() {
}

BagRpcLockItemAsk::BagRpcLockItemAsk(const BagRpcLockItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcLockItemAsk::SharedCtor() {
  _cached_size_ = 0;
  pos_ = -1;
  islock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcLockItemAsk::~BagRpcLockItemAsk() {
  SharedDtor();
}

void BagRpcLockItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcLockItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcLockItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcLockItemAsk_descriptor_;
}

const BagRpcLockItemAsk& BagRpcLockItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcLockItemAsk* BagRpcLockItemAsk::default_instance_ = NULL;

BagRpcLockItemAsk* BagRpcLockItemAsk::New() const {
  return new BagRpcLockItemAsk;
}

void BagRpcLockItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = -1;
    islock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcLockItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Pos = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcLockItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Pos = 1 [default = -1];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->pos(), output);
  }

  // optional bool IsLock = 3 [default = false];
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcLockItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Pos = 1 [default = -1];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->pos(), target);
  }

  // optional bool IsLock = 3 [default = false];
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcLockItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Pos = 1 [default = -1];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pos());
    }

    // optional bool IsLock = 3 [default = false];
    if (has_islock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcLockItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcLockItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcLockItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcLockItemAsk::MergeFrom(const BagRpcLockItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcLockItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcLockItemAsk::CopyFrom(const BagRpcLockItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcLockItemAsk::IsInitialized() const {

  return true;
}

void BagRpcLockItemAsk::Swap(BagRpcLockItemAsk* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(islock_, other->islock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcLockItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcLockItemAsk_descriptor_;
  metadata.reflection = BagRpcLockItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcLockItemReply::kResultFieldNumber;
const int BagRpcLockItemReply::kItemFieldNumber;
#endif  // !_MSC_VER

BagRpcLockItemReply::BagRpcLockItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcLockItemReply::InitAsDefaultInstance() {
  item_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
}

BagRpcLockItemReply::BagRpcLockItemReply(const BagRpcLockItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcLockItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcLockItemReply::~BagRpcLockItemReply() {
  SharedDtor();
}

void BagRpcLockItemReply::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BagRpcLockItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcLockItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcLockItemReply_descriptor_;
}

const BagRpcLockItemReply& BagRpcLockItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcLockItemReply* BagRpcLockItemReply::default_instance_ = NULL;

BagRpcLockItemReply* BagRpcLockItemReply::New() const {
  return new BagRpcLockItemReply;
}

void BagRpcLockItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_item()) {
      if (item_ != NULL) item_->::ItemObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcLockItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Item;
        break;
      }

      // optional .ItemObj Item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcLockItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .ItemObj Item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcLockItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .ItemObj Item = 5;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcLockItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .ItemObj Item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcLockItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcLockItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcLockItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcLockItemReply::MergeFrom(const BagRpcLockItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::ItemObj::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcLockItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcLockItemReply::CopyFrom(const BagRpcLockItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcLockItemReply::IsInitialized() const {

  return true;
}

void BagRpcLockItemReply::Swap(BagRpcLockItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcLockItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcLockItemReply_descriptor_;
  metadata.reflection = BagRpcLockItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcDeblockingAsk::kBagTypeFieldNumber;
#endif  // !_MSC_VER

BagRpcDeblockingAsk::BagRpcDeblockingAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcDeblockingAsk::InitAsDefaultInstance() {
}

BagRpcDeblockingAsk::BagRpcDeblockingAsk(const BagRpcDeblockingAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcDeblockingAsk::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcDeblockingAsk::~BagRpcDeblockingAsk() {
  SharedDtor();
}

void BagRpcDeblockingAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcDeblockingAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcDeblockingAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcDeblockingAsk_descriptor_;
}

const BagRpcDeblockingAsk& BagRpcDeblockingAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcDeblockingAsk* BagRpcDeblockingAsk::default_instance_ = NULL;

BagRpcDeblockingAsk* BagRpcDeblockingAsk::New() const {
  return new BagRpcDeblockingAsk;
}

void BagRpcDeblockingAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcDeblockingAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 BagType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcDeblockingAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 BagType = 1 [default = -1];
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bagtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcDeblockingAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 BagType = 1 [default = -1];
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bagtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcDeblockingAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 BagType = 1 [default = -1];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bagtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcDeblockingAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcDeblockingAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcDeblockingAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcDeblockingAsk::MergeFrom(const BagRpcDeblockingAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcDeblockingAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcDeblockingAsk::CopyFrom(const BagRpcDeblockingAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcDeblockingAsk::IsInitialized() const {

  return true;
}

void BagRpcDeblockingAsk::Swap(BagRpcDeblockingAsk* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcDeblockingAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcDeblockingAsk_descriptor_;
  metadata.reflection = BagRpcDeblockingAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcDeblockingReply::kResultFieldNumber;
const int BagRpcDeblockingReply::kBagTypeFieldNumber;
const int BagRpcDeblockingReply::kCurCapacityFieldNumber;
#endif  // !_MSC_VER

BagRpcDeblockingReply::BagRpcDeblockingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcDeblockingReply::InitAsDefaultInstance() {
}

BagRpcDeblockingReply::BagRpcDeblockingReply(const BagRpcDeblockingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcDeblockingReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  bagtype_ = -1;
  curcapacity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcDeblockingReply::~BagRpcDeblockingReply() {
  SharedDtor();
}

void BagRpcDeblockingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcDeblockingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcDeblockingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcDeblockingReply_descriptor_;
}

const BagRpcDeblockingReply& BagRpcDeblockingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcDeblockingReply* BagRpcDeblockingReply::default_instance_ = NULL;

BagRpcDeblockingReply* BagRpcDeblockingReply::New() const {
  return new BagRpcDeblockingReply;
}

void BagRpcDeblockingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    bagtype_ = -1;
    curcapacity_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcDeblockingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BagType;
        break;
      }

      // optional sint32 BagType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurCapacity;
        break;
      }

      // optional sint32 CurCapacity = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curcapacity_)));
          set_has_curcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcDeblockingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bagtype(), output);
  }

  // optional sint32 CurCapacity = 3 [default = -1];
  if (has_curcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->curcapacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcDeblockingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bagtype(), target);
  }

  // optional sint32 CurCapacity = 3 [default = -1];
  if (has_curcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->curcapacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcDeblockingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 BagType = 2 [default = -1];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bagtype());
    }

    // optional sint32 CurCapacity = 3 [default = -1];
    if (has_curcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curcapacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcDeblockingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcDeblockingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcDeblockingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcDeblockingReply::MergeFrom(const BagRpcDeblockingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_curcapacity()) {
      set_curcapacity(from.curcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcDeblockingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcDeblockingReply::CopyFrom(const BagRpcDeblockingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcDeblockingReply::IsInitialized() const {

  return true;
}

void BagRpcDeblockingReply::Swap(BagRpcDeblockingReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(curcapacity_, other->curcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcDeblockingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcDeblockingReply_descriptor_;
  metadata.reflection = BagRpcDeblockingReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcTakeItemAsk::kFromBagTypeFieldNumber;
const int BagRpcTakeItemAsk::kToBagTypeFieldNumber;
const int BagRpcTakeItemAsk::kFromPosFieldNumber;
#endif  // !_MSC_VER

BagRpcTakeItemAsk::BagRpcTakeItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTakeItemAsk::InitAsDefaultInstance() {
}

BagRpcTakeItemAsk::BagRpcTakeItemAsk(const BagRpcTakeItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTakeItemAsk::SharedCtor() {
  _cached_size_ = 0;
  frombagtype_ = -1;
  tobagtype_ = -1;
  frompos_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTakeItemAsk::~BagRpcTakeItemAsk() {
  SharedDtor();
}

void BagRpcTakeItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcTakeItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTakeItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTakeItemAsk_descriptor_;
}

const BagRpcTakeItemAsk& BagRpcTakeItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTakeItemAsk* BagRpcTakeItemAsk::default_instance_ = NULL;

BagRpcTakeItemAsk* BagRpcTakeItemAsk::New() const {
  return new BagRpcTakeItemAsk;
}

void BagRpcTakeItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frombagtype_ = -1;
    tobagtype_ = -1;
    frompos_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTakeItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 FromBagType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &frombagtype_)));
          set_has_frombagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ToBagType;
        break;
      }

      // optional sint32 ToBagType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tobagtype_)));
          set_has_tobagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FromPos;
        break;
      }

      // optional sint32 FromPos = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &frompos_)));
          set_has_frompos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcTakeItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 FromBagType = 1 [default = -1];
  if (has_frombagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->frombagtype(), output);
  }

  // optional sint32 ToBagType = 2 [default = -1];
  if (has_tobagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->tobagtype(), output);
  }

  // optional sint32 FromPos = 3 [default = -1];
  if (has_frompos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->frompos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTakeItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 FromBagType = 1 [default = -1];
  if (has_frombagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->frombagtype(), target);
  }

  // optional sint32 ToBagType = 2 [default = -1];
  if (has_tobagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->tobagtype(), target);
  }

  // optional sint32 FromPos = 3 [default = -1];
  if (has_frompos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->frompos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTakeItemAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 FromBagType = 1 [default = -1];
    if (has_frombagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->frombagtype());
    }

    // optional sint32 ToBagType = 2 [default = -1];
    if (has_tobagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tobagtype());
    }

    // optional sint32 FromPos = 3 [default = -1];
    if (has_frompos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->frompos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTakeItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTakeItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTakeItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTakeItemAsk::MergeFrom(const BagRpcTakeItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frombagtype()) {
      set_frombagtype(from.frombagtype());
    }
    if (from.has_tobagtype()) {
      set_tobagtype(from.tobagtype());
    }
    if (from.has_frompos()) {
      set_frompos(from.frompos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTakeItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTakeItemAsk::CopyFrom(const BagRpcTakeItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTakeItemAsk::IsInitialized() const {

  return true;
}

void BagRpcTakeItemAsk::Swap(BagRpcTakeItemAsk* other) {
  if (other != this) {
    std::swap(frombagtype_, other->frombagtype_);
    std::swap(tobagtype_, other->tobagtype_);
    std::swap(frompos_, other->frompos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTakeItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTakeItemAsk_descriptor_;
  metadata.reflection = BagRpcTakeItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcTakeItemReply::kResultFieldNumber;
const int BagRpcTakeItemReply::kToItemObjFieldNumber;
const int BagRpcTakeItemReply::kFromItemObjFieldNumber;
const int BagRpcTakeItemReply::kFromBagTypeFieldNumber;
const int BagRpcTakeItemReply::kToBagTypeFieldNumber;
#endif  // !_MSC_VER

BagRpcTakeItemReply::BagRpcTakeItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTakeItemReply::InitAsDefaultInstance() {
  toitemobj_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
  fromitemobj_ = const_cast< ::ItemObj*>(&::ItemObj::default_instance());
}

BagRpcTakeItemReply::BagRpcTakeItemReply(const BagRpcTakeItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTakeItemReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  toitemobj_ = NULL;
  fromitemobj_ = NULL;
  frombagtype_ = -1;
  tobagtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTakeItemReply::~BagRpcTakeItemReply() {
  SharedDtor();
}

void BagRpcTakeItemReply::SharedDtor() {
  if (this != default_instance_) {
    delete toitemobj_;
    delete fromitemobj_;
  }
}

void BagRpcTakeItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTakeItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTakeItemReply_descriptor_;
}

const BagRpcTakeItemReply& BagRpcTakeItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTakeItemReply* BagRpcTakeItemReply::default_instance_ = NULL;

BagRpcTakeItemReply* BagRpcTakeItemReply::New() const {
  return new BagRpcTakeItemReply;
}

void BagRpcTakeItemReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_toitemobj()) {
      if (toitemobj_ != NULL) toitemobj_->::ItemObj::Clear();
    }
    if (has_fromitemobj()) {
      if (fromitemobj_ != NULL) fromitemobj_->::ItemObj::Clear();
    }
    frombagtype_ = -1;
    tobagtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTakeItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ToItemObj;
        break;
      }

      // optional .ItemObj ToItemObj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToItemObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toitemobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FromItemObj;
        break;
      }

      // optional .ItemObj FromItemObj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FromItemObj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromitemobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FromBagType;
        break;
      }

      // optional sint32 FromBagType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &frombagtype_)));
          set_has_frombagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ToBagType;
        break;
      }

      // optional sint32 ToBagType = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToBagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tobagtype_)));
          set_has_tobagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcTakeItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .ItemObj ToItemObj = 2;
  if (has_toitemobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toitemobj(), output);
  }

  // optional .ItemObj FromItemObj = 3;
  if (has_fromitemobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fromitemobj(), output);
  }

  // optional sint32 FromBagType = 4 [default = -1];
  if (has_frombagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->frombagtype(), output);
  }

  // optional sint32 ToBagType = 5 [default = -1];
  if (has_tobagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->tobagtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTakeItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .ItemObj ToItemObj = 2;
  if (has_toitemobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toitemobj(), target);
  }

  // optional .ItemObj FromItemObj = 3;
  if (has_fromitemobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fromitemobj(), target);
  }

  // optional sint32 FromBagType = 4 [default = -1];
  if (has_frombagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->frombagtype(), target);
  }

  // optional sint32 ToBagType = 5 [default = -1];
  if (has_tobagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->tobagtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTakeItemReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .ItemObj ToItemObj = 2;
    if (has_toitemobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toitemobj());
    }

    // optional .ItemObj FromItemObj = 3;
    if (has_fromitemobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromitemobj());
    }

    // optional sint32 FromBagType = 4 [default = -1];
    if (has_frombagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->frombagtype());
    }

    // optional sint32 ToBagType = 5 [default = -1];
    if (has_tobagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tobagtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTakeItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTakeItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTakeItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTakeItemReply::MergeFrom(const BagRpcTakeItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_toitemobj()) {
      mutable_toitemobj()->::ItemObj::MergeFrom(from.toitemobj());
    }
    if (from.has_fromitemobj()) {
      mutable_fromitemobj()->::ItemObj::MergeFrom(from.fromitemobj());
    }
    if (from.has_frombagtype()) {
      set_frombagtype(from.frombagtype());
    }
    if (from.has_tobagtype()) {
      set_tobagtype(from.tobagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTakeItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTakeItemReply::CopyFrom(const BagRpcTakeItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTakeItemReply::IsInitialized() const {

  return true;
}

void BagRpcTakeItemReply::Swap(BagRpcTakeItemReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(toitemobj_, other->toitemobj_);
    std::swap(fromitemobj_, other->fromitemobj_);
    std::swap(frombagtype_, other->frombagtype_);
    std::swap(tobagtype_, other->tobagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTakeItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTakeItemReply_descriptor_;
  metadata.reflection = BagRpcTakeItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcTidyAsk::kBagTypeFieldNumber;
#endif  // !_MSC_VER

BagRpcTidyAsk::BagRpcTidyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTidyAsk::InitAsDefaultInstance() {
}

BagRpcTidyAsk::BagRpcTidyAsk(const BagRpcTidyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTidyAsk::SharedCtor() {
  _cached_size_ = 0;
  bagtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTidyAsk::~BagRpcTidyAsk() {
  SharedDtor();
}

void BagRpcTidyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcTidyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTidyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTidyAsk_descriptor_;
}

const BagRpcTidyAsk& BagRpcTidyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTidyAsk* BagRpcTidyAsk::default_instance_ = NULL;

BagRpcTidyAsk* BagRpcTidyAsk::New() const {
  return new BagRpcTidyAsk;
}

void BagRpcTidyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTidyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 BagType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcTidyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bagtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTidyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 BagType = 2 [default = -1];
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bagtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTidyAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 BagType = 2 [default = -1];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bagtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTidyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTidyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTidyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTidyAsk::MergeFrom(const BagRpcTidyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTidyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTidyAsk::CopyFrom(const BagRpcTidyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTidyAsk::IsInitialized() const {

  return true;
}

void BagRpcTidyAsk::Swap(BagRpcTidyAsk* other) {
  if (other != this) {
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTidyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTidyAsk_descriptor_;
  metadata.reflection = BagRpcTidyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcTidyReply::kResultFieldNumber;
const int BagRpcTidyReply::kBagsFieldNumber;
const int BagRpcTidyReply::kBagTypeFieldNumber;
#endif  // !_MSC_VER

BagRpcTidyReply::BagRpcTidyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTidyReply::InitAsDefaultInstance() {
}

BagRpcTidyReply::BagRpcTidyReply(const BagRpcTidyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTidyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  bagtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTidyReply::~BagRpcTidyReply() {
  SharedDtor();
}

void BagRpcTidyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcTidyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTidyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTidyReply_descriptor_;
}

const BagRpcTidyReply& BagRpcTidyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTidyReply* BagRpcTidyReply::default_instance_ = NULL;

BagRpcTidyReply* BagRpcTidyReply::New() const {
  return new BagRpcTidyReply;
}

void BagRpcTidyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    bagtype_ = -1;
  }
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTidyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Bags;
        break;
      }

      // repeated .BagData Bags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Bags;
        if (input->ExpectTag(32)) goto parse_BagType;
        break;
      }

      // optional sint32 BagType = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcTidyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .BagData Bags = 3;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bags(i), output);
  }

  // optional sint32 BagType = 4 [default = -1];
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->bagtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTidyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .BagData Bags = 3;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bags(i), target);
  }

  // optional sint32 BagType = 4 [default = -1];
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bagtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTidyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 BagType = 4 [default = -1];
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bagtype());
    }

  }
  // repeated .BagData Bags = 3;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTidyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTidyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTidyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTidyReply::MergeFrom(const BagRpcTidyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTidyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTidyReply::CopyFrom(const BagRpcTidyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTidyReply::IsInitialized() const {

  return true;
}

void BagRpcTidyReply::Swap(BagRpcTidyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    bags_.Swap(&other->bags_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTidyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTidyReply_descriptor_;
  metadata.reflection = BagRpcTidyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BagRpcTakeAllBackBagsAsk::BagRpcTakeAllBackBagsAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTakeAllBackBagsAsk::InitAsDefaultInstance() {
}

BagRpcTakeAllBackBagsAsk::BagRpcTakeAllBackBagsAsk(const BagRpcTakeAllBackBagsAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTakeAllBackBagsAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTakeAllBackBagsAsk::~BagRpcTakeAllBackBagsAsk() {
  SharedDtor();
}

void BagRpcTakeAllBackBagsAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcTakeAllBackBagsAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTakeAllBackBagsAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTakeAllBackBagsAsk_descriptor_;
}

const BagRpcTakeAllBackBagsAsk& BagRpcTakeAllBackBagsAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTakeAllBackBagsAsk* BagRpcTakeAllBackBagsAsk::default_instance_ = NULL;

BagRpcTakeAllBackBagsAsk* BagRpcTakeAllBackBagsAsk::New() const {
  return new BagRpcTakeAllBackBagsAsk;
}

void BagRpcTakeAllBackBagsAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTakeAllBackBagsAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BagRpcTakeAllBackBagsAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTakeAllBackBagsAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTakeAllBackBagsAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTakeAllBackBagsAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTakeAllBackBagsAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTakeAllBackBagsAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTakeAllBackBagsAsk::MergeFrom(const BagRpcTakeAllBackBagsAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTakeAllBackBagsAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTakeAllBackBagsAsk::CopyFrom(const BagRpcTakeAllBackBagsAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTakeAllBackBagsAsk::IsInitialized() const {

  return true;
}

void BagRpcTakeAllBackBagsAsk::Swap(BagRpcTakeAllBackBagsAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTakeAllBackBagsAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTakeAllBackBagsAsk_descriptor_;
  metadata.reflection = BagRpcTakeAllBackBagsAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcTakeAllBackBagsReply::kResultFieldNumber;
const int BagRpcTakeAllBackBagsReply::kBagsFieldNumber;
#endif  // !_MSC_VER

BagRpcTakeAllBackBagsReply::BagRpcTakeAllBackBagsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcTakeAllBackBagsReply::InitAsDefaultInstance() {
}

BagRpcTakeAllBackBagsReply::BagRpcTakeAllBackBagsReply(const BagRpcTakeAllBackBagsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcTakeAllBackBagsReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcTakeAllBackBagsReply::~BagRpcTakeAllBackBagsReply() {
  SharedDtor();
}

void BagRpcTakeAllBackBagsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagRpcTakeAllBackBagsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcTakeAllBackBagsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcTakeAllBackBagsReply_descriptor_;
}

const BagRpcTakeAllBackBagsReply& BagRpcTakeAllBackBagsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcTakeAllBackBagsReply* BagRpcTakeAllBackBagsReply::default_instance_ = NULL;

BagRpcTakeAllBackBagsReply* BagRpcTakeAllBackBagsReply::New() const {
  return new BagRpcTakeAllBackBagsReply;
}

void BagRpcTakeAllBackBagsReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcTakeAllBackBagsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Bags;
        break;
      }

      // repeated .BagData Bags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Bags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcTakeAllBackBagsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .BagData Bags = 2;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcTakeAllBackBagsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .BagData Bags = 2;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcTakeAllBackBagsReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  // repeated .BagData Bags = 2;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcTakeAllBackBagsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcTakeAllBackBagsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcTakeAllBackBagsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcTakeAllBackBagsReply::MergeFrom(const BagRpcTakeAllBackBagsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcTakeAllBackBagsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcTakeAllBackBagsReply::CopyFrom(const BagRpcTakeAllBackBagsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcTakeAllBackBagsReply::IsInitialized() const {

  return true;
}

void BagRpcTakeAllBackBagsReply::Swap(BagRpcTakeAllBackBagsReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    bags_.Swap(&other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcTakeAllBackBagsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcTakeAllBackBagsReply_descriptor_;
  metadata.reflection = BagRpcTakeAllBackBagsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagRpcBagChangeNotify::kResultFieldNumber;
const int BagRpcBagChangeNotify::kBagsFieldNumber;
#endif  // !_MSC_VER

BagRpcBagChangeNotify::BagRpcBagChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagRpcBagChangeNotify::InitAsDefaultInstance() {
  bags_ = const_cast< ::BagData*>(&::BagData::default_instance());
}

BagRpcBagChangeNotify::BagRpcBagChangeNotify(const BagRpcBagChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagRpcBagChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  bags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagRpcBagChangeNotify::~BagRpcBagChangeNotify() {
  SharedDtor();
}

void BagRpcBagChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete bags_;
  }
}

void BagRpcBagChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagRpcBagChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagRpcBagChangeNotify_descriptor_;
}

const BagRpcBagChangeNotify& BagRpcBagChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BagRpc_2eproto();
  return *default_instance_;
}

BagRpcBagChangeNotify* BagRpcBagChangeNotify::default_instance_ = NULL;

BagRpcBagChangeNotify* BagRpcBagChangeNotify::New() const {
  return new BagRpcBagChangeNotify;
}

void BagRpcBagChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_bags()) {
      if (bags_ != NULL) bags_->::BagData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagRpcBagChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Bags;
        break;
      }

      // optional .BagData Bags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagRpcBagChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .BagData Bags = 2;
  if (has_bags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagRpcBagChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .BagData Bags = 2;
  if (has_bags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagRpcBagChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .BagData Bags = 2;
    if (has_bags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagRpcBagChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagRpcBagChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagRpcBagChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagRpcBagChangeNotify::MergeFrom(const BagRpcBagChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bags()) {
      mutable_bags()->::BagData::MergeFrom(from.bags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagRpcBagChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagRpcBagChangeNotify::CopyFrom(const BagRpcBagChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagRpcBagChangeNotify::IsInitialized() const {

  return true;
}

void BagRpcBagChangeNotify::Swap(BagRpcBagChangeNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bags_, other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagRpcBagChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagRpcBagChangeNotify_descriptor_;
  metadata.reflection = BagRpcBagChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
