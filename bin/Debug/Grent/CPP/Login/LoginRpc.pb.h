// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginRpc.proto

#ifndef PROTOBUF_LoginRpc_2eproto__INCLUDED
#define PROTOBUF_LoginRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginRpc_2eproto();
void protobuf_AssignDesc_LoginRpc_2eproto();
void protobuf_ShutdownFile_LoginRpc_2eproto();

class LoginRpcConnectAsk;
class LoginRpcConnectReply;
class LoginRpcLoginAsk;
class LoginRpcLoginReply;

// ===================================================================

class LoginRpcConnectAsk : public ::google::protobuf::Message {
 public:
  LoginRpcConnectAsk();
  virtual ~LoginRpcConnectAsk();

  LoginRpcConnectAsk(const LoginRpcConnectAsk& from);

  inline LoginRpcConnectAsk& operator=(const LoginRpcConnectAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcConnectAsk& default_instance();

  void Swap(LoginRpcConnectAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcConnectAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcConnectAsk& from);
  void MergeFrom(const LoginRpcConnectAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcConnectAsk)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcConnectAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcConnectReply : public ::google::protobuf::Message {
 public:
  LoginRpcConnectReply();
  virtual ~LoginRpcConnectReply();

  LoginRpcConnectReply(const LoginRpcConnectReply& from);

  inline LoginRpcConnectReply& operator=(const LoginRpcConnectReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcConnectReply& default_instance();

  void Swap(LoginRpcConnectReply* other);

  // implements Message ----------------------------------------------

  LoginRpcConnectReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcConnectReply& from);
  void MergeFrom(const LoginRpcConnectReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcConnectReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcConnectReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcLoginAsk : public ::google::protobuf::Message {
 public:
  LoginRpcLoginAsk();
  virtual ~LoginRpcLoginAsk();

  LoginRpcLoginAsk(const LoginRpcLoginAsk& from);

  inline LoginRpcLoginAsk& operator=(const LoginRpcLoginAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginAsk& default_instance();

  void Swap(LoginRpcLoginAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginAsk& from);
  void MergeFrom(const LoginRpcLoginAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string Passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginAsk)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcLoginReply : public ::google::protobuf::Message {
 public:
  LoginRpcLoginReply();
  virtual ~LoginRpcLoginReply();

  LoginRpcLoginReply(const LoginRpcLoginReply& from);

  inline LoginRpcLoginReply& operator=(const LoginRpcLoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcLoginReply& default_instance();

  void Swap(LoginRpcLoginReply* other);

  // implements Message ----------------------------------------------

  LoginRpcLoginReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcLoginReply& from);
  void MergeFrom(const LoginRpcLoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint64 RoleId = 2 [default = -1];
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:LoginRpcLoginReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginRpc_2eproto();
  friend void protobuf_AssignDesc_LoginRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcLoginReply* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRpcConnectAsk

// optional sint32 Type = 1 [default = -1];
inline bool LoginRpcConnectAsk::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcConnectAsk::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcConnectAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcConnectAsk::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 LoginRpcConnectAsk::type() const {
  return type_;
}
inline void LoginRpcConnectAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LoginRpcConnectReply

// optional sint32 Result = 1 [default = -9999];
inline bool LoginRpcConnectReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcConnectReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcConnectReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcConnectReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcConnectReply::result() const {
  return result_;
}
inline void LoginRpcConnectReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 Type = 2 [default = -1];
inline bool LoginRpcConnectReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcConnectReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcConnectReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcConnectReply::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 LoginRpcConnectReply::type() const {
  return type_;
}
inline void LoginRpcConnectReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LoginRpcLoginAsk

// optional string Username = 1;
inline bool LoginRpcLoginAsk::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginAsk::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginAsk::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginAsk::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRpcLoginAsk::username() const {
  return *username_;
}
inline void LoginRpcLoginAsk::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRpcLoginAsk::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRpcLoginAsk::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRpcLoginAsk::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Passwd = 2;
inline bool LoginRpcLoginAsk::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcLoginAsk::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcLoginAsk::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcLoginAsk::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginRpcLoginAsk::passwd() const {
  return *passwd_;
}
inline void LoginRpcLoginAsk::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRpcLoginAsk::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRpcLoginAsk::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRpcLoginAsk::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* LoginRpcLoginAsk::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRpcLoginAsk::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRpcLoginReply

// optional sint32 Result = 1 [default = -9999];
inline bool LoginRpcLoginReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcLoginReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcLoginReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcLoginReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcLoginReply::result() const {
  return result_;
}
inline void LoginRpcLoginReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint64 RoleId = 2 [default = -1];
inline bool LoginRpcLoginReply::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcLoginReply::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcLoginReply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcLoginReply::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(-1);
  clear_has_roleid();
}
inline ::google::protobuf::int64 LoginRpcLoginReply::roleid() const {
  return roleid_;
}
inline void LoginRpcLoginReply::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginRpc_2eproto__INCLUDED
