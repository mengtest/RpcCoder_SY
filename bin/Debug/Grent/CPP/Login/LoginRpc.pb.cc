// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginRpcConnectAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcConnectAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcConnectReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcConnectReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcLoginAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcLoginAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcLoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcLoginReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcCharacterListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcCharacterListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcCharacterListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcCharacterListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcSelectCharacterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcSelectCharacterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcSelectCharacterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcSelectCharacterReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcCreateCharacterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcCreateCharacterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcCreateCharacterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcCreateCharacterReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcSelectSaveUserAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcSelectSaveUserAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcSelectSaveUserReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcSelectSaveUserReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcDeleteCharacterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcDeleteCharacterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcDeleteCharacterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcDeleteCharacterReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginRpc_2eproto() {
  protobuf_AddDesc_LoginRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginRpc.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRpcConnectAsk_descriptor_ = file->message_type(0);
  static const int LoginRpcConnectAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectAsk, type_),
  };
  LoginRpcConnectAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcConnectAsk_descriptor_,
      LoginRpcConnectAsk::default_instance_,
      LoginRpcConnectAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcConnectAsk));
  LoginRpcConnectReply_descriptor_ = file->message_type(1);
  static const int LoginRpcConnectReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectReply, type_),
  };
  LoginRpcConnectReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcConnectReply_descriptor_,
      LoginRpcConnectReply::default_instance_,
      LoginRpcConnectReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcConnectReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcConnectReply));
  LoginRpcLoginAsk_descriptor_ = file->message_type(2);
  static const int LoginRpcLoginAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginAsk, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginAsk, passwd_),
  };
  LoginRpcLoginAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcLoginAsk_descriptor_,
      LoginRpcLoginAsk::default_instance_,
      LoginRpcLoginAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcLoginAsk));
  LoginRpcLoginReply_descriptor_ = file->message_type(3);
  static const int LoginRpcLoginReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginReply, roleid_),
  };
  LoginRpcLoginReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcLoginReply_descriptor_,
      LoginRpcLoginReply::default_instance_,
      LoginRpcLoginReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcLoginReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcLoginReply));
  LoginRpcCharacterListAsk_descriptor_ = file->message_type(4);
  static const int LoginRpcCharacterListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListAsk, accountname_),
  };
  LoginRpcCharacterListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcCharacterListAsk_descriptor_,
      LoginRpcCharacterListAsk::default_instance_,
      LoginRpcCharacterListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcCharacterListAsk));
  LoginRpcCharacterListReply_descriptor_ = file->message_type(5);
  static const int LoginRpcCharacterListReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListReply, characterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListReply, lastselectroleid_),
  };
  LoginRpcCharacterListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcCharacterListReply_descriptor_,
      LoginRpcCharacterListReply::default_instance_,
      LoginRpcCharacterListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCharacterListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcCharacterListReply));
  LoginRpcSelectCharacterAsk_descriptor_ = file->message_type(6);
  static const int LoginRpcSelectCharacterAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterAsk, roleid_),
  };
  LoginRpcSelectCharacterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcSelectCharacterAsk_descriptor_,
      LoginRpcSelectCharacterAsk::default_instance_,
      LoginRpcSelectCharacterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcSelectCharacterAsk));
  LoginRpcSelectCharacterReply_descriptor_ = file->message_type(7);
  static const int LoginRpcSelectCharacterReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, port_),
  };
  LoginRpcSelectCharacterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcSelectCharacterReply_descriptor_,
      LoginRpcSelectCharacterReply::default_instance_,
      LoginRpcSelectCharacterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectCharacterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcSelectCharacterReply));
  LoginRpcCreateCharacterAsk_descriptor_ = file->message_type(8);
  static const int LoginRpcCreateCharacterAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterAsk, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterAsk, configid_),
  };
  LoginRpcCreateCharacterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcCreateCharacterAsk_descriptor_,
      LoginRpcCreateCharacterAsk::default_instance_,
      LoginRpcCreateCharacterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcCreateCharacterAsk));
  LoginRpcCreateCharacterReply_descriptor_ = file->message_type(9);
  static const int LoginRpcCreateCharacterReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterReply, roleid_),
  };
  LoginRpcCreateCharacterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcCreateCharacterReply_descriptor_,
      LoginRpcCreateCharacterReply::default_instance_,
      LoginRpcCreateCharacterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcCreateCharacterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcCreateCharacterReply));
  LoginRpcSelectSaveUserAsk_descriptor_ = file->message_type(10);
  static const int LoginRpcSelectSaveUserAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserAsk, roleid_),
  };
  LoginRpcSelectSaveUserAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcSelectSaveUserAsk_descriptor_,
      LoginRpcSelectSaveUserAsk::default_instance_,
      LoginRpcSelectSaveUserAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcSelectSaveUserAsk));
  LoginRpcSelectSaveUserReply_descriptor_ = file->message_type(11);
  static const int LoginRpcSelectSaveUserReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserReply, result_),
  };
  LoginRpcSelectSaveUserReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcSelectSaveUserReply_descriptor_,
      LoginRpcSelectSaveUserReply::default_instance_,
      LoginRpcSelectSaveUserReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcSelectSaveUserReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcSelectSaveUserReply));
  LoginRpcDeleteCharacterAsk_descriptor_ = file->message_type(12);
  static const int LoginRpcDeleteCharacterAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterAsk, roleid_),
  };
  LoginRpcDeleteCharacterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcDeleteCharacterAsk_descriptor_,
      LoginRpcDeleteCharacterAsk::default_instance_,
      LoginRpcDeleteCharacterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcDeleteCharacterAsk));
  LoginRpcDeleteCharacterReply_descriptor_ = file->message_type(13);
  static const int LoginRpcDeleteCharacterReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterReply, result_),
  };
  LoginRpcDeleteCharacterReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcDeleteCharacterReply_descriptor_,
      LoginRpcDeleteCharacterReply::default_instance_,
      LoginRpcDeleteCharacterReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcDeleteCharacterReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcDeleteCharacterReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcConnectAsk_descriptor_, &LoginRpcConnectAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcConnectReply_descriptor_, &LoginRpcConnectReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcLoginAsk_descriptor_, &LoginRpcLoginAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcLoginReply_descriptor_, &LoginRpcLoginReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcCharacterListAsk_descriptor_, &LoginRpcCharacterListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcCharacterListReply_descriptor_, &LoginRpcCharacterListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcSelectCharacterAsk_descriptor_, &LoginRpcSelectCharacterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcSelectCharacterReply_descriptor_, &LoginRpcSelectCharacterReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcCreateCharacterAsk_descriptor_, &LoginRpcCreateCharacterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcCreateCharacterReply_descriptor_, &LoginRpcCreateCharacterReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcSelectSaveUserAsk_descriptor_, &LoginRpcSelectSaveUserAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcSelectSaveUserReply_descriptor_, &LoginRpcSelectSaveUserReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcDeleteCharacterAsk_descriptor_, &LoginRpcDeleteCharacterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcDeleteCharacterReply_descriptor_, &LoginRpcDeleteCharacterReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginRpc_2eproto() {
  delete LoginRpcConnectAsk::default_instance_;
  delete LoginRpcConnectAsk_reflection_;
  delete LoginRpcConnectReply::default_instance_;
  delete LoginRpcConnectReply_reflection_;
  delete LoginRpcLoginAsk::default_instance_;
  delete LoginRpcLoginAsk_reflection_;
  delete LoginRpcLoginReply::default_instance_;
  delete LoginRpcLoginReply_reflection_;
  delete LoginRpcCharacterListAsk::default_instance_;
  delete LoginRpcCharacterListAsk_reflection_;
  delete LoginRpcCharacterListReply::default_instance_;
  delete LoginRpcCharacterListReply_reflection_;
  delete LoginRpcSelectCharacterAsk::default_instance_;
  delete LoginRpcSelectCharacterAsk_reflection_;
  delete LoginRpcSelectCharacterReply::default_instance_;
  delete LoginRpcSelectCharacterReply_reflection_;
  delete LoginRpcCreateCharacterAsk::default_instance_;
  delete LoginRpcCreateCharacterAsk_reflection_;
  delete LoginRpcCreateCharacterReply::default_instance_;
  delete LoginRpcCreateCharacterReply_reflection_;
  delete LoginRpcSelectSaveUserAsk::default_instance_;
  delete LoginRpcSelectSaveUserAsk_reflection_;
  delete LoginRpcSelectSaveUserReply::default_instance_;
  delete LoginRpcSelectSaveUserReply_reflection_;
  delete LoginRpcDeleteCharacterAsk::default_instance_;
  delete LoginRpcDeleteCharacterAsk_reflection_;
  delete LoginRpcDeleteCharacterReply::default_instance_;
  delete LoginRpcDeleteCharacterReply_reflection_;
}

void protobuf_AddDesc_LoginRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016LoginRpc.proto\032\022PublicStruct.proto\"&\n\022"
    "LoginRpcConnectAsk\022\020\n\004Type\030\001 \001(\021:\002-1\">\n\024"
    "LoginRpcConnectReply\022\025\n\006Result\030\001 \001(\021:\005-9"
    "999\022\017\n\004Type\030\002 \001(\021:\0010\"4\n\020LoginRpcLoginAsk"
    "\022\020\n\010Username\030\001 \001(\t\022\016\n\006Passwd\030\002 \001(\t\">\n\022Lo"
    "ginRpcLoginReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022"
    "\021\n\006RoleId\030\002 \001(\004:\0010\"/\n\030LoginRpcCharacterL"
    "istAsk\022\023\n\013Accountname\030\001 \001(\t\"w\n\032LoginRpcC"
    "haracterListReply\022\025\n\006Result\030\001 \001(\021:\005-9999"
    "\022%\n\rCharacterList\030\002 \003(\0132\016.CharacterInfo\022"
    "\033\n\020LastSelectRoleId\030\004 \001(\004:\0010\"/\n\032LoginRpc"
    "SelectCharacterAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"e\n"
    "\034LoginRpcSelectCharacterReply\022\025\n\006Result\030"
    "\001 \001(\021:\005-9999\022\021\n\006RoleId\030\002 \001(\004:\0010\022\n\n\002Ip\030\003 "
    "\001(\t\022\017\n\004Port\030\004 \001(\021:\0010\"D\n\032LoginRpcCreateCh"
    "aracterAsk\022\020\n\010Nickname\030\001 \001(\t\022\024\n\010ConfigId"
    "\030\002 \001(\021:\002-1\"H\n\034LoginRpcCreateCharacterRep"
    "ly\022\025\n\006Result\030\001 \001(\021:\005-9999\022\021\n\006RoleId\030\002 \001("
    "\004:\0010\".\n\031LoginRpcSelectSaveUserAsk\022\021\n\006Rol"
    "eId\030\001 \001(\004:\0010\"4\n\033LoginRpcSelectSaveUserRe"
    "ply\022\025\n\006Result\030\001 \001(\021:\005-9999\"/\n\032LoginRpcDe"
    "leteCharacterAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"5\n\034L"
    "oginRpcDeleteCharacterReply\022\025\n\006Result\030\001 "
    "\001(\021:\005-9999", 930);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginRpc.proto", &protobuf_RegisterTypes);
  LoginRpcConnectAsk::default_instance_ = new LoginRpcConnectAsk();
  LoginRpcConnectReply::default_instance_ = new LoginRpcConnectReply();
  LoginRpcLoginAsk::default_instance_ = new LoginRpcLoginAsk();
  LoginRpcLoginReply::default_instance_ = new LoginRpcLoginReply();
  LoginRpcCharacterListAsk::default_instance_ = new LoginRpcCharacterListAsk();
  LoginRpcCharacterListReply::default_instance_ = new LoginRpcCharacterListReply();
  LoginRpcSelectCharacterAsk::default_instance_ = new LoginRpcSelectCharacterAsk();
  LoginRpcSelectCharacterReply::default_instance_ = new LoginRpcSelectCharacterReply();
  LoginRpcCreateCharacterAsk::default_instance_ = new LoginRpcCreateCharacterAsk();
  LoginRpcCreateCharacterReply::default_instance_ = new LoginRpcCreateCharacterReply();
  LoginRpcSelectSaveUserAsk::default_instance_ = new LoginRpcSelectSaveUserAsk();
  LoginRpcSelectSaveUserReply::default_instance_ = new LoginRpcSelectSaveUserReply();
  LoginRpcDeleteCharacterAsk::default_instance_ = new LoginRpcDeleteCharacterAsk();
  LoginRpcDeleteCharacterReply::default_instance_ = new LoginRpcDeleteCharacterReply();
  LoginRpcConnectAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcConnectReply::default_instance_->InitAsDefaultInstance();
  LoginRpcLoginAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcLoginReply::default_instance_->InitAsDefaultInstance();
  LoginRpcCharacterListAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcCharacterListReply::default_instance_->InitAsDefaultInstance();
  LoginRpcSelectCharacterAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcSelectCharacterReply::default_instance_->InitAsDefaultInstance();
  LoginRpcCreateCharacterAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcCreateCharacterReply::default_instance_->InitAsDefaultInstance();
  LoginRpcSelectSaveUserAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcSelectSaveUserReply::default_instance_->InitAsDefaultInstance();
  LoginRpcDeleteCharacterAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcDeleteCharacterReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginRpc_2eproto {
  StaticDescriptorInitializer_LoginRpc_2eproto() {
    protobuf_AddDesc_LoginRpc_2eproto();
  }
} static_descriptor_initializer_LoginRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginRpcConnectAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

LoginRpcConnectAsk::LoginRpcConnectAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcConnectAsk::InitAsDefaultInstance() {
}

LoginRpcConnectAsk::LoginRpcConnectAsk(const LoginRpcConnectAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcConnectAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcConnectAsk::~LoginRpcConnectAsk() {
  SharedDtor();
}

void LoginRpcConnectAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcConnectAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcConnectAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcConnectAsk_descriptor_;
}

const LoginRpcConnectAsk& LoginRpcConnectAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcConnectAsk* LoginRpcConnectAsk::default_instance_ = NULL;

LoginRpcConnectAsk* LoginRpcConnectAsk::New() const {
  return new LoginRpcConnectAsk;
}

void LoginRpcConnectAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcConnectAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcConnectAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcConnectAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcConnectAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcConnectAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcConnectAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcConnectAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcConnectAsk::MergeFrom(const LoginRpcConnectAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcConnectAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcConnectAsk::CopyFrom(const LoginRpcConnectAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcConnectAsk::IsInitialized() const {

  return true;
}

void LoginRpcConnectAsk::Swap(LoginRpcConnectAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcConnectAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcConnectAsk_descriptor_;
  metadata.reflection = LoginRpcConnectAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcConnectReply::kResultFieldNumber;
const int LoginRpcConnectReply::kTypeFieldNumber;
#endif  // !_MSC_VER

LoginRpcConnectReply::LoginRpcConnectReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcConnectReply::InitAsDefaultInstance() {
}

LoginRpcConnectReply::LoginRpcConnectReply(const LoginRpcConnectReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcConnectReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcConnectReply::~LoginRpcConnectReply() {
  SharedDtor();
}

void LoginRpcConnectReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcConnectReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcConnectReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcConnectReply_descriptor_;
}

const LoginRpcConnectReply& LoginRpcConnectReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcConnectReply* LoginRpcConnectReply::default_instance_ = NULL;

LoginRpcConnectReply* LoginRpcConnectReply::New() const {
  return new LoginRpcConnectReply;
}

void LoginRpcConnectReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcConnectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcConnectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcConnectReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcConnectReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcConnectReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcConnectReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcConnectReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcConnectReply::MergeFrom(const LoginRpcConnectReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcConnectReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcConnectReply::CopyFrom(const LoginRpcConnectReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcConnectReply::IsInitialized() const {

  return true;
}

void LoginRpcConnectReply::Swap(LoginRpcConnectReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcConnectReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcConnectReply_descriptor_;
  metadata.reflection = LoginRpcConnectReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcLoginAsk::kUsernameFieldNumber;
const int LoginRpcLoginAsk::kPasswdFieldNumber;
#endif  // !_MSC_VER

LoginRpcLoginAsk::LoginRpcLoginAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcLoginAsk::InitAsDefaultInstance() {
}

LoginRpcLoginAsk::LoginRpcLoginAsk(const LoginRpcLoginAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcLoginAsk::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcLoginAsk::~LoginRpcLoginAsk() {
  SharedDtor();
}

void LoginRpcLoginAsk::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void LoginRpcLoginAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcLoginAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcLoginAsk_descriptor_;
}

const LoginRpcLoginAsk& LoginRpcLoginAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcLoginAsk* LoginRpcLoginAsk::default_instance_ = NULL;

LoginRpcLoginAsk* LoginRpcLoginAsk::New() const {
  return new LoginRpcLoginAsk;
}

void LoginRpcLoginAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcLoginAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Passwd;
        break;
      }

      // optional string Passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcLoginAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string Passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcLoginAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string Passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcLoginAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcLoginAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcLoginAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcLoginAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcLoginAsk::MergeFrom(const LoginRpcLoginAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcLoginAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcLoginAsk::CopyFrom(const LoginRpcLoginAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcLoginAsk::IsInitialized() const {

  return true;
}

void LoginRpcLoginAsk::Swap(LoginRpcLoginAsk* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcLoginAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcLoginAsk_descriptor_;
  metadata.reflection = LoginRpcLoginAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcLoginReply::kResultFieldNumber;
const int LoginRpcLoginReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcLoginReply::LoginRpcLoginReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcLoginReply::InitAsDefaultInstance() {
}

LoginRpcLoginReply::LoginRpcLoginReply(const LoginRpcLoginReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcLoginReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcLoginReply::~LoginRpcLoginReply() {
  SharedDtor();
}

void LoginRpcLoginReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcLoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcLoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcLoginReply_descriptor_;
}

const LoginRpcLoginReply& LoginRpcLoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcLoginReply* LoginRpcLoginReply::default_instance_ = NULL;

LoginRpcLoginReply* LoginRpcLoginReply::New() const {
  return new LoginRpcLoginReply;
}

void LoginRpcLoginReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcLoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcLoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcLoginReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcLoginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcLoginReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcLoginReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcLoginReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcLoginReply::MergeFrom(const LoginRpcLoginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcLoginReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcLoginReply::CopyFrom(const LoginRpcLoginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcLoginReply::IsInitialized() const {

  return true;
}

void LoginRpcLoginReply::Swap(LoginRpcLoginReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcLoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcLoginReply_descriptor_;
  metadata.reflection = LoginRpcLoginReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcCharacterListAsk::kAccountnameFieldNumber;
#endif  // !_MSC_VER

LoginRpcCharacterListAsk::LoginRpcCharacterListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcCharacterListAsk::InitAsDefaultInstance() {
}

LoginRpcCharacterListAsk::LoginRpcCharacterListAsk(const LoginRpcCharacterListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcCharacterListAsk::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcCharacterListAsk::~LoginRpcCharacterListAsk() {
  SharedDtor();
}

void LoginRpcCharacterListAsk::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void LoginRpcCharacterListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcCharacterListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcCharacterListAsk_descriptor_;
}

const LoginRpcCharacterListAsk& LoginRpcCharacterListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcCharacterListAsk* LoginRpcCharacterListAsk::default_instance_ = NULL;

LoginRpcCharacterListAsk* LoginRpcCharacterListAsk::New() const {
  return new LoginRpcCharacterListAsk;
}

void LoginRpcCharacterListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcCharacterListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Accountname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcCharacterListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Accountname = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcCharacterListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Accountname = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcCharacterListAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Accountname = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcCharacterListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcCharacterListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcCharacterListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcCharacterListAsk::MergeFrom(const LoginRpcCharacterListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcCharacterListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcCharacterListAsk::CopyFrom(const LoginRpcCharacterListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcCharacterListAsk::IsInitialized() const {

  return true;
}

void LoginRpcCharacterListAsk::Swap(LoginRpcCharacterListAsk* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcCharacterListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcCharacterListAsk_descriptor_;
  metadata.reflection = LoginRpcCharacterListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcCharacterListReply::kResultFieldNumber;
const int LoginRpcCharacterListReply::kCharacterListFieldNumber;
const int LoginRpcCharacterListReply::kLastSelectRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcCharacterListReply::LoginRpcCharacterListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcCharacterListReply::InitAsDefaultInstance() {
}

LoginRpcCharacterListReply::LoginRpcCharacterListReply(const LoginRpcCharacterListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcCharacterListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  lastselectroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcCharacterListReply::~LoginRpcCharacterListReply() {
  SharedDtor();
}

void LoginRpcCharacterListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcCharacterListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcCharacterListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcCharacterListReply_descriptor_;
}

const LoginRpcCharacterListReply& LoginRpcCharacterListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcCharacterListReply* LoginRpcCharacterListReply::default_instance_ = NULL;

LoginRpcCharacterListReply* LoginRpcCharacterListReply::New() const {
  return new LoginRpcCharacterListReply;
}

void LoginRpcCharacterListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    lastselectroleid_ = GOOGLE_ULONGLONG(0);
  }
  characterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcCharacterListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CharacterList;
        break;
      }

      // repeated .CharacterInfo CharacterList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CharacterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CharacterList;
        if (input->ExpectTag(32)) goto parse_LastSelectRoleId;
        break;
      }

      // optional uint64 LastSelectRoleId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastSelectRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastselectroleid_)));
          set_has_lastselectroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcCharacterListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .CharacterInfo CharacterList = 2;
  for (int i = 0; i < this->characterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->characterlist(i), output);
  }

  // optional uint64 LastSelectRoleId = 4 [default = 0];
  if (has_lastselectroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastselectroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcCharacterListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .CharacterInfo CharacterList = 2;
  for (int i = 0; i < this->characterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->characterlist(i), target);
  }

  // optional uint64 LastSelectRoleId = 4 [default = 0];
  if (has_lastselectroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastselectroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcCharacterListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 LastSelectRoleId = 4 [default = 0];
    if (has_lastselectroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastselectroleid());
    }

  }
  // repeated .CharacterInfo CharacterList = 2;
  total_size += 1 * this->characterlist_size();
  for (int i = 0; i < this->characterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characterlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcCharacterListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcCharacterListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcCharacterListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcCharacterListReply::MergeFrom(const LoginRpcCharacterListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  characterlist_.MergeFrom(from.characterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lastselectroleid()) {
      set_lastselectroleid(from.lastselectroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcCharacterListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcCharacterListReply::CopyFrom(const LoginRpcCharacterListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcCharacterListReply::IsInitialized() const {

  return true;
}

void LoginRpcCharacterListReply::Swap(LoginRpcCharacterListReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    characterlist_.Swap(&other->characterlist_);
    std::swap(lastselectroleid_, other->lastselectroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcCharacterListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcCharacterListReply_descriptor_;
  metadata.reflection = LoginRpcCharacterListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcSelectCharacterAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcSelectCharacterAsk::LoginRpcSelectCharacterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcSelectCharacterAsk::InitAsDefaultInstance() {
}

LoginRpcSelectCharacterAsk::LoginRpcSelectCharacterAsk(const LoginRpcSelectCharacterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcSelectCharacterAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcSelectCharacterAsk::~LoginRpcSelectCharacterAsk() {
  SharedDtor();
}

void LoginRpcSelectCharacterAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcSelectCharacterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcSelectCharacterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcSelectCharacterAsk_descriptor_;
}

const LoginRpcSelectCharacterAsk& LoginRpcSelectCharacterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcSelectCharacterAsk* LoginRpcSelectCharacterAsk::default_instance_ = NULL;

LoginRpcSelectCharacterAsk* LoginRpcSelectCharacterAsk::New() const {
  return new LoginRpcSelectCharacterAsk;
}

void LoginRpcSelectCharacterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcSelectCharacterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcSelectCharacterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcSelectCharacterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcSelectCharacterAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcSelectCharacterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcSelectCharacterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcSelectCharacterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcSelectCharacterAsk::MergeFrom(const LoginRpcSelectCharacterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcSelectCharacterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcSelectCharacterAsk::CopyFrom(const LoginRpcSelectCharacterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcSelectCharacterAsk::IsInitialized() const {

  return true;
}

void LoginRpcSelectCharacterAsk::Swap(LoginRpcSelectCharacterAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcSelectCharacterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcSelectCharacterAsk_descriptor_;
  metadata.reflection = LoginRpcSelectCharacterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcSelectCharacterReply::kResultFieldNumber;
const int LoginRpcSelectCharacterReply::kRoleIdFieldNumber;
const int LoginRpcSelectCharacterReply::kIpFieldNumber;
const int LoginRpcSelectCharacterReply::kPortFieldNumber;
#endif  // !_MSC_VER

LoginRpcSelectCharacterReply::LoginRpcSelectCharacterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcSelectCharacterReply::InitAsDefaultInstance() {
}

LoginRpcSelectCharacterReply::LoginRpcSelectCharacterReply(const LoginRpcSelectCharacterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcSelectCharacterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcSelectCharacterReply::~LoginRpcSelectCharacterReply() {
  SharedDtor();
}

void LoginRpcSelectCharacterReply::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginRpcSelectCharacterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcSelectCharacterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcSelectCharacterReply_descriptor_;
}

const LoginRpcSelectCharacterReply& LoginRpcSelectCharacterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcSelectCharacterReply* LoginRpcSelectCharacterReply::default_instance_ = NULL;

LoginRpcSelectCharacterReply* LoginRpcSelectCharacterReply::New() const {
  return new LoginRpcSelectCharacterReply;
}

void LoginRpcSelectCharacterReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcSelectCharacterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Ip;
        break;
      }

      // optional string Ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Port;
        break;
      }

      // optional sint32 Port = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcSelectCharacterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional string Ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional sint32 Port = 4 [default = 0];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcSelectCharacterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional string Ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional sint32 Port = 4 [default = 0];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcSelectCharacterReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string Ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional sint32 Port = 4 [default = 0];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcSelectCharacterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcSelectCharacterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcSelectCharacterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcSelectCharacterReply::MergeFrom(const LoginRpcSelectCharacterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcSelectCharacterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcSelectCharacterReply::CopyFrom(const LoginRpcSelectCharacterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcSelectCharacterReply::IsInitialized() const {

  return true;
}

void LoginRpcSelectCharacterReply::Swap(LoginRpcSelectCharacterReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcSelectCharacterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcSelectCharacterReply_descriptor_;
  metadata.reflection = LoginRpcSelectCharacterReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcCreateCharacterAsk::kNicknameFieldNumber;
const int LoginRpcCreateCharacterAsk::kConfigIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcCreateCharacterAsk::LoginRpcCreateCharacterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcCreateCharacterAsk::InitAsDefaultInstance() {
}

LoginRpcCreateCharacterAsk::LoginRpcCreateCharacterAsk(const LoginRpcCreateCharacterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcCreateCharacterAsk::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  configid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcCreateCharacterAsk::~LoginRpcCreateCharacterAsk() {
  SharedDtor();
}

void LoginRpcCreateCharacterAsk::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void LoginRpcCreateCharacterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcCreateCharacterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcCreateCharacterAsk_descriptor_;
}

const LoginRpcCreateCharacterAsk& LoginRpcCreateCharacterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcCreateCharacterAsk* LoginRpcCreateCharacterAsk::default_instance_ = NULL;

LoginRpcCreateCharacterAsk* LoginRpcCreateCharacterAsk::New() const {
  return new LoginRpcCreateCharacterAsk;
}

void LoginRpcCreateCharacterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    configid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcCreateCharacterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ConfigId;
        break;
      }

      // optional sint32 ConfigId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcCreateCharacterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional sint32 ConfigId = 2 [default = -1];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcCreateCharacterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional sint32 ConfigId = 2 [default = -1];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcCreateCharacterAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional sint32 ConfigId = 2 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcCreateCharacterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcCreateCharacterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcCreateCharacterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcCreateCharacterAsk::MergeFrom(const LoginRpcCreateCharacterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcCreateCharacterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcCreateCharacterAsk::CopyFrom(const LoginRpcCreateCharacterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcCreateCharacterAsk::IsInitialized() const {

  return true;
}

void LoginRpcCreateCharacterAsk::Swap(LoginRpcCreateCharacterAsk* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcCreateCharacterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcCreateCharacterAsk_descriptor_;
  metadata.reflection = LoginRpcCreateCharacterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcCreateCharacterReply::kResultFieldNumber;
const int LoginRpcCreateCharacterReply::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcCreateCharacterReply::LoginRpcCreateCharacterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcCreateCharacterReply::InitAsDefaultInstance() {
}

LoginRpcCreateCharacterReply::LoginRpcCreateCharacterReply(const LoginRpcCreateCharacterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcCreateCharacterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcCreateCharacterReply::~LoginRpcCreateCharacterReply() {
  SharedDtor();
}

void LoginRpcCreateCharacterReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcCreateCharacterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcCreateCharacterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcCreateCharacterReply_descriptor_;
}

const LoginRpcCreateCharacterReply& LoginRpcCreateCharacterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcCreateCharacterReply* LoginRpcCreateCharacterReply::default_instance_ = NULL;

LoginRpcCreateCharacterReply* LoginRpcCreateCharacterReply::New() const {
  return new LoginRpcCreateCharacterReply;
}

void LoginRpcCreateCharacterReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcCreateCharacterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcCreateCharacterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcCreateCharacterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcCreateCharacterReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcCreateCharacterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcCreateCharacterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcCreateCharacterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcCreateCharacterReply::MergeFrom(const LoginRpcCreateCharacterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcCreateCharacterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcCreateCharacterReply::CopyFrom(const LoginRpcCreateCharacterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcCreateCharacterReply::IsInitialized() const {

  return true;
}

void LoginRpcCreateCharacterReply::Swap(LoginRpcCreateCharacterReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcCreateCharacterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcCreateCharacterReply_descriptor_;
  metadata.reflection = LoginRpcCreateCharacterReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcSelectSaveUserAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcSelectSaveUserAsk::LoginRpcSelectSaveUserAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcSelectSaveUserAsk::InitAsDefaultInstance() {
}

LoginRpcSelectSaveUserAsk::LoginRpcSelectSaveUserAsk(const LoginRpcSelectSaveUserAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcSelectSaveUserAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcSelectSaveUserAsk::~LoginRpcSelectSaveUserAsk() {
  SharedDtor();
}

void LoginRpcSelectSaveUserAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcSelectSaveUserAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcSelectSaveUserAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcSelectSaveUserAsk_descriptor_;
}

const LoginRpcSelectSaveUserAsk& LoginRpcSelectSaveUserAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcSelectSaveUserAsk* LoginRpcSelectSaveUserAsk::default_instance_ = NULL;

LoginRpcSelectSaveUserAsk* LoginRpcSelectSaveUserAsk::New() const {
  return new LoginRpcSelectSaveUserAsk;
}

void LoginRpcSelectSaveUserAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcSelectSaveUserAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcSelectSaveUserAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcSelectSaveUserAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcSelectSaveUserAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcSelectSaveUserAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcSelectSaveUserAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcSelectSaveUserAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcSelectSaveUserAsk::MergeFrom(const LoginRpcSelectSaveUserAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcSelectSaveUserAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcSelectSaveUserAsk::CopyFrom(const LoginRpcSelectSaveUserAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcSelectSaveUserAsk::IsInitialized() const {

  return true;
}

void LoginRpcSelectSaveUserAsk::Swap(LoginRpcSelectSaveUserAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcSelectSaveUserAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcSelectSaveUserAsk_descriptor_;
  metadata.reflection = LoginRpcSelectSaveUserAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcSelectSaveUserReply::kResultFieldNumber;
#endif  // !_MSC_VER

LoginRpcSelectSaveUserReply::LoginRpcSelectSaveUserReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcSelectSaveUserReply::InitAsDefaultInstance() {
}

LoginRpcSelectSaveUserReply::LoginRpcSelectSaveUserReply(const LoginRpcSelectSaveUserReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcSelectSaveUserReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcSelectSaveUserReply::~LoginRpcSelectSaveUserReply() {
  SharedDtor();
}

void LoginRpcSelectSaveUserReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcSelectSaveUserReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcSelectSaveUserReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcSelectSaveUserReply_descriptor_;
}

const LoginRpcSelectSaveUserReply& LoginRpcSelectSaveUserReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcSelectSaveUserReply* LoginRpcSelectSaveUserReply::default_instance_ = NULL;

LoginRpcSelectSaveUserReply* LoginRpcSelectSaveUserReply::New() const {
  return new LoginRpcSelectSaveUserReply;
}

void LoginRpcSelectSaveUserReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcSelectSaveUserReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcSelectSaveUserReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcSelectSaveUserReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcSelectSaveUserReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcSelectSaveUserReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcSelectSaveUserReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcSelectSaveUserReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcSelectSaveUserReply::MergeFrom(const LoginRpcSelectSaveUserReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcSelectSaveUserReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcSelectSaveUserReply::CopyFrom(const LoginRpcSelectSaveUserReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcSelectSaveUserReply::IsInitialized() const {

  return true;
}

void LoginRpcSelectSaveUserReply::Swap(LoginRpcSelectSaveUserReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcSelectSaveUserReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcSelectSaveUserReply_descriptor_;
  metadata.reflection = LoginRpcSelectSaveUserReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcDeleteCharacterAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

LoginRpcDeleteCharacterAsk::LoginRpcDeleteCharacterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcDeleteCharacterAsk::InitAsDefaultInstance() {
}

LoginRpcDeleteCharacterAsk::LoginRpcDeleteCharacterAsk(const LoginRpcDeleteCharacterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcDeleteCharacterAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcDeleteCharacterAsk::~LoginRpcDeleteCharacterAsk() {
  SharedDtor();
}

void LoginRpcDeleteCharacterAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcDeleteCharacterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcDeleteCharacterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcDeleteCharacterAsk_descriptor_;
}

const LoginRpcDeleteCharacterAsk& LoginRpcDeleteCharacterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcDeleteCharacterAsk* LoginRpcDeleteCharacterAsk::default_instance_ = NULL;

LoginRpcDeleteCharacterAsk* LoginRpcDeleteCharacterAsk::New() const {
  return new LoginRpcDeleteCharacterAsk;
}

void LoginRpcDeleteCharacterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcDeleteCharacterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcDeleteCharacterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcDeleteCharacterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcDeleteCharacterAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcDeleteCharacterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcDeleteCharacterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcDeleteCharacterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcDeleteCharacterAsk::MergeFrom(const LoginRpcDeleteCharacterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcDeleteCharacterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcDeleteCharacterAsk::CopyFrom(const LoginRpcDeleteCharacterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcDeleteCharacterAsk::IsInitialized() const {

  return true;
}

void LoginRpcDeleteCharacterAsk::Swap(LoginRpcDeleteCharacterAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcDeleteCharacterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcDeleteCharacterAsk_descriptor_;
  metadata.reflection = LoginRpcDeleteCharacterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcDeleteCharacterReply::kResultFieldNumber;
#endif  // !_MSC_VER

LoginRpcDeleteCharacterReply::LoginRpcDeleteCharacterReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcDeleteCharacterReply::InitAsDefaultInstance() {
}

LoginRpcDeleteCharacterReply::LoginRpcDeleteCharacterReply(const LoginRpcDeleteCharacterReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcDeleteCharacterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcDeleteCharacterReply::~LoginRpcDeleteCharacterReply() {
  SharedDtor();
}

void LoginRpcDeleteCharacterReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcDeleteCharacterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcDeleteCharacterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcDeleteCharacterReply_descriptor_;
}

const LoginRpcDeleteCharacterReply& LoginRpcDeleteCharacterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginRpc_2eproto();
  return *default_instance_;
}

LoginRpcDeleteCharacterReply* LoginRpcDeleteCharacterReply::default_instance_ = NULL;

LoginRpcDeleteCharacterReply* LoginRpcDeleteCharacterReply::New() const {
  return new LoginRpcDeleteCharacterReply;
}

void LoginRpcDeleteCharacterReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcDeleteCharacterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcDeleteCharacterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcDeleteCharacterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcDeleteCharacterReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcDeleteCharacterReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcDeleteCharacterReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcDeleteCharacterReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcDeleteCharacterReply::MergeFrom(const LoginRpcDeleteCharacterReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcDeleteCharacterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcDeleteCharacterReply::CopyFrom(const LoginRpcDeleteCharacterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcDeleteCharacterReply::IsInitialized() const {

  return true;
}

void LoginRpcDeleteCharacterReply::Swap(LoginRpcDeleteCharacterReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcDeleteCharacterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcDeleteCharacterReply_descriptor_;
  metadata.reflection = LoginRpcDeleteCharacterReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
